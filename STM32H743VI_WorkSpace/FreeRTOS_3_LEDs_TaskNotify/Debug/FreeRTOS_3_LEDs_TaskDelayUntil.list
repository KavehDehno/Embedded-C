
FreeRTOS_3_LEDs_TaskDelayUntil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f0c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800a1ac  0800a1ac  0001a1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a3e4  0800a3e4  0001a3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a3ec  0800a3ec  0001a3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a3f0  0800a3f0  0001a3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  24000000  0800a3f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006c6c  24000020  0800a414  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006c8c  0800a414  00026c8c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   000325d9  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d37  00000000  00000000  00052627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d40  00000000  00000000  00057360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001b98  00000000  00000000  000590a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b4a8  00000000  00000000  0005ac38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002123f  00000000  00000000  000960e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017958f  00000000  00000000  000b731f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002308ae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007e5c  00000000  00000000  00230904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000020 	.word	0x24000020
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a194 	.word	0x0800a194

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000024 	.word	0x24000024
 80002dc:	0800a194 	.word	0x0800a194

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	24006be4 	.word	0x24006be4

08000374 <strlen>:
 8000374:	4603      	mov	r3, r0
 8000376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800037a:	2a00      	cmp	r2, #0
 800037c:	d1fb      	bne.n	8000376 <strlen+0x2>
 800037e:	1a18      	subs	r0, r3, r0
 8000380:	3801      	subs	r0, #1
 8000382:	4770      	bx	lr

08000384 <__aeabi_uldivmod>:
 8000384:	b953      	cbnz	r3, 800039c <__aeabi_uldivmod+0x18>
 8000386:	b94a      	cbnz	r2, 800039c <__aeabi_uldivmod+0x18>
 8000388:	2900      	cmp	r1, #0
 800038a:	bf08      	it	eq
 800038c:	2800      	cmpeq	r0, #0
 800038e:	bf1c      	itt	ne
 8000390:	f04f 31ff 	movne.w	r1, #4294967295
 8000394:	f04f 30ff 	movne.w	r0, #4294967295
 8000398:	f000 b96e 	b.w	8000678 <__aeabi_idiv0>
 800039c:	f1ad 0c08 	sub.w	ip, sp, #8
 80003a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a4:	f000 f806 	bl	80003b4 <__udivmoddi4>
 80003a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003b0:	b004      	add	sp, #16
 80003b2:	4770      	bx	lr

080003b4 <__udivmoddi4>:
 80003b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b8:	9d08      	ldr	r5, [sp, #32]
 80003ba:	4604      	mov	r4, r0
 80003bc:	468c      	mov	ip, r1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	f040 8083 	bne.w	80004ca <__udivmoddi4+0x116>
 80003c4:	428a      	cmp	r2, r1
 80003c6:	4617      	mov	r7, r2
 80003c8:	d947      	bls.n	800045a <__udivmoddi4+0xa6>
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	b142      	cbz	r2, 80003e2 <__udivmoddi4+0x2e>
 80003d0:	f1c2 0020 	rsb	r0, r2, #32
 80003d4:	fa24 f000 	lsr.w	r0, r4, r0
 80003d8:	4091      	lsls	r1, r2
 80003da:	4097      	lsls	r7, r2
 80003dc:	ea40 0c01 	orr.w	ip, r0, r1
 80003e0:	4094      	lsls	r4, r2
 80003e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e6:	0c23      	lsrs	r3, r4, #16
 80003e8:	fbbc f6f8 	udiv	r6, ip, r8
 80003ec:	fa1f fe87 	uxth.w	lr, r7
 80003f0:	fb08 c116 	mls	r1, r8, r6, ip
 80003f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f8:	fb06 f10e 	mul.w	r1, r6, lr
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x60>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 8119 	bcs.w	800063c <__udivmoddi4+0x288>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 8116 	bls.w	800063c <__udivmoddi4+0x288>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 fe0e 	mul.w	lr, r0, lr
 8000428:	45a6      	cmp	lr, r4
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x8c>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	f080 8105 	bcs.w	8000640 <__udivmoddi4+0x28c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8102 	bls.w	8000640 <__udivmoddi4+0x28c>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000444:	eba4 040e 	sub.w	r4, r4, lr
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa0>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	b902      	cbnz	r2, 800045e <__udivmoddi4+0xaa>
 800045c:	deff      	udf	#255	; 0xff
 800045e:	fab2 f282 	clz	r2, r2
 8000462:	2a00      	cmp	r2, #0
 8000464:	d150      	bne.n	8000508 <__udivmoddi4+0x154>
 8000466:	1bcb      	subs	r3, r1, r7
 8000468:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046c:	fa1f f887 	uxth.w	r8, r7
 8000470:	2601      	movs	r6, #1
 8000472:	fbb3 fcfe 	udiv	ip, r3, lr
 8000476:	0c21      	lsrs	r1, r4, #16
 8000478:	fb0e 331c 	mls	r3, lr, ip, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb08 f30c 	mul.w	r3, r8, ip
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0xe4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0xe2>
 8000490:	428b      	cmp	r3, r1
 8000492:	f200 80e9 	bhi.w	8000668 <__udivmoddi4+0x2b4>
 8000496:	4684      	mov	ip, r0
 8000498:	1ac9      	subs	r1, r1, r3
 800049a:	b2a3      	uxth	r3, r4
 800049c:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a0:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a8:	fb08 f800 	mul.w	r8, r8, r0
 80004ac:	45a0      	cmp	r8, r4
 80004ae:	d907      	bls.n	80004c0 <__udivmoddi4+0x10c>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b6:	d202      	bcs.n	80004be <__udivmoddi4+0x10a>
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	f200 80d9 	bhi.w	8000670 <__udivmoddi4+0x2bc>
 80004be:	4618      	mov	r0, r3
 80004c0:	eba4 0408 	sub.w	r4, r4, r8
 80004c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c8:	e7bf      	b.n	800044a <__udivmoddi4+0x96>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d909      	bls.n	80004e2 <__udivmoddi4+0x12e>
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	f000 80b1 	beq.w	8000636 <__udivmoddi4+0x282>
 80004d4:	2600      	movs	r6, #0
 80004d6:	e9c5 0100 	strd	r0, r1, [r5]
 80004da:	4630      	mov	r0, r6
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	fab3 f683 	clz	r6, r3
 80004e6:	2e00      	cmp	r6, #0
 80004e8:	d14a      	bne.n	8000580 <__udivmoddi4+0x1cc>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d302      	bcc.n	80004f4 <__udivmoddi4+0x140>
 80004ee:	4282      	cmp	r2, r0
 80004f0:	f200 80b8 	bhi.w	8000664 <__udivmoddi4+0x2b0>
 80004f4:	1a84      	subs	r4, r0, r2
 80004f6:	eb61 0103 	sbc.w	r1, r1, r3
 80004fa:	2001      	movs	r0, #1
 80004fc:	468c      	mov	ip, r1
 80004fe:	2d00      	cmp	r5, #0
 8000500:	d0a8      	beq.n	8000454 <__udivmoddi4+0xa0>
 8000502:	e9c5 4c00 	strd	r4, ip, [r5]
 8000506:	e7a5      	b.n	8000454 <__udivmoddi4+0xa0>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f603 	lsr.w	r6, r0, r3
 8000510:	4097      	lsls	r7, r2
 8000512:	fa01 f002 	lsl.w	r0, r1, r2
 8000516:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800051a:	40d9      	lsrs	r1, r3
 800051c:	4330      	orrs	r0, r6
 800051e:	0c03      	lsrs	r3, r0, #16
 8000520:	fbb1 f6fe 	udiv	r6, r1, lr
 8000524:	fa1f f887 	uxth.w	r8, r7
 8000528:	fb0e 1116 	mls	r1, lr, r6, r1
 800052c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000530:	fb06 f108 	mul.w	r1, r6, r8
 8000534:	4299      	cmp	r1, r3
 8000536:	fa04 f402 	lsl.w	r4, r4, r2
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x19c>
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000542:	f080 808d 	bcs.w	8000660 <__udivmoddi4+0x2ac>
 8000546:	4299      	cmp	r1, r3
 8000548:	f240 808a 	bls.w	8000660 <__udivmoddi4+0x2ac>
 800054c:	3e02      	subs	r6, #2
 800054e:	443b      	add	r3, r7
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b281      	uxth	r1, r0
 8000554:	fbb3 f0fe 	udiv	r0, r3, lr
 8000558:	fb0e 3310 	mls	r3, lr, r0, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb00 f308 	mul.w	r3, r0, r8
 8000564:	428b      	cmp	r3, r1
 8000566:	d907      	bls.n	8000578 <__udivmoddi4+0x1c4>
 8000568:	1879      	adds	r1, r7, r1
 800056a:	f100 3cff 	add.w	ip, r0, #4294967295
 800056e:	d273      	bcs.n	8000658 <__udivmoddi4+0x2a4>
 8000570:	428b      	cmp	r3, r1
 8000572:	d971      	bls.n	8000658 <__udivmoddi4+0x2a4>
 8000574:	3802      	subs	r0, #2
 8000576:	4439      	add	r1, r7
 8000578:	1acb      	subs	r3, r1, r3
 800057a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057e:	e778      	b.n	8000472 <__udivmoddi4+0xbe>
 8000580:	f1c6 0c20 	rsb	ip, r6, #32
 8000584:	fa03 f406 	lsl.w	r4, r3, r6
 8000588:	fa22 f30c 	lsr.w	r3, r2, ip
 800058c:	431c      	orrs	r4, r3
 800058e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000592:	fa01 f306 	lsl.w	r3, r1, r6
 8000596:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800059a:	fa21 f10c 	lsr.w	r1, r1, ip
 800059e:	431f      	orrs	r7, r3
 80005a0:	0c3b      	lsrs	r3, r7, #16
 80005a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a6:	fa1f f884 	uxth.w	r8, r4
 80005aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005b2:	fb09 fa08 	mul.w	sl, r9, r8
 80005b6:	458a      	cmp	sl, r1
 80005b8:	fa02 f206 	lsl.w	r2, r2, r6
 80005bc:	fa00 f306 	lsl.w	r3, r0, r6
 80005c0:	d908      	bls.n	80005d4 <__udivmoddi4+0x220>
 80005c2:	1861      	adds	r1, r4, r1
 80005c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c8:	d248      	bcs.n	800065c <__udivmoddi4+0x2a8>
 80005ca:	458a      	cmp	sl, r1
 80005cc:	d946      	bls.n	800065c <__udivmoddi4+0x2a8>
 80005ce:	f1a9 0902 	sub.w	r9, r9, #2
 80005d2:	4421      	add	r1, r4
 80005d4:	eba1 010a 	sub.w	r1, r1, sl
 80005d8:	b2bf      	uxth	r7, r7
 80005da:	fbb1 f0fe 	udiv	r0, r1, lr
 80005de:	fb0e 1110 	mls	r1, lr, r0, r1
 80005e2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e6:	fb00 f808 	mul.w	r8, r0, r8
 80005ea:	45b8      	cmp	r8, r7
 80005ec:	d907      	bls.n	80005fe <__udivmoddi4+0x24a>
 80005ee:	19e7      	adds	r7, r4, r7
 80005f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f4:	d22e      	bcs.n	8000654 <__udivmoddi4+0x2a0>
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d92c      	bls.n	8000654 <__udivmoddi4+0x2a0>
 80005fa:	3802      	subs	r0, #2
 80005fc:	4427      	add	r7, r4
 80005fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000602:	eba7 0708 	sub.w	r7, r7, r8
 8000606:	fba0 8902 	umull	r8, r9, r0, r2
 800060a:	454f      	cmp	r7, r9
 800060c:	46c6      	mov	lr, r8
 800060e:	4649      	mov	r1, r9
 8000610:	d31a      	bcc.n	8000648 <__udivmoddi4+0x294>
 8000612:	d017      	beq.n	8000644 <__udivmoddi4+0x290>
 8000614:	b15d      	cbz	r5, 800062e <__udivmoddi4+0x27a>
 8000616:	ebb3 020e 	subs.w	r2, r3, lr
 800061a:	eb67 0701 	sbc.w	r7, r7, r1
 800061e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000622:	40f2      	lsrs	r2, r6
 8000624:	ea4c 0202 	orr.w	r2, ip, r2
 8000628:	40f7      	lsrs	r7, r6
 800062a:	e9c5 2700 	strd	r2, r7, [r5]
 800062e:	2600      	movs	r6, #0
 8000630:	4631      	mov	r1, r6
 8000632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000636:	462e      	mov	r6, r5
 8000638:	4628      	mov	r0, r5
 800063a:	e70b      	b.n	8000454 <__udivmoddi4+0xa0>
 800063c:	4606      	mov	r6, r0
 800063e:	e6e9      	b.n	8000414 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fd      	b.n	8000440 <__udivmoddi4+0x8c>
 8000644:	4543      	cmp	r3, r8
 8000646:	d2e5      	bcs.n	8000614 <__udivmoddi4+0x260>
 8000648:	ebb8 0e02 	subs.w	lr, r8, r2
 800064c:	eb69 0104 	sbc.w	r1, r9, r4
 8000650:	3801      	subs	r0, #1
 8000652:	e7df      	b.n	8000614 <__udivmoddi4+0x260>
 8000654:	4608      	mov	r0, r1
 8000656:	e7d2      	b.n	80005fe <__udivmoddi4+0x24a>
 8000658:	4660      	mov	r0, ip
 800065a:	e78d      	b.n	8000578 <__udivmoddi4+0x1c4>
 800065c:	4681      	mov	r9, r0
 800065e:	e7b9      	b.n	80005d4 <__udivmoddi4+0x220>
 8000660:	4666      	mov	r6, ip
 8000662:	e775      	b.n	8000550 <__udivmoddi4+0x19c>
 8000664:	4630      	mov	r0, r6
 8000666:	e74a      	b.n	80004fe <__udivmoddi4+0x14a>
 8000668:	f1ac 0c02 	sub.w	ip, ip, #2
 800066c:	4439      	add	r1, r7
 800066e:	e713      	b.n	8000498 <__udivmoddi4+0xe4>
 8000670:	3802      	subs	r0, #2
 8000672:	443c      	add	r4, r7
 8000674:	e724      	b.n	80004c0 <__udivmoddi4+0x10c>
 8000676:	bf00      	nop

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b08b      	sub	sp, #44	; 0x2c
 8000680:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fd89 	bl	8001198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f8ab 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 f9f7 	bl	8000a7c <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800068e:	f000 f923 	bl	80008d8 <MX_FDCAN2_Init>
  MX_USART2_UART_Init();
 8000692:	f000 f985 	bl	80009a0 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000696:	f000 f9cf 	bl	8000a38 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
	user_data = "Start of program\r\n";
 800069a:	4b43      	ldr	r3, [pc, #268]	; (80007a8 <main+0x12c>)
 800069c:	4a43      	ldr	r2, [pc, #268]	; (80007ac <main+0x130>)
 800069e:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
 80006a0:	4b41      	ldr	r3, [pc, #260]	; (80007a8 <main+0x12c>)
 80006a2:	681c      	ldr	r4, [r3, #0]
 80006a4:	4b40      	ldr	r3, [pc, #256]	; (80007a8 <main+0x12c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fe63 	bl	8000374 <strlen>
 80006ae:	4603      	mov	r3, r0
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	4621      	mov	r1, r4
 80006b8:	483d      	ldr	r0, [pc, #244]	; (80007b0 <main+0x134>)
 80006ba:	f004 fe47 	bl	800534c <HAL_UART_Transmit>

	// Enable CCYCCNT Counter
	DWT->CTRL |= (1 << 0);
 80006be:	4b3d      	ldr	r3, [pc, #244]	; (80007b4 <main+0x138>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a3c      	ldr	r2, [pc, #240]	; (80007b4 <main+0x138>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6013      	str	r3, [r2, #0]

	// Used for SEGGER UART
	SEGGER_UART_init(115200);
 80006ca:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80006ce:	f007 fcad 	bl	800802c <SEGGER_UART_init>

	//Starting SEGGER SYSVIEW
	  SEGGER_SYSVIEW_Conf();
 80006d2:	f007 fadd 	bl	8007c90 <SEGGER_SYSVIEW_Conf>
	  //SEGGER_SYSVIEW_Start();

	  TaskStatus = xTaskCreate(Task_GreenLED_Handler, "GreenLED", 100, "Green LED TASK", 1, &Task_GreenLED_Handle);
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	2301      	movs	r3, #1
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <main+0x13c>)
 80006e2:	2264      	movs	r2, #100	; 0x64
 80006e4:	4935      	ldr	r1, [pc, #212]	; (80007bc <main+0x140>)
 80006e6:	4836      	ldr	r0, [pc, #216]	; (80007c0 <main+0x144>)
 80006e8:	f006 f95f 	bl	80069aa <xTaskCreate>
 80006ec:	61f8      	str	r0, [r7, #28]
	  configASSERT(TaskStatus == pdPASS);
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d00c      	beq.n	800070e <main+0x92>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f8:	b672      	cpsid	i
 80006fa:	f383 8811 	msr	BASEPRI, r3
 80006fe:	f3bf 8f6f 	isb	sy
 8000702:	f3bf 8f4f 	dsb	sy
 8000706:	b662      	cpsie	i
 8000708:	61bb      	str	r3, [r7, #24]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800070a:	bf00      	nop
 800070c:	e7fe      	b.n	800070c <main+0x90>

	  TaskStatus = xTaskCreate(Task_RedLED_Handler, "RedLED", 100, "Red LED TASK", 1, &Task_RedLED_Handle);
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	2301      	movs	r3, #1
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <main+0x148>)
 800071a:	2264      	movs	r2, #100	; 0x64
 800071c:	492a      	ldr	r1, [pc, #168]	; (80007c8 <main+0x14c>)
 800071e:	482b      	ldr	r0, [pc, #172]	; (80007cc <main+0x150>)
 8000720:	f006 f943 	bl	80069aa <xTaskCreate>
 8000724:	61f8      	str	r0, [r7, #28]
	  configASSERT(TaskStatus == pdPASS);
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d00c      	beq.n	8000746 <main+0xca>
	__asm volatile
 800072c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000730:	b672      	cpsid	i
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	b662      	cpsie	i
 8000740:	617b      	str	r3, [r7, #20]
}
 8000742:	bf00      	nop
 8000744:	e7fe      	b.n	8000744 <main+0xc8>

	  TaskStatus = xTaskCreate(Task_BlueLED_Handler, "BlueLED", 100, "Blue LED TASK", 1, &Task_BlueLED_Handle);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	2301      	movs	r3, #1
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <main+0x154>)
 8000750:	2264      	movs	r2, #100	; 0x64
 8000752:	4920      	ldr	r1, [pc, #128]	; (80007d4 <main+0x158>)
 8000754:	4820      	ldr	r0, [pc, #128]	; (80007d8 <main+0x15c>)
 8000756:	f006 f928 	bl	80069aa <xTaskCreate>
 800075a:	61f8      	str	r0, [r7, #28]
	  configASSERT(TaskStatus == pdPASS);
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d00c      	beq.n	800077c <main+0x100>
	__asm volatile
 8000762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000766:	b672      	cpsid	i
 8000768:	f383 8811 	msr	BASEPRI, r3
 800076c:	f3bf 8f6f 	isb	sy
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	b662      	cpsie	i
 8000776:	613b      	str	r3, [r7, #16]
}
 8000778:	bf00      	nop
 800077a:	e7fe      	b.n	800077a <main+0xfe>

	  // Start FreeRTOS scheduler
	  vTaskStartScheduler();
 800077c:	f006 faa8 	bl	8006cd0 <vTaskStartScheduler>

		user_data = "Scheduler called \r\n";
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <main+0x12c>)
 8000782:	4a16      	ldr	r2, [pc, #88]	; (80007dc <main+0x160>)
 8000784:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <main+0x12c>)
 8000788:	681c      	ldr	r4, [r3, #0]
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <main+0x12c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fdf0 	bl	8000374 <strlen>
 8000794:	4603      	mov	r3, r0
 8000796:	b29a      	uxth	r2, r3
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	4621      	mov	r1, r4
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <main+0x134>)
 80007a0:	f004 fdd4 	bl	800534c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <main+0x128>
 80007a6:	bf00      	nop
 80007a8:	24000000 	.word	0x24000000
 80007ac:	0800a1bc 	.word	0x0800a1bc
 80007b0:	24006a64 	.word	0x24006a64
 80007b4:	e0001000 	.word	0xe0001000
 80007b8:	0800a1d0 	.word	0x0800a1d0
 80007bc:	0800a1e0 	.word	0x0800a1e0
 80007c0:	08000b41 	.word	0x08000b41
 80007c4:	0800a1ec 	.word	0x0800a1ec
 80007c8:	0800a1fc 	.word	0x0800a1fc
 80007cc:	08000b8d 	.word	0x08000b8d
 80007d0:	0800a204 	.word	0x0800a204
 80007d4:	0800a214 	.word	0x0800a214
 80007d8:	08000bd9 	.word	0x08000bd9
 80007dc:	0800a21c 	.word	0x0800a21c

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	; 0x70
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	224c      	movs	r2, #76	; 0x4c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f009 fcc8 	bl	800a184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2220      	movs	r2, #32
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f009 fcc2 	bl	800a184 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000800:	2002      	movs	r0, #2
 8000802:	f001 fef7 	bl	80025f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <SystemClock_Config+0xf0>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	4a30      	ldr	r2, [pc, #192]	; (80008d0 <SystemClock_Config+0xf0>)
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <SystemClock_Config+0xf0>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <SystemClock_Config+0xf4>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000828:	4a2a      	ldr	r2, [pc, #168]	; (80008d4 <SystemClock_Config+0xf4>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <SystemClock_Config+0xf4>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <SystemClock_Config+0xf4>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	2302      	movs	r3, #2
 800085c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000862:	2312      	movs	r3, #18
 8000864:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800086a:	2303      	movs	r3, #3
 800086c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000872:	230c      	movs	r3, #12
 8000874:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000876:	2302      	movs	r3, #2
 8000878:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800087a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800087e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4618      	mov	r0, r3
 8000886:	f001 feff 	bl	8002688 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000890:	f000 f9da 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	233f      	movs	r3, #63	; 0x3f
 8000896:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000898:	2302      	movs	r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a8:	2340      	movs	r3, #64	; 0x40
 80008aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 faf5 	bl	8002ea8 <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008c4:	f000 f9c0 	bl	8000c48 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3770      	adds	r7, #112	; 0x70
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	58000400 	.word	0x58000400
 80008d4:	58024800 	.word	0x58024800

080008d8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80008dc:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <MX_FDCAN2_Init+0xc4>)
 80008e0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80008e8:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000902:	2201      	movs	r2, #1
 8000904:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000908:	2201      	movs	r2, #1
 800090a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 800090e:	2202      	movs	r2, #2
 8000910:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000914:	2202      	movs	r2, #2
 8000916:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 800091a:	2201      	movs	r2, #1
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000920:	2201      	movs	r2, #1
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000926:	2201      	movs	r2, #1
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 800092c:	2201      	movs	r2, #1
 800092e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000932:	2200      	movs	r2, #0
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000938:	2200      	movs	r2, #0
 800093a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 800093e:	2200      	movs	r2, #0
 8000940:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000944:	2200      	movs	r2, #0
 8000946:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 800094a:	2204      	movs	r2, #4
 800094c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000950:	2200      	movs	r2, #0
 8000952:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000956:	2204      	movs	r2, #4
 8000958:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 800095c:	2200      	movs	r2, #0
 800095e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000962:	2204      	movs	r2, #4
 8000964:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000968:	2200      	movs	r2, #0
 800096a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 800096e:	2200      	movs	r2, #0
 8000970:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 800097a:	2200      	movs	r2, #0
 800097c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000980:	2204      	movs	r2, #4
 8000982:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_FDCAN2_Init+0xc0>)
 8000986:	f000 fd73 	bl	8001470 <HAL_FDCAN_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000990:	f000 f95a 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	24006af4 	.word	0x24006af4
 800099c:	4000a400 	.word	0x4000a400

080009a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009a6:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009ea:	f004 fc5f 	bl	80052ac <HAL_UART_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009f4:	f000 f928 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 80009fc:	f005 fc42 	bl	8006284 <HAL_UARTEx_SetTxFifoThreshold>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a06:	f000 f91f 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 8000a0e:	f005 fc77 	bl	8006300 <HAL_UARTEx_SetRxFifoThreshold>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a18:	f000 f916 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_USART2_UART_Init+0x90>)
 8000a1e:	f005 fbf8 	bl	8006212 <HAL_UARTEx_DisableFifoMode>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a28:	f000 f90e 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	24006a64 	.word	0x24006a64
 8000a34:	40004400 	.word	0x40004400

08000a38 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000a40:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000a44:	2210      	movs	r2, #16
 8000a46:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8000a62:	f001 fd64 	bl	800252e <HAL_HCD_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8000a6c:	f000 f8ec 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	24006760 	.word	0x24006760
 8000a78:	40080000 	.word	0x40080000

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a27      	ldr	r2, [pc, #156]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_GPIO_Init+0xbc>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2107      	movs	r1, #7
 8000b0e:	480b      	ldr	r0, [pc, #44]	; (8000b3c <MX_GPIO_Init+0xc0>)
 8000b10:	f001 fcda 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b14:	2307      	movs	r3, #7
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_GPIO_Init+0xc0>)
 8000b2c:	f001 fb1c 	bl	8002168 <HAL_GPIO_Init>

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58024400 	.word	0x58024400
 8000b3c:	58020800 	.word	0x58020800

08000b40 <Task_GreenLED_Handler>:

/* USER CODE BEGIN 4 */
static void Task_GreenLED_Handler(void* parameters)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	{
//		user_data = "Green -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <Task_GreenLED_Handler+0x40>)
 8000b4a:	f009 fa3d 	bl	8009fc8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8000b4e:	2102      	movs	r1, #2
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <Task_GreenLED_Handler+0x44>)
 8000b52:	f001 fcd2 	bl	80024fa <HAL_GPIO_TogglePin>

		// 1000 system tickes -> needs to be converted to ms
		vTaskDelay(1000);
 8000b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5a:	f006 f87f 	bl	8006c5c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <Task_GreenLED_Handler+0x44>)
 8000b62:	f001 fcca 	bl	80024fa <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 8000b66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6a:	f006 f877 	bl	8006c5c <vTaskDelay>
		taskYIELD();
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <Task_GreenLED_Handler+0x48>)
 8000b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	f3bf 8f4f 	dsb	sy
 8000b7a:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000b7e:	e7e3      	b.n	8000b48 <Task_GreenLED_Handler+0x8>
 8000b80:	0800a230 	.word	0x0800a230
 8000b84:	58020800 	.word	0x58020800
 8000b88:	e000ed04 	.word	0xe000ed04

08000b8c <Task_RedLED_Handler>:
	}
}


static void Task_RedLED_Handler(void* parameters)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	{
//		user_data = "Red -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <Task_RedLED_Handler+0x40>)
 8000b96:	f009 fa17 	bl	8009fc8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <Task_RedLED_Handler+0x44>)
 8000b9e:	f001 fcac 	bl	80024fa <HAL_GPIO_TogglePin>

		// 800 system tickes -> needs to be converted to ms
		vTaskDelay(800);
 8000ba2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ba6:	f006 f859 	bl	8006c5c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8000baa:	2101      	movs	r1, #1
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <Task_RedLED_Handler+0x44>)
 8000bae:	f001 fca4 	bl	80024fa <HAL_GPIO_TogglePin>
		vTaskDelay(800);
 8000bb2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000bb6:	f006 f851 	bl	8006c5c <vTaskDelay>
		taskYIELD();
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <Task_RedLED_Handler+0x48>)
 8000bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	f3bf 8f4f 	dsb	sy
 8000bc6:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8000bca:	e7e3      	b.n	8000b94 <Task_RedLED_Handler+0x8>
 8000bcc:	0800a244 	.word	0x0800a244
 8000bd0:	58020800 	.word	0x58020800
 8000bd4:	e000ed04 	.word	0xe000ed04

08000bd8 <Task_BlueLED_Handler>:
	}
}


static void Task_BlueLED_Handler(void* parameters)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	{
//		user_data = "Blue -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <Task_BlueLED_Handler+0x40>)
 8000be2:	f009 f9f1 	bl	8009fc8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8000be6:	2104      	movs	r1, #4
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <Task_BlueLED_Handler+0x44>)
 8000bea:	f001 fc86 	bl	80024fa <HAL_GPIO_TogglePin>

		// 400 system tickes -> needs to be converted to ms
		vTaskDelay(400);
 8000bee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000bf2:	f006 f833 	bl	8006c5c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <Task_BlueLED_Handler+0x44>)
 8000bfa:	f001 fc7e 	bl	80024fa <HAL_GPIO_TogglePin>
		vTaskDelay(400);
 8000bfe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000c02:	f006 f82b 	bl	8006c5c <vTaskDelay>
		taskYIELD();
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <Task_BlueLED_Handler+0x48>)
 8000c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	f3bf 8f4f 	dsb	sy
 8000c12:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8000c16:	e7e3      	b.n	8000be0 <Task_BlueLED_Handler+0x8>
 8000c18:	0800a258 	.word	0x0800a258
 8000c1c:	58020800 	.word	0x58020800
 8000c20:	e000ed04 	.word	0xe000ed04

08000c24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d101      	bne.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c36:	f000 faeb 	bl	8001210 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40001000 	.word	0x40001000

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_MspInit+0x30>)
 8000c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x30>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x30>)
 8000c6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c78:	f006 fd94 	bl	80077a4 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	58024400 	.word	0x58024400

08000c88 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0b8      	sub	sp, #224	; 0xe0
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	22bc      	movs	r2, #188	; 0xbc
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f009 fa6b 	bl	800a184 <memset>
  if(hfdcan->Instance==FDCAN2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a29      	ldr	r2, [pc, #164]	; (8000d58 <HAL_FDCAN_MspInit+0xd0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d14b      	bne.n	8000d50 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cbc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000cbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 fcbb 	bl	8003644 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000cd4:	f7ff ffb8 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cd8:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <HAL_FDCAN_MspInit+0xd4>)
 8000cda:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <HAL_FDCAN_MspInit+0xd4>)
 8000ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_FDCAN_MspInit+0xd4>)
 8000cea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_FDCAN_MspInit+0xd4>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <HAL_FDCAN_MspInit+0xd4>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_FDCAN_MspInit+0xd4>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d14:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000d2e:	2309      	movs	r3, #9
 8000d30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_FDCAN_MspInit+0xd8>)
 8000d3c:	f001 fa14 	bl	8002168 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2016      	movs	r0, #22
 8000d46:	f000 fb6b 	bl	8001420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8000d4a:	2016      	movs	r0, #22
 8000d4c:	f000 fb82 	bl	8001454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000d50:	bf00      	nop
 8000d52:	37e0      	adds	r7, #224	; 0xe0
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	4000a400 	.word	0x4000a400
 8000d5c:	58024400 	.word	0x58024400
 8000d60:	58020400 	.word	0x58020400

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0b8      	sub	sp, #224	; 0xe0
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	22bc      	movs	r2, #188	; 0xbc
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f009 f9fd 	bl	800a184 <memset>
  if(huart->Instance==USART2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a24      	ldr	r2, [pc, #144]	; (8000e20 <HAL_UART_MspInit+0xbc>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d141      	bne.n	8000e18 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fc4e 	bl	8003644 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dae:	f7ff ff4b 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <HAL_UART_MspInit+0xc0>)
 8000db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db8:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <HAL_UART_MspInit+0xc0>)
 8000dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_UART_MspInit+0xc0>)
 8000dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_UART_MspInit+0xc0>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	4a13      	ldr	r2, [pc, #76]	; (8000e24 <HAL_UART_MspInit+0xc0>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <HAL_UART_MspInit+0xc0>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dee:	230c      	movs	r3, #12
 8000df0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e06:	2307      	movs	r3, #7
 8000e08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e10:	4619      	mov	r1, r3
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_UART_MspInit+0xc4>)
 8000e14:	f001 f9a8 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	37e0      	adds	r7, #224	; 0xe0
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40004400 	.word	0x40004400
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020000 	.word	0x58020000

08000e2c <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0b8      	sub	sp, #224	; 0xe0
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	22bc      	movs	r2, #188	; 0xbc
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f009 f999 	bl	800a184 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <HAL_HCD_MspInit+0xc8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d146      	bne.n	8000eea <HAL_HCD_MspInit+0xbe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fbe8 	bl	8003644 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8000e7a:	f7ff fee5 	bl	8000c48 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e7e:	f001 fbf3 	bl	8002668 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <HAL_HCD_MspInit+0xcc>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <HAL_HCD_MspInit+0xcc>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_HCD_MspInit+0xcc>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ea0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000eba:	230a      	movs	r3, #10
 8000ebc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <HAL_HCD_MspInit+0xd0>)
 8000ec8:	f001 f94e 	bl	8002168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_HCD_MspInit+0xcc>)
 8000ece:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_HCD_MspInit+0xcc>)
 8000ed4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ed8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_HCD_MspInit+0xcc>)
 8000ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	37e0      	adds	r7, #224	; 0xe0
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40080000 	.word	0x40080000
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020000 	.word	0x58020000

08000f00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b090      	sub	sp, #64	; 0x40
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d827      	bhi.n	8000f5e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	2036      	movs	r0, #54	; 0x36
 8000f14:	f000 fa84 	bl	8001420 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f18:	2036      	movs	r0, #54	; 0x36
 8000f1a:	f000 fa9b 	bl	8001454 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f1e:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <HAL_InitTick+0xc4>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_InitTick+0xc8>)
 8000f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f2a:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <HAL_InitTick+0xc8>)
 8000f2c:	f043 0310 	orr.w	r3, r3, #16
 8000f30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_InitTick+0xc8>)
 8000f36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f42:	f107 0210 	add.w	r2, r7, #16
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 fb37 	bl	80035c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f54:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d106      	bne.n	8000f6a <HAL_InitTick+0x6a>
 8000f5c:	e001      	b.n	8000f62 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e02b      	b.n	8000fba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f62:	f002 fb01 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8000f66:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000f68:	e004      	b.n	8000f74 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f6a:	f002 fafd 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <HAL_InitTick+0xcc>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	0c9b      	lsrs	r3, r3, #18
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_InitTick+0xd0>)
 8000f84:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <HAL_InitTick+0xd4>)
 8000f86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_InitTick+0xd0>)
 8000f8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <HAL_InitTick+0xd0>)
 8000f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_InitTick+0xd0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_InitTick+0xd0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fa2:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <HAL_InitTick+0xd0>)
 8000fa4:	f003 feb0 	bl	8004d08 <HAL_TIM_Base_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d104      	bne.n	8000fb8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000fae:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <HAL_InitTick+0xd0>)
 8000fb0:	f003 ff0c 	bl	8004dcc <HAL_TIM_Base_Start_IT>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	e000      	b.n	8000fba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3740      	adds	r7, #64	; 0x40
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2400000c 	.word	0x2400000c
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	431bde83 	.word	0x431bde83
 8000fd0:	24006b94 	.word	0x24006b94
 8000fd4:	40001000 	.word	0x40001000

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <NMI_Handler+0x4>

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <FDCAN2_IT1_IRQHandler+0x10>)
 800100a:	f000 fc13 	bl	8001834 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	24006af4 	.word	0x24006af4

08001018 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <TIM6_DAC_IRQHandler+0x10>)
 800101e:	f003 ff45 	bl	8004eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24006b94 	.word	0x24006b94

0800102c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <SystemInit+0xec>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a38      	ldr	r2, [pc, #224]	; (8001118 <SystemInit+0xec>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001040:	4b36      	ldr	r3, [pc, #216]	; (800111c <SystemInit+0xf0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	2b06      	cmp	r3, #6
 800104a:	d807      	bhi.n	800105c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800104c:	4b33      	ldr	r3, [pc, #204]	; (800111c <SystemInit+0xf0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 030f 	bic.w	r3, r3, #15
 8001054:	4a31      	ldr	r2, [pc, #196]	; (800111c <SystemInit+0xf0>)
 8001056:	f043 0307 	orr.w	r3, r3, #7
 800105a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <SystemInit+0xf4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a2f      	ldr	r2, [pc, #188]	; (8001120 <SystemInit+0xf4>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001068:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <SystemInit+0xf4>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800106e:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <SystemInit+0xf4>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	492b      	ldr	r1, [pc, #172]	; (8001120 <SystemInit+0xf4>)
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <SystemInit+0xf8>)
 8001076:	4013      	ands	r3, r2
 8001078:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <SystemInit+0xf0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d007      	beq.n	8001096 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <SystemInit+0xf0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 030f 	bic.w	r3, r3, #15
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <SystemInit+0xf0>)
 8001090:	f043 0307 	orr.w	r3, r3, #7
 8001094:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <SystemInit+0xf4>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <SystemInit+0xf4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <SystemInit+0xf4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <SystemInit+0xf4>)
 80010aa:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <SystemInit+0xfc>)
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <SystemInit+0xf4>)
 80010b0:	4a1e      	ldr	r2, [pc, #120]	; (800112c <SystemInit+0x100>)
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <SystemInit+0xf4>)
 80010b6:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <SystemInit+0x104>)
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <SystemInit+0xf4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <SystemInit+0xf4>)
 80010c2:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <SystemInit+0x104>)
 80010c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <SystemInit+0xf4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <SystemInit+0xf4>)
 80010ce:	4a18      	ldr	r2, [pc, #96]	; (8001130 <SystemInit+0x104>)
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <SystemInit+0xf4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <SystemInit+0xf4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a10      	ldr	r2, [pc, #64]	; (8001120 <SystemInit+0xf4>)
 80010de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <SystemInit+0xf4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <SystemInit+0x108>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <SystemInit+0x10c>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010f6:	d202      	bcs.n	80010fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <SystemInit+0x110>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <SystemInit+0x114>)
 8001100:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001104:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SystemInit+0xec>)
 8001108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800110c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00
 800111c:	52002000 	.word	0x52002000
 8001120:	58024400 	.word	0x58024400
 8001124:	eaf6ed7f 	.word	0xeaf6ed7f
 8001128:	02020200 	.word	0x02020200
 800112c:	01ff0000 	.word	0x01ff0000
 8001130:	01010280 	.word	0x01010280
 8001134:	5c001000 	.word	0x5c001000
 8001138:	ffff0000 	.word	0xffff0000
 800113c:	51008108 	.word	0x51008108
 8001140:	52004000 	.word	0x52004000

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800117c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001148:	f7ff ff70 	bl	800102c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	; (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	; (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001172:	f008 ffc7 	bl	800a104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fa81 	bl	800067c <main>
  bx  lr
 800117a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800117c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001180:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001184:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8001188:	0800a3f4 	.word	0x0800a3f4
  ldr r2, =_sbss
 800118c:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8001190:	24006c8c 	.word	0x24006c8c

08001194 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC3_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 f933 	bl	800140a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011a4:	f002 f836 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_Init+0x68>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	4913      	ldr	r1, [pc, #76]	; (8001204 <HAL_Init+0x6c>)
 80011b6:	5ccb      	ldrb	r3, [r1, r3]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_Init+0x68>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_Init+0x6c>)
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_Init+0x70>)
 80011da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011dc:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_Init+0x74>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e2:	200f      	movs	r0, #15
 80011e4:	f7ff fe8c 	bl	8000f00 <HAL_InitTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e002      	b.n	80011f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011f2:	f7ff fd2f 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58024400 	.word	0x58024400
 8001204:	0800a384 	.word	0x0800a384
 8001208:	24000008 	.word	0x24000008
 800120c:	24000004 	.word	0x24000004

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	24000010 	.word	0x24000010
 8001234:	24006be0 	.word	0x24006be0

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	24006be0 	.word	0x24006be0

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	24000010 	.word	0x24000010

08001298 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetREVID+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0c1b      	lsrs	r3, r3, #16
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	5c001000 	.word	0x5c001000

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	05fa0000 	.word	0x05fa0000

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ff4c 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142e:	f7ff ff63 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001432:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	6978      	ldr	r0, [r7, #20]
 800143a:	f7ff ffb3 	bl	80013a4 <NVIC_EncodePriority>
 800143e:	4602      	mov	r2, r0
 8001440:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff82 	bl	8001350 <__NVIC_SetPriority>
}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff56 	bl	8001314 <__NVIC_EnableIRQ>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b098      	sub	sp, #96	; 0x60
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001478:	4a84      	ldr	r2, [pc, #528]	; (800168c <HAL_FDCAN_Init+0x21c>)
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	4611      	mov	r1, r2
 8001480:	224c      	movs	r2, #76	; 0x4c
 8001482:	4618      	mov	r0, r3
 8001484:	f008 fe70 	bl	800a168 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e1ca      	b.n	8001828 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a7e      	ldr	r2, [pc, #504]	; (8001690 <HAL_FDCAN_Init+0x220>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d106      	bne.n	80014aa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014a4:	461a      	mov	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fbe2 	bl	8000c88 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0210 	bic.w	r2, r2, #16
 80014d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d4:	f7ff feb0 	bl	8001238 <HAL_GetTick>
 80014d8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014da:	e014      	b.n	8001506 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014dc:	f7ff feac 	bl	8001238 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b0a      	cmp	r3, #10
 80014e8:	d90d      	bls.n	8001506 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2203      	movs	r2, #3
 80014fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e190      	b.n	8001828 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b08      	cmp	r3, #8
 8001512:	d0e3      	beq.n	80014dc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0201 	orr.w	r2, r2, #1
 8001522:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001524:	f7ff fe88 	bl	8001238 <HAL_GetTick>
 8001528:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800152a:	e014      	b.n	8001556 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800152c:	f7ff fe84 	bl	8001238 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b0a      	cmp	r3, #10
 8001538:	d90d      	bls.n	8001556 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001540:	f043 0201 	orr.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2203      	movs	r2, #3
 800154e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e168      	b.n	8001828 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0e3      	beq.n	800152c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699a      	ldr	r2, [r3, #24]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0202 	orr.w	r2, r2, #2
 8001572:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7c1b      	ldrb	r3, [r3, #16]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d108      	bne.n	800158e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	e007      	b.n	800159e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800159c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7c5b      	ldrb	r3, [r3, #17]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015b4:	619a      	str	r2, [r3, #24]
 80015b6:	e007      	b.n	80015c8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699a      	ldr	r2, [r3, #24]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015c6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7c9b      	ldrb	r3, [r3, #18]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d108      	bne.n	80015e2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699a      	ldr	r2, [r3, #24]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015de:	619a      	str	r2, [r3, #24]
 80015e0:	e007      	b.n	80015f2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	699a      	ldr	r2, [r3, #24]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015f0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001616:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0210 	bic.w	r2, r2, #16
 8001626:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0204 	orr.w	r2, r2, #4
 800163e:	619a      	str	r2, [r3, #24]
 8001640:	e030      	b.n	80016a4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d02c      	beq.n	80016a4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d020      	beq.n	8001694 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699a      	ldr	r2, [r3, #24]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001660:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0210 	orr.w	r2, r2, #16
 8001670:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d114      	bne.n	80016a4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	699a      	ldr	r2, [r3, #24]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0220 	orr.w	r2, r2, #32
 8001688:	619a      	str	r2, [r3, #24]
 800168a:	e00b      	b.n	80016a4 <HAL_FDCAN_Init+0x234>
 800168c:	0800a26c 	.word	0x0800a26c
 8001690:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0220 	orr.w	r2, r2, #32
 80016a2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016b4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016bc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016cc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016ce:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016d8:	d115      	bne.n	8001706 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	3b01      	subs	r3, #1
 80016e6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016e8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	3b01      	subs	r3, #1
 80016f0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80016f2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	3b01      	subs	r3, #1
 80016fc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001702:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001704:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00a      	beq.n	8001724 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172c:	4413      	add	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d012      	beq.n	8001758 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800173a:	f023 0107 	bic.w	r1, r3, #7
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001748:	4413      	add	r3, r2
 800174a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	2b00      	cmp	r3, #0
 800175e:	d012      	beq.n	8001786 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001768:	f023 0107 	bic.w	r1, r3, #7
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001776:	4413      	add	r3, r2
 8001778:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178a:	2b00      	cmp	r3, #0
 800178c:	d013      	beq.n	80017b6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001796:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017a4:	4413      	add	r3, r2
 80017a6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80017aa:	011a      	lsls	r2, r3, #4
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d013      	beq.n	80017e6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80017c6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017d4:	4413      	add	r3, r2
 80017d6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80017da:	021a      	lsls	r2, r3, #8
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <HAL_FDCAN_Init+0x3c0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d107      	bne.n	8001800 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f022 0203 	bic.w	r2, r2, #3
 80017fe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fb1f 	bl	8001e5c <FDCAN_CalcultateRamBlockAddresses>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001824:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001828:	4618      	mov	r0, r3
 800182a:	3760      	adds	r7, #96	; 0x60
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	4000a000 	.word	0x4000a000

08001834 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b092      	sub	sp, #72	; 0x48
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800183c:	4b90      	ldr	r3, [pc, #576]	; (8001a80 <HAL_FDCAN_IRQHandler+0x24c>)
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	079b      	lsls	r3, r3, #30
 8001842:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001844:	4b8e      	ldr	r3, [pc, #568]	; (8001a80 <HAL_FDCAN_IRQHandler+0x24c>)
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	079b      	lsls	r3, r3, #30
 800184a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800184c:	4013      	ands	r3, r2
 800184e:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001856:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800185a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001864:	4013      	ands	r3, r2
 8001866:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800187c:	4013      	ands	r3, r2
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001894:	4013      	ands	r3, r2
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80018a2:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018ac:	4013      	ands	r3, r2
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018b6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c4:	4013      	ands	r3, r2
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d011      	beq.n	80018fa <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00a      	beq.n	80018fa <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ec:	651a      	str	r2, [r3, #80]	; 0x50
 80018ee:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <HAL_FDCAN_IRQHandler+0x24c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fa65 	bl	8001dc4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01e      	beq.n	8001946 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001912:	2b00      	cmp	r3, #0
 8001914:	d017      	beq.n	8001946 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192a:	4013      	ands	r3, r2
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001936:	651a      	str	r2, [r3, #80]	; 0x50
 8001938:	4b51      	ldr	r3, [pc, #324]	; (8001a80 <HAL_FDCAN_IRQHandler+0x24c>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800193e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 fa16 	bl	8001d72 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00d      	beq.n	8001968 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001952:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_FDCAN_IRQHandler+0x250>)
 8001954:	400b      	ands	r3, r1
 8001956:	6513      	str	r3, [r2, #80]	; 0x50
 8001958:	4a49      	ldr	r2, [pc, #292]	; (8001a80 <HAL_FDCAN_IRQHandler+0x24c>)
 800195a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800195c:	0f9b      	lsrs	r3, r3, #30
 800195e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001960:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f9c4 	bl	8001cf0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00d      	beq.n	800198a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001974:	4b43      	ldr	r3, [pc, #268]	; (8001a84 <HAL_FDCAN_IRQHandler+0x250>)
 8001976:	400b      	ands	r3, r1
 8001978:	6513      	str	r3, [r2, #80]	; 0x50
 800197a:	4a41      	ldr	r2, [pc, #260]	; (8001a80 <HAL_FDCAN_IRQHandler+0x24c>)
 800197c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800197e:	0f9b      	lsrs	r3, r3, #30
 8001980:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001982:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f9be 	bl	8001d06 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800198a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00d      	beq.n	80019ac <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_FDCAN_IRQHandler+0x250>)
 8001998:	400b      	ands	r3, r1
 800199a:	6513      	str	r3, [r2, #80]	; 0x50
 800199c:	4a38      	ldr	r2, [pc, #224]	; (8001a80 <HAL_FDCAN_IRQHandler+0x24c>)
 800199e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a0:	0f9b      	lsrs	r3, r3, #30
 80019a2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80019a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f9b8 	bl	8001d1c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80019ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00d      	beq.n	80019ce <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019b8:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <HAL_FDCAN_IRQHandler+0x250>)
 80019ba:	400b      	ands	r3, r1
 80019bc:	6513      	str	r3, [r2, #80]	; 0x50
 80019be:	4a30      	ldr	r2, [pc, #192]	; (8001a80 <HAL_FDCAN_IRQHandler+0x24c>)
 80019c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c2:	0f9b      	lsrs	r3, r3, #30
 80019c4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80019c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f9b2 	bl	8001d32 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d011      	beq.n	8001a00 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00a      	beq.n	8001a00 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019f2:	651a      	str	r2, [r3, #80]	; 0x50
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_FDCAN_IRQHandler+0x24c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f9a4 	bl	8001d48 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01e      	beq.n	8001a4c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d017      	beq.n	8001a4c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a30:	4013      	ands	r3, r2
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_FDCAN_IRQHandler+0x24c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f988 	bl	8001d5c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d016      	beq.n	8001a88 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00f      	beq.n	8001a88 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a70:	651a      	str	r2, [r3, #80]	; 0x50
 8001a72:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <HAL_FDCAN_IRQHandler+0x24c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f985 	bl	8001d88 <HAL_FDCAN_RxBufferNewMessageCallback>
 8001a7e:	e003      	b.n	8001a88 <HAL_FDCAN_IRQHandler+0x254>
 8001a80:	4000a800 	.word	0x4000a800
 8001a84:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d011      	beq.n	8001aba <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00a      	beq.n	8001aba <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aac:	651a      	str	r2, [r3, #80]	; 0x50
 8001aae:	4b8d      	ldr	r3, [pc, #564]	; (8001ce4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f971 	bl	8001d9c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d011      	beq.n	8001aec <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ade:	651a      	str	r2, [r3, #80]	; 0x50
 8001ae0:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f962 	bl	8001db0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00f      	beq.n	8001b28 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b10:	651a      	str	r2, [r3, #80]	; 0x50
 8001b12:	4b74      	ldr	r3, [pc, #464]	; (8001ce4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00d      	beq.n	8001b4a <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b34:	4b6c      	ldr	r3, [pc, #432]	; (8001ce8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001b36:	400b      	ands	r3, r1
 8001b38:	6513      	str	r3, [r2, #80]	; 0x50
 8001b3a:	4a6a      	ldr	r2, [pc, #424]	; (8001ce4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3e:	0f9b      	lsrs	r3, r3, #30
 8001b40:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001b42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f951 	bl	8001dec <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d011      	beq.n	8001b74 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b56:	4b64      	ldr	r3, [pc, #400]	; (8001ce8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001b58:	400b      	ands	r3, r1
 8001b5a:	6513      	str	r3, [r2, #80]	; 0x50
 8001b5c:	4a61      	ldr	r2, [pc, #388]	; (8001ce4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b60:	0f9b      	lsrs	r3, r3, #30
 8001b62:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a5c      	ldr	r2, [pc, #368]	; (8001cec <HAL_FDCAN_IRQHandler+0x4b8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	f040 80a6 	bne.w	8001ccc <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 809e 	beq.w	8001ccc <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001bb2:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	6a3a      	ldr	r2, [r7, #32]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001bca:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001be2:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001bfa:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4013      	ands	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f8f2 	bl	8001e02 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	6a3a      	ldr	r2, [r7, #32]
 8001c2a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001c2c:	6a39      	ldr	r1, [r7, #32]
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8f2 	bl	8001e18 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d01b      	beq.n	8001c7a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d014      	beq.n	8001c7a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c56:	0c1b      	lsrs	r3, r3, #16
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c66:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2240      	movs	r2, #64	; 0x40
 8001c6e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	6939      	ldr	r1, [r7, #16]
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f8da 	bl	8001e2e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001c88:	69f9      	ldr	r1, [r7, #28]
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8db 	bl	8001e46 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00b      	beq.n	8001ccc <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f87e 	bl	8001dd8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3748      	adds	r7, #72	; 0x48
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	4000a800 	.word	0x4000a800
 8001ce8:	3fcfffff 	.word	0x3fcfffff
 8001cec:	4000a000 	.word	0x4000a000

08001cf0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e68:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e72:	4ba7      	ldr	r3, [pc, #668]	; (8002110 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	0091      	lsls	r1, r2, #2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e8c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001eb2:	4b97      	ldr	r3, [pc, #604]	; (8002110 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	0091      	lsls	r1, r2, #2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	430b      	orrs	r3, r1
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ecc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed4:	041a      	lsls	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	4413      	add	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001ef4:	4b86      	ldr	r3, [pc, #536]	; (8002110 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	0091      	lsls	r1, r2, #2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001f0e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	041a      	lsls	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	4413      	add	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f3c:	4b74      	ldr	r3, [pc, #464]	; (8002110 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	0091      	lsls	r1, r2, #2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f56:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5e:	041a      	lsls	r2, r3, #16
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001f84:	4b62      	ldr	r3, [pc, #392]	; (8002110 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	0091      	lsls	r1, r2, #2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001fb0:	4b57      	ldr	r3, [pc, #348]	; (8002110 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	0091      	lsls	r1, r2, #2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fca:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	041a      	lsls	r2, r3, #16
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ff2:	4b47      	ldr	r3, [pc, #284]	; (8002110 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	0091      	lsls	r1, r2, #2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	430b      	orrs	r3, r1
 8002000:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800200c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	041a      	lsls	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002028:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002030:	061a      	lsls	r2, r3, #24
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002040:	4b34      	ldr	r3, [pc, #208]	; (8002114 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002042:	4413      	add	r3, r2
 8002044:	009a      	lsls	r2, r3, #2
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	441a      	add	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	441a      	add	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	441a      	add	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	441a      	add	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	441a      	add	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	441a      	add	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d915      	bls.n	8002138 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800210c:	e006      	b.n	800211c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800210e:	bf00      	nop
 8002110:	ffff0003 	.word	0xffff0003
 8002114:	10002b00 	.word	0x10002b00
 8002118:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002122:	f043 0220 	orr.w	r2, r3, #32
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2203      	movs	r2, #3
 8002130:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e010      	b.n	800215a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	e005      	b.n	800214c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3304      	adds	r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d3f3      	bcc.n	8002140 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002176:	4b89      	ldr	r3, [pc, #548]	; (800239c <HAL_GPIO_Init+0x234>)
 8002178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800217a:	e194      	b.n	80024a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8186 	beq.w	80024a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d00b      	beq.n	80021b4 <HAL_GPIO_Init+0x4c>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d007      	beq.n	80021b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a8:	2b11      	cmp	r3, #17
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b12      	cmp	r3, #18
 80021b2:	d130      	bne.n	8002216 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ea:	2201      	movs	r2, #1
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 0201 	and.w	r2, r3, #1
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0xee>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b12      	cmp	r3, #18
 8002254:	d123      	bne.n	800229e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	220f      	movs	r2, #15
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	08da      	lsrs	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3208      	adds	r2, #8
 8002298:	69b9      	ldr	r1, [r7, #24]
 800229a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2203      	movs	r2, #3
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0203 	and.w	r2, r3, #3
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80e0 	beq.w	80024a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_GPIO_Init+0x238>)
 80022e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022e6:	4a2e      	ldr	r2, [pc, #184]	; (80023a0 <HAL_GPIO_Init+0x238>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_GPIO_Init+0x238>)
 80022f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fe:	4a29      	ldr	r2, [pc, #164]	; (80023a4 <HAL_GPIO_Init+0x23c>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_GPIO_Init+0x240>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d052      	beq.n	80023d0 <HAL_GPIO_Init+0x268>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <HAL_GPIO_Init+0x244>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d031      	beq.n	8002396 <HAL_GPIO_Init+0x22e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_GPIO_Init+0x248>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02b      	beq.n	8002392 <HAL_GPIO_Init+0x22a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_GPIO_Init+0x24c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d025      	beq.n	800238e <HAL_GPIO_Init+0x226>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_GPIO_Init+0x250>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01f      	beq.n	800238a <HAL_GPIO_Init+0x222>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_GPIO_Init+0x254>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d019      	beq.n	8002386 <HAL_GPIO_Init+0x21e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <HAL_GPIO_Init+0x258>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0x21a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_GPIO_Init+0x25c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00d      	beq.n	800237e <HAL_GPIO_Init+0x216>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_GPIO_Init+0x260>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <HAL_GPIO_Init+0x212>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_GPIO_Init+0x264>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_GPIO_Init+0x20e>
 8002372:	2309      	movs	r3, #9
 8002374:	e02d      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 8002376:	230a      	movs	r3, #10
 8002378:	e02b      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 800237a:	2308      	movs	r3, #8
 800237c:	e029      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 800237e:	2307      	movs	r3, #7
 8002380:	e027      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 8002382:	2306      	movs	r3, #6
 8002384:	e025      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 8002386:	2305      	movs	r3, #5
 8002388:	e023      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 800238a:	2304      	movs	r3, #4
 800238c:	e021      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 800238e:	2303      	movs	r3, #3
 8002390:	e01f      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 8002392:	2302      	movs	r3, #2
 8002394:	e01d      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 8002396:	2301      	movs	r3, #1
 8002398:	e01b      	b.n	80023d2 <HAL_GPIO_Init+0x26a>
 800239a:	bf00      	nop
 800239c:	58000080 	.word	0x58000080
 80023a0:	58024400 	.word	0x58024400
 80023a4:	58000400 	.word	0x58000400
 80023a8:	58020000 	.word	0x58020000
 80023ac:	58020400 	.word	0x58020400
 80023b0:	58020800 	.word	0x58020800
 80023b4:	58020c00 	.word	0x58020c00
 80023b8:	58021000 	.word	0x58021000
 80023bc:	58021400 	.word	0x58021400
 80023c0:	58021800 	.word	0x58021800
 80023c4:	58021c00 	.word	0x58021c00
 80023c8:	58022000 	.word	0x58022000
 80023cc:	58022400 	.word	0x58022400
 80023d0:	2300      	movs	r3, #0
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	f002 0203 	and.w	r2, r2, #3
 80023d8:	0092      	lsls	r2, r2, #2
 80023da:	4093      	lsls	r3, r2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e2:	4938      	ldr	r1, [pc, #224]	; (80024c4 <HAL_GPIO_Init+0x35c>)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800246a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3301      	adds	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f47f ae63 	bne.w	800217c <HAL_GPIO_Init+0x14>
  }
}
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
 80024ba:	3724      	adds	r7, #36	; 0x24
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	58000400 	.word	0x58000400

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	619a      	str	r2, [r3, #24]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b085      	sub	sp, #20
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800250c:	887a      	ldrh	r2, [r7, #2]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	041a      	lsls	r2, r3, #16
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43d9      	mvns	r1, r3
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	400b      	ands	r3, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	619a      	str	r2, [r3, #24]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800252e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002530:	b08f      	sub	sp, #60	; 0x3c
 8002532:	af0a      	add	r7, sp, #40	; 0x28
 8002534:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e054      	b.n	80025ea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe fc66 	bl	8000e2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2203      	movs	r2, #3
 8002564:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 ffb8 	bl	80064f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	687e      	ldr	r6, [r7, #4]
 800258c:	466d      	mov	r5, sp
 800258e:	f106 0410 	add.w	r4, r6, #16
 8002592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800259e:	e885 0003 	stmia.w	r5, {r0, r1}
 80025a2:	1d33      	adds	r3, r6, #4
 80025a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a6:	6838      	ldr	r0, [r7, #0]
 80025a8:	f003 ff36 	bl	8006418 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2101      	movs	r1, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 ffaf 	bl	8006516 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	687e      	ldr	r6, [r7, #4]
 80025c0:	466d      	mov	r5, sp
 80025c2:	f106 0410 	add.w	r4, r6, #16
 80025c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025d6:	1d33      	adds	r3, r6, #4
 80025d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025da:	6838      	ldr	r0, [r7, #0]
 80025dc:	f004 f842 	bl	8006664 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_PWREx_ConfigSupply+0x70>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b04      	cmp	r3, #4
 8002606:	d00a      	beq.n	800261e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <HAL_PWREx_ConfigSupply+0x70>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d001      	beq.n	800261a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e01f      	b.n	800265a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e01d      	b.n	800265a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_PWREx_ConfigSupply+0x70>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	490f      	ldr	r1, [pc, #60]	; (8002664 <HAL_PWREx_ConfigSupply+0x70>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4313      	orrs	r3, r2
 800262c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800262e:	f7fe fe03 	bl	8001238 <HAL_GetTick>
 8002632:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002634:	e009      	b.n	800264a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002636:	f7fe fdff 	bl	8001238 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002644:	d901      	bls.n	800264a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e007      	b.n	800265a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_PWREx_ConfigSupply+0x70>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002656:	d1ee      	bne.n	8002636 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	58024800 	.word	0x58024800

08002668 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a04      	ldr	r2, [pc, #16]	; (8002684 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	58024800 	.word	0x58024800

08002688 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e3ff      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8087 	beq.w	80027b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a8:	4b99      	ldr	r3, [pc, #612]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026b2:	4b97      	ldr	r3, [pc, #604]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d007      	beq.n	80026ce <HAL_RCC_OscConfig+0x46>
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	2b18      	cmp	r3, #24
 80026c2:	d110      	bne.n	80026e6 <HAL_RCC_OscConfig+0x5e>
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d10b      	bne.n	80026e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ce:	4b90      	ldr	r3, [pc, #576]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d06c      	beq.n	80027b4 <HAL_RCC_OscConfig+0x12c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d168      	bne.n	80027b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e3d9      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x76>
 80026f0:	4b87      	ldr	r3, [pc, #540]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a86      	ldr	r2, [pc, #536]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80026f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	e02e      	b.n	800275c <HAL_RCC_OscConfig+0xd4>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x98>
 8002706:	4b82      	ldr	r3, [pc, #520]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a81      	ldr	r2, [pc, #516]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800270c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b7f      	ldr	r3, [pc, #508]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a7e      	ldr	r2, [pc, #504]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002718:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e01d      	b.n	800275c <HAL_RCC_OscConfig+0xd4>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0xbc>
 800272a:	4b79      	ldr	r3, [pc, #484]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a78      	ldr	r2, [pc, #480]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a75      	ldr	r2, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0xd4>
 8002744:	4b72      	ldr	r3, [pc, #456]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a71      	ldr	r2, [pc, #452]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b6f      	ldr	r3, [pc, #444]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a6e      	ldr	r2, [pc, #440]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fd68 	bl	8001238 <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe fd64 	bl	8001238 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e38d      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800277e:	4b64      	ldr	r3, [pc, #400]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0xe4>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe fd54 	bl	8001238 <HAL_GetTick>
 8002790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe fd50 	bl	8001238 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e379      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027a6:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x10c>
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80ae 	beq.w	8002920 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c4:	4b52      	ldr	r3, [pc, #328]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ce:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <HAL_RCC_OscConfig+0x162>
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2b18      	cmp	r3, #24
 80027de:	d13a      	bne.n	8002856 <HAL_RCC_OscConfig+0x1ce>
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d135      	bne.n	8002856 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ea:	4b49      	ldr	r3, [pc, #292]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_RCC_OscConfig+0x17a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e34b      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	f7fe fd49 	bl	8001298 <HAL_GetREVID>
 8002806:	4603      	mov	r3, r0
 8002808:	f241 0203 	movw	r2, #4099	; 0x1003
 800280c:	4293      	cmp	r3, r2
 800280e:	d817      	bhi.n	8002840 <HAL_RCC_OscConfig+0x1b8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d108      	bne.n	800282a <HAL_RCC_OscConfig+0x1a2>
 8002818:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002820:	4a3b      	ldr	r2, [pc, #236]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002826:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002828:	e07a      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	031b      	lsls	r3, r3, #12
 8002838:	4935      	ldr	r1, [pc, #212]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283e:	e06f      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b33      	ldr	r3, [pc, #204]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	4930      	ldr	r1, [pc, #192]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002854:	e064      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d045      	beq.n	80028ea <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0219 	bic.w	r2, r3, #25
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	4929      	ldr	r1, [pc, #164]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fce2 	bl	8001238 <HAL_GetTick>
 8002874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002878:	f7fe fcde 	bl	8001238 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e307      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002896:	f7fe fcff 	bl	8001298 <HAL_GetREVID>
 800289a:	4603      	mov	r3, r0
 800289c:	f241 0203 	movw	r2, #4099	; 0x1003
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d817      	bhi.n	80028d4 <HAL_RCC_OscConfig+0x24c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d108      	bne.n	80028be <HAL_RCC_OscConfig+0x236>
 80028ac:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028b4:	4a16      	ldr	r2, [pc, #88]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ba:	6053      	str	r3, [r2, #4]
 80028bc:	e030      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	031b      	lsls	r3, r3, #12
 80028cc:	4910      	ldr	r1, [pc, #64]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
 80028d2:	e025      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	490b      	ldr	r1, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
 80028e8:	e01a      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a08      	ldr	r2, [pc, #32]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe fc9f 	bl	8001238 <HAL_GetTick>
 80028fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe fc9b 	bl	8001238 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d903      	bls.n	8002914 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e2c4      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
 8002910:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002914:	4ba4      	ldr	r3, [pc, #656]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ee      	bne.n	80028fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a9 	beq.w	8002a80 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292e:	4b9e      	ldr	r3, [pc, #632]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002936:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002938:	4b9b      	ldr	r3, [pc, #620]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d007      	beq.n	8002954 <HAL_RCC_OscConfig+0x2cc>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b18      	cmp	r3, #24
 8002948:	d13a      	bne.n	80029c0 <HAL_RCC_OscConfig+0x338>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d135      	bne.n	80029c0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002954:	4b94      	ldr	r3, [pc, #592]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_OscConfig+0x2e4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d001      	beq.n	800296c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e296      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800296c:	f7fe fc94 	bl	8001298 <HAL_GetREVID>
 8002970:	4603      	mov	r3, r0
 8002972:	f241 0203 	movw	r2, #4099	; 0x1003
 8002976:	4293      	cmp	r3, r2
 8002978:	d817      	bhi.n	80029aa <HAL_RCC_OscConfig+0x322>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	2b20      	cmp	r3, #32
 8002980:	d108      	bne.n	8002994 <HAL_RCC_OscConfig+0x30c>
 8002982:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800298a:	4a87      	ldr	r2, [pc, #540]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 800298c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002990:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002992:	e075      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002994:	4b84      	ldr	r3, [pc, #528]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	069b      	lsls	r3, r3, #26
 80029a2:	4981      	ldr	r1, [pc, #516]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a8:	e06a      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	061b      	lsls	r3, r3, #24
 80029b8:	497b      	ldr	r1, [pc, #492]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029be:	e05f      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d042      	beq.n	8002a4e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029c8:	4b77      	ldr	r3, [pc, #476]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a76      	ldr	r2, [pc, #472]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fc30 	bl	8001238 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029dc:	f7fe fc2c 	bl	8001238 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e255      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ee:	4b6e      	ldr	r3, [pc, #440]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029fa:	f7fe fc4d 	bl	8001298 <HAL_GetREVID>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d817      	bhi.n	8002a38 <HAL_RCC_OscConfig+0x3b0>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d108      	bne.n	8002a22 <HAL_RCC_OscConfig+0x39a>
 8002a10:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a18:	4a63      	ldr	r2, [pc, #396]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a1e:	6053      	str	r3, [r2, #4]
 8002a20:	e02e      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
 8002a22:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	069b      	lsls	r3, r3, #26
 8002a30:	495d      	ldr	r1, [pc, #372]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
 8002a36:	e023      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
 8002a38:	4b5b      	ldr	r3, [pc, #364]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	4958      	ldr	r1, [pc, #352]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
 8002a4c:	e018      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a4e:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a55      	ldr	r2, [pc, #340]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fbed 	bl	8001238 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a62:	f7fe fbe9 	bl	8001238 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e212      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a74:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d036      	beq.n	8002afa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d019      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a94:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	4a43      	ldr	r2, [pc, #268]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fbca 	bl	8001238 <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fbc6 	bl	8001238 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e1ef      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aba:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x420>
 8002ac6:	e018      	b.n	8002afa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002acc:	4a36      	ldr	r2, [pc, #216]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fbb0 	bl	8001238 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe fbac 	bl	8001238 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1d5      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aee:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d036      	beq.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d019      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a25      	ldr	r2, [pc, #148]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fb8d 	bl	8001238 <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b22:	f7fe fb89 	bl	8001238 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1b2      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x49a>
 8002b40:	e018      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fb73 	bl	8001238 <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b56:	f7fe fb6f 	bl	8001238 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e198      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8085 	beq.w	8002c8c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RCC_OscConfig+0x524>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_RCC_OscConfig+0x524>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b8e:	f7fe fb53 	bl	8001238 <HAL_GetTick>
 8002b92:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b94:	e00c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b96:	f7fe fb4f 	bl	8001238 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	; 0x64
 8002ba2:	d905      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e178      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb0:	4b96      	ldr	r3, [pc, #600]	; (8002e0c <HAL_RCC_OscConfig+0x784>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ec      	beq.n	8002b96 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x54a>
 8002bc4:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a91      	ldr	r2, [pc, #580]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd0:	e02d      	b.n	8002c2e <HAL_RCC_OscConfig+0x5a6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x56c>
 8002bda:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a8c      	ldr	r2, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
 8002be6:	4b8a      	ldr	r3, [pc, #552]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	4a89      	ldr	r2, [pc, #548]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf2:	e01c      	b.n	8002c2e <HAL_RCC_OscConfig+0x5a6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCC_OscConfig+0x58e>
 8002bfc:	4b84      	ldr	r3, [pc, #528]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	4a83      	ldr	r2, [pc, #524]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70
 8002c08:	4b81      	ldr	r3, [pc, #516]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	4a80      	ldr	r2, [pc, #512]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6713      	str	r3, [r2, #112]	; 0x70
 8002c14:	e00b      	b.n	8002c2e <HAL_RCC_OscConfig+0x5a6>
 8002c16:	4b7e      	ldr	r3, [pc, #504]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a7d      	ldr	r2, [pc, #500]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	4b7b      	ldr	r3, [pc, #492]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a7a      	ldr	r2, [pc, #488]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d015      	beq.n	8002c62 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe faff 	bl	8001238 <HAL_GetTick>
 8002c3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fafb 	bl	8001238 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e122      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c54:	4b6e      	ldr	r3, [pc, #440]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ee      	beq.n	8002c3e <HAL_RCC_OscConfig+0x5b6>
 8002c60:	e014      	b.n	8002c8c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c62:	f7fe fae9 	bl	8001238 <HAL_GetTick>
 8002c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fe fae5 	bl	8001238 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e10c      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c80:	4b63      	ldr	r3, [pc, #396]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ee      	bne.n	8002c6a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8101 	beq.w	8002e98 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c96:	4b5e      	ldr	r3, [pc, #376]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c9e:	2b18      	cmp	r3, #24
 8002ca0:	f000 80bc 	beq.w	8002e1c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	f040 8095 	bne.w	8002dd8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b58      	ldr	r3, [pc, #352]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a57      	ldr	r2, [pc, #348]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe fabd 	bl	8001238 <HAL_GetTick>
 8002cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe fab9 	bl	8001238 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e0e2      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd4:	4b4e      	ldr	r3, [pc, #312]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce0:	4b4b      	ldr	r3, [pc, #300]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	; (8002e14 <HAL_RCC_OscConfig+0x78c>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	4946      	ldr	r1, [pc, #280]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	628b      	str	r3, [r1, #40]	; 0x28
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	025b      	lsls	r3, r3, #9
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	3b01      	subs	r3, #1
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d22:	3b01      	subs	r3, #1
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d2a:	4939      	ldr	r1, [pc, #228]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d30:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	4a36      	ldr	r2, [pc, #216]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d3c:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_RCC_OscConfig+0x790>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d48:	00d2      	lsls	r2, r2, #3
 8002d4a:	4931      	ldr	r1, [pc, #196]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d50:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f023 020c 	bic.w	r2, r3, #12
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	492c      	ldr	r1, [pc, #176]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	f023 0202 	bic.w	r2, r3, #2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4928      	ldr	r1, [pc, #160]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d74:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d8c:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe fa42 	bl	8001238 <HAL_GetTick>
 8002db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe fa3e 	bl	8001238 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e067      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dca:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x730>
 8002dd6:	e05f      	b.n	8002e98 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0c      	ldr	r2, [pc, #48]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fa28 	bl	8001238 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe fa24 	bl	8001238 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e04d      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x764>
 8002e0a:	e045      	b.n	8002e98 <HAL_RCC_OscConfig+0x810>
 8002e0c:	58024800 	.word	0x58024800
 8002e10:	58024400 	.word	0x58024400
 8002e14:	fffffc0c 	.word	0xfffffc0c
 8002e18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e1c:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <HAL_RCC_OscConfig+0x81c>)
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCC_OscConfig+0x81c>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d031      	beq.n	8002e94 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f003 0203 	and.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d12a      	bne.n	8002e94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d122      	bne.n	8002e94 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d11a      	bne.n	8002e94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	0a5b      	lsrs	r3, r3, #9
 8002e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d111      	bne.n	8002e94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d108      	bne.n	8002e94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	0e1b      	lsrs	r3, r3, #24
 8002e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3730      	adds	r7, #48	; 0x30
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	58024400 	.word	0x58024400

08002ea8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e19c      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b8a      	ldr	r3, [pc, #552]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d910      	bls.n	8002eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b87      	ldr	r3, [pc, #540]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 020f 	bic.w	r2, r3, #15
 8002ed2:	4985      	ldr	r1, [pc, #532]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b83      	ldr	r3, [pc, #524]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e184      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	4b7b      	ldr	r3, [pc, #492]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d908      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f08:	4b78      	ldr	r3, [pc, #480]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	4975      	ldr	r1, [pc, #468]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d010      	beq.n	8002f48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	4b70      	ldr	r3, [pc, #448]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d908      	bls.n	8002f48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f36:	4b6d      	ldr	r3, [pc, #436]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	496a      	ldr	r1, [pc, #424]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	4b64      	ldr	r3, [pc, #400]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d908      	bls.n	8002f76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	495e      	ldr	r1, [pc, #376]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d908      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f92:	4b56      	ldr	r3, [pc, #344]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4953      	ldr	r1, [pc, #332]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d908      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f023 020f 	bic.w	r2, r3, #15
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4947      	ldr	r1, [pc, #284]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d055      	beq.n	800308a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fde:	4b43      	ldr	r3, [pc, #268]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	4940      	ldr	r1, [pc, #256]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ff8:	4b3c      	ldr	r3, [pc, #240]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d121      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0f6      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d107      	bne.n	8003020 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003010:	4b36      	ldr	r3, [pc, #216]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d115      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0ea      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d107      	bne.n	8003038 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003028:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0de      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003038:	4b2c      	ldr	r3, [pc, #176]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0d6      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f023 0207 	bic.w	r2, r3, #7
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4925      	ldr	r1, [pc, #148]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8003056:	4313      	orrs	r3, r2
 8003058:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fe f8ed 	bl	8001238 <HAL_GetTick>
 800305e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003060:	e00a      	b.n	8003078 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003062:	f7fe f8e9 	bl	8001238 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0be      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003078:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	429a      	cmp	r2, r3
 8003088:	d1eb      	bne.n	8003062 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d010      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d208      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f023 020f 	bic.w	r2, r3, #15
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	490e      	ldr	r1, [pc, #56]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d214      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 020f 	bic.w	r2, r3, #15
 80030ce:	4906      	ldr	r1, [pc, #24]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e086      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
 80030e8:	52002000 	.word	0x52002000
 80030ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003108:	429a      	cmp	r2, r3
 800310a:	d208      	bcs.n	800311e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800310c:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	4939      	ldr	r1, [pc, #228]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800311a:	4313      	orrs	r3, r2
 800311c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003136:	429a      	cmp	r2, r3
 8003138:	d208      	bcs.n	800314c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	492e      	ldr	r1, [pc, #184]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003148:	4313      	orrs	r3, r2
 800314a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003164:	429a      	cmp	r2, r3
 8003166:	d208      	bcs.n	800317a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	4922      	ldr	r1, [pc, #136]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003176:	4313      	orrs	r3, r2
 8003178:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003192:	429a      	cmp	r2, r3
 8003194:	d208      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4917      	ldr	r1, [pc, #92]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031a8:	f000 f834 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	4912      	ldr	r1, [pc, #72]	; (8003204 <HAL_RCC_ClockConfig+0x35c>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
 80031c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031c6:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <HAL_RCC_ClockConfig+0x35c>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_RCC_ClockConfig+0x360>)
 80031de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <HAL_RCC_ClockConfig+0x364>)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_RCC_ClockConfig+0x368>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd fe88 	bl	8000f00 <HAL_InitTick>
 80031f0:	4603      	mov	r3, r0
 80031f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	58024400 	.word	0x58024400
 8003204:	0800a384 	.word	0x0800a384
 8003208:	24000008 	.word	0x24000008
 800320c:	24000004 	.word	0x24000004
 8003210:	2400000c 	.word	0x2400000c

08003214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	; 0x24
 8003218:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800321a:	4bb3      	ldr	r3, [pc, #716]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003222:	2b18      	cmp	r3, #24
 8003224:	f200 8155 	bhi.w	80034d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <HAL_RCC_GetSysClockFreq+0x1c>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003295 	.word	0x08003295
 8003234:	080034d3 	.word	0x080034d3
 8003238:	080034d3 	.word	0x080034d3
 800323c:	080034d3 	.word	0x080034d3
 8003240:	080034d3 	.word	0x080034d3
 8003244:	080034d3 	.word	0x080034d3
 8003248:	080034d3 	.word	0x080034d3
 800324c:	080034d3 	.word	0x080034d3
 8003250:	080032bb 	.word	0x080032bb
 8003254:	080034d3 	.word	0x080034d3
 8003258:	080034d3 	.word	0x080034d3
 800325c:	080034d3 	.word	0x080034d3
 8003260:	080034d3 	.word	0x080034d3
 8003264:	080034d3 	.word	0x080034d3
 8003268:	080034d3 	.word	0x080034d3
 800326c:	080034d3 	.word	0x080034d3
 8003270:	080032c1 	.word	0x080032c1
 8003274:	080034d3 	.word	0x080034d3
 8003278:	080034d3 	.word	0x080034d3
 800327c:	080034d3 	.word	0x080034d3
 8003280:	080034d3 	.word	0x080034d3
 8003284:	080034d3 	.word	0x080034d3
 8003288:	080034d3 	.word	0x080034d3
 800328c:	080034d3 	.word	0x080034d3
 8003290:	080032c7 	.word	0x080032c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003294:	4b94      	ldr	r3, [pc, #592]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d009      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032a0:	4b91      	ldr	r3, [pc, #580]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	4a90      	ldr	r2, [pc, #576]	; (80034ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
 80032b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80032b2:	e111      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032b4:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032b6:	61bb      	str	r3, [r7, #24]
    break;
 80032b8:	e10e      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80032ba:	4b8d      	ldr	r3, [pc, #564]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032bc:	61bb      	str	r3, [r7, #24]
    break;
 80032be:	e10b      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80032c0:	4b8c      	ldr	r3, [pc, #560]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032c2:	61bb      	str	r3, [r7, #24]
    break;
 80032c4:	e108      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032c6:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80032d0:	4b85      	ldr	r3, [pc, #532]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032dc:	4b82      	ldr	r3, [pc, #520]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80032e6:	4b80      	ldr	r3, [pc, #512]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	08db      	lsrs	r3, r3, #3
 80032ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80e1 	beq.w	80034cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b02      	cmp	r3, #2
 800330e:	f000 8083 	beq.w	8003418 <HAL_RCC_GetSysClockFreq+0x204>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b02      	cmp	r3, #2
 8003316:	f200 80a1 	bhi.w	800345c <HAL_RCC_GetSysClockFreq+0x248>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x114>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d056      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003326:	e099      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003328:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02d      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003334:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	08db      	lsrs	r3, r3, #3
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	4a6b      	ldr	r2, [pc, #428]	; (80034ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800335e:	4b62      	ldr	r3, [pc, #392]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800336e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003372:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800337e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800338e:	e087      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800339e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a2:	4b51      	ldr	r3, [pc, #324]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033d2:	e065      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003500 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033e6:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ee:	ee07 3a90 	vmov	s15, r3
 80033f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800340e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003416:	e043      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003422:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003504 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342a:	4b2f      	ldr	r3, [pc, #188]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343a:	ed97 6a02 	vldr	s12, [r7, #8]
 800343e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800344e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800345a:	e021      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003500 <HAL_RCC_GetSysClockFreq+0x2ec>
 800346a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003482:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800349e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	0a5b      	lsrs	r3, r3, #9
 80034a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034aa:	3301      	adds	r3, #1
 80034ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c4:	ee17 3a90 	vmov	r3, s15
 80034c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80034ca:	e005      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
    break;
 80034d0:	e002      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034d4:	61bb      	str	r3, [r7, #24]
    break;
 80034d6:	bf00      	nop
  }

  return sysclockfreq;
 80034d8:	69bb      	ldr	r3, [r7, #24]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	; 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	58024400 	.word	0x58024400
 80034ec:	03d09000 	.word	0x03d09000
 80034f0:	003d0900 	.word	0x003d0900
 80034f4:	007a1200 	.word	0x007a1200
 80034f8:	46000000 	.word	0x46000000
 80034fc:	4c742400 	.word	0x4c742400
 8003500:	4a742400 	.word	0x4a742400
 8003504:	4af42400 	.word	0x4af42400

08003508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800350e:	f7ff fe81 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 8003512:	4602      	mov	r2, r0
 8003514:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_RCC_GetHCLKFreq+0x50>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	0a1b      	lsrs	r3, r3, #8
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	490f      	ldr	r1, [pc, #60]	; (800355c <HAL_RCC_GetHCLKFreq+0x54>)
 8003520:	5ccb      	ldrb	r3, [r1, r3]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_RCC_GetHCLKFreq+0x50>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_RCC_GetHCLKFreq+0x54>)
 8003536:	5cd3      	ldrb	r3, [r2, r3]
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	4a07      	ldr	r2, [pc, #28]	; (8003560 <HAL_RCC_GetHCLKFreq+0x58>)
 8003544:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003546:	4a07      	ldr	r2, [pc, #28]	; (8003564 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <HAL_RCC_GetHCLKFreq+0x58>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	58024400 	.word	0x58024400
 800355c:	0800a384 	.word	0x0800a384
 8003560:	24000008 	.word	0x24000008
 8003564:	24000004 	.word	0x24000004

08003568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800356c:	f7ff ffcc 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4904      	ldr	r1, [pc, #16]	; (8003590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	58024400 	.word	0x58024400
 8003590:	0800a384 	.word	0x0800a384

08003594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003598:	f7ff ffb6 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4904      	ldr	r1, [pc, #16]	; (80035bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	58024400 	.word	0x58024400
 80035bc:	0800a384 	.word	0x0800a384

080035c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	223f      	movs	r2, #63	; 0x3f
 80035ce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <HAL_RCC_GetClockConfig+0x7c>)
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f003 0207 	and.w	r2, r3, #7
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80035dc:	4b17      	ldr	r3, [pc, #92]	; (800363c <HAL_RCC_GetClockConfig+0x7c>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_RCC_GetClockConfig+0x7c>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 020f 	and.w	r2, r3, #15
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_GetClockConfig+0x7c>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <HAL_RCC_GetClockConfig+0x7c>)
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_RCC_GetClockConfig+0x7c>)
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <HAL_RCC_GetClockConfig+0x7c>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_GetClockConfig+0x80>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 020f 	and.w	r2, r3, #15
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	601a      	str	r2, [r3, #0]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	58024400 	.word	0x58024400
 8003640:	52002000 	.word	0x52002000

08003644 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800364c:	2300      	movs	r3, #0
 800364e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003650:	2300      	movs	r3, #0
 8003652:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d03f      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003668:	d02a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800366a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800366e:	d824      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003674:	d018      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800367a:	d81e      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003684:	d007      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003686:	e018      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003688:	4bab      	ldr	r3, [pc, #684]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	4aaa      	ldr	r2, [pc, #680]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800368e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003692:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003694:	e015      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3304      	adds	r3, #4
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f001 f9cf 	bl	8004a40 <RCCEx_PLL2_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036a6:	e00c      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3324      	adds	r3, #36	; 0x24
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 fa78 	bl	8004ba4 <RCCEx_PLL3_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036b8:	e003      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
      break;
 80036be:	e000      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d109      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036c8:	4b9b      	ldr	r3, [pc, #620]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d4:	4998      	ldr	r1, [pc, #608]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	650b      	str	r3, [r1, #80]	; 0x50
 80036da:	e001      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d03d      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d826      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003711 	.word	0x08003711
 8003700:	0800371f 	.word	0x0800371f
 8003704:	08003731 	.word	0x08003731
 8003708:	08003749 	.word	0x08003749
 800370c:	08003749 	.word	0x08003749
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003710:	4b89      	ldr	r3, [pc, #548]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	4a88      	ldr	r2, [pc, #544]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800371c:	e015      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f001 f98b 	bl	8004a40 <RCCEx_PLL2_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800372e:	e00c      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3324      	adds	r3, #36	; 0x24
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f001 fa34 	bl	8004ba4 <RCCEx_PLL3_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
      break;
 8003746:	e000      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374a:	7dfb      	ldrb	r3, [r7, #23]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003750:	4b79      	ldr	r3, [pc, #484]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003754:	f023 0207 	bic.w	r2, r3, #7
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	4976      	ldr	r1, [pc, #472]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	650b      	str	r3, [r1, #80]	; 0x50
 8003762:	e001      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003770:	2b00      	cmp	r3, #0
 8003772:	d042      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377c:	d02b      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800377e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003782:	d825      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003784:	2bc0      	cmp	r3, #192	; 0xc0
 8003786:	d028      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003788:	2bc0      	cmp	r3, #192	; 0xc0
 800378a:	d821      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d016      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d81d      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003798:	2b40      	cmp	r3, #64	; 0x40
 800379a:	d007      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x168>
 800379c:	e018      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379e:	4b66      	ldr	r3, [pc, #408]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	4a65      	ldr	r2, [pc, #404]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037aa:	e017      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f001 f944 	bl	8004a40 <RCCEx_PLL2_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037bc:	e00e      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3324      	adds	r3, #36	; 0x24
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 f9ed 	bl	8004ba4 <RCCEx_PLL3_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037ce:	e005      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	75fb      	strb	r3, [r7, #23]
      break;
 80037d4:	e002      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80037d6:	bf00      	nop
 80037d8:	e000      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80037da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037e2:	4b55      	ldr	r3, [pc, #340]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	4952      	ldr	r1, [pc, #328]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	650b      	str	r3, [r1, #80]	; 0x50
 80037f4:	e001      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003802:	2b00      	cmp	r3, #0
 8003804:	d049      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800380c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003810:	d030      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003812:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003816:	d82a      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003818:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800381c:	d02c      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800381e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003822:	d824      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003828:	d018      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800382a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382e:	d81e      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003838:	d007      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800383a:	e018      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383c:	4b3e      	ldr	r3, [pc, #248]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	4a3d      	ldr	r2, [pc, #244]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003848:	e017      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f001 f8f5 	bl	8004a40 <RCCEx_PLL2_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800385a:	e00e      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3324      	adds	r3, #36	; 0x24
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f001 f99e 	bl	8004ba4 <RCCEx_PLL3_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800386c:	e005      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
      break;
 8003872:	e002      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003874:	bf00      	nop
 8003876:	e000      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003880:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800388e:	492a      	ldr	r1, [pc, #168]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	658b      	str	r3, [r1, #88]	; 0x58
 8003894:	e001      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d04c      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038b0:	d030      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80038b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038b6:	d82a      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038bc:	d02c      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80038be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038c2:	d824      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c8:	d018      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80038ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ce:	d81e      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80038d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d8:	d007      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80038da:	e018      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038dc:	4b16      	ldr	r3, [pc, #88]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	4a15      	ldr	r2, [pc, #84]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038e8:	e017      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 f8a5 	bl	8004a40 <RCCEx_PLL2_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038fa:	e00e      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3324      	adds	r3, #36	; 0x24
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f001 f94e 	bl	8004ba4 <RCCEx_PLL3_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800390c:	e005      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
      break;
 8003912:	e002      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003914:	bf00      	nop
 8003916:	e000      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10d      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800392e:	4902      	ldr	r1, [pc, #8]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	658b      	str	r3, [r1, #88]	; 0x58
 8003934:	e004      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003936:	bf00      	nop
 8003938:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d032      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	2b30      	cmp	r3, #48	; 0x30
 8003952:	d01c      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003954:	2b30      	cmp	r3, #48	; 0x30
 8003956:	d817      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003958:	2b20      	cmp	r3, #32
 800395a:	d00c      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800395c:	2b20      	cmp	r3, #32
 800395e:	d813      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d016      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003964:	2b10      	cmp	r3, #16
 8003966:	d10f      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4baf      	ldr	r3, [pc, #700]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4aae      	ldr	r2, [pc, #696]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003972:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003974:	e00e      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	2102      	movs	r1, #2
 800397c:	4618      	mov	r0, r3
 800397e:	f001 f85f 	bl	8004a40 <RCCEx_PLL2_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003986:	e005      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	75fb      	strb	r3, [r7, #23]
      break;
 800398c:	e002      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800398e:	bf00      	nop
 8003990:	e000      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800399a:	4ba3      	ldr	r3, [pc, #652]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a6:	49a0      	ldr	r1, [pc, #640]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039ac:	e001      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d047      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c6:	d030      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80039c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039cc:	d82a      	bhi.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039d2:	d02c      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80039d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039d8:	d824      	bhi.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039de:	d018      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80039e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e4:	d81e      	bhi.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80039ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ee:	d007      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80039f0:	e018      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f2:	4b8d      	ldr	r3, [pc, #564]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	4a8c      	ldr	r2, [pc, #560]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039fe:	e017      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 f81a 	bl	8004a40 <RCCEx_PLL2_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a10:	e00e      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3324      	adds	r3, #36	; 0x24
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 f8c3 	bl	8004ba4 <RCCEx_PLL3_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a22:	e005      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
      break;
 8003a28:	e002      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a36:	4b7c      	ldr	r3, [pc, #496]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	4979      	ldr	r1, [pc, #484]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	650b      	str	r3, [r1, #80]	; 0x50
 8003a48:	e001      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d049      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a62:	d02e      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a68:	d828      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a6e:	d02a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003a70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a74:	d822      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a7a:	d026      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003a7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a80:	d81c      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a86:	d010      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a8c:	d816      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01d      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a96:	d111      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 ffce 	bl	8004a40 <RCCEx_PLL2_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003aa8:	e012      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3324      	adds	r3, #36	; 0x24
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 f877 	bl	8004ba4 <RCCEx_PLL3_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003aba:	e009      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac0:	e006      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e004      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ad6:	4b54      	ldr	r3, [pc, #336]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ada:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae2:	4951      	ldr	r1, [pc, #324]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	650b      	str	r3, [r1, #80]	; 0x50
 8003ae8:	e001      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d04b      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b04:	d02e      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b0a:	d828      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b10:	d02a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b16:	d822      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b1c:	d026      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b22:	d81c      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b28:	d010      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b2e:	d816      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01d      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b38:	d111      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	2101      	movs	r1, #1
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 ff7d 	bl	8004a40 <RCCEx_PLL2_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b4a:	e012      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3324      	adds	r3, #36	; 0x24
 8003b50:	2101      	movs	r1, #1
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 f826 	bl	8004ba4 <RCCEx_PLL3_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b5c:	e009      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
      break;
 8003b62:	e006      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b64:	bf00      	nop
 8003b66:	e004      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b68:	bf00      	nop
 8003b6a:	e002      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b6c:	bf00      	nop
 8003b6e:	e000      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b78:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b86:	4928      	ldr	r1, [pc, #160]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	658b      	str	r3, [r1, #88]	; 0x58
 8003b8c:	e001      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d02f      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bac:	d814      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d015      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb6:	d10f      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003bc4:	e00c      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2101      	movs	r1, #1
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 ff37 	bl	8004a40 <RCCEx_PLL2_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003bd6:	e003      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
      break;
 8003bdc:	e000      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf2:	490d      	ldr	r1, [pc, #52]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	650b      	str	r3, [r1, #80]	; 0x50
 8003bf8:	e001      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
 8003bfc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d033      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d81c      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c12:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c53 	.word	0x08003c53
 8003c1c:	08003c2d 	.word	0x08003c2d
 8003c20:	08003c3b 	.word	0x08003c3b
 8003c24:	08003c53 	.word	0x08003c53
 8003c28:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c2c:	4bb8      	ldr	r3, [pc, #736]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	4ab7      	ldr	r2, [pc, #732]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c38:	e00c      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2102      	movs	r1, #2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fefd 	bl	8004a40 <RCCEx_PLL2_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c4a:	e003      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c50:	e000      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c5a:	4bad      	ldr	r3, [pc, #692]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	49aa      	ldr	r1, [pc, #680]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c6c:	e001      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8086 	beq.w	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c80:	4ba4      	ldr	r3, [pc, #656]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4aa3      	ldr	r2, [pc, #652]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c8c:	f7fd fad4 	bl	8001238 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c92:	e009      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c94:	f7fd fad0 	bl	8001238 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d902      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	75fb      	strb	r3, [r7, #23]
        break;
 8003ca6:	e005      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ca8:	4b9a      	ldr	r3, [pc, #616]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ef      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d166      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cba:	4b95      	ldr	r3, [pc, #596]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cc4:	4053      	eors	r3, r2
 8003cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d013      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cce:	4b90      	ldr	r3, [pc, #576]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cd8:	4b8d      	ldr	r3, [pc, #564]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4a8c      	ldr	r2, [pc, #560]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce4:	4b8a      	ldr	r3, [pc, #552]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a89      	ldr	r2, [pc, #548]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cf0:	4a87      	ldr	r2, [pc, #540]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d00:	d115      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fd fa99 	bl	8001238 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d08:	e00b      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0a:	f7fd fa95 	bl	8001238 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d902      	bls.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	75fb      	strb	r3, [r7, #23]
            break;
 8003d20:	e005      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d22:	4b7b      	ldr	r3, [pc, #492]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ed      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d126      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003d44:	4b72      	ldr	r3, [pc, #456]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d52:	0919      	lsrs	r1, r3, #4
 8003d54:	4b70      	ldr	r3, [pc, #448]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003d56:	400b      	ands	r3, r1
 8003d58:	496d      	ldr	r1, [pc, #436]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	610b      	str	r3, [r1, #16]
 8003d5e:	e005      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003d60:	4b6b      	ldr	r3, [pc, #428]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	4a6a      	ldr	r2, [pc, #424]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d6a:	6113      	str	r3, [r2, #16]
 8003d6c:	4b68      	ldr	r3, [pc, #416]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7a:	4965      	ldr	r1, [pc, #404]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	670b      	str	r3, [r1, #112]	; 0x70
 8003d80:	e004      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	75bb      	strb	r3, [r7, #22]
 8003d86:	e001      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
 8003d8a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d07e      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d9c:	2b28      	cmp	r3, #40	; 0x28
 8003d9e:	d867      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003e77 	.word	0x08003e77
 8003dac:	08003e71 	.word	0x08003e71
 8003db0:	08003e71 	.word	0x08003e71
 8003db4:	08003e71 	.word	0x08003e71
 8003db8:	08003e71 	.word	0x08003e71
 8003dbc:	08003e71 	.word	0x08003e71
 8003dc0:	08003e71 	.word	0x08003e71
 8003dc4:	08003e71 	.word	0x08003e71
 8003dc8:	08003e4d 	.word	0x08003e4d
 8003dcc:	08003e71 	.word	0x08003e71
 8003dd0:	08003e71 	.word	0x08003e71
 8003dd4:	08003e71 	.word	0x08003e71
 8003dd8:	08003e71 	.word	0x08003e71
 8003ddc:	08003e71 	.word	0x08003e71
 8003de0:	08003e71 	.word	0x08003e71
 8003de4:	08003e71 	.word	0x08003e71
 8003de8:	08003e5f 	.word	0x08003e5f
 8003dec:	08003e71 	.word	0x08003e71
 8003df0:	08003e71 	.word	0x08003e71
 8003df4:	08003e71 	.word	0x08003e71
 8003df8:	08003e71 	.word	0x08003e71
 8003dfc:	08003e71 	.word	0x08003e71
 8003e00:	08003e71 	.word	0x08003e71
 8003e04:	08003e71 	.word	0x08003e71
 8003e08:	08003e77 	.word	0x08003e77
 8003e0c:	08003e71 	.word	0x08003e71
 8003e10:	08003e71 	.word	0x08003e71
 8003e14:	08003e71 	.word	0x08003e71
 8003e18:	08003e71 	.word	0x08003e71
 8003e1c:	08003e71 	.word	0x08003e71
 8003e20:	08003e71 	.word	0x08003e71
 8003e24:	08003e71 	.word	0x08003e71
 8003e28:	08003e77 	.word	0x08003e77
 8003e2c:	08003e71 	.word	0x08003e71
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e71 	.word	0x08003e71
 8003e38:	08003e71 	.word	0x08003e71
 8003e3c:	08003e71 	.word	0x08003e71
 8003e40:	08003e71 	.word	0x08003e71
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e77 	.word	0x08003e77
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	2101      	movs	r1, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fdf4 	bl	8004a40 <RCCEx_PLL2_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e5c:	e00c      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3324      	adds	r3, #36	; 0x24
 8003e62:	2101      	movs	r1, #1
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fe9d 	bl	8004ba4 <RCCEx_PLL3_Config>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e6e:	e003      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	75fb      	strb	r3, [r7, #23]
      break;
 8003e74:	e000      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e7e:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8a:	4921      	ldr	r1, [pc, #132]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	654b      	str	r3, [r1, #84]	; 0x54
 8003e90:	e001      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d03e      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d820      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003eaa:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003ef3 	.word	0x08003ef3
 8003eb4:	08003ec9 	.word	0x08003ec9
 8003eb8:	08003edb 	.word	0x08003edb
 8003ebc:	08003ef3 	.word	0x08003ef3
 8003ec0:	08003ef3 	.word	0x08003ef3
 8003ec4:	08003ef3 	.word	0x08003ef3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	2101      	movs	r1, #1
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fdb6 	bl	8004a40 <RCCEx_PLL2_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ed8:	e00c      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3324      	adds	r3, #36	; 0x24
 8003ede:	2101      	movs	r1, #1
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fe5f 	bl	8004ba4 <RCCEx_PLL3_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003eea:	e003      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d110      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	f023 0207 	bic.w	r2, r3, #7
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f06:	4902      	ldr	r1, [pc, #8]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	654b      	str	r3, [r1, #84]	; 0x54
 8003f0c:	e008      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003f0e:	bf00      	nop
 8003f10:	58024400 	.word	0x58024400
 8003f14:	58024800 	.word	0x58024800
 8003f18:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d039      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d820      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003f36:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f7f 	.word	0x08003f7f
 8003f40:	08003f55 	.word	0x08003f55
 8003f44:	08003f67 	.word	0x08003f67
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f7f 	.word	0x08003f7f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	2101      	movs	r1, #1
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fd70 	bl	8004a40 <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f64:	e00c      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3324      	adds	r3, #36	; 0x24
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fe19 	bl	8004ba4 <RCCEx_PLL3_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f76:	e003      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f86:	4bb7      	ldr	r3, [pc, #732]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	f023 0207 	bic.w	r2, r3, #7
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	49b3      	ldr	r1, [pc, #716]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	658b      	str	r3, [r1, #88]	; 0x58
 8003f9a:	e001      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d04b      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fb6:	d02e      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fbc:	d828      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d02a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d822      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003fca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fce:	d026      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003fd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fd4:	d81c      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fda:	d010      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fe0:	d816      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01d      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fea:	d111      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fd24 	bl	8004a40 <RCCEx_PLL2_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ffc:	e012      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3324      	adds	r3, #36	; 0x24
 8004002:	2102      	movs	r1, #2
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fdcd 	bl	8004ba4 <RCCEx_PLL3_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800400e:	e009      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	75fb      	strb	r3, [r7, #23]
      break;
 8004014:	e006      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004016:	bf00      	nop
 8004018:	e004      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800401a:	bf00      	nop
 800401c:	e002      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800402a:	4b8e      	ldr	r3, [pc, #568]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004038:	498a      	ldr	r1, [pc, #552]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800403a:	4313      	orrs	r3, r2
 800403c:	654b      	str	r3, [r1, #84]	; 0x54
 800403e:	e001      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d04b      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004056:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800405a:	d02e      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800405c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004060:	d828      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004066:	d02a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406c:	d822      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800406e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004072:	d026      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004074:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004078:	d81c      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800407a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407e:	d010      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004084:	d816      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01d      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800408a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408e:	d111      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fcd2 	bl	8004a40 <RCCEx_PLL2_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040a0:	e012      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3324      	adds	r3, #36	; 0x24
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fd7b 	bl	8004ba4 <RCCEx_PLL3_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040b2:	e009      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	75fb      	strb	r3, [r7, #23]
      break;
 80040b8:	e006      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80040ba:	bf00      	nop
 80040bc:	e004      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80040be:	bf00      	nop
 80040c0:	e002      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80040c2:	bf00      	nop
 80040c4:	e000      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80040c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040ce:	4b65      	ldr	r3, [pc, #404]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040dc:	4961      	ldr	r1, [pc, #388]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	658b      	str	r3, [r1, #88]	; 0x58
 80040e2:	e001      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d04b      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040fe:	d02e      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004100:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004104:	d828      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410a:	d02a      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800410c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004110:	d822      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004112:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004116:	d026      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004118:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800411c:	d81c      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800411e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004122:	d010      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004128:	d816      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d01d      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004132:	d111      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fc80 	bl	8004a40 <RCCEx_PLL2_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004144:	e012      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3324      	adds	r3, #36	; 0x24
 800414a:	2102      	movs	r1, #2
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fd29 	bl	8004ba4 <RCCEx_PLL3_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004156:	e009      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	75fb      	strb	r3, [r7, #23]
      break;
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800415e:	bf00      	nop
 8004160:	e004      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800416a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004172:	4b3c      	ldr	r3, [pc, #240]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004180:	4938      	ldr	r1, [pc, #224]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004182:	4313      	orrs	r3, r2
 8004184:	658b      	str	r3, [r1, #88]	; 0x58
 8004186:	e001      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a2:	d10a      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3324      	adds	r3, #36	; 0x24
 80041a8:	2102      	movs	r1, #2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fcfa 	bl	8004ba4 <RCCEx_PLL3_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041ba:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c8:	4926      	ldr	r1, [pc, #152]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e4:	d10a      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3324      	adds	r3, #36	; 0x24
 80041ea:	2102      	movs	r1, #2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fcd9 	bl	8004ba4 <RCCEx_PLL3_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420a:	4916      	ldr	r1, [pc, #88]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800420c:	4313      	orrs	r3, r2
 800420e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d036      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004222:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004226:	d01f      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800422c:	d817      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004236:	d009      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004238:	e011      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3304      	adds	r3, #4
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fbfd 	bl	8004a40 <RCCEx_PLL2_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800424a:	e00e      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3324      	adds	r3, #36	; 0x24
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fca6 	bl	8004ba4 <RCCEx_PLL3_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800425c:	e005      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
      break;
 8004262:	e002      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004264:	58024400 	.word	0x58024400
      break;
 8004268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004270:	4b93      	ldr	r3, [pc, #588]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800427e:	4990      	ldr	r1, [pc, #576]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004280:	4313      	orrs	r3, r2
 8004282:	658b      	str	r3, [r1, #88]	; 0x58
 8004284:	e001      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d033      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042a0:	d01c      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80042a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042a6:	d816      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80042a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ac:	d003      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80042ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b2:	d007      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80042b4:	e00f      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b6:	4b82      	ldr	r3, [pc, #520]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	4a81      	ldr	r2, [pc, #516]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80042c2:	e00c      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3324      	adds	r3, #36	; 0x24
 80042c8:	2101      	movs	r1, #1
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fc6a 	bl	8004ba4 <RCCEx_PLL3_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80042d4:	e003      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
      break;
 80042da:	e000      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80042dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042de:	7dfb      	ldrb	r3, [r7, #23]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e4:	4b76      	ldr	r3, [pc, #472]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f2:	4973      	ldr	r1, [pc, #460]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	654b      	str	r3, [r1, #84]	; 0x54
 80042f8:	e001      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d029      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004316:	d007      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004318:	e00f      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800431a:	4b69      	ldr	r3, [pc, #420]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	4a68      	ldr	r2, [pc, #416]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004324:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004326:	e00b      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3304      	adds	r3, #4
 800432c:	2102      	movs	r1, #2
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fb86 	bl	8004a40 <RCCEx_PLL2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004338:	e002      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	75fb      	strb	r3, [r7, #23]
      break;
 800433e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004346:	4b5e      	ldr	r3, [pc, #376]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004352:	495b      	ldr	r1, [pc, #364]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004354:	4313      	orrs	r3, r2
 8004356:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004358:	e001      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3324      	adds	r3, #36	; 0x24
 800436e:	2102      	movs	r1, #2
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fc17 	bl	8004ba4 <RCCEx_PLL3_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d030      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004394:	d017      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439a:	d811      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800439c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a0:	d013      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80043a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a6:	d80b      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80043ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b0:	d106      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b2:	4b43      	ldr	r3, [pc, #268]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	4a42      	ldr	r2, [pc, #264]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80043be:	e007      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
      break;
 80043c4:	e004      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80043ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043d6:	4b3a      	ldr	r3, [pc, #232]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e2:	4937      	ldr	r1, [pc, #220]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	654b      	str	r3, [r1, #84]	; 0x54
 80043e8:	e001      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
 80043ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043fa:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	492e      	ldr	r1, [pc, #184]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004408:	4313      	orrs	r3, r2
 800440a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004418:	4b29      	ldr	r3, [pc, #164]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004426:	4926      	ldr	r1, [pc, #152]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004428:	4313      	orrs	r3, r2
 800442a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004438:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800443a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004444:	491e      	ldr	r1, [pc, #120]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004446:	4313      	orrs	r3, r2
 8004448:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00d      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004456:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800445c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004460:	6113      	str	r3, [r2, #16]
 8004462:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800446c:	4914      	ldr	r1, [pc, #80]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	da08      	bge.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800447a:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004486:	490e      	ldr	r1, [pc, #56]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	4906      	ldr	r1, [pc, #24]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80044ac:	7dbb      	ldrb	r3, [r7, #22]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	58024400 	.word	0x58024400

080044c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044c8:	f7ff f81e 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4904      	ldr	r1, [pc, #16]	; (80044ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	58024400 	.word	0x58024400
 80044ec:	0800a384 	.word	0x0800a384

080044f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044f8:	4ba1      	ldr	r3, [pc, #644]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004502:	4b9f      	ldr	r3, [pc, #636]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	0b1b      	lsrs	r3, r3, #12
 8004508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800450c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800450e:	4b9c      	ldr	r3, [pc, #624]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800451a:	4b99      	ldr	r3, [pc, #612]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	08db      	lsrs	r3, r3, #3
 8004520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8111 	beq.w	8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b02      	cmp	r3, #2
 8004542:	f000 8083 	beq.w	800464c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b02      	cmp	r3, #2
 800454a:	f200 80a1 	bhi.w	8004690 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d056      	beq.n	8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800455a:	e099      	b.n	8004690 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800455c:	4b88      	ldr	r3, [pc, #544]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d02d      	beq.n	80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004568:	4b85      	ldr	r3, [pc, #532]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	08db      	lsrs	r3, r3, #3
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	4a84      	ldr	r2, [pc, #528]	; (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
 8004578:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004592:	4b7b      	ldr	r3, [pc, #492]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80045c2:	e087      	b.n	80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800478c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d6:	4b6a      	ldr	r3, [pc, #424]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004606:	e065      	b.n	80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b59      	ldr	r3, [pc, #356]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a03 	vldr	s12, [r7, #12]
 800462e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800464a:	e043      	b.n	80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465e:	4b48      	ldr	r3, [pc, #288]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004672:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800468e:	e021      	b.n	80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a2:	4b37      	ldr	r3, [pc, #220]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80046d4:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	0a5b      	lsrs	r3, r3, #9
 80046da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fa:	ee17 2a90 	vmov	r2, s15
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004702:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	0c1b      	lsrs	r3, r3, #16
 8004708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800471c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004728:	ee17 2a90 	vmov	r2, s15
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004730:	4b13      	ldr	r3, [pc, #76]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	0e1b      	lsrs	r3, r3, #24
 8004736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800474a:	edd7 6a07 	vldr	s13, [r7, #28]
 800474e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004756:	ee17 2a90 	vmov	r2, s15
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800475e:	e008      	b.n	8004772 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
}
 8004772:	bf00      	nop
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	58024400 	.word	0x58024400
 8004784:	03d09000 	.word	0x03d09000
 8004788:	46000000 	.word	0x46000000
 800478c:	4c742400 	.word	0x4c742400
 8004790:	4a742400 	.word	0x4a742400
 8004794:	4af42400 	.word	0x4af42400

08004798 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004798:	b480      	push	{r7}
 800479a:	b089      	sub	sp, #36	; 0x24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047a0:	4ba1      	ldr	r3, [pc, #644]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80047aa:	4b9f      	ldr	r3, [pc, #636]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	0d1b      	lsrs	r3, r3, #20
 80047b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047b6:	4b9c      	ldr	r3, [pc, #624]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80047c2:	4b99      	ldr	r3, [pc, #612]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	08db      	lsrs	r3, r3, #3
 80047c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8111 	beq.w	8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	f000 8083 	beq.w	80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	f200 80a1 	bhi.w	8004938 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d056      	beq.n	80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004802:	e099      	b.n	8004938 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004804:	4b88      	ldr	r3, [pc, #544]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02d      	beq.n	800486c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004810:	4b85      	ldr	r3, [pc, #532]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	08db      	lsrs	r3, r3, #3
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	4a84      	ldr	r2, [pc, #528]	; (8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
 8004820:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	ee07 3a90 	vmov	s15, r3
 8004828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483a:	4b7b      	ldr	r3, [pc, #492]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484a:	ed97 6a03 	vldr	s12, [r7, #12]
 800484e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800485e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004866:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800486a:	e087      	b.n	800497c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004876:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800487a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800487e:	4b6a      	ldr	r3, [pc, #424]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004892:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800489e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048ae:	e065      	b.n	800497c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c2:	4b59      	ldr	r3, [pc, #356]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048f2:	e043      	b.n	800497c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004906:	4b48      	ldr	r3, [pc, #288]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004916:	ed97 6a03 	vldr	s12, [r7, #12]
 800491a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800491e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800492a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800492e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004936:	e021      	b.n	800497c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004942:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494a:	4b37      	ldr	r3, [pc, #220]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495a:	ed97 6a03 	vldr	s12, [r7, #12]
 800495e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800496e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800497a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800497c:	4b2a      	ldr	r3, [pc, #168]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	0a5b      	lsrs	r3, r3, #9
 8004982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004992:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004996:	edd7 6a07 	vldr	s13, [r7, #28]
 800499a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800499e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a2:	ee17 2a90 	vmov	r2, s15
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80049aa:	4b1f      	ldr	r3, [pc, #124]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	0c1b      	lsrs	r3, r3, #16
 80049b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d0:	ee17 2a90 	vmov	r2, s15
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80049d8:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	0e1b      	lsrs	r3, r3, #24
 80049de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049fe:	ee17 2a90 	vmov	r2, s15
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a06:	e008      	b.n	8004a1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	609a      	str	r2, [r3, #8]
}
 8004a1a:	bf00      	nop
 8004a1c:	3724      	adds	r7, #36	; 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	03d09000 	.word	0x03d09000
 8004a30:	46000000 	.word	0x46000000
 8004a34:	4c742400 	.word	0x4c742400
 8004a38:	4a742400 	.word	0x4a742400
 8004a3c:	4af42400 	.word	0x4af42400

08004a40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a4e:	4b53      	ldr	r3, [pc, #332]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d101      	bne.n	8004a5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e099      	b.n	8004b92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a5e:	4b4f      	ldr	r3, [pc, #316]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a4e      	ldr	r2, [pc, #312]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004a64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6a:	f7fc fbe5 	bl	8001238 <HAL_GetTick>
 8004a6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a70:	e008      	b.n	8004a84 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a72:	f7fc fbe1 	bl	8001238 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e086      	b.n	8004b92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a84:	4b45      	ldr	r3, [pc, #276]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f0      	bne.n	8004a72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a90:	4b42      	ldr	r3, [pc, #264]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	031b      	lsls	r3, r3, #12
 8004a9e:	493f      	ldr	r1, [pc, #252]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	628b      	str	r3, [r1, #40]	; 0x28
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	025b      	lsls	r3, r3, #9
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	041b      	lsls	r3, r3, #16
 8004ac2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	061b      	lsls	r3, r3, #24
 8004ad0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ad4:	4931      	ldr	r1, [pc, #196]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ada:	4b30      	ldr	r3, [pc, #192]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	492d      	ldr	r1, [pc, #180]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004aec:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	f023 0220 	bic.w	r2, r3, #32
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	4928      	ldr	r1, [pc, #160]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004afe:	4b27      	ldr	r3, [pc, #156]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	4a26      	ldr	r2, [pc, #152]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b04:	f023 0310 	bic.w	r3, r3, #16
 8004b08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b0a:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b0e:	4b24      	ldr	r3, [pc, #144]	; (8004ba0 <RCCEx_PLL2_Config+0x160>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	69d2      	ldr	r2, [r2, #28]
 8004b16:	00d2      	lsls	r2, r2, #3
 8004b18:	4920      	ldr	r1, [pc, #128]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b1e:	4b1f      	ldr	r3, [pc, #124]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	4a1e      	ldr	r2, [pc, #120]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b24:	f043 0310 	orr.w	r3, r3, #16
 8004b28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b30:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b3c:	e00f      	b.n	8004b5e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d106      	bne.n	8004b52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b44:	4b15      	ldr	r3, [pc, #84]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	4a14      	ldr	r2, [pc, #80]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b50:	e005      	b.n	8004b5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6a:	f7fc fb65 	bl	8001238 <HAL_GetTick>
 8004b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b70:	e008      	b.n	8004b84 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b72:	f7fc fb61 	bl	8001238 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e006      	b.n	8004b92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <RCCEx_PLL2_Config+0x15c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	58024400 	.word	0x58024400
 8004ba0:	ffff0007 	.word	0xffff0007

08004ba4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bb2:	4b53      	ldr	r3, [pc, #332]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d101      	bne.n	8004bc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e099      	b.n	8004cf6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bc2:	4b4f      	ldr	r3, [pc, #316]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a4e      	ldr	r2, [pc, #312]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bce:	f7fc fb33 	bl	8001238 <HAL_GetTick>
 8004bd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bd4:	e008      	b.n	8004be8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004bd6:	f7fc fb2f 	bl	8001238 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e086      	b.n	8004cf6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004be8:	4b45      	ldr	r3, [pc, #276]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f0      	bne.n	8004bd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bf4:	4b42      	ldr	r3, [pc, #264]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	051b      	lsls	r3, r3, #20
 8004c02:	493f      	ldr	r1, [pc, #252]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	628b      	str	r3, [r1, #40]	; 0x28
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	025b      	lsls	r3, r3, #9
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	061b      	lsls	r3, r3, #24
 8004c34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c38:	4931      	ldr	r1, [pc, #196]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c3e:	4b30      	ldr	r3, [pc, #192]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	492d      	ldr	r1, [pc, #180]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c50:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	4928      	ldr	r1, [pc, #160]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c62:	4b27      	ldr	r3, [pc, #156]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c6e:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c72:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <RCCEx_PLL3_Config+0x160>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	69d2      	ldr	r2, [r2, #28]
 8004c7a:	00d2      	lsls	r2, r2, #3
 8004c7c:	4920      	ldr	r1, [pc, #128]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c82:	4b1f      	ldr	r3, [pc, #124]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	4a1e      	ldr	r2, [pc, #120]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c94:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004c9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ca0:	e00f      	b.n	8004cc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d106      	bne.n	8004cb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ca8:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	4a14      	ldr	r2, [pc, #80]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004cae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cb4:	e005      	b.n	8004cc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cb6:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a0e      	ldr	r2, [pc, #56]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cce:	f7fc fab3 	bl	8001238 <HAL_GetTick>
 8004cd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004cd6:	f7fc faaf 	bl	8001238 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e006      	b.n	8004cf6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <RCCEx_PLL3_Config+0x15c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	58024400 	.word	0x58024400
 8004d04:	ffff0007 	.word	0xffff0007

08004d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e049      	b.n	8004dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f841 	bl	8004db6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f000 f9f8 	bl	800513c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
	...

08004dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d001      	beq.n	8004de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e04f      	b.n	8004e84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a23      	ldr	r2, [pc, #140]	; (8004e90 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01d      	beq.n	8004e42 <HAL_TIM_Base_Start_IT+0x76>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0e:	d018      	beq.n	8004e42 <HAL_TIM_Base_Start_IT+0x76>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1f      	ldr	r2, [pc, #124]	; (8004e94 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_TIM_Base_Start_IT+0x76>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_TIM_Base_Start_IT+0x76>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1c      	ldr	r2, [pc, #112]	; (8004e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_TIM_Base_Start_IT+0x76>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIM_Base_Start_IT+0x76>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a19      	ldr	r2, [pc, #100]	; (8004ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d115      	bne.n	8004e6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b06      	cmp	r3, #6
 8004e52:	d015      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0xb4>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5a:	d011      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6c:	e008      	b.n	8004e80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e000      	b.n	8004e82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40000400 	.word	0x40000400
 8004e98:	40000800 	.word	0x40000800
 8004e9c:	40000c00 	.word	0x40000c00
 8004ea0:	40010400 	.word	0x40010400
 8004ea4:	40001800 	.word	0x40001800
 8004ea8:	00010007 	.word	0x00010007

08004eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d122      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d11b      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0202 	mvn.w	r2, #2
 8004ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f905 	bl	80050fe <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8f7 	bl	80050ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f908 	bl	8005112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d122      	bne.n	8004f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d11b      	bne.n	8004f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0204 	mvn.w	r2, #4
 8004f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f8db 	bl	80050fe <HAL_TIM_IC_CaptureCallback>
 8004f48:	e005      	b.n	8004f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f8cd 	bl	80050ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f8de 	bl	8005112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d122      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d11b      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0208 	mvn.w	r2, #8
 8004f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2204      	movs	r2, #4
 8004f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f8b1 	bl	80050fe <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e005      	b.n	8004faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f8a3 	bl	80050ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f8b4 	bl	8005112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d122      	bne.n	8005004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	d11b      	bne.n	8005004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0210 	mvn.w	r2, #16
 8004fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2208      	movs	r2, #8
 8004fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f887 	bl	80050fe <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f879 	bl	80050ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f88a 	bl	8005112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b01      	cmp	r3, #1
 8005010:	d10e      	bne.n	8005030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b01      	cmp	r3, #1
 800501e:	d107      	bne.n	8005030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0201 	mvn.w	r2, #1
 8005028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fb fdfa 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503a:	2b80      	cmp	r3, #128	; 0x80
 800503c:	d10e      	bne.n	800505c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005048:	2b80      	cmp	r3, #128	; 0x80
 800504a:	d107      	bne.n	800505c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f914 	bl	8005284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800506a:	d10e      	bne.n	800508a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	d107      	bne.n	800508a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f907 	bl	8005298 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d10e      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d107      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f838 	bl	8005126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d10e      	bne.n	80050e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d107      	bne.n	80050e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f06f 0220 	mvn.w	r2, #32
 80050da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f8c7 	bl	8005270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a40      	ldr	r2, [pc, #256]	; (8005250 <TIM_Base_SetConfig+0x114>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515a:	d00f      	beq.n	800517c <TIM_Base_SetConfig+0x40>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a3d      	ldr	r2, [pc, #244]	; (8005254 <TIM_Base_SetConfig+0x118>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_Base_SetConfig+0x40>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a3c      	ldr	r2, [pc, #240]	; (8005258 <TIM_Base_SetConfig+0x11c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d007      	beq.n	800517c <TIM_Base_SetConfig+0x40>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a3b      	ldr	r2, [pc, #236]	; (800525c <TIM_Base_SetConfig+0x120>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_Base_SetConfig+0x40>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a3a      	ldr	r2, [pc, #232]	; (8005260 <TIM_Base_SetConfig+0x124>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d108      	bne.n	800518e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2f      	ldr	r2, [pc, #188]	; (8005250 <TIM_Base_SetConfig+0x114>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01f      	beq.n	80051d6 <TIM_Base_SetConfig+0x9a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519c:	d01b      	beq.n	80051d6 <TIM_Base_SetConfig+0x9a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2c      	ldr	r2, [pc, #176]	; (8005254 <TIM_Base_SetConfig+0x118>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d017      	beq.n	80051d6 <TIM_Base_SetConfig+0x9a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2b      	ldr	r2, [pc, #172]	; (8005258 <TIM_Base_SetConfig+0x11c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <TIM_Base_SetConfig+0x9a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a2a      	ldr	r2, [pc, #168]	; (800525c <TIM_Base_SetConfig+0x120>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00f      	beq.n	80051d6 <TIM_Base_SetConfig+0x9a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a29      	ldr	r2, [pc, #164]	; (8005260 <TIM_Base_SetConfig+0x124>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00b      	beq.n	80051d6 <TIM_Base_SetConfig+0x9a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a28      	ldr	r2, [pc, #160]	; (8005264 <TIM_Base_SetConfig+0x128>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d007      	beq.n	80051d6 <TIM_Base_SetConfig+0x9a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a27      	ldr	r2, [pc, #156]	; (8005268 <TIM_Base_SetConfig+0x12c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d003      	beq.n	80051d6 <TIM_Base_SetConfig+0x9a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a26      	ldr	r2, [pc, #152]	; (800526c <TIM_Base_SetConfig+0x130>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d108      	bne.n	80051e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a10      	ldr	r2, [pc, #64]	; (8005250 <TIM_Base_SetConfig+0x114>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00f      	beq.n	8005234 <TIM_Base_SetConfig+0xf8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a12      	ldr	r2, [pc, #72]	; (8005260 <TIM_Base_SetConfig+0x124>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00b      	beq.n	8005234 <TIM_Base_SetConfig+0xf8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a11      	ldr	r2, [pc, #68]	; (8005264 <TIM_Base_SetConfig+0x128>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_Base_SetConfig+0xf8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a10      	ldr	r2, [pc, #64]	; (8005268 <TIM_Base_SetConfig+0x12c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_Base_SetConfig+0xf8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a0f      	ldr	r2, [pc, #60]	; (800526c <TIM_Base_SetConfig+0x130>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d103      	bne.n	800523c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	615a      	str	r2, [r3, #20]
}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000
 8005254:	40000400 	.word	0x40000400
 8005258:	40000800 	.word	0x40000800
 800525c:	40000c00 	.word	0x40000c00
 8005260:	40010400 	.word	0x40010400
 8005264:	40014000 	.word	0x40014000
 8005268:	40014400 	.word	0x40014400
 800526c:	40014800 	.word	0x40014800

08005270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e042      	b.n	8005344 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d106      	bne.n	80052d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fb fd47 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2224      	movs	r2, #36	; 0x24
 80052da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f8c2 	bl	8005478 <UART_SetConfig>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e022      	b.n	8005344 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fe16 	bl	8005f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800531a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800532a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fe9d 	bl	800607c <UART_CheckIdleState>
 8005342:	4603      	mov	r3, r0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	; 0x28
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005362:	2b20      	cmp	r3, #32
 8005364:	f040 8083 	bne.w	800546e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_UART_Transmit+0x28>
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e07b      	b.n	8005470 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_UART_Transmit+0x3a>
 8005382:	2302      	movs	r3, #2
 8005384:	e074      	b.n	8005470 <HAL_UART_Transmit+0x124>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2221      	movs	r2, #33	; 0x21
 800539a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800539e:	f7fb ff4b 	bl	8001238 <HAL_GetTick>
 80053a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	88fa      	ldrh	r2, [r7, #6]
 80053a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053bc:	d108      	bne.n	80053d0 <HAL_UART_Transmit+0x84>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d104      	bne.n	80053d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	e003      	b.n	80053d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80053e0:	e02c      	b.n	800543c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2200      	movs	r2, #0
 80053ea:	2180      	movs	r1, #128	; 0x80
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 fe90 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e039      	b.n	8005470 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005410:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	3302      	adds	r3, #2
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	e007      	b.n	800542a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	781a      	ldrb	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	3301      	adds	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1cc      	bne.n	80053e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2200      	movs	r2, #0
 8005450:	2140      	movs	r1, #64	; 0x40
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 fe5d 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e006      	b.n	8005470 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e000      	b.n	8005470 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800546e:	2302      	movs	r3, #2
  }
}
 8005470:	4618      	mov	r0, r3
 8005472:	3720      	adds	r7, #32
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005478:	b5b0      	push	{r4, r5, r7, lr}
 800547a:	b08e      	sub	sp, #56	; 0x38
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	4313      	orrs	r3, r2
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4bbf      	ldr	r3, [pc, #764]	; (80057a4 <UART_SetConfig+0x32c>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054ae:	430b      	orrs	r3, r1
 80054b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4ab5      	ldr	r2, [pc, #724]	; (80057a8 <UART_SetConfig+0x330>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054de:	4313      	orrs	r3, r2
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	4bb0      	ldr	r3, [pc, #704]	; (80057ac <UART_SetConfig+0x334>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6812      	ldr	r2, [r2, #0]
 80054f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054f2:	430b      	orrs	r3, r1
 80054f4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	f023 010f 	bic.w	r1, r3, #15
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4aa7      	ldr	r2, [pc, #668]	; (80057b0 <UART_SetConfig+0x338>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d176      	bne.n	8005604 <UART_SetConfig+0x18c>
 8005516:	4ba7      	ldr	r3, [pc, #668]	; (80057b4 <UART_SetConfig+0x33c>)
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800551e:	2b28      	cmp	r3, #40	; 0x28
 8005520:	d86c      	bhi.n	80055fc <UART_SetConfig+0x184>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0xb0>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	080055cd 	.word	0x080055cd
 800552c:	080055fd 	.word	0x080055fd
 8005530:	080055fd 	.word	0x080055fd
 8005534:	080055fd 	.word	0x080055fd
 8005538:	080055fd 	.word	0x080055fd
 800553c:	080055fd 	.word	0x080055fd
 8005540:	080055fd 	.word	0x080055fd
 8005544:	080055fd 	.word	0x080055fd
 8005548:	080055d5 	.word	0x080055d5
 800554c:	080055fd 	.word	0x080055fd
 8005550:	080055fd 	.word	0x080055fd
 8005554:	080055fd 	.word	0x080055fd
 8005558:	080055fd 	.word	0x080055fd
 800555c:	080055fd 	.word	0x080055fd
 8005560:	080055fd 	.word	0x080055fd
 8005564:	080055fd 	.word	0x080055fd
 8005568:	080055dd 	.word	0x080055dd
 800556c:	080055fd 	.word	0x080055fd
 8005570:	080055fd 	.word	0x080055fd
 8005574:	080055fd 	.word	0x080055fd
 8005578:	080055fd 	.word	0x080055fd
 800557c:	080055fd 	.word	0x080055fd
 8005580:	080055fd 	.word	0x080055fd
 8005584:	080055fd 	.word	0x080055fd
 8005588:	080055e5 	.word	0x080055e5
 800558c:	080055fd 	.word	0x080055fd
 8005590:	080055fd 	.word	0x080055fd
 8005594:	080055fd 	.word	0x080055fd
 8005598:	080055fd 	.word	0x080055fd
 800559c:	080055fd 	.word	0x080055fd
 80055a0:	080055fd 	.word	0x080055fd
 80055a4:	080055fd 	.word	0x080055fd
 80055a8:	080055ed 	.word	0x080055ed
 80055ac:	080055fd 	.word	0x080055fd
 80055b0:	080055fd 	.word	0x080055fd
 80055b4:	080055fd 	.word	0x080055fd
 80055b8:	080055fd 	.word	0x080055fd
 80055bc:	080055fd 	.word	0x080055fd
 80055c0:	080055fd 	.word	0x080055fd
 80055c4:	080055fd 	.word	0x080055fd
 80055c8:	080055f5 	.word	0x080055f5
 80055cc:	2301      	movs	r3, #1
 80055ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055d2:	e222      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80055d4:	2304      	movs	r3, #4
 80055d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055da:	e21e      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80055dc:	2308      	movs	r3, #8
 80055de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e2:	e21a      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80055e4:	2310      	movs	r3, #16
 80055e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ea:	e216      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80055ec:	2320      	movs	r3, #32
 80055ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f2:	e212      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80055f4:	2340      	movs	r3, #64	; 0x40
 80055f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fa:	e20e      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	e20a      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a6b      	ldr	r2, [pc, #428]	; (80057b8 <UART_SetConfig+0x340>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d130      	bne.n	8005670 <UART_SetConfig+0x1f8>
 800560e:	4b69      	ldr	r3, [pc, #420]	; (80057b4 <UART_SetConfig+0x33c>)
 8005610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	2b05      	cmp	r3, #5
 8005618:	d826      	bhi.n	8005668 <UART_SetConfig+0x1f0>
 800561a:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <UART_SetConfig+0x1a8>)
 800561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005620:	08005639 	.word	0x08005639
 8005624:	08005641 	.word	0x08005641
 8005628:	08005649 	.word	0x08005649
 800562c:	08005651 	.word	0x08005651
 8005630:	08005659 	.word	0x08005659
 8005634:	08005661 	.word	0x08005661
 8005638:	2300      	movs	r3, #0
 800563a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800563e:	e1ec      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005640:	2304      	movs	r3, #4
 8005642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005646:	e1e8      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005648:	2308      	movs	r3, #8
 800564a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800564e:	e1e4      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005650:	2310      	movs	r3, #16
 8005652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005656:	e1e0      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005658:	2320      	movs	r3, #32
 800565a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800565e:	e1dc      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005660:	2340      	movs	r3, #64	; 0x40
 8005662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005666:	e1d8      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566e:	e1d4      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a51      	ldr	r2, [pc, #324]	; (80057bc <UART_SetConfig+0x344>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d130      	bne.n	80056dc <UART_SetConfig+0x264>
 800567a:	4b4e      	ldr	r3, [pc, #312]	; (80057b4 <UART_SetConfig+0x33c>)
 800567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	2b05      	cmp	r3, #5
 8005684:	d826      	bhi.n	80056d4 <UART_SetConfig+0x25c>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <UART_SetConfig+0x214>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	080056a5 	.word	0x080056a5
 8005690:	080056ad 	.word	0x080056ad
 8005694:	080056b5 	.word	0x080056b5
 8005698:	080056bd 	.word	0x080056bd
 800569c:	080056c5 	.word	0x080056c5
 80056a0:	080056cd 	.word	0x080056cd
 80056a4:	2300      	movs	r3, #0
 80056a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056aa:	e1b6      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80056ac:	2304      	movs	r3, #4
 80056ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056b2:	e1b2      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80056b4:	2308      	movs	r3, #8
 80056b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ba:	e1ae      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80056bc:	2310      	movs	r3, #16
 80056be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056c2:	e1aa      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80056c4:	2320      	movs	r3, #32
 80056c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ca:	e1a6      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80056cc:	2340      	movs	r3, #64	; 0x40
 80056ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d2:	e1a2      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056da:	e19e      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a37      	ldr	r2, [pc, #220]	; (80057c0 <UART_SetConfig+0x348>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d130      	bne.n	8005748 <UART_SetConfig+0x2d0>
 80056e6:	4b33      	ldr	r3, [pc, #204]	; (80057b4 <UART_SetConfig+0x33c>)
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	2b05      	cmp	r3, #5
 80056f0:	d826      	bhi.n	8005740 <UART_SetConfig+0x2c8>
 80056f2:	a201      	add	r2, pc, #4	; (adr r2, 80056f8 <UART_SetConfig+0x280>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	08005711 	.word	0x08005711
 80056fc:	08005719 	.word	0x08005719
 8005700:	08005721 	.word	0x08005721
 8005704:	08005729 	.word	0x08005729
 8005708:	08005731 	.word	0x08005731
 800570c:	08005739 	.word	0x08005739
 8005710:	2300      	movs	r3, #0
 8005712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005716:	e180      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005718:	2304      	movs	r3, #4
 800571a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800571e:	e17c      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005720:	2308      	movs	r3, #8
 8005722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005726:	e178      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005728:	2310      	movs	r3, #16
 800572a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800572e:	e174      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005730:	2320      	movs	r3, #32
 8005732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005736:	e170      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005738:	2340      	movs	r3, #64	; 0x40
 800573a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800573e:	e16c      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005740:	2380      	movs	r3, #128	; 0x80
 8005742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005746:	e168      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <UART_SetConfig+0x34c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d142      	bne.n	80057d8 <UART_SetConfig+0x360>
 8005752:	4b18      	ldr	r3, [pc, #96]	; (80057b4 <UART_SetConfig+0x33c>)
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	2b05      	cmp	r3, #5
 800575c:	d838      	bhi.n	80057d0 <UART_SetConfig+0x358>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <UART_SetConfig+0x2ec>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	0800577d 	.word	0x0800577d
 8005768:	08005785 	.word	0x08005785
 800576c:	0800578d 	.word	0x0800578d
 8005770:	08005795 	.word	0x08005795
 8005774:	0800579d 	.word	0x0800579d
 8005778:	080057c9 	.word	0x080057c9
 800577c:	2300      	movs	r3, #0
 800577e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005782:	e14a      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005784:	2304      	movs	r3, #4
 8005786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578a:	e146      	b.n	8005a1a <UART_SetConfig+0x5a2>
 800578c:	2308      	movs	r3, #8
 800578e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005792:	e142      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005794:	2310      	movs	r3, #16
 8005796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800579a:	e13e      	b.n	8005a1a <UART_SetConfig+0x5a2>
 800579c:	2320      	movs	r3, #32
 800579e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a2:	e13a      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80057a4:	cfff69f3 	.word	0xcfff69f3
 80057a8:	58000c00 	.word	0x58000c00
 80057ac:	11fff4ff 	.word	0x11fff4ff
 80057b0:	40011000 	.word	0x40011000
 80057b4:	58024400 	.word	0x58024400
 80057b8:	40004400 	.word	0x40004400
 80057bc:	40004800 	.word	0x40004800
 80057c0:	40004c00 	.word	0x40004c00
 80057c4:	40005000 	.word	0x40005000
 80057c8:	2340      	movs	r3, #64	; 0x40
 80057ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ce:	e124      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d6:	e120      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4acc      	ldr	r2, [pc, #816]	; (8005b10 <UART_SetConfig+0x698>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d176      	bne.n	80058d0 <UART_SetConfig+0x458>
 80057e2:	4bcc      	ldr	r3, [pc, #816]	; (8005b14 <UART_SetConfig+0x69c>)
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057ea:	2b28      	cmp	r3, #40	; 0x28
 80057ec:	d86c      	bhi.n	80058c8 <UART_SetConfig+0x450>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <UART_SetConfig+0x37c>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005899 	.word	0x08005899
 80057f8:	080058c9 	.word	0x080058c9
 80057fc:	080058c9 	.word	0x080058c9
 8005800:	080058c9 	.word	0x080058c9
 8005804:	080058c9 	.word	0x080058c9
 8005808:	080058c9 	.word	0x080058c9
 800580c:	080058c9 	.word	0x080058c9
 8005810:	080058c9 	.word	0x080058c9
 8005814:	080058a1 	.word	0x080058a1
 8005818:	080058c9 	.word	0x080058c9
 800581c:	080058c9 	.word	0x080058c9
 8005820:	080058c9 	.word	0x080058c9
 8005824:	080058c9 	.word	0x080058c9
 8005828:	080058c9 	.word	0x080058c9
 800582c:	080058c9 	.word	0x080058c9
 8005830:	080058c9 	.word	0x080058c9
 8005834:	080058a9 	.word	0x080058a9
 8005838:	080058c9 	.word	0x080058c9
 800583c:	080058c9 	.word	0x080058c9
 8005840:	080058c9 	.word	0x080058c9
 8005844:	080058c9 	.word	0x080058c9
 8005848:	080058c9 	.word	0x080058c9
 800584c:	080058c9 	.word	0x080058c9
 8005850:	080058c9 	.word	0x080058c9
 8005854:	080058b1 	.word	0x080058b1
 8005858:	080058c9 	.word	0x080058c9
 800585c:	080058c9 	.word	0x080058c9
 8005860:	080058c9 	.word	0x080058c9
 8005864:	080058c9 	.word	0x080058c9
 8005868:	080058c9 	.word	0x080058c9
 800586c:	080058c9 	.word	0x080058c9
 8005870:	080058c9 	.word	0x080058c9
 8005874:	080058b9 	.word	0x080058b9
 8005878:	080058c9 	.word	0x080058c9
 800587c:	080058c9 	.word	0x080058c9
 8005880:	080058c9 	.word	0x080058c9
 8005884:	080058c9 	.word	0x080058c9
 8005888:	080058c9 	.word	0x080058c9
 800588c:	080058c9 	.word	0x080058c9
 8005890:	080058c9 	.word	0x080058c9
 8005894:	080058c1 	.word	0x080058c1
 8005898:	2301      	movs	r3, #1
 800589a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589e:	e0bc      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80058a0:	2304      	movs	r3, #4
 80058a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a6:	e0b8      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80058a8:	2308      	movs	r3, #8
 80058aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ae:	e0b4      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80058b0:	2310      	movs	r3, #16
 80058b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058b6:	e0b0      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80058b8:	2320      	movs	r3, #32
 80058ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058be:	e0ac      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80058c0:	2340      	movs	r3, #64	; 0x40
 80058c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058c6:	e0a8      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ce:	e0a4      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a90      	ldr	r2, [pc, #576]	; (8005b18 <UART_SetConfig+0x6a0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d130      	bne.n	800593c <UART_SetConfig+0x4c4>
 80058da:	4b8e      	ldr	r3, [pc, #568]	; (8005b14 <UART_SetConfig+0x69c>)
 80058dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	2b05      	cmp	r3, #5
 80058e4:	d826      	bhi.n	8005934 <UART_SetConfig+0x4bc>
 80058e6:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <UART_SetConfig+0x474>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	08005905 	.word	0x08005905
 80058f0:	0800590d 	.word	0x0800590d
 80058f4:	08005915 	.word	0x08005915
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	08005925 	.word	0x08005925
 8005900:	0800592d 	.word	0x0800592d
 8005904:	2300      	movs	r3, #0
 8005906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800590a:	e086      	b.n	8005a1a <UART_SetConfig+0x5a2>
 800590c:	2304      	movs	r3, #4
 800590e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005912:	e082      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005914:	2308      	movs	r3, #8
 8005916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591a:	e07e      	b.n	8005a1a <UART_SetConfig+0x5a2>
 800591c:	2310      	movs	r3, #16
 800591e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005922:	e07a      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005924:	2320      	movs	r3, #32
 8005926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800592a:	e076      	b.n	8005a1a <UART_SetConfig+0x5a2>
 800592c:	2340      	movs	r3, #64	; 0x40
 800592e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005932:	e072      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005934:	2380      	movs	r3, #128	; 0x80
 8005936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593a:	e06e      	b.n	8005a1a <UART_SetConfig+0x5a2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a76      	ldr	r2, [pc, #472]	; (8005b1c <UART_SetConfig+0x6a4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d130      	bne.n	80059a8 <UART_SetConfig+0x530>
 8005946:	4b73      	ldr	r3, [pc, #460]	; (8005b14 <UART_SetConfig+0x69c>)
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	2b05      	cmp	r3, #5
 8005950:	d826      	bhi.n	80059a0 <UART_SetConfig+0x528>
 8005952:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x4e0>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	08005971 	.word	0x08005971
 800595c:	08005979 	.word	0x08005979
 8005960:	08005981 	.word	0x08005981
 8005964:	08005989 	.word	0x08005989
 8005968:	08005991 	.word	0x08005991
 800596c:	08005999 	.word	0x08005999
 8005970:	2300      	movs	r3, #0
 8005972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005976:	e050      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005978:	2304      	movs	r3, #4
 800597a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597e:	e04c      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005980:	2308      	movs	r3, #8
 8005982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005986:	e048      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005988:	2310      	movs	r3, #16
 800598a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800598e:	e044      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005990:	2320      	movs	r3, #32
 8005992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005996:	e040      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005998:	2340      	movs	r3, #64	; 0x40
 800599a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800599e:	e03c      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80059a0:	2380      	movs	r3, #128	; 0x80
 80059a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059a6:	e038      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a5c      	ldr	r2, [pc, #368]	; (8005b20 <UART_SetConfig+0x6a8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d130      	bne.n	8005a14 <UART_SetConfig+0x59c>
 80059b2:	4b58      	ldr	r3, [pc, #352]	; (8005b14 <UART_SetConfig+0x69c>)
 80059b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	2b05      	cmp	r3, #5
 80059bc:	d826      	bhi.n	8005a0c <UART_SetConfig+0x594>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <UART_SetConfig+0x54c>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059dd 	.word	0x080059dd
 80059c8:	080059e5 	.word	0x080059e5
 80059cc:	080059ed 	.word	0x080059ed
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	080059fd 	.word	0x080059fd
 80059d8:	08005a05 	.word	0x08005a05
 80059dc:	2302      	movs	r3, #2
 80059de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059e2:	e01a      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80059e4:	2304      	movs	r3, #4
 80059e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ea:	e016      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80059ec:	2308      	movs	r3, #8
 80059ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f2:	e012      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80059f4:	2310      	movs	r3, #16
 80059f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fa:	e00e      	b.n	8005a1a <UART_SetConfig+0x5a2>
 80059fc:	2320      	movs	r3, #32
 80059fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a02:	e00a      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005a04:	2340      	movs	r3, #64	; 0x40
 8005a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a0a:	e006      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005a0c:	2380      	movs	r3, #128	; 0x80
 8005a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a12:	e002      	b.n	8005a1a <UART_SetConfig+0x5a2>
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a40      	ldr	r2, [pc, #256]	; (8005b20 <UART_SetConfig+0x6a8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	f040 80ef 	bne.w	8005c04 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	dc46      	bgt.n	8005abc <UART_SetConfig+0x644>
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	f2c0 8081 	blt.w	8005b36 <UART_SetConfig+0x6be>
 8005a34:	3b02      	subs	r3, #2
 8005a36:	2b1e      	cmp	r3, #30
 8005a38:	d87d      	bhi.n	8005b36 <UART_SetConfig+0x6be>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <UART_SetConfig+0x5c8>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005ac3 	.word	0x08005ac3
 8005a44:	08005b37 	.word	0x08005b37
 8005a48:	08005acb 	.word	0x08005acb
 8005a4c:	08005b37 	.word	0x08005b37
 8005a50:	08005b37 	.word	0x08005b37
 8005a54:	08005b37 	.word	0x08005b37
 8005a58:	08005adb 	.word	0x08005adb
 8005a5c:	08005b37 	.word	0x08005b37
 8005a60:	08005b37 	.word	0x08005b37
 8005a64:	08005b37 	.word	0x08005b37
 8005a68:	08005b37 	.word	0x08005b37
 8005a6c:	08005b37 	.word	0x08005b37
 8005a70:	08005b37 	.word	0x08005b37
 8005a74:	08005b37 	.word	0x08005b37
 8005a78:	08005aeb 	.word	0x08005aeb
 8005a7c:	08005b37 	.word	0x08005b37
 8005a80:	08005b37 	.word	0x08005b37
 8005a84:	08005b37 	.word	0x08005b37
 8005a88:	08005b37 	.word	0x08005b37
 8005a8c:	08005b37 	.word	0x08005b37
 8005a90:	08005b37 	.word	0x08005b37
 8005a94:	08005b37 	.word	0x08005b37
 8005a98:	08005b37 	.word	0x08005b37
 8005a9c:	08005b37 	.word	0x08005b37
 8005aa0:	08005b37 	.word	0x08005b37
 8005aa4:	08005b37 	.word	0x08005b37
 8005aa8:	08005b37 	.word	0x08005b37
 8005aac:	08005b37 	.word	0x08005b37
 8005ab0:	08005b37 	.word	0x08005b37
 8005ab4:	08005b37 	.word	0x08005b37
 8005ab8:	08005b29 	.word	0x08005b29
 8005abc:	2b40      	cmp	r3, #64	; 0x40
 8005abe:	d036      	beq.n	8005b2e <UART_SetConfig+0x6b6>
 8005ac0:	e039      	b.n	8005b36 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ac2:	f7fe fcff 	bl	80044c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ac6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ac8:	e03b      	b.n	8005b42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aca:	f107 0314 	add.w	r3, r7, #20
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fe fd0e 	bl	80044f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ad8:	e033      	b.n	8005b42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ada:	f107 0308 	add.w	r3, r7, #8
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe fe5a 	bl	8004798 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ae8:	e02b      	b.n	8005b42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <UART_SetConfig+0x69c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d009      	beq.n	8005b0a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005af6:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <UART_SetConfig+0x69c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	08db      	lsrs	r3, r3, #3
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <UART_SetConfig+0x6ac>)
 8005b02:	fa22 f303 	lsr.w	r3, r2, r3
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b08:	e01b      	b.n	8005b42 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <UART_SetConfig+0x6ac>)
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b0e:	e018      	b.n	8005b42 <UART_SetConfig+0x6ca>
 8005b10:	40011400 	.word	0x40011400
 8005b14:	58024400 	.word	0x58024400
 8005b18:	40007800 	.word	0x40007800
 8005b1c:	40007c00 	.word	0x40007c00
 8005b20:	58000c00 	.word	0x58000c00
 8005b24:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b28:	4bc4      	ldr	r3, [pc, #784]	; (8005e3c <UART_SetConfig+0x9c4>)
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b2c:	e009      	b.n	8005b42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b34:	e005      	b.n	8005b42 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 81da 	beq.w	8005efe <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	4abc      	ldr	r2, [pc, #752]	; (8005e40 <UART_SetConfig+0x9c8>)
 8005b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b5c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	4413      	add	r3, r2
 8005b68:	6a3a      	ldr	r2, [r7, #32]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d305      	bcc.n	8005b7a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b74:	6a3a      	ldr	r2, [r7, #32]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d903      	bls.n	8005b82 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005b80:	e1bd      	b.n	8005efe <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	4618      	mov	r0, r3
 8005b86:	f04f 0100 	mov.w	r1, #0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	4aac      	ldr	r2, [pc, #688]	; (8005e40 <UART_SetConfig+0x9c8>)
 8005b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	f7fa fbf3 	bl	8000384 <__aeabi_uldivmod>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	020b      	lsls	r3, r1, #8
 8005bb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bb4:	0202      	lsls	r2, r0, #8
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	6849      	ldr	r1, [r1, #4]
 8005bba:	0849      	lsrs	r1, r1, #1
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	f04f 0100 	mov.w	r1, #0
 8005bc2:	1814      	adds	r4, r2, r0
 8005bc4:	eb43 0501 	adc.w	r5, r3, r1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	f7fa fbd5 	bl	8000384 <__aeabi_uldivmod>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4613      	mov	r3, r2
 8005be0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be8:	d308      	bcc.n	8005bfc <UART_SetConfig+0x784>
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf0:	d204      	bcs.n	8005bfc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	e180      	b.n	8005efe <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005c02:	e17c      	b.n	8005efe <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0c:	f040 80bf 	bne.w	8005d8e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005c10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	dc49      	bgt.n	8005cac <UART_SetConfig+0x834>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	db7c      	blt.n	8005d16 <UART_SetConfig+0x89e>
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d87a      	bhi.n	8005d16 <UART_SetConfig+0x89e>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0x7b0>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005cb3 	.word	0x08005cb3
 8005c2c:	08005cbb 	.word	0x08005cbb
 8005c30:	08005d17 	.word	0x08005d17
 8005c34:	08005d17 	.word	0x08005d17
 8005c38:	08005cc3 	.word	0x08005cc3
 8005c3c:	08005d17 	.word	0x08005d17
 8005c40:	08005d17 	.word	0x08005d17
 8005c44:	08005d17 	.word	0x08005d17
 8005c48:	08005cd3 	.word	0x08005cd3
 8005c4c:	08005d17 	.word	0x08005d17
 8005c50:	08005d17 	.word	0x08005d17
 8005c54:	08005d17 	.word	0x08005d17
 8005c58:	08005d17 	.word	0x08005d17
 8005c5c:	08005d17 	.word	0x08005d17
 8005c60:	08005d17 	.word	0x08005d17
 8005c64:	08005d17 	.word	0x08005d17
 8005c68:	08005ce3 	.word	0x08005ce3
 8005c6c:	08005d17 	.word	0x08005d17
 8005c70:	08005d17 	.word	0x08005d17
 8005c74:	08005d17 	.word	0x08005d17
 8005c78:	08005d17 	.word	0x08005d17
 8005c7c:	08005d17 	.word	0x08005d17
 8005c80:	08005d17 	.word	0x08005d17
 8005c84:	08005d17 	.word	0x08005d17
 8005c88:	08005d17 	.word	0x08005d17
 8005c8c:	08005d17 	.word	0x08005d17
 8005c90:	08005d17 	.word	0x08005d17
 8005c94:	08005d17 	.word	0x08005d17
 8005c98:	08005d17 	.word	0x08005d17
 8005c9c:	08005d17 	.word	0x08005d17
 8005ca0:	08005d17 	.word	0x08005d17
 8005ca4:	08005d17 	.word	0x08005d17
 8005ca8:	08005d09 	.word	0x08005d09
 8005cac:	2b40      	cmp	r3, #64	; 0x40
 8005cae:	d02e      	beq.n	8005d0e <UART_SetConfig+0x896>
 8005cb0:	e031      	b.n	8005d16 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb2:	f7fd fc59 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8005cb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005cb8:	e033      	b.n	8005d22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cba:	f7fd fc6b 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8005cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005cc0:	e02f      	b.n	8005d22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cc2:	f107 0314 	add.w	r3, r7, #20
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fe fc12 	bl	80044f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cd0:	e027      	b.n	8005d22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cd2:	f107 0308 	add.w	r3, r7, #8
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe fd5e 	bl	8004798 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ce0:	e01f      	b.n	8005d22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ce2:	4b58      	ldr	r3, [pc, #352]	; (8005e44 <UART_SetConfig+0x9cc>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cee:	4b55      	ldr	r3, [pc, #340]	; (8005e44 <UART_SetConfig+0x9cc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	08db      	lsrs	r3, r3, #3
 8005cf4:	f003 0303 	and.w	r3, r3, #3
 8005cf8:	4a53      	ldr	r2, [pc, #332]	; (8005e48 <UART_SetConfig+0x9d0>)
 8005cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d00:	e00f      	b.n	8005d22 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005d02:	4b51      	ldr	r3, [pc, #324]	; (8005e48 <UART_SetConfig+0x9d0>)
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d06:	e00c      	b.n	8005d22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d08:	4b4c      	ldr	r3, [pc, #304]	; (8005e3c <UART_SetConfig+0x9c4>)
 8005d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d0c:	e009      	b.n	8005d22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d14:	e005      	b.n	8005d22 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80ea 	beq.w	8005efe <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	4a44      	ldr	r2, [pc, #272]	; (8005e40 <UART_SetConfig+0x9c8>)
 8005d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d34:	461a      	mov	r2, r3
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d3c:	005a      	lsls	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	441a      	add	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	2b0f      	cmp	r3, #15
 8005d56:	d916      	bls.n	8005d86 <UART_SetConfig+0x90e>
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5e:	d212      	bcs.n	8005d86 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f023 030f 	bic.w	r3, r3, #15
 8005d68:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d82:	60da      	str	r2, [r3, #12]
 8005d84:	e0bb      	b.n	8005efe <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005d8c:	e0b7      	b.n	8005efe <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	dc4a      	bgt.n	8005e2c <UART_SetConfig+0x9b4>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f2c0 8086 	blt.w	8005ea8 <UART_SetConfig+0xa30>
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	f200 8083 	bhi.w	8005ea8 <UART_SetConfig+0xa30>
 8005da2:	a201      	add	r2, pc, #4	; (adr r2, 8005da8 <UART_SetConfig+0x930>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005e33 	.word	0x08005e33
 8005dac:	08005e4d 	.word	0x08005e4d
 8005db0:	08005ea9 	.word	0x08005ea9
 8005db4:	08005ea9 	.word	0x08005ea9
 8005db8:	08005e55 	.word	0x08005e55
 8005dbc:	08005ea9 	.word	0x08005ea9
 8005dc0:	08005ea9 	.word	0x08005ea9
 8005dc4:	08005ea9 	.word	0x08005ea9
 8005dc8:	08005e65 	.word	0x08005e65
 8005dcc:	08005ea9 	.word	0x08005ea9
 8005dd0:	08005ea9 	.word	0x08005ea9
 8005dd4:	08005ea9 	.word	0x08005ea9
 8005dd8:	08005ea9 	.word	0x08005ea9
 8005ddc:	08005ea9 	.word	0x08005ea9
 8005de0:	08005ea9 	.word	0x08005ea9
 8005de4:	08005ea9 	.word	0x08005ea9
 8005de8:	08005e75 	.word	0x08005e75
 8005dec:	08005ea9 	.word	0x08005ea9
 8005df0:	08005ea9 	.word	0x08005ea9
 8005df4:	08005ea9 	.word	0x08005ea9
 8005df8:	08005ea9 	.word	0x08005ea9
 8005dfc:	08005ea9 	.word	0x08005ea9
 8005e00:	08005ea9 	.word	0x08005ea9
 8005e04:	08005ea9 	.word	0x08005ea9
 8005e08:	08005ea9 	.word	0x08005ea9
 8005e0c:	08005ea9 	.word	0x08005ea9
 8005e10:	08005ea9 	.word	0x08005ea9
 8005e14:	08005ea9 	.word	0x08005ea9
 8005e18:	08005ea9 	.word	0x08005ea9
 8005e1c:	08005ea9 	.word	0x08005ea9
 8005e20:	08005ea9 	.word	0x08005ea9
 8005e24:	08005ea9 	.word	0x08005ea9
 8005e28:	08005e9b 	.word	0x08005e9b
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d037      	beq.n	8005ea0 <UART_SetConfig+0xa28>
 8005e30:	e03a      	b.n	8005ea8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e32:	f7fd fb99 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8005e36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e38:	e03c      	b.n	8005eb4 <UART_SetConfig+0xa3c>
 8005e3a:	bf00      	nop
 8005e3c:	003d0900 	.word	0x003d0900
 8005e40:	0800a394 	.word	0x0800a394
 8005e44:	58024400 	.word	0x58024400
 8005e48:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e4c:	f7fd fba2 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8005e50:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e52:	e02f      	b.n	8005eb4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e54:	f107 0314 	add.w	r3, r7, #20
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe fb49 	bl	80044f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e62:	e027      	b.n	8005eb4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e64:	f107 0308 	add.w	r3, r7, #8
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fe fc95 	bl	8004798 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e72:	e01f      	b.n	8005eb4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e74:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <UART_SetConfig+0xab0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e80:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <UART_SetConfig+0xab0>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	08db      	lsrs	r3, r3, #3
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	4a28      	ldr	r2, [pc, #160]	; (8005f2c <UART_SetConfig+0xab4>)
 8005e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e92:	e00f      	b.n	8005eb4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005e94:	4b25      	ldr	r3, [pc, #148]	; (8005f2c <UART_SetConfig+0xab4>)
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e98:	e00c      	b.n	8005eb4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e9a:	4b25      	ldr	r3, [pc, #148]	; (8005f30 <UART_SetConfig+0xab8>)
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e9e:	e009      	b.n	8005eb4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ea6:	e005      	b.n	8005eb4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005eb2:	bf00      	nop
    }

    if (pclk != 0U)
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d021      	beq.n	8005efe <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <UART_SetConfig+0xabc>)
 8005ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	085b      	lsrs	r3, r3, #1
 8005ed2:	441a      	add	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	2b0f      	cmp	r3, #15
 8005ee4:	d908      	bls.n	8005ef8 <UART_SetConfig+0xa80>
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eec:	d204      	bcs.n	8005ef8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ef4:	60da      	str	r2, [r3, #12]
 8005ef6:	e002      	b.n	8005efe <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005f1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3738      	adds	r7, #56	; 0x38
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bdb0      	pop	{r4, r5, r7, pc}
 8005f26:	bf00      	nop
 8005f28:	58024400 	.word	0x58024400
 8005f2c:	03d09000 	.word	0x03d09000
 8005f30:	003d0900 	.word	0x003d0900
 8005f34:	0800a394 	.word	0x0800a394

08005f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01a      	beq.n	800604e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006036:	d10a      	bne.n	800604e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	605a      	str	r2, [r3, #4]
  }
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af02      	add	r7, sp, #8
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800608c:	f7fb f8d4 	bl	8001238 <HAL_GetTick>
 8006090:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b08      	cmp	r3, #8
 800609e:	d10e      	bne.n	80060be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f82f 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e025      	b.n	800610a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d10e      	bne.n	80060ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f819 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e00f      	b.n	800610a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	603b      	str	r3, [r7, #0]
 800611e:	4613      	mov	r3, r2
 8006120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006122:	e062      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612a:	d05e      	beq.n	80061ea <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612c:	f7fb f884 	bl	8001238 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	429a      	cmp	r2, r3
 800613a:	d302      	bcc.n	8006142 <UART_WaitOnFlagUntilTimeout+0x30>
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d11d      	bne.n	800617e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006150:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0201 	bic.w	r2, r2, #1
 8006160:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e045      	b.n	800620a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d02e      	beq.n	80061ea <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619a:	d126      	bne.n	80061ea <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0201 	bic.w	r2, r2, #1
 80061c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2220      	movs	r2, #32
 80061da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e00f      	b.n	800620a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4013      	ands	r3, r2
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	bf0c      	ite	eq
 80061fa:	2301      	moveq	r3, #1
 80061fc:	2300      	movne	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	429a      	cmp	r2, r3
 8006206:	d08d      	beq.n	8006124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_UARTEx_DisableFifoMode+0x16>
 8006224:	2302      	movs	r3, #2
 8006226:	e027      	b.n	8006278 <HAL_UARTEx_DisableFifoMode+0x66>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2224      	movs	r2, #36	; 0x24
 8006234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0201 	bic.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006256:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006298:	2302      	movs	r3, #2
 800629a:	e02d      	b.n	80062f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2224      	movs	r2, #36	; 0x24
 80062a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f84f 	bl	800637c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006314:	2302      	movs	r3, #2
 8006316:	e02d      	b.n	8006374 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2224      	movs	r2, #36	; 0x24
 8006324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0201 	bic.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f811 	bl	800637c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006388:	2b00      	cmp	r3, #0
 800638a:	d108      	bne.n	800639e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800639c:	e031      	b.n	8006402 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800639e:	2310      	movs	r3, #16
 80063a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063a2:	2310      	movs	r3, #16
 80063a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	0e5b      	lsrs	r3, r3, #25
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	0f5b      	lsrs	r3, r3, #29
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063c6:	7bbb      	ldrb	r3, [r7, #14]
 80063c8:	7b3a      	ldrb	r2, [r7, #12]
 80063ca:	4911      	ldr	r1, [pc, #68]	; (8006410 <UARTEx_SetNbDataToProcess+0x94>)
 80063cc:	5c8a      	ldrb	r2, [r1, r2]
 80063ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063d2:	7b3a      	ldrb	r2, [r7, #12]
 80063d4:	490f      	ldr	r1, [pc, #60]	; (8006414 <UARTEx_SetNbDataToProcess+0x98>)
 80063d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80063dc:	b29a      	uxth	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	7b7a      	ldrb	r2, [r7, #13]
 80063e8:	4909      	ldr	r1, [pc, #36]	; (8006410 <UARTEx_SetNbDataToProcess+0x94>)
 80063ea:	5c8a      	ldrb	r2, [r1, r2]
 80063ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063f0:	7b7a      	ldrb	r2, [r7, #13]
 80063f2:	4908      	ldr	r1, [pc, #32]	; (8006414 <UARTEx_SetNbDataToProcess+0x98>)
 80063f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	0800a3ac 	.word	0x0800a3ac
 8006414:	0800a3b4 	.word	0x0800a3b4

08006418 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006418:	b084      	sub	sp, #16
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	f107 001c 	add.w	r0, r7, #28
 8006426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	2b01      	cmp	r3, #1
 800642e:	d120      	bne.n	8006472 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	4b2a      	ldr	r3, [pc, #168]	; (80064ec <USB_CoreInit+0xd4>)
 8006442:	4013      	ands	r3, r2
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006456:	2b01      	cmp	r3, #1
 8006458:	d105      	bne.n	8006466 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f8c8 	bl	80065fc <USB_CoreReset>
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]
 8006470:	e01a      	b.n	80064a8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f8bc 	bl	80065fc <USB_CoreReset>
 8006484:	4603      	mov	r3, r0
 8006486:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	639a      	str	r2, [r3, #56]	; 0x38
 800649a:	e005      	b.n	80064a8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d116      	bne.n	80064dc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <USB_CoreInit+0xd8>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f043 0206 	orr.w	r2, r3, #6
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f043 0220 	orr.w	r2, r3, #32
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064e8:	b004      	add	sp, #16
 80064ea:	4770      	bx	lr
 80064ec:	ffbdffbf 	.word	0xffbdffbf
 80064f0:	03ee0000 	.word	0x03ee0000

080064f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f023 0201 	bic.w	r2, r3, #1
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d106      	bne.n	8006542 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60da      	str	r2, [r3, #12]
 8006540:	e00b      	b.n	800655a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006542:	78fb      	ldrb	r3, [r7, #3]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d106      	bne.n	8006556 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60da      	str	r2, [r3, #12]
 8006554:	e001      	b.n	800655a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e003      	b.n	8006562 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800655a:	2032      	movs	r0, #50	; 0x32
 800655c:	f7fa fe78 	bl	8001250 <HAL_Delay>

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	019b      	lsls	r3, r3, #6
 800657e:	f043 0220 	orr.w	r2, r3, #32
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3301      	adds	r3, #1
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4a09      	ldr	r2, [pc, #36]	; (80065b4 <USB_FlushTxFifo+0x48>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d901      	bls.n	8006598 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e006      	b.n	80065a6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d0f0      	beq.n	8006586 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	00030d40 	.word	0x00030d40

080065b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2210      	movs	r2, #16
 80065c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <USB_FlushRxFifo+0x40>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d901      	bls.n	80065dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e006      	b.n	80065ea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d0f0      	beq.n	80065ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	00030d40 	.word	0x00030d40

080065fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a13      	ldr	r2, [pc, #76]	; (8006660 <USB_CoreReset+0x64>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d901      	bls.n	800661a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e01b      	b.n	8006652 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	daf2      	bge.n	8006608 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f043 0201 	orr.w	r2, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4a09      	ldr	r2, [pc, #36]	; (8006660 <USB_CoreReset+0x64>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d901      	bls.n	8006644 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e006      	b.n	8006652 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b01      	cmp	r3, #1
 800664e:	d0f0      	beq.n	8006632 <USB_CoreReset+0x36>

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	00030d40 	.word	0x00030d40

08006664 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006664:	b084      	sub	sp, #16
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	f107 001c 	add.w	r0, r7, #28
 8006672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006680:	461a      	mov	r2, r3
 8006682:	2300      	movs	r3, #0
 8006684:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d018      	beq.n	80066dc <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d10a      	bne.n	80066c6 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066be:	f043 0304 	orr.w	r3, r3, #4
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	e014      	b.n	80066f0 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066d4:	f023 0304 	bic.w	r3, r3, #4
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e009      	b.n	80066f0 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ea:	f023 0304 	bic.w	r3, r3, #4
 80066ee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80066f0:	2110      	movs	r1, #16
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff ff3a 	bl	800656c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff ff5d 	bl	80065b8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	e015      	b.n	8006730 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4413      	add	r3, r2
 800670c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006710:	461a      	mov	r2, r3
 8006712:	f04f 33ff 	mov.w	r3, #4294967295
 8006716:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4413      	add	r3, r2
 8006720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006724:	461a      	mov	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3301      	adds	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	429a      	cmp	r2, r3
 8006736:	d3e5      	bcc.n	8006704 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006738:	2101      	movs	r1, #1
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f848 	bl	80067d0 <USB_DriveVbus>

  HAL_Delay(200U);
 8006740:	20c8      	movs	r0, #200	; 0xc8
 8006742:	f7fa fd85 	bl	8001250 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f04f 32ff 	mov.w	r2, #4294967295
 8006752:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006766:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a14      	ldr	r2, [pc, #80]	; (80067bc <USB_HostInit+0x158>)
 800676c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a13      	ldr	r2, [pc, #76]	; (80067c0 <USB_HostInit+0x15c>)
 8006772:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006776:	e009      	b.n	800678c <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2280      	movs	r2, #128	; 0x80
 800677c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a10      	ldr	r2, [pc, #64]	; (80067c4 <USB_HostInit+0x160>)
 8006782:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a10      	ldr	r2, [pc, #64]	; (80067c8 <USB_HostInit+0x164>)
 8006788:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	2b00      	cmp	r3, #0
 8006790:	d105      	bne.n	800679e <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f043 0210 	orr.w	r2, r3, #16
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <USB_HostInit+0x168>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067b6:	b004      	add	sp, #16
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	01000200 	.word	0x01000200
 80067c0:	00e00300 	.word	0x00e00300
 80067c4:	00600080 	.word	0x00600080
 80067c8:	004000e0 	.word	0x004000e0
 80067cc:	a3200008 	.word	0xa3200008

080067d0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d109      	bne.n	8006814 <USB_DriveVbus+0x44>
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d106      	bne.n	8006814 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800680e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006812:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800681a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681e:	d109      	bne.n	8006834 <USB_DriveVbus+0x64>
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800682e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006832:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f103 0208 	add.w	r2, r3, #8
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f04f 32ff 	mov.w	r2, #4294967295
 800685a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f103 0208 	add.w	r2, r3, #8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f103 0208 	add.w	r2, r3, #8
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	601a      	str	r2, [r3, #0]
}
 80068d8:	bf00      	nop
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d103      	bne.n	8006904 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	e00c      	b.n	800691e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3308      	adds	r3, #8
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e002      	b.n	8006912 <vListInsert+0x2e>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	d2f6      	bcs.n	800690c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	601a      	str	r2, [r3, #0]
}
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006956:	b480      	push	{r7}
 8006958:	b085      	sub	sp, #20
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6892      	ldr	r2, [r2, #8]
 800696c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6852      	ldr	r2, [r2, #4]
 8006976:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	429a      	cmp	r2, r3
 8006980:	d103      	bne.n	800698a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	1e5a      	subs	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b08c      	sub	sp, #48	; 0x30
 80069ae:	af04      	add	r7, sp, #16
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	4613      	mov	r3, r2
 80069b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069ba:	88fb      	ldrh	r3, [r7, #6]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 ff74 	bl	80078ac <pvPortMalloc>
 80069c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00e      	beq.n	80069ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069cc:	205c      	movs	r0, #92	; 0x5c
 80069ce:	f000 ff6d 	bl	80078ac <pvPortMalloc>
 80069d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	631a      	str	r2, [r3, #48]	; 0x30
 80069e0:	e005      	b.n	80069ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069e2:	6978      	ldr	r0, [r7, #20]
 80069e4:	f001 f82c 	bl	8007a40 <vPortFree>
 80069e8:	e001      	b.n	80069ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d013      	beq.n	8006a1c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069f4:	88fa      	ldrh	r2, [r7, #6]
 80069f6:	2300      	movs	r3, #0
 80069f8:	9303      	str	r3, [sp, #12]
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	9302      	str	r3, [sp, #8]
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f80e 	bl	8006a2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a10:	69f8      	ldr	r0, [r7, #28]
 8006a12:	f000 f8a5 	bl	8006b60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a16:	2301      	movs	r3, #1
 8006a18:	61bb      	str	r3, [r7, #24]
 8006a1a:	e002      	b.n	8006a22 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a22:	69bb      	ldr	r3, [r7, #24]
	}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10c      	bne.n	8006a5a <prvInitialiseNewTask+0x2e>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	b672      	cpsid	i
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	b662      	cpsie	i
 8006a54:	617b      	str	r3, [r7, #20]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <prvInitialiseNewTask+0x2c>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	461a      	mov	r2, r3
 8006a64:	21a5      	movs	r1, #165	; 0xa5
 8006a66:	f003 fb8d 	bl	800a184 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006a74:	440b      	add	r3, r1
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f023 0307 	bic.w	r3, r3, #7
 8006a82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <prvInitialiseNewTask+0x7c>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	b672      	cpsid	i
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	b662      	cpsie	i
 8006aa2:	613b      	str	r3, [r7, #16]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <prvInitialiseNewTask+0x7a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61fb      	str	r3, [r7, #28]
 8006aac:	e012      	b.n	8006ad4 <prvInitialiseNewTask+0xa8>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	7819      	ldrb	r1, [r3, #0]
 8006ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	3334      	adds	r3, #52	; 0x34
 8006abe:	460a      	mov	r2, r1
 8006ac0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d006      	beq.n	8006adc <prvInitialiseNewTask+0xb0>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d9e9      	bls.n	8006aae <prvInitialiseNewTask+0x82>
 8006ada:	e000      	b.n	8006ade <prvInitialiseNewTask+0xb2>
		{
			break;
 8006adc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	2b06      	cmp	r3, #6
 8006aea:	d901      	bls.n	8006af0 <prvInitialiseNewTask+0xc4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006aec:	2306      	movs	r3, #6
 8006aee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006afa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	2200      	movs	r2, #0
 8006b00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	3304      	adds	r3, #4
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff febb 	bl	8006882 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	3318      	adds	r3, #24
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff feb6 	bl	8006882 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	f1c3 0207 	rsb	r2, r3, #7
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2200      	movs	r2, #0
 8006b30:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	68f9      	ldr	r1, [r7, #12]
 8006b3e:	69b8      	ldr	r0, [r7, #24]
 8006b40:	f000 fbf4 	bl	800732c <pxPortInitialiseStack>
 8006b44:	4602      	mov	r2, r0
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b56:	bf00      	nop
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b60:	b5b0      	push	{r4, r5, r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b68:	f000 fcf0 	bl	800754c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b6c:	4b35      	ldr	r3, [pc, #212]	; (8006c44 <prvAddNewTaskToReadyList+0xe4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3301      	adds	r3, #1
 8006b72:	4a34      	ldr	r2, [pc, #208]	; (8006c44 <prvAddNewTaskToReadyList+0xe4>)
 8006b74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b76:	4b34      	ldr	r3, [pc, #208]	; (8006c48 <prvAddNewTaskToReadyList+0xe8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b7e:	4a32      	ldr	r2, [pc, #200]	; (8006c48 <prvAddNewTaskToReadyList+0xe8>)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b84:	4b2f      	ldr	r3, [pc, #188]	; (8006c44 <prvAddNewTaskToReadyList+0xe4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d110      	bne.n	8006bae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b8c:	f000 faca 	bl	8007124 <prvInitialiseTaskLists>
 8006b90:	e00d      	b.n	8006bae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b92:	4b2e      	ldr	r3, [pc, #184]	; (8006c4c <prvAddNewTaskToReadyList+0xec>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b9a:	4b2b      	ldr	r3, [pc, #172]	; (8006c48 <prvAddNewTaskToReadyList+0xe8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d802      	bhi.n	8006bae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ba8:	4a27      	ldr	r2, [pc, #156]	; (8006c48 <prvAddNewTaskToReadyList+0xe8>)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bae:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <prvAddNewTaskToReadyList+0xf0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	4a26      	ldr	r2, [pc, #152]	; (8006c50 <prvAddNewTaskToReadyList+0xf0>)
 8006bb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bb8:	4b25      	ldr	r3, [pc, #148]	; (8006c50 <prvAddNewTaskToReadyList+0xf0>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <prvAddNewTaskToReadyList+0x94>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f003 f85b 	bl	8009c84 <SEGGER_SYSVIEW_OnTaskCreate>
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	461d      	mov	r5, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	461c      	mov	r4, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	1ae3      	subs	r3, r4, r3
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	462b      	mov	r3, r5
 8006bf0:	f001 f8e8 	bl	8007dc4 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f003 f8c8 	bl	8009d8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	2201      	movs	r2, #1
 8006c02:	409a      	lsls	r2, r3
 8006c04:	4b13      	ldr	r3, [pc, #76]	; (8006c54 <prvAddNewTaskToReadyList+0xf4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <prvAddNewTaskToReadyList+0xf4>)
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4a0f      	ldr	r2, [pc, #60]	; (8006c58 <prvAddNewTaskToReadyList+0xf8>)
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7ff fe39 	bl	800689c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c2a:	f000 fcc3 	bl	80075b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c2e:	4b07      	ldr	r3, [pc, #28]	; (8006c4c <prvAddNewTaskToReadyList+0xec>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <prvAddNewTaskToReadyList+0xda>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c36:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <prvAddNewTaskToReadyList+0xe8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bdb0      	pop	{r4, r5, r7, pc}
 8006c42:	bf00      	nop
 8006c44:	2400013c 	.word	0x2400013c
 8006c48:	2400003c 	.word	0x2400003c
 8006c4c:	24000148 	.word	0x24000148
 8006c50:	24000158 	.word	0x24000158
 8006c54:	24000144 	.word	0x24000144
 8006c58:	24000040 	.word	0x24000040

08006c5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d01d      	beq.n	8006caa <vTaskDelay+0x4e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c6e:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <vTaskDelay+0x6c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00c      	beq.n	8006c90 <vTaskDelay+0x34>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	b672      	cpsid	i
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	b662      	cpsie	i
 8006c8a:	60bb      	str	r3, [r7, #8]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006c90:	f000 f87a 	bl	8006d88 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	2023      	movs	r0, #35	; 0x23
 8006c98:	f002 fc78 	bl	800958c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fade 	bl	8007260 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ca4:	f000 f87e 	bl	8006da4 <xTaskResumeAll>
 8006ca8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d107      	bne.n	8006cc0 <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
 8006cb0:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <vTaskDelay+0x70>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	24000164 	.word	0x24000164
 8006ccc:	e000ed04 	.word	0xe000ed04

08006cd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006cd6:	4b25      	ldr	r3, [pc, #148]	; (8006d6c <vTaskStartScheduler+0x9c>)
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2280      	movs	r2, #128	; 0x80
 8006ce2:	4923      	ldr	r1, [pc, #140]	; (8006d70 <vTaskStartScheduler+0xa0>)
 8006ce4:	4823      	ldr	r0, [pc, #140]	; (8006d74 <vTaskStartScheduler+0xa4>)
 8006ce6:	f7ff fe60 	bl	80069aa <xTaskCreate>
 8006cea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d126      	bne.n	8006d40 <vTaskStartScheduler+0x70>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	b672      	cpsid	i
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	b662      	cpsie	i
 8006d06:	60bb      	str	r3, [r7, #8]
}
 8006d08:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <vTaskStartScheduler+0xa8>)
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d12:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <vTaskStartScheduler+0xac>)
 8006d14:	2201      	movs	r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d18:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <vTaskStartScheduler+0xb0>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8006d1e:	4b19      	ldr	r3, [pc, #100]	; (8006d84 <vTaskStartScheduler+0xb4>)
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b12      	ldr	r3, [pc, #72]	; (8006d6c <vTaskStartScheduler+0x9c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d102      	bne.n	8006d30 <vTaskStartScheduler+0x60>
 8006d2a:	f002 ff8f 	bl	8009c4c <SEGGER_SYSVIEW_OnIdle>
 8006d2e:	e004      	b.n	8006d3a <vTaskStartScheduler+0x6a>
 8006d30:	4b14      	ldr	r3, [pc, #80]	; (8006d84 <vTaskStartScheduler+0xb4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f002 ffe7 	bl	8009d08 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d3a:	f000 fb89 	bl	8007450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d3e:	e010      	b.n	8006d62 <vTaskStartScheduler+0x92>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d46:	d10c      	bne.n	8006d62 <vTaskStartScheduler+0x92>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	b672      	cpsid	i
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	b662      	cpsie	i
 8006d5c:	607b      	str	r3, [r7, #4]
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <vTaskStartScheduler+0x90>
}
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	24000160 	.word	0x24000160
 8006d70:	0800a2b8 	.word	0x0800a2b8
 8006d74:	08007101 	.word	0x08007101
 8006d78:	2400015c 	.word	0x2400015c
 8006d7c:	24000148 	.word	0x24000148
 8006d80:	24000140 	.word	0x24000140
 8006d84:	2400003c 	.word	0x2400003c

08006d88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006d8c:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <vTaskSuspendAll+0x18>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	4a03      	ldr	r2, [pc, #12]	; (8006da0 <vTaskSuspendAll+0x18>)
 8006d94:	6013      	str	r3, [r2, #0]
}
 8006d96:	bf00      	nop
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	24000164 	.word	0x24000164

08006da4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dae:	2300      	movs	r3, #0
 8006db0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006db2:	4b3e      	ldr	r3, [pc, #248]	; (8006eac <xTaskResumeAll+0x108>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10c      	bne.n	8006dd4 <xTaskResumeAll+0x30>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	b672      	cpsid	i
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	b662      	cpsie	i
 8006dce:	603b      	str	r3, [r7, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006dd4:	f000 fbba 	bl	800754c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006dd8:	4b34      	ldr	r3, [pc, #208]	; (8006eac <xTaskResumeAll+0x108>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	4a33      	ldr	r2, [pc, #204]	; (8006eac <xTaskResumeAll+0x108>)
 8006de0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006de2:	4b32      	ldr	r3, [pc, #200]	; (8006eac <xTaskResumeAll+0x108>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d159      	bne.n	8006e9e <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006dea:	4b31      	ldr	r3, [pc, #196]	; (8006eb0 <xTaskResumeAll+0x10c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d055      	beq.n	8006e9e <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006df2:	e032      	b.n	8006e5a <xTaskResumeAll+0xb6>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df4:	4b2f      	ldr	r3, [pc, #188]	; (8006eb4 <xTaskResumeAll+0x110>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3318      	adds	r3, #24
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fda8 	bl	8006956 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff fda3 	bl	8006956 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f002 ffba 	bl	8009d8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	409a      	lsls	r2, r3
 8006e20:	4b25      	ldr	r3, [pc, #148]	; (8006eb8 <xTaskResumeAll+0x114>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	4a24      	ldr	r2, [pc, #144]	; (8006eb8 <xTaskResumeAll+0x114>)
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4a21      	ldr	r2, [pc, #132]	; (8006ebc <xTaskResumeAll+0x118>)
 8006e38:	441a      	add	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4610      	mov	r0, r2
 8006e42:	f7ff fd2b 	bl	800689c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <xTaskResumeAll+0x11c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d302      	bcc.n	8006e5a <xTaskResumeAll+0xb6>
					{
						xYieldPending = pdTRUE;
 8006e54:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <xTaskResumeAll+0x120>)
 8006e56:	2201      	movs	r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e5a:	4b16      	ldr	r3, [pc, #88]	; (8006eb4 <xTaskResumeAll+0x110>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1c8      	bne.n	8006df4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <xTaskResumeAll+0xc8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e68:	f000 f9da 	bl	8007220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006e6c:	4b16      	ldr	r3, [pc, #88]	; (8006ec8 <xTaskResumeAll+0x124>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d010      	beq.n	8006e9a <xTaskResumeAll+0xf6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e78:	f000 f83a 	bl	8006ef0 <xTaskIncrementTick>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <xTaskResumeAll+0xe4>
							{
								xYieldPending = pdTRUE;
 8006e82:	4b10      	ldr	r3, [pc, #64]	; (8006ec4 <xTaskResumeAll+0x120>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f1      	bne.n	8006e78 <xTaskResumeAll+0xd4>

						uxPendedTicks = 0;
 8006e94:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <xTaskResumeAll+0x124>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e9a:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <xTaskResumeAll+0x120>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e9e:	f000 fb89 	bl	80075b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006ea2:	687b      	ldr	r3, [r7, #4]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	24000164 	.word	0x24000164
 8006eb0:	2400013c 	.word	0x2400013c
 8006eb4:	240000fc 	.word	0x240000fc
 8006eb8:	24000144 	.word	0x24000144
 8006ebc:	24000040 	.word	0x24000040
 8006ec0:	2400003c 	.word	0x2400003c
 8006ec4:	24000150 	.word	0x24000150
 8006ec8:	2400014c 	.word	0x2400014c

08006ecc <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ed2:	f000 fc23 	bl	800771c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006eda:	4b04      	ldr	r3, [pc, #16]	; (8006eec <xTaskGetTickCountFromISR+0x20>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ee0:	683b      	ldr	r3, [r7, #0]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	24000140 	.word	0x24000140

08006ef0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006efa:	4b42      	ldr	r3, [pc, #264]	; (8007004 <xTaskIncrementTick+0x114>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d175      	bne.n	8006fee <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f02:	4b41      	ldr	r3, [pc, #260]	; (8007008 <xTaskIncrementTick+0x118>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3301      	adds	r3, #1
 8006f08:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f0a:	4a3f      	ldr	r2, [pc, #252]	; (8007008 <xTaskIncrementTick+0x118>)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d122      	bne.n	8006f5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f16:	4b3d      	ldr	r3, [pc, #244]	; (800700c <xTaskIncrementTick+0x11c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00c      	beq.n	8006f3a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	b672      	cpsid	i
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	b662      	cpsie	i
 8006f34:	603b      	str	r3, [r7, #0]
}
 8006f36:	bf00      	nop
 8006f38:	e7fe      	b.n	8006f38 <xTaskIncrementTick+0x48>
 8006f3a:	4b34      	ldr	r3, [pc, #208]	; (800700c <xTaskIncrementTick+0x11c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	4b33      	ldr	r3, [pc, #204]	; (8007010 <xTaskIncrementTick+0x120>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a31      	ldr	r2, [pc, #196]	; (800700c <xTaskIncrementTick+0x11c>)
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	4a31      	ldr	r2, [pc, #196]	; (8007010 <xTaskIncrementTick+0x120>)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	4b31      	ldr	r3, [pc, #196]	; (8007014 <xTaskIncrementTick+0x124>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	4a2f      	ldr	r2, [pc, #188]	; (8007014 <xTaskIncrementTick+0x124>)
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	f000 f962 	bl	8007220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f5c:	4b2e      	ldr	r3, [pc, #184]	; (8007018 <xTaskIncrementTick+0x128>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d348      	bcc.n	8006ff8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f66:	4b29      	ldr	r3, [pc, #164]	; (800700c <xTaskIncrementTick+0x11c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f70:	4b29      	ldr	r3, [pc, #164]	; (8007018 <xTaskIncrementTick+0x128>)
 8006f72:	f04f 32ff 	mov.w	r2, #4294967295
 8006f76:	601a      	str	r2, [r3, #0]
					break;
 8006f78:	e03e      	b.n	8006ff8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f7a:	4b24      	ldr	r3, [pc, #144]	; (800700c <xTaskIncrementTick+0x11c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d203      	bcs.n	8006f9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f92:	4a21      	ldr	r2, [pc, #132]	; (8007018 <xTaskIncrementTick+0x128>)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f98:	e02e      	b.n	8006ff8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff fcd9 	bl	8006956 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	3318      	adds	r3, #24
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff fcd0 	bl	8006956 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f002 fee7 	bl	8009d8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	409a      	lsls	r2, r3
 8006fc6:	4b15      	ldr	r3, [pc, #84]	; (800701c <xTaskIncrementTick+0x12c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	4a13      	ldr	r2, [pc, #76]	; (800701c <xTaskIncrementTick+0x12c>)
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4a10      	ldr	r2, [pc, #64]	; (8007020 <xTaskIncrementTick+0x130>)
 8006fde:	441a      	add	r2, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f7ff fc58 	bl	800689c <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fec:	e7bb      	b.n	8006f66 <xTaskIncrementTick+0x76>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006fee:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <xTaskIncrementTick+0x134>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	4a0b      	ldr	r2, [pc, #44]	; (8007024 <xTaskIncrementTick+0x134>)
 8006ff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ff8:	697b      	ldr	r3, [r7, #20]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	24000164 	.word	0x24000164
 8007008:	24000140 	.word	0x24000140
 800700c:	240000f4 	.word	0x240000f4
 8007010:	240000f8 	.word	0x240000f8
 8007014:	24000154 	.word	0x24000154
 8007018:	2400015c 	.word	0x2400015c
 800701c:	24000144 	.word	0x24000144
 8007020:	24000040 	.word	0x24000040
 8007024:	2400014c 	.word	0x2400014c

08007028 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800702e:	4b2e      	ldr	r3, [pc, #184]	; (80070e8 <vTaskSwitchContext+0xc0>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007036:	4b2d      	ldr	r3, [pc, #180]	; (80070ec <vTaskSwitchContext+0xc4>)
 8007038:	2201      	movs	r2, #1
 800703a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800703c:	e04f      	b.n	80070de <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 800703e:	4b2b      	ldr	r3, [pc, #172]	; (80070ec <vTaskSwitchContext+0xc4>)
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007044:	4b2a      	ldr	r3, [pc, #168]	; (80070f0 <vTaskSwitchContext+0xc8>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	fab3 f383 	clz	r3, r3
 8007050:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007052:	7afb      	ldrb	r3, [r7, #11]
 8007054:	f1c3 031f 	rsb	r3, r3, #31
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	4926      	ldr	r1, [pc, #152]	; (80070f4 <vTaskSwitchContext+0xcc>)
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10c      	bne.n	8007088 <vTaskSwitchContext+0x60>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	b672      	cpsid	i
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	b662      	cpsie	i
 8007082:	607b      	str	r3, [r7, #4]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <vTaskSwitchContext+0x5e>
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4a18      	ldr	r2, [pc, #96]	; (80070f4 <vTaskSwitchContext+0xcc>)
 8007094:	4413      	add	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	605a      	str	r2, [r3, #4]
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	3308      	adds	r3, #8
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d104      	bne.n	80070b8 <vTaskSwitchContext+0x90>
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	605a      	str	r2, [r3, #4]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	4a0e      	ldr	r2, [pc, #56]	; (80070f8 <vTaskSwitchContext+0xd0>)
 80070c0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80070c2:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <vTaskSwitchContext+0xd0>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <vTaskSwitchContext+0xd4>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d102      	bne.n	80070d4 <vTaskSwitchContext+0xac>
 80070ce:	f002 fdbd 	bl	8009c4c <SEGGER_SYSVIEW_OnIdle>
}
 80070d2:	e004      	b.n	80070de <vTaskSwitchContext+0xb6>
		traceTASK_SWITCHED_IN();
 80070d4:	4b08      	ldr	r3, [pc, #32]	; (80070f8 <vTaskSwitchContext+0xd0>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4618      	mov	r0, r3
 80070da:	f002 fe15 	bl	8009d08 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80070de:	bf00      	nop
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	24000164 	.word	0x24000164
 80070ec:	24000150 	.word	0x24000150
 80070f0:	24000144 	.word	0x24000144
 80070f4:	24000040 	.word	0x24000040
 80070f8:	2400003c 	.word	0x2400003c
 80070fc:	24000160 	.word	0x24000160

08007100 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007108:	f000 f84c 	bl	80071a4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <prvIdleTask+0x20>)
 800710e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800711c:	e7f4      	b.n	8007108 <prvIdleTask+0x8>
 800711e:	bf00      	nop
 8007120:	e000ed04 	.word	0xe000ed04

08007124 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800712a:	2300      	movs	r3, #0
 800712c:	607b      	str	r3, [r7, #4]
 800712e:	e00c      	b.n	800714a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4a12      	ldr	r2, [pc, #72]	; (8007184 <prvInitialiseTaskLists+0x60>)
 800713c:	4413      	add	r3, r2
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff fb7f 	bl	8006842 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3301      	adds	r3, #1
 8007148:	607b      	str	r3, [r7, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b06      	cmp	r3, #6
 800714e:	d9ef      	bls.n	8007130 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007150:	480d      	ldr	r0, [pc, #52]	; (8007188 <prvInitialiseTaskLists+0x64>)
 8007152:	f7ff fb76 	bl	8006842 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007156:	480d      	ldr	r0, [pc, #52]	; (800718c <prvInitialiseTaskLists+0x68>)
 8007158:	f7ff fb73 	bl	8006842 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800715c:	480c      	ldr	r0, [pc, #48]	; (8007190 <prvInitialiseTaskLists+0x6c>)
 800715e:	f7ff fb70 	bl	8006842 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007162:	480c      	ldr	r0, [pc, #48]	; (8007194 <prvInitialiseTaskLists+0x70>)
 8007164:	f7ff fb6d 	bl	8006842 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007168:	480b      	ldr	r0, [pc, #44]	; (8007198 <prvInitialiseTaskLists+0x74>)
 800716a:	f7ff fb6a 	bl	8006842 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800716e:	4b0b      	ldr	r3, [pc, #44]	; (800719c <prvInitialiseTaskLists+0x78>)
 8007170:	4a05      	ldr	r2, [pc, #20]	; (8007188 <prvInitialiseTaskLists+0x64>)
 8007172:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007174:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <prvInitialiseTaskLists+0x7c>)
 8007176:	4a05      	ldr	r2, [pc, #20]	; (800718c <prvInitialiseTaskLists+0x68>)
 8007178:	601a      	str	r2, [r3, #0]
}
 800717a:	bf00      	nop
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	24000040 	.word	0x24000040
 8007188:	240000cc 	.word	0x240000cc
 800718c:	240000e0 	.word	0x240000e0
 8007190:	240000fc 	.word	0x240000fc
 8007194:	24000110 	.word	0x24000110
 8007198:	24000128 	.word	0x24000128
 800719c:	240000f4 	.word	0x240000f4
 80071a0:	240000f8 	.word	0x240000f8

080071a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071aa:	e019      	b.n	80071e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071ac:	f000 f9ce 	bl	800754c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b0:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <prvCheckTasksWaitingTermination+0x50>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff fbca 	bl	8006956 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071c2:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <prvCheckTasksWaitingTermination+0x54>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	4a0b      	ldr	r2, [pc, #44]	; (80071f8 <prvCheckTasksWaitingTermination+0x54>)
 80071ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071cc:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <prvCheckTasksWaitingTermination+0x58>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3b01      	subs	r3, #1
 80071d2:	4a0a      	ldr	r2, [pc, #40]	; (80071fc <prvCheckTasksWaitingTermination+0x58>)
 80071d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071d6:	f000 f9ed 	bl	80075b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f810 	bl	8007200 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <prvCheckTasksWaitingTermination+0x58>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e1      	bne.n	80071ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071e8:	bf00      	nop
 80071ea:	bf00      	nop
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	24000110 	.word	0x24000110
 80071f8:	2400013c 	.word	0x2400013c
 80071fc:	24000124 	.word	0x24000124

08007200 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fc17 	bl	8007a40 <vPortFree>
			vPortFree( pxTCB );
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fc14 	bl	8007a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007226:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <prvResetNextTaskUnblockTime+0x38>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d104      	bne.n	800723a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007230:	4b0a      	ldr	r3, [pc, #40]	; (800725c <prvResetNextTaskUnblockTime+0x3c>)
 8007232:	f04f 32ff 	mov.w	r2, #4294967295
 8007236:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007238:	e008      	b.n	800724c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800723a:	4b07      	ldr	r3, [pc, #28]	; (8007258 <prvResetNextTaskUnblockTime+0x38>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	4a04      	ldr	r2, [pc, #16]	; (800725c <prvResetNextTaskUnblockTime+0x3c>)
 800724a:	6013      	str	r3, [r2, #0]
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	240000f4 	.word	0x240000f4
 800725c:	2400015c 	.word	0x2400015c

08007260 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800726a:	4b29      	ldr	r3, [pc, #164]	; (8007310 <prvAddCurrentTaskToDelayedList+0xb0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007270:	4b28      	ldr	r3, [pc, #160]	; (8007314 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3304      	adds	r3, #4
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff fb6d 	bl	8006956 <uxListRemove>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10b      	bne.n	800729a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007282:	4b24      	ldr	r3, [pc, #144]	; (8007314 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	2201      	movs	r2, #1
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	43da      	mvns	r2, r3
 8007290:	4b21      	ldr	r3, [pc, #132]	; (8007318 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4013      	ands	r3, r2
 8007296:	4a20      	ldr	r2, [pc, #128]	; (8007318 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007298:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a0:	d10a      	bne.n	80072b8 <prvAddCurrentTaskToDelayedList+0x58>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d007      	beq.n	80072b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072a8:	4b1a      	ldr	r3, [pc, #104]	; (8007314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4619      	mov	r1, r3
 80072b0:	481a      	ldr	r0, [pc, #104]	; (800731c <prvAddCurrentTaskToDelayedList+0xbc>)
 80072b2:	f7ff faf3 	bl	800689c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072b6:	e026      	b.n	8007306 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4413      	add	r3, r2
 80072be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072c0:	4b14      	ldr	r3, [pc, #80]	; (8007314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d209      	bcs.n	80072e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072d0:	4b13      	ldr	r3, [pc, #76]	; (8007320 <prvAddCurrentTaskToDelayedList+0xc0>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3304      	adds	r3, #4
 80072da:	4619      	mov	r1, r3
 80072dc:	4610      	mov	r0, r2
 80072de:	f7ff fb01 	bl	80068e4 <vListInsert>
}
 80072e2:	e010      	b.n	8007306 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072e4:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <prvAddCurrentTaskToDelayedList+0xc4>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	4b0a      	ldr	r3, [pc, #40]	; (8007314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f7ff faf7 	bl	80068e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072f6:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <prvAddCurrentTaskToDelayedList+0xc8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d202      	bcs.n	8007306 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007300:	4a09      	ldr	r2, [pc, #36]	; (8007328 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	6013      	str	r3, [r2, #0]
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	24000140 	.word	0x24000140
 8007314:	2400003c 	.word	0x2400003c
 8007318:	24000144 	.word	0x24000144
 800731c:	24000128 	.word	0x24000128
 8007320:	240000f8 	.word	0x240000f8
 8007324:	240000f4 	.word	0x240000f4
 8007328:	2400015c 	.word	0x2400015c

0800732c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3b04      	subs	r3, #4
 800733c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3b04      	subs	r3, #4
 800734a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f023 0201 	bic.w	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3b04      	subs	r3, #4
 800735a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800735c:	4a0c      	ldr	r2, [pc, #48]	; (8007390 <pxPortInitialiseStack+0x64>)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3b14      	subs	r3, #20
 8007366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3b04      	subs	r3, #4
 8007372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f06f 0202 	mvn.w	r2, #2
 800737a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3b20      	subs	r3, #32
 8007380:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007382:	68fb      	ldr	r3, [r7, #12]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	08007395 	.word	0x08007395

08007394 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800739e:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <prvTaskExitError+0x5c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a6:	d00c      	beq.n	80073c2 <prvTaskExitError+0x2e>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	b672      	cpsid	i
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	b662      	cpsie	i
 80073bc:	60fb      	str	r3, [r7, #12]
}
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <prvTaskExitError+0x2c>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	b672      	cpsid	i
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	b662      	cpsie	i
 80073d6:	60bb      	str	r3, [r7, #8]
}
 80073d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073da:	bf00      	nop
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0fc      	beq.n	80073dc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073e2:	bf00      	nop
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	24000014 	.word	0x24000014
	...

08007400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007400:	4b07      	ldr	r3, [pc, #28]	; (8007420 <pxCurrentTCBConst2>)
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	6808      	ldr	r0, [r1, #0]
 8007406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740a:	f380 8809 	msr	PSP, r0
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f380 8811 	msr	BASEPRI, r0
 800741a:	4770      	bx	lr
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst2>:
 8007420:	2400003c 	.word	0x2400003c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007428:	4808      	ldr	r0, [pc, #32]	; (800744c <prvPortStartFirstTask+0x24>)
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	6800      	ldr	r0, [r0, #0]
 800742e:	f380 8808 	msr	MSP, r0
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8814 	msr	CONTROL, r0
 800743a:	b662      	cpsie	i
 800743c:	b661      	cpsie	f
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	df00      	svc	0
 8007448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800744a:	bf00      	nop
 800744c:	e000ed08 	.word	0xe000ed08

08007450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007456:	4b37      	ldr	r3, [pc, #220]	; (8007534 <xPortStartScheduler+0xe4>)
 8007458:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	22ff      	movs	r2, #255	; 0xff
 8007466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007478:	b2da      	uxtb	r2, r3
 800747a:	4b2f      	ldr	r3, [pc, #188]	; (8007538 <xPortStartScheduler+0xe8>)
 800747c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800747e:	4b2f      	ldr	r3, [pc, #188]	; (800753c <xPortStartScheduler+0xec>)
 8007480:	2207      	movs	r2, #7
 8007482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007484:	e009      	b.n	800749a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007486:	4b2d      	ldr	r3, [pc, #180]	; (800753c <xPortStartScheduler+0xec>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3b01      	subs	r3, #1
 800748c:	4a2b      	ldr	r2, [pc, #172]	; (800753c <xPortStartScheduler+0xec>)
 800748e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	b2db      	uxtb	r3, r3
 8007498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a2:	2b80      	cmp	r3, #128	; 0x80
 80074a4:	d0ef      	beq.n	8007486 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074a6:	4b25      	ldr	r3, [pc, #148]	; (800753c <xPortStartScheduler+0xec>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f1c3 0307 	rsb	r3, r3, #7
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d00c      	beq.n	80074cc <xPortStartScheduler+0x7c>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	b672      	cpsid	i
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	b662      	cpsie	i
 80074c6:	60bb      	str	r3, [r7, #8]
}
 80074c8:	bf00      	nop
 80074ca:	e7fe      	b.n	80074ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074cc:	4b1b      	ldr	r3, [pc, #108]	; (800753c <xPortStartScheduler+0xec>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	4a1a      	ldr	r2, [pc, #104]	; (800753c <xPortStartScheduler+0xec>)
 80074d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074d6:	4b19      	ldr	r3, [pc, #100]	; (800753c <xPortStartScheduler+0xec>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074de:	4a17      	ldr	r2, [pc, #92]	; (800753c <xPortStartScheduler+0xec>)
 80074e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074ea:	4b15      	ldr	r3, [pc, #84]	; (8007540 <xPortStartScheduler+0xf0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a14      	ldr	r2, [pc, #80]	; (8007540 <xPortStartScheduler+0xf0>)
 80074f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074f6:	4b12      	ldr	r3, [pc, #72]	; (8007540 <xPortStartScheduler+0xf0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a11      	ldr	r2, [pc, #68]	; (8007540 <xPortStartScheduler+0xf0>)
 80074fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007500:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007502:	f000 f8dd 	bl	80076c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007506:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <xPortStartScheduler+0xf4>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800750c:	f000 f8fc 	bl	8007708 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007510:	4b0d      	ldr	r3, [pc, #52]	; (8007548 <xPortStartScheduler+0xf8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a0c      	ldr	r2, [pc, #48]	; (8007548 <xPortStartScheduler+0xf8>)
 8007516:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800751a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800751c:	f7ff ff84 	bl	8007428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007520:	f7ff fd82 	bl	8007028 <vTaskSwitchContext>
	prvTaskExitError();
 8007524:	f7ff ff36 	bl	8007394 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	e000e400 	.word	0xe000e400
 8007538:	24000168 	.word	0x24000168
 800753c:	2400016c 	.word	0x2400016c
 8007540:	e000ed20 	.word	0xe000ed20
 8007544:	24000014 	.word	0x24000014
 8007548:	e000ef34 	.word	0xe000ef34

0800754c <vPortEnterCritical>:
/*-----------------------------------------------------------*/



void vPortEnterCritical( void )
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	b672      	cpsid	i
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	b662      	cpsie	i
 8007566:	607b      	str	r3, [r7, #4]
}
 8007568:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800756a:	4b10      	ldr	r3, [pc, #64]	; (80075ac <vPortEnterCritical+0x60>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3301      	adds	r3, #1
 8007570:	4a0e      	ldr	r2, [pc, #56]	; (80075ac <vPortEnterCritical+0x60>)
 8007572:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007574:	4b0d      	ldr	r3, [pc, #52]	; (80075ac <vPortEnterCritical+0x60>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d111      	bne.n	80075a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <vPortEnterCritical+0x64>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00c      	beq.n	80075a0 <vPortEnterCritical+0x54>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	b672      	cpsid	i
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	b662      	cpsie	i
 800759a:	603b      	str	r3, [r7, #0]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <vPortEnterCritical+0x52>
	}
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	24000014 	.word	0x24000014
 80075b0:	e000ed04 	.word	0xe000ed04

080075b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075ba:	4b13      	ldr	r3, [pc, #76]	; (8007608 <vPortExitCritical+0x54>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10c      	bne.n	80075dc <vPortExitCritical+0x28>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	b672      	cpsid	i
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	b662      	cpsie	i
 80075d6:	607b      	str	r3, [r7, #4]
}
 80075d8:	bf00      	nop
 80075da:	e7fe      	b.n	80075da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80075dc:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <vPortExitCritical+0x54>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	4a09      	ldr	r2, [pc, #36]	; (8007608 <vPortExitCritical+0x54>)
 80075e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075e6:	4b08      	ldr	r3, [pc, #32]	; (8007608 <vPortExitCritical+0x54>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <vPortExitCritical+0x46>
 80075ee:	2300      	movs	r3, #0
 80075f0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80075f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	24000014 	.word	0x24000014
 800760c:	00000000 	.word	0x00000000

08007610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007610:	f3ef 8009 	mrs	r0, PSP
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	4b15      	ldr	r3, [pc, #84]	; (8007670 <pxCurrentTCBConst>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	f01e 0f10 	tst.w	lr, #16
 8007620:	bf08      	it	eq
 8007622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762a:	6010      	str	r0, [r2, #0]
 800762c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007634:	b672      	cpsid	i
 8007636:	f380 8811 	msr	BASEPRI, r0
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	b662      	cpsie	i
 8007644:	f7ff fcf0 	bl	8007028 <vTaskSwitchContext>
 8007648:	f04f 0000 	mov.w	r0, #0
 800764c:	f380 8811 	msr	BASEPRI, r0
 8007650:	bc09      	pop	{r0, r3}
 8007652:	6819      	ldr	r1, [r3, #0]
 8007654:	6808      	ldr	r0, [r1, #0]
 8007656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	f01e 0f10 	tst.w	lr, #16
 800765e:	bf08      	it	eq
 8007660:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007664:	f380 8809 	msr	PSP, r0
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop

08007670 <pxCurrentTCBConst>:
 8007670:	2400003c 	.word	0x2400003c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop

08007678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	b672      	cpsid	i
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	b662      	cpsie	i
 8007692:	607b      	str	r3, [r7, #4]
}
 8007694:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007696:	f7ff fc2b 	bl	8006ef0 <xTaskIncrementTick>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076a0:	4b06      	ldr	r3, [pc, #24]	; (80076bc <SysTick_Handler+0x44>)
 80076a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	2300      	movs	r3, #0
 80076aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	f383 8811 	msr	BASEPRI, r3
}
 80076b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <vPortSetupTimerInterrupt+0x34>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076ca:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <vPortSetupTimerInterrupt+0x38>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <vPortSetupTimerInterrupt+0x3c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a0a      	ldr	r2, [pc, #40]	; (8007700 <vPortSetupTimerInterrupt+0x40>)
 80076d6:	fba2 2303 	umull	r2, r3, r2, r3
 80076da:	099b      	lsrs	r3, r3, #6
 80076dc:	4a09      	ldr	r2, [pc, #36]	; (8007704 <vPortSetupTimerInterrupt+0x44>)
 80076de:	3b01      	subs	r3, #1
 80076e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076e2:	4b04      	ldr	r3, [pc, #16]	; (80076f4 <vPortSetupTimerInterrupt+0x34>)
 80076e4:	2207      	movs	r2, #7
 80076e6:	601a      	str	r2, [r3, #0]
}
 80076e8:	bf00      	nop
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	e000e010 	.word	0xe000e010
 80076f8:	e000e018 	.word	0xe000e018
 80076fc:	24000004 	.word	0x24000004
 8007700:	10624dd3 	.word	0x10624dd3
 8007704:	e000e014 	.word	0xe000e014

08007708 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007708:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007718 <vPortEnableVFP+0x10>
 800770c:	6801      	ldr	r1, [r0, #0]
 800770e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007712:	6001      	str	r1, [r0, #0]
 8007714:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007716:	bf00      	nop
 8007718:	e000ed88 	.word	0xe000ed88

0800771c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007722:	f3ef 8305 	mrs	r3, IPSR
 8007726:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b0f      	cmp	r3, #15
 800772c:	d916      	bls.n	800775c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800772e:	4a19      	ldr	r2, [pc, #100]	; (8007794 <vPortValidateInterruptPriority+0x78>)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007738:	4b17      	ldr	r3, [pc, #92]	; (8007798 <vPortValidateInterruptPriority+0x7c>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	7afa      	ldrb	r2, [r7, #11]
 800773e:	429a      	cmp	r2, r3
 8007740:	d20c      	bcs.n	800775c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	b672      	cpsid	i
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	b662      	cpsie	i
 8007756:	607b      	str	r3, [r7, #4]
}
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800775c:	4b0f      	ldr	r3, [pc, #60]	; (800779c <vPortValidateInterruptPriority+0x80>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007764:	4b0e      	ldr	r3, [pc, #56]	; (80077a0 <vPortValidateInterruptPriority+0x84>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d90c      	bls.n	8007786 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	b672      	cpsid	i
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	b662      	cpsie	i
 8007780:	603b      	str	r3, [r7, #0]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <vPortValidateInterruptPriority+0x68>
	}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	e000e3f0 	.word	0xe000e3f0
 8007798:	24000168 	.word	0x24000168
 800779c:	e000ed0c 	.word	0xe000ed0c
 80077a0:	2400016c 	.word	0x2400016c

080077a4 <vInitPrioGroupValue>:
#endif /* configASSERT_DEFINED */


// Patch function
void vInitPrioGroupValue(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	 * the r0p1 parts.  r0p1 parts should use the port from the
	 * /source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077aa:	4b3a      	ldr	r3, [pc, #232]	; (8007894 <vInitPrioGroupValue+0xf0>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a3a      	ldr	r2, [pc, #232]	; (8007898 <vInitPrioGroupValue+0xf4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d10c      	bne.n	80077ce <vInitPrioGroupValue+0x2a>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	b672      	cpsid	i
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	b662      	cpsie	i
 80077c8:	613b      	str	r3, [r7, #16]
}
 80077ca:	bf00      	nop
 80077cc:	e7fe      	b.n	80077cc <vInitPrioGroupValue+0x28>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077ce:	4b31      	ldr	r3, [pc, #196]	; (8007894 <vInitPrioGroupValue+0xf0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a32      	ldr	r2, [pc, #200]	; (800789c <vInitPrioGroupValue+0xf8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d10c      	bne.n	80077f2 <vInitPrioGroupValue+0x4e>
	__asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	b672      	cpsid	i
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	b662      	cpsie	i
 80077ec:	60fb      	str	r3, [r7, #12]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <vInitPrioGroupValue+0x4c>

	#if ( configASSERT_DEFINED == 1 )
		{
			volatile uint32_t ulOriginalPriority;
			volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077f2:	4b2b      	ldr	r3, [pc, #172]	; (80078a0 <vInitPrioGroupValue+0xfc>)
 80077f4:	617b      	str	r3, [r7, #20]
			 * functions can be called.  ISR safe functions are those that end in
			 * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
			 * ensure interrupt entry is as fast and simple as possible.
			 *
			 * Save the interrupt priority value that is about to be clobbered. */
			ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	607b      	str	r3, [r7, #4]

			/* Determine the number of priority bits available.  First write to all
			 * possible bits. */
			*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	22ff      	movs	r2, #255	; 0xff
 8007802:	701a      	strb	r2, [r3, #0]

			/* Read the value back to see how many bits stuck. */
			ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	70fb      	strb	r3, [r7, #3]

			/* Use the same mask on the maximum system call priority. */
			ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007814:	b2da      	uxtb	r2, r3
 8007816:	4b23      	ldr	r3, [pc, #140]	; (80078a4 <vInitPrioGroupValue+0x100>)
 8007818:	701a      	strb	r2, [r3, #0]

			/* Calculate the maximum acceptable priority group value for the number
			 * of bits read back. */
			ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800781a:	4b23      	ldr	r3, [pc, #140]	; (80078a8 <vInitPrioGroupValue+0x104>)
 800781c:	2207      	movs	r2, #7
 800781e:	601a      	str	r2, [r3, #0]

			while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007820:	e009      	b.n	8007836 <vInitPrioGroupValue+0x92>
			{
				ulMaxPRIGROUPValue--;
 8007822:	4b21      	ldr	r3, [pc, #132]	; (80078a8 <vInitPrioGroupValue+0x104>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3b01      	subs	r3, #1
 8007828:	4a1f      	ldr	r2, [pc, #124]	; (80078a8 <vInitPrioGroupValue+0x104>)
 800782a:	6013      	str	r3, [r2, #0]
				ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	70fb      	strb	r3, [r7, #3]
			while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007836:	78fb      	ldrb	r3, [r7, #3]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783e:	2b80      	cmp	r3, #128	; 0x80
 8007840:	d0ef      	beq.n	8007822 <vInitPrioGroupValue+0x7e>
			#ifdef configPRIO_BITS
				{
					/* Check the FreeRTOS configuration that defines the number of
					 * priority bits matches the number of priority bits actually queried
					 * from the hardware. */
					configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007842:	4b19      	ldr	r3, [pc, #100]	; (80078a8 <vInitPrioGroupValue+0x104>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f1c3 0307 	rsb	r3, r3, #7
 800784a:	2b04      	cmp	r3, #4
 800784c:	d00c      	beq.n	8007868 <vInitPrioGroupValue+0xc4>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	b672      	cpsid	i
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	b662      	cpsie	i
 8007862:	60bb      	str	r3, [r7, #8]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <vInitPrioGroupValue+0xc2>
				}
			#endif

			/* Shift the priority group value back to its position within the AIRCR
			 * register. */
			ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007868:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <vInitPrioGroupValue+0x104>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	4a0e      	ldr	r2, [pc, #56]	; (80078a8 <vInitPrioGroupValue+0x104>)
 8007870:	6013      	str	r3, [r2, #0]
			ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007872:	4b0d      	ldr	r3, [pc, #52]	; (80078a8 <vInitPrioGroupValue+0x104>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800787a:	4a0b      	ldr	r2, [pc, #44]	; (80078a8 <vInitPrioGroupValue+0x104>)
 800787c:	6013      	str	r3, [r2, #0]

			/* Restore the clobbered interrupt priority register to its original
			 * value. */
			*pucFirstUserPriorityRegister = ulOriginalPriority;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	b2da      	uxtb	r2, r3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	701a      	strb	r2, [r3, #0]
		}
	#endif /* conifgASSERT_DEFINED */
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	e000ed00 	.word	0xe000ed00
 8007898:	0410c271 	.word	0x0410c271
 800789c:	0410c270 	.word	0x0410c270
 80078a0:	e000e400 	.word	0xe000e400
 80078a4:	24000168 	.word	0x24000168
 80078a8:	2400016c 	.word	0x2400016c

080078ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08a      	sub	sp, #40	; 0x28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078b8:	f7ff fa66 	bl	8006d88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078bc:	4b5b      	ldr	r3, [pc, #364]	; (8007a2c <pvPortMalloc+0x180>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078c4:	f000 f91a 	bl	8007afc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078c8:	4b59      	ldr	r3, [pc, #356]	; (8007a30 <pvPortMalloc+0x184>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4013      	ands	r3, r2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f040 8092 	bne.w	80079fa <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01f      	beq.n	800791c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80078dc:	2208      	movs	r2, #8
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4413      	add	r3, r2
 80078e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d016      	beq.n	800791c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f023 0307 	bic.w	r3, r3, #7
 80078f4:	3308      	adds	r3, #8
 80078f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00c      	beq.n	800791c <pvPortMalloc+0x70>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	b672      	cpsid	i
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	b662      	cpsie	i
 8007916:	617b      	str	r3, [r7, #20]
}
 8007918:	bf00      	nop
 800791a:	e7fe      	b.n	800791a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d06b      	beq.n	80079fa <pvPortMalloc+0x14e>
 8007922:	4b44      	ldr	r3, [pc, #272]	; (8007a34 <pvPortMalloc+0x188>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	429a      	cmp	r2, r3
 800792a:	d866      	bhi.n	80079fa <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800792c:	4b42      	ldr	r3, [pc, #264]	; (8007a38 <pvPortMalloc+0x18c>)
 800792e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007930:	4b41      	ldr	r3, [pc, #260]	; (8007a38 <pvPortMalloc+0x18c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007936:	e004      	b.n	8007942 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	429a      	cmp	r2, r3
 800794a:	d903      	bls.n	8007954 <pvPortMalloc+0xa8>
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1f1      	bne.n	8007938 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007954:	4b35      	ldr	r3, [pc, #212]	; (8007a2c <pvPortMalloc+0x180>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795a:	429a      	cmp	r2, r3
 800795c:	d04d      	beq.n	80079fa <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2208      	movs	r2, #8
 8007964:	4413      	add	r3, r2
 8007966:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	2308      	movs	r3, #8
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	429a      	cmp	r2, r3
 800797e:	d921      	bls.n	80079c4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00c      	beq.n	80079ac <pvPortMalloc+0x100>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	b672      	cpsid	i
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	b662      	cpsie	i
 80079a6:	613b      	str	r3, [r7, #16]
}
 80079a8:	bf00      	nop
 80079aa:	e7fe      	b.n	80079aa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079be:	69b8      	ldr	r0, [r7, #24]
 80079c0:	f000 f8fe 	bl	8007bc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079c4:	4b1b      	ldr	r3, [pc, #108]	; (8007a34 <pvPortMalloc+0x188>)
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	4a19      	ldr	r2, [pc, #100]	; (8007a34 <pvPortMalloc+0x188>)
 80079d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079d2:	4b18      	ldr	r3, [pc, #96]	; (8007a34 <pvPortMalloc+0x188>)
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	4b19      	ldr	r3, [pc, #100]	; (8007a3c <pvPortMalloc+0x190>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d203      	bcs.n	80079e6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079de:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <pvPortMalloc+0x188>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a16      	ldr	r2, [pc, #88]	; (8007a3c <pvPortMalloc+0x190>)
 80079e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	4b11      	ldr	r3, [pc, #68]	; (8007a30 <pvPortMalloc+0x184>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	431a      	orrs	r2, r3
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079fa:	f7ff f9d3 	bl	8006da4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00c      	beq.n	8007a22 <pvPortMalloc+0x176>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	b672      	cpsid	i
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	b662      	cpsie	i
 8007a1c:	60fb      	str	r3, [r7, #12]
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <pvPortMalloc+0x174>
	return pvReturn;
 8007a22:	69fb      	ldr	r3, [r7, #28]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3728      	adds	r7, #40	; 0x28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	24005178 	.word	0x24005178
 8007a30:	24005184 	.word	0x24005184
 8007a34:	2400517c 	.word	0x2400517c
 8007a38:	24005170 	.word	0x24005170
 8007a3c:	24005180 	.word	0x24005180

08007a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d04c      	beq.n	8007aec <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a52:	2308      	movs	r3, #8
 8007a54:	425b      	negs	r3, r3
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	4413      	add	r3, r2
 8007a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	4b23      	ldr	r3, [pc, #140]	; (8007af4 <vPortFree+0xb4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10c      	bne.n	8007a88 <vPortFree+0x48>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	b672      	cpsid	i
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	b662      	cpsie	i
 8007a82:	60fb      	str	r3, [r7, #12]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00c      	beq.n	8007aaa <vPortFree+0x6a>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	b672      	cpsid	i
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	b662      	cpsie	i
 8007aa4:	60bb      	str	r3, [r7, #8]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	4b11      	ldr	r3, [pc, #68]	; (8007af4 <vPortFree+0xb4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d019      	beq.n	8007aec <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d115      	bne.n	8007aec <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <vPortFree+0xb4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	401a      	ands	r2, r3
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ad0:	f7ff f95a 	bl	8006d88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <vPortFree+0xb8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4413      	add	r3, r2
 8007ade:	4a06      	ldr	r2, [pc, #24]	; (8007af8 <vPortFree+0xb8>)
 8007ae0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ae2:	6938      	ldr	r0, [r7, #16]
 8007ae4:	f000 f86c 	bl	8007bc0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ae8:	f7ff f95c 	bl	8006da4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aec:	bf00      	nop
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	24005184 	.word	0x24005184
 8007af8:	2400517c 	.word	0x2400517c

08007afc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b02:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8007b06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b08:	4b27      	ldr	r3, [pc, #156]	; (8007ba8 <prvHeapInit+0xac>)
 8007b0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00c      	beq.n	8007b30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3307      	adds	r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0307 	bic.w	r3, r3, #7
 8007b22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	4a1f      	ldr	r2, [pc, #124]	; (8007ba8 <prvHeapInit+0xac>)
 8007b2c:	4413      	add	r3, r2
 8007b2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b34:	4a1d      	ldr	r2, [pc, #116]	; (8007bac <prvHeapInit+0xb0>)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b3a:	4b1c      	ldr	r3, [pc, #112]	; (8007bac <prvHeapInit+0xb0>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	4413      	add	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b48:	2208      	movs	r2, #8
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0307 	bic.w	r3, r3, #7
 8007b56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <prvHeapInit+0xb4>)
 8007b5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b5e:	4b14      	ldr	r3, [pc, #80]	; (8007bb0 <prvHeapInit+0xb4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b66:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <prvHeapInit+0xb4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b7c:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <prvHeapInit+0xb4>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a0a      	ldr	r2, [pc, #40]	; (8007bb4 <prvHeapInit+0xb8>)
 8007b8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <prvHeapInit+0xbc>)
 8007b92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b94:	4b09      	ldr	r3, [pc, #36]	; (8007bbc <prvHeapInit+0xc0>)
 8007b96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b9a:	601a      	str	r2, [r3, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	24000170 	.word	0x24000170
 8007bac:	24005170 	.word	0x24005170
 8007bb0:	24005178 	.word	0x24005178
 8007bb4:	24005180 	.word	0x24005180
 8007bb8:	2400517c 	.word	0x2400517c
 8007bbc:	24005184 	.word	0x24005184

08007bc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bc8:	4b28      	ldr	r3, [pc, #160]	; (8007c6c <prvInsertBlockIntoFreeList+0xac>)
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	e002      	b.n	8007bd4 <prvInsertBlockIntoFreeList+0x14>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d8f7      	bhi.n	8007bce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	4413      	add	r3, r2
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d108      	bne.n	8007c02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	441a      	add	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	441a      	add	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d118      	bne.n	8007c48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <prvInsertBlockIntoFreeList+0xb0>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d00d      	beq.n	8007c3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	441a      	add	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	e008      	b.n	8007c50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c3e:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <prvInsertBlockIntoFreeList+0xb0>)
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e003      	b.n	8007c50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d002      	beq.n	8007c5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c5e:	bf00      	nop
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	24005170 	.word	0x24005170
 8007c70:	24005178 	.word	0x24005178

08007c74 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007c78:	4803      	ldr	r0, [pc, #12]	; (8007c88 <_cbSendSystemDesc+0x14>)
 8007c7a:	f001 ff91 	bl	8009ba0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007c7e:	4803      	ldr	r0, [pc, #12]	; (8007c8c <_cbSendSystemDesc+0x18>)
 8007c80:	f001 ff8e 	bl	8009ba0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007c84:	bf00      	nop
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	0800a2c0 	.word	0x0800a2c0
 8007c8c:	0800a2fc 	.word	0x0800a2fc

08007c90 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007c94:	4b06      	ldr	r3, [pc, #24]	; (8007cb0 <SEGGER_SYSVIEW_Conf+0x20>)
 8007c96:	6818      	ldr	r0, [r3, #0]
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <SEGGER_SYSVIEW_Conf+0x20>)
 8007c9a:	6819      	ldr	r1, [r3, #0]
 8007c9c:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <SEGGER_SYSVIEW_Conf+0x24>)
 8007c9e:	4a06      	ldr	r2, [pc, #24]	; (8007cb8 <SEGGER_SYSVIEW_Conf+0x28>)
 8007ca0:	f001 fc02 	bl	80094a8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007ca4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007ca8:	f001 fc42 	bl	8009530 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007cac:	bf00      	nop
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	24000004 	.word	0x24000004
 8007cb4:	08007c75 	.word	0x08007c75
 8007cb8:	0800a3bc 	.word	0x0800a3bc

08007cbc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	607b      	str	r3, [r7, #4]
 8007cc6:	e033      	b.n	8007d30 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007cc8:	491e      	ldr	r1, [pc, #120]	; (8007d44 <_cbSendTaskList+0x88>)
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	6818      	ldr	r0, [r3, #0]
 8007cd8:	491a      	ldr	r1, [pc, #104]	; (8007d44 <_cbSendTaskList+0x88>)
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	6819      	ldr	r1, [r3, #0]
 8007cea:	4c16      	ldr	r4, [pc, #88]	; (8007d44 <_cbSendTaskList+0x88>)
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4423      	add	r3, r4
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	681c      	ldr	r4, [r3, #0]
 8007cfc:	4d11      	ldr	r5, [pc, #68]	; (8007d44 <_cbSendTaskList+0x88>)
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	4613      	mov	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	442b      	add	r3, r5
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	681d      	ldr	r5, [r3, #0]
 8007d0e:	4e0d      	ldr	r6, [pc, #52]	; (8007d44 <_cbSendTaskList+0x88>)
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4433      	add	r3, r6
 8007d1c:	3310      	adds	r3, #16
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	462b      	mov	r3, r5
 8007d24:	4622      	mov	r2, r4
 8007d26:	f000 f8b5 	bl	8007e94 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	607b      	str	r3, [r7, #4]
 8007d30:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <_cbSendTaskList+0x8c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d3c6      	bcc.n	8007cc8 <_cbSendTaskList+0xc>
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d44:	24005188 	.word	0x24005188
 8007d48:	24005228 	.word	0x24005228

08007d4c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007d4c:	b5b0      	push	{r4, r5, r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007d52:	f7ff f8bb 	bl	8006ecc <xTaskGetTickCountFromISR>
 8007d56:	4603      	mov	r3, r0
 8007d58:	461a      	mov	r2, r3
 8007d5a:	f04f 0300 	mov.w	r3, #0
 8007d5e:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	f04f 0400 	mov.w	r4, #0
 8007d6e:	f04f 0500 	mov.w	r5, #0
 8007d72:	015d      	lsls	r5, r3, #5
 8007d74:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8007d78:	0154      	lsls	r4, r2, #5
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	1a12      	subs	r2, r2, r0
 8007d80:	eb63 0301 	sbc.w	r3, r3, r1
 8007d84:	f04f 0400 	mov.w	r4, #0
 8007d88:	f04f 0500 	mov.w	r5, #0
 8007d8c:	009d      	lsls	r5, r3, #2
 8007d8e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8007d92:	0094      	lsls	r4, r2, #2
 8007d94:	4622      	mov	r2, r4
 8007d96:	462b      	mov	r3, r5
 8007d98:	1812      	adds	r2, r2, r0
 8007d9a:	eb41 0303 	adc.w	r3, r1, r3
 8007d9e:	f04f 0000 	mov.w	r0, #0
 8007da2:	f04f 0100 	mov.w	r1, #0
 8007da6:	00d9      	lsls	r1, r3, #3
 8007da8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dac:	00d0      	lsls	r0, r2, #3
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8007db6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8007dba:	4610      	mov	r0, r2
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bdb0      	pop	{r4, r5, r7, pc}

08007dc4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af02      	add	r7, sp, #8
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007dd2:	2205      	movs	r2, #5
 8007dd4:	492b      	ldr	r1, [pc, #172]	; (8007e84 <SYSVIEW_AddTask+0xc0>)
 8007dd6:	68b8      	ldr	r0, [r7, #8]
 8007dd8:	f002 f9b8 	bl	800a14c <memcmp>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d04b      	beq.n	8007e7a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007de2:	4b29      	ldr	r3, [pc, #164]	; (8007e88 <SYSVIEW_AddTask+0xc4>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b07      	cmp	r3, #7
 8007de8:	d903      	bls.n	8007df2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8007dea:	4828      	ldr	r0, [pc, #160]	; (8007e8c <SYSVIEW_AddTask+0xc8>)
 8007dec:	f002 f900 	bl	8009ff0 <SEGGER_SYSVIEW_Warn>
    return;
 8007df0:	e044      	b.n	8007e7c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007df2:	4b25      	ldr	r3, [pc, #148]	; (8007e88 <SYSVIEW_AddTask+0xc4>)
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	4926      	ldr	r1, [pc, #152]	; (8007e90 <SYSVIEW_AddTask+0xcc>)
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8007e06:	4b20      	ldr	r3, [pc, #128]	; (8007e88 <SYSVIEW_AddTask+0xc4>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4921      	ldr	r1, [pc, #132]	; (8007e90 <SYSVIEW_AddTask+0xcc>)
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	440b      	add	r3, r1
 8007e16:	3304      	adds	r3, #4
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007e1c:	4b1a      	ldr	r3, [pc, #104]	; (8007e88 <SYSVIEW_AddTask+0xc4>)
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	491b      	ldr	r1, [pc, #108]	; (8007e90 <SYSVIEW_AddTask+0xcc>)
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	440b      	add	r3, r1
 8007e2c:	3308      	adds	r3, #8
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007e32:	4b15      	ldr	r3, [pc, #84]	; (8007e88 <SYSVIEW_AddTask+0xc4>)
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	4916      	ldr	r1, [pc, #88]	; (8007e90 <SYSVIEW_AddTask+0xcc>)
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	440b      	add	r3, r1
 8007e42:	330c      	adds	r3, #12
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8007e48:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <SYSVIEW_AddTask+0xc4>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	4910      	ldr	r1, [pc, #64]	; (8007e90 <SYSVIEW_AddTask+0xcc>)
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	440b      	add	r3, r1
 8007e58:	3310      	adds	r3, #16
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007e5e:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <SYSVIEW_AddTask+0xc4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3301      	adds	r3, #1
 8007e64:	4a08      	ldr	r2, [pc, #32]	; (8007e88 <SYSVIEW_AddTask+0xc4>)
 8007e66:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 f80e 	bl	8007e94 <SYSVIEW_SendTaskInfo>
 8007e78:	e000      	b.n	8007e7c <SYSVIEW_AddTask+0xb8>
    return;
 8007e7a:	bf00      	nop

}
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	0800a30c 	.word	0x0800a30c
 8007e88:	24005228 	.word	0x24005228
 8007e8c:	0800a314 	.word	0x0800a314
 8007e90:	24005188 	.word	0x24005188

08007e94 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	; 0x28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007ea2:	f107 0314 	add.w	r3, r7, #20
 8007ea6:	2214      	movs	r2, #20
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f002 f96a 	bl	800a184 <memset>
  TaskInfo.TaskID     = TaskID;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007ec4:	f107 0314 	add.w	r3, r7, #20
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f001 fd71 	bl	80099b0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007ece:	bf00      	nop
 8007ed0:	3728      	adds	r7, #40	; 0x28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <__NVIC_EnableIRQ>:
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	db0b      	blt.n	8007f02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	f003 021f 	and.w	r2, r3, #31
 8007ef0:	4907      	ldr	r1, [pc, #28]	; (8007f10 <__NVIC_EnableIRQ+0x38>)
 8007ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ef6:	095b      	lsrs	r3, r3, #5
 8007ef8:	2001      	movs	r0, #1
 8007efa:	fa00 f202 	lsl.w	r2, r0, r2
 8007efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f02:	bf00      	nop
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	e000e100 	.word	0xe000e100

08007f14 <__NVIC_SetPriority>:
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	6039      	str	r1, [r7, #0]
 8007f1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	db0a      	blt.n	8007f3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	490c      	ldr	r1, [pc, #48]	; (8007f60 <__NVIC_SetPriority+0x4c>)
 8007f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f32:	0112      	lsls	r2, r2, #4
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	440b      	add	r3, r1
 8007f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f3c:	e00a      	b.n	8007f54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	4908      	ldr	r1, [pc, #32]	; (8007f64 <__NVIC_SetPriority+0x50>)
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	3b04      	subs	r3, #4
 8007f4c:	0112      	lsls	r2, r2, #4
 8007f4e:	b2d2      	uxtb	r2, r2
 8007f50:	440b      	add	r3, r1
 8007f52:	761a      	strb	r2, [r3, #24]
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	e000e100 	.word	0xe000e100
 8007f64:	e000ed00 	.word	0xe000ed00

08007f68 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8007f6e:	f002 f89b 	bl	800a0a8 <SEGGER_SYSVIEW_IsStarted>
 8007f72:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8007f7a:	f001 fb9d 	bl	80096b8 <SEGGER_SYSVIEW_Start>
  }
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8007f92:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <_cbOnUARTRx+0x3c>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d806      	bhi.n	8007fa8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8007f9a:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <_cbOnUARTRx+0x3c>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	4b08      	ldr	r3, [pc, #32]	; (8007fc4 <_cbOnUARTRx+0x3c>)
 8007fa4:	701a      	strb	r2, [r3, #0]
    goto Done;
 8007fa6:	e009      	b.n	8007fbc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8007fa8:	f7ff ffde 	bl	8007f68 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <_cbOnUARTRx+0x3c>)
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	1dfb      	adds	r3, r7, #7
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	f000 fb9a 	bl	80086f0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8007fbc:	bf00      	nop
}
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	24000018 	.word	0x24000018

08007fc8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8007fd0:	4b14      	ldr	r3, [pc, #80]	; (8008024 <_cbOnUARTTx+0x5c>)
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d80f      	bhi.n	8007ff8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8007fd8:	4b12      	ldr	r3, [pc, #72]	; (8008024 <_cbOnUARTTx+0x5c>)
 8007fda:	785b      	ldrb	r3, [r3, #1]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	4b12      	ldr	r3, [pc, #72]	; (8008028 <_cbOnUARTTx+0x60>)
 8007fe0:	5c9a      	ldrb	r2, [r3, r2]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8007fe6:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <_cbOnUARTTx+0x5c>)
 8007fe8:	785b      	ldrb	r3, [r3, #1]
 8007fea:	3301      	adds	r3, #1
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <_cbOnUARTTx+0x5c>)
 8007ff0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8007ff6:	e00f      	b.n	8008018 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <_cbOnUARTTx+0x5c>)
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fa19 	bl	8008438 <SEGGER_RTT_ReadUpBufferNoLock>
 8008006:	4603      	mov	r3, r0
 8008008:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	da02      	bge.n	8008016 <_cbOnUARTTx+0x4e>
    r = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e000      	b.n	8008018 <_cbOnUARTTx+0x50>
  }
Done:
 8008016:	bf00      	nop
  return r;
 8008018:	68fb      	ldr	r3, [r7, #12]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	24000018 	.word	0x24000018
 8008028:	0800a3c4 	.word	0x0800a3c4

0800802c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8008034:	4a04      	ldr	r2, [pc, #16]	; (8008048 <SEGGER_UART_init+0x1c>)
 8008036:	4905      	ldr	r1, [pc, #20]	; (800804c <SEGGER_UART_init+0x20>)
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f863 	bl	8008104 <HIF_UART_Init>
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	08007f89 	.word	0x08007f89
 800804c:	08007fc9 	.word	0x08007fc9

08008050 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8008056:	4b1e      	ldr	r3, [pc, #120]	; (80080d0 <USART2_IRQHandler+0x80>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d011      	beq.n	800808a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8008066:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <USART2_IRQHandler+0x84>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	b2db      	uxtb	r3, r3
 800806c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f003 030b 	and.w	r3, r3, #11
 8008074:	2b00      	cmp	r3, #0
 8008076:	d108      	bne.n	800808a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8008078:	4b17      	ldr	r3, [pc, #92]	; (80080d8 <USART2_IRQHandler+0x88>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8008080:	4b15      	ldr	r3, [pc, #84]	; (80080d8 <USART2_IRQHandler+0x88>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	79fa      	ldrb	r2, [r7, #7]
 8008086:	4610      	mov	r0, r2
 8008088:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008090:	2b00      	cmp	r3, #0
 8008092:	d01a      	beq.n	80080ca <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8008094:	4b11      	ldr	r3, [pc, #68]	; (80080dc <USART2_IRQHandler+0x8c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d015      	beq.n	80080c8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800809c:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <USART2_IRQHandler+0x8c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	1dfa      	adds	r2, r7, #7
 80080a2:	4610      	mov	r0, r2
 80080a4:	4798      	blx	r3
 80080a6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80080ae:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <USART2_IRQHandler+0x90>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a0b      	ldr	r2, [pc, #44]	; (80080e0 <USART2_IRQHandler+0x90>)
 80080b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e006      	b.n	80080ca <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80080bc:	4b04      	ldr	r3, [pc, #16]	; (80080d0 <USART2_IRQHandler+0x80>)
 80080be:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80080c0:	79fa      	ldrb	r2, [r7, #7]
 80080c2:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <USART2_IRQHandler+0x84>)
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	e000      	b.n	80080ca <USART2_IRQHandler+0x7a>
      return;
 80080c8:	bf00      	nop
    }
  }
}
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	40004400 	.word	0x40004400
 80080d4:	40004404 	.word	0x40004404
 80080d8:	2400522c 	.word	0x2400522c
 80080dc:	24005230 	.word	0x24005230
 80080e0:	4000440c 	.word	0x4000440c

080080e4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80080e8:	4b05      	ldr	r3, [pc, #20]	; (8008100 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a04      	ldr	r2, [pc, #16]	; (8008100 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80080ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f2:	6013      	str	r3, [r2, #0]
}
 80080f4:	bf00      	nop
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	4000440c 	.word	0x4000440c

08008104 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8008110:	4b2e      	ldr	r3, [pc, #184]	; (80081cc <HIF_UART_Init+0xc8>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a2d      	ldr	r2, [pc, #180]	; (80081cc <HIF_UART_Init+0xc8>)
 8008116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800811a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800811c:	4b2c      	ldr	r3, [pc, #176]	; (80081d0 <HIF_UART_Init+0xcc>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a2b      	ldr	r2, [pc, #172]	; (80081d0 <HIF_UART_Init+0xcc>)
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8008128:	4b2a      	ldr	r3, [pc, #168]	; (80081d4 <HIF_UART_Init+0xd0>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008134:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800813c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800813e:	4a25      	ldr	r2, [pc, #148]	; (80081d4 <HIF_UART_Init+0xd0>)
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8008144:	4b24      	ldr	r3, [pc, #144]	; (80081d8 <HIF_UART_Init+0xd4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008150:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8008158:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800815a:	4a1f      	ldr	r2, [pc, #124]	; (80081d8 <HIF_UART_Init+0xd4>)
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8008160:	4b1e      	ldr	r3, [pc, #120]	; (80081dc <HIF_UART_Init+0xd8>)
 8008162:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8008166:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8008168:	4b1d      	ldr	r3, [pc, #116]	; (80081e0 <HIF_UART_Init+0xdc>)
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800816e:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <HIF_UART_Init+0xe0>)
 8008170:	2280      	movs	r2, #128	; 0x80
 8008172:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800817a:	4a1b      	ldr	r2, [pc, #108]	; (80081e8 <HIF_UART_Init+0xe4>)
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008182:	3301      	adds	r3, #1
 8008184:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	085b      	lsrs	r3, r3, #1
 800818a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008192:	d302      	bcc.n	800819a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8008194:	f640 73ff 	movw	r3, #4095	; 0xfff
 8008198:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d004      	beq.n	80081aa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	011b      	lsls	r3, r3, #4
 80081a4:	4a11      	ldr	r2, [pc, #68]	; (80081ec <HIF_UART_Init+0xe8>)
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80081aa:	4a11      	ldr	r2, [pc, #68]	; (80081f0 <HIF_UART_Init+0xec>)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80081b0:	4a10      	ldr	r2, [pc, #64]	; (80081f4 <HIF_UART_Init+0xf0>)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80081b6:	2106      	movs	r1, #6
 80081b8:	2026      	movs	r0, #38	; 0x26
 80081ba:	f7ff feab 	bl	8007f14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80081be:	2026      	movs	r0, #38	; 0x26
 80081c0:	f7ff fe8a 	bl	8007ed8 <__NVIC_EnableIRQ>
}
 80081c4:	bf00      	nop
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	580244e8 	.word	0x580244e8
 80081d0:	580244d8 	.word	0x580244d8
 80081d4:	58020020 	.word	0x58020020
 80081d8:	58020000 	.word	0x58020000
 80081dc:	4000440c 	.word	0x4000440c
 80081e0:	40004410 	.word	0x40004410
 80081e4:	40004414 	.word	0x40004414
 80081e8:	007a1200 	.word	0x007a1200
 80081ec:	40004408 	.word	0x40004408
 80081f0:	2400522c 	.word	0x2400522c
 80081f4:	24005230 	.word	0x24005230

080081f8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80081fe:	4b24      	ldr	r3, [pc, #144]	; (8008290 <_DoInit+0x98>)
 8008200:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2203      	movs	r2, #3
 8008206:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2203      	movs	r2, #3
 800820c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a20      	ldr	r2, [pc, #128]	; (8008294 <_DoInit+0x9c>)
 8008212:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a20      	ldr	r2, [pc, #128]	; (8008298 <_DoInit+0xa0>)
 8008218:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008220:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a17      	ldr	r2, [pc, #92]	; (8008294 <_DoInit+0x9c>)
 8008238:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a17      	ldr	r2, [pc, #92]	; (800829c <_DoInit+0xa4>)
 800823e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2210      	movs	r2, #16
 8008244:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3307      	adds	r3, #7
 800825c:	4a10      	ldr	r2, [pc, #64]	; (80082a0 <_DoInit+0xa8>)
 800825e:	6810      	ldr	r0, [r2, #0]
 8008260:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008262:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a0e      	ldr	r2, [pc, #56]	; (80082a4 <_DoInit+0xac>)
 800826a:	6810      	ldr	r0, [r2, #0]
 800826c:	6018      	str	r0, [r3, #0]
 800826e:	8891      	ldrh	r1, [r2, #4]
 8008270:	7992      	ldrb	r2, [r2, #6]
 8008272:	8099      	strh	r1, [r3, #4]
 8008274:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008276:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008280:	f3bf 8f5f 	dmb	sy
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	24006be4 	.word	0x24006be4
 8008294:	0800a364 	.word	0x0800a364
 8008298:	24005234 	.word	0x24005234
 800829c:	24005634 	.word	0x24005634
 80082a0:	0800a370 	.word	0x0800a370
 80082a4:	0800a374 	.word	0x0800a374

080082a8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80082b4:	2300      	movs	r3, #0
 80082b6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d905      	bls.n	80082d8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	3b01      	subs	r3, #1
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24
 80082d6:	e007      	b.n	80082e8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	69b9      	ldr	r1, [r7, #24]
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	1acb      	subs	r3, r1, r3
 80082e2:	4413      	add	r3, r2
 80082e4:	3b01      	subs	r3, #1
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f2:	4293      	cmp	r3, r2
 80082f4:	bf28      	it	cs
 80082f6:	4613      	movcs	r3, r2
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80082fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4293      	cmp	r3, r2
 8008300:	bf28      	it	cs
 8008302:	4613      	movcs	r3, r2
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	4413      	add	r3, r2
 800830e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8008310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008312:	68b9      	ldr	r1, [r7, #8]
 8008314:	6978      	ldr	r0, [r7, #20]
 8008316:	f001 ff27 	bl	800a168 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800831a:	6a3a      	ldr	r2, [r7, #32]
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	4413      	add	r3, r2
 8008320:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	4413      	add	r3, r2
 8008328:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	4413      	add	r3, r2
 8008338:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	429a      	cmp	r2, r3
 8008342:	d101      	bne.n	8008348 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008344:	2300      	movs	r3, #0
 8008346:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008348:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1b2      	bne.n	80082be <_WriteBlocking+0x16>
  return NumBytesWritten;
 8008358:	6a3b      	ldr	r3, [r7, #32]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3728      	adds	r7, #40	; 0x28
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008362:	b580      	push	{r7, lr}
 8008364:	b088      	sub	sp, #32
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	429a      	cmp	r2, r3
 8008384:	d911      	bls.n	80083aa <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	4413      	add	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	68b9      	ldr	r1, [r7, #8]
 8008394:	6938      	ldr	r0, [r7, #16]
 8008396:	f001 fee7 	bl	800a168 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800839a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800839e:	69fa      	ldr	r2, [r7, #28]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	441a      	add	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80083a8:	e01f      	b.n	80083ea <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	4413      	add	r3, r2
 80083b6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	6938      	ldr	r0, [r7, #16]
 80083be:	f001 fed3 	bl	800a168 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	4413      	add	r3, r2
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	4619      	mov	r1, r3
 80083da:	6938      	ldr	r0, [r7, #16]
 80083dc:	f001 fec4 	bl	800a168 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80083e0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	60da      	str	r2, [r3, #12]
}
 80083ea:	bf00      	nop
 80083ec:	3720      	adds	r7, #32
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80083f2:	b480      	push	{r7}
 80083f4:	b087      	sub	sp, #28
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	429a      	cmp	r2, r3
 800840c:	d808      	bhi.n	8008420 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689a      	ldr	r2, [r3, #8]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	1ad2      	subs	r2, r2, r3
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	4413      	add	r3, r2
 800841a:	3b01      	subs	r3, #1
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	e004      	b.n	800842a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	3b01      	subs	r3, #1
 8008428:	617b      	str	r3, [r7, #20]
  }
  return r;
 800842a:	697b      	ldr	r3, [r7, #20]
}
 800842c:	4618      	mov	r0, r3
 800842e:	371c      	adds	r7, #28
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b08c      	sub	sp, #48	; 0x30
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8008444:	4b3e      	ldr	r3, [pc, #248]	; (8008540 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8008446:	623b      	str	r3, [r7, #32]
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8008452:	f7ff fed1 	bl	80081f8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	4613      	mov	r3, r2
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	4413      	add	r3, r2
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	4a37      	ldr	r2, [pc, #220]	; (8008540 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8008464:	4413      	add	r3, r2
 8008466:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008478:	2300      	movs	r3, #0
 800847a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800847c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	429a      	cmp	r2, r3
 8008482:	d92b      	bls.n	80084dc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4293      	cmp	r3, r2
 8008494:	bf28      	it	cs
 8008496:	4613      	movcs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	4413      	add	r3, r2
 80084a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	6939      	ldr	r1, [r7, #16]
 80084a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084aa:	f001 fe5d 	bl	800a168 <memcpy>
    NumBytesRead += NumBytesRem;
 80084ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	4413      	add	r3, r2
 80084b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80084b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	4413      	add	r3, r2
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80084c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	4413      	add	r3, r2
 80084cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d101      	bne.n	80084dc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80084d8:	2300      	movs	r3, #0
 80084da:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4293      	cmp	r3, r2
 80084ea:	bf28      	it	cs
 80084ec:	4613      	movcs	r3, r2
 80084ee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d019      	beq.n	800852a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	4413      	add	r3, r2
 80084fe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	6939      	ldr	r1, [r7, #16]
 8008504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008506:	f001 fe2f 	bl	800a168 <memcpy>
    NumBytesRead += NumBytesRem;
 800850a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	4413      	add	r3, r2
 8008510:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	4413      	add	r3, r2
 8008518:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	4413      	add	r3, r2
 8008528:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008534:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008538:	4618      	mov	r0, r3
 800853a:	3730      	adds	r7, #48	; 0x30
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	24006be4 	.word	0x24006be4

08008544 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008544:	b580      	push	{r7, lr}
 8008546:	b08c      	sub	sp, #48	; 0x30
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008550:	4b3e      	ldr	r3, [pc, #248]	; (800864c <SEGGER_RTT_ReadNoLock+0x108>)
 8008552:	623b      	str	r3, [r7, #32]
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <SEGGER_RTT_ReadNoLock+0x1e>
 800855e:	f7ff fe4b 	bl	80081f8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4613      	mov	r3, r2
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	4413      	add	r3, r2
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	3360      	adds	r3, #96	; 0x60
 800856e:	4a37      	ldr	r2, [pc, #220]	; (800864c <SEGGER_RTT_ReadNoLock+0x108>)
 8008570:	4413      	add	r3, r2
 8008572:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008584:	2300      	movs	r3, #0
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	429a      	cmp	r2, r3
 800858e:	d92b      	bls.n	80085e8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4293      	cmp	r3, r2
 80085a0:	bf28      	it	cs
 80085a2:	4613      	movcs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	4413      	add	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	6939      	ldr	r1, [r7, #16]
 80085b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085b6:	f001 fdd7 	bl	800a168 <memcpy>
    NumBytesRead += NumBytesRem;
 80085ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	4413      	add	r3, r2
 80085c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80085c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	4413      	add	r3, r2
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80085d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	4413      	add	r3, r2
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d101      	bne.n	80085e8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80085e4:	2300      	movs	r3, #0
 80085e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4293      	cmp	r3, r2
 80085f6:	bf28      	it	cs
 80085f8:	4613      	movcs	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d019      	beq.n	8008636 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	4413      	add	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	6939      	ldr	r1, [r7, #16]
 8008610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008612:	f001 fda9 	bl	800a168 <memcpy>
    NumBytesRead += NumBytesRem;
 8008616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	4413      	add	r3, r2
 800861c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800861e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	4413      	add	r3, r2
 8008624:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800862e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	4413      	add	r3, r2
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008640:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008644:	4618      	mov	r0, r3
 8008646:	3730      	adds	r7, #48	; 0x30
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	24006be4 	.word	0x24006be4

08008650 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4613      	mov	r3, r2
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	4413      	add	r3, r2
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	3360      	adds	r3, #96	; 0x60
 800866c:	4a1f      	ldr	r2, [pc, #124]	; (80086ec <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800866e:	4413      	add	r3, r2
 8008670:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	2b02      	cmp	r3, #2
 8008678:	d029      	beq.n	80086ce <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800867a:	2b02      	cmp	r3, #2
 800867c:	d82e      	bhi.n	80086dc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8008682:	2b01      	cmp	r3, #1
 8008684:	d013      	beq.n	80086ae <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8008686:	e029      	b.n	80086dc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008688:	6978      	ldr	r0, [r7, #20]
 800868a:	f7ff feb2 	bl	80083f2 <_GetAvailWriteSpace>
 800868e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	429a      	cmp	r2, r3
 8008696:	d202      	bcs.n	800869e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8008698:	2300      	movs	r3, #0
 800869a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800869c:	e021      	b.n	80086e2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	69b9      	ldr	r1, [r7, #24]
 80086a6:	6978      	ldr	r0, [r7, #20]
 80086a8:	f7ff fe5b 	bl	8008362 <_WriteNoCheck>
    break;
 80086ac:	e019      	b.n	80086e2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80086ae:	6978      	ldr	r0, [r7, #20]
 80086b0:	f7ff fe9f 	bl	80083f2 <_GetAvailWriteSpace>
 80086b4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	4293      	cmp	r3, r2
 80086bc:	bf28      	it	cs
 80086be:	4613      	movcs	r3, r2
 80086c0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	69b9      	ldr	r1, [r7, #24]
 80086c6:	6978      	ldr	r0, [r7, #20]
 80086c8:	f7ff fe4b 	bl	8008362 <_WriteNoCheck>
    break;
 80086cc:	e009      	b.n	80086e2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	69b9      	ldr	r1, [r7, #24]
 80086d2:	6978      	ldr	r0, [r7, #20]
 80086d4:	f7ff fde8 	bl	80082a8 <_WriteBlocking>
 80086d8:	61f8      	str	r0, [r7, #28]
    break;
 80086da:	e002      	b.n	80086e2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80086dc:	2300      	movs	r3, #0
 80086de:	61fb      	str	r3, [r7, #28]
    break;
 80086e0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80086e2:	69fb      	ldr	r3, [r7, #28]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	24006be4 	.word	0x24006be4

080086f0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80086fc:	4b0e      	ldr	r3, [pc, #56]	; (8008738 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80086fe:	61fb      	str	r3, [r7, #28]
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800870a:	f7ff fd75 	bl	80081f8 <_DoInit>
  SEGGER_RTT_LOCK();
 800870e:	f3ef 8311 	mrs	r3, BASEPRI
 8008712:	f04f 0120 	mov.w	r1, #32
 8008716:	f381 8811 	msr	BASEPRI, r1
 800871a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	68b9      	ldr	r1, [r7, #8]
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f7ff ff95 	bl	8008650 <SEGGER_RTT_WriteDownBufferNoLock>
 8008726:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800872e:	697b      	ldr	r3, [r7, #20]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3720      	adds	r7, #32
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	24006be4 	.word	0x24006be4

0800873c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800874a:	4b3d      	ldr	r3, [pc, #244]	; (8008840 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800874c:	61bb      	str	r3, [r7, #24]
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <SEGGER_RTT_AllocUpBuffer+0x20>
 8008758:	f7ff fd4e 	bl	80081f8 <_DoInit>
  SEGGER_RTT_LOCK();
 800875c:	f3ef 8311 	mrs	r3, BASEPRI
 8008760:	f04f 0120 	mov.w	r1, #32
 8008764:	f381 8811 	msr	BASEPRI, r1
 8008768:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800876a:	4b35      	ldr	r3, [pc, #212]	; (8008840 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800876c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8008772:	6939      	ldr	r1, [r7, #16]
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	4613      	mov	r3, r2
 800877a:	005b      	lsls	r3, r3, #1
 800877c:	4413      	add	r3, r2
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	440b      	add	r3, r1
 8008782:	3304      	adds	r3, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d008      	beq.n	800879c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	3301      	adds	r3, #1
 800878e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	429a      	cmp	r2, r3
 8008798:	dbeb      	blt.n	8008772 <SEGGER_RTT_AllocUpBuffer+0x36>
 800879a:	e000      	b.n	800879e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800879c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	da3f      	bge.n	8008828 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80087a8:	6939      	ldr	r1, [r7, #16]
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	4613      	mov	r3, r2
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	4413      	add	r3, r2
 80087b4:	00db      	lsls	r3, r3, #3
 80087b6:	440b      	add	r3, r1
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80087bc:	6939      	ldr	r1, [r7, #16]
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	4613      	mov	r3, r2
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	4413      	add	r3, r2
 80087c8:	00db      	lsls	r3, r3, #3
 80087ca:	440b      	add	r3, r1
 80087cc:	3304      	adds	r3, #4
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80087d2:	6939      	ldr	r1, [r7, #16]
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	4613      	mov	r3, r2
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	4413      	add	r3, r2
 80087dc:	00db      	lsls	r3, r3, #3
 80087de:	440b      	add	r3, r1
 80087e0:	3320      	adds	r3, #32
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80087e6:	6939      	ldr	r1, [r7, #16]
 80087e8:	69fa      	ldr	r2, [r7, #28]
 80087ea:	4613      	mov	r3, r2
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	4413      	add	r3, r2
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	440b      	add	r3, r1
 80087f4:	3328      	adds	r3, #40	; 0x28
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80087fa:	6939      	ldr	r1, [r7, #16]
 80087fc:	69fa      	ldr	r2, [r7, #28]
 80087fe:	4613      	mov	r3, r2
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	4413      	add	r3, r2
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	440b      	add	r3, r1
 8008808:	3324      	adds	r3, #36	; 0x24
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800880e:	6939      	ldr	r1, [r7, #16]
 8008810:	69fa      	ldr	r2, [r7, #28]
 8008812:	4613      	mov	r3, r2
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	4413      	add	r3, r2
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	440b      	add	r3, r1
 800881c:	332c      	adds	r3, #44	; 0x2c
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008822:	f3bf 8f5f 	dmb	sy
 8008826:	e002      	b.n	800882e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8008828:	f04f 33ff 	mov.w	r3, #4294967295
 800882c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8008834:	69fb      	ldr	r3, [r7, #28]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	24006be4 	.word	0x24006be4

08008844 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
 8008850:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008852:	4b33      	ldr	r3, [pc, #204]	; (8008920 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8008854:	61bb      	str	r3, [r7, #24]
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008860:	f7ff fcca 	bl	80081f8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008864:	4b2e      	ldr	r3, [pc, #184]	; (8008920 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8008866:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	461a      	mov	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4293      	cmp	r3, r2
 8008872:	d24d      	bcs.n	8008910 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8008874:	f3ef 8311 	mrs	r3, BASEPRI
 8008878:	f04f 0120 	mov.w	r1, #32
 800887c:	f381 8811 	msr	BASEPRI, r1
 8008880:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d031      	beq.n	80088ec <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8008888:	6979      	ldr	r1, [r7, #20]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	4613      	mov	r3, r2
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	4413      	add	r3, r2
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	440b      	add	r3, r1
 8008896:	3360      	adds	r3, #96	; 0x60
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800889c:	6979      	ldr	r1, [r7, #20]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	4613      	mov	r3, r2
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	4413      	add	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	440b      	add	r3, r1
 80088aa:	3364      	adds	r3, #100	; 0x64
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80088b0:	6979      	ldr	r1, [r7, #20]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	4613      	mov	r3, r2
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	4413      	add	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	440b      	add	r3, r1
 80088be:	3368      	adds	r3, #104	; 0x68
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80088c4:	6979      	ldr	r1, [r7, #20]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4613      	mov	r3, r2
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	4413      	add	r3, r2
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	440b      	add	r3, r1
 80088d2:	3370      	adds	r3, #112	; 0x70
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80088d8:	6979      	ldr	r1, [r7, #20]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	4613      	mov	r3, r2
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	4413      	add	r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	440b      	add	r3, r1
 80088e6:	336c      	adds	r3, #108	; 0x6c
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80088ec:	6979      	ldr	r1, [r7, #20]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	4613      	mov	r3, r2
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	4413      	add	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	440b      	add	r3, r1
 80088fa:	3374      	adds	r3, #116	; 0x74
 80088fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088fe:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008900:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800890a:	2300      	movs	r3, #0
 800890c:	61fb      	str	r3, [r7, #28]
 800890e:	e002      	b.n	8008916 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8008910:	f04f 33ff 	mov.w	r3, #4294967295
 8008914:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8008916:	69fb      	ldr	r3, [r7, #28]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3720      	adds	r7, #32
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	24006be4 	.word	0x24006be4

08008924 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8008934:	e002      	b.n	800893c <_EncodeStr+0x18>
    Len++;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	3301      	adds	r3, #1
 800893a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	4413      	add	r3, r2
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1f6      	bne.n	8008936 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	429a      	cmp	r2, r3
 800894e:	d901      	bls.n	8008954 <_EncodeStr+0x30>
    Len = Limit;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2bfe      	cmp	r3, #254	; 0xfe
 8008958:	d806      	bhi.n	8008968 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	60fa      	str	r2, [r7, #12]
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	b2d2      	uxtb	r2, r2
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	e011      	b.n	800898c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	60fa      	str	r2, [r7, #12]
 800896e:	22ff      	movs	r2, #255	; 0xff
 8008970:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	60fa      	str	r2, [r7, #12]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	b2d2      	uxtb	r2, r2
 800897c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	0a19      	lsrs	r1, r3, #8
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	60fa      	str	r2, [r7, #12]
 8008988:	b2ca      	uxtb	r2, r1
 800898a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008990:	e00a      	b.n	80089a8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	1c53      	adds	r3, r2, #1
 8008996:	60bb      	str	r3, [r7, #8]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	1c59      	adds	r1, r3, #1
 800899c:	60f9      	str	r1, [r7, #12]
 800899e:	7812      	ldrb	r2, [r2, #0]
 80089a0:	701a      	strb	r2, [r3, #0]
    n++;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	3301      	adds	r3, #1
 80089a6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d3f0      	bcc.n	8008992 <_EncodeStr+0x6e>
  }
  return pPayload;
 80089b0:	68fb      	ldr	r3, [r7, #12]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	371c      	adds	r7, #28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr

080089be <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80089be:	b480      	push	{r7}
 80089c0:	b083      	sub	sp, #12
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	3304      	adds	r3, #4
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
	...

080089d8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80089de:	4b36      	ldr	r3, [pc, #216]	; (8008ab8 <_HandleIncomingPacket+0xe0>)
 80089e0:	7e1b      	ldrb	r3, [r3, #24]
 80089e2:	4618      	mov	r0, r3
 80089e4:	1cfb      	adds	r3, r7, #3
 80089e6:	2201      	movs	r2, #1
 80089e8:	4619      	mov	r1, r3
 80089ea:	f7ff fdab 	bl	8008544 <SEGGER_RTT_ReadNoLock>
 80089ee:	4603      	mov	r3, r0
 80089f0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	dd54      	ble.n	8008aa2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	2b80      	cmp	r3, #128	; 0x80
 80089fc:	d032      	beq.n	8008a64 <_HandleIncomingPacket+0x8c>
 80089fe:	2b80      	cmp	r3, #128	; 0x80
 8008a00:	dc42      	bgt.n	8008a88 <_HandleIncomingPacket+0xb0>
 8008a02:	2b07      	cmp	r3, #7
 8008a04:	dc16      	bgt.n	8008a34 <_HandleIncomingPacket+0x5c>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dd3e      	ble.n	8008a88 <_HandleIncomingPacket+0xb0>
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	2b06      	cmp	r3, #6
 8008a0e:	d83b      	bhi.n	8008a88 <_HandleIncomingPacket+0xb0>
 8008a10:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <_HandleIncomingPacket+0x40>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a3b 	.word	0x08008a3b
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a47 	.word	0x08008a47
 8008a24:	08008a4d 	.word	0x08008a4d
 8008a28:	08008a53 	.word	0x08008a53
 8008a2c:	08008a59 	.word	0x08008a59
 8008a30:	08008a5f 	.word	0x08008a5f
 8008a34:	2b7f      	cmp	r3, #127	; 0x7f
 8008a36:	d036      	beq.n	8008aa6 <_HandleIncomingPacket+0xce>
 8008a38:	e026      	b.n	8008a88 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008a3a:	f000 fe3d 	bl	80096b8 <SEGGER_SYSVIEW_Start>
      break;
 8008a3e:	e037      	b.n	8008ab0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008a40:	f000 fef6 	bl	8009830 <SEGGER_SYSVIEW_Stop>
      break;
 8008a44:	e034      	b.n	8008ab0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008a46:	f001 f8cf 	bl	8009be8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008a4a:	e031      	b.n	8008ab0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008a4c:	f001 f894 	bl	8009b78 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008a50:	e02e      	b.n	8008ab0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8008a52:	f000 ff13 	bl	800987c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008a56:	e02b      	b.n	8008ab0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008a58:	f001 fa78 	bl	8009f4c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008a5c:	e028      	b.n	8008ab0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008a5e:	f001 fa57 	bl	8009f10 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8008a62:	e025      	b.n	8008ab0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008a64:	4b14      	ldr	r3, [pc, #80]	; (8008ab8 <_HandleIncomingPacket+0xe0>)
 8008a66:	7e1b      	ldrb	r3, [r3, #24]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	1cfb      	adds	r3, r7, #3
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	4619      	mov	r1, r3
 8008a70:	f7ff fd68 	bl	8008544 <SEGGER_RTT_ReadNoLock>
 8008a74:	4603      	mov	r3, r0
 8008a76:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	dd15      	ble.n	8008aaa <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f001 f9c5 	bl	8009e10 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8008a86:	e010      	b.n	8008aaa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8008a88:	78fb      	ldrb	r3, [r7, #3]
 8008a8a:	b25b      	sxtb	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	da0e      	bge.n	8008aae <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008a90:	4b09      	ldr	r3, [pc, #36]	; (8008ab8 <_HandleIncomingPacket+0xe0>)
 8008a92:	7e1b      	ldrb	r3, [r3, #24]
 8008a94:	4618      	mov	r0, r3
 8008a96:	1cfb      	adds	r3, r7, #3
 8008a98:	2201      	movs	r2, #1
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	f7ff fd52 	bl	8008544 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008aa0:	e005      	b.n	8008aae <_HandleIncomingPacket+0xd6>
    }
  }
 8008aa2:	bf00      	nop
 8008aa4:	e004      	b.n	8008ab0 <_HandleIncomingPacket+0xd8>
      break;
 8008aa6:	bf00      	nop
 8008aa8:	e002      	b.n	8008ab0 <_HandleIncomingPacket+0xd8>
      break;
 8008aaa:	bf00      	nop
 8008aac:	e000      	b.n	8008ab0 <_HandleIncomingPacket+0xd8>
      break;
 8008aae:	bf00      	nop
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	2400664c 	.word	0x2400664c

08008abc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08c      	sub	sp, #48	; 0x30
 8008ac0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008ac6:	1d3b      	adds	r3, r7, #4
 8008ac8:	3301      	adds	r3, #1
 8008aca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ad0:	4b32      	ldr	r3, [pc, #200]	; (8008b9c <_TrySendOverflowPacket+0xe0>)
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ad6:	e00b      	b.n	8008af0 <_TrySendOverflowPacket+0x34>
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ade:	1c59      	adds	r1, r3, #1
 8008ae0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008ae2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ae6:	b2d2      	uxtb	r2, r2
 8008ae8:	701a      	strb	r2, [r3, #0]
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	09db      	lsrs	r3, r3, #7
 8008aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	2b7f      	cmp	r3, #127	; 0x7f
 8008af4:	d8f0      	bhi.n	8008ad8 <_TrySendOverflowPacket+0x1c>
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	1c5a      	adds	r2, r3, #1
 8008afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	701a      	strb	r2, [r3, #0]
 8008b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b04:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008b06:	4b26      	ldr	r3, [pc, #152]	; (8008ba0 <_TrySendOverflowPacket+0xe4>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008b0c:	4b23      	ldr	r3, [pc, #140]	; (8008b9c <_TrySendOverflowPacket+0xe0>)
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	623b      	str	r3, [r7, #32]
 8008b1e:	e00b      	b.n	8008b38 <_TrySendOverflowPacket+0x7c>
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	1c59      	adds	r1, r3, #1
 8008b28:	6279      	str	r1, [r7, #36]	; 0x24
 8008b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	701a      	strb	r2, [r3, #0]
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	09db      	lsrs	r3, r3, #7
 8008b36:	623b      	str	r3, [r7, #32]
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b3c:	d8f0      	bhi.n	8008b20 <_TrySendOverflowPacket+0x64>
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	627a      	str	r2, [r7, #36]	; 0x24
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	b2d2      	uxtb	r2, r2
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8008b4e:	4b13      	ldr	r3, [pc, #76]	; (8008b9c <_TrySendOverflowPacket+0xe0>)
 8008b50:	785b      	ldrb	r3, [r3, #1]
 8008b52:	4618      	mov	r0, r3
 8008b54:	1d3b      	adds	r3, r7, #4
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	1d3b      	adds	r3, r7, #4
 8008b5e:	4619      	mov	r1, r3
 8008b60:	f7f7 fbbe 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008b64:	4603      	mov	r3, r0
 8008b66:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8008b68:	f7ff fabc 	bl	80080e4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d009      	beq.n	8008b86 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008b72:	4a0a      	ldr	r2, [pc, #40]	; (8008b9c <_TrySendOverflowPacket+0xe0>)
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008b78:	4b08      	ldr	r3, [pc, #32]	; (8008b9c <_TrySendOverflowPacket+0xe0>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <_TrySendOverflowPacket+0xe0>)
 8008b82:	701a      	strb	r2, [r3, #0]
 8008b84:	e004      	b.n	8008b90 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8008b86:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <_TrySendOverflowPacket+0xe0>)
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	4a03      	ldr	r2, [pc, #12]	; (8008b9c <_TrySendOverflowPacket+0xe0>)
 8008b8e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008b90:	693b      	ldr	r3, [r7, #16]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3730      	adds	r7, #48	; 0x30
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	2400664c 	.word	0x2400664c
 8008ba0:	e0001004 	.word	0xe0001004

08008ba4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08a      	sub	sp, #40	; 0x28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008bb0:	4b6d      	ldr	r3, [pc, #436]	; (8008d68 <_SendPacket+0x1c4>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d010      	beq.n	8008bda <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008bb8:	4b6b      	ldr	r3, [pc, #428]	; (8008d68 <_SendPacket+0x1c4>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80a5 	beq.w	8008d0c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008bc2:	4b69      	ldr	r3, [pc, #420]	; (8008d68 <_SendPacket+0x1c4>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d109      	bne.n	8008bde <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008bca:	f7ff ff77 	bl	8008abc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008bce:	4b66      	ldr	r3, [pc, #408]	; (8008d68 <_SendPacket+0x1c4>)
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	f040 809c 	bne.w	8008d10 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8008bd8:	e001      	b.n	8008bde <_SendPacket+0x3a>
    goto Send;
 8008bda:	bf00      	nop
 8008bdc:	e000      	b.n	8008be0 <_SendPacket+0x3c>
Send:
 8008bde:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b1f      	cmp	r3, #31
 8008be4:	d809      	bhi.n	8008bfa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8008be6:	4b60      	ldr	r3, [pc, #384]	; (8008d68 <_SendPacket+0x1c4>)
 8008be8:	69da      	ldr	r2, [r3, #28]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f040 808d 	bne.w	8008d14 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b17      	cmp	r3, #23
 8008bfe:	d807      	bhi.n	8008c10 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	60fb      	str	r3, [r7, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	701a      	strb	r2, [r3, #0]
 8008c0e:	e03d      	b.n	8008c8c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c1c:	d912      	bls.n	8008c44 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	09da      	lsrs	r2, r3, #7
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	b2d2      	uxtb	r2, r2
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	3a01      	subs	r2, #1
 8008c36:	60fa      	str	r2, [r7, #12]
 8008c38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	e006      	b.n	8008c52 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b7f      	cmp	r3, #127	; 0x7f
 8008c56:	d912      	bls.n	8008c7e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	09da      	lsrs	r2, r3, #7
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	b2d2      	uxtb	r2, r2
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	3a01      	subs	r2, #1
 8008c70:	60fa      	str	r2, [r7, #12]
 8008c72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	701a      	strb	r2, [r3, #0]
 8008c7c:	e006      	b.n	8008c8c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008c8c:	4b37      	ldr	r3, [pc, #220]	; (8008d6c <_SendPacket+0x1c8>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008c92:	4b35      	ldr	r3, [pc, #212]	; (8008d68 <_SendPacket+0x1c4>)
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	623b      	str	r3, [r7, #32]
 8008ca4:	e00b      	b.n	8008cbe <_SendPacket+0x11a>
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	1c59      	adds	r1, r3, #1
 8008cae:	6279      	str	r1, [r7, #36]	; 0x24
 8008cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008cb4:	b2d2      	uxtb	r2, r2
 8008cb6:	701a      	strb	r2, [r3, #0]
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	09db      	lsrs	r3, r3, #7
 8008cbc:	623b      	str	r3, [r7, #32]
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8008cc2:	d8f0      	bhi.n	8008ca6 <_SendPacket+0x102>
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	1c5a      	adds	r2, r3, #1
 8008cc8:	627a      	str	r2, [r7, #36]	; 0x24
 8008cca:	6a3a      	ldr	r2, [r7, #32]
 8008ccc:	b2d2      	uxtb	r2, r2
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8008cd4:	4b24      	ldr	r3, [pc, #144]	; (8008d68 <_SendPacket+0x1c4>)
 8008cd6:	785b      	ldrb	r3, [r3, #1]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	68f9      	ldr	r1, [r7, #12]
 8008ce4:	f7f7 fafc 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8008cec:	f7ff f9fa 	bl	80080e4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008cf6:	4a1c      	ldr	r2, [pc, #112]	; (8008d68 <_SendPacket+0x1c4>)
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	60d3      	str	r3, [r2, #12]
 8008cfc:	e00b      	b.n	8008d16 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8008cfe:	4b1a      	ldr	r3, [pc, #104]	; (8008d68 <_SendPacket+0x1c4>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	3301      	adds	r3, #1
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	4b18      	ldr	r3, [pc, #96]	; (8008d68 <_SendPacket+0x1c4>)
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	e004      	b.n	8008d16 <_SendPacket+0x172>
    goto SendDone;
 8008d0c:	bf00      	nop
 8008d0e:	e002      	b.n	8008d16 <_SendPacket+0x172>
      goto SendDone;
 8008d10:	bf00      	nop
 8008d12:	e000      	b.n	8008d16 <_SendPacket+0x172>
      goto SendDone;
 8008d14:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8008d16:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <_SendPacket+0x1c4>)
 8008d18:	7e1b      	ldrb	r3, [r3, #24]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4a14      	ldr	r2, [pc, #80]	; (8008d70 <_SendPacket+0x1cc>)
 8008d1e:	460b      	mov	r3, r1
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	440b      	add	r3, r1
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	4413      	add	r3, r2
 8008d28:	336c      	adds	r3, #108	; 0x6c
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	4b0e      	ldr	r3, [pc, #56]	; (8008d68 <_SendPacket+0x1c4>)
 8008d2e:	7e1b      	ldrb	r3, [r3, #24]
 8008d30:	4618      	mov	r0, r3
 8008d32:	490f      	ldr	r1, [pc, #60]	; (8008d70 <_SendPacket+0x1cc>)
 8008d34:	4603      	mov	r3, r0
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	4403      	add	r3, r0
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	440b      	add	r3, r1
 8008d3e:	3370      	adds	r3, #112	; 0x70
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d00b      	beq.n	8008d5e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008d46:	4b08      	ldr	r3, [pc, #32]	; (8008d68 <_SendPacket+0x1c4>)
 8008d48:	789b      	ldrb	r3, [r3, #2]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008d4e:	4b06      	ldr	r3, [pc, #24]	; (8008d68 <_SendPacket+0x1c4>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008d54:	f7ff fe40 	bl	80089d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008d58:	4b03      	ldr	r3, [pc, #12]	; (8008d68 <_SendPacket+0x1c4>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008d5e:	bf00      	nop
 8008d60:	3728      	adds	r7, #40	; 0x28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	2400664c 	.word	0x2400664c
 8008d6c:	e0001004 	.word	0xe0001004
 8008d70:	24006be4 	.word	0x24006be4

08008d74 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	2b80      	cmp	r3, #128	; 0x80
 8008d8c:	d80a      	bhi.n	8008da4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	1c59      	adds	r1, r3, #1
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	6051      	str	r1, [r2, #4]
 8008d98:	78fa      	ldrb	r2, [r7, #3]
 8008d9a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	2b80      	cmp	r3, #128	; 0x80
 8008daa:	d15a      	bne.n	8008e62 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691a      	ldr	r2, [r3, #16]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	b2d2      	uxtb	r2, r2
 8008db6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	623b      	str	r3, [r7, #32]
 8008dcc:	e00b      	b.n	8008de6 <_StoreChar+0x72>
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	1c59      	adds	r1, r3, #1
 8008dd6:	6279      	str	r1, [r7, #36]	; 0x24
 8008dd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ddc:	b2d2      	uxtb	r2, r2
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	09db      	lsrs	r3, r3, #7
 8008de4:	623b      	str	r3, [r7, #32]
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	2b7f      	cmp	r3, #127	; 0x7f
 8008dea:	d8f0      	bhi.n	8008dce <_StoreChar+0x5a>
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	627a      	str	r2, [r7, #36]	; 0x24
 8008df2:	6a3a      	ldr	r2, [r7, #32]
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	61fb      	str	r3, [r7, #28]
 8008e00:	2300      	movs	r3, #0
 8008e02:	61bb      	str	r3, [r7, #24]
 8008e04:	e00b      	b.n	8008e1e <_StoreChar+0xaa>
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	1c59      	adds	r1, r3, #1
 8008e0e:	61f9      	str	r1, [r7, #28]
 8008e10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e14:	b2d2      	uxtb	r2, r2
 8008e16:	701a      	strb	r2, [r3, #0]
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	09db      	lsrs	r3, r3, #7
 8008e1c:	61bb      	str	r3, [r7, #24]
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	2b7f      	cmp	r3, #127	; 0x7f
 8008e22:	d8f0      	bhi.n	8008e06 <_StoreChar+0x92>
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	1c5a      	adds	r2, r3, #1
 8008e28:	61fa      	str	r2, [r7, #28]
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	b2d2      	uxtb	r2, r2
 8008e2e:	701a      	strb	r2, [r3, #0]
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	221a      	movs	r2, #26
 8008e3a:	6939      	ldr	r1, [r7, #16]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff feb1 	bl	8008ba4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff fdb9 	bl	80089be <_PreparePacket>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	611a      	str	r2, [r3, #16]
  }
}
 8008e62:	bf00      	nop
 8008e64:	3728      	adds	r7, #40	; 0x28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08a      	sub	sp, #40	; 0x28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8008e82:	2301      	movs	r3, #1
 8008e84:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8008e86:	e007      	b.n	8008e98 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8008e88:	6a3a      	ldr	r2, [r7, #32]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e90:	623b      	str	r3, [r7, #32]
    Width++;
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	3301      	adds	r3, #1
 8008e96:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8008e98:	6a3a      	ldr	r2, [r7, #32]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d2f3      	bcs.n	8008e88 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d901      	bls.n	8008eac <_PrintUnsigned+0x40>
    Width = NumDigits;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8008eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d11f      	bne.n	8008ef6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01c      	beq.n	8008ef6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8008ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <_PrintUnsigned+0x66>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d102      	bne.n	8008ed2 <_PrintUnsigned+0x66>
        c = '0';
 8008ecc:	2330      	movs	r3, #48	; 0x30
 8008ece:	76fb      	strb	r3, [r7, #27]
 8008ed0:	e001      	b.n	8008ed6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8008ed2:	2320      	movs	r3, #32
 8008ed4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008ed6:	e007      	b.n	8008ee8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	3b01      	subs	r3, #1
 8008edc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8008ede:	7efb      	ldrb	r3, [r7, #27]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f7ff ff46 	bl	8008d74 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <_PrintUnsigned+0x8a>
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d3f0      	bcc.n	8008ed8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d903      	bls.n	8008f04 <_PrintUnsigned+0x98>
      NumDigits--;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	603b      	str	r3, [r7, #0]
 8008f02:	e009      	b.n	8008f18 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f0c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d200      	bcs.n	8008f18 <_PrintUnsigned+0xac>
        break;
 8008f16:	e005      	b.n	8008f24 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	fb02 f303 	mul.w	r3, r2, r3
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8008f22:	e7e8      	b.n	8008ef6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f32:	fb02 f303 	mul.w	r3, r2, r3
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8008f3c:	4a15      	ldr	r2, [pc, #84]	; (8008f94 <_PrintUnsigned+0x128>)
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	4413      	add	r3, r2
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	4619      	mov	r1, r3
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7ff ff14 	bl	8008d74 <_StoreChar>
    Digit /= Base;
 8008f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f54:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1e3      	bne.n	8008f24 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d011      	beq.n	8008f8a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00e      	beq.n	8008f8a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008f6c:	e006      	b.n	8008f7c <_PrintUnsigned+0x110>
        FieldWidth--;
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	3b01      	subs	r3, #1
 8008f72:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8008f74:	2120      	movs	r1, #32
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff fefc 	bl	8008d74 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <_PrintUnsigned+0x11e>
 8008f82:	69fa      	ldr	r2, [r7, #28]
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d3f1      	bcc.n	8008f6e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8008f8a:	bf00      	nop
 8008f8c:	3728      	adds	r7, #40	; 0x28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	0800a3d4 	.word	0x0800a3d4

08008f98 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af02      	add	r7, sp, #8
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bfb8      	it	lt
 8008fac:	425b      	neglt	r3, r3
 8008fae:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8008fb4:	e007      	b.n	8008fc6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8008fbe:	613b      	str	r3, [r7, #16]
    Width++;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	daf3      	bge.n	8008fb6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d901      	bls.n	8008fda <_PrintInt+0x42>
    Width = NumDigits;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <_PrintInt+0x5e>
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	db04      	blt.n	8008ff0 <_PrintInt+0x58>
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <_PrintInt+0x5e>
    FieldWidth--;
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <_PrintInt+0x6e>
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d016      	beq.n	8009034 <_PrintInt+0x9c>
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	2b00      	cmp	r3, #0
 800900e:	d111      	bne.n	8009034 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00e      	beq.n	8009034 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009016:	e006      	b.n	8009026 <_PrintInt+0x8e>
        FieldWidth--;
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	3b01      	subs	r3, #1
 800901c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800901e:	2120      	movs	r1, #32
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f7ff fea7 	bl	8008d74 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <_PrintInt+0x9c>
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	429a      	cmp	r2, r3
 8009032:	d3f1      	bcc.n	8009018 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	da07      	bge.n	800904a <_PrintInt+0xb2>
    v = -v;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	425b      	negs	r3, r3
 800903e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8009040:	212d      	movs	r1, #45	; 0x2d
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff fe96 	bl	8008d74 <_StoreChar>
 8009048:	e008      	b.n	800905c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8009054:	212b      	movs	r1, #43	; 0x2b
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f7ff fe8c 	bl	8008d74 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b00      	cmp	r3, #0
 8009064:	d019      	beq.n	800909a <_PrintInt+0x102>
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	d114      	bne.n	800909a <_PrintInt+0x102>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d111      	bne.n	800909a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00e      	beq.n	800909a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800907c:	e006      	b.n	800908c <_PrintInt+0xf4>
        FieldWidth--;
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	3b01      	subs	r3, #1
 8009082:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8009084:	2130      	movs	r1, #48	; 0x30
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f7ff fe74 	bl	8008d74 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <_PrintInt+0x102>
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	429a      	cmp	r2, r3
 8009098:	d3f1      	bcc.n	800907e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f7ff fedf 	bl	8008e6c <_PrintUnsigned>
}
 80090ae:	bf00      	nop
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b098      	sub	sp, #96	; 0x60
 80090bc:	af02      	add	r7, sp, #8
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80090c4:	f3ef 8311 	mrs	r3, BASEPRI
 80090c8:	f04f 0120 	mov.w	r1, #32
 80090cc:	f381 8811 	msr	BASEPRI, r1
 80090d0:	633b      	str	r3, [r7, #48]	; 0x30
 80090d2:	48b7      	ldr	r0, [pc, #732]	; (80093b0 <_VPrintTarget+0x2f8>)
 80090d4:	f7ff fc73 	bl	80089be <_PreparePacket>
 80090d8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80090da:	4bb5      	ldr	r3, [pc, #724]	; (80093b0 <_VPrintTarget+0x2f8>)
 80090dc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80090de:	2300      	movs	r3, #0
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80090e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	3301      	adds	r3, #1
 80090ea:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3301      	adds	r3, #1
 80090fc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80090fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 8183 	beq.w	800940e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8009108:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800910c:	2b25      	cmp	r3, #37	; 0x25
 800910e:	f040 8170 	bne.w	80093f2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8009112:	2300      	movs	r3, #0
 8009114:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8009116:	2301      	movs	r3, #1
 8009118:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8009122:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009126:	3b23      	subs	r3, #35	; 0x23
 8009128:	2b0d      	cmp	r3, #13
 800912a:	d83f      	bhi.n	80091ac <_VPrintTarget+0xf4>
 800912c:	a201      	add	r2, pc, #4	; (adr r2, 8009134 <_VPrintTarget+0x7c>)
 800912e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009132:	bf00      	nop
 8009134:	0800919d 	.word	0x0800919d
 8009138:	080091ad 	.word	0x080091ad
 800913c:	080091ad 	.word	0x080091ad
 8009140:	080091ad 	.word	0x080091ad
 8009144:	080091ad 	.word	0x080091ad
 8009148:	080091ad 	.word	0x080091ad
 800914c:	080091ad 	.word	0x080091ad
 8009150:	080091ad 	.word	0x080091ad
 8009154:	0800918d 	.word	0x0800918d
 8009158:	080091ad 	.word	0x080091ad
 800915c:	0800916d 	.word	0x0800916d
 8009160:	080091ad 	.word	0x080091ad
 8009164:	080091ad 	.word	0x080091ad
 8009168:	0800917d 	.word	0x0800917d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800916c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800916e:	f043 0301 	orr.w	r3, r3, #1
 8009172:	64bb      	str	r3, [r7, #72]	; 0x48
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3301      	adds	r3, #1
 8009178:	60fb      	str	r3, [r7, #12]
 800917a:	e01a      	b.n	80091b2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800917c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800917e:	f043 0302 	orr.w	r3, r3, #2
 8009182:	64bb      	str	r3, [r7, #72]	; 0x48
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3301      	adds	r3, #1
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	e012      	b.n	80091b2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800918c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800918e:	f043 0304 	orr.w	r3, r3, #4
 8009192:	64bb      	str	r3, [r7, #72]	; 0x48
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3301      	adds	r3, #1
 8009198:	60fb      	str	r3, [r7, #12]
 800919a:	e00a      	b.n	80091b2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800919c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800919e:	f043 0308 	orr.w	r3, r3, #8
 80091a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	e002      	b.n	80091b2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80091ac:	2300      	movs	r3, #0
 80091ae:	653b      	str	r3, [r7, #80]	; 0x50
 80091b0:	bf00      	nop
        }
      } while (v);
 80091b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1b0      	bne.n	800911a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80091b8:	2300      	movs	r3, #0
 80091ba:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80091c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091c8:	2b2f      	cmp	r3, #47	; 0x2f
 80091ca:	d912      	bls.n	80091f2 <_VPrintTarget+0x13a>
 80091cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091d0:	2b39      	cmp	r3, #57	; 0x39
 80091d2:	d80e      	bhi.n	80091f2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	3301      	adds	r3, #1
 80091d8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80091da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	461a      	mov	r2, r3
 80091e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091ea:	4413      	add	r3, r2
 80091ec:	3b30      	subs	r3, #48	; 0x30
 80091ee:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80091f0:	e7e4      	b.n	80091bc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80091f2:	2300      	movs	r3, #0
 80091f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80091fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009202:	2b2e      	cmp	r3, #46	; 0x2e
 8009204:	d11d      	bne.n	8009242 <_VPrintTarget+0x18a>
        sFormat++;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3301      	adds	r3, #1
 800920a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8009214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009218:	2b2f      	cmp	r3, #47	; 0x2f
 800921a:	d912      	bls.n	8009242 <_VPrintTarget+0x18a>
 800921c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009220:	2b39      	cmp	r3, #57	; 0x39
 8009222:	d80e      	bhi.n	8009242 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	3301      	adds	r3, #1
 8009228:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800922a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800922c:	4613      	mov	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	461a      	mov	r2, r3
 8009236:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800923a:	4413      	add	r3, r2
 800923c:	3b30      	subs	r3, #48	; 0x30
 800923e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8009240:	e7e4      	b.n	800920c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800924a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800924e:	2b6c      	cmp	r3, #108	; 0x6c
 8009250:	d003      	beq.n	800925a <_VPrintTarget+0x1a2>
 8009252:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009256:	2b68      	cmp	r3, #104	; 0x68
 8009258:	d107      	bne.n	800926a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3301      	adds	r3, #1
 8009266:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8009268:	e7ef      	b.n	800924a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800926a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800926e:	2b25      	cmp	r3, #37	; 0x25
 8009270:	f000 80b3 	beq.w	80093da <_VPrintTarget+0x322>
 8009274:	2b25      	cmp	r3, #37	; 0x25
 8009276:	f2c0 80b7 	blt.w	80093e8 <_VPrintTarget+0x330>
 800927a:	2b78      	cmp	r3, #120	; 0x78
 800927c:	f300 80b4 	bgt.w	80093e8 <_VPrintTarget+0x330>
 8009280:	2b58      	cmp	r3, #88	; 0x58
 8009282:	f2c0 80b1 	blt.w	80093e8 <_VPrintTarget+0x330>
 8009286:	3b58      	subs	r3, #88	; 0x58
 8009288:	2b20      	cmp	r3, #32
 800928a:	f200 80ad 	bhi.w	80093e8 <_VPrintTarget+0x330>
 800928e:	a201      	add	r2, pc, #4	; (adr r2, 8009294 <_VPrintTarget+0x1dc>)
 8009290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009294:	0800938b 	.word	0x0800938b
 8009298:	080093e9 	.word	0x080093e9
 800929c:	080093e9 	.word	0x080093e9
 80092a0:	080093e9 	.word	0x080093e9
 80092a4:	080093e9 	.word	0x080093e9
 80092a8:	080093e9 	.word	0x080093e9
 80092ac:	080093e9 	.word	0x080093e9
 80092b0:	080093e9 	.word	0x080093e9
 80092b4:	080093e9 	.word	0x080093e9
 80092b8:	080093e9 	.word	0x080093e9
 80092bc:	080093e9 	.word	0x080093e9
 80092c0:	08009319 	.word	0x08009319
 80092c4:	0800933f 	.word	0x0800933f
 80092c8:	080093e9 	.word	0x080093e9
 80092cc:	080093e9 	.word	0x080093e9
 80092d0:	080093e9 	.word	0x080093e9
 80092d4:	080093e9 	.word	0x080093e9
 80092d8:	080093e9 	.word	0x080093e9
 80092dc:	080093e9 	.word	0x080093e9
 80092e0:	080093e9 	.word	0x080093e9
 80092e4:	080093e9 	.word	0x080093e9
 80092e8:	080093e9 	.word	0x080093e9
 80092ec:	080093e9 	.word	0x080093e9
 80092f0:	080093e9 	.word	0x080093e9
 80092f4:	080093b5 	.word	0x080093b5
 80092f8:	080093e9 	.word	0x080093e9
 80092fc:	080093e9 	.word	0x080093e9
 8009300:	080093e9 	.word	0x080093e9
 8009304:	080093e9 	.word	0x080093e9
 8009308:	08009365 	.word	0x08009365
 800930c:	080093e9 	.word	0x080093e9
 8009310:	080093e9 	.word	0x080093e9
 8009314:	0800938b 	.word	0x0800938b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	1d19      	adds	r1, r3, #4
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6011      	str	r1, [r2, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8009326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800932c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8009330:	f107 0314 	add.w	r3, r7, #20
 8009334:	4611      	mov	r1, r2
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff fd1c 	bl	8008d74 <_StoreChar>
        break;
 800933c:	e055      	b.n	80093ea <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	1d19      	adds	r1, r3, #4
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6011      	str	r1, [r2, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800934c:	f107 0014 	add.w	r0, r7, #20
 8009350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935a:	220a      	movs	r2, #10
 800935c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800935e:	f7ff fe1b 	bl	8008f98 <_PrintInt>
        break;
 8009362:	e042      	b.n	80093ea <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	1d19      	adds	r1, r3, #4
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	6011      	str	r1, [r2, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8009372:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009374:	f107 0014 	add.w	r0, r7, #20
 8009378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009382:	220a      	movs	r2, #10
 8009384:	f7ff fd72 	bl	8008e6c <_PrintUnsigned>
        break;
 8009388:	e02f      	b.n	80093ea <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	1d19      	adds	r1, r3, #4
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	6011      	str	r1, [r2, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8009398:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800939a:	f107 0014 	add.w	r0, r7, #20
 800939e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093a8:	2210      	movs	r2, #16
 80093aa:	f7ff fd5f 	bl	8008e6c <_PrintUnsigned>
        break;
 80093ae:	e01c      	b.n	80093ea <_VPrintTarget+0x332>
 80093b0:	2400667c 	.word	0x2400667c
      case 'p':
        v = va_arg(*pParamList, int);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	1d19      	adds	r1, r3, #4
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	6011      	str	r1, [r2, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80093c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093c4:	f107 0014 	add.w	r0, r7, #20
 80093c8:	2300      	movs	r3, #0
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	2308      	movs	r3, #8
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	2308      	movs	r3, #8
 80093d2:	2210      	movs	r2, #16
 80093d4:	f7ff fd4a 	bl	8008e6c <_PrintUnsigned>
        break;
 80093d8:	e007      	b.n	80093ea <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80093da:	f107 0314 	add.w	r3, r7, #20
 80093de:	2125      	movs	r1, #37	; 0x25
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff fcc7 	bl	8008d74 <_StoreChar>
        break;
 80093e6:	e000      	b.n	80093ea <_VPrintTarget+0x332>
      default:
        break;
 80093e8:	bf00      	nop
      }
      sFormat++;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3301      	adds	r3, #1
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	e007      	b.n	8009402 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80093f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80093f6:	f107 0314 	add.w	r3, r7, #20
 80093fa:	4611      	mov	r1, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7ff fcb9 	bl	8008d74 <_StoreChar>
    }
  } while (*sFormat);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f47f ae72 	bne.w	80090f0 <_VPrintTarget+0x38>
 800940c:	e000      	b.n	8009410 <_VPrintTarget+0x358>
      break;
 800940e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	2b00      	cmp	r3, #0
 8009414:	d041      	beq.n	800949a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8009416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	b2d2      	uxtb	r2, r2
 800941c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	643b      	str	r3, [r7, #64]	; 0x40
 8009422:	6a3b      	ldr	r3, [r7, #32]
 8009424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009426:	e00b      	b.n	8009440 <_VPrintTarget+0x388>
 8009428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942a:	b2da      	uxtb	r2, r3
 800942c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800942e:	1c59      	adds	r1, r3, #1
 8009430:	6439      	str	r1, [r7, #64]	; 0x40
 8009432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009436:	b2d2      	uxtb	r2, r2
 8009438:	701a      	strb	r2, [r3, #0]
 800943a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800943c:	09db      	lsrs	r3, r3, #7
 800943e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009442:	2b7f      	cmp	r3, #127	; 0x7f
 8009444:	d8f0      	bhi.n	8009428 <_VPrintTarget+0x370>
 8009446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	643a      	str	r2, [r7, #64]	; 0x40
 800944c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800944e:	b2d2      	uxtb	r2, r2
 8009450:	701a      	strb	r2, [r3, #0]
 8009452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009454:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	63bb      	str	r3, [r7, #56]	; 0x38
 800945a:	2300      	movs	r3, #0
 800945c:	637b      	str	r3, [r7, #52]	; 0x34
 800945e:	e00b      	b.n	8009478 <_VPrintTarget+0x3c0>
 8009460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009462:	b2da      	uxtb	r2, r3
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	1c59      	adds	r1, r3, #1
 8009468:	63b9      	str	r1, [r7, #56]	; 0x38
 800946a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800946e:	b2d2      	uxtb	r2, r2
 8009470:	701a      	strb	r2, [r3, #0]
 8009472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009474:	09db      	lsrs	r3, r3, #7
 8009476:	637b      	str	r3, [r7, #52]	; 0x34
 8009478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947a:	2b7f      	cmp	r3, #127	; 0x7f
 800947c:	d8f0      	bhi.n	8009460 <_VPrintTarget+0x3a8>
 800947e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	63ba      	str	r2, [r7, #56]	; 0x38
 8009484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	69b9      	ldr	r1, [r7, #24]
 8009492:	221a      	movs	r2, #26
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff fb85 	bl	8008ba4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80094a0:	bf00      	nop
 80094a2:	3758      	adds	r7, #88	; 0x58
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af02      	add	r7, sp, #8
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80094b6:	2300      	movs	r3, #0
 80094b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80094bc:	4917      	ldr	r1, [pc, #92]	; (800951c <SEGGER_SYSVIEW_Init+0x74>)
 80094be:	4818      	ldr	r0, [pc, #96]	; (8009520 <SEGGER_SYSVIEW_Init+0x78>)
 80094c0:	f7ff f93c 	bl	800873c <SEGGER_RTT_AllocUpBuffer>
 80094c4:	4603      	mov	r3, r0
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	4b16      	ldr	r3, [pc, #88]	; (8009524 <SEGGER_SYSVIEW_Init+0x7c>)
 80094ca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80094cc:	4b15      	ldr	r3, [pc, #84]	; (8009524 <SEGGER_SYSVIEW_Init+0x7c>)
 80094ce:	785a      	ldrb	r2, [r3, #1]
 80094d0:	4b14      	ldr	r3, [pc, #80]	; (8009524 <SEGGER_SYSVIEW_Init+0x7c>)
 80094d2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80094d4:	4b13      	ldr	r3, [pc, #76]	; (8009524 <SEGGER_SYSVIEW_Init+0x7c>)
 80094d6:	7e1b      	ldrb	r3, [r3, #24]
 80094d8:	4618      	mov	r0, r3
 80094da:	2300      	movs	r3, #0
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	2308      	movs	r3, #8
 80094e0:	4a11      	ldr	r2, [pc, #68]	; (8009528 <SEGGER_SYSVIEW_Init+0x80>)
 80094e2:	490f      	ldr	r1, [pc, #60]	; (8009520 <SEGGER_SYSVIEW_Init+0x78>)
 80094e4:	f7ff f9ae 	bl	8008844 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80094e8:	4b0e      	ldr	r3, [pc, #56]	; (8009524 <SEGGER_SYSVIEW_Init+0x7c>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80094ee:	4b0f      	ldr	r3, [pc, #60]	; (800952c <SEGGER_SYSVIEW_Init+0x84>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a0c      	ldr	r2, [pc, #48]	; (8009524 <SEGGER_SYSVIEW_Init+0x7c>)
 80094f4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80094f6:	4a0b      	ldr	r2, [pc, #44]	; (8009524 <SEGGER_SYSVIEW_Init+0x7c>)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80094fc:	4a09      	ldr	r2, [pc, #36]	; (8009524 <SEGGER_SYSVIEW_Init+0x7c>)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8009502:	4a08      	ldr	r2, [pc, #32]	; (8009524 <SEGGER_SYSVIEW_Init+0x7c>)
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8009508:	4a06      	ldr	r2, [pc, #24]	; (8009524 <SEGGER_SYSVIEW_Init+0x7c>)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800950e:	4b05      	ldr	r3, [pc, #20]	; (8009524 <SEGGER_SYSVIEW_Init+0x7c>)
 8009510:	2200      	movs	r2, #0
 8009512:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8009514:	bf00      	nop
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	24005644 	.word	0x24005644
 8009520:	0800a37c 	.word	0x0800a37c
 8009524:	2400664c 	.word	0x2400664c
 8009528:	24006644 	.word	0x24006644
 800952c:	e0001004 	.word	0xe0001004

08009530 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8009538:	4a04      	ldr	r2, [pc, #16]	; (800954c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6113      	str	r3, [r2, #16]
}
 800953e:	bf00      	nop
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	2400664c 	.word	0x2400664c

08009550 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009558:	f3ef 8311 	mrs	r3, BASEPRI
 800955c:	f04f 0120 	mov.w	r1, #32
 8009560:	f381 8811 	msr	BASEPRI, r1
 8009564:	60fb      	str	r3, [r7, #12]
 8009566:	4808      	ldr	r0, [pc, #32]	; (8009588 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8009568:	f7ff fa29 	bl	80089be <_PreparePacket>
 800956c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	68b9      	ldr	r1, [r7, #8]
 8009572:	68b8      	ldr	r0, [r7, #8]
 8009574:	f7ff fb16 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f383 8811 	msr	BASEPRI, r3
}
 800957e:	bf00      	nop
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	2400667c 	.word	0x2400667c

0800958c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009596:	f3ef 8311 	mrs	r3, BASEPRI
 800959a:	f04f 0120 	mov.w	r1, #32
 800959e:	f381 8811 	msr	BASEPRI, r1
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	4816      	ldr	r0, [pc, #88]	; (8009600 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80095a6:	f7ff fa0a 	bl	80089be <_PreparePacket>
 80095aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	61fb      	str	r3, [r7, #28]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	61bb      	str	r3, [r7, #24]
 80095b8:	e00b      	b.n	80095d2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	1c59      	adds	r1, r3, #1
 80095c2:	61f9      	str	r1, [r7, #28]
 80095c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80095c8:	b2d2      	uxtb	r2, r2
 80095ca:	701a      	strb	r2, [r3, #0]
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	09db      	lsrs	r3, r3, #7
 80095d0:	61bb      	str	r3, [r7, #24]
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	2b7f      	cmp	r3, #127	; 0x7f
 80095d6:	d8f0      	bhi.n	80095ba <SEGGER_SYSVIEW_RecordU32+0x2e>
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	61fa      	str	r2, [r7, #28]
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	b2d2      	uxtb	r2, r2
 80095e2:	701a      	strb	r2, [r3, #0]
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	6938      	ldr	r0, [r7, #16]
 80095ee:	f7ff fad9 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f383 8811 	msr	BASEPRI, r3
}
 80095f8:	bf00      	nop
 80095fa:	3720      	adds	r7, #32
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	2400667c 	.word	0x2400667c

08009604 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009604:	b580      	push	{r7, lr}
 8009606:	b08c      	sub	sp, #48	; 0x30
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009610:	f3ef 8311 	mrs	r3, BASEPRI
 8009614:	f04f 0120 	mov.w	r1, #32
 8009618:	f381 8811 	msr	BASEPRI, r1
 800961c:	61fb      	str	r3, [r7, #28]
 800961e:	4825      	ldr	r0, [pc, #148]	; (80096b4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009620:	f7ff f9cd 	bl	80089be <_PreparePacket>
 8009624:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	62bb      	str	r3, [r7, #40]	; 0x28
 8009632:	e00b      	b.n	800964c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	b2da      	uxtb	r2, r3
 8009638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963a:	1c59      	adds	r1, r3, #1
 800963c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800963e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009642:	b2d2      	uxtb	r2, r2
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009648:	09db      	lsrs	r3, r3, #7
 800964a:	62bb      	str	r3, [r7, #40]	; 0x28
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	2b7f      	cmp	r3, #127	; 0x7f
 8009650:	d8f0      	bhi.n	8009634 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8009652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800965a:	b2d2      	uxtb	r2, r2
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009660:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	623b      	str	r3, [r7, #32]
 800966a:	e00b      	b.n	8009684 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	b2da      	uxtb	r2, r3
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	1c59      	adds	r1, r3, #1
 8009674:	6279      	str	r1, [r7, #36]	; 0x24
 8009676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	701a      	strb	r2, [r3, #0]
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	09db      	lsrs	r3, r3, #7
 8009682:	623b      	str	r3, [r7, #32]
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	2b7f      	cmp	r3, #127	; 0x7f
 8009688:	d8f0      	bhi.n	800966c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	627a      	str	r2, [r7, #36]	; 0x24
 8009690:	6a3a      	ldr	r2, [r7, #32]
 8009692:	b2d2      	uxtb	r2, r2
 8009694:	701a      	strb	r2, [r3, #0]
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	6979      	ldr	r1, [r7, #20]
 800969e:	69b8      	ldr	r0, [r7, #24]
 80096a0:	f7ff fa80 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	f383 8811 	msr	BASEPRI, r3
}
 80096aa:	bf00      	nop
 80096ac:	3730      	adds	r7, #48	; 0x30
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	2400667c 	.word	0x2400667c

080096b8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08c      	sub	sp, #48	; 0x30
 80096bc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80096be:	4b59      	ldr	r3, [pc, #356]	; (8009824 <SEGGER_SYSVIEW_Start+0x16c>)
 80096c0:	2201      	movs	r2, #1
 80096c2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80096c4:	f3ef 8311 	mrs	r3, BASEPRI
 80096c8:	f04f 0120 	mov.w	r1, #32
 80096cc:	f381 8811 	msr	BASEPRI, r1
 80096d0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80096d2:	4b54      	ldr	r3, [pc, #336]	; (8009824 <SEGGER_SYSVIEW_Start+0x16c>)
 80096d4:	785b      	ldrb	r3, [r3, #1]
 80096d6:	220a      	movs	r2, #10
 80096d8:	4953      	ldr	r1, [pc, #332]	; (8009828 <SEGGER_SYSVIEW_Start+0x170>)
 80096da:	4618      	mov	r0, r3
 80096dc:	f7f6 fe00 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80096e6:	f7fe fcfd 	bl	80080e4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80096ea:	200a      	movs	r0, #10
 80096ec:	f7ff ff30 	bl	8009550 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80096f0:	f3ef 8311 	mrs	r3, BASEPRI
 80096f4:	f04f 0120 	mov.w	r1, #32
 80096f8:	f381 8811 	msr	BASEPRI, r1
 80096fc:	60bb      	str	r3, [r7, #8]
 80096fe:	484b      	ldr	r0, [pc, #300]	; (800982c <SEGGER_SYSVIEW_Start+0x174>)
 8009700:	f7ff f95d 	bl	80089be <_PreparePacket>
 8009704:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800970e:	4b45      	ldr	r3, [pc, #276]	; (8009824 <SEGGER_SYSVIEW_Start+0x16c>)
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28
 8009714:	e00b      	b.n	800972e <SEGGER_SYSVIEW_Start+0x76>
 8009716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009718:	b2da      	uxtb	r2, r3
 800971a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971c:	1c59      	adds	r1, r3, #1
 800971e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009720:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009724:	b2d2      	uxtb	r2, r2
 8009726:	701a      	strb	r2, [r3, #0]
 8009728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972a:	09db      	lsrs	r3, r3, #7
 800972c:	62bb      	str	r3, [r7, #40]	; 0x28
 800972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009730:	2b7f      	cmp	r3, #127	; 0x7f
 8009732:	d8f0      	bhi.n	8009716 <SEGGER_SYSVIEW_Start+0x5e>
 8009734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	62fa      	str	r2, [r7, #44]	; 0x2c
 800973a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800973c:	b2d2      	uxtb	r2, r2
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009742:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	627b      	str	r3, [r7, #36]	; 0x24
 8009748:	4b36      	ldr	r3, [pc, #216]	; (8009824 <SEGGER_SYSVIEW_Start+0x16c>)
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	623b      	str	r3, [r7, #32]
 800974e:	e00b      	b.n	8009768 <SEGGER_SYSVIEW_Start+0xb0>
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	b2da      	uxtb	r2, r3
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	1c59      	adds	r1, r3, #1
 8009758:	6279      	str	r1, [r7, #36]	; 0x24
 800975a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800975e:	b2d2      	uxtb	r2, r2
 8009760:	701a      	strb	r2, [r3, #0]
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	09db      	lsrs	r3, r3, #7
 8009766:	623b      	str	r3, [r7, #32]
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	2b7f      	cmp	r3, #127	; 0x7f
 800976c:	d8f0      	bhi.n	8009750 <SEGGER_SYSVIEW_Start+0x98>
 800976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	627a      	str	r2, [r7, #36]	; 0x24
 8009774:	6a3a      	ldr	r2, [r7, #32]
 8009776:	b2d2      	uxtb	r2, r2
 8009778:	701a      	strb	r2, [r3, #0]
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	61fb      	str	r3, [r7, #28]
 8009782:	4b28      	ldr	r3, [pc, #160]	; (8009824 <SEGGER_SYSVIEW_Start+0x16c>)
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	61bb      	str	r3, [r7, #24]
 8009788:	e00b      	b.n	80097a2 <SEGGER_SYSVIEW_Start+0xea>
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	b2da      	uxtb	r2, r3
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	1c59      	adds	r1, r3, #1
 8009792:	61f9      	str	r1, [r7, #28]
 8009794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009798:	b2d2      	uxtb	r2, r2
 800979a:	701a      	strb	r2, [r3, #0]
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	09db      	lsrs	r3, r3, #7
 80097a0:	61bb      	str	r3, [r7, #24]
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	2b7f      	cmp	r3, #127	; 0x7f
 80097a6:	d8f0      	bhi.n	800978a <SEGGER_SYSVIEW_Start+0xd2>
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	61fa      	str	r2, [r7, #28]
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	b2d2      	uxtb	r2, r2
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	617b      	str	r3, [r7, #20]
 80097bc:	2300      	movs	r3, #0
 80097be:	613b      	str	r3, [r7, #16]
 80097c0:	e00b      	b.n	80097da <SEGGER_SYSVIEW_Start+0x122>
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	1c59      	adds	r1, r3, #1
 80097ca:	6179      	str	r1, [r7, #20]
 80097cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80097d0:	b2d2      	uxtb	r2, r2
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	09db      	lsrs	r3, r3, #7
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b7f      	cmp	r3, #127	; 0x7f
 80097de:	d8f0      	bhi.n	80097c2 <SEGGER_SYSVIEW_Start+0x10a>
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	617a      	str	r2, [r7, #20]
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	b2d2      	uxtb	r2, r2
 80097ea:	701a      	strb	r2, [r3, #0]
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80097f0:	2218      	movs	r2, #24
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff f9d5 	bl	8008ba4 <_SendPacket>
      RECORD_END();
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009800:	4b08      	ldr	r3, [pc, #32]	; (8009824 <SEGGER_SYSVIEW_Start+0x16c>)
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <SEGGER_SYSVIEW_Start+0x16c>)
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800980e:	f000 f9eb 	bl	8009be8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009812:	f000 f9b1 	bl	8009b78 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009816:	f000 fb99 	bl	8009f4c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800981a:	bf00      	nop
 800981c:	3730      	adds	r7, #48	; 0x30
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	2400664c 	.word	0x2400664c
 8009828:	0800a3c8 	.word	0x0800a3c8
 800982c:	2400667c 	.word	0x2400667c

08009830 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009836:	f3ef 8311 	mrs	r3, BASEPRI
 800983a:	f04f 0120 	mov.w	r1, #32
 800983e:	f381 8811 	msr	BASEPRI, r1
 8009842:	607b      	str	r3, [r7, #4]
 8009844:	480b      	ldr	r0, [pc, #44]	; (8009874 <SEGGER_SYSVIEW_Stop+0x44>)
 8009846:	f7ff f8ba 	bl	80089be <_PreparePacket>
 800984a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <SEGGER_SYSVIEW_Stop+0x48>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d007      	beq.n	8009864 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009854:	220b      	movs	r2, #11
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6838      	ldr	r0, [r7, #0]
 800985a:	f7ff f9a3 	bl	8008ba4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800985e:	4b06      	ldr	r3, [pc, #24]	; (8009878 <SEGGER_SYSVIEW_Stop+0x48>)
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f383 8811 	msr	BASEPRI, r3
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	2400667c 	.word	0x2400667c
 8009878:	2400664c 	.word	0x2400664c

0800987c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800987c:	b580      	push	{r7, lr}
 800987e:	b08c      	sub	sp, #48	; 0x30
 8009880:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009882:	f3ef 8311 	mrs	r3, BASEPRI
 8009886:	f04f 0120 	mov.w	r1, #32
 800988a:	f381 8811 	msr	BASEPRI, r1
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	4845      	ldr	r0, [pc, #276]	; (80099a8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009892:	f7ff f894 	bl	80089be <_PreparePacket>
 8009896:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098a0:	4b42      	ldr	r3, [pc, #264]	; (80099ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80098a6:	e00b      	b.n	80098c0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ae:	1c59      	adds	r1, r3, #1
 80098b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80098b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	701a      	strb	r2, [r3, #0]
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	09db      	lsrs	r3, r3, #7
 80098be:	62bb      	str	r3, [r7, #40]	; 0x28
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	2b7f      	cmp	r3, #127	; 0x7f
 80098c4:	d8f0      	bhi.n	80098a8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80098c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	627b      	str	r3, [r7, #36]	; 0x24
 80098da:	4b34      	ldr	r3, [pc, #208]	; (80099ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	623b      	str	r3, [r7, #32]
 80098e0:	e00b      	b.n	80098fa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	1c59      	adds	r1, r3, #1
 80098ea:	6279      	str	r1, [r7, #36]	; 0x24
 80098ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098f0:	b2d2      	uxtb	r2, r2
 80098f2:	701a      	strb	r2, [r3, #0]
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	09db      	lsrs	r3, r3, #7
 80098f8:	623b      	str	r3, [r7, #32]
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	2b7f      	cmp	r3, #127	; 0x7f
 80098fe:	d8f0      	bhi.n	80098e2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	627a      	str	r2, [r7, #36]	; 0x24
 8009906:	6a3a      	ldr	r2, [r7, #32]
 8009908:	b2d2      	uxtb	r2, r2
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	61fb      	str	r3, [r7, #28]
 8009914:	4b25      	ldr	r3, [pc, #148]	; (80099ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	e00b      	b.n	8009934 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	b2da      	uxtb	r2, r3
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	1c59      	adds	r1, r3, #1
 8009924:	61f9      	str	r1, [r7, #28]
 8009926:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800992a:	b2d2      	uxtb	r2, r2
 800992c:	701a      	strb	r2, [r3, #0]
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	09db      	lsrs	r3, r3, #7
 8009932:	61bb      	str	r3, [r7, #24]
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	2b7f      	cmp	r3, #127	; 0x7f
 8009938:	d8f0      	bhi.n	800991c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	1c5a      	adds	r2, r3, #1
 800993e:	61fa      	str	r2, [r7, #28]
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	701a      	strb	r2, [r3, #0]
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	617b      	str	r3, [r7, #20]
 800994e:	2300      	movs	r3, #0
 8009950:	613b      	str	r3, [r7, #16]
 8009952:	e00b      	b.n	800996c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	b2da      	uxtb	r2, r3
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	1c59      	adds	r1, r3, #1
 800995c:	6179      	str	r1, [r7, #20]
 800995e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009962:	b2d2      	uxtb	r2, r2
 8009964:	701a      	strb	r2, [r3, #0]
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	09db      	lsrs	r3, r3, #7
 800996a:	613b      	str	r3, [r7, #16]
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	2b7f      	cmp	r3, #127	; 0x7f
 8009970:	d8f0      	bhi.n	8009954 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	1c5a      	adds	r2, r3, #1
 8009976:	617a      	str	r2, [r7, #20]
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009982:	2218      	movs	r2, #24
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	68b8      	ldr	r0, [r7, #8]
 8009988:	f7ff f90c 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009992:	4b06      	ldr	r3, [pc, #24]	; (80099ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800999a:	4b04      	ldr	r3, [pc, #16]	; (80099ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999e:	4798      	blx	r3
  }
}
 80099a0:	bf00      	nop
 80099a2:	3730      	adds	r7, #48	; 0x30
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	2400667c 	.word	0x2400667c
 80099ac:	2400664c 	.word	0x2400664c

080099b0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b092      	sub	sp, #72	; 0x48
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80099b8:	f3ef 8311 	mrs	r3, BASEPRI
 80099bc:	f04f 0120 	mov.w	r1, #32
 80099c0:	f381 8811 	msr	BASEPRI, r1
 80099c4:	617b      	str	r3, [r7, #20]
 80099c6:	486a      	ldr	r0, [pc, #424]	; (8009b70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80099c8:	f7fe fff9 	bl	80089be <_PreparePacket>
 80099cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	647b      	str	r3, [r7, #68]	; 0x44
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	4b66      	ldr	r3, [pc, #408]	; (8009b74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	643b      	str	r3, [r7, #64]	; 0x40
 80099e2:	e00b      	b.n	80099fc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80099e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ea:	1c59      	adds	r1, r3, #1
 80099ec:	6479      	str	r1, [r7, #68]	; 0x44
 80099ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80099f2:	b2d2      	uxtb	r2, r2
 80099f4:	701a      	strb	r2, [r3, #0]
 80099f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099f8:	09db      	lsrs	r3, r3, #7
 80099fa:	643b      	str	r3, [r7, #64]	; 0x40
 80099fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099fe:	2b7f      	cmp	r3, #127	; 0x7f
 8009a00:	d8f0      	bhi.n	80099e4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8009a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	647a      	str	r2, [r7, #68]	; 0x44
 8009a08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a0a:	b2d2      	uxtb	r2, r2
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a1c:	e00b      	b.n	8009a36 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a24:	1c59      	adds	r1, r3, #1
 8009a26:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009a28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a2c:	b2d2      	uxtb	r2, r2
 8009a2e:	701a      	strb	r2, [r3, #0]
 8009a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a32:	09db      	lsrs	r3, r3, #7
 8009a34:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a38:	2b7f      	cmp	r3, #127	; 0x7f
 8009a3a:	d8f0      	bhi.n	8009a1e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8009a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a44:	b2d2      	uxtb	r2, r2
 8009a46:	701a      	strb	r2, [r3, #0]
 8009a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	4619      	mov	r1, r3
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f7fe ff65 	bl	8008924 <_EncodeStr>
 8009a5a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8009a5c:	2209      	movs	r2, #9
 8009a5e:	68f9      	ldr	r1, [r7, #12]
 8009a60:	6938      	ldr	r0, [r7, #16]
 8009a62:	f7ff f89f 	bl	8008ba4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	4b40      	ldr	r3, [pc, #256]	; (8009b74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	633b      	str	r3, [r7, #48]	; 0x30
 8009a7a:	e00b      	b.n	8009a94 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a82:	1c59      	adds	r1, r3, #1
 8009a84:	6379      	str	r1, [r7, #52]	; 0x34
 8009a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a8a:	b2d2      	uxtb	r2, r2
 8009a8c:	701a      	strb	r2, [r3, #0]
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	09db      	lsrs	r3, r3, #7
 8009a92:	633b      	str	r3, [r7, #48]	; 0x30
 8009a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a96:	2b7f      	cmp	r3, #127	; 0x7f
 8009a98:	d8f0      	bhi.n	8009a7c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8009a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	637a      	str	r2, [r7, #52]	; 0x34
 8009aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aa2:	b2d2      	uxtb	r2, r2
 8009aa4:	701a      	strb	r2, [r3, #0]
 8009aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ab4:	e00b      	b.n	8009ace <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	1c59      	adds	r1, r3, #1
 8009abe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009ac0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ac4:	b2d2      	uxtb	r2, r2
 8009ac6:	701a      	strb	r2, [r3, #0]
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	09db      	lsrs	r3, r3, #7
 8009acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8009ad2:	d8f0      	bhi.n	8009ab6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8009ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009adc:	b2d2      	uxtb	r2, r2
 8009ade:	701a      	strb	r2, [r3, #0]
 8009ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	623b      	str	r3, [r7, #32]
 8009aee:	e00b      	b.n	8009b08 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8009af0:	6a3b      	ldr	r3, [r7, #32]
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	1c59      	adds	r1, r3, #1
 8009af8:	6279      	str	r1, [r7, #36]	; 0x24
 8009afa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009afe:	b2d2      	uxtb	r2, r2
 8009b00:	701a      	strb	r2, [r3, #0]
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	09db      	lsrs	r3, r3, #7
 8009b06:	623b      	str	r3, [r7, #32]
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8009b0c:	d8f0      	bhi.n	8009af0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	627a      	str	r2, [r7, #36]	; 0x24
 8009b14:	6a3a      	ldr	r2, [r7, #32]
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	61fb      	str	r3, [r7, #28]
 8009b22:	2300      	movs	r3, #0
 8009b24:	61bb      	str	r3, [r7, #24]
 8009b26:	e00b      	b.n	8009b40 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	1c59      	adds	r1, r3, #1
 8009b30:	61f9      	str	r1, [r7, #28]
 8009b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	09db      	lsrs	r3, r3, #7
 8009b3e:	61bb      	str	r3, [r7, #24]
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	2b7f      	cmp	r3, #127	; 0x7f
 8009b44:	d8f0      	bhi.n	8009b28 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	61fa      	str	r2, [r7, #28]
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	b2d2      	uxtb	r2, r2
 8009b50:	701a      	strb	r2, [r3, #0]
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8009b56:	2215      	movs	r2, #21
 8009b58:	68f9      	ldr	r1, [r7, #12]
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f7ff f822 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	f383 8811 	msr	BASEPRI, r3
}
 8009b66:	bf00      	nop
 8009b68:	3748      	adds	r7, #72	; 0x48
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	2400667c 	.word	0x2400667c
 8009b74:	2400664c 	.word	0x2400664c

08009b78 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8009b7c:	4b07      	ldr	r3, [pc, #28]	; (8009b9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009b7e:	6a1b      	ldr	r3, [r3, #32]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d008      	beq.n	8009b96 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8009b84:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009b86:	6a1b      	ldr	r3, [r3, #32]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8009b8e:	4b03      	ldr	r3, [pc, #12]	; (8009b9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	4798      	blx	r3
  }
}
 8009b96:	bf00      	nop
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	2400664c 	.word	0x2400664c

08009ba0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8009bac:	f04f 0120 	mov.w	r1, #32
 8009bb0:	f381 8811 	msr	BASEPRI, r1
 8009bb4:	617b      	str	r3, [r7, #20]
 8009bb6:	480b      	ldr	r0, [pc, #44]	; (8009be4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8009bb8:	f7fe ff01 	bl	80089be <_PreparePacket>
 8009bbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009bbe:	2280      	movs	r2, #128	; 0x80
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	6938      	ldr	r0, [r7, #16]
 8009bc4:	f7fe feae 	bl	8008924 <_EncodeStr>
 8009bc8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8009bca:	220e      	movs	r2, #14
 8009bcc:	68f9      	ldr	r1, [r7, #12]
 8009bce:	6938      	ldr	r0, [r7, #16]
 8009bd0:	f7fe ffe8 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f383 8811 	msr	BASEPRI, r3
}
 8009bda:	bf00      	nop
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	2400667c 	.word	0x2400667c

08009be8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8009be8:	b590      	push	{r4, r7, lr}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8009bee:	4b15      	ldr	r3, [pc, #84]	; (8009c44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d01a      	beq.n	8009c2c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8009bf6:	4b13      	ldr	r3, [pc, #76]	; (8009c44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d015      	beq.n	8009c2c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8009c00:	4b10      	ldr	r3, [pc, #64]	; (8009c44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009c02:	6a1b      	ldr	r3, [r3, #32]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4798      	blx	r3
 8009c08:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009c0c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8009c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c12:	f04f 0200 	mov.w	r2, #0
 8009c16:	f04f 0300 	mov.w	r3, #0
 8009c1a:	000a      	movs	r2, r1
 8009c1c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009c1e:	4613      	mov	r3, r2
 8009c20:	461a      	mov	r2, r3
 8009c22:	4621      	mov	r1, r4
 8009c24:	200d      	movs	r0, #13
 8009c26:	f7ff fced 	bl	8009604 <SEGGER_SYSVIEW_RecordU32x2>
 8009c2a:	e006      	b.n	8009c3a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8009c2c:	4b06      	ldr	r3, [pc, #24]	; (8009c48 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4619      	mov	r1, r3
 8009c32:	200c      	movs	r0, #12
 8009c34:	f7ff fcaa 	bl	800958c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8009c38:	bf00      	nop
 8009c3a:	bf00      	nop
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd90      	pop	{r4, r7, pc}
 8009c42:	bf00      	nop
 8009c44:	2400664c 	.word	0x2400664c
 8009c48:	e0001004 	.word	0xe0001004

08009c4c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009c52:	f3ef 8311 	mrs	r3, BASEPRI
 8009c56:	f04f 0120 	mov.w	r1, #32
 8009c5a:	f381 8811 	msr	BASEPRI, r1
 8009c5e:	607b      	str	r3, [r7, #4]
 8009c60:	4807      	ldr	r0, [pc, #28]	; (8009c80 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8009c62:	f7fe feac 	bl	80089be <_PreparePacket>
 8009c66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009c68:	2211      	movs	r2, #17
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6838      	ldr	r0, [r7, #0]
 8009c6e:	f7fe ff99 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f383 8811 	msr	BASEPRI, r3
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	2400667c 	.word	0x2400667c

08009c84 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8009c90:	f04f 0120 	mov.w	r1, #32
 8009c94:	f381 8811 	msr	BASEPRI, r1
 8009c98:	617b      	str	r3, [r7, #20]
 8009c9a:	4819      	ldr	r0, [pc, #100]	; (8009d00 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8009c9c:	f7fe fe8f 	bl	80089be <_PreparePacket>
 8009ca0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009ca6:	4b17      	ldr	r3, [pc, #92]	; (8009d04 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	61fb      	str	r3, [r7, #28]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	61bb      	str	r3, [r7, #24]
 8009cb8:	e00b      	b.n	8009cd2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	1c59      	adds	r1, r3, #1
 8009cc2:	61f9      	str	r1, [r7, #28]
 8009cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009cc8:	b2d2      	uxtb	r2, r2
 8009cca:	701a      	strb	r2, [r3, #0]
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	09db      	lsrs	r3, r3, #7
 8009cd0:	61bb      	str	r3, [r7, #24]
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8009cd6:	d8f0      	bhi.n	8009cba <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	61fa      	str	r2, [r7, #28]
 8009cde:	69ba      	ldr	r2, [r7, #24]
 8009ce0:	b2d2      	uxtb	r2, r2
 8009ce2:	701a      	strb	r2, [r3, #0]
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009ce8:	2208      	movs	r2, #8
 8009cea:	68f9      	ldr	r1, [r7, #12]
 8009cec:	6938      	ldr	r0, [r7, #16]
 8009cee:	f7fe ff59 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f383 8811 	msr	BASEPRI, r3
}
 8009cf8:	bf00      	nop
 8009cfa:	3720      	adds	r7, #32
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	2400667c 	.word	0x2400667c
 8009d04:	2400664c 	.word	0x2400664c

08009d08 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009d10:	f3ef 8311 	mrs	r3, BASEPRI
 8009d14:	f04f 0120 	mov.w	r1, #32
 8009d18:	f381 8811 	msr	BASEPRI, r1
 8009d1c:	617b      	str	r3, [r7, #20]
 8009d1e:	4819      	ldr	r0, [pc, #100]	; (8009d84 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8009d20:	f7fe fe4d 	bl	80089be <_PreparePacket>
 8009d24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009d2a:	4b17      	ldr	r3, [pc, #92]	; (8009d88 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	61fb      	str	r3, [r7, #28]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	61bb      	str	r3, [r7, #24]
 8009d3c:	e00b      	b.n	8009d56 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	1c59      	adds	r1, r3, #1
 8009d46:	61f9      	str	r1, [r7, #28]
 8009d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d4c:	b2d2      	uxtb	r2, r2
 8009d4e:	701a      	strb	r2, [r3, #0]
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	09db      	lsrs	r3, r3, #7
 8009d54:	61bb      	str	r3, [r7, #24]
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	2b7f      	cmp	r3, #127	; 0x7f
 8009d5a:	d8f0      	bhi.n	8009d3e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	61fa      	str	r2, [r7, #28]
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	b2d2      	uxtb	r2, r2
 8009d66:	701a      	strb	r2, [r3, #0]
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009d6c:	2204      	movs	r2, #4
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	6938      	ldr	r0, [r7, #16]
 8009d72:	f7fe ff17 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f383 8811 	msr	BASEPRI, r3
}
 8009d7c:	bf00      	nop
 8009d7e:	3720      	adds	r7, #32
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	2400667c 	.word	0x2400667c
 8009d88:	2400664c 	.word	0x2400664c

08009d8c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b088      	sub	sp, #32
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009d94:	f3ef 8311 	mrs	r3, BASEPRI
 8009d98:	f04f 0120 	mov.w	r1, #32
 8009d9c:	f381 8811 	msr	BASEPRI, r1
 8009da0:	617b      	str	r3, [r7, #20]
 8009da2:	4819      	ldr	r0, [pc, #100]	; (8009e08 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009da4:	f7fe fe0b 	bl	80089be <_PreparePacket>
 8009da8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009dae:	4b17      	ldr	r3, [pc, #92]	; (8009e0c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	61fb      	str	r3, [r7, #28]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	61bb      	str	r3, [r7, #24]
 8009dc0:	e00b      	b.n	8009dda <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	1c59      	adds	r1, r3, #1
 8009dca:	61f9      	str	r1, [r7, #28]
 8009dcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009dd0:	b2d2      	uxtb	r2, r2
 8009dd2:	701a      	strb	r2, [r3, #0]
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	09db      	lsrs	r3, r3, #7
 8009dd8:	61bb      	str	r3, [r7, #24]
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8009dde:	d8f0      	bhi.n	8009dc2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	61fa      	str	r2, [r7, #28]
 8009de6:	69ba      	ldr	r2, [r7, #24]
 8009de8:	b2d2      	uxtb	r2, r2
 8009dea:	701a      	strb	r2, [r3, #0]
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009df0:	2206      	movs	r2, #6
 8009df2:	68f9      	ldr	r1, [r7, #12]
 8009df4:	6938      	ldr	r0, [r7, #16]
 8009df6:	f7fe fed5 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	f383 8811 	msr	BASEPRI, r3
}
 8009e00:	bf00      	nop
 8009e02:	3720      	adds	r7, #32
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	2400667c 	.word	0x2400667c
 8009e0c:	2400664c 	.word	0x2400664c

08009e10 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08c      	sub	sp, #48	; 0x30
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8009e1a:	4b3b      	ldr	r3, [pc, #236]	; (8009f08 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d06d      	beq.n	8009efe <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8009e22:	4b39      	ldr	r3, [pc, #228]	; (8009f08 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8009e28:	2300      	movs	r3, #0
 8009e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e2c:	e008      	b.n	8009e40 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8009e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8009e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e40:	79fb      	ldrb	r3, [r7, #7]
 8009e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d3f2      	bcc.n	8009e2e <SEGGER_SYSVIEW_SendModule+0x1e>
 8009e48:	e000      	b.n	8009e4c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009e4a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d055      	beq.n	8009efe <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009e52:	f3ef 8311 	mrs	r3, BASEPRI
 8009e56:	f04f 0120 	mov.w	r1, #32
 8009e5a:	f381 8811 	msr	BASEPRI, r1
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	482a      	ldr	r0, [pc, #168]	; (8009f0c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8009e62:	f7fe fdac 	bl	80089be <_PreparePacket>
 8009e66:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8009e70:	79fb      	ldrb	r3, [r7, #7]
 8009e72:	623b      	str	r3, [r7, #32]
 8009e74:	e00b      	b.n	8009e8e <SEGGER_SYSVIEW_SendModule+0x7e>
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	1c59      	adds	r1, r3, #1
 8009e7e:	6279      	str	r1, [r7, #36]	; 0x24
 8009e80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e84:	b2d2      	uxtb	r2, r2
 8009e86:	701a      	strb	r2, [r3, #0]
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	09db      	lsrs	r3, r3, #7
 8009e8c:	623b      	str	r3, [r7, #32]
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	2b7f      	cmp	r3, #127	; 0x7f
 8009e92:	d8f0      	bhi.n	8009e76 <SEGGER_SYSVIEW_SendModule+0x66>
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	1c5a      	adds	r2, r3, #1
 8009e98:	627a      	str	r2, [r7, #36]	; 0x24
 8009e9a:	6a3a      	ldr	r2, [r7, #32]
 8009e9c:	b2d2      	uxtb	r2, r2
 8009e9e:	701a      	strb	r2, [r3, #0]
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	61fb      	str	r3, [r7, #28]
 8009ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	61bb      	str	r3, [r7, #24]
 8009eae:	e00b      	b.n	8009ec8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	b2da      	uxtb	r2, r3
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	1c59      	adds	r1, r3, #1
 8009eb8:	61f9      	str	r1, [r7, #28]
 8009eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ebe:	b2d2      	uxtb	r2, r2
 8009ec0:	701a      	strb	r2, [r3, #0]
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	09db      	lsrs	r3, r3, #7
 8009ec6:	61bb      	str	r3, [r7, #24]
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	2b7f      	cmp	r3, #127	; 0x7f
 8009ecc:	d8f0      	bhi.n	8009eb0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	61fa      	str	r2, [r7, #28]
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	b2d2      	uxtb	r2, r2
 8009ed8:	701a      	strb	r2, [r3, #0]
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2280      	movs	r2, #128	; 0x80
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f7fe fd1c 	bl	8008924 <_EncodeStr>
 8009eec:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009eee:	2216      	movs	r2, #22
 8009ef0:	68f9      	ldr	r1, [r7, #12]
 8009ef2:	6938      	ldr	r0, [r7, #16]
 8009ef4:	f7fe fe56 	bl	8008ba4 <_SendPacket>
      RECORD_END();
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8009efe:	bf00      	nop
 8009f00:	3730      	adds	r7, #48	; 0x30
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	24006674 	.word	0x24006674
 8009f0c:	2400667c 	.word	0x2400667c

08009f10 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009f16:	4b0c      	ldr	r3, [pc, #48]	; (8009f48 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00f      	beq.n	8009f3e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8009f1e:	4b0a      	ldr	r3, [pc, #40]	; (8009f48 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1f2      	bne.n	8009f24 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	24006674 	.word	0x24006674

08009f4c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009f52:	f3ef 8311 	mrs	r3, BASEPRI
 8009f56:	f04f 0120 	mov.w	r1, #32
 8009f5a:	f381 8811 	msr	BASEPRI, r1
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	4817      	ldr	r0, [pc, #92]	; (8009fc0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009f62:	f7fe fd2c 	bl	80089be <_PreparePacket>
 8009f66:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	4b14      	ldr	r3, [pc, #80]	; (8009fc4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	613b      	str	r3, [r7, #16]
 8009f76:	e00b      	b.n	8009f90 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	1c59      	adds	r1, r3, #1
 8009f80:	6179      	str	r1, [r7, #20]
 8009f82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	701a      	strb	r2, [r3, #0]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	09db      	lsrs	r3, r3, #7
 8009f8e:	613b      	str	r3, [r7, #16]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2b7f      	cmp	r3, #127	; 0x7f
 8009f94:	d8f0      	bhi.n	8009f78 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	617a      	str	r2, [r7, #20]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	b2d2      	uxtb	r2, r2
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009fa6:	221b      	movs	r2, #27
 8009fa8:	6879      	ldr	r1, [r7, #4]
 8009faa:	68b8      	ldr	r0, [r7, #8]
 8009fac:	f7fe fdfa 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f383 8811 	msr	BASEPRI, r3
}
 8009fb6:	bf00      	nop
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	2400667c 	.word	0x2400667c
 8009fc4:	24006678 	.word	0x24006678

08009fc8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8009fc8:	b40f      	push	{r0, r1, r2, r3}
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8009fd0:	f107 0314 	add.w	r3, r7, #20
 8009fd4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8009fd6:	1d3b      	adds	r3, r7, #4
 8009fd8:	461a      	mov	r2, r3
 8009fda:	2100      	movs	r1, #0
 8009fdc:	6938      	ldr	r0, [r7, #16]
 8009fde:	f7ff f86b 	bl	80090b8 <_VPrintTarget>
  va_end(ParamList);
}
 8009fe2:	bf00      	nop
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fec:	b004      	add	sp, #16
 8009fee:	4770      	bx	lr

08009ff0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08a      	sub	sp, #40	; 0x28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009ff8:	f3ef 8311 	mrs	r3, BASEPRI
 8009ffc:	f04f 0120 	mov.w	r1, #32
 800a000:	f381 8811 	msr	BASEPRI, r1
 800a004:	617b      	str	r3, [r7, #20]
 800a006:	4827      	ldr	r0, [pc, #156]	; (800a0a4 <SEGGER_SYSVIEW_Warn+0xb4>)
 800a008:	f7fe fcd9 	bl	80089be <_PreparePacket>
 800a00c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a00e:	2280      	movs	r2, #128	; 0x80
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	6938      	ldr	r0, [r7, #16]
 800a014:	f7fe fc86 	bl	8008924 <_EncodeStr>
 800a018:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	627b      	str	r3, [r7, #36]	; 0x24
 800a01e:	2301      	movs	r3, #1
 800a020:	623b      	str	r3, [r7, #32]
 800a022:	e00b      	b.n	800a03c <SEGGER_SYSVIEW_Warn+0x4c>
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	b2da      	uxtb	r2, r3
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	1c59      	adds	r1, r3, #1
 800a02c:	6279      	str	r1, [r7, #36]	; 0x24
 800a02e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	701a      	strb	r2, [r3, #0]
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	09db      	lsrs	r3, r3, #7
 800a03a:	623b      	str	r3, [r7, #32]
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	2b7f      	cmp	r3, #127	; 0x7f
 800a040:	d8f0      	bhi.n	800a024 <SEGGER_SYSVIEW_Warn+0x34>
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	627a      	str	r2, [r7, #36]	; 0x24
 800a048:	6a3a      	ldr	r2, [r7, #32]
 800a04a:	b2d2      	uxtb	r2, r2
 800a04c:	701a      	strb	r2, [r3, #0]
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	61fb      	str	r3, [r7, #28]
 800a056:	2300      	movs	r3, #0
 800a058:	61bb      	str	r3, [r7, #24]
 800a05a:	e00b      	b.n	800a074 <SEGGER_SYSVIEW_Warn+0x84>
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	1c59      	adds	r1, r3, #1
 800a064:	61f9      	str	r1, [r7, #28]
 800a066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	701a      	strb	r2, [r3, #0]
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	09db      	lsrs	r3, r3, #7
 800a072:	61bb      	str	r3, [r7, #24]
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	2b7f      	cmp	r3, #127	; 0x7f
 800a078:	d8f0      	bhi.n	800a05c <SEGGER_SYSVIEW_Warn+0x6c>
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	61fa      	str	r2, [r7, #28]
 800a080:	69ba      	ldr	r2, [r7, #24]
 800a082:	b2d2      	uxtb	r2, r2
 800a084:	701a      	strb	r2, [r3, #0]
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a08a:	221a      	movs	r2, #26
 800a08c:	68f9      	ldr	r1, [r7, #12]
 800a08e:	6938      	ldr	r0, [r7, #16]
 800a090:	f7fe fd88 	bl	8008ba4 <_SendPacket>
  RECORD_END();
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f383 8811 	msr	BASEPRI, r3
}
 800a09a:	bf00      	nop
 800a09c:	3728      	adds	r7, #40	; 0x28
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	2400667c 	.word	0x2400667c

0800a0a8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a0ac:	4b13      	ldr	r3, [pc, #76]	; (800a0fc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a0ae:	7e1b      	ldrb	r3, [r3, #24]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4a13      	ldr	r2, [pc, #76]	; (800a100 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	005b      	lsls	r3, r3, #1
 800a0b8:	440b      	add	r3, r1
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	4413      	add	r3, r2
 800a0be:	336c      	adds	r3, #108	; 0x6c
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	4b0e      	ldr	r3, [pc, #56]	; (800a0fc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a0c4:	7e1b      	ldrb	r3, [r3, #24]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	490d      	ldr	r1, [pc, #52]	; (800a100 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	4403      	add	r3, r0
 800a0d0:	00db      	lsls	r3, r3, #3
 800a0d2:	440b      	add	r3, r1
 800a0d4:	3370      	adds	r3, #112	; 0x70
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d00b      	beq.n	800a0f4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a0dc:	4b07      	ldr	r3, [pc, #28]	; (800a0fc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a0de:	789b      	ldrb	r3, [r3, #2]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d107      	bne.n	800a0f4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800a0e4:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800a0ea:	f7fe fc75 	bl	80089d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800a0ee:	4b03      	ldr	r3, [pc, #12]	; (800a0fc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800a0f4:	4b01      	ldr	r3, [pc, #4]	; (800a0fc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	2400664c 	.word	0x2400664c
 800a100:	24006be4 	.word	0x24006be4

0800a104 <__libc_init_array>:
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	4d0d      	ldr	r5, [pc, #52]	; (800a13c <__libc_init_array+0x38>)
 800a108:	4c0d      	ldr	r4, [pc, #52]	; (800a140 <__libc_init_array+0x3c>)
 800a10a:	1b64      	subs	r4, r4, r5
 800a10c:	10a4      	asrs	r4, r4, #2
 800a10e:	2600      	movs	r6, #0
 800a110:	42a6      	cmp	r6, r4
 800a112:	d109      	bne.n	800a128 <__libc_init_array+0x24>
 800a114:	4d0b      	ldr	r5, [pc, #44]	; (800a144 <__libc_init_array+0x40>)
 800a116:	4c0c      	ldr	r4, [pc, #48]	; (800a148 <__libc_init_array+0x44>)
 800a118:	f000 f83c 	bl	800a194 <_init>
 800a11c:	1b64      	subs	r4, r4, r5
 800a11e:	10a4      	asrs	r4, r4, #2
 800a120:	2600      	movs	r6, #0
 800a122:	42a6      	cmp	r6, r4
 800a124:	d105      	bne.n	800a132 <__libc_init_array+0x2e>
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	f855 3b04 	ldr.w	r3, [r5], #4
 800a12c:	4798      	blx	r3
 800a12e:	3601      	adds	r6, #1
 800a130:	e7ee      	b.n	800a110 <__libc_init_array+0xc>
 800a132:	f855 3b04 	ldr.w	r3, [r5], #4
 800a136:	4798      	blx	r3
 800a138:	3601      	adds	r6, #1
 800a13a:	e7f2      	b.n	800a122 <__libc_init_array+0x1e>
 800a13c:	0800a3ec 	.word	0x0800a3ec
 800a140:	0800a3ec 	.word	0x0800a3ec
 800a144:	0800a3ec 	.word	0x0800a3ec
 800a148:	0800a3f0 	.word	0x0800a3f0

0800a14c <memcmp>:
 800a14c:	b530      	push	{r4, r5, lr}
 800a14e:	3901      	subs	r1, #1
 800a150:	2400      	movs	r4, #0
 800a152:	42a2      	cmp	r2, r4
 800a154:	d101      	bne.n	800a15a <memcmp+0xe>
 800a156:	2000      	movs	r0, #0
 800a158:	e005      	b.n	800a166 <memcmp+0x1a>
 800a15a:	5d03      	ldrb	r3, [r0, r4]
 800a15c:	3401      	adds	r4, #1
 800a15e:	5d0d      	ldrb	r5, [r1, r4]
 800a160:	42ab      	cmp	r3, r5
 800a162:	d0f6      	beq.n	800a152 <memcmp+0x6>
 800a164:	1b58      	subs	r0, r3, r5
 800a166:	bd30      	pop	{r4, r5, pc}

0800a168 <memcpy>:
 800a168:	440a      	add	r2, r1
 800a16a:	4291      	cmp	r1, r2
 800a16c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a170:	d100      	bne.n	800a174 <memcpy+0xc>
 800a172:	4770      	bx	lr
 800a174:	b510      	push	{r4, lr}
 800a176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a17a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a17e:	4291      	cmp	r1, r2
 800a180:	d1f9      	bne.n	800a176 <memcpy+0xe>
 800a182:	bd10      	pop	{r4, pc}

0800a184 <memset>:
 800a184:	4402      	add	r2, r0
 800a186:	4603      	mov	r3, r0
 800a188:	4293      	cmp	r3, r2
 800a18a:	d100      	bne.n	800a18e <memset+0xa>
 800a18c:	4770      	bx	lr
 800a18e:	f803 1b01 	strb.w	r1, [r3], #1
 800a192:	e7f9      	b.n	800a188 <memset+0x4>

0800a194 <_init>:
 800a194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a196:	bf00      	nop
 800a198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19a:	bc08      	pop	{r3}
 800a19c:	469e      	mov	lr, r3
 800a19e:	4770      	bx	lr

0800a1a0 <_fini>:
 800a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a2:	bf00      	nop
 800a1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a6:	bc08      	pop	{r3}
 800a1a8:	469e      	mov	lr, r3
 800a1aa:	4770      	bx	lr
