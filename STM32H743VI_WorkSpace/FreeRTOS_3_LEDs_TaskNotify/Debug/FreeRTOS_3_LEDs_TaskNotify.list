
FreeRTOS_3_LEDs_TaskNotify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a930  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800abd0  0800abd0  0001abd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae14  0800ae14  0001ae14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae1c  0800ae1c  0001ae1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ae20  0800ae20  0001ae20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  24000000  0800ae24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006088  24000024  0800ae48  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240060ac  0800ae48  000260ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023cf8  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ea7  00000000  00000000  00043d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d60  00000000  00000000  00047bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001bb8  00000000  00000000  00049958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038c93  00000000  00000000  0004b510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000216b1  00000000  00000000  000841a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a410  00000000  00000000  000a5854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021fc64  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007ef0  00000000  00000000  0021fcb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000024 	.word	0x24000024
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800abb8 	.word	0x0800abb8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000028 	.word	0x24000028
 80002dc:	0800abb8 	.word	0x0800abb8

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	24005240 	.word	0x24005240

08000374 <strlen>:
 8000374:	4603      	mov	r3, r0
 8000376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800037a:	2a00      	cmp	r2, #0
 800037c:	d1fb      	bne.n	8000376 <strlen+0x2>
 800037e:	1a18      	subs	r0, r3, r0
 8000380:	3801      	subs	r0, #1
 8000382:	4770      	bx	lr

08000384 <__aeabi_uldivmod>:
 8000384:	b953      	cbnz	r3, 800039c <__aeabi_uldivmod+0x18>
 8000386:	b94a      	cbnz	r2, 800039c <__aeabi_uldivmod+0x18>
 8000388:	2900      	cmp	r1, #0
 800038a:	bf08      	it	eq
 800038c:	2800      	cmpeq	r0, #0
 800038e:	bf1c      	itt	ne
 8000390:	f04f 31ff 	movne.w	r1, #4294967295
 8000394:	f04f 30ff 	movne.w	r0, #4294967295
 8000398:	f000 b974 	b.w	8000684 <__aeabi_idiv0>
 800039c:	f1ad 0c08 	sub.w	ip, sp, #8
 80003a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a4:	f000 f806 	bl	80003b4 <__udivmoddi4>
 80003a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003b0:	b004      	add	sp, #16
 80003b2:	4770      	bx	lr

080003b4 <__udivmoddi4>:
 80003b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b8:	9d08      	ldr	r5, [sp, #32]
 80003ba:	4604      	mov	r4, r0
 80003bc:	468e      	mov	lr, r1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d14d      	bne.n	800045e <__udivmoddi4+0xaa>
 80003c2:	428a      	cmp	r2, r1
 80003c4:	4694      	mov	ip, r2
 80003c6:	d969      	bls.n	800049c <__udivmoddi4+0xe8>
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	b152      	cbz	r2, 80003e4 <__udivmoddi4+0x30>
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	f1c2 0120 	rsb	r1, r2, #32
 80003d6:	fa20 f101 	lsr.w	r1, r0, r1
 80003da:	fa0c fc02 	lsl.w	ip, ip, r2
 80003de:	ea41 0e03 	orr.w	lr, r1, r3
 80003e2:	4094      	lsls	r4, r2
 80003e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e8:	0c21      	lsrs	r1, r4, #16
 80003ea:	fbbe f6f8 	udiv	r6, lr, r8
 80003ee:	fa1f f78c 	uxth.w	r7, ip
 80003f2:	fb08 e316 	mls	r3, r8, r6, lr
 80003f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003fa:	fb06 f107 	mul.w	r1, r6, r7
 80003fe:	4299      	cmp	r1, r3
 8000400:	d90a      	bls.n	8000418 <__udivmoddi4+0x64>
 8000402:	eb1c 0303 	adds.w	r3, ip, r3
 8000406:	f106 30ff 	add.w	r0, r6, #4294967295
 800040a:	f080 811f 	bcs.w	800064c <__udivmoddi4+0x298>
 800040e:	4299      	cmp	r1, r3
 8000410:	f240 811c 	bls.w	800064c <__udivmoddi4+0x298>
 8000414:	3e02      	subs	r6, #2
 8000416:	4463      	add	r3, ip
 8000418:	1a5b      	subs	r3, r3, r1
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000428:	fb00 f707 	mul.w	r7, r0, r7
 800042c:	42a7      	cmp	r7, r4
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x92>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	f080 810a 	bcs.w	8000650 <__udivmoddi4+0x29c>
 800043c:	42a7      	cmp	r7, r4
 800043e:	f240 8107 	bls.w	8000650 <__udivmoddi4+0x29c>
 8000442:	4464      	add	r4, ip
 8000444:	3802      	subs	r0, #2
 8000446:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044a:	1be4      	subs	r4, r4, r7
 800044c:	2600      	movs	r6, #0
 800044e:	b11d      	cbz	r5, 8000458 <__udivmoddi4+0xa4>
 8000450:	40d4      	lsrs	r4, r2
 8000452:	2300      	movs	r3, #0
 8000454:	e9c5 4300 	strd	r4, r3, [r5]
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	428b      	cmp	r3, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0xc2>
 8000462:	2d00      	cmp	r5, #0
 8000464:	f000 80ef 	beq.w	8000646 <__udivmoddi4+0x292>
 8000468:	2600      	movs	r6, #0
 800046a:	e9c5 0100 	strd	r0, r1, [r5]
 800046e:	4630      	mov	r0, r6
 8000470:	4631      	mov	r1, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	fab3 f683 	clz	r6, r3
 800047a:	2e00      	cmp	r6, #0
 800047c:	d14a      	bne.n	8000514 <__udivmoddi4+0x160>
 800047e:	428b      	cmp	r3, r1
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xd4>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 80f9 	bhi.w	800067a <__udivmoddi4+0x2c6>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb61 0303 	sbc.w	r3, r1, r3
 800048e:	2001      	movs	r0, #1
 8000490:	469e      	mov	lr, r3
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e0      	beq.n	8000458 <__udivmoddi4+0xa4>
 8000496:	e9c5 4e00 	strd	r4, lr, [r5]
 800049a:	e7dd      	b.n	8000458 <__udivmoddi4+0xa4>
 800049c:	b902      	cbnz	r2, 80004a0 <__udivmoddi4+0xec>
 800049e:	deff      	udf	#255	; 0xff
 80004a0:	fab2 f282 	clz	r2, r2
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	f040 8092 	bne.w	80005ce <__udivmoddi4+0x21a>
 80004aa:	eba1 010c 	sub.w	r1, r1, ip
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f fe8c 	uxth.w	lr, ip
 80004b6:	2601      	movs	r6, #1
 80004b8:	0c20      	lsrs	r0, r4, #16
 80004ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80004be:	fb07 1113 	mls	r1, r7, r3, r1
 80004c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c6:	fb0e f003 	mul.w	r0, lr, r3
 80004ca:	4288      	cmp	r0, r1
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x12c>
 80004ce:	eb1c 0101 	adds.w	r1, ip, r1
 80004d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d6:	d202      	bcs.n	80004de <__udivmoddi4+0x12a>
 80004d8:	4288      	cmp	r0, r1
 80004da:	f200 80cb 	bhi.w	8000674 <__udivmoddi4+0x2c0>
 80004de:	4643      	mov	r3, r8
 80004e0:	1a09      	subs	r1, r1, r0
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e8:	fb07 1110 	mls	r1, r7, r0, r1
 80004ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004f0:	fb0e fe00 	mul.w	lr, lr, r0
 80004f4:	45a6      	cmp	lr, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x156>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d202      	bcs.n	8000508 <__udivmoddi4+0x154>
 8000502:	45a6      	cmp	lr, r4
 8000504:	f200 80bb 	bhi.w	800067e <__udivmoddi4+0x2ca>
 8000508:	4608      	mov	r0, r1
 800050a:	eba4 040e 	sub.w	r4, r4, lr
 800050e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x9a>
 8000514:	f1c6 0720 	rsb	r7, r6, #32
 8000518:	40b3      	lsls	r3, r6
 800051a:	fa22 fc07 	lsr.w	ip, r2, r7
 800051e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000522:	fa20 f407 	lsr.w	r4, r0, r7
 8000526:	fa01 f306 	lsl.w	r3, r1, r6
 800052a:	431c      	orrs	r4, r3
 800052c:	40f9      	lsrs	r1, r7
 800052e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000532:	fa00 f306 	lsl.w	r3, r0, r6
 8000536:	fbb1 f8f9 	udiv	r8, r1, r9
 800053a:	0c20      	lsrs	r0, r4, #16
 800053c:	fa1f fe8c 	uxth.w	lr, ip
 8000540:	fb09 1118 	mls	r1, r9, r8, r1
 8000544:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000548:	fb08 f00e 	mul.w	r0, r8, lr
 800054c:	4288      	cmp	r0, r1
 800054e:	fa02 f206 	lsl.w	r2, r2, r6
 8000552:	d90b      	bls.n	800056c <__udivmoddi4+0x1b8>
 8000554:	eb1c 0101 	adds.w	r1, ip, r1
 8000558:	f108 3aff 	add.w	sl, r8, #4294967295
 800055c:	f080 8088 	bcs.w	8000670 <__udivmoddi4+0x2bc>
 8000560:	4288      	cmp	r0, r1
 8000562:	f240 8085 	bls.w	8000670 <__udivmoddi4+0x2bc>
 8000566:	f1a8 0802 	sub.w	r8, r8, #2
 800056a:	4461      	add	r1, ip
 800056c:	1a09      	subs	r1, r1, r0
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb1 f0f9 	udiv	r0, r1, r9
 8000574:	fb09 1110 	mls	r1, r9, r0, r1
 8000578:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800057c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000580:	458e      	cmp	lr, r1
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x1e2>
 8000584:	eb1c 0101 	adds.w	r1, ip, r1
 8000588:	f100 34ff 	add.w	r4, r0, #4294967295
 800058c:	d26c      	bcs.n	8000668 <__udivmoddi4+0x2b4>
 800058e:	458e      	cmp	lr, r1
 8000590:	d96a      	bls.n	8000668 <__udivmoddi4+0x2b4>
 8000592:	3802      	subs	r0, #2
 8000594:	4461      	add	r1, ip
 8000596:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800059a:	fba0 9402 	umull	r9, r4, r0, r2
 800059e:	eba1 010e 	sub.w	r1, r1, lr
 80005a2:	42a1      	cmp	r1, r4
 80005a4:	46c8      	mov	r8, r9
 80005a6:	46a6      	mov	lr, r4
 80005a8:	d356      	bcc.n	8000658 <__udivmoddi4+0x2a4>
 80005aa:	d053      	beq.n	8000654 <__udivmoddi4+0x2a0>
 80005ac:	b15d      	cbz	r5, 80005c6 <__udivmoddi4+0x212>
 80005ae:	ebb3 0208 	subs.w	r2, r3, r8
 80005b2:	eb61 010e 	sbc.w	r1, r1, lr
 80005b6:	fa01 f707 	lsl.w	r7, r1, r7
 80005ba:	fa22 f306 	lsr.w	r3, r2, r6
 80005be:	40f1      	lsrs	r1, r6
 80005c0:	431f      	orrs	r7, r3
 80005c2:	e9c5 7100 	strd	r7, r1, [r5]
 80005c6:	2600      	movs	r6, #0
 80005c8:	4631      	mov	r1, r6
 80005ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	40d8      	lsrs	r0, r3
 80005d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d8:	fa21 f303 	lsr.w	r3, r1, r3
 80005dc:	4091      	lsls	r1, r2
 80005de:	4301      	orrs	r1, r0
 80005e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e4:	fa1f fe8c 	uxth.w	lr, ip
 80005e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80005ec:	fb07 3610 	mls	r6, r7, r0, r3
 80005f0:	0c0b      	lsrs	r3, r1, #16
 80005f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f6:	fb00 f60e 	mul.w	r6, r0, lr
 80005fa:	429e      	cmp	r6, r3
 80005fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000600:	d908      	bls.n	8000614 <__udivmoddi4+0x260>
 8000602:	eb1c 0303 	adds.w	r3, ip, r3
 8000606:	f100 38ff 	add.w	r8, r0, #4294967295
 800060a:	d22f      	bcs.n	800066c <__udivmoddi4+0x2b8>
 800060c:	429e      	cmp	r6, r3
 800060e:	d92d      	bls.n	800066c <__udivmoddi4+0x2b8>
 8000610:	3802      	subs	r0, #2
 8000612:	4463      	add	r3, ip
 8000614:	1b9b      	subs	r3, r3, r6
 8000616:	b289      	uxth	r1, r1
 8000618:	fbb3 f6f7 	udiv	r6, r3, r7
 800061c:	fb07 3316 	mls	r3, r7, r6, r3
 8000620:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000624:	fb06 f30e 	mul.w	r3, r6, lr
 8000628:	428b      	cmp	r3, r1
 800062a:	d908      	bls.n	800063e <__udivmoddi4+0x28a>
 800062c:	eb1c 0101 	adds.w	r1, ip, r1
 8000630:	f106 38ff 	add.w	r8, r6, #4294967295
 8000634:	d216      	bcs.n	8000664 <__udivmoddi4+0x2b0>
 8000636:	428b      	cmp	r3, r1
 8000638:	d914      	bls.n	8000664 <__udivmoddi4+0x2b0>
 800063a:	3e02      	subs	r6, #2
 800063c:	4461      	add	r1, ip
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000644:	e738      	b.n	80004b8 <__udivmoddi4+0x104>
 8000646:	462e      	mov	r6, r5
 8000648:	4628      	mov	r0, r5
 800064a:	e705      	b.n	8000458 <__udivmoddi4+0xa4>
 800064c:	4606      	mov	r6, r0
 800064e:	e6e3      	b.n	8000418 <__udivmoddi4+0x64>
 8000650:	4618      	mov	r0, r3
 8000652:	e6f8      	b.n	8000446 <__udivmoddi4+0x92>
 8000654:	454b      	cmp	r3, r9
 8000656:	d2a9      	bcs.n	80005ac <__udivmoddi4+0x1f8>
 8000658:	ebb9 0802 	subs.w	r8, r9, r2
 800065c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000660:	3801      	subs	r0, #1
 8000662:	e7a3      	b.n	80005ac <__udivmoddi4+0x1f8>
 8000664:	4646      	mov	r6, r8
 8000666:	e7ea      	b.n	800063e <__udivmoddi4+0x28a>
 8000668:	4620      	mov	r0, r4
 800066a:	e794      	b.n	8000596 <__udivmoddi4+0x1e2>
 800066c:	4640      	mov	r0, r8
 800066e:	e7d1      	b.n	8000614 <__udivmoddi4+0x260>
 8000670:	46d0      	mov	r8, sl
 8000672:	e77b      	b.n	800056c <__udivmoddi4+0x1b8>
 8000674:	3b02      	subs	r3, #2
 8000676:	4461      	add	r1, ip
 8000678:	e732      	b.n	80004e0 <__udivmoddi4+0x12c>
 800067a:	4630      	mov	r0, r6
 800067c:	e709      	b.n	8000492 <__udivmoddi4+0xde>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	e742      	b.n	800050a <__udivmoddi4+0x156>

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f103 0208 	add.w	r2, r3, #8
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f103 0208 	add.w	r2, r3, #8
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f103 0208 	add.w	r2, r3, #8
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80006e2:	b480      	push	{r7}
 80006e4:	b085      	sub	sp, #20
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	689a      	ldr	r2, [r3, #8]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800072a:	b480      	push	{r7}
 800072c:	b085      	sub	sp, #20
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000740:	d103      	bne.n	800074a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	e00c      	b.n	8000764 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3308      	adds	r3, #8
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e002      	b.n	8000758 <vListInsert+0x2e>
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	429a      	cmp	r2, r3
 8000762:	d2f6      	bcs.n	8000752 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	601a      	str	r2, [r3, #0]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	6892      	ldr	r2, [r2, #8]
 80007b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	6852      	ldr	r2, [r2, #4]
 80007bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d103      	bne.n	80007d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af04      	add	r7, sp, #16
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	4613      	mov	r3, r2
 80007fe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4618      	mov	r0, r3
 8000806:	f001 f9c7 	bl	8001b98 <pvPortMalloc>
 800080a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00e      	beq.n	8000830 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000812:	205c      	movs	r0, #92	; 0x5c
 8000814:	f001 f9c0 	bl	8001b98 <pvPortMalloc>
 8000818:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d003      	beq.n	8000828 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
 8000826:	e005      	b.n	8000834 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000828:	6978      	ldr	r0, [r7, #20]
 800082a:	f001 fa9b 	bl	8001d64 <vPortFree>
 800082e:	e001      	b.n	8000834 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d013      	beq.n	8000862 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800083a:	88fa      	ldrh	r2, [r7, #6]
 800083c:	2300      	movs	r3, #0
 800083e:	9303      	str	r3, [sp, #12]
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	9302      	str	r3, [sp, #8]
 8000844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f000 f80e 	bl	8000872 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000856:	69f8      	ldr	r0, [r7, #28]
 8000858:	f000 f8a4 	bl	80009a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	e002      	b.n	8000868 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
 8000866:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000868:	69bb      	ldr	r3, [r7, #24]
    }
 800086a:	4618      	mov	r0, r3
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b088      	sub	sp, #32
 8000876:	af00      	add	r7, sp, #0
 8000878:	60f8      	str	r0, [r7, #12]
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000882:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	461a      	mov	r2, r3
 800088a:	21a5      	movs	r1, #165	; 0xa5
 800088c:	f00a f98c 	bl	800aba8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800089a:	440b      	add	r3, r1
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	f023 0307 	bic.w	r3, r3, #7
 80008a8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	f003 0307 	and.w	r3, r3, #7
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00c      	beq.n	80008ce <prvInitialiseNewTask+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b8:	b672      	cpsid	i
 80008ba:	f383 8811 	msr	BASEPRI, r3
 80008be:	f3bf 8f6f 	isb	sy
 80008c2:	f3bf 8f4f 	dsb	sy
 80008c6:	b662      	cpsie	i
 80008c8:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008ca:	bf00      	nop
 80008cc:	e7fe      	b.n	80008cc <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d01f      	beq.n	8000914 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
 80008d8:	e012      	b.n	8000900 <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	4413      	add	r3, r2
 80008e0:	7819      	ldrb	r1, [r3, #0]
 80008e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	3334      	adds	r3, #52	; 0x34
 80008ea:	460a      	mov	r2, r1
 80008ec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	4413      	add	r3, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d006      	beq.n	8000908 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3301      	adds	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	2b0f      	cmp	r3, #15
 8000904:	d9e9      	bls.n	80008da <prvInitialiseNewTask+0x68>
 8000906:	e000      	b.n	800090a <prvInitialiseNewTask+0x98>
            {
                break;
 8000908:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800090a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000912:	e003      	b.n	800091c <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091e:	2b06      	cmp	r3, #6
 8000920:	d901      	bls.n	8000926 <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000922:	2306      	movs	r3, #6
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800092c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800092e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000930:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8000932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000934:	2200      	movs	r2, #0
 8000936:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800093a:	3304      	adds	r3, #4
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fec3 	bl	80006c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000944:	3318      	adds	r3, #24
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff febe 	bl	80006c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000950:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000954:	f1c3 0207 	rsb	r2, r3, #7
 8000958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800095a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800095e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000964:	3354      	adds	r3, #84	; 0x54
 8000966:	2204      	movs	r2, #4
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f00a f91c 	bl	800aba8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000972:	3358      	adds	r3, #88	; 0x58
 8000974:	2201      	movs	r2, #1
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f00a f915 	bl	800aba8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	68f9      	ldr	r1, [r7, #12]
 8000982:	69b8      	ldr	r0, [r7, #24]
 8000984:	f000 fecc 	bl	8001720 <pxPortInitialiseStack>
 8000988:	4602      	mov	r2, r0
 800098a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800098c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800098e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000998:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80009a4:	b5b0      	push	{r4, r5, r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80009ac:	f000 ffc8 	bl	8001940 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80009b0:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <prvAddNewTaskToReadyList+0xe4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	4a34      	ldr	r2, [pc, #208]	; (8000a88 <prvAddNewTaskToReadyList+0xe4>)
 80009b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80009ba:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <prvAddNewTaskToReadyList+0xe8>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d109      	bne.n	80009d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80009c2:	4a32      	ldr	r2, [pc, #200]	; (8000a8c <prvAddNewTaskToReadyList+0xe8>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80009c8:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <prvAddNewTaskToReadyList+0xe4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d110      	bne.n	80009f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80009d0:	f000 fc12 	bl	80011f8 <prvInitialiseTaskLists>
 80009d4:	e00d      	b.n	80009f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80009d6:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <prvAddNewTaskToReadyList+0xec>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d109      	bne.n	80009f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <prvAddNewTaskToReadyList+0xe8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d802      	bhi.n	80009f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80009ec:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <prvAddNewTaskToReadyList+0xe8>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <prvAddNewTaskToReadyList+0xf0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3301      	adds	r3, #1
 80009f8:	4a26      	ldr	r2, [pc, #152]	; (8000a94 <prvAddNewTaskToReadyList+0xf0>)
 80009fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <prvAddNewTaskToReadyList+0xf0>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d016      	beq.n	8000a38 <prvAddNewTaskToReadyList+0x94>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f003 fc07 	bl	8004220 <SEGGER_SYSVIEW_OnTaskCreate>
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	461d      	mov	r5, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	461c      	mov	r4, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	1ae3      	subs	r3, r4, r3
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	462b      	mov	r3, r5
 8000a34:	f001 fb68 	bl	8002108 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 fc74 	bl	8004328 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a44:	2201      	movs	r2, #1
 8000a46:	409a      	lsls	r2, r3
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <prvAddNewTaskToReadyList+0xf4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <prvAddNewTaskToReadyList+0xf4>)
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <prvAddNewTaskToReadyList+0xf8>)
 8000a60:	441a      	add	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3304      	adds	r3, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4610      	mov	r0, r2
 8000a6a:	f7ff fe3a 	bl	80006e2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000a6e:	f000 ff9b 	bl	80019a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <prvAddNewTaskToReadyList+0xec>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <prvAddNewTaskToReadyList+0xe8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bdb0      	pop	{r4, r5, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	24000140 	.word	0x24000140
 8000a8c:	24000040 	.word	0x24000040
 8000a90:	2400014c 	.word	0x2400014c
 8000a94:	2400015c 	.word	0x2400015c
 8000a98:	24000148 	.word	0x24000148
 8000a9c:	24000044 	.word	0x24000044

08000aa0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000aa8:	f000 ff4a 	bl	8001940 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <vTaskDelete+0x18>
 8000ab2:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <vTaskDelete+0x130>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	e000      	b.n	8000aba <vTaskDelete+0x1a>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3304      	adds	r3, #4
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fe6b 	bl	800079c <uxListRemove>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d115      	bne.n	8000af8 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad0:	4940      	ldr	r1, [pc, #256]	; (8000bd4 <vTaskDelete+0x134>)
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	440b      	add	r3, r1
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10a      	bne.n	8000af8 <vTaskDelete+0x58>
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43da      	mvns	r2, r3
 8000aee:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <vTaskDelete+0x138>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4013      	ands	r3, r2
 8000af4:	4a38      	ldr	r2, [pc, #224]	; (8000bd8 <vTaskDelete+0x138>)
 8000af6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d004      	beq.n	8000b0a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3318      	adds	r3, #24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe49 	bl	800079c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <vTaskDelete+0x13c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a32      	ldr	r2, [pc, #200]	; (8000bdc <vTaskDelete+0x13c>)
 8000b12:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <vTaskDelete+0x130>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d118      	bne.n	8000b50 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3304      	adds	r3, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	482e      	ldr	r0, [pc, #184]	; (8000be0 <vTaskDelete+0x140>)
 8000b26:	f7ff fddc 	bl	80006e2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8000b2a:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <vTaskDelete+0x144>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a2c      	ldr	r2, [pc, #176]	; (8000be4 <vTaskDelete+0x144>)
 8000b32:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fc98 	bl	800446c <SEGGER_SYSVIEW_ShrinkId>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2022      	movs	r0, #34	; 0x22
 8000b42:	f002 ff5f 	bl	8003a04 <SEGGER_SYSVIEW_RecordU32>
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fb45 	bl	80021d8 <SYSVIEW_DeleteTask>
 8000b4e:	e016      	b.n	8000b7e <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <vTaskDelete+0x148>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	4a24      	ldr	r2, [pc, #144]	; (8000be8 <vTaskDelete+0x148>)
 8000b58:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fc85 	bl	800446c <SEGGER_SYSVIEW_ShrinkId>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4619      	mov	r1, r3
 8000b66:	2022      	movs	r0, #34	; 0x22
 8000b68:	f002 ff4c 	bl	8003a04 <SEGGER_SYSVIEW_RecordU32>
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 fb32 	bl	80021d8 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f000 fbad 	bl	80012d4 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8000b7a:	f000 fbbb 	bl	80012f4 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8000b7e:	f000 ff13 	bl	80019a8 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <vTaskDelete+0x14c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d01d      	beq.n	8000bc6 <vTaskDelete+0x126>
        {
            if( pxTCB == pxCurrentTCB )
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <vTaskDelete+0x130>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d118      	bne.n	8000bc6 <vTaskDelete+0x126>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <vTaskDelete+0x150>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00c      	beq.n	8000bb6 <vTaskDelete+0x116>
        __asm volatile
 8000b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba0:	b672      	cpsid	i
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 8000ba6:	f3bf 8f6f 	isb	sy
 8000baa:	f3bf 8f4f 	dsb	sy
 8000bae:	b662      	cpsie	i
 8000bb0:	60bb      	str	r3, [r7, #8]
    }
 8000bb2:	bf00      	nop
 8000bb4:	e7fe      	b.n	8000bb4 <vTaskDelete+0x114>
                portYIELD_WITHIN_API();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <vTaskDelete+0x154>)
 8000bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	f3bf 8f4f 	dsb	sy
 8000bc2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	24000040 	.word	0x24000040
 8000bd4:	24000044 	.word	0x24000044
 8000bd8:	24000148 	.word	0x24000148
 8000bdc:	2400015c 	.word	0x2400015c
 8000be0:	24000114 	.word	0x24000114
 8000be4:	24000128 	.word	0x24000128
 8000be8:	24000140 	.word	0x24000140
 8000bec:	2400014c 	.word	0x2400014c
 8000bf0:	24000168 	.word	0x24000168
 8000bf4:	e000ed04 	.word	0xe000ed04

08000bf8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10c      	bne.n	8000c26 <xTaskDelayUntil+0x2e>
        __asm volatile
 8000c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c10:	b672      	cpsid	i
 8000c12:	f383 8811 	msr	BASEPRI, r3
 8000c16:	f3bf 8f6f 	isb	sy
 8000c1a:	f3bf 8f4f 	dsb	sy
 8000c1e:	b662      	cpsie	i
 8000c20:	617b      	str	r3, [r7, #20]
    }
 8000c22:	bf00      	nop
 8000c24:	e7fe      	b.n	8000c24 <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10c      	bne.n	8000c46 <xTaskDelayUntil+0x4e>
        __asm volatile
 8000c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c30:	b672      	cpsid	i
 8000c32:	f383 8811 	msr	BASEPRI, r3
 8000c36:	f3bf 8f6f 	isb	sy
 8000c3a:	f3bf 8f4f 	dsb	sy
 8000c3e:	b662      	cpsie	i
 8000c40:	613b      	str	r3, [r7, #16]
    }
 8000c42:	bf00      	nop
 8000c44:	e7fe      	b.n	8000c44 <xTaskDelayUntil+0x4c>
        configASSERT( uxSchedulerSuspended == 0 );
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <xTaskDelayUntil+0x104>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00c      	beq.n	8000c68 <xTaskDelayUntil+0x70>
        __asm volatile
 8000c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c52:	b672      	cpsid	i
 8000c54:	f383 8811 	msr	BASEPRI, r3
 8000c58:	f3bf 8f6f 	isb	sy
 8000c5c:	f3bf 8f4f 	dsb	sy
 8000c60:	b662      	cpsie	i
 8000c62:	60fb      	str	r3, [r7, #12]
    }
 8000c64:	bf00      	nop
 8000c66:	e7fe      	b.n	8000c66 <xTaskDelayUntil+0x6e>

        vTaskSuspendAll();
 8000c68:	f000 f8e8 	bl	8000e3c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <xTaskDelayUntil+0x108>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6a3a      	ldr	r2, [r7, #32]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d20b      	bcs.n	8000c9e <xTaskDelayUntil+0xa6>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d211      	bcs.n	8000cb4 <xTaskDelayUntil+0xbc>
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d90d      	bls.n	8000cb4 <xTaskDelayUntil+0xbc>
                {
                    xShouldDelay = pdTRUE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c9c:	e00a      	b.n	8000cb4 <xTaskDelayUntil+0xbc>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d303      	bcc.n	8000cb0 <xTaskDelayUntil+0xb8>
 8000ca8:	69fa      	ldr	r2, [r7, #28]
 8000caa:	6a3b      	ldr	r3, [r7, #32]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d901      	bls.n	8000cb4 <xTaskDelayUntil+0xbc>
                {
                    xShouldDelay = pdTRUE;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69fa      	ldr	r2, [r7, #28]
 8000cb8:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d009      	beq.n	8000cd4 <xTaskDelayUntil+0xdc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8000cc0:	2024      	movs	r0, #36	; 0x24
 8000cc2:	f002 fe81 	bl	80039c8 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fcae 	bl	8001630 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8000cd4:	f000 f8c0 	bl	8000e58 <xTaskResumeAll>
 8000cd8:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d107      	bne.n	8000cf0 <xTaskDelayUntil+0xf8>
        {
            portYIELD_WITHIN_API();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <xTaskDelayUntil+0x10c>)
 8000ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	f3bf 8f4f 	dsb	sy
 8000cec:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	24000168 	.word	0x24000168
 8000d00:	24000144 	.word	0x24000144
 8000d04:	e000ed04 	.word	0xe000ed04

08000d08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d01d      	beq.n	8000d56 <vTaskDelay+0x4e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <vTaskDelay+0x6c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00c      	beq.n	8000d3c <vTaskDelay+0x34>
        __asm volatile
 8000d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d26:	b672      	cpsid	i
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	b662      	cpsie	i
 8000d36:	60bb      	str	r3, [r7, #8]
    }
 8000d38:	bf00      	nop
 8000d3a:	e7fe      	b.n	8000d3a <vTaskDelay+0x32>
            vTaskSuspendAll();
 8000d3c:	f000 f87e 	bl	8000e3c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	2023      	movs	r0, #35	; 0x23
 8000d44:	f002 fe5e 	bl	8003a04 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000d48:	2100      	movs	r1, #0
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 fc70 	bl	8001630 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000d50:	f000 f882 	bl	8000e58 <xTaskResumeAll>
 8000d54:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d107      	bne.n	8000d6c <vTaskDelay+0x64>
        {
            portYIELD_WITHIN_API();
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <vTaskDelay+0x70>)
 8000d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	f3bf 8f4f 	dsb	sy
 8000d68:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	24000168 	.word	0x24000168
 8000d78:	e000ed04 	.word	0xe000ed04

08000d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <vTaskStartScheduler+0xa0>)
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	2300      	movs	r3, #0
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	4924      	ldr	r1, [pc, #144]	; (8000e20 <vTaskStartScheduler+0xa4>)
 8000d90:	4824      	ldr	r0, [pc, #144]	; (8000e24 <vTaskStartScheduler+0xa8>)
 8000d92:	f7ff fd2d 	bl	80007f0 <xTaskCreate>
 8000d96:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d126      	bne.n	8000dec <vTaskStartScheduler+0x70>
        __asm volatile
 8000d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da2:	b672      	cpsid	i
 8000da4:	f383 8811 	msr	BASEPRI, r3
 8000da8:	f3bf 8f6f 	isb	sy
 8000dac:	f3bf 8f4f 	dsb	sy
 8000db0:	b662      	cpsie	i
 8000db2:	60bb      	str	r3, [r7, #8]
    }
 8000db4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <vTaskStartScheduler+0xac>)
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <vTaskStartScheduler+0xb0>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <vTaskStartScheduler+0xb4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <vTaskStartScheduler+0xb8>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <vTaskStartScheduler+0xa0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d102      	bne.n	8000ddc <vTaskStartScheduler+0x60>
 8000dd6:	f003 fa07 	bl	80041e8 <SEGGER_SYSVIEW_OnIdle>
 8000dda:	e004      	b.n	8000de6 <vTaskStartScheduler+0x6a>
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <vTaskStartScheduler+0xb8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 fa5f 	bl	80042a4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000de6:	f000 fd2d 	bl	8001844 <xPortStartScheduler>
 8000dea:	e010      	b.n	8000e0e <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df2:	d10c      	bne.n	8000e0e <vTaskStartScheduler+0x92>
        __asm volatile
 8000df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df8:	b672      	cpsid	i
 8000dfa:	f383 8811 	msr	BASEPRI, r3
 8000dfe:	f3bf 8f6f 	isb	sy
 8000e02:	f3bf 8f4f 	dsb	sy
 8000e06:	b662      	cpsie	i
 8000e08:	607b      	str	r3, [r7, #4]
    }
 8000e0a:	bf00      	nop
 8000e0c:	e7fe      	b.n	8000e0c <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <vTaskStartScheduler+0xbc>)
 8000e10:	681b      	ldr	r3, [r3, #0]
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	24000164 	.word	0x24000164
 8000e20:	0800abd0 	.word	0x0800abd0
 8000e24:	080011d5 	.word	0x080011d5
 8000e28:	24000160 	.word	0x24000160
 8000e2c:	2400014c 	.word	0x2400014c
 8000e30:	24000144 	.word	0x24000144
 8000e34:	24000040 	.word	0x24000040
 8000e38:	24000000 	.word	0x24000000

08000e3c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <vTaskSuspendAll+0x18>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <vTaskSuspendAll+0x18>)
 8000e48:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	24000168 	.word	0x24000168

08000e58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000e66:	4b3e      	ldr	r3, [pc, #248]	; (8000f60 <xTaskResumeAll+0x108>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10c      	bne.n	8000e88 <xTaskResumeAll+0x30>
        __asm volatile
 8000e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e72:	b672      	cpsid	i
 8000e74:	f383 8811 	msr	BASEPRI, r3
 8000e78:	f3bf 8f6f 	isb	sy
 8000e7c:	f3bf 8f4f 	dsb	sy
 8000e80:	b662      	cpsie	i
 8000e82:	603b      	str	r3, [r7, #0]
    }
 8000e84:	bf00      	nop
 8000e86:	e7fe      	b.n	8000e86 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000e88:	f000 fd5a 	bl	8001940 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000e8c:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <xTaskResumeAll+0x108>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	4a33      	ldr	r2, [pc, #204]	; (8000f60 <xTaskResumeAll+0x108>)
 8000e94:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e96:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <xTaskResumeAll+0x108>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d159      	bne.n	8000f52 <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000e9e:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <xTaskResumeAll+0x10c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d055      	beq.n	8000f52 <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ea6:	e032      	b.n	8000f0e <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <xTaskResumeAll+0x110>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3318      	adds	r3, #24
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fc71 	bl	800079c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fc6c 	bl	800079c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 fa2e 	bl	8004328 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <xTaskResumeAll+0x114>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <xTaskResumeAll+0x114>)
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <xTaskResumeAll+0x118>)
 8000eec:	441a      	add	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	f7ff fbf4 	bl	80006e2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <xTaskResumeAll+0x11c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d302      	bcc.n	8000f0e <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <xTaskResumeAll+0x120>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <xTaskResumeAll+0x110>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1c8      	bne.n	8000ea8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000f1c:	f000 f9ea 	bl	80012f4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <xTaskResumeAll+0x124>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d010      	beq.n	8000f4e <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000f2c:	f000 f84a 	bl	8000fc4 <xTaskIncrementTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <xTaskResumeAll+0x120>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f1      	bne.n	8000f2c <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <xTaskResumeAll+0x124>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <xTaskResumeAll+0x120>)
 8000f50:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000f52:	f000 fd29 	bl	80019a8 <vPortExitCritical>

    return xAlreadyYielded;
 8000f56:	687b      	ldr	r3, [r7, #4]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	24000168 	.word	0x24000168
 8000f64:	24000140 	.word	0x24000140
 8000f68:	24000100 	.word	0x24000100
 8000f6c:	24000148 	.word	0x24000148
 8000f70:	24000044 	.word	0x24000044
 8000f74:	24000040 	.word	0x24000040
 8000f78:	24000154 	.word	0x24000154
 8000f7c:	24000150 	.word	0x24000150

08000f80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <xTaskGetTickCount+0x1c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	24000144 	.word	0x24000144

08000fa0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000fa6:	f000 fdb3 	bl	8001b10 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <xTaskGetTickCountFromISR+0x20>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000fb4:	683b      	ldr	r3, [r7, #0]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	24000144 	.word	0x24000144

08000fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000fce:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <xTaskIncrementTick+0x114>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d175      	bne.n	80010c2 <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000fd6:	4b41      	ldr	r3, [pc, #260]	; (80010dc <xTaskIncrementTick+0x118>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000fde:	4a3f      	ldr	r2, [pc, #252]	; (80010dc <xTaskIncrementTick+0x118>)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d122      	bne.n	8001030 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <xTaskIncrementTick+0x11c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00c      	beq.n	800100e <xTaskIncrementTick+0x4a>
        __asm volatile
 8000ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff8:	b672      	cpsid	i
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	b662      	cpsie	i
 8001008:	603b      	str	r3, [r7, #0]
    }
 800100a:	bf00      	nop
 800100c:	e7fe      	b.n	800100c <xTaskIncrementTick+0x48>
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <xTaskIncrementTick+0x11c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <xTaskIncrementTick+0x120>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a31      	ldr	r2, [pc, #196]	; (80010e0 <xTaskIncrementTick+0x11c>)
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <xTaskIncrementTick+0x120>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <xTaskIncrementTick+0x124>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a2f      	ldr	r2, [pc, #188]	; (80010e8 <xTaskIncrementTick+0x124>)
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	f000 f962 	bl	80012f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001030:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <xTaskIncrementTick+0x128>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	429a      	cmp	r2, r3
 8001038:	d348      	bcc.n	80010cc <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <xTaskIncrementTick+0x11c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <xTaskIncrementTick+0x128>)
 8001046:	f04f 32ff 	mov.w	r2, #4294967295
 800104a:	601a      	str	r2, [r3, #0]
                    break;
 800104c:	e03e      	b.n	80010cc <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800104e:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <xTaskIncrementTick+0x11c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d203      	bcs.n	800106e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001066:	4a21      	ldr	r2, [pc, #132]	; (80010ec <xTaskIncrementTick+0x128>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800106c:	e02e      	b.n	80010cc <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	3304      	adds	r3, #4
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fb92 	bl	800079c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	3318      	adds	r3, #24
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fb89 	bl	800079c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	4618      	mov	r0, r3
 800108e:	f003 f94b 	bl	8004328 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001096:	2201      	movs	r2, #1
 8001098:	409a      	lsls	r2, r3
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <xTaskIncrementTick+0x12c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4313      	orrs	r3, r2
 80010a0:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <xTaskIncrementTick+0x12c>)
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <xTaskIncrementTick+0x130>)
 80010b2:	441a      	add	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	3304      	adds	r3, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4610      	mov	r0, r2
 80010bc:	f7ff fb11 	bl	80006e2 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010c0:	e7bb      	b.n	800103a <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <xTaskIncrementTick+0x134>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <xTaskIncrementTick+0x134>)
 80010ca:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80010cc:	697b      	ldr	r3, [r7, #20]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	24000168 	.word	0x24000168
 80010dc:	24000144 	.word	0x24000144
 80010e0:	240000f8 	.word	0x240000f8
 80010e4:	240000fc 	.word	0x240000fc
 80010e8:	24000158 	.word	0x24000158
 80010ec:	24000160 	.word	0x24000160
 80010f0:	24000148 	.word	0x24000148
 80010f4:	24000044 	.word	0x24000044
 80010f8:	24000150 	.word	0x24000150

080010fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001102:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <vTaskSwitchContext+0xc0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <vTaskSwitchContext+0xc4>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001110:	e04f      	b.n	80011b2 <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <vTaskSwitchContext+0xc4>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001118:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <vTaskSwitchContext+0xc8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	f1c3 031f 	rsb	r3, r3, #31
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	4926      	ldr	r1, [pc, #152]	; (80011c8 <vTaskSwitchContext+0xcc>)
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10c      	bne.n	800115c <vTaskSwitchContext+0x60>
        __asm volatile
 8001142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001146:	b672      	cpsid	i
 8001148:	f383 8811 	msr	BASEPRI, r3
 800114c:	f3bf 8f6f 	isb	sy
 8001150:	f3bf 8f4f 	dsb	sy
 8001154:	b662      	cpsie	i
 8001156:	607b      	str	r3, [r7, #4]
    }
 8001158:	bf00      	nop
 800115a:	e7fe      	b.n	800115a <vTaskSwitchContext+0x5e>
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4a18      	ldr	r2, [pc, #96]	; (80011c8 <vTaskSwitchContext+0xcc>)
 8001168:	4413      	add	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	3308      	adds	r3, #8
 800117e:	429a      	cmp	r2, r3
 8001180:	d104      	bne.n	800118c <vTaskSwitchContext+0x90>
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <vTaskSwitchContext+0xd0>)
 8001194:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <vTaskSwitchContext+0xd0>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <vTaskSwitchContext+0xd4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d102      	bne.n	80011a8 <vTaskSwitchContext+0xac>
 80011a2:	f003 f821 	bl	80041e8 <SEGGER_SYSVIEW_OnIdle>
}
 80011a6:	e004      	b.n	80011b2 <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <vTaskSwitchContext+0xd0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f879 	bl	80042a4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	24000168 	.word	0x24000168
 80011c0:	24000154 	.word	0x24000154
 80011c4:	24000148 	.word	0x24000148
 80011c8:	24000044 	.word	0x24000044
 80011cc:	24000040 	.word	0x24000040
 80011d0:	24000164 	.word	0x24000164

080011d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80011dc:	f000 f84c 	bl	8001278 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <prvIdleTask+0x20>)
 80011e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	f3bf 8f4f 	dsb	sy
 80011ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80011f0:	e7f4      	b.n	80011dc <prvIdleTask+0x8>
 80011f2:	bf00      	nop
 80011f4:	e000ed04 	.word	0xe000ed04

080011f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	e00c      	b.n	800121e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <prvInitialiseTaskLists+0x60>)
 8001210:	4413      	add	r3, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fa38 	bl	8000688 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3301      	adds	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b06      	cmp	r3, #6
 8001222:	d9ef      	bls.n	8001204 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <prvInitialiseTaskLists+0x64>)
 8001226:	f7ff fa2f 	bl	8000688 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <prvInitialiseTaskLists+0x68>)
 800122c:	f7ff fa2c 	bl	8000688 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <prvInitialiseTaskLists+0x6c>)
 8001232:	f7ff fa29 	bl	8000688 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <prvInitialiseTaskLists+0x70>)
 8001238:	f7ff fa26 	bl	8000688 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <prvInitialiseTaskLists+0x74>)
 800123e:	f7ff fa23 	bl	8000688 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <prvInitialiseTaskLists+0x78>)
 8001244:	4a05      	ldr	r2, [pc, #20]	; (800125c <prvInitialiseTaskLists+0x64>)
 8001246:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <prvInitialiseTaskLists+0x7c>)
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <prvInitialiseTaskLists+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	24000044 	.word	0x24000044
 800125c:	240000d0 	.word	0x240000d0
 8001260:	240000e4 	.word	0x240000e4
 8001264:	24000100 	.word	0x24000100
 8001268:	24000114 	.word	0x24000114
 800126c:	2400012c 	.word	0x2400012c
 8001270:	240000f8 	.word	0x240000f8
 8001274:	240000fc 	.word	0x240000fc

08001278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800127e:	e019      	b.n	80012b4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001280:	f000 fb5e 	bl	8001940 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <prvCheckTasksWaitingTermination+0x50>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3304      	adds	r3, #4
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fa83 	bl	800079c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <prvCheckTasksWaitingTermination+0x54>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3b01      	subs	r3, #1
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <prvCheckTasksWaitingTermination+0x54>)
 800129e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <prvCheckTasksWaitingTermination+0x58>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <prvCheckTasksWaitingTermination+0x58>)
 80012a8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80012aa:	f000 fb7d 	bl	80019a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f810 	bl	80012d4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <prvCheckTasksWaitingTermination+0x58>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1e1      	bne.n	8001280 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	24000114 	.word	0x24000114
 80012cc:	24000140 	.word	0x24000140
 80012d0:	24000128 	.word	0x24000128

080012d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fd3f 	bl	8001d64 <vPortFree>
                vPortFree( pxTCB );
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fd3c 	bl	8001d64 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <prvResetNextTaskUnblockTime+0x30>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d104      	bne.n	800130c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <prvResetNextTaskUnblockTime+0x34>)
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800130a:	e005      	b.n	8001318 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <prvResetNextTaskUnblockTime+0x30>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <prvResetNextTaskUnblockTime+0x34>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	240000f8 	.word	0x240000f8
 8001328:	24000160 	.word	0x24000160

0800132c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af02      	add	r7, sp, #8
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00c      	beq.n	800135a <xTaskGenericNotifyWait+0x2e>
        __asm volatile
 8001340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001344:	b672      	cpsid	i
 8001346:	f383 8811 	msr	BASEPRI, r3
 800134a:	f3bf 8f6f 	isb	sy
 800134e:	f3bf 8f4f 	dsb	sy
 8001352:	b662      	cpsie	i
 8001354:	613b      	str	r3, [r7, #16]
    }
 8001356:	bf00      	nop
 8001358:	e7fe      	b.n	8001358 <xTaskGenericNotifyWait+0x2c>

        taskENTER_CRITICAL();
 800135a:	f000 faf1 	bl	8001940 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800135e:	4b39      	ldr	r3, [pc, #228]	; (8001444 <xTaskGenericNotifyWait+0x118>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	3358      	adds	r3, #88	; 0x58
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d024      	beq.n	80013ba <xTaskGenericNotifyWait+0x8e>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001370:	4b34      	ldr	r3, [pc, #208]	; (8001444 <xTaskGenericNotifyWait+0x118>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3314      	adds	r3, #20
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	6859      	ldr	r1, [r3, #4]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	43db      	mvns	r3, r3
 8001382:	4019      	ands	r1, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3314      	adds	r3, #20
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <xTaskGenericNotifyWait+0x118>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	3358      	adds	r3, #88	; 0x58
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <xTaskGenericNotifyWait+0x8e>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80013a2:	2101      	movs	r1, #1
 80013a4:	6a38      	ldr	r0, [r7, #32]
 80013a6:	f000 f943 	bl	8001630 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80013aa:	4b27      	ldr	r3, [pc, #156]	; (8001448 <xTaskGenericNotifyWait+0x11c>)
 80013ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	f3bf 8f4f 	dsb	sy
 80013b6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80013ba:	f000 faf5 	bl	80019a8 <vPortExitCritical>

        taskENTER_CRITICAL();
 80013be:	f000 fabf 	bl	8001940 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	4613      	mov	r3, r2
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	2040      	movs	r0, #64	; 0x40
 80013d0:	f002 fbae 	bl	8003b30 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d008      	beq.n	80013ec <xTaskGenericNotifyWait+0xc0>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <xTaskGenericNotifyWait+0x118>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3314      	adds	r3, #20
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <xTaskGenericNotifyWait+0x118>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	3358      	adds	r3, #88	; 0x58
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d002      	beq.n	8001404 <xTaskGenericNotifyWait+0xd8>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	e010      	b.n	8001426 <xTaskGenericNotifyWait+0xfa>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <xTaskGenericNotifyWait+0x118>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3314      	adds	r3, #20
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	6859      	ldr	r1, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	43db      	mvns	r3, r3
 8001416:	4019      	ands	r1, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3314      	adds	r3, #20
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8001422:	2301      	movs	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <xTaskGenericNotifyWait+0x118>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	3358      	adds	r3, #88	; 0x58
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001434:	f000 fab8 	bl	80019a8 <vPortExitCritical>

        return xReturn;
 8001438:	697b      	ldr	r3, [r7, #20]
    }
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	24000040 	.word	0x24000040
 8001448:	e000ed04 	.word	0xe000ed04

0800144c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af02      	add	r7, sp, #8
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800145a:	2301      	movs	r3, #1
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00c      	beq.n	800147e <xTaskGenericNotify+0x32>
        __asm volatile
 8001464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001468:	b672      	cpsid	i
 800146a:	f383 8811 	msr	BASEPRI, r3
 800146e:	f3bf 8f6f 	isb	sy
 8001472:	f3bf 8f4f 	dsb	sy
 8001476:	b662      	cpsie	i
 8001478:	623b      	str	r3, [r7, #32]
    }
 800147a:	bf00      	nop
 800147c:	e7fe      	b.n	800147c <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10c      	bne.n	800149e <xTaskGenericNotify+0x52>
        __asm volatile
 8001484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001488:	b672      	cpsid	i
 800148a:	f383 8811 	msr	BASEPRI, r3
 800148e:	f3bf 8f6f 	isb	sy
 8001492:	f3bf 8f4f 	dsb	sy
 8001496:	b662      	cpsie	i
 8001498:	61fb      	str	r3, [r7, #28]
    }
 800149a:	bf00      	nop
 800149c:	e7fe      	b.n	800149c <xTaskGenericNotify+0x50>
        pxTCB = xTaskToNotify;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80014a2:	f000 fa4d 	bl	8001940 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80014a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <xTaskGenericNotify+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80014ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3314      	adds	r3, #20
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ba:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80014bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	4413      	add	r3, r2
 80014c2:	3358      	adds	r3, #88	; 0x58
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80014ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	3358      	adds	r3, #88	; 0x58
 80014d2:	2202      	movs	r2, #2
 80014d4:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d841      	bhi.n	8001560 <xTaskGenericNotify+0x114>
 80014dc:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <xTaskGenericNotify+0x98>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	08001583 	.word	0x08001583
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	08001517 	.word	0x08001517
 80014f0:	08001533 	.word	0x08001533
 80014f4:	08001543 	.word	0x08001543
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80014f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3314      	adds	r3, #20
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	431a      	orrs	r2, r3
 8001508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3314      	adds	r3, #20
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	605a      	str	r2, [r3, #4]
                    break;
 8001514:	e038      	b.n	8001588 <xTaskGenericNotify+0x13c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	3314      	adds	r3, #20
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3314      	adds	r3, #20
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	605a      	str	r2, [r3, #4]
                    break;
 8001530:	e02a      	b.n	8001588 <xTaskGenericNotify+0x13c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3314      	adds	r3, #20
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	605a      	str	r2, [r3, #4]
                    break;
 8001540:	e022      	b.n	8001588 <xTaskGenericNotify+0x13c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001546:	2b02      	cmp	r3, #2
 8001548:	d007      	beq.n	800155a <xTaskGenericNotify+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800154a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	3314      	adds	r3, #20
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001558:	e016      	b.n	8001588 <xTaskGenericNotify+0x13c>
                        xReturn = pdFAIL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800155e:	e013      	b.n	8001588 <xTaskGenericNotify+0x13c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <xTaskGenericNotify+0x1d4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00e      	beq.n	8001586 <xTaskGenericNotify+0x13a>
        __asm volatile
 8001568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800156c:	b672      	cpsid	i
 800156e:	f383 8811 	msr	BASEPRI, r3
 8001572:	f3bf 8f6f 	isb	sy
 8001576:	f3bf 8f4f 	dsb	sy
 800157a:	b662      	cpsie	i
 800157c:	61bb      	str	r3, [r7, #24]
    }
 800157e:	bf00      	nop
 8001580:	e7fe      	b.n	8001580 <xTaskGenericNotify+0x134>
                    break;
 8001582:	bf00      	nop
 8001584:	e000      	b.n	8001588 <xTaskGenericNotify+0x13c>

                    break;
 8001586:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8001588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158a:	4618      	mov	r0, r3
 800158c:	f002 ff6e 	bl	800446c <SEGGER_SYSVIEW_ShrinkId>
 8001590:	4601      	mov	r1, r0
 8001592:	78fa      	ldrb	r2, [r7, #3]
 8001594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4613      	mov	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	203e      	movs	r0, #62	; 0x3e
 800159e:	f002 fac7 	bl	8003b30 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80015a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d132      	bne.n	8001610 <xTaskGenericNotify+0x1c4>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	3304      	adds	r3, #4
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f8f4 	bl	800079c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80015b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 feb6 	bl	8004328 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	2201      	movs	r2, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <xTaskGenericNotify+0x1d8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	4a16      	ldr	r2, [pc, #88]	; (8001624 <xTaskGenericNotify+0x1d8>)
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <xTaskGenericNotify+0x1dc>)
 80015dc:	441a      	add	r2, r3
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	3304      	adds	r3, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4610      	mov	r0, r2
 80015e6:	f7ff f87c 	bl	80006e2 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80015ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00c      	beq.n	800160c <xTaskGenericNotify+0x1c0>
        __asm volatile
 80015f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f6:	b672      	cpsid	i
 80015f8:	f383 8811 	msr	BASEPRI, r3
 80015fc:	f3bf 8f6f 	isb	sy
 8001600:	f3bf 8f4f 	dsb	sy
 8001604:	b662      	cpsie	i
 8001606:	617b      	str	r3, [r7, #20]
    }
 8001608:	bf00      	nop
 800160a:	e7fe      	b.n	800160a <xTaskGenericNotify+0x1be>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <xTaskGenericNotify+0x1e0>)
 800160e:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001610:	f000 f9ca 	bl	80019a8 <vPortExitCritical>

        return xReturn;
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8001616:	4618      	mov	r0, r3
 8001618:	3730      	adds	r7, #48	; 0x30
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	24000144 	.word	0x24000144
 8001624:	24000148 	.word	0x24000148
 8001628:	24000044 	.word	0x24000044
 800162c:	24000040 	.word	0x24000040

08001630 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <prvAddCurrentTaskToDelayedList+0xd4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3304      	adds	r3, #4
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f8a8 	bl	800079c <uxListRemove>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10b      	bne.n	800166a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	2201      	movs	r2, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <prvAddCurrentTaskToDelayedList+0xdc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4013      	ands	r3, r2
 8001666:	4a29      	ldr	r2, [pc, #164]	; (800170c <prvAddCurrentTaskToDelayedList+0xdc>)
 8001668:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d110      	bne.n	8001694 <prvAddCurrentTaskToDelayedList+0x64>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00d      	beq.n	8001694 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001678:	4b23      	ldr	r3, [pc, #140]	; (8001708 <prvAddCurrentTaskToDelayedList+0xd8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	211b      	movs	r1, #27
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fe94 	bl	80043ac <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001684:	4b20      	ldr	r3, [pc, #128]	; (8001708 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3304      	adds	r3, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4820      	ldr	r0, [pc, #128]	; (8001710 <prvAddCurrentTaskToDelayedList+0xe0>)
 800168e:	f7ff f828 	bl	80006e2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001692:	e032      	b.n	80016fa <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <prvAddCurrentTaskToDelayedList+0xd8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d20f      	bcs.n	80016cc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <prvAddCurrentTaskToDelayedList+0xd8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2104      	movs	r1, #4
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fe7a 	bl	80043ac <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <prvAddCurrentTaskToDelayedList+0xe4>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <prvAddCurrentTaskToDelayedList+0xd8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3304      	adds	r3, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f7ff f830 	bl	800072a <vListInsert>
}
 80016ca:	e016      	b.n	80016fa <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <prvAddCurrentTaskToDelayedList+0xd8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2104      	movs	r1, #4
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 fe6a 	bl	80043ac <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <prvAddCurrentTaskToDelayedList+0xd8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3304      	adds	r3, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f7ff f820 	bl	800072a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <prvAddCurrentTaskToDelayedList+0xec>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d202      	bcs.n	80016fa <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80016f4:	4a09      	ldr	r2, [pc, #36]	; (800171c <prvAddCurrentTaskToDelayedList+0xec>)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	24000144 	.word	0x24000144
 8001708:	24000040 	.word	0x24000040
 800170c:	24000148 	.word	0x24000148
 8001710:	2400012c 	.word	0x2400012c
 8001714:	240000fc 	.word	0x240000fc
 8001718:	240000f8 	.word	0x240000f8
 800171c:	24000160 	.word	0x24000160

08001720 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3b04      	subs	r3, #4
 8001730:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001738:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3b04      	subs	r3, #4
 800173e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f023 0201 	bic.w	r2, r3, #1
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3b04      	subs	r3, #4
 800174e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <pxPortInitialiseStack+0x64>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3b14      	subs	r3, #20
 800175a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3b04      	subs	r3, #4
 8001766:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f06f 0202 	mvn.w	r2, #2
 800176e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3b20      	subs	r3, #32
 8001774:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	08001789 	.word	0x08001789

08001788 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <prvTaskExitError+0x5c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d00c      	beq.n	80017b6 <prvTaskExitError+0x2e>
        __asm volatile
 800179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a0:	b672      	cpsid	i
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	b662      	cpsie	i
 80017b0:	60fb      	str	r3, [r7, #12]
    }
 80017b2:	bf00      	nop
 80017b4:	e7fe      	b.n	80017b4 <prvTaskExitError+0x2c>
        __asm volatile
 80017b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ba:	b672      	cpsid	i
 80017bc:	f383 8811 	msr	BASEPRI, r3
 80017c0:	f3bf 8f6f 	isb	sy
 80017c4:	f3bf 8f4f 	dsb	sy
 80017c8:	b662      	cpsie	i
 80017ca:	60bb      	str	r3, [r7, #8]
    }
 80017cc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80017ce:	bf00      	nop
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0fc      	beq.n	80017d0 <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	24000004 	.word	0x24000004
	...

080017f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <pxCurrentTCBConst2>)
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	6808      	ldr	r0, [r1, #0]
 80017f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017fa:	f380 8809 	msr	PSP, r0
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f04f 0000 	mov.w	r0, #0
 8001806:	f380 8811 	msr	BASEPRI, r0
 800180a:	4770      	bx	lr
 800180c:	f3af 8000 	nop.w

08001810 <pxCurrentTCBConst2>:
 8001810:	24000040 	.word	0x24000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop

08001818 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001818:	4808      	ldr	r0, [pc, #32]	; (800183c <prvPortStartFirstTask+0x24>)
 800181a:	6800      	ldr	r0, [r0, #0]
 800181c:	6800      	ldr	r0, [r0, #0]
 800181e:	f380 8808 	msr	MSP, r0
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f380 8814 	msr	CONTROL, r0
 800182a:	b662      	cpsie	i
 800182c:	b661      	cpsie	f
 800182e:	f3bf 8f4f 	dsb	sy
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	df00      	svc	0
 8001838:	bf00      	nop
 800183a:	0000      	.short	0x0000
 800183c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop

08001844 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800184a:	4b37      	ldr	r3, [pc, #220]	; (8001928 <xPortStartScheduler+0xe4>)
 800184c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	22ff      	movs	r2, #255	; 0xff
 800185a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b2f      	ldr	r3, [pc, #188]	; (800192c <xPortStartScheduler+0xe8>)
 8001870:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001872:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <xPortStartScheduler+0xec>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001878:	e009      	b.n	800188e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <xPortStartScheduler+0xec>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3b01      	subs	r3, #1
 8001880:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <xPortStartScheduler+0xec>)
 8001882:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	2b80      	cmp	r3, #128	; 0x80
 8001898:	d0ef      	beq.n	800187a <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <xPortStartScheduler+0xec>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d00c      	beq.n	80018c0 <xPortStartScheduler+0x7c>
        __asm volatile
 80018a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018aa:	b672      	cpsid	i
 80018ac:	f383 8811 	msr	BASEPRI, r3
 80018b0:	f3bf 8f6f 	isb	sy
 80018b4:	f3bf 8f4f 	dsb	sy
 80018b8:	b662      	cpsie	i
 80018ba:	60bb      	str	r3, [r7, #8]
    }
 80018bc:	bf00      	nop
 80018be:	e7fe      	b.n	80018be <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <xPortStartScheduler+0xec>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <xPortStartScheduler+0xec>)
 80018c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <xPortStartScheduler+0xec>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <xPortStartScheduler+0xec>)
 80018d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <xPortStartScheduler+0xf0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a14      	ldr	r2, [pc, #80]	; (8001934 <xPortStartScheduler+0xf0>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <xPortStartScheduler+0xf0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a11      	ldr	r2, [pc, #68]	; (8001934 <xPortStartScheduler+0xf0>)
 80018f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80018f4:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80018f6:	f000 f8db 	bl	8001ab0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <xPortStartScheduler+0xf4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001900:	f000 f8fa 	bl	8001af8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <xPortStartScheduler+0xf8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0c      	ldr	r2, [pc, #48]	; (800193c <xPortStartScheduler+0xf8>)
 800190a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800190e:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001910:	f7ff ff82 	bl	8001818 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001914:	f7ff fbf2 	bl	80010fc <vTaskSwitchContext>
    prvTaskExitError();
 8001918:	f7ff ff36 	bl	8001788 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e400 	.word	0xe000e400
 800192c:	2400016c 	.word	0x2400016c
 8001930:	24000170 	.word	0x24000170
 8001934:	e000ed20 	.word	0xe000ed20
 8001938:	24000004 	.word	0x24000004
 800193c:	e000ef34 	.word	0xe000ef34

08001940 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
        __asm volatile
 8001946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194a:	b672      	cpsid	i
 800194c:	f383 8811 	msr	BASEPRI, r3
 8001950:	f3bf 8f6f 	isb	sy
 8001954:	f3bf 8f4f 	dsb	sy
 8001958:	b662      	cpsie	i
 800195a:	607b      	str	r3, [r7, #4]
    }
 800195c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <vPortEnterCritical+0x60>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <vPortEnterCritical+0x60>)
 8001966:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <vPortEnterCritical+0x60>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d111      	bne.n	8001994 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <vPortEnterCritical+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00c      	beq.n	8001994 <vPortEnterCritical+0x54>
        __asm volatile
 800197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197e:	b672      	cpsid	i
 8001980:	f383 8811 	msr	BASEPRI, r3
 8001984:	f3bf 8f6f 	isb	sy
 8001988:	f3bf 8f4f 	dsb	sy
 800198c:	b662      	cpsie	i
 800198e:	603b      	str	r3, [r7, #0]
    }
 8001990:	bf00      	nop
 8001992:	e7fe      	b.n	8001992 <vPortEnterCritical+0x52>
    }
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	24000004 	.word	0x24000004
 80019a4:	e000ed04 	.word	0xe000ed04

080019a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <vPortExitCritical+0x54>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10c      	bne.n	80019d0 <vPortExitCritical+0x28>
        __asm volatile
 80019b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ba:	b672      	cpsid	i
 80019bc:	f383 8811 	msr	BASEPRI, r3
 80019c0:	f3bf 8f6f 	isb	sy
 80019c4:	f3bf 8f4f 	dsb	sy
 80019c8:	b662      	cpsie	i
 80019ca:	607b      	str	r3, [r7, #4]
    }
 80019cc:	bf00      	nop
 80019ce:	e7fe      	b.n	80019ce <vPortExitCritical+0x26>
    uxCriticalNesting--;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <vPortExitCritical+0x54>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <vPortExitCritical+0x54>)
 80019d8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <vPortExitCritical+0x54>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d105      	bne.n	80019ee <vPortExitCritical+0x46>
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80019ec:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	24000004 	.word	0x24000004

08001a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001a00:	f3ef 8009 	mrs	r0, PSP
 8001a04:	f3bf 8f6f 	isb	sy
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <pxCurrentTCBConst>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	f01e 0f10 	tst.w	lr, #16
 8001a10:	bf08      	it	eq
 8001a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a1a:	6010      	str	r0, [r2, #0]
 8001a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a24:	b672      	cpsid	i
 8001a26:	f380 8811 	msr	BASEPRI, r0
 8001a2a:	f3bf 8f4f 	dsb	sy
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	b662      	cpsie	i
 8001a34:	f7ff fb62 	bl	80010fc <vTaskSwitchContext>
 8001a38:	f04f 0000 	mov.w	r0, #0
 8001a3c:	f380 8811 	msr	BASEPRI, r0
 8001a40:	bc09      	pop	{r0, r3}
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	6808      	ldr	r0, [r1, #0]
 8001a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a4a:	f01e 0f10 	tst.w	lr, #16
 8001a4e:	bf08      	it	eq
 8001a50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a54:	f380 8809 	msr	PSP, r0
 8001a58:	f3bf 8f6f 	isb	sy
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <pxCurrentTCBConst>:
 8001a60:	24000040 	.word	0x24000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop

08001a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
        __asm volatile
 8001a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a72:	b672      	cpsid	i
 8001a74:	f383 8811 	msr	BASEPRI, r3
 8001a78:	f3bf 8f6f 	isb	sy
 8001a7c:	f3bf 8f4f 	dsb	sy
 8001a80:	b662      	cpsie	i
 8001a82:	607b      	str	r3, [r7, #4]
    }
 8001a84:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001a86:	f7ff fa9d 	bl	8000fc4 <xTaskIncrementTick>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <SysTick_Handler+0x44>)
 8001a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f383 8811 	msr	BASEPRI, r3
    }
 8001aa2:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	e000ed04 	.word	0xe000ed04

08001ab0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <vPortSetupTimerInterrupt+0x34>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <vPortSetupTimerInterrupt+0x38>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <vPortSetupTimerInterrupt+0x3c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <vPortSetupTimerInterrupt+0x40>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	099b      	lsrs	r3, r3, #6
 8001acc:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <vPortSetupTimerInterrupt+0x44>)
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <vPortSetupTimerInterrupt+0x34>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010
 8001ae8:	e000e018 	.word	0xe000e018
 8001aec:	24000014 	.word	0x24000014
 8001af0:	10624dd3 	.word	0x10624dd3
 8001af4:	e000e014 	.word	0xe000e014

08001af8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001af8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001b08 <vPortEnableVFP+0x10>
 8001afc:	6801      	ldr	r1, [r0, #0]
 8001afe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001b02:	6001      	str	r1, [r0, #0]
 8001b04:	4770      	bx	lr
 8001b06:	0000      	.short	0x0000
 8001b08:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop

08001b10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001b16:	f3ef 8305 	mrs	r3, IPSR
 8001b1a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b0f      	cmp	r3, #15
 8001b20:	d916      	bls.n	8001b50 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001b22:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <vPortValidateInterruptPriority+0x78>)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <vPortValidateInterruptPriority+0x7c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	7afa      	ldrb	r2, [r7, #11]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d20c      	bcs.n	8001b50 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8001b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3a:	b672      	cpsid	i
 8001b3c:	f383 8811 	msr	BASEPRI, r3
 8001b40:	f3bf 8f6f 	isb	sy
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	b662      	cpsie	i
 8001b4a:	607b      	str	r3, [r7, #4]
    }
 8001b4c:	bf00      	nop
 8001b4e:	e7fe      	b.n	8001b4e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <vPortValidateInterruptPriority+0x80>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <vPortValidateInterruptPriority+0x84>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d90c      	bls.n	8001b7a <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8001b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b64:	b672      	cpsid	i
 8001b66:	f383 8811 	msr	BASEPRI, r3
 8001b6a:	f3bf 8f6f 	isb	sy
 8001b6e:	f3bf 8f4f 	dsb	sy
 8001b72:	b662      	cpsie	i
 8001b74:	603b      	str	r3, [r7, #0]
    }
 8001b76:	bf00      	nop
 8001b78:	e7fe      	b.n	8001b78 <vPortValidateInterruptPriority+0x68>
    }
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e3f0 	.word	0xe000e3f0
 8001b8c:	2400016c 	.word	0x2400016c
 8001b90:	e000ed0c 	.word	0xe000ed0c
 8001b94:	24000170 	.word	0x24000170

08001b98 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001ba4:	f7ff f94a 	bl	8000e3c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001ba8:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <pvPortMalloc+0x1b4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001bb0:	f000 f93e 	bl	8001e30 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001bb4:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <pvPortMalloc+0x1b8>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 80ab 	bne.w	8001d18 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d02f      	beq.n	8001c28 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001bc8:	2208      	movs	r2, #8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d229      	bcs.n	8001c28 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d023      	beq.n	8001c2e <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f023 0307 	bic.w	r3, r3, #7
 8001bec:	3308      	adds	r3, #8
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d216      	bcs.n	8001c22 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f023 0307 	bic.w	r3, r3, #7
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d012      	beq.n	8001c2e <pvPortMalloc+0x96>
        __asm volatile
 8001c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c0c:	b672      	cpsid	i
 8001c0e:	f383 8811 	msr	BASEPRI, r3
 8001c12:	f3bf 8f6f 	isb	sy
 8001c16:	f3bf 8f4f 	dsb	sy
 8001c1a:	b662      	cpsie	i
 8001c1c:	617b      	str	r3, [r7, #20]
    }
 8001c1e:	bf00      	nop
 8001c20:	e7fe      	b.n	8001c20 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001c26:	e002      	b.n	8001c2e <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	e000      	b.n	8001c30 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001c2e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d070      	beq.n	8001d18 <pvPortMalloc+0x180>
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <pvPortMalloc+0x1bc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d86b      	bhi.n	8001d18 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001c40:	4b45      	ldr	r3, [pc, #276]	; (8001d58 <pvPortMalloc+0x1c0>)
 8001c42:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001c44:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <pvPortMalloc+0x1c0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c4a:	e004      	b.n	8001c56 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d903      	bls.n	8001c68 <pvPortMalloc+0xd0>
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f1      	bne.n	8001c4c <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001c68:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <pvPortMalloc+0x1b4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d052      	beq.n	8001d18 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2208      	movs	r2, #8
 8001c78:	4413      	add	r3, r2
 8001c7a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	1ad2      	subs	r2, r2, r3
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d921      	bls.n	8001cd8 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00c      	beq.n	8001cc0 <pvPortMalloc+0x128>
        __asm volatile
 8001ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001caa:	b672      	cpsid	i
 8001cac:	f383 8811 	msr	BASEPRI, r3
 8001cb0:	f3bf 8f6f 	isb	sy
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	b662      	cpsie	i
 8001cba:	613b      	str	r3, [r7, #16]
    }
 8001cbc:	bf00      	nop
 8001cbe:	e7fe      	b.n	8001cbe <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	1ad2      	subs	r2, r2, r3
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001cd2:	69b8      	ldr	r0, [r7, #24]
 8001cd4:	f000 f90e 	bl	8001ef4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <pvPortMalloc+0x1bc>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <pvPortMalloc+0x1bc>)
 8001ce4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <pvPortMalloc+0x1bc>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <pvPortMalloc+0x1c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d203      	bcs.n	8001cfa <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <pvPortMalloc+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <pvPortMalloc+0x1c4>)
 8001cf8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <pvPortMalloc+0x1b8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <pvPortMalloc+0x1c8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <pvPortMalloc+0x1c8>)
 8001d16:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001d18:	f7ff f89e 	bl	8000e58 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <pvPortMalloc+0x1a8>
        __asm volatile
 8001d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2a:	b672      	cpsid	i
 8001d2c:	f383 8811 	msr	BASEPRI, r3
 8001d30:	f3bf 8f6f 	isb	sy
 8001d34:	f3bf 8f4f 	dsb	sy
 8001d38:	b662      	cpsie	i
 8001d3a:	60fb      	str	r3, [r7, #12]
    }
 8001d3c:	bf00      	nop
 8001d3e:	e7fe      	b.n	8001d3e <pvPortMalloc+0x1a6>
    return pvReturn;
 8001d40:	69fb      	ldr	r3, [r7, #28]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3728      	adds	r7, #40	; 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2400517c 	.word	0x2400517c
 8001d50:	24005190 	.word	0x24005190
 8001d54:	24005180 	.word	0x24005180
 8001d58:	24005174 	.word	0x24005174
 8001d5c:	24005184 	.word	0x24005184
 8001d60:	24005188 	.word	0x24005188

08001d64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d051      	beq.n	8001e1a <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001d76:	2308      	movs	r3, #8
 8001d78:	425b      	negs	r3, r3
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <vPortFree+0xc0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <vPortFree+0x48>
        __asm volatile
 8001d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d96:	b672      	cpsid	i
 8001d98:	f383 8811 	msr	BASEPRI, r3
 8001d9c:	f3bf 8f6f 	isb	sy
 8001da0:	f3bf 8f4f 	dsb	sy
 8001da4:	b662      	cpsie	i
 8001da6:	60fb      	str	r3, [r7, #12]
    }
 8001da8:	bf00      	nop
 8001daa:	e7fe      	b.n	8001daa <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00c      	beq.n	8001dce <vPortFree+0x6a>
        __asm volatile
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	b672      	cpsid	i
 8001dba:	f383 8811 	msr	BASEPRI, r3
 8001dbe:	f3bf 8f6f 	isb	sy
 8001dc2:	f3bf 8f4f 	dsb	sy
 8001dc6:	b662      	cpsie	i
 8001dc8:	60bb      	str	r3, [r7, #8]
    }
 8001dca:	bf00      	nop
 8001dcc:	e7fe      	b.n	8001dcc <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <vPortFree+0xc0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01e      	beq.n	8001e1a <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d11a      	bne.n	8001e1a <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <vPortFree+0xc0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	401a      	ands	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001df4:	f7ff f822 	bl	8000e3c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <vPortFree+0xc4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <vPortFree+0xc4>)
 8001e04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e06:	6938      	ldr	r0, [r7, #16]
 8001e08:	f000 f874 	bl	8001ef4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <vPortFree+0xc8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <vPortFree+0xc8>)
 8001e14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001e16:	f7ff f81f 	bl	8000e58 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	24005190 	.word	0x24005190
 8001e28:	24005180 	.word	0x24005180
 8001e2c:	2400518c 	.word	0x2400518c

08001e30 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e36:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001e3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <prvHeapInit+0xac>)
 8001e3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00c      	beq.n	8001e64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3307      	adds	r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0307 	bic.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <prvHeapInit+0xac>)
 8001e60:	4413      	add	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e68:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <prvHeapInit+0xb0>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <prvHeapInit+0xb0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	4413      	add	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0307 	bic.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <prvHeapInit+0xb4>)
 8001e90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <prvHeapInit+0xb4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2200      	movs	r2, #0
 8001e98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <prvHeapInit+0xb4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	1ad2      	subs	r2, r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <prvHeapInit+0xb4>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <prvHeapInit+0xb8>)
 8001ebe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a09      	ldr	r2, [pc, #36]	; (8001eec <prvHeapInit+0xbc>)
 8001ec6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <prvHeapInit+0xc0>)
 8001eca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	24000174 	.word	0x24000174
 8001ee0:	24005174 	.word	0x24005174
 8001ee4:	2400517c 	.word	0x2400517c
 8001ee8:	24005184 	.word	0x24005184
 8001eec:	24005180 	.word	0x24005180
 8001ef0:	24005190 	.word	0x24005190

08001ef4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001efc:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <prvInsertBlockIntoFreeList+0xac>)
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	e002      	b.n	8001f08 <prvInsertBlockIntoFreeList+0x14>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d8f7      	bhi.n	8001f02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d108      	bne.n	8001f36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	441a      	add	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	441a      	add	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d118      	bne.n	8001f7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d00d      	beq.n	8001f72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	441a      	add	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e008      	b.n	8001f84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e003      	b.n	8001f84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d002      	beq.n	8001f92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	24005174 	.word	0x24005174
 8001fa4:	2400517c 	.word	0x2400517c

08001fa8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <_cbSendSystemDesc+0x14>)
 8001fae:	f002 f8c5 	bl	800413c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <_cbSendSystemDesc+0x18>)
 8001fb4:	f002 f8c2 	bl	800413c <SEGGER_SYSVIEW_SendSysDesc>
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	0800abd8 	.word	0x0800abd8
 8001fc0:	0800ac0c 	.word	0x0800ac0c

08001fc4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SEGGER_SYSVIEW_Conf+0x24>)
 8001fd2:	4a06      	ldr	r2, [pc, #24]	; (8001fec <SEGGER_SYSVIEW_Conf+0x28>)
 8001fd4:	f001 fca4 	bl	8003920 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001fd8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001fdc:	f001 fce4 	bl	80039a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	24000014 	.word	0x24000014
 8001fe8:	08001fa9 	.word	0x08001fa9
 8001fec:	0800adb4 	.word	0x0800adb4

08001ff0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	e033      	b.n	8002064 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001ffc:	491e      	ldr	r1, [pc, #120]	; (8002078 <_cbSendTaskList+0x88>)
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	491a      	ldr	r1, [pc, #104]	; (8002078 <_cbSendTaskList+0x88>)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3304      	adds	r3, #4
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	4c16      	ldr	r4, [pc, #88]	; (8002078 <_cbSendTaskList+0x88>)
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4423      	add	r3, r4
 800202c:	3308      	adds	r3, #8
 800202e:	681c      	ldr	r4, [r3, #0]
 8002030:	4d11      	ldr	r5, [pc, #68]	; (8002078 <_cbSendTaskList+0x88>)
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	442b      	add	r3, r5
 800203e:	330c      	adds	r3, #12
 8002040:	681d      	ldr	r5, [r3, #0]
 8002042:	4e0d      	ldr	r6, [pc, #52]	; (8002078 <_cbSendTaskList+0x88>)
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4433      	add	r3, r6
 8002050:	3310      	adds	r3, #16
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	462b      	mov	r3, r5
 8002058:	4622      	mov	r2, r4
 800205a:	f000 f979 	bl	8002350 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3301      	adds	r3, #1
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <_cbSendTaskList+0x8c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	d3c6      	bcc.n	8001ffc <_cbSendTaskList+0xc>
  }
}
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002078:	24005194 	.word	0x24005194
 800207c:	24005234 	.word	0x24005234

08002080 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002088:	f7fe ff8a 	bl	8000fa0 <xTaskGetTickCountFromISR>
 800208c:	4603      	mov	r3, r0
 800208e:	2200      	movs	r2, #0
 8002090:	469a      	mov	sl, r3
 8002092:	4693      	mov	fp, r2
 8002094:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	f04f 0a00 	mov.w	sl, #0
 80020a4:	f04f 0b00 	mov.w	fp, #0
 80020a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80020ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80020b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80020b4:	4652      	mov	r2, sl
 80020b6:	465b      	mov	r3, fp
 80020b8:	1a14      	subs	r4, r2, r0
 80020ba:	eb63 0501 	sbc.w	r5, r3, r1
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	00ab      	lsls	r3, r5, #2
 80020c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80020cc:	00a2      	lsls	r2, r4, #2
 80020ce:	4614      	mov	r4, r2
 80020d0:	461d      	mov	r5, r3
 80020d2:	eb14 0800 	adds.w	r8, r4, r0
 80020d6:	eb45 0901 	adc.w	r9, r5, r1
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ee:	4690      	mov	r8, r2
 80020f0:	4699      	mov	r9, r3
 80020f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80020f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002108 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002116:	2205      	movs	r2, #5
 8002118:	492b      	ldr	r1, [pc, #172]	; (80021c8 <SYSVIEW_AddTask+0xc0>)
 800211a:	68b8      	ldr	r0, [r7, #8]
 800211c:	f008 fd26 	bl	800ab6c <memcmp>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d04b      	beq.n	80021be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002126:	4b29      	ldr	r3, [pc, #164]	; (80021cc <SYSVIEW_AddTask+0xc4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b07      	cmp	r3, #7
 800212c:	d903      	bls.n	8002136 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800212e:	4828      	ldr	r0, [pc, #160]	; (80021d0 <SYSVIEW_AddTask+0xc8>)
 8002130:	f002 fa9c 	bl	800466c <SEGGER_SYSVIEW_Warn>
    return;
 8002134:	e044      	b.n	80021c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <SYSVIEW_AddTask+0xc4>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4926      	ldr	r1, [pc, #152]	; (80021d4 <SYSVIEW_AddTask+0xcc>)
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <SYSVIEW_AddTask+0xc4>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4921      	ldr	r1, [pc, #132]	; (80021d4 <SYSVIEW_AddTask+0xcc>)
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3304      	adds	r3, #4
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <SYSVIEW_AddTask+0xc4>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	491b      	ldr	r1, [pc, #108]	; (80021d4 <SYSVIEW_AddTask+0xcc>)
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3308      	adds	r3, #8
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <SYSVIEW_AddTask+0xc4>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4916      	ldr	r1, [pc, #88]	; (80021d4 <SYSVIEW_AddTask+0xcc>)
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	330c      	adds	r3, #12
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <SYSVIEW_AddTask+0xc4>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4910      	ldr	r1, [pc, #64]	; (80021d4 <SYSVIEW_AddTask+0xcc>)
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3310      	adds	r3, #16
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <SYSVIEW_AddTask+0xc4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	4a08      	ldr	r2, [pc, #32]	; (80021cc <SYSVIEW_AddTask+0xc4>)
 80021aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f8ca 	bl	8002350 <SYSVIEW_SendTaskInfo>
 80021bc:	e000      	b.n	80021c0 <SYSVIEW_AddTask+0xb8>
    return;
 80021be:	bf00      	nop

}
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	0800ac1c 	.word	0x0800ac1c
 80021cc:	24005234 	.word	0x24005234
 80021d0:	0800ac24 	.word	0x0800ac24
 80021d4:	24005194 	.word	0x24005194

080021d8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80021e0:	4b59      	ldr	r3, [pc, #356]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80ab 	beq.w	8002340 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e00d      	b.n	800220c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80021f0:	4956      	ldr	r1, [pc, #344]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	429a      	cmp	r2, r3
 8002204:	d008      	beq.n	8002218 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	4b4e      	ldr	r3, [pc, #312]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	429a      	cmp	r2, r3
 8002214:	d3ec      	bcc.n	80021f0 <SYSVIEW_DeleteTask+0x18>
 8002216:	e000      	b.n	800221a <SYSVIEW_DeleteTask+0x42>
      break;
 8002218:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800221a:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3b01      	subs	r3, #1
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	429a      	cmp	r2, r3
 8002224:	d111      	bne.n	800224a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4a46      	ldr	r2, [pc, #280]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 8002232:	4413      	add	r3, r2
 8002234:	2214      	movs	r2, #20
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f008 fcb5 	bl	800aba8 <memset>
    _NumTasks--;
 800223e:	4b42      	ldr	r3, [pc, #264]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3b01      	subs	r3, #1
 8002244:	4a40      	ldr	r2, [pc, #256]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	e07b      	b.n	8002342 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800224a:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d276      	bcs.n	8002342 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8002254:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	493c      	ldr	r1, [pc, #240]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	4838      	ldr	r0, [pc, #224]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4403      	add	r3, r0
 8002276:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8002278:	4b33      	ldr	r3, [pc, #204]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	4933      	ldr	r1, [pc, #204]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3304      	adds	r3, #4
 800228c:	6819      	ldr	r1, [r3, #0]
 800228e:	482f      	ldr	r0, [pc, #188]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4403      	add	r3, r0
 800229c:	3304      	adds	r3, #4
 800229e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80022a0:	4b29      	ldr	r3, [pc, #164]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	1e5a      	subs	r2, r3, #1
 80022a6:	4929      	ldr	r1, [pc, #164]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	3308      	adds	r3, #8
 80022b4:	6819      	ldr	r1, [r3, #0]
 80022b6:	4825      	ldr	r0, [pc, #148]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4403      	add	r3, r0
 80022c4:	3308      	adds	r3, #8
 80022c6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80022c8:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	491f      	ldr	r1, [pc, #124]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	330c      	adds	r3, #12
 80022dc:	6819      	ldr	r1, [r3, #0]
 80022de:	481b      	ldr	r0, [pc, #108]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4403      	add	r3, r0
 80022ec:	330c      	adds	r3, #12
 80022ee:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	1e5a      	subs	r2, r3, #1
 80022f6:	4915      	ldr	r1, [pc, #84]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3310      	adds	r3, #16
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	4811      	ldr	r0, [pc, #68]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4403      	add	r3, r0
 8002314:	3310      	adds	r3, #16
 8002316:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	1e5a      	subs	r2, r3, #1
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <SYSVIEW_DeleteTask+0x174>)
 8002328:	4413      	add	r3, r2
 800232a:	2214      	movs	r2, #20
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f008 fc3a 	bl	800aba8 <memset>
    _NumTasks--;
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3b01      	subs	r3, #1
 800233a:	4a03      	ldr	r2, [pc, #12]	; (8002348 <SYSVIEW_DeleteTask+0x170>)
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e000      	b.n	8002342 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8002340:	bf00      	nop
  }
}
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	24005234 	.word	0x24005234
 800234c:	24005194 	.word	0x24005194

08002350 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	2214      	movs	r2, #20
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f008 fc1e 	bl	800aba8 <memset>
  TaskInfo.TaskID     = TaskID;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fde1 	bl	8003f4c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800238a:	bf00      	nop
 800238c:	3728      	adds	r7, #40	; 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	; (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	; (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800242a:	f002 f97b 	bl	8004724 <SEGGER_SYSVIEW_IsStarted>
 800242e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8002436:	f001 fc0d 	bl	8003c54 <SEGGER_SYSVIEW_Start>
  }
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <_cbOnUARTRx+0x3c>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d806      	bhi.n	8002464 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <_cbOnUARTRx+0x3c>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <_cbOnUARTRx+0x3c>)
 8002460:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002462:	e009      	b.n	8002478 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002464:	f7ff ffde 	bl	8002424 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <_cbOnUARTRx+0x3c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	2201      	movs	r2, #1
 8002472:	4619      	mov	r1, r3
 8002474:	f000 fb9a 	bl	8002bac <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002478:	bf00      	nop
}
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	24000008 	.word	0x24000008

08002484 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <_cbOnUARTTx+0x5c>)
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d80f      	bhi.n	80024b4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <_cbOnUARTTx+0x5c>)
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	461a      	mov	r2, r3
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <_cbOnUARTTx+0x60>)
 800249c:	5c9a      	ldrb	r2, [r3, r2]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <_cbOnUARTTx+0x5c>)
 80024a4:	785b      	ldrb	r3, [r3, #1]
 80024a6:	3301      	adds	r3, #1
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <_cbOnUARTTx+0x5c>)
 80024ac:	705a      	strb	r2, [r3, #1]
    r = 1;
 80024ae:	2301      	movs	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
    goto Done;
 80024b2:	e00f      	b.n	80024d4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <_cbOnUARTTx+0x5c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fa19 	bl	80028f4 <SEGGER_RTT_ReadUpBufferNoLock>
 80024c2:	4603      	mov	r3, r0
 80024c4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	da02      	bge.n	80024d2 <_cbOnUARTTx+0x4e>
    r = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e000      	b.n	80024d4 <_cbOnUARTTx+0x50>
  }
Done:
 80024d2:	bf00      	nop
  return r;
 80024d4:	68fb      	ldr	r3, [r7, #12]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	24000008 	.word	0x24000008
 80024e4:	0800adbc 	.word	0x0800adbc

080024e8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <SEGGER_UART_init+0x1c>)
 80024f2:	4905      	ldr	r1, [pc, #20]	; (8002508 <SEGGER_UART_init+0x20>)
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f863 	bl	80025c0 <HIF_UART_Init>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	08002445 	.word	0x08002445
 8002508:	08002485 	.word	0x08002485

0800250c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <USART2_IRQHandler+0x80>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d011      	beq.n	8002546 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002522:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <USART2_IRQHandler+0x84>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 030b 	and.w	r3, r3, #11
 8002530:	2b00      	cmp	r3, #0
 8002532:	d108      	bne.n	8002546 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <USART2_IRQHandler+0x88>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d004      	beq.n	8002546 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800253c:	4b15      	ldr	r3, [pc, #84]	; (8002594 <USART2_IRQHandler+0x88>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	79fa      	ldrb	r2, [r7, #7]
 8002542:	4610      	mov	r0, r2
 8002544:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01a      	beq.n	8002586 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <USART2_IRQHandler+0x8c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d015      	beq.n	8002584 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <USART2_IRQHandler+0x8c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	1dfa      	adds	r2, r7, #7
 800255e:	4610      	mov	r0, r2
 8002560:	4798      	blx	r3
 8002562:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <USART2_IRQHandler+0x90>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <USART2_IRQHandler+0x90>)
 8002570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e006      	b.n	8002586 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <USART2_IRQHandler+0x80>)
 800257a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800257c:	79fa      	ldrb	r2, [r7, #7]
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <USART2_IRQHandler+0x84>)
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e000      	b.n	8002586 <USART2_IRQHandler+0x7a>
      return;
 8002584:	bf00      	nop
    }
  }
}
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40004400 	.word	0x40004400
 8002590:	40004404 	.word	0x40004404
 8002594:	24005238 	.word	0x24005238
 8002598:	2400523c 	.word	0x2400523c
 800259c:	4000440c 	.word	0x4000440c

080025a0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80025aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ae:	6013      	str	r3, [r2, #0]
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	4000440c 	.word	0x4000440c

080025c0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80025cc:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <HIF_UART_Init+0xc8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2d      	ldr	r2, [pc, #180]	; (8002688 <HIF_UART_Init+0xc8>)
 80025d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d6:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80025d8:	4b2c      	ldr	r3, [pc, #176]	; (800268c <HIF_UART_Init+0xcc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a2b      	ldr	r2, [pc, #172]	; (800268c <HIF_UART_Init+0xcc>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <HIF_UART_Init+0xd0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025f0:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80025f8:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80025fa:	4a25      	ldr	r2, [pc, #148]	; (8002690 <HIF_UART_Init+0xd0>)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <HIF_UART_Init+0xd4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002614:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8002616:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <HIF_UART_Init+0xd4>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <HIF_UART_Init+0xd8>)
 800261e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8002622:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HIF_UART_Init+0xdc>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HIF_UART_Init+0xe0>)
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8002636:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <HIF_UART_Init+0xe4>)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264e:	d302      	bcc.n	8002656 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002650:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002654:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HIF_UART_Init+0xe8>)
 8002662:	b29b      	uxth	r3, r3
 8002664:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8002666:	4a11      	ldr	r2, [pc, #68]	; (80026ac <HIF_UART_Init+0xec>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800266c:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <HIF_UART_Init+0xf0>)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8002672:	2106      	movs	r1, #6
 8002674:	2026      	movs	r0, #38	; 0x26
 8002676:	f7ff feab 	bl	80023d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800267a:	2026      	movs	r0, #38	; 0x26
 800267c:	f7ff fe8a 	bl	8002394 <__NVIC_EnableIRQ>
}
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	580244e8 	.word	0x580244e8
 800268c:	580244d8 	.word	0x580244d8
 8002690:	58020020 	.word	0x58020020
 8002694:	58020000 	.word	0x58020000
 8002698:	4000440c 	.word	0x4000440c
 800269c:	40004410 	.word	0x40004410
 80026a0:	40004414 	.word	0x40004414
 80026a4:	007a1200 	.word	0x007a1200
 80026a8:	40004408 	.word	0x40004408
 80026ac:	24005238 	.word	0x24005238
 80026b0:	2400523c 	.word	0x2400523c

080026b4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <_DoInit+0x98>)
 80026bc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2203      	movs	r2, #3
 80026c2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2203      	movs	r2, #3
 80026c8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a20      	ldr	r2, [pc, #128]	; (8002750 <_DoInit+0x9c>)
 80026ce:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a20      	ldr	r2, [pc, #128]	; (8002754 <_DoInit+0xa0>)
 80026d4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026dc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a17      	ldr	r2, [pc, #92]	; (8002750 <_DoInit+0x9c>)
 80026f4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <_DoInit+0xa4>)
 80026fa:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2210      	movs	r2, #16
 8002700:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3307      	adds	r3, #7
 8002718:	4a10      	ldr	r2, [pc, #64]	; (800275c <_DoInit+0xa8>)
 800271a:	6810      	ldr	r0, [r2, #0]
 800271c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800271e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <_DoInit+0xac>)
 8002726:	6810      	ldr	r0, [r2, #0]
 8002728:	6018      	str	r0, [r3, #0]
 800272a:	8891      	ldrh	r1, [r2, #4]
 800272c:	7992      	ldrb	r2, [r2, #6]
 800272e:	8099      	strh	r1, [r3, #4]
 8002730:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002732:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800273c:	f3bf 8f5f 	dmb	sy
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	24005240 	.word	0x24005240
 8002750:	0800ac74 	.word	0x0800ac74
 8002754:	240052e8 	.word	0x240052e8
 8002758:	240056e8 	.word	0x240056e8
 800275c:	0800ac80 	.word	0x0800ac80
 8002760:	0800ac84 	.word	0x0800ac84

08002764 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002770:	2300      	movs	r3, #0
 8002772:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	429a      	cmp	r2, r3
 8002786:	d905      	bls.n	8002794 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
 8002792:	e007      	b.n	80027a4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	69b9      	ldr	r1, [r7, #24]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	1acb      	subs	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3b01      	subs	r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ae:	4293      	cmp	r3, r2
 80027b0:	bf28      	it	cs
 80027b2:	4613      	movcs	r3, r2
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80027b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4293      	cmp	r3, r2
 80027bc:	bf28      	it	cs
 80027be:	4613      	movcs	r3, r2
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80027cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	6978      	ldr	r0, [r7, #20]
 80027d2:	f008 f9db 	bl	800ab8c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80027d6:	6a3a      	ldr	r2, [r7, #32]
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	4413      	add	r3, r2
 80027dc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	4413      	add	r3, r2
 80027e4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	4413      	add	r3, r2
 80027f4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d101      	bne.n	8002804 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002804:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1b2      	bne.n	800277a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8002814:	6a3b      	ldr	r3, [r7, #32]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3728      	adds	r7, #40	; 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800281e:	b580      	push	{r7, lr}
 8002820:	b088      	sub	sp, #32
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	d911      	bls.n	8002866 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	6938      	ldr	r0, [r7, #16]
 8002852:	f008 f99b 	bl	800ab8c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002856:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	441a      	add	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002864:	e01f      	b.n	80028a6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	6938      	ldr	r0, [r7, #16]
 800287a:	f008 f987 	bl	800ab8c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4413      	add	r3, r2
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4619      	mov	r1, r3
 8002896:	6938      	ldr	r0, [r7, #16]
 8002898:	f008 f978 	bl	800ab8c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800289c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	60da      	str	r2, [r3, #12]
}
 80028a6:	bf00      	nop
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80028ae:	b480      	push	{r7}
 80028b0:	b087      	sub	sp, #28
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d808      	bhi.n	80028dc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad2      	subs	r2, r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4413      	add	r3, r2
 80028d6:	3b01      	subs	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e004      	b.n	80028e6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80028e6:	697b      	ldr	r3, [r7, #20]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8002900:	4b3e      	ldr	r3, [pc, #248]	; (80029fc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002902:	623b      	str	r3, [r7, #32]
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800290e:	f7ff fed1 	bl	80026b4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4a37      	ldr	r2, [pc, #220]	; (80029fc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002920:	4413      	add	r3, r2
 8002922:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002934:	2300      	movs	r3, #0
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	429a      	cmp	r2, r3
 800293e:	d92b      	bls.n	8002998 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4293      	cmp	r3, r2
 8002950:	bf28      	it	cs
 8002952:	4613      	movcs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	4413      	add	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	6939      	ldr	r1, [r7, #16]
 8002964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002966:	f008 f911 	bl	800ab8c <memcpy>
    NumBytesRead += NumBytesRem;
 800296a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4413      	add	r3, r2
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	4413      	add	r3, r2
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	4413      	add	r3, r2
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002990:	429a      	cmp	r2, r3
 8002992:	d101      	bne.n	8002998 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4293      	cmp	r3, r2
 80029a6:	bf28      	it	cs
 80029a8:	4613      	movcs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d019      	beq.n	80029e6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	4413      	add	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	6939      	ldr	r1, [r7, #16]
 80029c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c2:	f008 f8e3 	bl	800ab8c <memcpy>
    NumBytesRead += NumBytesRem;
 80029c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	4413      	add	r3, r2
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80029ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	4413      	add	r3, r2
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80029de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	4413      	add	r3, r2
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3730      	adds	r7, #48	; 0x30
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	24005240 	.word	0x24005240

08002a00 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	; 0x30
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002a0c:	4b3e      	ldr	r3, [pc, #248]	; (8002b08 <SEGGER_RTT_ReadNoLock+0x108>)
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <SEGGER_RTT_ReadNoLock+0x1e>
 8002a1a:	f7ff fe4b 	bl	80026b4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	3360      	adds	r3, #96	; 0x60
 8002a2a:	4a37      	ldr	r2, [pc, #220]	; (8002b08 <SEGGER_RTT_ReadNoLock+0x108>)
 8002a2c:	4413      	add	r3, r2
 8002a2e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d92b      	bls.n	8002aa4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	bf28      	it	cs
 8002a5e:	4613      	movcs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a68:	4413      	add	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	6939      	ldr	r1, [r7, #16]
 8002a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a72:	f008 f88b 	bl	800ab8c <memcpy>
    NumBytesRead += NumBytesRem;
 8002a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	4413      	add	r3, r2
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	4413      	add	r3, r2
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d101      	bne.n	8002aa4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	bf28      	it	cs
 8002ab4:	4613      	movcs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d019      	beq.n	8002af2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	4413      	add	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	6939      	ldr	r1, [r7, #16]
 8002acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ace:	f008 f85d 	bl	800ab8c <memcpy>
    NumBytesRead += NumBytesRem;
 8002ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	4413      	add	r3, r2
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	4413      	add	r3, r2
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002afc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3730      	adds	r7, #48	; 0x30
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	24005240 	.word	0x24005240

08002b0c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	3360      	adds	r3, #96	; 0x60
 8002b28:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8002b2a:	4413      	add	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d029      	beq.n	8002b8a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d82e      	bhi.n	8002b98 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d013      	beq.n	8002b6a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8002b42:	e029      	b.n	8002b98 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002b44:	6978      	ldr	r0, [r7, #20]
 8002b46:	f7ff feb2 	bl	80028ae <_GetAvailWriteSpace>
 8002b4a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d202      	bcs.n	8002b5a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002b58:	e021      	b.n	8002b9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	69b9      	ldr	r1, [r7, #24]
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f7ff fe5b 	bl	800281e <_WriteNoCheck>
    break;
 8002b68:	e019      	b.n	8002b9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002b6a:	6978      	ldr	r0, [r7, #20]
 8002b6c:	f7ff fe9f 	bl	80028ae <_GetAvailWriteSpace>
 8002b70:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4293      	cmp	r3, r2
 8002b78:	bf28      	it	cs
 8002b7a:	4613      	movcs	r3, r2
 8002b7c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	69b9      	ldr	r1, [r7, #24]
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff fe4b 	bl	800281e <_WriteNoCheck>
    break;
 8002b88:	e009      	b.n	8002b9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	69b9      	ldr	r1, [r7, #24]
 8002b8e:	6978      	ldr	r0, [r7, #20]
 8002b90:	f7ff fde8 	bl	8002764 <_WriteBlocking>
 8002b94:	61f8      	str	r0, [r7, #28]
    break;
 8002b96:	e002      	b.n	8002b9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
    break;
 8002b9c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3720      	adds	r7, #32
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	24005240 	.word	0x24005240

08002bac <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <SEGGER_RTT_WriteDownBuffer+0x1e>
 8002bc6:	f7ff fd75 	bl	80026b4 <_DoInit>
  SEGGER_RTT_LOCK();
 8002bca:	f3ef 8311 	mrs	r3, BASEPRI
 8002bce:	f04f 0120 	mov.w	r1, #32
 8002bd2:	f381 8811 	msr	BASEPRI, r1
 8002bd6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f7ff ff95 	bl	8002b0c <SEGGER_RTT_WriteDownBufferNoLock>
 8002be2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8002bea:	697b      	ldr	r3, [r7, #20]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3720      	adds	r7, #32
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	24005240 	.word	0x24005240

08002bf8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002c06:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <SEGGER_RTT_AllocUpBuffer+0x20>
 8002c14:	f7ff fd4e 	bl	80026b4 <_DoInit>
  SEGGER_RTT_LOCK();
 8002c18:	f3ef 8311 	mrs	r3, BASEPRI
 8002c1c:	f04f 0120 	mov.w	r1, #32
 8002c20:	f381 8811 	msr	BASEPRI, r1
 8002c24:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002c26:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002c28:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002c2e:	6939      	ldr	r1, [r7, #16]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3304      	adds	r3, #4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	dbeb      	blt.n	8002c2e <SEGGER_RTT_AllocUpBuffer+0x36>
 8002c56:	e000      	b.n	8002c5a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002c58:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	da3f      	bge.n	8002ce4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8002c64:	6939      	ldr	r1, [r7, #16]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002c78:	6939      	ldr	r1, [r7, #16]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	3304      	adds	r3, #4
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002c8e:	6939      	ldr	r1, [r7, #16]
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3320      	adds	r3, #32
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8002ca2:	6939      	ldr	r1, [r7, #16]
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	3328      	adds	r3, #40	; 0x28
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8002cb6:	6939      	ldr	r1, [r7, #16]
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3324      	adds	r3, #36	; 0x24
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002cca:	6939      	ldr	r1, [r7, #16]
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	332c      	adds	r3, #44	; 0x2c
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002cde:	f3bf 8f5f 	dmb	sy
 8002ce2:	e002      	b.n	8002cea <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	24005240 	.word	0x24005240

08002d00 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002d1c:	f7ff fcca 	bl	80026b4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002d20:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002d22:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d82c      	bhi.n	8002d84 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8002d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8002d2e:	f04f 0120 	mov.w	r1, #32
 8002d32:	f381 8811 	msr	BASEPRI, r1
 8002d36:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	3360      	adds	r3, #96	; 0x60
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00e      	beq.n	8002d6e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d72:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002d74:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
 8002d82:	e002      	b.n	8002d8a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	24005240 	.word	0x24005240

08002d98 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00f      	beq.n	8002dce <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002dae:	e002      	b.n	8002db6 <_EncodeStr+0x1e>
      Len++;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	3301      	adds	r3, #1
 8002db4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f6      	bne.n	8002db0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d901      	bls.n	8002dce <_EncodeStr+0x36>
      Len = Limit;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2bfe      	cmp	r3, #254	; 0xfe
 8002dd2:	d806      	bhi.n	8002de2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	60fa      	str	r2, [r7, #12]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e011      	b.n	8002e06 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	60fa      	str	r2, [r7, #12]
 8002de8:	22ff      	movs	r2, #255	; 0xff
 8002dea:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	60fa      	str	r2, [r7, #12]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	0a19      	lsrs	r1, r3, #8
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	60fa      	str	r2, [r7, #12]
 8002e02:	b2ca      	uxtb	r2, r1
 8002e04:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002e0a:	e00a      	b.n	8002e22 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	1c53      	adds	r3, r2, #1
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1c59      	adds	r1, r3, #1
 8002e16:	60f9      	str	r1, [r7, #12]
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	701a      	strb	r2, [r3, #0]
    n++;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d3f0      	bcc.n	8002e0c <_EncodeStr+0x74>
  }
  return pPayload;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <_HandleIncomingPacket+0xe0>)
 8002e58:	7e1b      	ldrb	r3, [r3, #24]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	1cfb      	adds	r3, r7, #3
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4619      	mov	r1, r3
 8002e62:	f7ff fdcd 	bl	8002a00 <SEGGER_RTT_ReadNoLock>
 8002e66:	4603      	mov	r3, r0
 8002e68:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	dd54      	ble.n	8002f1a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	2b80      	cmp	r3, #128	; 0x80
 8002e74:	d032      	beq.n	8002edc <_HandleIncomingPacket+0x8c>
 8002e76:	2b80      	cmp	r3, #128	; 0x80
 8002e78:	dc42      	bgt.n	8002f00 <_HandleIncomingPacket+0xb0>
 8002e7a:	2b07      	cmp	r3, #7
 8002e7c:	dc16      	bgt.n	8002eac <_HandleIncomingPacket+0x5c>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	dd3e      	ble.n	8002f00 <_HandleIncomingPacket+0xb0>
 8002e82:	3b01      	subs	r3, #1
 8002e84:	2b06      	cmp	r3, #6
 8002e86:	d83b      	bhi.n	8002f00 <_HandleIncomingPacket+0xb0>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <_HandleIncomingPacket+0x40>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002eb3 	.word	0x08002eb3
 8002e94:	08002eb9 	.word	0x08002eb9
 8002e98:	08002ebf 	.word	0x08002ebf
 8002e9c:	08002ec5 	.word	0x08002ec5
 8002ea0:	08002ecb 	.word	0x08002ecb
 8002ea4:	08002ed1 	.word	0x08002ed1
 8002ea8:	08002ed7 	.word	0x08002ed7
 8002eac:	2b7f      	cmp	r3, #127	; 0x7f
 8002eae:	d036      	beq.n	8002f1e <_HandleIncomingPacket+0xce>
 8002eb0:	e026      	b.n	8002f00 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002eb2:	f000 fecf 	bl	8003c54 <SEGGER_SYSVIEW_Start>
      break;
 8002eb6:	e037      	b.n	8002f28 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002eb8:	f000 ff88 	bl	8003dcc <SEGGER_SYSVIEW_Stop>
      break;
 8002ebc:	e034      	b.n	8002f28 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002ebe:	f001 f961 	bl	8004184 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002ec2:	e031      	b.n	8002f28 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002ec4:	f001 f926 	bl	8004114 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002ec8:	e02e      	b.n	8002f28 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002eca:	f000 ffa5 	bl	8003e18 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002ece:	e02b      	b.n	8002f28 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002ed0:	f001 fb7a 	bl	80045c8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002ed4:	e028      	b.n	8002f28 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002ed6:	f001 fb59 	bl	800458c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002eda:	e025      	b.n	8002f28 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <_HandleIncomingPacket+0xe0>)
 8002ede:	7e1b      	ldrb	r3, [r3, #24]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	1cfb      	adds	r3, r7, #3
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7ff fd8a 	bl	8002a00 <SEGGER_RTT_ReadNoLock>
 8002eec:	4603      	mov	r3, r0
 8002eee:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	dd15      	ble.n	8002f22 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 fac7 	bl	800448c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002efe:	e010      	b.n	8002f22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	da0e      	bge.n	8002f26 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <_HandleIncomingPacket+0xe0>)
 8002f0a:	7e1b      	ldrb	r3, [r3, #24]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	1cfb      	adds	r3, r7, #3
 8002f10:	2201      	movs	r2, #1
 8002f12:	4619      	mov	r1, r3
 8002f14:	f7ff fd74 	bl	8002a00 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002f18:	e005      	b.n	8002f26 <_HandleIncomingPacket+0xd6>
    }
  }
 8002f1a:	bf00      	nop
 8002f1c:	e004      	b.n	8002f28 <_HandleIncomingPacket+0xd8>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <_HandleIncomingPacket+0xd8>
      break;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <_HandleIncomingPacket+0xd8>
      break;
 8002f26:	bf00      	nop
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	24005b00 	.word	0x24005b00

08002f34 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08c      	sub	sp, #48	; 0x30
 8002f38:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f48:	4b32      	ldr	r3, [pc, #200]	; (8003014 <_TrySendOverflowPacket+0xe0>)
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f4e:	e00b      	b.n	8002f68 <_TrySendOverflowPacket+0x34>
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	09db      	lsrs	r3, r3, #7
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f6c:	d8f0      	bhi.n	8002f50 <_TrySendOverflowPacket+0x1c>
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002f7e:	4b26      	ldr	r3, [pc, #152]	; (8003018 <_TrySendOverflowPacket+0xe4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002f84:	4b23      	ldr	r3, [pc, #140]	; (8003014 <_TrySendOverflowPacket+0xe0>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	e00b      	b.n	8002fb0 <_TrySendOverflowPacket+0x7c>
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	1c59      	adds	r1, r3, #1
 8002fa0:	6279      	str	r1, [r7, #36]	; 0x24
 8002fa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	09db      	lsrs	r3, r3, #7
 8002fae:	623b      	str	r3, [r7, #32]
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8002fb4:	d8f0      	bhi.n	8002f98 <_TrySendOverflowPacket+0x64>
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	627a      	str	r2, [r7, #36]	; 0x24
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <_TrySendOverflowPacket+0xe0>)
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f7fd f982 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002fe0:	f7ff fade 	bl	80025a0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <_TrySendOverflowPacket+0xe0>)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <_TrySendOverflowPacket+0xe0>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <_TrySendOverflowPacket+0xe0>)
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e004      	b.n	8003008 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <_TrySendOverflowPacket+0xe0>)
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	3301      	adds	r3, #1
 8003004:	4a03      	ldr	r2, [pc, #12]	; (8003014 <_TrySendOverflowPacket+0xe0>)
 8003006:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003008:	693b      	ldr	r3, [r7, #16]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3730      	adds	r7, #48	; 0x30
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	24005b00 	.word	0x24005b00
 8003018:	e0001004 	.word	0xe0001004

0800301c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003028:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <_SendPacket+0x1c4>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d010      	beq.n	8003052 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003030:	4b6b      	ldr	r3, [pc, #428]	; (80031e0 <_SendPacket+0x1c4>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80a5 	beq.w	8003184 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800303a:	4b69      	ldr	r3, [pc, #420]	; (80031e0 <_SendPacket+0x1c4>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d109      	bne.n	8003056 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003042:	f7ff ff77 	bl	8002f34 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003046:	4b66      	ldr	r3, [pc, #408]	; (80031e0 <_SendPacket+0x1c4>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	f040 809c 	bne.w	8003188 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8003050:	e001      	b.n	8003056 <_SendPacket+0x3a>
    goto Send;
 8003052:	bf00      	nop
 8003054:	e000      	b.n	8003058 <_SendPacket+0x3c>
Send:
 8003056:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b1f      	cmp	r3, #31
 800305c:	d809      	bhi.n	8003072 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800305e:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <_SendPacket+0x1c4>)
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 808d 	bne.w	800318c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b17      	cmp	r3, #23
 8003076:	d807      	bhi.n	8003088 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3b01      	subs	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e03d      	b.n	8003104 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b7f      	cmp	r3, #127	; 0x7f
 8003094:	d912      	bls.n	80030bc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	09da      	lsrs	r2, r3, #7
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3b01      	subs	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	3a01      	subs	r2, #1
 80030ae:	60fa      	str	r2, [r7, #12]
 80030b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e006      	b.n	80030ca <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3b01      	subs	r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b7f      	cmp	r3, #127	; 0x7f
 80030ce:	d912      	bls.n	80030f6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	09da      	lsrs	r2, r3, #7
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	3a01      	subs	r2, #1
 80030e8:	60fa      	str	r2, [r7, #12]
 80030ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e006      	b.n	8003104 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003104:	4b37      	ldr	r3, [pc, #220]	; (80031e4 <_SendPacket+0x1c8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800310a:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <_SendPacket+0x1c4>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	623b      	str	r3, [r7, #32]
 800311c:	e00b      	b.n	8003136 <_SendPacket+0x11a>
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	1c59      	adds	r1, r3, #1
 8003126:	6279      	str	r1, [r7, #36]	; 0x24
 8003128:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	09db      	lsrs	r3, r3, #7
 8003134:	623b      	str	r3, [r7, #32]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	2b7f      	cmp	r3, #127	; 0x7f
 800313a:	d8f0      	bhi.n	800311e <_SendPacket+0x102>
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	627a      	str	r2, [r7, #36]	; 0x24
 8003142:	6a3a      	ldr	r2, [r7, #32]
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800314c:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <_SendPacket+0x1c4>)
 800314e:	785b      	ldrb	r3, [r3, #1]
 8003150:	4618      	mov	r0, r3
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	461a      	mov	r2, r3
 800315a:	68f9      	ldr	r1, [r7, #12]
 800315c:	f7fd f8c0 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003160:	4603      	mov	r3, r0
 8003162:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003164:	f7ff fa1c 	bl	80025a0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800316e:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <_SendPacket+0x1c4>)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	60d3      	str	r3, [r2, #12]
 8003174:	e00b      	b.n	800318e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003176:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <_SendPacket+0x1c4>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	3301      	adds	r3, #1
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <_SendPacket+0x1c4>)
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	e004      	b.n	800318e <_SendPacket+0x172>
    goto SendDone;
 8003184:	bf00      	nop
 8003186:	e002      	b.n	800318e <_SendPacket+0x172>
      goto SendDone;
 8003188:	bf00      	nop
 800318a:	e000      	b.n	800318e <_SendPacket+0x172>
      goto SendDone;
 800318c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <_SendPacket+0x1c4>)
 8003190:	7e1b      	ldrb	r3, [r3, #24]
 8003192:	4619      	mov	r1, r3
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <_SendPacket+0x1cc>)
 8003196:	460b      	mov	r3, r1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	440b      	add	r3, r1
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	336c      	adds	r3, #108	; 0x6c
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <_SendPacket+0x1c4>)
 80031a6:	7e1b      	ldrb	r3, [r3, #24]
 80031a8:	4618      	mov	r0, r3
 80031aa:	490f      	ldr	r1, [pc, #60]	; (80031e8 <_SendPacket+0x1cc>)
 80031ac:	4603      	mov	r3, r0
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4403      	add	r3, r0
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	3370      	adds	r3, #112	; 0x70
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d00b      	beq.n	80031d6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <_SendPacket+0x1c4>)
 80031c0:	789b      	ldrb	r3, [r3, #2]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d107      	bne.n	80031d6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <_SendPacket+0x1c4>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80031cc:	f7ff fe40 	bl	8002e50 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <_SendPacket+0x1c4>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80031d6:	bf00      	nop
 80031d8:	3728      	adds	r7, #40	; 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	24005b00 	.word	0x24005b00
 80031e4:	e0001004 	.word	0xe0001004
 80031e8:	24005240 	.word	0x24005240

080031ec <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	3301      	adds	r3, #1
 8003202:	2b80      	cmp	r3, #128	; 0x80
 8003204:	d80a      	bhi.n	800321c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	1c59      	adds	r1, r3, #1
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6051      	str	r1, [r2, #4]
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b80      	cmp	r3, #128	; 0x80
 8003222:	d15a      	bne.n	80032da <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	623b      	str	r3, [r7, #32]
 8003244:	e00b      	b.n	800325e <_StoreChar+0x72>
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	1c59      	adds	r1, r3, #1
 800324e:	6279      	str	r1, [r7, #36]	; 0x24
 8003250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	09db      	lsrs	r3, r3, #7
 800325c:	623b      	str	r3, [r7, #32]
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2b7f      	cmp	r3, #127	; 0x7f
 8003262:	d8f0      	bhi.n	8003246 <_StoreChar+0x5a>
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	627a      	str	r2, [r7, #36]	; 0x24
 800326a:	6a3a      	ldr	r2, [r7, #32]
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	2300      	movs	r3, #0
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	e00b      	b.n	8003296 <_StoreChar+0xaa>
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	1c59      	adds	r1, r3, #1
 8003286:	61f9      	str	r1, [r7, #28]
 8003288:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	09db      	lsrs	r3, r3, #7
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b7f      	cmp	r3, #127	; 0x7f
 800329a:	d8f0      	bhi.n	800327e <_StoreChar+0x92>
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	61fa      	str	r2, [r7, #28]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	221a      	movs	r2, #26
 80032b2:	6939      	ldr	r1, [r7, #16]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff feb1 	bl	800301c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fdba 	bl	8002e38 <_PreparePacket>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	611a      	str	r2, [r3, #16]
  }
}
 80032da:	bf00      	nop
 80032dc:	3728      	adds	r7, #40	; 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80032f6:	2301      	movs	r3, #1
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80032fe:	e007      	b.n	8003310 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003300:	6a3a      	ldr	r2, [r7, #32]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	623b      	str	r3, [r7, #32]
    Width++;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3301      	adds	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	d2f3      	bcs.n	8003300 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	429a      	cmp	r2, r3
 800331e:	d901      	bls.n	8003324 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11f      	bne.n	800336e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01c      	beq.n	800336e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <_PrintUnsigned+0x66>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <_PrintUnsigned+0x66>
        c = '0';
 8003344:	2330      	movs	r3, #48	; 0x30
 8003346:	76fb      	strb	r3, [r7, #27]
 8003348:	e001      	b.n	800334e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800334a:	2320      	movs	r3, #32
 800334c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800334e:	e007      	b.n	8003360 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	3b01      	subs	r3, #1
 8003354:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8003356:	7efb      	ldrb	r3, [r7, #27]
 8003358:	4619      	mov	r1, r3
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff ff46 	bl	80031ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <_PrintUnsigned+0x8a>
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	429a      	cmp	r2, r3
 800336c:	d3f0      	bcc.n	8003350 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d903      	bls.n	800337c <_PrintUnsigned+0x98>
      NumDigits--;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	3b01      	subs	r3, #1
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	e009      	b.n	8003390 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	429a      	cmp	r2, r3
 800338c:	d200      	bcs.n	8003390 <_PrintUnsigned+0xac>
        break;
 800338e:	e005      	b.n	800339c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800339a:	e7e8      	b.n	800336e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80033b4:	4a15      	ldr	r2, [pc, #84]	; (800340c <_PrintUnsigned+0x128>)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	4413      	add	r3, r2
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	4619      	mov	r1, r3
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7ff ff14 	bl	80031ec <_StoreChar>
    Digit /= Base;
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e3      	bne.n	800339c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80033d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d011      	beq.n	8003402 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00e      	beq.n	8003402 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80033e4:	e006      	b.n	80033f4 <_PrintUnsigned+0x110>
        FieldWidth--;
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	3b01      	subs	r3, #1
 80033ea:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80033ec:	2120      	movs	r1, #32
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff fefc 	bl	80031ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <_PrintUnsigned+0x11e>
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	429a      	cmp	r2, r3
 8003400:	d3f1      	bcc.n	80033e6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8003402:	bf00      	nop
 8003404:	3728      	adds	r7, #40	; 0x28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	0800adcc 	.word	0x0800adcc

08003410 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	bfb8      	it	lt
 8003424:	425b      	neglt	r3, r3
 8003426:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003428:	2301      	movs	r3, #1
 800342a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800342c:	e007      	b.n	800343e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	fb92 f3f3 	sdiv	r3, r2, r3
 8003436:	613b      	str	r3, [r7, #16]
    Width++;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3301      	adds	r3, #1
 800343c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	429a      	cmp	r2, r3
 8003444:	daf3      	bge.n	800342e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	429a      	cmp	r2, r3
 800344c:	d901      	bls.n	8003452 <_PrintInt+0x42>
    Width = NumDigits;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <_PrintInt+0x5e>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	db04      	blt.n	8003468 <_PrintInt+0x58>
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <_PrintInt+0x5e>
    FieldWidth--;
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	3b01      	subs	r3, #1
 800346c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <_PrintInt+0x6e>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <_PrintInt+0x9c>
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d111      	bne.n	80034ac <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00e      	beq.n	80034ac <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800348e:	e006      	b.n	800349e <_PrintInt+0x8e>
        FieldWidth--;
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	3b01      	subs	r3, #1
 8003494:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003496:	2120      	movs	r1, #32
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f7ff fea7 	bl	80031ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <_PrintInt+0x9c>
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3f1      	bcc.n	8003490 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da07      	bge.n	80034c2 <_PrintInt+0xb2>
    v = -v;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	425b      	negs	r3, r3
 80034b6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80034b8:	212d      	movs	r1, #45	; 0x2d
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff fe96 	bl	80031ec <_StoreChar>
 80034c0:	e008      	b.n	80034d4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80034cc:	212b      	movs	r1, #43	; 0x2b
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7ff fe8c 	bl	80031ec <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d019      	beq.n	8003512 <_PrintInt+0x102>
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d114      	bne.n	8003512 <_PrintInt+0x102>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d111      	bne.n	8003512 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00e      	beq.n	8003512 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80034f4:	e006      	b.n	8003504 <_PrintInt+0xf4>
        FieldWidth--;
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80034fc:	2130      	movs	r1, #48	; 0x30
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff fe74 	bl	80031ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <_PrintInt+0x102>
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	429a      	cmp	r2, r3
 8003510:	d3f1      	bcc.n	80034f6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff fedf 	bl	80032e4 <_PrintUnsigned>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b098      	sub	sp, #96	; 0x60
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800353c:	f3ef 8311 	mrs	r3, BASEPRI
 8003540:	f04f 0120 	mov.w	r1, #32
 8003544:	f381 8811 	msr	BASEPRI, r1
 8003548:	633b      	str	r3, [r7, #48]	; 0x30
 800354a:	48b7      	ldr	r0, [pc, #732]	; (8003828 <_VPrintTarget+0x2f8>)
 800354c:	f7ff fc74 	bl	8002e38 <_PreparePacket>
 8003550:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003552:	4bb5      	ldr	r3, [pc, #724]	; (8003828 <_VPrintTarget+0x2f8>)
 8003554:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3301      	adds	r3, #1
 8003562:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3301      	adds	r3, #1
 8003574:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8003576:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8183 	beq.w	8003886 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8003580:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003584:	2b25      	cmp	r3, #37	; 0x25
 8003586:	f040 8170 	bne.w	800386a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800358a:	2300      	movs	r3, #0
 800358c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800358e:	2301      	movs	r3, #1
 8003590:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800359a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800359e:	3b23      	subs	r3, #35	; 0x23
 80035a0:	2b0d      	cmp	r3, #13
 80035a2:	d83f      	bhi.n	8003624 <_VPrintTarget+0xf4>
 80035a4:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <_VPrintTarget+0x7c>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	08003615 	.word	0x08003615
 80035b0:	08003625 	.word	0x08003625
 80035b4:	08003625 	.word	0x08003625
 80035b8:	08003625 	.word	0x08003625
 80035bc:	08003625 	.word	0x08003625
 80035c0:	08003625 	.word	0x08003625
 80035c4:	08003625 	.word	0x08003625
 80035c8:	08003625 	.word	0x08003625
 80035cc:	08003605 	.word	0x08003605
 80035d0:	08003625 	.word	0x08003625
 80035d4:	080035e5 	.word	0x080035e5
 80035d8:	08003625 	.word	0x08003625
 80035dc:	08003625 	.word	0x08003625
 80035e0:	080035f5 	.word	0x080035f5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80035e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e01a      	b.n	800362a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80035f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f6:	f043 0302 	orr.w	r3, r3, #2
 80035fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3301      	adds	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	e012      	b.n	800362a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8003604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	64bb      	str	r3, [r7, #72]	; 0x48
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3301      	adds	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e00a      	b.n	800362a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8003614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003616:	f043 0308 	orr.w	r3, r3, #8
 800361a:	64bb      	str	r3, [r7, #72]	; 0x48
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3301      	adds	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	e002      	b.n	800362a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8003624:	2300      	movs	r3, #0
 8003626:	653b      	str	r3, [r7, #80]	; 0x50
 8003628:	bf00      	nop
        }
      } while (v);
 800362a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1b0      	bne.n	8003592 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003630:	2300      	movs	r3, #0
 8003632:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800363c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003640:	2b2f      	cmp	r3, #47	; 0x2f
 8003642:	d912      	bls.n	800366a <_VPrintTarget+0x13a>
 8003644:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003648:	2b39      	cmp	r3, #57	; 0x39
 800364a:	d80e      	bhi.n	800366a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3301      	adds	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8003652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	461a      	mov	r2, r3
 800365e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003662:	4413      	add	r3, r2
 8003664:	3b30      	subs	r3, #48	; 0x30
 8003666:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8003668:	e7e4      	b.n	8003634 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800366a:	2300      	movs	r3, #0
 800366c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8003676:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800367a:	2b2e      	cmp	r3, #46	; 0x2e
 800367c:	d11d      	bne.n	80036ba <_VPrintTarget+0x18a>
        sFormat++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3301      	adds	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800368c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003690:	2b2f      	cmp	r3, #47	; 0x2f
 8003692:	d912      	bls.n	80036ba <_VPrintTarget+0x18a>
 8003694:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003698:	2b39      	cmp	r3, #57	; 0x39
 800369a:	d80e      	bhi.n	80036ba <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80036a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	461a      	mov	r2, r3
 80036ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036b2:	4413      	add	r3, r2
 80036b4:	3b30      	subs	r3, #48	; 0x30
 80036b6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80036b8:	e7e4      	b.n	8003684 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80036c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036c6:	2b6c      	cmp	r3, #108	; 0x6c
 80036c8:	d003      	beq.n	80036d2 <_VPrintTarget+0x1a2>
 80036ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036ce:	2b68      	cmp	r3, #104	; 0x68
 80036d0:	d107      	bne.n	80036e2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3301      	adds	r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80036e0:	e7ef      	b.n	80036c2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80036e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036e6:	2b25      	cmp	r3, #37	; 0x25
 80036e8:	f000 80b3 	beq.w	8003852 <_VPrintTarget+0x322>
 80036ec:	2b25      	cmp	r3, #37	; 0x25
 80036ee:	f2c0 80b7 	blt.w	8003860 <_VPrintTarget+0x330>
 80036f2:	2b78      	cmp	r3, #120	; 0x78
 80036f4:	f300 80b4 	bgt.w	8003860 <_VPrintTarget+0x330>
 80036f8:	2b58      	cmp	r3, #88	; 0x58
 80036fa:	f2c0 80b1 	blt.w	8003860 <_VPrintTarget+0x330>
 80036fe:	3b58      	subs	r3, #88	; 0x58
 8003700:	2b20      	cmp	r3, #32
 8003702:	f200 80ad 	bhi.w	8003860 <_VPrintTarget+0x330>
 8003706:	a201      	add	r2, pc, #4	; (adr r2, 800370c <_VPrintTarget+0x1dc>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	08003803 	.word	0x08003803
 8003710:	08003861 	.word	0x08003861
 8003714:	08003861 	.word	0x08003861
 8003718:	08003861 	.word	0x08003861
 800371c:	08003861 	.word	0x08003861
 8003720:	08003861 	.word	0x08003861
 8003724:	08003861 	.word	0x08003861
 8003728:	08003861 	.word	0x08003861
 800372c:	08003861 	.word	0x08003861
 8003730:	08003861 	.word	0x08003861
 8003734:	08003861 	.word	0x08003861
 8003738:	08003791 	.word	0x08003791
 800373c:	080037b7 	.word	0x080037b7
 8003740:	08003861 	.word	0x08003861
 8003744:	08003861 	.word	0x08003861
 8003748:	08003861 	.word	0x08003861
 800374c:	08003861 	.word	0x08003861
 8003750:	08003861 	.word	0x08003861
 8003754:	08003861 	.word	0x08003861
 8003758:	08003861 	.word	0x08003861
 800375c:	08003861 	.word	0x08003861
 8003760:	08003861 	.word	0x08003861
 8003764:	08003861 	.word	0x08003861
 8003768:	08003861 	.word	0x08003861
 800376c:	0800382d 	.word	0x0800382d
 8003770:	08003861 	.word	0x08003861
 8003774:	08003861 	.word	0x08003861
 8003778:	08003861 	.word	0x08003861
 800377c:	08003861 	.word	0x08003861
 8003780:	080037dd 	.word	0x080037dd
 8003784:	08003861 	.word	0x08003861
 8003788:	08003861 	.word	0x08003861
 800378c:	08003803 	.word	0x08003803
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	1d19      	adds	r1, r3, #4
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6011      	str	r1, [r2, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800379e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80037a4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fd1c 	bl	80031ec <_StoreChar>
        break;
 80037b4:	e055      	b.n	8003862 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	1d19      	adds	r1, r3, #4
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6011      	str	r1, [r2, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80037c4:	f107 0014 	add.w	r0, r7, #20
 80037c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d2:	220a      	movs	r2, #10
 80037d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80037d6:	f7ff fe1b 	bl	8003410 <_PrintInt>
        break;
 80037da:	e042      	b.n	8003862 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	1d19      	adds	r1, r3, #4
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6011      	str	r1, [r2, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80037ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80037ec:	f107 0014 	add.w	r0, r7, #20
 80037f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fa:	220a      	movs	r2, #10
 80037fc:	f7ff fd72 	bl	80032e4 <_PrintUnsigned>
        break;
 8003800:	e02f      	b.n	8003862 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	1d19      	adds	r1, r3, #4
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6011      	str	r1, [r2, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8003810:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003812:	f107 0014 	add.w	r0, r7, #20
 8003816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003820:	2210      	movs	r2, #16
 8003822:	f7ff fd5f 	bl	80032e4 <_PrintUnsigned>
        break;
 8003826:	e01c      	b.n	8003862 <_VPrintTarget+0x332>
 8003828:	24005b30 	.word	0x24005b30
      case 'p':
        v = va_arg(*pParamList, int);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	1d19      	adds	r1, r3, #4
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6011      	str	r1, [r2, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800383a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800383c:	f107 0014 	add.w	r0, r7, #20
 8003840:	2300      	movs	r3, #0
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	2308      	movs	r3, #8
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	2308      	movs	r3, #8
 800384a:	2210      	movs	r2, #16
 800384c:	f7ff fd4a 	bl	80032e4 <_PrintUnsigned>
        break;
 8003850:	e007      	b.n	8003862 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8003852:	f107 0314 	add.w	r3, r7, #20
 8003856:	2125      	movs	r1, #37	; 0x25
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fcc7 	bl	80031ec <_StoreChar>
        break;
 800385e:	e000      	b.n	8003862 <_VPrintTarget+0x332>
      default:
        break;
 8003860:	bf00      	nop
      }
      sFormat++;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3301      	adds	r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e007      	b.n	800387a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800386a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800386e:	f107 0314 	add.w	r3, r7, #20
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fcb9 	bl	80031ec <_StoreChar>
    }
  } while (*sFormat);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f47f ae72 	bne.w	8003568 <_VPrintTarget+0x38>
 8003884:	e000      	b.n	8003888 <_VPrintTarget+0x358>
      break;
 8003886:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	2b00      	cmp	r3, #0
 800388c:	d041      	beq.n	8003912 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	643b      	str	r3, [r7, #64]	; 0x40
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389e:	e00b      	b.n	80038b8 <_VPrintTarget+0x388>
 80038a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	6439      	str	r1, [r7, #64]	; 0x40
 80038aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b4:	09db      	lsrs	r3, r3, #7
 80038b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ba:	2b7f      	cmp	r3, #127	; 0x7f
 80038bc:	d8f0      	bhi.n	80038a0 <_VPrintTarget+0x370>
 80038be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	643a      	str	r2, [r7, #64]	; 0x40
 80038c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038cc:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80038d2:	2300      	movs	r3, #0
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
 80038d6:	e00b      	b.n	80038f0 <_VPrintTarget+0x3c0>
 80038d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	1c59      	adds	r1, r3, #1
 80038e0:	63b9      	str	r1, [r7, #56]	; 0x38
 80038e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ec:	09db      	lsrs	r3, r3, #7
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	2b7f      	cmp	r3, #127	; 0x7f
 80038f4:	d8f0      	bhi.n	80038d8 <_VPrintTarget+0x3a8>
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80038fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	69b9      	ldr	r1, [r7, #24]
 800390a:	221a      	movs	r2, #26
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fb85 	bl	800301c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8003918:	bf00      	nop
 800391a:	3758      	adds	r7, #88	; 0x58
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800392e:	2300      	movs	r3, #0
 8003930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003934:	4917      	ldr	r1, [pc, #92]	; (8003994 <SEGGER_SYSVIEW_Init+0x74>)
 8003936:	4818      	ldr	r0, [pc, #96]	; (8003998 <SEGGER_SYSVIEW_Init+0x78>)
 8003938:	f7ff f95e 	bl	8002bf8 <SEGGER_RTT_AllocUpBuffer>
 800393c:	4603      	mov	r3, r0
 800393e:	b2da      	uxtb	r2, r3
 8003940:	4b16      	ldr	r3, [pc, #88]	; (800399c <SEGGER_SYSVIEW_Init+0x7c>)
 8003942:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <SEGGER_SYSVIEW_Init+0x7c>)
 8003946:	785a      	ldrb	r2, [r3, #1]
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <SEGGER_SYSVIEW_Init+0x7c>)
 800394a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800394c:	4b13      	ldr	r3, [pc, #76]	; (800399c <SEGGER_SYSVIEW_Init+0x7c>)
 800394e:	7e1b      	ldrb	r3, [r3, #24]
 8003950:	4618      	mov	r0, r3
 8003952:	2300      	movs	r3, #0
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	2308      	movs	r3, #8
 8003958:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <SEGGER_SYSVIEW_Init+0x80>)
 800395a:	490f      	ldr	r1, [pc, #60]	; (8003998 <SEGGER_SYSVIEW_Init+0x78>)
 800395c:	f7ff f9d0 	bl	8002d00 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <SEGGER_SYSVIEW_Init+0x7c>)
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003966:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <SEGGER_SYSVIEW_Init+0x84>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <SEGGER_SYSVIEW_Init+0x7c>)
 800396c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800396e:	4a0b      	ldr	r2, [pc, #44]	; (800399c <SEGGER_SYSVIEW_Init+0x7c>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003974:	4a09      	ldr	r2, [pc, #36]	; (800399c <SEGGER_SYSVIEW_Init+0x7c>)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <SEGGER_SYSVIEW_Init+0x7c>)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003980:	4a06      	ldr	r2, [pc, #24]	; (800399c <SEGGER_SYSVIEW_Init+0x7c>)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <SEGGER_SYSVIEW_Init+0x7c>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	240056f8 	.word	0x240056f8
 8003998:	0800ac8c 	.word	0x0800ac8c
 800399c:	24005b00 	.word	0x24005b00
 80039a0:	24005af8 	.word	0x24005af8
 80039a4:	e0001004 	.word	0xe0001004

080039a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6113      	str	r3, [r2, #16]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	24005b00 	.word	0x24005b00

080039c8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80039d0:	f3ef 8311 	mrs	r3, BASEPRI
 80039d4:	f04f 0120 	mov.w	r1, #32
 80039d8:	f381 8811 	msr	BASEPRI, r1
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	4808      	ldr	r0, [pc, #32]	; (8003a00 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80039e0:	f7ff fa2a 	bl	8002e38 <_PreparePacket>
 80039e4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	68b8      	ldr	r0, [r7, #8]
 80039ec:	f7ff fb16 	bl	800301c <_SendPacket>
  RECORD_END();
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f383 8811 	msr	BASEPRI, r3
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	24005b30 	.word	0x24005b30

08003a04 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003a0e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a12:	f04f 0120 	mov.w	r1, #32
 8003a16:	f381 8811 	msr	BASEPRI, r1
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	4816      	ldr	r0, [pc, #88]	; (8003a78 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003a1e:	f7ff fa0b 	bl	8002e38 <_PreparePacket>
 8003a22:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e00b      	b.n	8003a4a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	1c59      	adds	r1, r3, #1
 8003a3a:	61f9      	str	r1, [r7, #28]
 8003a3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	09db      	lsrs	r3, r3, #7
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a4e:	d8f0      	bhi.n	8003a32 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	61fa      	str	r2, [r7, #28]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	68f9      	ldr	r1, [r7, #12]
 8003a64:	6938      	ldr	r0, [r7, #16]
 8003a66:	f7ff fad9 	bl	800301c <_SendPacket>
  RECORD_END();
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f383 8811 	msr	BASEPRI, r3
}
 8003a70:	bf00      	nop
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	24005b30 	.word	0x24005b30

08003a7c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	; 0x30
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a88:	f3ef 8311 	mrs	r3, BASEPRI
 8003a8c:	f04f 0120 	mov.w	r1, #32
 8003a90:	f381 8811 	msr	BASEPRI, r1
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	4825      	ldr	r0, [pc, #148]	; (8003b2c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003a98:	f7ff f9ce 	bl	8002e38 <_PreparePacket>
 8003a9c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aaa:	e00b      	b.n	8003ac4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	1c59      	adds	r1, r3, #1
 8003ab4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	09db      	lsrs	r3, r3, #7
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ac8:	d8f0      	bhi.n	8003aac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	623b      	str	r3, [r7, #32]
 8003ae2:	e00b      	b.n	8003afc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	1c59      	adds	r1, r3, #1
 8003aec:	6279      	str	r1, [r7, #36]	; 0x24
 8003aee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	09db      	lsrs	r3, r3, #7
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	2b7f      	cmp	r3, #127	; 0x7f
 8003b00:	d8f0      	bhi.n	8003ae4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	627a      	str	r2, [r7, #36]	; 0x24
 8003b08:	6a3a      	ldr	r2, [r7, #32]
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	6979      	ldr	r1, [r7, #20]
 8003b16:	69b8      	ldr	r0, [r7, #24]
 8003b18:	f7ff fa80 	bl	800301c <_SendPacket>
  RECORD_END();
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f383 8811 	msr	BASEPRI, r3
}
 8003b22:	bf00      	nop
 8003b24:	3730      	adds	r7, #48	; 0x30
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	24005b30 	.word	0x24005b30

08003b30 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b090      	sub	sp, #64	; 0x40
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b3e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b42:	f04f 0120 	mov.w	r1, #32
 8003b46:	f381 8811 	msr	BASEPRI, r1
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	4840      	ldr	r0, [pc, #256]	; (8003c50 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003b4e:	f7ff f973 	bl	8002e38 <_PreparePacket>
 8003b52:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b60:	e00b      	b.n	8003b7a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b68:	1c59      	adds	r1, r3, #1
 8003b6a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003b6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	09db      	lsrs	r3, r3, #7
 8003b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b7e:	d8f0      	bhi.n	8003b62 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	633b      	str	r3, [r7, #48]	; 0x30
 8003b98:	e00b      	b.n	8003bb2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba0:	1c59      	adds	r1, r3, #1
 8003ba2:	6379      	str	r1, [r7, #52]	; 0x34
 8003ba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	09db      	lsrs	r3, r3, #7
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8003bb6:	d8f0      	bhi.n	8003b9a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	637a      	str	r2, [r7, #52]	; 0x34
 8003bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd0:	e00b      	b.n	8003bea <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	1c59      	adds	r1, r3, #1
 8003bda:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003bdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	09db      	lsrs	r3, r3, #7
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	2b7f      	cmp	r3, #127	; 0x7f
 8003bee:	d8f0      	bhi.n	8003bd2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
 8003c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	e00b      	b.n	8003c22 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	1c59      	adds	r1, r3, #1
 8003c12:	6279      	str	r1, [r7, #36]	; 0x24
 8003c14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	09db      	lsrs	r3, r3, #7
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	2b7f      	cmp	r3, #127	; 0x7f
 8003c26:	d8f0      	bhi.n	8003c0a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c2e:	6a3a      	ldr	r2, [r7, #32]
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	6979      	ldr	r1, [r7, #20]
 8003c3c:	69b8      	ldr	r0, [r7, #24]
 8003c3e:	f7ff f9ed 	bl	800301c <_SendPacket>
  RECORD_END();
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f383 8811 	msr	BASEPRI, r3
}
 8003c48:	bf00      	nop
 8003c4a:	3740      	adds	r7, #64	; 0x40
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	24005b30 	.word	0x24005b30

08003c54 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08c      	sub	sp, #48	; 0x30
 8003c58:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003c5a:	4b59      	ldr	r3, [pc, #356]	; (8003dc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003c60:	f3ef 8311 	mrs	r3, BASEPRI
 8003c64:	f04f 0120 	mov.w	r1, #32
 8003c68:	f381 8811 	msr	BASEPRI, r1
 8003c6c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003c6e:	4b54      	ldr	r3, [pc, #336]	; (8003dc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c70:	785b      	ldrb	r3, [r3, #1]
 8003c72:	220a      	movs	r2, #10
 8003c74:	4953      	ldr	r1, [pc, #332]	; (8003dc4 <SEGGER_SYSVIEW_Start+0x170>)
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fc fb32 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003c82:	f7fe fc8d 	bl	80025a0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003c86:	200a      	movs	r0, #10
 8003c88:	f7ff fe9e 	bl	80039c8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c90:	f04f 0120 	mov.w	r1, #32
 8003c94:	f381 8811 	msr	BASEPRI, r1
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	484b      	ldr	r0, [pc, #300]	; (8003dc8 <SEGGER_SYSVIEW_Start+0x174>)
 8003c9c:	f7ff f8cc 	bl	8002e38 <_PreparePacket>
 8003ca0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003caa:	4b45      	ldr	r3, [pc, #276]	; (8003dc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb0:	e00b      	b.n	8003cca <SEGGER_SYSVIEW_Start+0x76>
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	1c59      	adds	r1, r3, #1
 8003cba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003cbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	09db      	lsrs	r3, r3, #7
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8003cce:	d8f0      	bhi.n	8003cb2 <SEGGER_SYSVIEW_Start+0x5e>
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce4:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	623b      	str	r3, [r7, #32]
 8003cea:	e00b      	b.n	8003d04 <SEGGER_SYSVIEW_Start+0xb0>
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	1c59      	adds	r1, r3, #1
 8003cf4:	6279      	str	r1, [r7, #36]	; 0x24
 8003cf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	09db      	lsrs	r3, r3, #7
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2b7f      	cmp	r3, #127	; 0x7f
 8003d08:	d8f0      	bhi.n	8003cec <SEGGER_SYSVIEW_Start+0x98>
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	627a      	str	r2, [r7, #36]	; 0x24
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	e00b      	b.n	8003d3e <SEGGER_SYSVIEW_Start+0xea>
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	1c59      	adds	r1, r3, #1
 8003d2e:	61f9      	str	r1, [r7, #28]
 8003d30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	09db      	lsrs	r3, r3, #7
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2b7f      	cmp	r3, #127	; 0x7f
 8003d42:	d8f0      	bhi.n	8003d26 <SEGGER_SYSVIEW_Start+0xd2>
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	61fa      	str	r2, [r7, #28]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	e00b      	b.n	8003d76 <SEGGER_SYSVIEW_Start+0x122>
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	1c59      	adds	r1, r3, #1
 8003d66:	6179      	str	r1, [r7, #20]
 8003d68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	09db      	lsrs	r3, r3, #7
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b7f      	cmp	r3, #127	; 0x7f
 8003d7a:	d8f0      	bhi.n	8003d5e <SEGGER_SYSVIEW_Start+0x10a>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	617a      	str	r2, [r7, #20]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003d8c:	2218      	movs	r2, #24
 8003d8e:	6839      	ldr	r1, [r7, #0]
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff f943 	bl	800301c <_SendPacket>
      RECORD_END();
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003d9c:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003daa:	f000 f9eb 	bl	8004184 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003dae:	f000 f9b1 	bl	8004114 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003db2:	f000 fc09 	bl	80045c8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003db6:	bf00      	nop
 8003db8:	3730      	adds	r7, #48	; 0x30
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	24005b00 	.word	0x24005b00
 8003dc4:	0800adc0 	.word	0x0800adc0
 8003dc8:	24005b30 	.word	0x24005b30

08003dcc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8003dd6:	f04f 0120 	mov.w	r1, #32
 8003dda:	f381 8811 	msr	BASEPRI, r1
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	480b      	ldr	r0, [pc, #44]	; (8003e10 <SEGGER_SYSVIEW_Stop+0x44>)
 8003de2:	f7ff f829 	bl	8002e38 <_PreparePacket>
 8003de6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <SEGGER_SYSVIEW_Stop+0x48>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d007      	beq.n	8003e00 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003df0:	220b      	movs	r2, #11
 8003df2:	6839      	ldr	r1, [r7, #0]
 8003df4:	6838      	ldr	r0, [r7, #0]
 8003df6:	f7ff f911 	bl	800301c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <SEGGER_SYSVIEW_Stop+0x48>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f383 8811 	msr	BASEPRI, r3
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	24005b30 	.word	0x24005b30
 8003e14:	24005b00 	.word	0x24005b00

08003e18 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08c      	sub	sp, #48	; 0x30
 8003e1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e22:	f04f 0120 	mov.w	r1, #32
 8003e26:	f381 8811 	msr	BASEPRI, r1
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	4845      	ldr	r0, [pc, #276]	; (8003f44 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003e2e:	f7ff f803 	bl	8002e38 <_PreparePacket>
 8003e32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3c:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e42:	e00b      	b.n	8003e5c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	1c59      	adds	r1, r3, #1
 8003e4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	09db      	lsrs	r3, r3, #7
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8003e60:	d8f0      	bhi.n	8003e44 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
 8003e76:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	623b      	str	r3, [r7, #32]
 8003e7c:	e00b      	b.n	8003e96 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	1c59      	adds	r1, r3, #1
 8003e86:	6279      	str	r1, [r7, #36]	; 0x24
 8003e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	09db      	lsrs	r3, r3, #7
 8003e94:	623b      	str	r3, [r7, #32]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2b7f      	cmp	r3, #127	; 0x7f
 8003e9a:	d8f0      	bhi.n	8003e7e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	627a      	str	r2, [r7, #36]	; 0x24
 8003ea2:	6a3a      	ldr	r2, [r7, #32]
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	e00b      	b.n	8003ed0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	61f9      	str	r1, [r7, #28]
 8003ec2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	09db      	lsrs	r3, r3, #7
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ed4:	d8f0      	bhi.n	8003eb8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	61fa      	str	r2, [r7, #28]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	e00b      	b.n	8003f08 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	1c59      	adds	r1, r3, #1
 8003ef8:	6179      	str	r1, [r7, #20]
 8003efa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	09db      	lsrs	r3, r3, #7
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f0c:	d8f0      	bhi.n	8003ef0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	617a      	str	r2, [r7, #20]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003f1e:	2218      	movs	r2, #24
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	68b8      	ldr	r0, [r7, #8]
 8003f24:	f7ff f87a 	bl	800301c <_SendPacket>
  RECORD_END();
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	4798      	blx	r3
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	3730      	adds	r7, #48	; 0x30
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	24005b30 	.word	0x24005b30
 8003f48:	24005b00 	.word	0x24005b00

08003f4c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b092      	sub	sp, #72	; 0x48
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003f54:	f3ef 8311 	mrs	r3, BASEPRI
 8003f58:	f04f 0120 	mov.w	r1, #32
 8003f5c:	f381 8811 	msr	BASEPRI, r1
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	486a      	ldr	r0, [pc, #424]	; (800410c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003f64:	f7fe ff68 	bl	8002e38 <_PreparePacket>
 8003f68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	647b      	str	r3, [r7, #68]	; 0x44
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b66      	ldr	r3, [pc, #408]	; (8004110 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f7e:	e00b      	b.n	8003f98 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f86:	1c59      	adds	r1, r3, #1
 8003f88:	6479      	str	r1, [r7, #68]	; 0x44
 8003f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f94:	09db      	lsrs	r3, r3, #7
 8003f96:	643b      	str	r3, [r7, #64]	; 0x40
 8003f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f9c:	d8f0      	bhi.n	8003f80 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	647a      	str	r2, [r7, #68]	; 0x44
 8003fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb8:	e00b      	b.n	8003fd2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc0:	1c59      	adds	r1, r3, #1
 8003fc2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003fc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	09db      	lsrs	r3, r3, #7
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8003fd6:	d8f0      	bhi.n	8003fba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	4619      	mov	r1, r3
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7fe fed1 	bl	8002d98 <_EncodeStr>
 8003ff6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003ff8:	2209      	movs	r2, #9
 8003ffa:	68f9      	ldr	r1, [r7, #12]
 8003ffc:	6938      	ldr	r0, [r7, #16]
 8003ffe:	f7ff f80d 	bl	800301c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b40      	ldr	r3, [pc, #256]	; (8004110 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	633b      	str	r3, [r7, #48]	; 0x30
 8004016:	e00b      	b.n	8004030 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	b2da      	uxtb	r2, r3
 800401c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401e:	1c59      	adds	r1, r3, #1
 8004020:	6379      	str	r1, [r7, #52]	; 0x34
 8004022:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	09db      	lsrs	r3, r3, #7
 800402e:	633b      	str	r3, [r7, #48]	; 0x30
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	2b7f      	cmp	r3, #127	; 0x7f
 8004034:	d8f0      	bhi.n	8004018 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	637a      	str	r2, [r7, #52]	; 0x34
 800403c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004050:	e00b      	b.n	800406a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	b2da      	uxtb	r2, r3
 8004056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004058:	1c59      	adds	r1, r3, #1
 800405a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800405c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	09db      	lsrs	r3, r3, #7
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	2b7f      	cmp	r3, #127	; 0x7f
 800406e:	d8f0      	bhi.n	8004052 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	e00b      	b.n	80040a4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	6279      	str	r1, [r7, #36]	; 0x24
 8004096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	09db      	lsrs	r3, r3, #7
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	2b7f      	cmp	r3, #127	; 0x7f
 80040a8:	d8f0      	bhi.n	800408c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	627a      	str	r2, [r7, #36]	; 0x24
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e00b      	b.n	80040dc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	1c59      	adds	r1, r3, #1
 80040cc:	61f9      	str	r1, [r7, #28]
 80040ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	09db      	lsrs	r3, r3, #7
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b7f      	cmp	r3, #127	; 0x7f
 80040e0:	d8f0      	bhi.n	80040c4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	61fa      	str	r2, [r7, #28]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80040f2:	2215      	movs	r2, #21
 80040f4:	68f9      	ldr	r1, [r7, #12]
 80040f6:	6938      	ldr	r0, [r7, #16]
 80040f8:	f7fe ff90 	bl	800301c <_SendPacket>
  RECORD_END();
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f383 8811 	msr	BASEPRI, r3
}
 8004102:	bf00      	nop
 8004104:	3748      	adds	r7, #72	; 0x48
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	24005b30 	.word	0x24005b30
 8004110:	24005b00 	.word	0x24005b00

08004114 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800412a:	4b03      	ldr	r3, [pc, #12]	; (8004138 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4798      	blx	r3
  }
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	24005b00 	.word	0x24005b00

0800413c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004144:	f3ef 8311 	mrs	r3, BASEPRI
 8004148:	f04f 0120 	mov.w	r1, #32
 800414c:	f381 8811 	msr	BASEPRI, r1
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	480b      	ldr	r0, [pc, #44]	; (8004180 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004154:	f7fe fe70 	bl	8002e38 <_PreparePacket>
 8004158:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	6938      	ldr	r0, [r7, #16]
 8004160:	f7fe fe1a 	bl	8002d98 <_EncodeStr>
 8004164:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004166:	220e      	movs	r2, #14
 8004168:	68f9      	ldr	r1, [r7, #12]
 800416a:	6938      	ldr	r0, [r7, #16]
 800416c:	f7fe ff56 	bl	800301c <_SendPacket>
  RECORD_END();
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f383 8811 	msr	BASEPRI, r3
}
 8004176:	bf00      	nop
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	24005b30 	.word	0x24005b30

08004184 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01a      	beq.n	80041c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d015      	beq.n	80041c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800419c:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4798      	blx	r3
 80041a4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80041a8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80041aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	000a      	movs	r2, r1
 80041b8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80041ba:	4613      	mov	r3, r2
 80041bc:	461a      	mov	r2, r3
 80041be:	4621      	mov	r1, r4
 80041c0:	200d      	movs	r0, #13
 80041c2:	f7ff fc5b 	bl	8003a7c <SEGGER_SYSVIEW_RecordU32x2>
 80041c6:	e006      	b.n	80041d6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4619      	mov	r1, r3
 80041ce:	200c      	movs	r0, #12
 80041d0:	f7ff fc18 	bl	8003a04 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd90      	pop	{r4, r7, pc}
 80041de:	bf00      	nop
 80041e0:	24005b00 	.word	0x24005b00
 80041e4:	e0001004 	.word	0xe0001004

080041e8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80041ee:	f3ef 8311 	mrs	r3, BASEPRI
 80041f2:	f04f 0120 	mov.w	r1, #32
 80041f6:	f381 8811 	msr	BASEPRI, r1
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	4807      	ldr	r0, [pc, #28]	; (800421c <SEGGER_SYSVIEW_OnIdle+0x34>)
 80041fe:	f7fe fe1b 	bl	8002e38 <_PreparePacket>
 8004202:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004204:	2211      	movs	r2, #17
 8004206:	6839      	ldr	r1, [r7, #0]
 8004208:	6838      	ldr	r0, [r7, #0]
 800420a:	f7fe ff07 	bl	800301c <_SendPacket>
  RECORD_END();
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f383 8811 	msr	BASEPRI, r3
}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	24005b30 	.word	0x24005b30

08004220 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004228:	f3ef 8311 	mrs	r3, BASEPRI
 800422c:	f04f 0120 	mov.w	r1, #32
 8004230:	f381 8811 	msr	BASEPRI, r1
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	4819      	ldr	r0, [pc, #100]	; (800429c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004238:	f7fe fdfe 	bl	8002e38 <_PreparePacket>
 800423c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004242:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e00b      	b.n	800426e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	1c59      	adds	r1, r3, #1
 800425e:	61f9      	str	r1, [r7, #28]
 8004260:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	09db      	lsrs	r3, r3, #7
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b7f      	cmp	r3, #127	; 0x7f
 8004272:	d8f0      	bhi.n	8004256 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	61fa      	str	r2, [r7, #28]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004284:	2208      	movs	r2, #8
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	6938      	ldr	r0, [r7, #16]
 800428a:	f7fe fec7 	bl	800301c <_SendPacket>
  RECORD_END();
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f383 8811 	msr	BASEPRI, r3
}
 8004294:	bf00      	nop
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	24005b30 	.word	0x24005b30
 80042a0:	24005b00 	.word	0x24005b00

080042a4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042ac:	f3ef 8311 	mrs	r3, BASEPRI
 80042b0:	f04f 0120 	mov.w	r1, #32
 80042b4:	f381 8811 	msr	BASEPRI, r1
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	4819      	ldr	r0, [pc, #100]	; (8004320 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80042bc:	f7fe fdbc 	bl	8002e38 <_PreparePacket>
 80042c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80042c6:	4b17      	ldr	r3, [pc, #92]	; (8004324 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	e00b      	b.n	80042f2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	1c59      	adds	r1, r3, #1
 80042e2:	61f9      	str	r1, [r7, #28]
 80042e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	09db      	lsrs	r3, r3, #7
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b7f      	cmp	r3, #127	; 0x7f
 80042f6:	d8f0      	bhi.n	80042da <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	61fa      	str	r2, [r7, #28]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004308:	2204      	movs	r2, #4
 800430a:	68f9      	ldr	r1, [r7, #12]
 800430c:	6938      	ldr	r0, [r7, #16]
 800430e:	f7fe fe85 	bl	800301c <_SendPacket>
  RECORD_END();
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f383 8811 	msr	BASEPRI, r3
}
 8004318:	bf00      	nop
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	24005b30 	.word	0x24005b30
 8004324:	24005b00 	.word	0x24005b00

08004328 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004330:	f3ef 8311 	mrs	r3, BASEPRI
 8004334:	f04f 0120 	mov.w	r1, #32
 8004338:	f381 8811 	msr	BASEPRI, r1
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	4819      	ldr	r0, [pc, #100]	; (80043a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004340:	f7fe fd7a 	bl	8002e38 <_PreparePacket>
 8004344:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800434a:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e00b      	b.n	8004376 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	1c59      	adds	r1, r3, #1
 8004366:	61f9      	str	r1, [r7, #28]
 8004368:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	09db      	lsrs	r3, r3, #7
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b7f      	cmp	r3, #127	; 0x7f
 800437a:	d8f0      	bhi.n	800435e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	61fa      	str	r2, [r7, #28]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800438c:	2206      	movs	r2, #6
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	6938      	ldr	r0, [r7, #16]
 8004392:	f7fe fe43 	bl	800301c <_SendPacket>
  RECORD_END();
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f383 8811 	msr	BASEPRI, r3
}
 800439c:	bf00      	nop
 800439e:	3720      	adds	r7, #32
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	24005b30 	.word	0x24005b30
 80043a8:	24005b00 	.word	0x24005b00

080043ac <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80043b6:	f3ef 8311 	mrs	r3, BASEPRI
 80043ba:	f04f 0120 	mov.w	r1, #32
 80043be:	f381 8811 	msr	BASEPRI, r1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	4827      	ldr	r0, [pc, #156]	; (8004464 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80043c6:	f7fe fd37 	bl	8002e38 <_PreparePacket>
 80043ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	e00b      	b.n	80043fc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	1c59      	adds	r1, r3, #1
 80043ec:	6279      	str	r1, [r7, #36]	; 0x24
 80043ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	09db      	lsrs	r3, r3, #7
 80043fa:	623b      	str	r3, [r7, #32]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004400:	d8f0      	bhi.n	80043e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	627a      	str	r2, [r7, #36]	; 0x24
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	e00b      	b.n	8004434 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	b2da      	uxtb	r2, r3
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	1c59      	adds	r1, r3, #1
 8004424:	61f9      	str	r1, [r7, #28]
 8004426:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	09db      	lsrs	r3, r3, #7
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b7f      	cmp	r3, #127	; 0x7f
 8004438:	d8f0      	bhi.n	800441c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	61fa      	str	r2, [r7, #28]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800444a:	2207      	movs	r2, #7
 800444c:	68f9      	ldr	r1, [r7, #12]
 800444e:	6938      	ldr	r0, [r7, #16]
 8004450:	f7fe fde4 	bl	800301c <_SendPacket>
  RECORD_END();
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f383 8811 	msr	BASEPRI, r3
}
 800445a:	bf00      	nop
 800445c:	3728      	adds	r7, #40	; 0x28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	24005b30 	.word	0x24005b30
 8004468:	24005b00 	.word	0x24005b00

0800446c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004474:	4b04      	ldr	r3, [pc, #16]	; (8004488 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	1ad3      	subs	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	24005b00 	.word	0x24005b00

0800448c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800448c:	b580      	push	{r7, lr}
 800448e:	b08c      	sub	sp, #48	; 0x30
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004496:	4b3b      	ldr	r3, [pc, #236]	; (8004584 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d06d      	beq.n	800457a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800449e:	4b39      	ldr	r3, [pc, #228]	; (8004584 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80044a4:	2300      	movs	r3, #0
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a8:	e008      	b.n	80044bc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	3301      	adds	r3, #1
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3f2      	bcc.n	80044aa <SEGGER_SYSVIEW_SendModule+0x1e>
 80044c4:	e000      	b.n	80044c8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80044c6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d055      	beq.n	800457a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044ce:	f3ef 8311 	mrs	r3, BASEPRI
 80044d2:	f04f 0120 	mov.w	r1, #32
 80044d6:	f381 8811 	msr	BASEPRI, r1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	482a      	ldr	r0, [pc, #168]	; (8004588 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80044de:	f7fe fcab 	bl	8002e38 <_PreparePacket>
 80044e2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	e00b      	b.n	800450a <SEGGER_SYSVIEW_SendModule+0x7e>
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	1c59      	adds	r1, r3, #1
 80044fa:	6279      	str	r1, [r7, #36]	; 0x24
 80044fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	09db      	lsrs	r3, r3, #7
 8004508:	623b      	str	r3, [r7, #32]
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	2b7f      	cmp	r3, #127	; 0x7f
 800450e:	d8f0      	bhi.n	80044f2 <SEGGER_SYSVIEW_SendModule+0x66>
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	627a      	str	r2, [r7, #36]	; 0x24
 8004516:	6a3a      	ldr	r2, [r7, #32]
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	e00b      	b.n	8004544 <SEGGER_SYSVIEW_SendModule+0xb8>
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	1c59      	adds	r1, r3, #1
 8004534:	61f9      	str	r1, [r7, #28]
 8004536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	09db      	lsrs	r3, r3, #7
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b7f      	cmp	r3, #127	; 0x7f
 8004548:	d8f0      	bhi.n	800452c <SEGGER_SYSVIEW_SendModule+0xa0>
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	61fa      	str	r2, [r7, #28]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2280      	movs	r2, #128	; 0x80
 8004560:	4619      	mov	r1, r3
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7fe fc18 	bl	8002d98 <_EncodeStr>
 8004568:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800456a:	2216      	movs	r2, #22
 800456c:	68f9      	ldr	r1, [r7, #12]
 800456e:	6938      	ldr	r0, [r7, #16]
 8004570:	f7fe fd54 	bl	800301c <_SendPacket>
      RECORD_END();
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800457a:	bf00      	nop
 800457c:	3730      	adds	r7, #48	; 0x30
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	24005b28 	.word	0x24005b28
 8004588:	24005b30 	.word	0x24005b30

0800458c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00f      	beq.n	80045ba <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f2      	bne.n	80045a0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	24005b28 	.word	0x24005b28

080045c8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80045ce:	f3ef 8311 	mrs	r3, BASEPRI
 80045d2:	f04f 0120 	mov.w	r1, #32
 80045d6:	f381 8811 	msr	BASEPRI, r1
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	4817      	ldr	r0, [pc, #92]	; (800463c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80045de:	f7fe fc2b 	bl	8002e38 <_PreparePacket>
 80045e2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	4b14      	ldr	r3, [pc, #80]	; (8004640 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	e00b      	b.n	800460c <SEGGER_SYSVIEW_SendNumModules+0x44>
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	1c59      	adds	r1, r3, #1
 80045fc:	6179      	str	r1, [r7, #20]
 80045fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	09db      	lsrs	r3, r3, #7
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b7f      	cmp	r3, #127	; 0x7f
 8004610:	d8f0      	bhi.n	80045f4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	617a      	str	r2, [r7, #20]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004622:	221b      	movs	r2, #27
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	68b8      	ldr	r0, [r7, #8]
 8004628:	f7fe fcf8 	bl	800301c <_SendPacket>
  RECORD_END();
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f383 8811 	msr	BASEPRI, r3
}
 8004632:	bf00      	nop
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	24005b30 	.word	0x24005b30
 8004640:	24005b2c 	.word	0x24005b2c

08004644 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8004644:	b40f      	push	{r0, r1, r2, r3}
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800464c:	f107 0314 	add.w	r3, r7, #20
 8004650:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8004652:	1d3b      	adds	r3, r7, #4
 8004654:	461a      	mov	r2, r3
 8004656:	2100      	movs	r1, #0
 8004658:	6938      	ldr	r0, [r7, #16]
 800465a:	f7fe ff69 	bl	8003530 <_VPrintTarget>
  va_end(ParamList);
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004668:	b004      	add	sp, #16
 800466a:	4770      	bx	lr

0800466c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004674:	f3ef 8311 	mrs	r3, BASEPRI
 8004678:	f04f 0120 	mov.w	r1, #32
 800467c:	f381 8811 	msr	BASEPRI, r1
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	4827      	ldr	r0, [pc, #156]	; (8004720 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004684:	f7fe fbd8 	bl	8002e38 <_PreparePacket>
 8004688:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	6938      	ldr	r0, [r7, #16]
 8004690:	f7fe fb82 	bl	8002d98 <_EncodeStr>
 8004694:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
 800469a:	2301      	movs	r3, #1
 800469c:	623b      	str	r3, [r7, #32]
 800469e:	e00b      	b.n	80046b8 <SEGGER_SYSVIEW_Warn+0x4c>
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	6279      	str	r1, [r7, #36]	; 0x24
 80046aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	09db      	lsrs	r3, r3, #7
 80046b6:	623b      	str	r3, [r7, #32]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2b7f      	cmp	r3, #127	; 0x7f
 80046bc:	d8f0      	bhi.n	80046a0 <SEGGER_SYSVIEW_Warn+0x34>
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	627a      	str	r2, [r7, #36]	; 0x24
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	e00b      	b.n	80046f0 <SEGGER_SYSVIEW_Warn+0x84>
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	1c59      	adds	r1, r3, #1
 80046e0:	61f9      	str	r1, [r7, #28]
 80046e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	09db      	lsrs	r3, r3, #7
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b7f      	cmp	r3, #127	; 0x7f
 80046f4:	d8f0      	bhi.n	80046d8 <SEGGER_SYSVIEW_Warn+0x6c>
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	61fa      	str	r2, [r7, #28]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004706:	221a      	movs	r2, #26
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	6938      	ldr	r0, [r7, #16]
 800470c:	f7fe fc86 	bl	800301c <_SendPacket>
  RECORD_END();
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f383 8811 	msr	BASEPRI, r3
}
 8004716:	bf00      	nop
 8004718:	3728      	adds	r7, #40	; 0x28
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	24005b30 	.word	0x24005b30

08004724 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800472a:	7e1b      	ldrb	r3, [r3, #24]
 800472c:	4619      	mov	r1, r3
 800472e:	4a13      	ldr	r2, [pc, #76]	; (800477c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004730:	460b      	mov	r3, r1
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	440b      	add	r3, r1
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4413      	add	r3, r2
 800473a:	336c      	adds	r3, #108	; 0x6c
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004740:	7e1b      	ldrb	r3, [r3, #24]
 8004742:	4618      	mov	r0, r3
 8004744:	490d      	ldr	r1, [pc, #52]	; (800477c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004746:	4603      	mov	r3, r0
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4403      	add	r3, r0
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	440b      	add	r3, r1
 8004750:	3370      	adds	r3, #112	; 0x70
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d00b      	beq.n	8004770 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004758:	4b07      	ldr	r3, [pc, #28]	; (8004778 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800475a:	789b      	ldrb	r3, [r3, #2]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d107      	bne.n	8004770 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004762:	2201      	movs	r2, #1
 8004764:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004766:	f7fe fb73 	bl	8002e50 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800476a:	4b03      	ldr	r3, [pc, #12]	; (8004778 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800476c:	2200      	movs	r2, #0
 800476e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8004770:	4b01      	ldr	r3, [pc, #4]	; (8004778 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004772:	781b      	ldrb	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	24005b00 	.word	0x24005b00
 800477c:	24005240 	.word	0x24005240

08004780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004786:	f000 fe55 	bl	8005434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800478a:	f000 f8d7 	bl	800493c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800478e:	f000 fa23 	bl	8004bd8 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8004792:	f000 f94f 	bl	8004a34 <MX_FDCAN2_Init>
  MX_USART2_UART_Init();
 8004796:	f000 f9b1 	bl	8004afc <MX_USART2_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 800479a:	f000 f9fb 	bl	8004b94 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
	user_data = "Start of program\r\n";
 800479e:	4b51      	ldr	r3, [pc, #324]	; (80048e4 <main+0x164>)
 80047a0:	4a51      	ldr	r2, [pc, #324]	; (80048e8 <main+0x168>)
 80047a2:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
 80047a4:	4b4f      	ldr	r3, [pc, #316]	; (80048e4 <main+0x164>)
 80047a6:	681c      	ldr	r4, [r3, #0]
 80047a8:	4b4e      	ldr	r3, [pc, #312]	; (80048e4 <main+0x164>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fb fde1 	bl	8000374 <strlen>
 80047b2:	4603      	mov	r3, r0
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ba:	4621      	mov	r1, r4
 80047bc:	484b      	ldr	r0, [pc, #300]	; (80048ec <main+0x16c>)
 80047be:	f004 ff2b 	bl	8009618 <HAL_UART_Transmit>

	// Enable CCYCCNT Counter
	DWT->CTRL |= (1 << 0);
 80047c2:	4b4b      	ldr	r3, [pc, #300]	; (80048f0 <main+0x170>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a4a      	ldr	r2, [pc, #296]	; (80048f0 <main+0x170>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6013      	str	r3, [r2, #0]

	// Used for SEGGER UART
	SEGGER_UART_init(115200);
 80047ce:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80047d2:	f7fd fe89 	bl	80024e8 <SEGGER_UART_init>

	//Starting SEGGER SYSVIEW
	  SEGGER_SYSVIEW_Conf();
 80047d6:	f7fd fbf5 	bl	8001fc4 <SEGGER_SYSVIEW_Conf>
	  //SEGGER_SYSVIEW_Start();

	  TaskStatus = xTaskCreate(Task_GreenLED_Handler, "GreenLED", 100, "Green LED TASK", 1, &Task_GreenLED_Handle);
 80047da:	4b46      	ldr	r3, [pc, #280]	; (80048f4 <main+0x174>)
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	2301      	movs	r3, #1
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	4b45      	ldr	r3, [pc, #276]	; (80048f8 <main+0x178>)
 80047e4:	2264      	movs	r2, #100	; 0x64
 80047e6:	4945      	ldr	r1, [pc, #276]	; (80048fc <main+0x17c>)
 80047e8:	4845      	ldr	r0, [pc, #276]	; (8004900 <main+0x180>)
 80047ea:	f7fc f801 	bl	80007f0 <xTaskCreate>
 80047ee:	6178      	str	r0, [r7, #20]
	  configASSERT(TaskStatus == pdPASS);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d00c      	beq.n	8004810 <main+0x90>
        __asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	b672      	cpsid	i
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	b662      	cpsie	i
 800480a:	613b      	str	r3, [r7, #16]
    }
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <main+0x8e>

	  Next_Task_Handle = Task_GreenLED_Handle;
 8004810:	4b38      	ldr	r3, [pc, #224]	; (80048f4 <main+0x174>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a3b      	ldr	r2, [pc, #236]	; (8004904 <main+0x184>)
 8004816:	6013      	str	r3, [r2, #0]

	  TaskStatus = xTaskCreate(Task_RedLED_Handler, "RedLED", 100, "Red LED TASK", 1, &Task_RedLED_Handle);
 8004818:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <main+0x188>)
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	2301      	movs	r3, #1
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	4b3a      	ldr	r3, [pc, #232]	; (800490c <main+0x18c>)
 8004822:	2264      	movs	r2, #100	; 0x64
 8004824:	493a      	ldr	r1, [pc, #232]	; (8004910 <main+0x190>)
 8004826:	483b      	ldr	r0, [pc, #236]	; (8004914 <main+0x194>)
 8004828:	f7fb ffe2 	bl	80007f0 <xTaskCreate>
 800482c:	6178      	str	r0, [r7, #20]
	  configASSERT(TaskStatus == pdPASS);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d00c      	beq.n	800484e <main+0xce>
        __asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	b672      	cpsid	i
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	b662      	cpsie	i
 8004848:	60fb      	str	r3, [r7, #12]
    }
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <main+0xcc>

	  TaskStatus = xTaskCreate(Task_BlueLED_Handler, "BlueLED", 100, "Blue LED TASK", 1, &Task_BlueLED_Handle);
 800484e:	4b32      	ldr	r3, [pc, #200]	; (8004918 <main+0x198>)
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	2301      	movs	r3, #1
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	4b31      	ldr	r3, [pc, #196]	; (800491c <main+0x19c>)
 8004858:	2264      	movs	r2, #100	; 0x64
 800485a:	4931      	ldr	r1, [pc, #196]	; (8004920 <main+0x1a0>)
 800485c:	4831      	ldr	r0, [pc, #196]	; (8004924 <main+0x1a4>)
 800485e:	f7fb ffc7 	bl	80007f0 <xTaskCreate>
 8004862:	6178      	str	r0, [r7, #20]
	  configASSERT(TaskStatus == pdPASS);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d00c      	beq.n	8004884 <main+0x104>
        __asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	b672      	cpsid	i
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	b662      	cpsie	i
 800487e:	60bb      	str	r3, [r7, #8]
    }
 8004880:	bf00      	nop
 8004882:	e7fe      	b.n	8004882 <main+0x102>

	  TaskStatus = xTaskCreate(Task_Button_Handler, "Button", 100, "Button TASK", 4, &Task_Button_Handle);
 8004884:	4b28      	ldr	r3, [pc, #160]	; (8004928 <main+0x1a8>)
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	2304      	movs	r3, #4
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	4b27      	ldr	r3, [pc, #156]	; (800492c <main+0x1ac>)
 800488e:	2264      	movs	r2, #100	; 0x64
 8004890:	4927      	ldr	r1, [pc, #156]	; (8004930 <main+0x1b0>)
 8004892:	4828      	ldr	r0, [pc, #160]	; (8004934 <main+0x1b4>)
 8004894:	f7fb ffac 	bl	80007f0 <xTaskCreate>
 8004898:	6178      	str	r0, [r7, #20]
	  configASSERT(TaskStatus == pdPASS);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d00c      	beq.n	80048ba <main+0x13a>
        __asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	b672      	cpsid	i
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	b662      	cpsie	i
 80048b4:	607b      	str	r3, [r7, #4]
    }
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <main+0x138>

	  // Start FreeRTOS scheduler
	  vTaskStartScheduler();
 80048ba:	f7fc fa5f 	bl	8000d7c <vTaskStartScheduler>

		user_data = "Scheduler called \r\n";
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <main+0x164>)
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <main+0x1b8>)
 80048c2:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <main+0x164>)
 80048c6:	681c      	ldr	r4, [r3, #0]
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <main+0x164>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fb fd51 	bl	8000374 <strlen>
 80048d2:	4603      	mov	r3, r0
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	f04f 33ff 	mov.w	r3, #4294967295
 80048da:	4621      	mov	r1, r4
 80048dc:	4803      	ldr	r0, [pc, #12]	; (80048ec <main+0x16c>)
 80048de:	f004 fe9b 	bl	8009618 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80048e2:	e7fe      	b.n	80048e2 <main+0x162>
 80048e4:	24000010 	.word	0x24000010
 80048e8:	0800aca4 	.word	0x0800aca4
 80048ec:	24005cb4 	.word	0x24005cb4
 80048f0:	e0001000 	.word	0xe0001000
 80048f4:	24006048 	.word	0x24006048
 80048f8:	0800acb8 	.word	0x0800acb8
 80048fc:	0800acc8 	.word	0x0800acc8
 8004900:	08004cb9 	.word	0x08004cb9
 8004904:	24006058 	.word	0x24006058
 8004908:	2400604c 	.word	0x2400604c
 800490c:	0800acd4 	.word	0x0800acd4
 8004910:	0800ace4 	.word	0x0800ace4
 8004914:	08004d49 	.word	0x08004d49
 8004918:	24006050 	.word	0x24006050
 800491c:	0800acec 	.word	0x0800acec
 8004920:	0800acfc 	.word	0x0800acfc
 8004924:	08004dd9 	.word	0x08004dd9
 8004928:	24006054 	.word	0x24006054
 800492c:	0800ad04 	.word	0x0800ad04
 8004930:	0800ad10 	.word	0x0800ad10
 8004934:	08004e71 	.word	0x08004e71
 8004938:	0800ad18 	.word	0x0800ad18

0800493c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b09c      	sub	sp, #112	; 0x70
 8004940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004946:	224c      	movs	r2, #76	; 0x4c
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f006 f92c 	bl	800aba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004950:	1d3b      	adds	r3, r7, #4
 8004952:	2220      	movs	r2, #32
 8004954:	2100      	movs	r1, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f006 f926 	bl	800aba8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800495c:	2002      	movs	r0, #2
 800495e:	f001 ffab 	bl	80068b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004962:	2300      	movs	r3, #0
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4b31      	ldr	r3, [pc, #196]	; (8004a2c <SystemClock_Config+0xf0>)
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	4a30      	ldr	r2, [pc, #192]	; (8004a2c <SystemClock_Config+0xf0>)
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004972:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <SystemClock_Config+0xf0>)
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	4b2c      	ldr	r3, [pc, #176]	; (8004a30 <SystemClock_Config+0xf4>)
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004984:	4a2a      	ldr	r2, [pc, #168]	; (8004a30 <SystemClock_Config+0xf4>)
 8004986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800498a:	6193      	str	r3, [r2, #24]
 800498c:	4b28      	ldr	r3, [pc, #160]	; (8004a30 <SystemClock_Config+0xf4>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004998:	bf00      	nop
 800499a:	4b25      	ldr	r3, [pc, #148]	; (8004a30 <SystemClock_Config+0xf4>)
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a6:	d1f8      	bne.n	800499a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80049a8:	2301      	movs	r3, #1
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80049ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049b2:	2302      	movs	r3, #2
 80049b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049b6:	2302      	movs	r3, #2
 80049b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80049ba:	2301      	movs	r3, #1
 80049bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80049be:	2312      	movs	r3, #18
 80049c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80049c2:	2302      	movs	r3, #2
 80049c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80049c6:	2303      	movs	r3, #3
 80049c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80049ca:	2302      	movs	r3, #2
 80049cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80049ce:	230c      	movs	r3, #12
 80049d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80049d2:	2302      	movs	r3, #2
 80049d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80049d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80049da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 ffb3 	bl	800694c <HAL_RCC_OscConfig>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80049ec:	f000 fa7a 	bl	8004ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049f0:	233f      	movs	r3, #63	; 0x3f
 80049f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80049f4:	2302      	movs	r3, #2
 80049f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004a04:	2340      	movs	r3, #64	; 0x40
 8004a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004a10:	1d3b      	adds	r3, r7, #4
 8004a12:	2100      	movs	r1, #0
 8004a14:	4618      	mov	r0, r3
 8004a16:	f002 fba7 	bl	8007168 <HAL_RCC_ClockConfig>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8004a20:	f000 fa60 	bl	8004ee4 <Error_Handler>
  }
}
 8004a24:	bf00      	nop
 8004a26:	3770      	adds	r7, #112	; 0x70
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	58000400 	.word	0x58000400
 8004a30:	58024800 	.word	0x58024800

08004a34 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004a38:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a3a:	4a2f      	ldr	r2, [pc, #188]	; (8004af8 <MX_FDCAN2_Init+0xc4>)
 8004a3c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004a3e:	4b2d      	ldr	r3, [pc, #180]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8004a44:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8004a4a:	4b2a      	ldr	r3, [pc, #168]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8004a50:	4b28      	ldr	r3, [pc, #160]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8004a56:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8004a5c:	4b25      	ldr	r3, [pc, #148]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8004a62:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8004a68:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8004a6e:	4b21      	ldr	r3, [pc, #132]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a70:	2202      	movs	r2, #2
 8004a72:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8004a74:	4b1f      	ldr	r3, [pc, #124]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8004a7a:	4b1e      	ldr	r3, [pc, #120]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8004a80:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8004a86:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8004a8c:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8004a92:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8004a98:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004aa4:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004ab0:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8004ab6:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004abc:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004abe:	2204      	movs	r2, #4
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8004ace:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004ad4:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004adc:	2204      	movs	r2, #4
 8004ade:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8004ae0:	4804      	ldr	r0, [pc, #16]	; (8004af4 <MX_FDCAN2_Init+0xc0>)
 8004ae2:	f000 fe13 	bl	800570c <HAL_FDCAN_Init>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8004aec:	f000 f9fa 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8004af0:	bf00      	nop
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	24005c14 	.word	0x24005c14
 8004af8:	4000a400 	.word	0x4000a400

08004afc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004b00:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b02:	4a23      	ldr	r2, [pc, #140]	; (8004b90 <MX_USART2_UART_Init+0x94>)
 8004b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004b06:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004b14:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004b1a:	4b1c      	ldr	r3, [pc, #112]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b22:	220c      	movs	r2, #12
 8004b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b26:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b2c:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b32:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004b44:	4811      	ldr	r0, [pc, #68]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b46:	f004 fd17 	bl	8009578 <HAL_UART_Init>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004b50:	f000 f9c8 	bl	8004ee4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b54:	2100      	movs	r1, #0
 8004b56:	480d      	ldr	r0, [pc, #52]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b58:	f005 fd04 	bl	800a564 <HAL_UARTEx_SetTxFifoThreshold>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004b62:	f000 f9bf 	bl	8004ee4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b66:	2100      	movs	r1, #0
 8004b68:	4808      	ldr	r0, [pc, #32]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b6a:	f005 fd39 	bl	800a5e0 <HAL_UARTEx_SetRxFifoThreshold>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004b74:	f000 f9b6 	bl	8004ee4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004b78:	4804      	ldr	r0, [pc, #16]	; (8004b8c <MX_USART2_UART_Init+0x90>)
 8004b7a:	f005 fcba 	bl	800a4f2 <HAL_UARTEx_DisableFifoMode>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004b84:	f000 f9ae 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	24005cb4 	.word	0x24005cb4
 8004b90:	40004400 	.word	0x40004400

08004b94 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004b98:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	; (8004bd4 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8004b9c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8004b9e:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004ba0:	2210      	movs	r2, #16
 8004ba2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004baa:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004bbc:	4804      	ldr	r0, [pc, #16]	; (8004bd0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004bbe:	f001 fe18 	bl	80067f2 <HAL_HCD_Init>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8004bc8:	f000 f98c 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004bcc:	bf00      	nop
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	24005d44 	.word	0x24005d44
 8004bd4:	40080000 	.word	0x40080000

08004bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bde:	f107 0314 	add.w	r3, r7, #20
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	609a      	str	r2, [r3, #8]
 8004bea:	60da      	str	r2, [r3, #12]
 8004bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bee:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bf4:	4a2e      	ldr	r2, [pc, #184]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004bf6:	f043 0304 	orr.w	r3, r3, #4
 8004bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bfe:	4b2c      	ldr	r3, [pc, #176]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c0c:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c12:	4a27      	ldr	r2, [pc, #156]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c1c:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c2a:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c30:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c3a:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c48:	4b19      	ldr	r3, [pc, #100]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c4e:	4a18      	ldr	r2, [pc, #96]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004c50:	f043 0302 	orr.w	r3, r3, #2
 8004c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c58:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <MX_GPIO_Init+0xd8>)
 8004c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	607b      	str	r3, [r7, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8004c66:	2200      	movs	r2, #0
 8004c68:	2107      	movs	r1, #7
 8004c6a:	4812      	ldr	r0, [pc, #72]	; (8004cb4 <MX_GPIO_Init+0xdc>)
 8004c6c:	f001 fd8e 	bl	800678c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c7e:	f107 0314 	add.w	r3, r7, #20
 8004c82:	4619      	mov	r1, r3
 8004c84:	480b      	ldr	r0, [pc, #44]	; (8004cb4 <MX_GPIO_Init+0xdc>)
 8004c86:	f001 fbb9 	bl	80063fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004c8a:	2307      	movs	r3, #7
 8004c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c96:	2300      	movs	r3, #0
 8004c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c9a:	f107 0314 	add.w	r3, r7, #20
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4804      	ldr	r0, [pc, #16]	; (8004cb4 <MX_GPIO_Init+0xdc>)
 8004ca2:	f001 fbab 	bl	80063fc <HAL_GPIO_Init>

}
 8004ca6:	bf00      	nop
 8004ca8:	3728      	adds	r7, #40	; 0x28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	58024400 	.word	0x58024400
 8004cb4:	58020800 	.word	0x58020800

08004cb8 <Task_GreenLED_Handler>:

/* USER CODE BEGIN 4 */
static void Task_GreenLED_Handler(void* parameters)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	6078      	str	r0, [r7, #4]
	TickType_t LastWakeUpTime = xTaskGetTickCount();
 8004cc0:	f7fc f95e 	bl	8000f80 <xTaskGetTickCount>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	60bb      	str	r3, [r7, #8]
	{
//		user_data = "Green -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8004cc8:	481b      	ldr	r0, [pc, #108]	; (8004d38 <Task_GreenLED_Handler+0x80>)
 8004cca:	f7ff fcbb 	bl	8004644 <SEGGER_SYSVIEW_PrintfTarget>


		// 1000 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004cce:	2102      	movs	r1, #2
 8004cd0:	481a      	ldr	r0, [pc, #104]	; (8004d3c <Task_GreenLED_Handler+0x84>)
 8004cd2:	f001 fd74 	bl	80067be <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(1000));
 8004cd6:	f107 0308 	add.w	r3, r7, #8
 8004cda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fb ff8a 	bl	8000bf8 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	4815      	ldr	r0, [pc, #84]	; (8004d3c <Task_GreenLED_Handler+0x84>)
 8004ce8:	f001 fd69 	bl	80067be <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(1000));
 8004cec:	f107 0308 	add.w	r3, r7, #8
 8004cf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fb ff7f 	bl	8000bf8 <xTaskDelayUntil>
		NotificationStatus =xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8004cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	2300      	movs	r3, #0
 8004d02:	2200      	movs	r2, #0
 8004d04:	2100      	movs	r1, #0
 8004d06:	2000      	movs	r0, #0
 8004d08:	f7fc fb10 	bl	800132c <xTaskGenericNotifyWait>
 8004d0c:	60f8      	str	r0, [r7, #12]
		if(NotificationStatus == pdTRUE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d1d9      	bne.n	8004cc8 <Task_GreenLED_Handler+0x10>
		{
			vTaskSuspendAll();
 8004d14:	f7fc f892 	bl	8000e3c <vTaskSuspendAll>
			Next_Task_Handle = Task_RedLED_Handle;
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <Task_GreenLED_Handler+0x88>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <Task_GreenLED_Handler+0x8c>)
 8004d1e:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8004d20:	f7fc f89a 	bl	8000e58 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Green_PIN, GPIO_PIN_SET);
 8004d24:	2201      	movs	r2, #1
 8004d26:	2102      	movs	r1, #2
 8004d28:	4804      	ldr	r0, [pc, #16]	; (8004d3c <Task_GreenLED_Handler+0x84>)
 8004d2a:	f001 fd2f 	bl	800678c <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f7fb feb6 	bl	8000aa0 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8004d34:	e7c8      	b.n	8004cc8 <Task_GreenLED_Handler+0x10>
 8004d36:	bf00      	nop
 8004d38:	0800ad2c 	.word	0x0800ad2c
 8004d3c:	58020800 	.word	0x58020800
 8004d40:	2400604c 	.word	0x2400604c
 8004d44:	24006058 	.word	0x24006058

08004d48 <Task_RedLED_Handler>:
	}
}


static void Task_RedLED_Handler(void* parameters)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	6078      	str	r0, [r7, #4]
	TickType_t LastWakeUpTime = xTaskGetTickCount();
 8004d50:	f7fc f916 	bl	8000f80 <xTaskGetTickCount>
 8004d54:	4603      	mov	r3, r0
 8004d56:	60bb      	str	r3, [r7, #8]
	{
//		user_data = "Red -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8004d58:	481b      	ldr	r0, [pc, #108]	; (8004dc8 <Task_RedLED_Handler+0x80>)
 8004d5a:	f7ff fc73 	bl	8004644 <SEGGER_SYSVIEW_PrintfTarget>


		// 800 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004d5e:	2101      	movs	r1, #1
 8004d60:	481a      	ldr	r0, [pc, #104]	; (8004dcc <Task_RedLED_Handler+0x84>)
 8004d62:	f001 fd2c 	bl	80067be <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(800));
 8004d66:	f107 0308 	add.w	r3, r7, #8
 8004d6a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fb ff42 	bl	8000bf8 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004d74:	2101      	movs	r1, #1
 8004d76:	4815      	ldr	r0, [pc, #84]	; (8004dcc <Task_RedLED_Handler+0x84>)
 8004d78:	f001 fd21 	bl	80067be <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(800));
 8004d7c:	f107 0308 	add.w	r3, r7, #8
 8004d80:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fb ff37 	bl	8000bf8 <xTaskDelayUntil>
		NotificationStatus =xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8004d8a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	2300      	movs	r3, #0
 8004d92:	2200      	movs	r2, #0
 8004d94:	2100      	movs	r1, #0
 8004d96:	2000      	movs	r0, #0
 8004d98:	f7fc fac8 	bl	800132c <xTaskGenericNotifyWait>
 8004d9c:	60f8      	str	r0, [r7, #12]
		if(NotificationStatus == pdTRUE)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d1d9      	bne.n	8004d58 <Task_RedLED_Handler+0x10>
		{
			vTaskSuspendAll();
 8004da4:	f7fc f84a 	bl	8000e3c <vTaskSuspendAll>
			Next_Task_Handle = Task_BlueLED_Handle;
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <Task_RedLED_Handler+0x88>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <Task_RedLED_Handler+0x8c>)
 8004dae:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8004db0:	f7fc f852 	bl	8000e58 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Red_PIN, GPIO_PIN_SET);
 8004db4:	2201      	movs	r2, #1
 8004db6:	2101      	movs	r1, #1
 8004db8:	4804      	ldr	r0, [pc, #16]	; (8004dcc <Task_RedLED_Handler+0x84>)
 8004dba:	f001 fce7 	bl	800678c <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	f7fb fe6e 	bl	8000aa0 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8004dc4:	e7c8      	b.n	8004d58 <Task_RedLED_Handler+0x10>
 8004dc6:	bf00      	nop
 8004dc8:	0800ad40 	.word	0x0800ad40
 8004dcc:	58020800 	.word	0x58020800
 8004dd0:	24006050 	.word	0x24006050
 8004dd4:	24006058 	.word	0x24006058

08004dd8 <Task_BlueLED_Handler>:
	}
}


static void Task_BlueLED_Handler(void* parameters)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	6078      	str	r0, [r7, #4]
	TickType_t LastWakeUpTime = xTaskGetTickCount();
 8004de0:	f7fc f8ce 	bl	8000f80 <xTaskGetTickCount>
 8004de4:	4603      	mov	r3, r0
 8004de6:	60bb      	str	r3, [r7, #8]
	{
//		user_data = "Blue -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8004de8:	481d      	ldr	r0, [pc, #116]	; (8004e60 <Task_BlueLED_Handler+0x88>)
 8004dea:	f7ff fc2b 	bl	8004644 <SEGGER_SYSVIEW_PrintfTarget>


		// 400 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004dee:	2104      	movs	r1, #4
 8004df0:	481c      	ldr	r0, [pc, #112]	; (8004e64 <Task_BlueLED_Handler+0x8c>)
 8004df2:	f001 fce4 	bl	80067be <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(400));
 8004df6:	f107 0308 	add.w	r3, r7, #8
 8004dfa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fb fefa 	bl	8000bf8 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004e04:	2104      	movs	r1, #4
 8004e06:	4817      	ldr	r0, [pc, #92]	; (8004e64 <Task_BlueLED_Handler+0x8c>)
 8004e08:	f001 fcd9 	bl	80067be <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(400));
 8004e0c:	f107 0308 	add.w	r3, r7, #8
 8004e10:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fb feef 	bl	8000bf8 <xTaskDelayUntil>
		NotificationStatus =xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8004e1a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	2300      	movs	r3, #0
 8004e22:	2200      	movs	r2, #0
 8004e24:	2100      	movs	r1, #0
 8004e26:	2000      	movs	r0, #0
 8004e28:	f7fc fa80 	bl	800132c <xTaskGenericNotifyWait>
 8004e2c:	60f8      	str	r0, [r7, #12]
		if(NotificationStatus == pdTRUE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d1d9      	bne.n	8004de8 <Task_BlueLED_Handler+0x10>
		{
			vTaskSuspendAll();
 8004e34:	f7fc f802 	bl	8000e3c <vTaskSuspendAll>
			Next_Task_Handle = NULL;
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <Task_BlueLED_Handler+0x90>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8004e3e:	f7fc f80b 	bl	8000e58 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Blue_PIN, GPIO_PIN_SET);
 8004e42:	2201      	movs	r2, #1
 8004e44:	2104      	movs	r1, #4
 8004e46:	4807      	ldr	r0, [pc, #28]	; (8004e64 <Task_BlueLED_Handler+0x8c>)
 8004e48:	f001 fca0 	bl	800678c <HAL_GPIO_WritePin>
			vTaskDelete(Task_Button_Handle);
 8004e4c:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <Task_BlueLED_Handler+0x94>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fb fe25 	bl	8000aa0 <vTaskDelete>
			vTaskDelete(NULL);
 8004e56:	2000      	movs	r0, #0
 8004e58:	f7fb fe22 	bl	8000aa0 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8004e5c:	e7c4      	b.n	8004de8 <Task_BlueLED_Handler+0x10>
 8004e5e:	bf00      	nop
 8004e60:	0800ad54 	.word	0x0800ad54
 8004e64:	58020800 	.word	0x58020800
 8004e68:	24006058 	.word	0x24006058
 8004e6c:	24006054 	.word	0x24006054

08004e70 <Task_Button_Handler>:
	}
}


static void Task_Button_Handler(void* parameters)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	6078      	str	r0, [r7, #4]
	uint8_t Button_Read = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_Read = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		Button_Read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8004e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e84:	480c      	ldr	r0, [pc, #48]	; (8004eb8 <Task_Button_Handler+0x48>)
 8004e86:	f001 fc69 	bl	800675c <HAL_GPIO_ReadPin>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	73bb      	strb	r3, [r7, #14]

		if(Button_Read)
 8004e8e:	7bbb      	ldrb	r3, [r7, #14]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00b      	beq.n	8004eac <Task_Button_Handler+0x3c>
		{
			if (! prev_Read)
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d108      	bne.n	8004eac <Task_Button_Handler+0x3c>
				xTaskNotify(Next_Task_Handle, 0, eNoAction);
 8004e9a:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <Task_Button_Handler+0x4c>)
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	f7fc fad0 	bl	800144c <xTaskGenericNotify>
		}
		prev_Read = Button_Read;
 8004eac:	7bbb      	ldrb	r3, [r7, #14]
 8004eae:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8004eb0:	200a      	movs	r0, #10
 8004eb2:	f7fb ff29 	bl	8000d08 <vTaskDelay>
		Button_Read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8004eb6:	e7e3      	b.n	8004e80 <Task_Button_Handler+0x10>
 8004eb8:	58020800 	.word	0x58020800
 8004ebc:	24006058 	.word	0x24006058

08004ec0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004ed2:	f000 faeb 	bl	80054ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40001000 	.word	0x40001000

08004ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ee8:	b672      	cpsid	i
}
 8004eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004eec:	e7fe      	b.n	8004eec <Error_Handler+0x8>
	...

08004ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <HAL_MspInit+0x30>)
 8004ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <HAL_MspInit+0x30>)
 8004efe:	f043 0302 	orr.w	r3, r3, #2
 8004f02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <HAL_MspInit+0x30>)
 8004f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	58024400 	.word	0x58024400

08004f24 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b0b8      	sub	sp, #224	; 0xe0
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f3c:	f107 0310 	add.w	r3, r7, #16
 8004f40:	22bc      	movs	r2, #188	; 0xbc
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f005 fe2f 	bl	800aba8 <memset>
  if(hfdcan->Instance==FDCAN2)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a29      	ldr	r2, [pc, #164]	; (8004ff4 <HAL_FDCAN_MspInit+0xd0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d14b      	bne.n	8004fec <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004f5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f5e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f60:	f107 0310 	add.w	r3, r7, #16
 8004f64:	4618      	mov	r0, r3
 8004f66:	f002 fccd 	bl	8007904 <HAL_RCCEx_PeriphCLKConfig>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004f70:	f7ff ffb8 	bl	8004ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004f74:	4b20      	ldr	r3, [pc, #128]	; (8004ff8 <HAL_FDCAN_MspInit+0xd4>)
 8004f76:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004f7a:	4a1f      	ldr	r2, [pc, #124]	; (8004ff8 <HAL_FDCAN_MspInit+0xd4>)
 8004f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f80:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004f84:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <HAL_FDCAN_MspInit+0xd4>)
 8004f86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f92:	4b19      	ldr	r3, [pc, #100]	; (8004ff8 <HAL_FDCAN_MspInit+0xd4>)
 8004f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f98:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <HAL_FDCAN_MspInit+0xd4>)
 8004f9a:	f043 0302 	orr.w	r3, r3, #2
 8004f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fa2:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <HAL_FDCAN_MspInit+0xd4>)
 8004fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004fb0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8004fca:	2309      	movs	r3, #9
 8004fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4809      	ldr	r0, [pc, #36]	; (8004ffc <HAL_FDCAN_MspInit+0xd8>)
 8004fd8:	f001 fa10 	bl	80063fc <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2100      	movs	r1, #0
 8004fe0:	2016      	movs	r0, #22
 8004fe2:	f000 fb6b 	bl	80056bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8004fe6:	2016      	movs	r0, #22
 8004fe8:	f000 fb82 	bl	80056f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8004fec:	bf00      	nop
 8004fee:	37e0      	adds	r7, #224	; 0xe0
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	4000a400 	.word	0x4000a400
 8004ff8:	58024400 	.word	0x58024400
 8004ffc:	58020400 	.word	0x58020400

08005000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b0b8      	sub	sp, #224	; 0xe0
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005008:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	609a      	str	r2, [r3, #8]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005018:	f107 0310 	add.w	r3, r7, #16
 800501c:	22bc      	movs	r2, #188	; 0xbc
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f005 fdc1 	bl	800aba8 <memset>
  if(huart->Instance==USART2)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a24      	ldr	r2, [pc, #144]	; (80050bc <HAL_UART_MspInit+0xbc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d141      	bne.n	80050b4 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005030:	2302      	movs	r3, #2
 8005032:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005034:	2300      	movs	r3, #0
 8005036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800503a:	f107 0310 	add.w	r3, r7, #16
 800503e:	4618      	mov	r0, r3
 8005040:	f002 fc60 	bl	8007904 <HAL_RCCEx_PeriphCLKConfig>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800504a:	f7ff ff4b 	bl	8004ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800504e:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <HAL_UART_MspInit+0xc0>)
 8005050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005054:	4a1a      	ldr	r2, [pc, #104]	; (80050c0 <HAL_UART_MspInit+0xc0>)
 8005056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800505a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800505e:	4b18      	ldr	r3, [pc, #96]	; (80050c0 <HAL_UART_MspInit+0xc0>)
 8005060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506c:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <HAL_UART_MspInit+0xc0>)
 800506e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005072:	4a13      	ldr	r2, [pc, #76]	; (80050c0 <HAL_UART_MspInit+0xc0>)
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800507c:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <HAL_UART_MspInit+0xc0>)
 800507e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800508a:	230c      	movs	r3, #12
 800508c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005090:	2302      	movs	r3, #2
 8005092:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005096:	2300      	movs	r3, #0
 8005098:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800509c:	2300      	movs	r3, #0
 800509e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80050a2:	2307      	movs	r3, #7
 80050a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80050ac:	4619      	mov	r1, r3
 80050ae:	4805      	ldr	r0, [pc, #20]	; (80050c4 <HAL_UART_MspInit+0xc4>)
 80050b0:	f001 f9a4 	bl	80063fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80050b4:	bf00      	nop
 80050b6:	37e0      	adds	r7, #224	; 0xe0
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40004400 	.word	0x40004400
 80050c0:	58024400 	.word	0x58024400
 80050c4:	58020000 	.word	0x58020000

080050c8 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b0b8      	sub	sp, #224	; 0xe0
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050e0:	f107 0310 	add.w	r3, r7, #16
 80050e4:	22bc      	movs	r2, #188	; 0xbc
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f005 fd5d 	bl	800aba8 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a27      	ldr	r2, [pc, #156]	; (8005190 <HAL_HCD_MspInit+0xc8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d146      	bne.n	8005186 <HAL_HCD_MspInit+0xbe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80050f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80050fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005106:	f107 0310 	add.w	r3, r7, #16
 800510a:	4618      	mov	r0, r3
 800510c:	f002 fbfa 	bl	8007904 <HAL_RCCEx_PeriphCLKConfig>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8005116:	f7ff fee5 	bl	8004ee4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800511a:	f001 fc07 	bl	800692c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800511e:	4b1d      	ldr	r3, [pc, #116]	; (8005194 <HAL_HCD_MspInit+0xcc>)
 8005120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005124:	4a1b      	ldr	r2, [pc, #108]	; (8005194 <HAL_HCD_MspInit+0xcc>)
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800512e:	4b19      	ldr	r3, [pc, #100]	; (8005194 <HAL_HCD_MspInit+0xcc>)
 8005130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800513c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005140:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005144:	2302      	movs	r3, #2
 8005146:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514a:	2300      	movs	r3, #0
 800514c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005150:	2300      	movs	r3, #0
 8005152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8005156:	230a      	movs	r3, #10
 8005158:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800515c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005160:	4619      	mov	r1, r3
 8005162:	480d      	ldr	r0, [pc, #52]	; (8005198 <HAL_HCD_MspInit+0xd0>)
 8005164:	f001 f94a 	bl	80063fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <HAL_HCD_MspInit+0xcc>)
 800516a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800516e:	4a09      	ldr	r2, [pc, #36]	; (8005194 <HAL_HCD_MspInit+0xcc>)
 8005170:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005174:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005178:	4b06      	ldr	r3, [pc, #24]	; (8005194 <HAL_HCD_MspInit+0xcc>)
 800517a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800517e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005182:	60bb      	str	r3, [r7, #8]
 8005184:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005186:	bf00      	nop
 8005188:	37e0      	adds	r7, #224	; 0xe0
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40080000 	.word	0x40080000
 8005194:	58024400 	.word	0x58024400
 8005198:	58020000 	.word	0x58020000

0800519c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b090      	sub	sp, #64	; 0x40
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b0f      	cmp	r3, #15
 80051a8:	d827      	bhi.n	80051fa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80051aa:	2200      	movs	r2, #0
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	2036      	movs	r0, #54	; 0x36
 80051b0:	f000 fa84 	bl	80056bc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80051b4:	2036      	movs	r0, #54	; 0x36
 80051b6:	f000 fa9b 	bl	80056f0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80051ba:	4a29      	ldr	r2, [pc, #164]	; (8005260 <HAL_InitTick+0xc4>)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80051c0:	4b28      	ldr	r3, [pc, #160]	; (8005264 <HAL_InitTick+0xc8>)
 80051c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051c6:	4a27      	ldr	r2, [pc, #156]	; (8005264 <HAL_InitTick+0xc8>)
 80051c8:	f043 0310 	orr.w	r3, r3, #16
 80051cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051d0:	4b24      	ldr	r3, [pc, #144]	; (8005264 <HAL_InitTick+0xc8>)
 80051d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80051de:	f107 0210 	add.w	r2, r7, #16
 80051e2:	f107 0314 	add.w	r3, r7, #20
 80051e6:	4611      	mov	r1, r2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f002 fb49 	bl	8007880 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <HAL_InitTick+0x6a>
 80051f8:	e001      	b.n	80051fe <HAL_InitTick+0x62>
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e02b      	b.n	8005256 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80051fe:	f002 fb13 	bl	8007828 <HAL_RCC_GetPCLK1Freq>
 8005202:	63f8      	str	r0, [r7, #60]	; 0x3c
 8005204:	e004      	b.n	8005210 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005206:	f002 fb0f 	bl	8007828 <HAL_RCC_GetPCLK1Freq>
 800520a:	4603      	mov	r3, r0
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005212:	4a15      	ldr	r2, [pc, #84]	; (8005268 <HAL_InitTick+0xcc>)
 8005214:	fba2 2303 	umull	r2, r3, r2, r3
 8005218:	0c9b      	lsrs	r3, r3, #18
 800521a:	3b01      	subs	r3, #1
 800521c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800521e:	4b13      	ldr	r3, [pc, #76]	; (800526c <HAL_InitTick+0xd0>)
 8005220:	4a13      	ldr	r2, [pc, #76]	; (8005270 <HAL_InitTick+0xd4>)
 8005222:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005224:	4b11      	ldr	r3, [pc, #68]	; (800526c <HAL_InitTick+0xd0>)
 8005226:	f240 32e7 	movw	r2, #999	; 0x3e7
 800522a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800522c:	4a0f      	ldr	r2, [pc, #60]	; (800526c <HAL_InitTick+0xd0>)
 800522e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005230:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <HAL_InitTick+0xd0>)
 8005234:	2200      	movs	r2, #0
 8005236:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <HAL_InitTick+0xd0>)
 800523a:	2200      	movs	r2, #0
 800523c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800523e:	480b      	ldr	r0, [pc, #44]	; (800526c <HAL_InitTick+0xd0>)
 8005240:	f003 fec8 	bl	8008fd4 <HAL_TIM_Base_Init>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d104      	bne.n	8005254 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800524a:	4808      	ldr	r0, [pc, #32]	; (800526c <HAL_InitTick+0xd0>)
 800524c:	f003 ff24 	bl	8009098 <HAL_TIM_Base_Start_IT>
 8005250:	4603      	mov	r3, r0
 8005252:	e000      	b.n	8005256 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
}
 8005256:	4618      	mov	r0, r3
 8005258:	3740      	adds	r7, #64	; 0x40
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	2400001c 	.word	0x2400001c
 8005264:	58024400 	.word	0x58024400
 8005268:	431bde83 	.word	0x431bde83
 800526c:	2400605c 	.word	0x2400605c
 8005270:	40001000 	.word	0x40001000

08005274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005278:	e7fe      	b.n	8005278 <NMI_Handler+0x4>

0800527a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800527a:	b480      	push	{r7}
 800527c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800527e:	e7fe      	b.n	800527e <HardFault_Handler+0x4>

08005280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005284:	e7fe      	b.n	8005284 <MemManage_Handler+0x4>

08005286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800528a:	e7fe      	b.n	800528a <BusFault_Handler+0x4>

0800528c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005290:	e7fe      	b.n	8005290 <UsageFault_Handler+0x4>

08005292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005292:	b480      	push	{r7}
 8005294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005296:	bf00      	nop
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80052a4:	4802      	ldr	r0, [pc, #8]	; (80052b0 <FDCAN2_IT1_IRQHandler+0x10>)
 80052a6:	f000 fc0f 	bl	8005ac8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	24005c14 	.word	0x24005c14

080052b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80052b8:	4802      	ldr	r0, [pc, #8]	; (80052c4 <TIM6_DAC_IRQHandler+0x10>)
 80052ba:	f003 ff5d 	bl	8009178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	2400605c 	.word	0x2400605c

080052c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80052cc:	4b39      	ldr	r3, [pc, #228]	; (80053b4 <SystemInit+0xec>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	4a38      	ldr	r2, [pc, #224]	; (80053b4 <SystemInit+0xec>)
 80052d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80052dc:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <SystemInit+0xf0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	2b06      	cmp	r3, #6
 80052e6:	d807      	bhi.n	80052f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80052e8:	4b33      	ldr	r3, [pc, #204]	; (80053b8 <SystemInit+0xf0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f023 030f 	bic.w	r3, r3, #15
 80052f0:	4a31      	ldr	r2, [pc, #196]	; (80053b8 <SystemInit+0xf0>)
 80052f2:	f043 0307 	orr.w	r3, r3, #7
 80052f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80052f8:	4b30      	ldr	r3, [pc, #192]	; (80053bc <SystemInit+0xf4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <SystemInit+0xf4>)
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005304:	4b2d      	ldr	r3, [pc, #180]	; (80053bc <SystemInit+0xf4>)
 8005306:	2200      	movs	r2, #0
 8005308:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800530a:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <SystemInit+0xf4>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	492b      	ldr	r1, [pc, #172]	; (80053bc <SystemInit+0xf4>)
 8005310:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <SystemInit+0xf8>)
 8005312:	4013      	ands	r3, r2
 8005314:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005316:	4b28      	ldr	r3, [pc, #160]	; (80053b8 <SystemInit+0xf0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005322:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <SystemInit+0xf0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 030f 	bic.w	r3, r3, #15
 800532a:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <SystemInit+0xf0>)
 800532c:	f043 0307 	orr.w	r3, r3, #7
 8005330:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005332:	4b22      	ldr	r3, [pc, #136]	; (80053bc <SystemInit+0xf4>)
 8005334:	2200      	movs	r2, #0
 8005336:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005338:	4b20      	ldr	r3, [pc, #128]	; (80053bc <SystemInit+0xf4>)
 800533a:	2200      	movs	r2, #0
 800533c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800533e:	4b1f      	ldr	r3, [pc, #124]	; (80053bc <SystemInit+0xf4>)
 8005340:	2200      	movs	r2, #0
 8005342:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005344:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <SystemInit+0xf4>)
 8005346:	4a1f      	ldr	r2, [pc, #124]	; (80053c4 <SystemInit+0xfc>)
 8005348:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800534a:	4b1c      	ldr	r3, [pc, #112]	; (80053bc <SystemInit+0xf4>)
 800534c:	4a1e      	ldr	r2, [pc, #120]	; (80053c8 <SystemInit+0x100>)
 800534e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005350:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <SystemInit+0xf4>)
 8005352:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <SystemInit+0x104>)
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005356:	4b19      	ldr	r3, [pc, #100]	; (80053bc <SystemInit+0xf4>)
 8005358:	2200      	movs	r2, #0
 800535a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800535c:	4b17      	ldr	r3, [pc, #92]	; (80053bc <SystemInit+0xf4>)
 800535e:	4a1b      	ldr	r2, [pc, #108]	; (80053cc <SystemInit+0x104>)
 8005360:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005362:	4b16      	ldr	r3, [pc, #88]	; (80053bc <SystemInit+0xf4>)
 8005364:	2200      	movs	r2, #0
 8005366:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005368:	4b14      	ldr	r3, [pc, #80]	; (80053bc <SystemInit+0xf4>)
 800536a:	4a18      	ldr	r2, [pc, #96]	; (80053cc <SystemInit+0x104>)
 800536c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800536e:	4b13      	ldr	r3, [pc, #76]	; (80053bc <SystemInit+0xf4>)
 8005370:	2200      	movs	r2, #0
 8005372:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005374:	4b11      	ldr	r3, [pc, #68]	; (80053bc <SystemInit+0xf4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a10      	ldr	r2, [pc, #64]	; (80053bc <SystemInit+0xf4>)
 800537a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005380:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <SystemInit+0xf4>)
 8005382:	2200      	movs	r2, #0
 8005384:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005386:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <SystemInit+0x108>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <SystemInit+0x10c>)
 800538c:	4013      	ands	r3, r2
 800538e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005392:	d202      	bcs.n	800539a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005394:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <SystemInit+0x110>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800539a:	4b10      	ldr	r3, [pc, #64]	; (80053dc <SystemInit+0x114>)
 800539c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80053a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80053a2:	4b04      	ldr	r3, [pc, #16]	; (80053b4 <SystemInit+0xec>)
 80053a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053a8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80053aa:	bf00      	nop
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	e000ed00 	.word	0xe000ed00
 80053b8:	52002000 	.word	0x52002000
 80053bc:	58024400 	.word	0x58024400
 80053c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80053c4:	02020200 	.word	0x02020200
 80053c8:	01ff0000 	.word	0x01ff0000
 80053cc:	01010280 	.word	0x01010280
 80053d0:	5c001000 	.word	0x5c001000
 80053d4:	ffff0000 	.word	0xffff0000
 80053d8:	51008108 	.word	0x51008108
 80053dc:	52004000 	.word	0x52004000

080053e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80053e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005418 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80053e4:	f7ff ff70 	bl	80052c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053e8:	480c      	ldr	r0, [pc, #48]	; (800541c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80053ea:	490d      	ldr	r1, [pc, #52]	; (8005420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80053ec:	4a0d      	ldr	r2, [pc, #52]	; (8005424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80053ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053f0:	e002      	b.n	80053f8 <LoopCopyDataInit>

080053f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053f6:	3304      	adds	r3, #4

080053f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053fc:	d3f9      	bcc.n	80053f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053fe:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005400:	4c0a      	ldr	r4, [pc, #40]	; (800542c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005404:	e001      	b.n	800540a <LoopFillZerobss>

08005406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005408:	3204      	adds	r2, #4

0800540a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800540a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800540c:	d3fb      	bcc.n	8005406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800540e:	f005 fb89 	bl	800ab24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005412:	f7ff f9b5 	bl	8004780 <main>
  bx  lr
 8005416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005418:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800541c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005420:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8005424:	0800ae24 	.word	0x0800ae24
  ldr r2, =_sbss
 8005428:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 800542c:	240060ac 	.word	0x240060ac

08005430 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005430:	e7fe      	b.n	8005430 <ADC3_IRQHandler>
	...

08005434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800543a:	2003      	movs	r0, #3
 800543c:	f000 f933 	bl	80056a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005440:	f002 f848 	bl	80074d4 <HAL_RCC_GetSysClockFreq>
 8005444:	4602      	mov	r2, r0
 8005446:	4b15      	ldr	r3, [pc, #84]	; (800549c <HAL_Init+0x68>)
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	f003 030f 	and.w	r3, r3, #15
 8005450:	4913      	ldr	r1, [pc, #76]	; (80054a0 <HAL_Init+0x6c>)
 8005452:	5ccb      	ldrb	r3, [r1, r3]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
 800545c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800545e:	4b0f      	ldr	r3, [pc, #60]	; (800549c <HAL_Init+0x68>)
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	4a0e      	ldr	r2, [pc, #56]	; (80054a0 <HAL_Init+0x6c>)
 8005468:	5cd3      	ldrb	r3, [r2, r3]
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
 8005474:	4a0b      	ldr	r2, [pc, #44]	; (80054a4 <HAL_Init+0x70>)
 8005476:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005478:	4a0b      	ldr	r2, [pc, #44]	; (80054a8 <HAL_Init+0x74>)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800547e:	200f      	movs	r0, #15
 8005480:	f7ff fe8c 	bl	800519c <HAL_InitTick>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e002      	b.n	8005494 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800548e:	f7ff fd2f 	bl	8004ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	58024400 	.word	0x58024400
 80054a0:	0800addc 	.word	0x0800addc
 80054a4:	24000018 	.word	0x24000018
 80054a8:	24000014 	.word	0x24000014

080054ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80054b0:	4b06      	ldr	r3, [pc, #24]	; (80054cc <HAL_IncTick+0x20>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <HAL_IncTick+0x24>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4413      	add	r3, r2
 80054bc:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <HAL_IncTick+0x24>)
 80054be:	6013      	str	r3, [r2, #0]
}
 80054c0:	bf00      	nop
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	24000020 	.word	0x24000020
 80054d0:	240060a8 	.word	0x240060a8

080054d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return uwTick;
 80054d8:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <HAL_GetTick+0x14>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	240060a8 	.word	0x240060a8

080054ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054f4:	f7ff ffee 	bl	80054d4 <HAL_GetTick>
 80054f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d005      	beq.n	8005512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005506:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <HAL_Delay+0x44>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005512:	bf00      	nop
 8005514:	f7ff ffde 	bl	80054d4 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	429a      	cmp	r2, r3
 8005522:	d8f7      	bhi.n	8005514 <HAL_Delay+0x28>
  {
  }
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	24000020 	.word	0x24000020

08005534 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005538:	4b03      	ldr	r3, [pc, #12]	; (8005548 <HAL_GetREVID+0x14>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	0c1b      	lsrs	r3, r3, #16
}
 800553e:	4618      	mov	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	5c001000 	.word	0x5c001000

0800554c <__NVIC_SetPriorityGrouping>:
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <__NVIC_SetPriorityGrouping+0x40>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005568:	4013      	ands	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005574:	4b06      	ldr	r3, [pc, #24]	; (8005590 <__NVIC_SetPriorityGrouping+0x44>)
 8005576:	4313      	orrs	r3, r2
 8005578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800557a:	4a04      	ldr	r2, [pc, #16]	; (800558c <__NVIC_SetPriorityGrouping+0x40>)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	60d3      	str	r3, [r2, #12]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	e000ed00 	.word	0xe000ed00
 8005590:	05fa0000 	.word	0x05fa0000

08005594 <__NVIC_GetPriorityGrouping>:
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <__NVIC_GetPriorityGrouping+0x18>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	f003 0307 	and.w	r3, r3, #7
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	e000ed00 	.word	0xe000ed00

080055b0 <__NVIC_EnableIRQ>:
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	db0b      	blt.n	80055da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	f003 021f 	and.w	r2, r3, #31
 80055c8:	4907      	ldr	r1, [pc, #28]	; (80055e8 <__NVIC_EnableIRQ+0x38>)
 80055ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	2001      	movs	r0, #1
 80055d2:	fa00 f202 	lsl.w	r2, r0, r2
 80055d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000e100 	.word	0xe000e100

080055ec <__NVIC_SetPriority>:
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	6039      	str	r1, [r7, #0]
 80055f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	db0a      	blt.n	8005616 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	490c      	ldr	r1, [pc, #48]	; (8005638 <__NVIC_SetPriority+0x4c>)
 8005606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800560a:	0112      	lsls	r2, r2, #4
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	440b      	add	r3, r1
 8005610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005614:	e00a      	b.n	800562c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	4908      	ldr	r1, [pc, #32]	; (800563c <__NVIC_SetPriority+0x50>)
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	3b04      	subs	r3, #4
 8005624:	0112      	lsls	r2, r2, #4
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	440b      	add	r3, r1
 800562a:	761a      	strb	r2, [r3, #24]
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	e000e100 	.word	0xe000e100
 800563c:	e000ed00 	.word	0xe000ed00

08005640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	; 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f1c3 0307 	rsb	r3, r3, #7
 800565a:	2b04      	cmp	r3, #4
 800565c:	bf28      	it	cs
 800565e:	2304      	movcs	r3, #4
 8005660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	3304      	adds	r3, #4
 8005666:	2b06      	cmp	r3, #6
 8005668:	d902      	bls.n	8005670 <NVIC_EncodePriority+0x30>
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	3b03      	subs	r3, #3
 800566e:	e000      	b.n	8005672 <NVIC_EncodePriority+0x32>
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005674:	f04f 32ff 	mov.w	r2, #4294967295
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43da      	mvns	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	401a      	ands	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005688:	f04f 31ff 	mov.w	r1, #4294967295
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	fa01 f303 	lsl.w	r3, r1, r3
 8005692:	43d9      	mvns	r1, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005698:	4313      	orrs	r3, r2
         );
}
 800569a:	4618      	mov	r0, r3
 800569c:	3724      	adds	r7, #36	; 0x24
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff ff4c 	bl	800554c <__NVIC_SetPriorityGrouping>
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056ca:	f7ff ff63 	bl	8005594 <__NVIC_GetPriorityGrouping>
 80056ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	6978      	ldr	r0, [r7, #20]
 80056d6:	f7ff ffb3 	bl	8005640 <NVIC_EncodePriority>
 80056da:	4602      	mov	r2, r0
 80056dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff ff82 	bl	80055ec <__NVIC_SetPriority>
}
 80056e8:	bf00      	nop
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	4603      	mov	r3, r0
 80056f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff ff56 	bl	80055b0 <__NVIC_EnableIRQ>
}
 8005704:	bf00      	nop
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b098      	sub	sp, #96	; 0x60
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005714:	4a84      	ldr	r2, [pc, #528]	; (8005928 <HAL_FDCAN_Init+0x21c>)
 8005716:	f107 030c 	add.w	r3, r7, #12
 800571a:	4611      	mov	r1, r2
 800571c:	224c      	movs	r2, #76	; 0x4c
 800571e:	4618      	mov	r0, r3
 8005720:	f005 fa34 	bl	800ab8c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e1c6      	b.n	8005abc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a7e      	ldr	r2, [pc, #504]	; (800592c <HAL_FDCAN_Init+0x220>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d106      	bne.n	8005746 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005740:	461a      	mov	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fbe2 	bl	8004f24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0210 	bic.w	r2, r2, #16
 800576e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005770:	f7ff feb0 	bl	80054d4 <HAL_GetTick>
 8005774:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005776:	e014      	b.n	80057a2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005778:	f7ff feac 	bl	80054d4 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b0a      	cmp	r3, #10
 8005784:	d90d      	bls.n	80057a2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800578c:	f043 0201 	orr.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2203      	movs	r2, #3
 800579a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e18c      	b.n	8005abc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d0e3      	beq.n	8005778 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057c0:	f7ff fe88 	bl	80054d4 <HAL_GetTick>
 80057c4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057c6:	e014      	b.n	80057f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80057c8:	f7ff fe84 	bl	80054d4 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b0a      	cmp	r3, #10
 80057d4:	d90d      	bls.n	80057f2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057dc:	f043 0201 	orr.w	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2203      	movs	r2, #3
 80057ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e164      	b.n	8005abc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0e3      	beq.n	80057c8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0202 	orr.w	r2, r2, #2
 800580e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7c1b      	ldrb	r3, [r3, #16]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d108      	bne.n	800582a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005826:	619a      	str	r2, [r3, #24]
 8005828:	e007      	b.n	800583a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005838:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7c5b      	ldrb	r3, [r3, #17]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d108      	bne.n	8005854 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005850:	619a      	str	r2, [r3, #24]
 8005852:	e007      	b.n	8005864 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005862:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	7c9b      	ldrb	r3, [r3, #18]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d108      	bne.n	800587e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800587a:	619a      	str	r2, [r3, #24]
 800587c:	e007      	b.n	800588e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800588c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80058b2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0210 	bic.w	r2, r2, #16
 80058c2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d108      	bne.n	80058de <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0204 	orr.w	r2, r2, #4
 80058da:	619a      	str	r2, [r3, #24]
 80058dc:	e030      	b.n	8005940 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d02c      	beq.n	8005940 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d020      	beq.n	8005930 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699a      	ldr	r2, [r3, #24]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058fc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0210 	orr.w	r2, r2, #16
 800590c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	2b03      	cmp	r3, #3
 8005914:	d114      	bne.n	8005940 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699a      	ldr	r2, [r3, #24]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0220 	orr.w	r2, r2, #32
 8005924:	619a      	str	r2, [r3, #24]
 8005926:	e00b      	b.n	8005940 <HAL_FDCAN_Init+0x234>
 8005928:	0800ad68 	.word	0x0800ad68
 800592c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0220 	orr.w	r2, r2, #32
 800593e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	3b01      	subs	r3, #1
 8005946:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	3b01      	subs	r3, #1
 800594e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005950:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005958:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	3b01      	subs	r3, #1
 8005962:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005968:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800596a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005974:	d115      	bne.n	80059a2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	3b01      	subs	r3, #1
 8005982:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005984:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	3b01      	subs	r3, #1
 800598c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800598e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	3b01      	subs	r3, #1
 8005998:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800599e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80059a0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c8:	4413      	add	r3, r2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d011      	beq.n	80059f2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80059d6:	f023 0107 	bic.w	r1, r3, #7
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	3360      	adds	r3, #96	; 0x60
 80059e2:	443b      	add	r3, r7
 80059e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d011      	beq.n	8005a1e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a02:	f023 0107 	bic.w	r1, r3, #7
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	3360      	adds	r3, #96	; 0x60
 8005a0e:	443b      	add	r3, r7
 8005a10:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d012      	beq.n	8005a4c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a2e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	3360      	adds	r3, #96	; 0x60
 8005a3a:	443b      	add	r3, r7
 8005a3c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005a40:	011a      	lsls	r2, r3, #4
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d012      	beq.n	8005a7a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a5c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	3360      	adds	r3, #96	; 0x60
 8005a68:	443b      	add	r3, r7
 8005a6a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005a6e:	021a      	lsls	r2, r3, #8
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a11      	ldr	r2, [pc, #68]	; (8005ac4 <HAL_FDCAN_Init+0x3b8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d107      	bne.n	8005a94 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f022 0203 	bic.w	r2, r2, #3
 8005a92:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fb1f 	bl	80060f0 <FDCAN_CalcultateRamBlockAddresses>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005ab8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3760      	adds	r7, #96	; 0x60
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	4000a000 	.word	0x4000a000

08005ac8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b092      	sub	sp, #72	; 0x48
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005ad0:	4b90      	ldr	r3, [pc, #576]	; (8005d14 <HAL_FDCAN_IRQHandler+0x24c>)
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	079b      	lsls	r3, r3, #30
 8005ad6:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005ad8:	4b8e      	ldr	r3, [pc, #568]	; (8005d14 <HAL_FDCAN_IRQHandler+0x24c>)
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	079b      	lsls	r3, r3, #30
 8005ade:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005aee:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005af8:	4013      	ands	r3, r2
 8005afa:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b10:	4013      	ands	r3, r2
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b28:	4013      	ands	r3, r2
 8005b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b32:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b40:	4013      	ands	r3, r2
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8005b4e:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b58:	4013      	ands	r3, r2
 8005b5a:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d011      	beq.n	8005b8e <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b80:	651a      	str	r2, [r3, #80]	; 0x50
 8005b82:	4b64      	ldr	r3, [pc, #400]	; (8005d14 <HAL_FDCAN_IRQHandler+0x24c>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fa65 	bl	8006058 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01e      	beq.n	8005bda <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d017      	beq.n	8005bda <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bca:	651a      	str	r2, [r3, #80]	; 0x50
 8005bcc:	4b51      	ldr	r3, [pc, #324]	; (8005d14 <HAL_FDCAN_IRQHandler+0x24c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005bd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fa16 	bl	8006006 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00d      	beq.n	8005bfc <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005be6:	4b4c      	ldr	r3, [pc, #304]	; (8005d18 <HAL_FDCAN_IRQHandler+0x250>)
 8005be8:	400b      	ands	r3, r1
 8005bea:	6513      	str	r3, [r2, #80]	; 0x50
 8005bec:	4a49      	ldr	r2, [pc, #292]	; (8005d14 <HAL_FDCAN_IRQHandler+0x24c>)
 8005bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf0:	0f9b      	lsrs	r3, r3, #30
 8005bf2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005bf4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9c4 	bl	8005f84 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00d      	beq.n	8005c1e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c08:	4b43      	ldr	r3, [pc, #268]	; (8005d18 <HAL_FDCAN_IRQHandler+0x250>)
 8005c0a:	400b      	ands	r3, r1
 8005c0c:	6513      	str	r3, [r2, #80]	; 0x50
 8005c0e:	4a41      	ldr	r2, [pc, #260]	; (8005d14 <HAL_FDCAN_IRQHandler+0x24c>)
 8005c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c12:	0f9b      	lsrs	r3, r3, #30
 8005c14:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005c16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f9be 	bl	8005f9a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c2a:	4b3b      	ldr	r3, [pc, #236]	; (8005d18 <HAL_FDCAN_IRQHandler+0x250>)
 8005c2c:	400b      	ands	r3, r1
 8005c2e:	6513      	str	r3, [r2, #80]	; 0x50
 8005c30:	4a38      	ldr	r2, [pc, #224]	; (8005d14 <HAL_FDCAN_IRQHandler+0x24c>)
 8005c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c34:	0f9b      	lsrs	r3, r3, #30
 8005c36:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f9b8 	bl	8005fb0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00d      	beq.n	8005c62 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c4c:	4b32      	ldr	r3, [pc, #200]	; (8005d18 <HAL_FDCAN_IRQHandler+0x250>)
 8005c4e:	400b      	ands	r3, r1
 8005c50:	6513      	str	r3, [r2, #80]	; 0x50
 8005c52:	4a30      	ldr	r2, [pc, #192]	; (8005d14 <HAL_FDCAN_IRQHandler+0x24c>)
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	0f9b      	lsrs	r3, r3, #30
 8005c58:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005c5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f9b2 	bl	8005fc6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d011      	beq.n	8005c94 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c86:	651a      	str	r2, [r3, #80]	; 0x50
 8005c88:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <HAL_FDCAN_IRQHandler+0x24c>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f9a4 	bl	8005fdc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01e      	beq.n	8005ce0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d017      	beq.n	8005ce0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd0:	651a      	str	r2, [r3, #80]	; 0x50
 8005cd2:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <HAL_FDCAN_IRQHandler+0x24c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f988 	bl	8005ff0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d016      	beq.n	8005d1c <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00f      	beq.n	8005d1c <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005d04:	651a      	str	r2, [r3, #80]	; 0x50
 8005d06:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <HAL_FDCAN_IRQHandler+0x24c>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f985 	bl	800601c <HAL_FDCAN_RxBufferNewMessageCallback>
 8005d12:	e003      	b.n	8005d1c <HAL_FDCAN_IRQHandler+0x254>
 8005d14:	4000a800 	.word	0x4000a800
 8005d18:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d011      	beq.n	8005d4e <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d40:	651a      	str	r2, [r3, #80]	; 0x50
 8005d42:	4b8d      	ldr	r3, [pc, #564]	; (8005f78 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f971 	bl	8006030 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d011      	beq.n	8005d80 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005d72:	651a      	str	r2, [r3, #80]	; 0x50
 8005d74:	4b80      	ldr	r3, [pc, #512]	; (8005f78 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f962 	bl	8006044 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d016      	beq.n	8005dbc <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00f      	beq.n	8005dbc <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005da4:	651a      	str	r2, [r3, #80]	; 0x50
 8005da6:	4b74      	ldr	r3, [pc, #464]	; (8005f78 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005db2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00d      	beq.n	8005dde <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dc8:	4b6c      	ldr	r3, [pc, #432]	; (8005f7c <HAL_FDCAN_IRQHandler+0x4b4>)
 8005dca:	400b      	ands	r3, r1
 8005dcc:	6513      	str	r3, [r2, #80]	; 0x50
 8005dce:	4a6a      	ldr	r2, [pc, #424]	; (8005f78 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	0f9b      	lsrs	r3, r3, #30
 8005dd4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005dd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f951 	bl	8006080 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d011      	beq.n	8005e08 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005dea:	4b64      	ldr	r3, [pc, #400]	; (8005f7c <HAL_FDCAN_IRQHandler+0x4b4>)
 8005dec:	400b      	ands	r3, r1
 8005dee:	6513      	str	r3, [r2, #80]	; 0x50
 8005df0:	4a61      	ldr	r2, [pc, #388]	; (8005f78 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df4:	0f9b      	lsrs	r3, r3, #30
 8005df6:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a5c      	ldr	r2, [pc, #368]	; (8005f80 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	f040 80a6 	bne.w	8005f60 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 809e 	beq.w	8005f60 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e38:	4013      	ands	r3, r2
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e46:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	6a3a      	ldr	r2, [r7, #32]
 8005e50:	4013      	ands	r3, r2
 8005e52:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005e5e:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005e76:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8005e8e:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f8f2 	bl	8006096 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	6a3a      	ldr	r2, [r7, #32]
 8005ebe:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005ec0:	6a39      	ldr	r1, [r7, #32]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f8f2 	bl	80060ac <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01b      	beq.n	8005f0e <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d014      	beq.n	8005f0e <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005efa:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2240      	movs	r2, #64	; 0x40
 8005f02:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	6939      	ldr	r1, [r7, #16]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f8da 	bl	80060c2 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005f1c:	69f9      	ldr	r1, [r7, #28]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f8db 	bl	80060da <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00b      	beq.n	8005f42 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f87e 	bl	800606c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005f70:	bf00      	nop
 8005f72:	3748      	adds	r7, #72	; 0x48
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	4000a800 	.word	0x4000a800
 8005f7c:	3fcfffff 	.word	0x3fcfffff
 8005f80:	4000a000 	.word	0x4000a000

08005f84 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006106:	4ba7      	ldr	r3, [pc, #668]	; (80063a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006108:	4013      	ands	r3, r2
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	0091      	lsls	r1, r2, #2
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6812      	ldr	r2, [r2, #0]
 8006112:	430b      	orrs	r3, r1
 8006114:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006120:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	041a      	lsls	r2, r3, #16
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	4413      	add	r3, r2
 800613c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006146:	4b97      	ldr	r3, [pc, #604]	; (80063a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006148:	4013      	ands	r3, r2
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	0091      	lsls	r1, r2, #2
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	430b      	orrs	r3, r1
 8006154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006160:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006168:	041a      	lsls	r2, r3, #16
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	4413      	add	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006188:	4b86      	ldr	r3, [pc, #536]	; (80063a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800618a:	4013      	ands	r3, r2
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	0091      	lsls	r1, r2, #2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6812      	ldr	r2, [r2, #0]
 8006194:	430b      	orrs	r3, r1
 8006196:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061a2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	041a      	lsls	r2, r3, #16
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	4413      	add	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80061d0:	4b74      	ldr	r3, [pc, #464]	; (80063a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	0091      	lsls	r1, r2, #2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	430b      	orrs	r3, r1
 80061de:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061ea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f2:	041a      	lsls	r2, r3, #16
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006206:	fb02 f303 	mul.w	r3, r2, r3
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	4413      	add	r3, r2
 800620e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006218:	4b62      	ldr	r3, [pc, #392]	; (80063a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800621a:	4013      	ands	r3, r2
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	0091      	lsls	r1, r2, #2
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6812      	ldr	r2, [r2, #0]
 8006224:	430b      	orrs	r3, r1
 8006226:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	4413      	add	r3, r2
 800623a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006244:	4b57      	ldr	r3, [pc, #348]	; (80063a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006246:	4013      	ands	r3, r2
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	0091      	lsls	r1, r2, #2
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	430b      	orrs	r3, r1
 8006252:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800625e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006266:	041a      	lsls	r2, r3, #16
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	4413      	add	r3, r2
 800627c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006286:	4b47      	ldr	r3, [pc, #284]	; (80063a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006288:	4013      	ands	r3, r2
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	0091      	lsls	r1, r2, #2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	430b      	orrs	r3, r1
 8006294:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062a0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a8:	041a      	lsls	r2, r3, #16
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062bc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c4:	061a      	lsls	r2, r3, #24
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062d4:	4b34      	ldr	r3, [pc, #208]	; (80063a8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80062d6:	4413      	add	r3, r2
 80062d8:	009a      	lsls	r2, r3, #2
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	441a      	add	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	441a      	add	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800630a:	fb01 f303 	mul.w	r3, r1, r3
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006322:	fb01 f303 	mul.w	r3, r1, r3
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800633a:	fb01 f303 	mul.w	r3, r1, r3
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	441a      	add	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	441a      	add	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800636a:	fb01 f303 	mul.w	r3, r1, r3
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	441a      	add	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639a:	4a04      	ldr	r2, [pc, #16]	; (80063ac <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d915      	bls.n	80063cc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80063a0:	e006      	b.n	80063b0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80063a2:	bf00      	nop
 80063a4:	ffff0003 	.word	0xffff0003
 80063a8:	10002b00 	.word	0x10002b00
 80063ac:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2203      	movs	r2, #3
 80063c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e010      	b.n	80063ee <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e005      	b.n	80063e0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3304      	adds	r3, #4
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d3f3      	bcc.n	80063d4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop

080063fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b089      	sub	sp, #36	; 0x24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006406:	2300      	movs	r3, #0
 8006408:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800640a:	4b89      	ldr	r3, [pc, #548]	; (8006630 <HAL_GPIO_Init+0x234>)
 800640c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800640e:	e194      	b.n	800673a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	2101      	movs	r1, #1
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	fa01 f303 	lsl.w	r3, r1, r3
 800641c:	4013      	ands	r3, r2
 800641e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 8186 	beq.w	8006734 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d00b      	beq.n	8006448 <HAL_GPIO_Init+0x4c>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d007      	beq.n	8006448 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800643c:	2b11      	cmp	r3, #17
 800643e:	d003      	beq.n	8006448 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b12      	cmp	r3, #18
 8006446:	d130      	bne.n	80064aa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	2203      	movs	r2, #3
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	43db      	mvns	r3, r3
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	4013      	ands	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4313      	orrs	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800647e:	2201      	movs	r2, #1
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43db      	mvns	r3, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4013      	ands	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	091b      	lsrs	r3, r3, #4
 8006494:	f003 0201 	and.w	r2, r3, #1
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	2203      	movs	r2, #3
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	43db      	mvns	r3, r3
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	4013      	ands	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d003      	beq.n	80064ea <HAL_GPIO_Init+0xee>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b12      	cmp	r3, #18
 80064e8:	d123      	bne.n	8006532 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	08da      	lsrs	r2, r3, #3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3208      	adds	r2, #8
 80064f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	220f      	movs	r2, #15
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	43db      	mvns	r3, r3
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	4013      	ands	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	4313      	orrs	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	08da      	lsrs	r2, r3, #3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3208      	adds	r2, #8
 800652c:	69b9      	ldr	r1, [r7, #24]
 800652e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	2203      	movs	r2, #3
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	43db      	mvns	r3, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	4013      	ands	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f003 0203 	and.w	r2, r3, #3
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	4313      	orrs	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 80e0 	beq.w	8006734 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006574:	4b2f      	ldr	r3, [pc, #188]	; (8006634 <HAL_GPIO_Init+0x238>)
 8006576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800657a:	4a2e      	ldr	r2, [pc, #184]	; (8006634 <HAL_GPIO_Init+0x238>)
 800657c:	f043 0302 	orr.w	r3, r3, #2
 8006580:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006584:	4b2b      	ldr	r3, [pc, #172]	; (8006634 <HAL_GPIO_Init+0x238>)
 8006586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006592:	4a29      	ldr	r2, [pc, #164]	; (8006638 <HAL_GPIO_Init+0x23c>)
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	089b      	lsrs	r3, r3, #2
 8006598:	3302      	adds	r3, #2
 800659a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	220f      	movs	r2, #15
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	4013      	ands	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a20      	ldr	r2, [pc, #128]	; (800663c <HAL_GPIO_Init+0x240>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d052      	beq.n	8006664 <HAL_GPIO_Init+0x268>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <HAL_GPIO_Init+0x244>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d031      	beq.n	800662a <HAL_GPIO_Init+0x22e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a1e      	ldr	r2, [pc, #120]	; (8006644 <HAL_GPIO_Init+0x248>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d02b      	beq.n	8006626 <HAL_GPIO_Init+0x22a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a1d      	ldr	r2, [pc, #116]	; (8006648 <HAL_GPIO_Init+0x24c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d025      	beq.n	8006622 <HAL_GPIO_Init+0x226>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1c      	ldr	r2, [pc, #112]	; (800664c <HAL_GPIO_Init+0x250>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01f      	beq.n	800661e <HAL_GPIO_Init+0x222>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a1b      	ldr	r2, [pc, #108]	; (8006650 <HAL_GPIO_Init+0x254>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d019      	beq.n	800661a <HAL_GPIO_Init+0x21e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a1a      	ldr	r2, [pc, #104]	; (8006654 <HAL_GPIO_Init+0x258>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <HAL_GPIO_Init+0x21a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a19      	ldr	r2, [pc, #100]	; (8006658 <HAL_GPIO_Init+0x25c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00d      	beq.n	8006612 <HAL_GPIO_Init+0x216>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a18      	ldr	r2, [pc, #96]	; (800665c <HAL_GPIO_Init+0x260>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d007      	beq.n	800660e <HAL_GPIO_Init+0x212>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a17      	ldr	r2, [pc, #92]	; (8006660 <HAL_GPIO_Init+0x264>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d101      	bne.n	800660a <HAL_GPIO_Init+0x20e>
 8006606:	2309      	movs	r3, #9
 8006608:	e02d      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800660a:	230a      	movs	r3, #10
 800660c:	e02b      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800660e:	2308      	movs	r3, #8
 8006610:	e029      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 8006612:	2307      	movs	r3, #7
 8006614:	e027      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 8006616:	2306      	movs	r3, #6
 8006618:	e025      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800661a:	2305      	movs	r3, #5
 800661c:	e023      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800661e:	2304      	movs	r3, #4
 8006620:	e021      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 8006622:	2303      	movs	r3, #3
 8006624:	e01f      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 8006626:	2302      	movs	r3, #2
 8006628:	e01d      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800662a:	2301      	movs	r3, #1
 800662c:	e01b      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800662e:	bf00      	nop
 8006630:	58000080 	.word	0x58000080
 8006634:	58024400 	.word	0x58024400
 8006638:	58000400 	.word	0x58000400
 800663c:	58020000 	.word	0x58020000
 8006640:	58020400 	.word	0x58020400
 8006644:	58020800 	.word	0x58020800
 8006648:	58020c00 	.word	0x58020c00
 800664c:	58021000 	.word	0x58021000
 8006650:	58021400 	.word	0x58021400
 8006654:	58021800 	.word	0x58021800
 8006658:	58021c00 	.word	0x58021c00
 800665c:	58022000 	.word	0x58022000
 8006660:	58022400 	.word	0x58022400
 8006664:	2300      	movs	r3, #0
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	f002 0203 	and.w	r2, r2, #3
 800666c:	0092      	lsls	r2, r2, #2
 800666e:	4093      	lsls	r3, r2
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	4313      	orrs	r3, r2
 8006674:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006676:	4938      	ldr	r1, [pc, #224]	; (8006758 <HAL_GPIO_Init+0x35c>)
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	089b      	lsrs	r3, r3, #2
 800667c:	3302      	adds	r3, #2
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	43db      	mvns	r3, r3
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4013      	ands	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	43db      	mvns	r3, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4013      	ands	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	43db      	mvns	r3, r3
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	4013      	ands	r3, r2
 80066e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	43db      	mvns	r3, r3
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	4013      	ands	r3, r2
 8006716:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800672c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	3301      	adds	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	fa22 f303 	lsr.w	r3, r2, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	f47f ae63 	bne.w	8006410 <HAL_GPIO_Init+0x14>
  }
}
 800674a:	bf00      	nop
 800674c:	bf00      	nop
 800674e:	3724      	adds	r7, #36	; 0x24
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	58000400 	.word	0x58000400

0800675c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	887b      	ldrh	r3, [r7, #2]
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
 8006778:	e001      	b.n	800677e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	807b      	strh	r3, [r7, #2]
 8006798:	4613      	mov	r3, r2
 800679a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800679c:	787b      	ldrb	r3, [r7, #1]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067a2:	887a      	ldrh	r2, [r7, #2]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80067a8:	e003      	b.n	80067b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80067aa:	887b      	ldrh	r3, [r7, #2]
 80067ac:	041a      	lsls	r2, r3, #16
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	619a      	str	r2, [r3, #24]
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	460b      	mov	r3, r1
 80067c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067d0:	887a      	ldrh	r2, [r7, #2]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4013      	ands	r3, r2
 80067d6:	041a      	lsls	r2, r3, #16
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	43d9      	mvns	r1, r3
 80067dc:	887b      	ldrh	r3, [r7, #2]
 80067de:	400b      	ands	r3, r1
 80067e0:	431a      	orrs	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	619a      	str	r2, [r3, #24]
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80067f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f4:	b08f      	sub	sp, #60	; 0x3c
 80067f6:	af0a      	add	r7, sp, #40	; 0x28
 80067f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e054      	b.n	80068ae <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7fe fc52 	bl	80050c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2203      	movs	r2, #3
 8006828:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f003 ffc6 	bl	800a7d4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	687e      	ldr	r6, [r7, #4]
 8006850:	466d      	mov	r5, sp
 8006852:	f106 0410 	add.w	r4, r6, #16
 8006856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800685a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800685c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800685e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006862:	e885 0003 	stmia.w	r5, {r0, r1}
 8006866:	1d33      	adds	r3, r6, #4
 8006868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800686a:	6838      	ldr	r0, [r7, #0]
 800686c:	f003 ff44 	bl	800a6f8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2101      	movs	r1, #1
 8006876:	4618      	mov	r0, r3
 8006878:	f003 ffbd 	bl	800a7f6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	603b      	str	r3, [r7, #0]
 8006882:	687e      	ldr	r6, [r7, #4]
 8006884:	466d      	mov	r5, sp
 8006886:	f106 0410 	add.w	r4, r6, #16
 800688a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800688c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800688e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006892:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006896:	e885 0003 	stmia.w	r5, {r0, r1}
 800689a:	1d33      	adds	r3, r6, #4
 800689c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f004 f850 	bl	800a944 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080068b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80068c0:	4b19      	ldr	r3, [pc, #100]	; (8006928 <HAL_PWREx_ConfigSupply+0x70>)
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d00a      	beq.n	80068e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80068cc:	4b16      	ldr	r3, [pc, #88]	; (8006928 <HAL_PWREx_ConfigSupply+0x70>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d001      	beq.n	80068de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e01f      	b.n	800691e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	e01d      	b.n	800691e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068e2:	4b11      	ldr	r3, [pc, #68]	; (8006928 <HAL_PWREx_ConfigSupply+0x70>)
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f023 0207 	bic.w	r2, r3, #7
 80068ea:	490f      	ldr	r1, [pc, #60]	; (8006928 <HAL_PWREx_ConfigSupply+0x70>)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80068f2:	f7fe fdef 	bl	80054d4 <HAL_GetTick>
 80068f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068f8:	e009      	b.n	800690e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068fa:	f7fe fdeb 	bl	80054d4 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006908:	d901      	bls.n	800690e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e007      	b.n	800691e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800690e:	4b06      	ldr	r3, [pc, #24]	; (8006928 <HAL_PWREx_ConfigSupply+0x70>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800691a:	d1ee      	bne.n	80068fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	58024800 	.word	0x58024800

0800692c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006930:	4b05      	ldr	r3, [pc, #20]	; (8006948 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	4a04      	ldr	r2, [pc, #16]	; (8006948 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800693a:	60d3      	str	r3, [r2, #12]
}
 800693c:	bf00      	nop
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	58024800 	.word	0x58024800

0800694c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08c      	sub	sp, #48	; 0x30
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e3fd      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 8087 	beq.w	8006a7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800696c:	4b99      	ldr	r3, [pc, #612]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006974:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006976:	4b97      	ldr	r3, [pc, #604]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	2b10      	cmp	r3, #16
 8006980:	d007      	beq.n	8006992 <HAL_RCC_OscConfig+0x46>
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	2b18      	cmp	r3, #24
 8006986:	d110      	bne.n	80069aa <HAL_RCC_OscConfig+0x5e>
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d10b      	bne.n	80069aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006992:	4b90      	ldr	r3, [pc, #576]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d06c      	beq.n	8006a78 <HAL_RCC_OscConfig+0x12c>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d168      	bne.n	8006a78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e3d7      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b2:	d106      	bne.n	80069c2 <HAL_RCC_OscConfig+0x76>
 80069b4:	4b87      	ldr	r3, [pc, #540]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a86      	ldr	r2, [pc, #536]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 80069ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	e02e      	b.n	8006a20 <HAL_RCC_OscConfig+0xd4>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10c      	bne.n	80069e4 <HAL_RCC_OscConfig+0x98>
 80069ca:	4b82      	ldr	r3, [pc, #520]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a81      	ldr	r2, [pc, #516]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 80069d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	4b7f      	ldr	r3, [pc, #508]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a7e      	ldr	r2, [pc, #504]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 80069dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e01d      	b.n	8006a20 <HAL_RCC_OscConfig+0xd4>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ec:	d10c      	bne.n	8006a08 <HAL_RCC_OscConfig+0xbc>
 80069ee:	4b79      	ldr	r3, [pc, #484]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a78      	ldr	r2, [pc, #480]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 80069f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	4b76      	ldr	r3, [pc, #472]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a75      	ldr	r2, [pc, #468]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	e00b      	b.n	8006a20 <HAL_RCC_OscConfig+0xd4>
 8006a08:	4b72      	ldr	r3, [pc, #456]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a71      	ldr	r2, [pc, #452]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	4b6f      	ldr	r3, [pc, #444]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a6e      	ldr	r2, [pc, #440]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d013      	beq.n	8006a50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fe fd54 	bl	80054d4 <HAL_GetTick>
 8006a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a30:	f7fe fd50 	bl	80054d4 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b64      	cmp	r3, #100	; 0x64
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e38b      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a42:	4b64      	ldr	r3, [pc, #400]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <HAL_RCC_OscConfig+0xe4>
 8006a4e:	e014      	b.n	8006a7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a50:	f7fe fd40 	bl	80054d4 <HAL_GetTick>
 8006a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a58:	f7fe fd3c 	bl	80054d4 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b64      	cmp	r3, #100	; 0x64
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e377      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a6a:	4b5a      	ldr	r3, [pc, #360]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0x10c>
 8006a76:	e000      	b.n	8006a7a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80ae 	beq.w	8006be4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a88:	4b52      	ldr	r3, [pc, #328]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a92:	4b50      	ldr	r3, [pc, #320]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d007      	beq.n	8006aae <HAL_RCC_OscConfig+0x162>
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	2b18      	cmp	r3, #24
 8006aa2:	d13a      	bne.n	8006b1a <HAL_RCC_OscConfig+0x1ce>
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d135      	bne.n	8006b1a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aae:	4b49      	ldr	r3, [pc, #292]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x17a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e349      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac6:	f7fe fd35 	bl	8005534 <HAL_GetREVID>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d817      	bhi.n	8006b04 <HAL_RCC_OscConfig+0x1b8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	2b40      	cmp	r3, #64	; 0x40
 8006ada:	d108      	bne.n	8006aee <HAL_RCC_OscConfig+0x1a2>
 8006adc:	4b3d      	ldr	r3, [pc, #244]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ae4:	4a3b      	ldr	r2, [pc, #236]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aea:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aec:	e07a      	b.n	8006be4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aee:	4b39      	ldr	r3, [pc, #228]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	031b      	lsls	r3, r3, #12
 8006afc:	4935      	ldr	r1, [pc, #212]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b02:	e06f      	b.n	8006be4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b04:	4b33      	ldr	r3, [pc, #204]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	061b      	lsls	r3, r3, #24
 8006b12:	4930      	ldr	r1, [pc, #192]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b18:	e064      	b.n	8006be4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d045      	beq.n	8006bae <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b22:	4b2c      	ldr	r3, [pc, #176]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f023 0219 	bic.w	r2, r3, #25
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	4929      	ldr	r1, [pc, #164]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fe fcce 	bl	80054d4 <HAL_GetTick>
 8006b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b3c:	f7fe fcca 	bl	80054d4 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e305      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b4e:	4b21      	ldr	r3, [pc, #132]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b5a:	f7fe fceb 	bl	8005534 <HAL_GetREVID>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d817      	bhi.n	8006b98 <HAL_RCC_OscConfig+0x24c>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d108      	bne.n	8006b82 <HAL_RCC_OscConfig+0x236>
 8006b70:	4b18      	ldr	r3, [pc, #96]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b78:	4a16      	ldr	r2, [pc, #88]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7e:	6053      	str	r3, [r2, #4]
 8006b80:	e030      	b.n	8006be4 <HAL_RCC_OscConfig+0x298>
 8006b82:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	031b      	lsls	r3, r3, #12
 8006b90:	4910      	ldr	r1, [pc, #64]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	604b      	str	r3, [r1, #4]
 8006b96:	e025      	b.n	8006be4 <HAL_RCC_OscConfig+0x298>
 8006b98:	4b0e      	ldr	r3, [pc, #56]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	061b      	lsls	r3, r3, #24
 8006ba6:	490b      	ldr	r1, [pc, #44]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	604b      	str	r3, [r1, #4]
 8006bac:	e01a      	b.n	8006be4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bae:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a08      	ldr	r2, [pc, #32]	; (8006bd4 <HAL_RCC_OscConfig+0x288>)
 8006bb4:	f023 0301 	bic.w	r3, r3, #1
 8006bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bba:	f7fe fc8b 	bl	80054d4 <HAL_GetTick>
 8006bbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bc0:	e00a      	b.n	8006bd8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bc2:	f7fe fc87 	bl	80054d4 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d903      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e2c2      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
 8006bd4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bd8:	4b94      	ldr	r3, [pc, #592]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1ee      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0310 	and.w	r3, r3, #16
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80a9 	beq.w	8006d44 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bf2:	4b8e      	ldr	r3, [pc, #568]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bfc:	4b8b      	ldr	r3, [pc, #556]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c00:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d007      	beq.n	8006c18 <HAL_RCC_OscConfig+0x2cc>
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	2b18      	cmp	r3, #24
 8006c0c:	d13a      	bne.n	8006c84 <HAL_RCC_OscConfig+0x338>
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f003 0303 	and.w	r3, r3, #3
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d135      	bne.n	8006c84 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c18:	4b84      	ldr	r3, [pc, #528]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_RCC_OscConfig+0x2e4>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	d001      	beq.n	8006c30 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e294      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c30:	f7fe fc80 	bl	8005534 <HAL_GetREVID>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d817      	bhi.n	8006c6e <HAL_RCC_OscConfig+0x322>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	d108      	bne.n	8006c58 <HAL_RCC_OscConfig+0x30c>
 8006c46:	4b79      	ldr	r3, [pc, #484]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c4e:	4a77      	ldr	r2, [pc, #476]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c54:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c56:	e075      	b.n	8006d44 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c58:	4b74      	ldr	r3, [pc, #464]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	069b      	lsls	r3, r3, #26
 8006c66:	4971      	ldr	r1, [pc, #452]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c6c:	e06a      	b.n	8006d44 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c6e:	4b6f      	ldr	r3, [pc, #444]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	061b      	lsls	r3, r3, #24
 8006c7c:	496b      	ldr	r1, [pc, #428]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c82:	e05f      	b.n	8006d44 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d042      	beq.n	8006d12 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c8c:	4b67      	ldr	r3, [pc, #412]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a66      	ldr	r2, [pc, #408]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c98:	f7fe fc1c 	bl	80054d4 <HAL_GetTick>
 8006c9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ca0:	f7fe fc18 	bl	80054d4 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e253      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cb2:	4b5e      	ldr	r3, [pc, #376]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f0      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cbe:	f7fe fc39 	bl	8005534 <HAL_GetREVID>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d817      	bhi.n	8006cfc <HAL_RCC_OscConfig+0x3b0>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d108      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x39a>
 8006cd4:	4b55      	ldr	r3, [pc, #340]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006cdc:	4a53      	ldr	r2, [pc, #332]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006cde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ce2:	6053      	str	r3, [r2, #4]
 8006ce4:	e02e      	b.n	8006d44 <HAL_RCC_OscConfig+0x3f8>
 8006ce6:	4b51      	ldr	r3, [pc, #324]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	069b      	lsls	r3, r3, #26
 8006cf4:	494d      	ldr	r1, [pc, #308]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	604b      	str	r3, [r1, #4]
 8006cfa:	e023      	b.n	8006d44 <HAL_RCC_OscConfig+0x3f8>
 8006cfc:	4b4b      	ldr	r3, [pc, #300]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	061b      	lsls	r3, r3, #24
 8006d0a:	4948      	ldr	r1, [pc, #288]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60cb      	str	r3, [r1, #12]
 8006d10:	e018      	b.n	8006d44 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006d12:	4b46      	ldr	r3, [pc, #280]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a45      	ldr	r2, [pc, #276]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1e:	f7fe fbd9 	bl	80054d4 <HAL_GetTick>
 8006d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d24:	e008      	b.n	8006d38 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d26:	f7fe fbd5 	bl	80054d4 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e210      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d38:	4b3c      	ldr	r3, [pc, #240]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1f0      	bne.n	8006d26 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d036      	beq.n	8006dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d019      	beq.n	8006d8c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d58:	4b34      	ldr	r3, [pc, #208]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5c:	4a33      	ldr	r2, [pc, #204]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006d5e:	f043 0301 	orr.w	r3, r3, #1
 8006d62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d64:	f7fe fbb6 	bl	80054d4 <HAL_GetTick>
 8006d68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d6a:	e008      	b.n	8006d7e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d6c:	f7fe fbb2 	bl	80054d4 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e1ed      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d7e:	4b2b      	ldr	r3, [pc, #172]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0f0      	beq.n	8006d6c <HAL_RCC_OscConfig+0x420>
 8006d8a:	e018      	b.n	8006dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d8c:	4b27      	ldr	r3, [pc, #156]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d90:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006d92:	f023 0301 	bic.w	r3, r3, #1
 8006d96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d98:	f7fe fb9c 	bl	80054d4 <HAL_GetTick>
 8006d9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006da0:	f7fe fb98 	bl	80054d4 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e1d3      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006db2:	4b1e      	ldr	r3, [pc, #120]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f0      	bne.n	8006da0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d038      	beq.n	8006e3c <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d019      	beq.n	8006e06 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006dd2:	4b16      	ldr	r3, [pc, #88]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a15      	ldr	r2, [pc, #84]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ddc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dde:	f7fe fb79 	bl	80054d4 <HAL_GetTick>
 8006de2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006de4:	e008      	b.n	8006df8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006de6:	f7fe fb75 	bl	80054d4 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e1b0      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0f0      	beq.n	8006de6 <HAL_RCC_OscConfig+0x49a>
 8006e04:	e01a      	b.n	8006e3c <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e06:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <HAL_RCC_OscConfig+0x4e0>)
 8006e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e12:	f7fe fb5f 	bl	80054d4 <HAL_GetTick>
 8006e16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e18:	e00a      	b.n	8006e30 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006e1a:	f7fe fb5b 	bl	80054d4 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d903      	bls.n	8006e30 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e196      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
 8006e2c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e30:	4b99      	ldr	r3, [pc, #612]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1ee      	bne.n	8006e1a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 8081 	beq.w	8006f4c <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e4a:	4b94      	ldr	r3, [pc, #592]	; (800709c <HAL_RCC_OscConfig+0x750>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a93      	ldr	r2, [pc, #588]	; (800709c <HAL_RCC_OscConfig+0x750>)
 8006e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e56:	f7fe fb3d 	bl	80054d4 <HAL_GetTick>
 8006e5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e5e:	f7fe fb39 	bl	80054d4 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b64      	cmp	r3, #100	; 0x64
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e174      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e70:	4b8a      	ldr	r3, [pc, #552]	; (800709c <HAL_RCC_OscConfig+0x750>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d106      	bne.n	8006e92 <HAL_RCC_OscConfig+0x546>
 8006e84:	4b84      	ldr	r3, [pc, #528]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e88:	4a83      	ldr	r2, [pc, #524]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006e8a:	f043 0301 	orr.w	r3, r3, #1
 8006e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e90:	e02d      	b.n	8006eee <HAL_RCC_OscConfig+0x5a2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10c      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x568>
 8006e9a:	4b7f      	ldr	r3, [pc, #508]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9e:	4a7e      	ldr	r2, [pc, #504]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea6:	4b7c      	ldr	r3, [pc, #496]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eaa:	4a7b      	ldr	r2, [pc, #492]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006eac:	f023 0304 	bic.w	r3, r3, #4
 8006eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb2:	e01c      	b.n	8006eee <HAL_RCC_OscConfig+0x5a2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	d10c      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x58a>
 8006ebc:	4b76      	ldr	r3, [pc, #472]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec0:	4a75      	ldr	r2, [pc, #468]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006ec2:	f043 0304 	orr.w	r3, r3, #4
 8006ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ec8:	4b73      	ldr	r3, [pc, #460]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ecc:	4a72      	ldr	r2, [pc, #456]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006ece:	f043 0301 	orr.w	r3, r3, #1
 8006ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed4:	e00b      	b.n	8006eee <HAL_RCC_OscConfig+0x5a2>
 8006ed6:	4b70      	ldr	r3, [pc, #448]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eda:	4a6f      	ldr	r2, [pc, #444]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee2:	4b6d      	ldr	r3, [pc, #436]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee6:	4a6c      	ldr	r2, [pc, #432]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006ee8:	f023 0304 	bic.w	r3, r3, #4
 8006eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d015      	beq.n	8006f22 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef6:	f7fe faed 	bl	80054d4 <HAL_GetTick>
 8006efa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006efc:	e00a      	b.n	8006f14 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006efe:	f7fe fae9 	bl	80054d4 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e122      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f14:	4b60      	ldr	r3, [pc, #384]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0ee      	beq.n	8006efe <HAL_RCC_OscConfig+0x5b2>
 8006f20:	e014      	b.n	8006f4c <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f22:	f7fe fad7 	bl	80054d4 <HAL_GetTick>
 8006f26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f28:	e00a      	b.n	8006f40 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2a:	f7fe fad3 	bl	80054d4 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e10c      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f40:	4b55      	ldr	r3, [pc, #340]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1ee      	bne.n	8006f2a <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8101 	beq.w	8007158 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f56:	4b50      	ldr	r3, [pc, #320]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f5e:	2b18      	cmp	r3, #24
 8006f60:	f000 80bc 	beq.w	80070dc <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	f040 809d 	bne.w	80070a8 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f6e:	4b4a      	ldr	r3, [pc, #296]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a49      	ldr	r2, [pc, #292]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7a:	f7fe faab 	bl	80054d4 <HAL_GetTick>
 8006f7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f82:	f7fe faa7 	bl	80054d4 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e0e2      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f94:	4b40      	ldr	r3, [pc, #256]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f0      	bne.n	8006f82 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fa0:	4b3d      	ldr	r3, [pc, #244]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fa4:	4b3e      	ldr	r3, [pc, #248]	; (80070a0 <HAL_RCC_OscConfig+0x754>)
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006fb0:	0112      	lsls	r2, r2, #4
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	4938      	ldr	r1, [pc, #224]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	628b      	str	r3, [r1, #40]	; 0x28
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	025b      	lsls	r3, r3, #9
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	061b      	lsls	r3, r3, #24
 8006fe6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fea:	492b      	ldr	r1, [pc, #172]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006ff0:	4b29      	ldr	r3, [pc, #164]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	4a28      	ldr	r2, [pc, #160]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ffc:	4b26      	ldr	r3, [pc, #152]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8006ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007000:	4b28      	ldr	r3, [pc, #160]	; (80070a4 <HAL_RCC_OscConfig+0x758>)
 8007002:	4013      	ands	r3, r2
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007008:	00d2      	lsls	r2, r2, #3
 800700a:	4923      	ldr	r1, [pc, #140]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 800700c:	4313      	orrs	r3, r2
 800700e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007010:	4b21      	ldr	r3, [pc, #132]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	f023 020c 	bic.w	r2, r3, #12
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	491e      	ldr	r1, [pc, #120]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 800701e:	4313      	orrs	r3, r2
 8007020:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007022:	4b1d      	ldr	r3, [pc, #116]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	f023 0202 	bic.w	r2, r3, #2
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702e:	491a      	ldr	r1, [pc, #104]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8007030:	4313      	orrs	r3, r2
 8007032:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007034:	4b18      	ldr	r3, [pc, #96]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	4a17      	ldr	r2, [pc, #92]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 800703a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800703e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007040:	4b15      	ldr	r3, [pc, #84]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	4a14      	ldr	r2, [pc, #80]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8007046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800704a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800704c:	4b12      	ldr	r3, [pc, #72]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	4a11      	ldr	r2, [pc, #68]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8007052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007058:	4b0f      	ldr	r3, [pc, #60]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	4a0e      	ldr	r2, [pc, #56]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 800705e:	f043 0301 	orr.w	r3, r3, #1
 8007062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007064:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a0b      	ldr	r2, [pc, #44]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 800706a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800706e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007070:	f7fe fa30 	bl	80054d4 <HAL_GetTick>
 8007074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007078:	f7fe fa2c 	bl	80054d4 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e067      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800708a:	4b03      	ldr	r3, [pc, #12]	; (8007098 <HAL_RCC_OscConfig+0x74c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <HAL_RCC_OscConfig+0x72c>
 8007096:	e05f      	b.n	8007158 <HAL_RCC_OscConfig+0x80c>
 8007098:	58024400 	.word	0x58024400
 800709c:	58024800 	.word	0x58024800
 80070a0:	fffffc0c 	.word	0xfffffc0c
 80070a4:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070a8:	4b2e      	ldr	r3, [pc, #184]	; (8007164 <HAL_RCC_OscConfig+0x818>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a2d      	ldr	r2, [pc, #180]	; (8007164 <HAL_RCC_OscConfig+0x818>)
 80070ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b4:	f7fe fa0e 	bl	80054d4 <HAL_GetTick>
 80070b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070bc:	f7fe fa0a 	bl	80054d4 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e045      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ce:	4b25      	ldr	r3, [pc, #148]	; (8007164 <HAL_RCC_OscConfig+0x818>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f0      	bne.n	80070bc <HAL_RCC_OscConfig+0x770>
 80070da:	e03d      	b.n	8007158 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80070dc:	4b21      	ldr	r3, [pc, #132]	; (8007164 <HAL_RCC_OscConfig+0x818>)
 80070de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070e2:	4b20      	ldr	r3, [pc, #128]	; (8007164 <HAL_RCC_OscConfig+0x818>)
 80070e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d031      	beq.n	8007154 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f003 0203 	and.w	r2, r3, #3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d12a      	bne.n	8007154 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	091b      	lsrs	r3, r3, #4
 8007102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800710a:	429a      	cmp	r2, r3
 800710c:	d122      	bne.n	8007154 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800711a:	429a      	cmp	r2, r3
 800711c:	d11a      	bne.n	8007154 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	0a5b      	lsrs	r3, r3, #9
 8007122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800712c:	429a      	cmp	r2, r3
 800712e:	d111      	bne.n	8007154 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800713e:	429a      	cmp	r2, r3
 8007140:	d108      	bne.n	8007154 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	0e1b      	lsrs	r3, r3, #24
 8007146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007150:	429a      	cmp	r2, r3
 8007152:	d001      	beq.n	8007158 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e000      	b.n	800715a <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3730      	adds	r7, #48	; 0x30
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	58024400 	.word	0x58024400

08007168 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e19c      	b.n	80074b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800717c:	4b8a      	ldr	r3, [pc, #552]	; (80073a8 <HAL_RCC_ClockConfig+0x240>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d910      	bls.n	80071ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718a:	4b87      	ldr	r3, [pc, #540]	; (80073a8 <HAL_RCC_ClockConfig+0x240>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f023 020f 	bic.w	r2, r3, #15
 8007192:	4985      	ldr	r1, [pc, #532]	; (80073a8 <HAL_RCC_ClockConfig+0x240>)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	4313      	orrs	r3, r2
 8007198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800719a:	4b83      	ldr	r3, [pc, #524]	; (80073a8 <HAL_RCC_ClockConfig+0x240>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d001      	beq.n	80071ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e184      	b.n	80074b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d010      	beq.n	80071da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	4b7b      	ldr	r3, [pc, #492]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d908      	bls.n	80071da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071c8:	4b78      	ldr	r3, [pc, #480]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	4975      	ldr	r1, [pc, #468]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d010      	beq.n	8007208 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695a      	ldr	r2, [r3, #20]
 80071ea:	4b70      	ldr	r3, [pc, #448]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d908      	bls.n	8007208 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071f6:	4b6d      	ldr	r3, [pc, #436]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	496a      	ldr	r1, [pc, #424]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 8007204:	4313      	orrs	r3, r2
 8007206:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2b00      	cmp	r3, #0
 8007212:	d010      	beq.n	8007236 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	699a      	ldr	r2, [r3, #24]
 8007218:	4b64      	ldr	r3, [pc, #400]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 800721a:	69db      	ldr	r3, [r3, #28]
 800721c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007220:	429a      	cmp	r2, r3
 8007222:	d908      	bls.n	8007236 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007224:	4b61      	ldr	r3, [pc, #388]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	495e      	ldr	r1, [pc, #376]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 8007232:	4313      	orrs	r3, r2
 8007234:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	d010      	beq.n	8007264 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69da      	ldr	r2, [r3, #28]
 8007246:	4b59      	ldr	r3, [pc, #356]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800724e:	429a      	cmp	r2, r3
 8007250:	d908      	bls.n	8007264 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007252:	4b56      	ldr	r3, [pc, #344]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	4953      	ldr	r1, [pc, #332]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 8007260:	4313      	orrs	r3, r2
 8007262:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d010      	beq.n	8007292 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	4b4d      	ldr	r3, [pc, #308]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	429a      	cmp	r2, r3
 800727e:	d908      	bls.n	8007292 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007280:	4b4a      	ldr	r3, [pc, #296]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	f023 020f 	bic.w	r2, r3, #15
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	4947      	ldr	r1, [pc, #284]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 800728e:	4313      	orrs	r3, r2
 8007290:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d055      	beq.n	800734a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800729e:	4b43      	ldr	r3, [pc, #268]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	4940      	ldr	r1, [pc, #256]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d107      	bne.n	80072c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072b8:	4b3c      	ldr	r3, [pc, #240]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d121      	bne.n	8007308 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e0f6      	b.n	80074b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d107      	bne.n	80072e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072d0:	4b36      	ldr	r3, [pc, #216]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d115      	bne.n	8007308 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e0ea      	b.n	80074b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d107      	bne.n	80072f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072e8:	4b30      	ldr	r3, [pc, #192]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d109      	bne.n	8007308 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e0de      	b.n	80074b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072f8:	4b2c      	ldr	r3, [pc, #176]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e0d6      	b.n	80074b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007308:	4b28      	ldr	r3, [pc, #160]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f023 0207 	bic.w	r2, r3, #7
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	4925      	ldr	r1, [pc, #148]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 8007316:	4313      	orrs	r3, r2
 8007318:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731a:	f7fe f8db 	bl	80054d4 <HAL_GetTick>
 800731e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007320:	e00a      	b.n	8007338 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007322:	f7fe f8d7 	bl	80054d4 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007330:	4293      	cmp	r3, r2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e0be      	b.n	80074b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007338:	4b1c      	ldr	r3, [pc, #112]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	429a      	cmp	r2, r3
 8007348:	d1eb      	bne.n	8007322 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d010      	beq.n	8007378 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	4b14      	ldr	r3, [pc, #80]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	429a      	cmp	r2, r3
 8007364:	d208      	bcs.n	8007378 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007366:	4b11      	ldr	r3, [pc, #68]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f023 020f 	bic.w	r2, r3, #15
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	490e      	ldr	r1, [pc, #56]	; (80073ac <HAL_RCC_ClockConfig+0x244>)
 8007374:	4313      	orrs	r3, r2
 8007376:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007378:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <HAL_RCC_ClockConfig+0x240>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d214      	bcs.n	80073b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007386:	4b08      	ldr	r3, [pc, #32]	; (80073a8 <HAL_RCC_ClockConfig+0x240>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f023 020f 	bic.w	r2, r3, #15
 800738e:	4906      	ldr	r1, [pc, #24]	; (80073a8 <HAL_RCC_ClockConfig+0x240>)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	4313      	orrs	r3, r2
 8007394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007396:	4b04      	ldr	r3, [pc, #16]	; (80073a8 <HAL_RCC_ClockConfig+0x240>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d005      	beq.n	80073b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e086      	b.n	80074b6 <HAL_RCC_ClockConfig+0x34e>
 80073a8:	52002000 	.word	0x52002000
 80073ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d010      	beq.n	80073de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	4b3f      	ldr	r3, [pc, #252]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d208      	bcs.n	80073de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073cc:	4b3c      	ldr	r3, [pc, #240]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	4939      	ldr	r1, [pc, #228]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d010      	beq.n	800740c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695a      	ldr	r2, [r3, #20]
 80073ee:	4b34      	ldr	r3, [pc, #208]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d208      	bcs.n	800740c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073fa:	4b31      	ldr	r3, [pc, #196]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	492e      	ldr	r1, [pc, #184]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 8007408:	4313      	orrs	r3, r2
 800740a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0310 	and.w	r3, r3, #16
 8007414:	2b00      	cmp	r3, #0
 8007416:	d010      	beq.n	800743a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699a      	ldr	r2, [r3, #24]
 800741c:	4b28      	ldr	r3, [pc, #160]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007424:	429a      	cmp	r2, r3
 8007426:	d208      	bcs.n	800743a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007428:	4b25      	ldr	r3, [pc, #148]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	4922      	ldr	r1, [pc, #136]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 8007436:	4313      	orrs	r3, r2
 8007438:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0320 	and.w	r3, r3, #32
 8007442:	2b00      	cmp	r3, #0
 8007444:	d010      	beq.n	8007468 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	69da      	ldr	r2, [r3, #28]
 800744a:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007452:	429a      	cmp	r2, r3
 8007454:	d208      	bcs.n	8007468 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007456:	4b1a      	ldr	r3, [pc, #104]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	4917      	ldr	r1, [pc, #92]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 8007464:	4313      	orrs	r3, r2
 8007466:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007468:	f000 f834 	bl	80074d4 <HAL_RCC_GetSysClockFreq>
 800746c:	4602      	mov	r2, r0
 800746e:	4b14      	ldr	r3, [pc, #80]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	4912      	ldr	r1, [pc, #72]	; (80074c4 <HAL_RCC_ClockConfig+0x35c>)
 800747a:	5ccb      	ldrb	r3, [r1, r3]
 800747c:	f003 031f 	and.w	r3, r3, #31
 8007480:	fa22 f303 	lsr.w	r3, r2, r3
 8007484:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007486:	4b0e      	ldr	r3, [pc, #56]	; (80074c0 <HAL_RCC_ClockConfig+0x358>)
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	4a0d      	ldr	r2, [pc, #52]	; (80074c4 <HAL_RCC_ClockConfig+0x35c>)
 8007490:	5cd3      	ldrb	r3, [r2, r3]
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	fa22 f303 	lsr.w	r3, r2, r3
 800749c:	4a0a      	ldr	r2, [pc, #40]	; (80074c8 <HAL_RCC_ClockConfig+0x360>)
 800749e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074a0:	4a0a      	ldr	r2, [pc, #40]	; (80074cc <HAL_RCC_ClockConfig+0x364>)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80074a6:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <HAL_RCC_ClockConfig+0x368>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fd fe76 	bl	800519c <HAL_InitTick>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	58024400 	.word	0x58024400
 80074c4:	0800addc 	.word	0x0800addc
 80074c8:	24000018 	.word	0x24000018
 80074cc:	24000014 	.word	0x24000014
 80074d0:	2400001c 	.word	0x2400001c

080074d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b089      	sub	sp, #36	; 0x24
 80074d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074da:	4bb3      	ldr	r3, [pc, #716]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074e2:	2b18      	cmp	r3, #24
 80074e4:	f200 8155 	bhi.w	8007792 <HAL_RCC_GetSysClockFreq+0x2be>
 80074e8:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80074ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ee:	bf00      	nop
 80074f0:	08007555 	.word	0x08007555
 80074f4:	08007793 	.word	0x08007793
 80074f8:	08007793 	.word	0x08007793
 80074fc:	08007793 	.word	0x08007793
 8007500:	08007793 	.word	0x08007793
 8007504:	08007793 	.word	0x08007793
 8007508:	08007793 	.word	0x08007793
 800750c:	08007793 	.word	0x08007793
 8007510:	0800757b 	.word	0x0800757b
 8007514:	08007793 	.word	0x08007793
 8007518:	08007793 	.word	0x08007793
 800751c:	08007793 	.word	0x08007793
 8007520:	08007793 	.word	0x08007793
 8007524:	08007793 	.word	0x08007793
 8007528:	08007793 	.word	0x08007793
 800752c:	08007793 	.word	0x08007793
 8007530:	08007581 	.word	0x08007581
 8007534:	08007793 	.word	0x08007793
 8007538:	08007793 	.word	0x08007793
 800753c:	08007793 	.word	0x08007793
 8007540:	08007793 	.word	0x08007793
 8007544:	08007793 	.word	0x08007793
 8007548:	08007793 	.word	0x08007793
 800754c:	08007793 	.word	0x08007793
 8007550:	08007587 	.word	0x08007587
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007554:	4b94      	ldr	r3, [pc, #592]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007560:	4b91      	ldr	r3, [pc, #580]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	08db      	lsrs	r3, r3, #3
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	4a90      	ldr	r2, [pc, #576]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800756c:	fa22 f303 	lsr.w	r3, r2, r3
 8007570:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007572:	e111      	b.n	8007798 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007574:	4b8d      	ldr	r3, [pc, #564]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007576:	61bb      	str	r3, [r7, #24]
    break;
 8007578:	e10e      	b.n	8007798 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800757a:	4b8d      	ldr	r3, [pc, #564]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800757c:	61bb      	str	r3, [r7, #24]
    break;
 800757e:	e10b      	b.n	8007798 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007580:	4b8c      	ldr	r3, [pc, #560]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007582:	61bb      	str	r3, [r7, #24]
    break;
 8007584:	e108      	b.n	8007798 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007586:	4b88      	ldr	r3, [pc, #544]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007590:	4b85      	ldr	r3, [pc, #532]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	091b      	lsrs	r3, r3, #4
 8007596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800759a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800759c:	4b82      	ldr	r3, [pc, #520]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80075a6:	4b80      	ldr	r3, [pc, #512]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075aa:	08db      	lsrs	r3, r3, #3
 80075ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	fb02 f303 	mul.w	r3, r2, r3
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80e1 	beq.w	800778c <HAL_RCC_GetSysClockFreq+0x2b8>
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	f000 8083 	beq.w	80076d8 <HAL_RCC_GetSysClockFreq+0x204>
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	f200 80a1 	bhi.w	800771c <HAL_RCC_GetSysClockFreq+0x248>
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <HAL_RCC_GetSysClockFreq+0x114>
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d056      	beq.n	8007694 <HAL_RCC_GetSysClockFreq+0x1c0>
 80075e6:	e099      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075e8:	4b6f      	ldr	r3, [pc, #444]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d02d      	beq.n	8007650 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075f4:	4b6c      	ldr	r3, [pc, #432]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	08db      	lsrs	r3, r3, #3
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	4a6b      	ldr	r2, [pc, #428]	; (80077ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007600:	fa22 f303 	lsr.w	r3, r2, r3
 8007604:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	ee07 3a90 	vmov	s15, r3
 800760c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761e:	4b62      	ldr	r3, [pc, #392]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007632:	eddf 5a61 	vldr	s11, [pc, #388]	; 80077b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800764e:	e087      	b.n	8007760 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80077bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800765e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007662:	4b51      	ldr	r3, [pc, #324]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007672:	ed97 6a02 	vldr	s12, [r7, #8]
 8007676:	eddf 5a50 	vldr	s11, [pc, #320]	; 80077b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800767a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007692:	e065      	b.n	8007760 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80077c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a6:	4b40      	ldr	r3, [pc, #256]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80077b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076d6:	e043      	b.n	8007760 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80077c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80076e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ea:	4b2f      	ldr	r3, [pc, #188]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80076fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80077b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800770e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800771a:	e021      	b.n	8007760 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007726:	eddf 6a26 	vldr	s13, [pc, #152]	; 80077c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800772a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772e:	4b1e      	ldr	r3, [pc, #120]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007742:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80077b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800775e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007760:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007764:	0a5b      	lsrs	r3, r3, #9
 8007766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776a:	3301      	adds	r3, #1
 800776c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	ee07 3a90 	vmov	s15, r3
 8007774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007778:	edd7 6a07 	vldr	s13, [r7, #28]
 800777c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007784:	ee17 3a90 	vmov	r3, s15
 8007788:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800778a:	e005      	b.n	8007798 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	61bb      	str	r3, [r7, #24]
    break;
 8007790:	e002      	b.n	8007798 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007792:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007794:	61bb      	str	r3, [r7, #24]
    break;
 8007796:	bf00      	nop
  }

  return sysclockfreq;
 8007798:	69bb      	ldr	r3, [r7, #24]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3724      	adds	r7, #36	; 0x24
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	58024400 	.word	0x58024400
 80077ac:	03d09000 	.word	0x03d09000
 80077b0:	003d0900 	.word	0x003d0900
 80077b4:	007a1200 	.word	0x007a1200
 80077b8:	46000000 	.word	0x46000000
 80077bc:	4c742400 	.word	0x4c742400
 80077c0:	4a742400 	.word	0x4a742400
 80077c4:	4af42400 	.word	0x4af42400

080077c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077ce:	f7ff fe81 	bl	80074d4 <HAL_RCC_GetSysClockFreq>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b10      	ldr	r3, [pc, #64]	; (8007818 <HAL_RCC_GetHCLKFreq+0x50>)
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	0a1b      	lsrs	r3, r3, #8
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	490f      	ldr	r1, [pc, #60]	; (800781c <HAL_RCC_GetHCLKFreq+0x54>)
 80077e0:	5ccb      	ldrb	r3, [r1, r3]
 80077e2:	f003 031f 	and.w	r3, r3, #31
 80077e6:	fa22 f303 	lsr.w	r3, r2, r3
 80077ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077ec:	4b0a      	ldr	r3, [pc, #40]	; (8007818 <HAL_RCC_GetHCLKFreq+0x50>)
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	f003 030f 	and.w	r3, r3, #15
 80077f4:	4a09      	ldr	r2, [pc, #36]	; (800781c <HAL_RCC_GetHCLKFreq+0x54>)
 80077f6:	5cd3      	ldrb	r3, [r2, r3]
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007802:	4a07      	ldr	r2, [pc, #28]	; (8007820 <HAL_RCC_GetHCLKFreq+0x58>)
 8007804:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007806:	4a07      	ldr	r2, [pc, #28]	; (8007824 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800780c:	4b04      	ldr	r3, [pc, #16]	; (8007820 <HAL_RCC_GetHCLKFreq+0x58>)
 800780e:	681b      	ldr	r3, [r3, #0]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	58024400 	.word	0x58024400
 800781c:	0800addc 	.word	0x0800addc
 8007820:	24000018 	.word	0x24000018
 8007824:	24000014 	.word	0x24000014

08007828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800782c:	f7ff ffcc 	bl	80077c8 <HAL_RCC_GetHCLKFreq>
 8007830:	4602      	mov	r2, r0
 8007832:	4b06      	ldr	r3, [pc, #24]	; (800784c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	091b      	lsrs	r3, r3, #4
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	4904      	ldr	r1, [pc, #16]	; (8007850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800783e:	5ccb      	ldrb	r3, [r1, r3]
 8007840:	f003 031f 	and.w	r3, r3, #31
 8007844:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007848:	4618      	mov	r0, r3
 800784a:	bd80      	pop	{r7, pc}
 800784c:	58024400 	.word	0x58024400
 8007850:	0800addc 	.word	0x0800addc

08007854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007858:	f7ff ffb6 	bl	80077c8 <HAL_RCC_GetHCLKFreq>
 800785c:	4602      	mov	r2, r0
 800785e:	4b06      	ldr	r3, [pc, #24]	; (8007878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	0a1b      	lsrs	r3, r3, #8
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	4904      	ldr	r1, [pc, #16]	; (800787c <HAL_RCC_GetPCLK2Freq+0x28>)
 800786a:	5ccb      	ldrb	r3, [r1, r3]
 800786c:	f003 031f 	and.w	r3, r3, #31
 8007870:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007874:	4618      	mov	r0, r3
 8007876:	bd80      	pop	{r7, pc}
 8007878:	58024400 	.word	0x58024400
 800787c:	0800addc 	.word	0x0800addc

08007880 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	223f      	movs	r2, #63	; 0x3f
 800788e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007890:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <HAL_RCC_GetClockConfig+0x7c>)
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f003 0207 	and.w	r2, r3, #7
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800789c:	4b17      	ldr	r3, [pc, #92]	; (80078fc <HAL_RCC_GetClockConfig+0x7c>)
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80078a8:	4b14      	ldr	r3, [pc, #80]	; (80078fc <HAL_RCC_GetClockConfig+0x7c>)
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	f003 020f 	and.w	r2, r3, #15
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80078b4:	4b11      	ldr	r3, [pc, #68]	; (80078fc <HAL_RCC_GetClockConfig+0x7c>)
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80078c0:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <HAL_RCC_GetClockConfig+0x7c>)
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80078cc:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <HAL_RCC_GetClockConfig+0x7c>)
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80078d8:	4b08      	ldr	r3, [pc, #32]	; (80078fc <HAL_RCC_GetClockConfig+0x7c>)
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078e4:	4b06      	ldr	r3, [pc, #24]	; (8007900 <HAL_RCC_GetClockConfig+0x80>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 020f 	and.w	r2, r3, #15
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	601a      	str	r2, [r3, #0]
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	58024400 	.word	0x58024400
 8007900:	52002000 	.word	0x52002000

08007904 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800790c:	2300      	movs	r3, #0
 800790e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007910:	2300      	movs	r3, #0
 8007912:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d03f      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007924:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007928:	d02a      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800792a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800792e:	d824      	bhi.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007934:	d018      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800793a:	d81e      	bhi.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007944:	d007      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007946:	e018      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007948:	4ba3      	ldr	r3, [pc, #652]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794c:	4aa2      	ldr	r2, [pc, #648]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800794e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007954:	e015      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	3304      	adds	r3, #4
 800795a:	2102      	movs	r1, #2
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f9d5 	bl	8008d0c <RCCEx_PLL2_Config>
 8007962:	4603      	mov	r3, r0
 8007964:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007966:	e00c      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3324      	adds	r3, #36	; 0x24
 800796c:	2102      	movs	r1, #2
 800796e:	4618      	mov	r0, r3
 8007970:	f001 fa7e 	bl	8008e70 <RCCEx_PLL3_Config>
 8007974:	4603      	mov	r3, r0
 8007976:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007978:	e003      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	75fb      	strb	r3, [r7, #23]
      break;
 800797e:	e000      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007988:	4b93      	ldr	r3, [pc, #588]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800798a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007994:	4990      	ldr	r1, [pc, #576]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007996:	4313      	orrs	r3, r2
 8007998:	650b      	str	r3, [r1, #80]	; 0x50
 800799a:	e001      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d03d      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d826      	bhi.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80079b4:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	080079d1 	.word	0x080079d1
 80079c0:	080079df 	.word	0x080079df
 80079c4:	080079f1 	.word	0x080079f1
 80079c8:	08007a09 	.word	0x08007a09
 80079cc:	08007a09 	.word	0x08007a09
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d0:	4b81      	ldr	r3, [pc, #516]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	4a80      	ldr	r2, [pc, #512]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079dc:	e015      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3304      	adds	r3, #4
 80079e2:	2100      	movs	r1, #0
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 f991 	bl	8008d0c <RCCEx_PLL2_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079ee:	e00c      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3324      	adds	r3, #36	; 0x24
 80079f4:	2100      	movs	r1, #0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 fa3a 	bl	8008e70 <RCCEx_PLL3_Config>
 80079fc:	4603      	mov	r3, r0
 80079fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a00:	e003      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	75fb      	strb	r3, [r7, #23]
      break;
 8007a06:	e000      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a10:	4b71      	ldr	r3, [pc, #452]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a14:	f023 0207 	bic.w	r2, r3, #7
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1c:	496e      	ldr	r1, [pc, #440]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	650b      	str	r3, [r1, #80]	; 0x50
 8007a22:	e001      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d042      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a3c:	d02b      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a42:	d825      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a44:	2bc0      	cmp	r3, #192	; 0xc0
 8007a46:	d028      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007a48:	2bc0      	cmp	r3, #192	; 0xc0
 8007a4a:	d821      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a4c:	2b80      	cmp	r3, #128	; 0x80
 8007a4e:	d016      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007a50:	2b80      	cmp	r3, #128	; 0x80
 8007a52:	d81d      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	d007      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007a5c:	e018      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a5e:	4b5e      	ldr	r3, [pc, #376]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	4a5d      	ldr	r2, [pc, #372]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a6a:	e017      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	2100      	movs	r1, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 f94a 	bl	8008d0c <RCCEx_PLL2_Config>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a7c:	e00e      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3324      	adds	r3, #36	; 0x24
 8007a82:	2100      	movs	r1, #0
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 f9f3 	bl	8008e70 <RCCEx_PLL3_Config>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a8e:	e005      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	75fb      	strb	r3, [r7, #23]
      break;
 8007a94:	e002      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007a96:	bf00      	nop
 8007a98:	e000      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007aa2:	4b4d      	ldr	r3, [pc, #308]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aae:	494a      	ldr	r1, [pc, #296]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	650b      	str	r3, [r1, #80]	; 0x50
 8007ab4:	e001      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d049      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ad0:	d030      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007ad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ad6:	d82a      	bhi.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ad8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007adc:	d02c      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007ade:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ae2:	d824      	bhi.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ae8:	d018      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aee:	d81e      	bhi.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007af8:	d007      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007afa:	e018      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007afc:	4b36      	ldr	r3, [pc, #216]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	4a35      	ldr	r2, [pc, #212]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b08:	e017      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	2100      	movs	r1, #0
 8007b10:	4618      	mov	r0, r3
 8007b12:	f001 f8fb 	bl	8008d0c <RCCEx_PLL2_Config>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007b1a:	e00e      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3324      	adds	r3, #36	; 0x24
 8007b20:	2100      	movs	r1, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f001 f9a4 	bl	8008e70 <RCCEx_PLL3_Config>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b2c:	e005      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	75fb      	strb	r3, [r7, #23]
      break;
 8007b32:	e002      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007b34:	bf00      	nop
 8007b36:	e000      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b40:	4b25      	ldr	r3, [pc, #148]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b44:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b4e:	4922      	ldr	r1, [pc, #136]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	658b      	str	r3, [r1, #88]	; 0x58
 8007b54:	e001      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d04b      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b70:	d030      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b76:	d82a      	bhi.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b7c:	d02e      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007b7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b82:	d824      	bhi.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b88:	d018      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b8e:	d81e      	bhi.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b98:	d007      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007b9a:	e018      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	4a0d      	ldr	r2, [pc, #52]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ba8:	e019      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3304      	adds	r3, #4
 8007bae:	2100      	movs	r1, #0
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 f8ab 	bl	8008d0c <RCCEx_PLL2_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007bba:	e010      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3324      	adds	r3, #36	; 0x24
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 f954 	bl	8008e70 <RCCEx_PLL3_Config>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bcc:	e007      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd2:	e004      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007bd4:	bf00      	nop
 8007bd6:	e002      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007bd8:	58024400 	.word	0x58024400
      break;
 8007bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10a      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007be4:	4b99      	ldr	r3, [pc, #612]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bf2:	4996      	ldr	r1, [pc, #600]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	658b      	str	r3, [r1, #88]	; 0x58
 8007bf8:	e001      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d032      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0e:	2b30      	cmp	r3, #48	; 0x30
 8007c10:	d01c      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007c12:	2b30      	cmp	r3, #48	; 0x30
 8007c14:	d817      	bhi.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	d00c      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007c1a:	2b20      	cmp	r3, #32
 8007c1c:	d813      	bhi.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d016      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007c22:	2b10      	cmp	r3, #16
 8007c24:	d10f      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c26:	4b89      	ldr	r3, [pc, #548]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	4a88      	ldr	r2, [pc, #544]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007c32:	e00e      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3304      	adds	r3, #4
 8007c38:	2102      	movs	r1, #2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 f866 	bl	8008d0c <RCCEx_PLL2_Config>
 8007c40:	4603      	mov	r3, r0
 8007c42:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007c44:	e005      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
      break;
 8007c4a:	e002      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007c4c:	bf00      	nop
 8007c4e:	e000      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d109      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c58:	4b7c      	ldr	r3, [pc, #496]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c64:	4979      	ldr	r1, [pc, #484]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c6a:	e001      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d047      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c84:	d030      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c8a:	d82a      	bhi.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007c8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c90:	d02c      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007c92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c96:	d824      	bhi.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c9c:	d018      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ca2:	d81e      	bhi.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d003      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cac:	d007      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007cae:	e018      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb0:	4b66      	ldr	r3, [pc, #408]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	4a65      	ldr	r2, [pc, #404]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007cbc:	e017      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f001 f821 	bl	8008d0c <RCCEx_PLL2_Config>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007cce:	e00e      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3324      	adds	r3, #36	; 0x24
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 f8ca 	bl	8008e70 <RCCEx_PLL3_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ce0:	e005      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce6:	e002      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007ce8:	bf00      	nop
 8007cea:	e000      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d109      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007cf4:	4b55      	ldr	r3, [pc, #340]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d00:	4952      	ldr	r1, [pc, #328]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	650b      	str	r3, [r1, #80]	; 0x50
 8007d06:	e001      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d049      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d20:	d02e      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007d22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d26:	d828      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d2c:	d02a      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007d2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d32:	d822      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d38:	d026      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007d3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d3e:	d81c      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d44:	d010      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d4a:	d816      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01d      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d54:	d111      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 ffd5 	bl	8008d0c <RCCEx_PLL2_Config>
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007d66:	e012      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3324      	adds	r3, #36	; 0x24
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f001 f87e 	bl	8008e70 <RCCEx_PLL3_Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007d78:	e009      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d7e:	e006      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d80:	bf00      	nop
 8007d82:	e004      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d84:	bf00      	nop
 8007d86:	e002      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d88:	bf00      	nop
 8007d8a:	e000      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d109      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007d94:	4b2d      	ldr	r3, [pc, #180]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d98:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007da0:	492a      	ldr	r1, [pc, #168]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	650b      	str	r3, [r1, #80]	; 0x50
 8007da6:	e001      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d04d      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dc2:	d02e      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dc8:	d828      	bhi.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dce:	d02a      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd4:	d822      	bhi.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007dd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dda:	d026      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007ddc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007de0:	d81c      	bhi.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de6:	d010      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dec:	d816      	bhi.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01d      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007df6:	d111      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 ff84 	bl	8008d0c <RCCEx_PLL2_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e08:	e012      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3324      	adds	r3, #36	; 0x24
 8007e0e:	2101      	movs	r1, #1
 8007e10:	4618      	mov	r0, r3
 8007e12:	f001 f82d 	bl	8008e70 <RCCEx_PLL3_Config>
 8007e16:	4603      	mov	r3, r0
 8007e18:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e1a:	e009      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e20:	e006      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e22:	bf00      	nop
 8007e24:	e004      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e26:	bf00      	nop
 8007e28:	e002      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e2a:	bf00      	nop
 8007e2c:	e000      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10c      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e36:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e44:	4901      	ldr	r1, [pc, #4]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	658b      	str	r3, [r1, #88]	; 0x58
 8007e4a:	e003      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007e4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d02f      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e68:	d00e      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e6e:	d814      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d015      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007e74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e78:	d10f      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e7a:	4baf      	ldr	r3, [pc, #700]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	4aae      	ldr	r2, [pc, #696]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007e86:	e00c      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 ff3c 	bl	8008d0c <RCCEx_PLL2_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007e98:	e003      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e9e:	e000      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d109      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ea8:	4ba3      	ldr	r3, [pc, #652]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb4:	49a0      	ldr	r1, [pc, #640]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	650b      	str	r3, [r1, #80]	; 0x50
 8007eba:	e001      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
 8007ebe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d032      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d81b      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007ed4:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eda:	bf00      	nop
 8007edc:	08007f13 	.word	0x08007f13
 8007ee0:	08007eed 	.word	0x08007eed
 8007ee4:	08007efb 	.word	0x08007efb
 8007ee8:	08007f13 	.word	0x08007f13
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eec:	4b92      	ldr	r3, [pc, #584]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	4a91      	ldr	r2, [pc, #580]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ef8:	e00c      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3304      	adds	r3, #4
 8007efe:	2102      	movs	r1, #2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 ff03 	bl	8008d0c <RCCEx_PLL2_Config>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007f0a:	e003      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f10:	e000      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f1a:	4b87      	ldr	r3, [pc, #540]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f1e:	f023 0203 	bic.w	r2, r3, #3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	4984      	ldr	r1, [pc, #528]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f2c:	e001      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 8086 	beq.w	800804c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f40:	4b7e      	ldr	r3, [pc, #504]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a7d      	ldr	r2, [pc, #500]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f4c:	f7fd fac2 	bl	80054d4 <HAL_GetTick>
 8007f50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f52:	e009      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f54:	f7fd fabe 	bl	80054d4 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	2b64      	cmp	r3, #100	; 0x64
 8007f60:	d902      	bls.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	75fb      	strb	r3, [r7, #23]
        break;
 8007f66:	e005      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f68:	4b74      	ldr	r3, [pc, #464]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d0ef      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d166      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f7a:	4b6f      	ldr	r3, [pc, #444]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f84:	4053      	eors	r3, r2
 8007f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d013      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f8e:	4b6a      	ldr	r3, [pc, #424]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f96:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f98:	4b67      	ldr	r3, [pc, #412]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9c:	4a66      	ldr	r2, [pc, #408]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fa2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fa4:	4b64      	ldr	r3, [pc, #400]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa8:	4a63      	ldr	r2, [pc, #396]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007fb0:	4a61      	ldr	r2, [pc, #388]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fc0:	d115      	bne.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc2:	f7fd fa87 	bl	80054d4 <HAL_GetTick>
 8007fc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fc8:	e00b      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fca:	f7fd fa83 	bl	80054d4 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d902      	bls.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	75fb      	strb	r3, [r7, #23]
            break;
 8007fe0:	e005      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fe2:	4b55      	ldr	r3, [pc, #340]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0ed      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d126      	bne.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008002:	d10d      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008004:	4b4c      	ldr	r3, [pc, #304]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008012:	0919      	lsrs	r1, r3, #4
 8008014:	4b4a      	ldr	r3, [pc, #296]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008016:	400b      	ands	r3, r1
 8008018:	4947      	ldr	r1, [pc, #284]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800801a:	4313      	orrs	r3, r2
 800801c:	610b      	str	r3, [r1, #16]
 800801e:	e005      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008020:	4b45      	ldr	r3, [pc, #276]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	4a44      	ldr	r2, [pc, #272]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008026:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800802a:	6113      	str	r3, [r2, #16]
 800802c:	4b42      	ldr	r3, [pc, #264]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800802e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800803a:	493f      	ldr	r1, [pc, #252]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800803c:	4313      	orrs	r3, r2
 800803e:	670b      	str	r3, [r1, #112]	; 0x70
 8008040:	e004      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	75bb      	strb	r3, [r7, #22]
 8008046:	e001      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8085 	beq.w	8008164 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800805e:	2b28      	cmp	r3, #40	; 0x28
 8008060:	d866      	bhi.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008062:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008068:	08008145 	.word	0x08008145
 800806c:	08008131 	.word	0x08008131
 8008070:	08008131 	.word	0x08008131
 8008074:	08008131 	.word	0x08008131
 8008078:	08008131 	.word	0x08008131
 800807c:	08008131 	.word	0x08008131
 8008080:	08008131 	.word	0x08008131
 8008084:	08008131 	.word	0x08008131
 8008088:	0800810d 	.word	0x0800810d
 800808c:	08008131 	.word	0x08008131
 8008090:	08008131 	.word	0x08008131
 8008094:	08008131 	.word	0x08008131
 8008098:	08008131 	.word	0x08008131
 800809c:	08008131 	.word	0x08008131
 80080a0:	08008131 	.word	0x08008131
 80080a4:	08008131 	.word	0x08008131
 80080a8:	0800811f 	.word	0x0800811f
 80080ac:	08008131 	.word	0x08008131
 80080b0:	08008131 	.word	0x08008131
 80080b4:	08008131 	.word	0x08008131
 80080b8:	08008131 	.word	0x08008131
 80080bc:	08008131 	.word	0x08008131
 80080c0:	08008131 	.word	0x08008131
 80080c4:	08008131 	.word	0x08008131
 80080c8:	08008145 	.word	0x08008145
 80080cc:	08008131 	.word	0x08008131
 80080d0:	08008131 	.word	0x08008131
 80080d4:	08008131 	.word	0x08008131
 80080d8:	08008131 	.word	0x08008131
 80080dc:	08008131 	.word	0x08008131
 80080e0:	08008131 	.word	0x08008131
 80080e4:	08008131 	.word	0x08008131
 80080e8:	08008145 	.word	0x08008145
 80080ec:	08008131 	.word	0x08008131
 80080f0:	08008131 	.word	0x08008131
 80080f4:	08008131 	.word	0x08008131
 80080f8:	08008131 	.word	0x08008131
 80080fc:	08008131 	.word	0x08008131
 8008100:	08008131 	.word	0x08008131
 8008104:	08008131 	.word	0x08008131
 8008108:	08008145 	.word	0x08008145
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3304      	adds	r3, #4
 8008110:	2101      	movs	r1, #1
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fdfa 	bl	8008d0c <RCCEx_PLL2_Config>
 8008118:	4603      	mov	r3, r0
 800811a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800811c:	e013      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3324      	adds	r3, #36	; 0x24
 8008122:	2101      	movs	r1, #1
 8008124:	4618      	mov	r0, r3
 8008126:	f000 fea3 	bl	8008e70 <RCCEx_PLL3_Config>
 800812a:	4603      	mov	r3, r0
 800812c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800812e:	e00a      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]
      break;
 8008134:	e007      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008136:	bf00      	nop
 8008138:	58024400 	.word	0x58024400
 800813c:	58024800 	.word	0x58024800
 8008140:	00ffffcf 	.word	0x00ffffcf
      break;
 8008144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d109      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800814c:	4b96      	ldr	r3, [pc, #600]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800814e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008150:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008158:	4993      	ldr	r1, [pc, #588]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800815a:	4313      	orrs	r3, r2
 800815c:	654b      	str	r3, [r1, #84]	; 0x54
 800815e:	e001      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
 8008162:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d038      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008174:	2b05      	cmp	r3, #5
 8008176:	d821      	bhi.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008178:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800817a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817e:	bf00      	nop
 8008180:	080081c3 	.word	0x080081c3
 8008184:	08008199 	.word	0x08008199
 8008188:	080081ab 	.word	0x080081ab
 800818c:	080081c3 	.word	0x080081c3
 8008190:	080081c3 	.word	0x080081c3
 8008194:	080081c3 	.word	0x080081c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3304      	adds	r3, #4
 800819c:	2101      	movs	r1, #1
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fdb4 	bl	8008d0c <RCCEx_PLL2_Config>
 80081a4:	4603      	mov	r3, r0
 80081a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80081a8:	e00c      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3324      	adds	r3, #36	; 0x24
 80081ae:	2101      	movs	r1, #1
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 fe5d 	bl	8008e70 <RCCEx_PLL3_Config>
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80081ba:	e003      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]
      break;
 80081c0:	e000      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80081c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d109      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80081ca:	4b77      	ldr	r3, [pc, #476]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ce:	f023 0207 	bic.w	r2, r3, #7
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d6:	4974      	ldr	r1, [pc, #464]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	654b      	str	r3, [r1, #84]	; 0x54
 80081dc:	e001      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0304 	and.w	r3, r3, #4
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d03a      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f4:	2b05      	cmp	r3, #5
 80081f6:	d821      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80081f8:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80081fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fe:	bf00      	nop
 8008200:	08008243 	.word	0x08008243
 8008204:	08008219 	.word	0x08008219
 8008208:	0800822b 	.word	0x0800822b
 800820c:	08008243 	.word	0x08008243
 8008210:	08008243 	.word	0x08008243
 8008214:	08008243 	.word	0x08008243
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	2101      	movs	r1, #1
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fd74 	bl	8008d0c <RCCEx_PLL2_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008228:	e00c      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3324      	adds	r3, #36	; 0x24
 800822e:	2101      	movs	r1, #1
 8008230:	4618      	mov	r0, r3
 8008232:	f000 fe1d 	bl	8008e70 <RCCEx_PLL3_Config>
 8008236:	4603      	mov	r3, r0
 8008238:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800823a:	e003      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	75fb      	strb	r3, [r7, #23]
      break;
 8008240:	e000      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008244:	7dfb      	ldrb	r3, [r7, #23]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10a      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800824a:	4b57      	ldr	r3, [pc, #348]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800824c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824e:	f023 0207 	bic.w	r2, r3, #7
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008258:	4953      	ldr	r1, [pc, #332]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800825a:	4313      	orrs	r3, r2
 800825c:	658b      	str	r3, [r1, #88]	; 0x58
 800825e:	e001      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0320 	and.w	r3, r3, #32
 800826c:	2b00      	cmp	r3, #0
 800826e:	d04b      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800827a:	d02e      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800827c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008280:	d828      	bhi.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008286:	d02a      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800828c:	d822      	bhi.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800828e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008292:	d026      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008294:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008298:	d81c      	bhi.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800829a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800829e:	d010      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80082a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a4:	d816      	bhi.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d01d      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80082aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ae:	d111      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3304      	adds	r3, #4
 80082b4:	2100      	movs	r1, #0
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fd28 	bl	8008d0c <RCCEx_PLL2_Config>
 80082bc:	4603      	mov	r3, r0
 80082be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80082c0:	e012      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3324      	adds	r3, #36	; 0x24
 80082c6:	2102      	movs	r1, #2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fdd1 	bl	8008e70 <RCCEx_PLL3_Config>
 80082ce:	4603      	mov	r3, r0
 80082d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80082d2:	e009      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	75fb      	strb	r3, [r7, #23]
      break;
 80082d8:	e006      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082da:	bf00      	nop
 80082dc:	e004      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082de:	bf00      	nop
 80082e0:	e002      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082e2:	bf00      	nop
 80082e4:	e000      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082ee:	4b2e      	ldr	r3, [pc, #184]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fc:	492a      	ldr	r1, [pc, #168]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	654b      	str	r3, [r1, #84]	; 0x54
 8008302:	e001      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008304:	7dfb      	ldrb	r3, [r7, #23]
 8008306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008310:	2b00      	cmp	r3, #0
 8008312:	d04d      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800831a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800831e:	d02e      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008320:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008324:	d828      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832a:	d02a      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800832c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008330:	d822      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008332:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008336:	d026      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800833c:	d81c      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800833e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008342:	d010      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008348:	d816      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800834a:	2b00      	cmp	r3, #0
 800834c:	d01d      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800834e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008352:	d111      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3304      	adds	r3, #4
 8008358:	2100      	movs	r1, #0
 800835a:	4618      	mov	r0, r3
 800835c:	f000 fcd6 	bl	8008d0c <RCCEx_PLL2_Config>
 8008360:	4603      	mov	r3, r0
 8008362:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008364:	e012      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3324      	adds	r3, #36	; 0x24
 800836a:	2102      	movs	r1, #2
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fd7f 	bl	8008e70 <RCCEx_PLL3_Config>
 8008372:	4603      	mov	r3, r0
 8008374:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008376:	e009      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	75fb      	strb	r3, [r7, #23]
      break;
 800837c:	e006      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800837e:	bf00      	nop
 8008380:	e004      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008382:	bf00      	nop
 8008384:	e002      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008386:	bf00      	nop
 8008388:	e000      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800838a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10c      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008392:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008396:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083a0:	4901      	ldr	r1, [pc, #4]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	658b      	str	r3, [r1, #88]	; 0x58
 80083a6:	e003      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80083a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d04b      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083c6:	d02e      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80083c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083cc:	d828      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d2:	d02a      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80083d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d8:	d822      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80083de:	d026      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80083e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80083e4:	d81c      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083ea:	d010      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80083ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083f0:	d816      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d01d      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80083f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083fa:	d111      	bne.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3304      	adds	r3, #4
 8008400:	2100      	movs	r1, #0
 8008402:	4618      	mov	r0, r3
 8008404:	f000 fc82 	bl	8008d0c <RCCEx_PLL2_Config>
 8008408:	4603      	mov	r3, r0
 800840a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800840c:	e012      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3324      	adds	r3, #36	; 0x24
 8008412:	2102      	movs	r1, #2
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fd2b 	bl	8008e70 <RCCEx_PLL3_Config>
 800841a:	4603      	mov	r3, r0
 800841c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800841e:	e009      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	75fb      	strb	r3, [r7, #23]
      break;
 8008424:	e006      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008426:	bf00      	nop
 8008428:	e004      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800842a:	bf00      	nop
 800842c:	e002      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800842e:	bf00      	nop
 8008430:	e000      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800843a:	4b9d      	ldr	r3, [pc, #628]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800843c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008448:	4999      	ldr	r1, [pc, #612]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800844a:	4313      	orrs	r3, r2
 800844c:	658b      	str	r3, [r1, #88]	; 0x58
 800844e:	e001      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008450:	7dfb      	ldrb	r3, [r7, #23]
 8008452:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0308 	and.w	r3, r3, #8
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01a      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846a:	d10a      	bne.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3324      	adds	r3, #36	; 0x24
 8008470:	2102      	movs	r1, #2
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fcfc 	bl	8008e70 <RCCEx_PLL3_Config>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008482:	4b8b      	ldr	r3, [pc, #556]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008486:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008490:	4987      	ldr	r1, [pc, #540]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008492:	4313      	orrs	r3, r2
 8008494:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0310 	and.w	r3, r3, #16
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d01a      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ac:	d10a      	bne.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	3324      	adds	r3, #36	; 0x24
 80084b2:	2102      	movs	r1, #2
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 fcdb 	bl	8008e70 <RCCEx_PLL3_Config>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084c4:	4b7a      	ldr	r3, [pc, #488]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084d2:	4977      	ldr	r1, [pc, #476]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d034      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084ee:	d01d      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80084f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084f4:	d817      	bhi.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80084fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084fe:	d009      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008500:	e011      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3304      	adds	r3, #4
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f000 fbff 	bl	8008d0c <RCCEx_PLL2_Config>
 800850e:	4603      	mov	r3, r0
 8008510:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008512:	e00c      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3324      	adds	r3, #36	; 0x24
 8008518:	2102      	movs	r1, #2
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fca8 	bl	8008e70 <RCCEx_PLL3_Config>
 8008520:	4603      	mov	r3, r0
 8008522:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008524:	e003      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	75fb      	strb	r3, [r7, #23]
      break;
 800852a:	e000      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800852c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008534:	4b5e      	ldr	r3, [pc, #376]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008542:	495b      	ldr	r1, [pc, #364]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008544:	4313      	orrs	r3, r2
 8008546:	658b      	str	r3, [r1, #88]	; 0x58
 8008548:	e001      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d033      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008560:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008564:	d01c      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008566:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800856a:	d816      	bhi.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800856c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008570:	d003      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008576:	d007      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008578:	e00f      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800857a:	4b4d      	ldr	r3, [pc, #308]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800857c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857e:	4a4c      	ldr	r2, [pc, #304]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008584:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008586:	e00c      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3324      	adds	r3, #36	; 0x24
 800858c:	2101      	movs	r1, #1
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fc6e 	bl	8008e70 <RCCEx_PLL3_Config>
 8008594:	4603      	mov	r3, r0
 8008596:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008598:	e003      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	75fb      	strb	r3, [r7, #23]
      break;
 800859e:	e000      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80085a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10a      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085a8:	4b41      	ldr	r3, [pc, #260]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085b6:	493e      	ldr	r1, [pc, #248]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	654b      	str	r3, [r1, #84]	; 0x54
 80085bc:	e001      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d029      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80085d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085da:	d007      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80085dc:	e00f      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085de:	4b34      	ldr	r3, [pc, #208]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e2:	4a33      	ldr	r2, [pc, #204]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80085ea:	e00b      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3304      	adds	r3, #4
 80085f0:	2102      	movs	r1, #2
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fb8a 	bl	8008d0c <RCCEx_PLL2_Config>
 80085f8:	4603      	mov	r3, r0
 80085fa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80085fc:	e002      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	75fb      	strb	r3, [r7, #23]
      break;
 8008602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008604:	7dfb      	ldrb	r3, [r7, #23]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d109      	bne.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800860a:	4b29      	ldr	r3, [pc, #164]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800860c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800860e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008616:	4926      	ldr	r1, [pc, #152]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008618:	4313      	orrs	r3, r2
 800861a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800861c:	e001      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3324      	adds	r3, #36	; 0x24
 8008632:	2102      	movs	r1, #2
 8008634:	4618      	mov	r0, r3
 8008636:	f000 fc1b 	bl	8008e70 <RCCEx_PLL3_Config>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d033      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008658:	d017      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800865a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800865e:	d811      	bhi.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008664:	d013      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800866a:	d80b      	bhi.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800866c:	2b00      	cmp	r3, #0
 800866e:	d010      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008674:	d106      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008676:	4b0e      	ldr	r3, [pc, #56]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867a:	4a0d      	ldr	r2, [pc, #52]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800867c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008680:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008682:	e007      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	75fb      	strb	r3, [r7, #23]
      break;
 8008688:	e004      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800868a:	bf00      	nop
 800868c:	e002      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800868e:	bf00      	nop
 8008690:	e000      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10c      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800869a:	4b05      	ldr	r3, [pc, #20]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800869c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a6:	4902      	ldr	r1, [pc, #8]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	654b      	str	r3, [r1, #84]	; 0x54
 80086ac:	e004      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80086ae:	bf00      	nop
 80086b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d008      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80086c4:	4b31      	ldr	r3, [pc, #196]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d0:	492e      	ldr	r1, [pc, #184]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d009      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80086e2:	4b2a      	ldr	r3, [pc, #168]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086f0:	4926      	ldr	r1, [pc, #152]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d008      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008702:	4b22      	ldr	r3, [pc, #136]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008706:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800870e:	491f      	ldr	r1, [pc, #124]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008710:	4313      	orrs	r3, r2
 8008712:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00d      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008720:	4b1a      	ldr	r3, [pc, #104]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	4a19      	ldr	r2, [pc, #100]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008726:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800872a:	6113      	str	r3, [r2, #16]
 800872c:	4b17      	ldr	r3, [pc, #92]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800872e:	691a      	ldr	r2, [r3, #16]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008736:	4915      	ldr	r1, [pc, #84]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008738:	4313      	orrs	r3, r2
 800873a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	da08      	bge.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008744:	4b11      	ldr	r3, [pc, #68]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008748:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008750:	490e      	ldr	r1, [pc, #56]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008752:	4313      	orrs	r3, r2
 8008754:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d009      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008762:	4b0a      	ldr	r3, [pc, #40]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008766:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008770:	4906      	ldr	r1, [pc, #24]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008772:	4313      	orrs	r3, r2
 8008774:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008776:	7dbb      	ldrb	r3, [r7, #22]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	e000      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	58024400 	.word	0x58024400

08008790 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008794:	f7ff f818 	bl	80077c8 <HAL_RCC_GetHCLKFreq>
 8008798:	4602      	mov	r2, r0
 800879a:	4b06      	ldr	r3, [pc, #24]	; (80087b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	091b      	lsrs	r3, r3, #4
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	4904      	ldr	r1, [pc, #16]	; (80087b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087a6:	5ccb      	ldrb	r3, [r1, r3]
 80087a8:	f003 031f 	and.w	r3, r3, #31
 80087ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	58024400 	.word	0x58024400
 80087b8:	0800addc 	.word	0x0800addc

080087bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80087bc:	b480      	push	{r7}
 80087be:	b089      	sub	sp, #36	; 0x24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087c4:	4ba1      	ldr	r3, [pc, #644]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c8:	f003 0303 	and.w	r3, r3, #3
 80087cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80087ce:	4b9f      	ldr	r3, [pc, #636]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	0b1b      	lsrs	r3, r3, #12
 80087d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087da:	4b9c      	ldr	r3, [pc, #624]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087de:	091b      	lsrs	r3, r3, #4
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80087e6:	4b99      	ldr	r3, [pc, #612]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ea:	08db      	lsrs	r3, r3, #3
 80087ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	fb02 f303 	mul.w	r3, r2, r3
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 8111 	beq.w	8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	2b02      	cmp	r3, #2
 800880e:	f000 8083 	beq.w	8008918 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2b02      	cmp	r3, #2
 8008816:	f200 80a1 	bhi.w	800895c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d056      	beq.n	80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008826:	e099      	b.n	800895c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008828:	4b88      	ldr	r3, [pc, #544]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0320 	and.w	r3, r3, #32
 8008830:	2b00      	cmp	r3, #0
 8008832:	d02d      	beq.n	8008890 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008834:	4b85      	ldr	r3, [pc, #532]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	08db      	lsrs	r3, r3, #3
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	4a84      	ldr	r2, [pc, #528]	; (8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008840:	fa22 f303 	lsr.w	r3, r2, r3
 8008844:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	ee07 3a90 	vmov	s15, r3
 800884c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800885e:	4b7b      	ldr	r3, [pc, #492]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008872:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800888e:	e087      	b.n	80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800889e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a2:	4b6a      	ldr	r3, [pc, #424]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088aa:	ee07 3a90 	vmov	s15, r3
 80088ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088d2:	e065      	b.n	80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e6:	4b59      	ldr	r3, [pc, #356]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800890a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800890e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008916:	e043      	b.n	80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008922:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800892a:	4b48      	ldr	r3, [pc, #288]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893a:	ed97 6a03 	vldr	s12, [r7, #12]
 800893e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800894e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800895a:	e021      	b.n	80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	ee07 3a90 	vmov	s15, r3
 8008962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008966:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800896a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800896e:	4b37      	ldr	r3, [pc, #220]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800897e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008982:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800898a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800898e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800899a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800899e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80089a0:	4b2a      	ldr	r3, [pc, #168]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a4:	0a5b      	lsrs	r3, r3, #9
 80089a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80089be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089c6:	ee17 2a90 	vmov	r2, s15
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80089ce:	4b1f      	ldr	r3, [pc, #124]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d2:	0c1b      	lsrs	r3, r3, #16
 80089d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d8:	ee07 3a90 	vmov	s15, r3
 80089dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f4:	ee17 2a90 	vmov	r2, s15
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80089fc:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a00:	0e1b      	lsrs	r3, r3, #24
 8008a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a22:	ee17 2a90 	vmov	r2, s15
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a2a:	e008      	b.n	8008a3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	609a      	str	r2, [r3, #8]
}
 8008a3e:	bf00      	nop
 8008a40:	3724      	adds	r7, #36	; 0x24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	58024400 	.word	0x58024400
 8008a50:	03d09000 	.word	0x03d09000
 8008a54:	46000000 	.word	0x46000000
 8008a58:	4c742400 	.word	0x4c742400
 8008a5c:	4a742400 	.word	0x4a742400
 8008a60:	4af42400 	.word	0x4af42400

08008a64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b089      	sub	sp, #36	; 0x24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a6c:	4ba1      	ldr	r3, [pc, #644]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008a76:	4b9f      	ldr	r3, [pc, #636]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	0d1b      	lsrs	r3, r3, #20
 8008a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a82:	4b9c      	ldr	r3, [pc, #624]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a86:	0a1b      	lsrs	r3, r3, #8
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008a8e:	4b99      	ldr	r3, [pc, #612]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a92:	08db      	lsrs	r3, r3, #3
 8008a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 8111 	beq.w	8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	f000 8083 	beq.w	8008bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	f200 80a1 	bhi.w	8008c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d056      	beq.n	8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ace:	e099      	b.n	8008c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ad0:	4b88      	ldr	r3, [pc, #544]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d02d      	beq.n	8008b38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008adc:	4b85      	ldr	r3, [pc, #532]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	08db      	lsrs	r3, r3, #3
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	4a84      	ldr	r2, [pc, #528]	; (8008cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	ee07 3a90 	vmov	s15, r3
 8008af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b06:	4b7b      	ldr	r3, [pc, #492]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b36:	e087      	b.n	8008c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4a:	4b6a      	ldr	r3, [pc, #424]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b7a:	e065      	b.n	8008c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8e:	4b59      	ldr	r3, [pc, #356]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ba2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bbe:	e043      	b.n	8008c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bd2:	4b48      	ldr	r3, [pc, #288]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008be6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c02:	e021      	b.n	8008c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c16:	4b37      	ldr	r3, [pc, #220]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008c48:	4b2a      	ldr	r3, [pc, #168]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4c:	0a5b      	lsrs	r3, r3, #9
 8008c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c6e:	ee17 2a90 	vmov	r2, s15
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008c76:	4b1f      	ldr	r3, [pc, #124]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7a:	0c1b      	lsrs	r3, r3, #16
 8008c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c80:	ee07 3a90 	vmov	s15, r3
 8008c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c9c:	ee17 2a90 	vmov	r2, s15
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008ca4:	4b13      	ldr	r3, [pc, #76]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca8:	0e1b      	lsrs	r3, r3, #24
 8008caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cca:	ee17 2a90 	vmov	r2, s15
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008cd2:	e008      	b.n	8008ce6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	609a      	str	r2, [r3, #8]
}
 8008ce6:	bf00      	nop
 8008ce8:	3724      	adds	r7, #36	; 0x24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	58024400 	.word	0x58024400
 8008cf8:	03d09000 	.word	0x03d09000
 8008cfc:	46000000 	.word	0x46000000
 8008d00:	4c742400 	.word	0x4c742400
 8008d04:	4a742400 	.word	0x4a742400
 8008d08:	4af42400 	.word	0x4af42400

08008d0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d1a:	4b53      	ldr	r3, [pc, #332]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	f003 0303 	and.w	r3, r3, #3
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d101      	bne.n	8008d2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e099      	b.n	8008e5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d2a:	4b4f      	ldr	r3, [pc, #316]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a4e      	ldr	r2, [pc, #312]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d36:	f7fc fbcd 	bl	80054d4 <HAL_GetTick>
 8008d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d3c:	e008      	b.n	8008d50 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d3e:	f7fc fbc9 	bl	80054d4 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d901      	bls.n	8008d50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e086      	b.n	8008e5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d50:	4b45      	ldr	r3, [pc, #276]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1f0      	bne.n	8008d3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d5c:	4b42      	ldr	r3, [pc, #264]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	031b      	lsls	r3, r3, #12
 8008d6a:	493f      	ldr	r1, [pc, #252]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	628b      	str	r3, [r1, #40]	; 0x28
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	025b      	lsls	r3, r3, #9
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	431a      	orrs	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	041b      	lsls	r3, r3, #16
 8008d8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d92:	431a      	orrs	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	061b      	lsls	r3, r3, #24
 8008d9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008da0:	4931      	ldr	r1, [pc, #196]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008da6:	4b30      	ldr	r3, [pc, #192]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008daa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	492d      	ldr	r1, [pc, #180]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008db8:	4b2b      	ldr	r3, [pc, #172]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbc:	f023 0220 	bic.w	r2, r3, #32
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	4928      	ldr	r1, [pc, #160]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008dca:	4b27      	ldr	r3, [pc, #156]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	4a26      	ldr	r2, [pc, #152]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dd0:	f023 0310 	bic.w	r3, r3, #16
 8008dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008dd6:	4b24      	ldr	r3, [pc, #144]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dda:	4b24      	ldr	r3, [pc, #144]	; (8008e6c <RCCEx_PLL2_Config+0x160>)
 8008ddc:	4013      	ands	r3, r2
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	69d2      	ldr	r2, [r2, #28]
 8008de2:	00d2      	lsls	r2, r2, #3
 8008de4:	4920      	ldr	r1, [pc, #128]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008dea:	4b1f      	ldr	r3, [pc, #124]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dee:	4a1e      	ldr	r2, [pc, #120]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008df0:	f043 0310 	orr.w	r3, r3, #16
 8008df4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d106      	bne.n	8008e0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008dfc:	4b1a      	ldr	r3, [pc, #104]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	4a19      	ldr	r2, [pc, #100]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e08:	e00f      	b.n	8008e2a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d106      	bne.n	8008e1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008e10:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	4a14      	ldr	r2, [pc, #80]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e1c:	e005      	b.n	8008e2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e1e:	4b12      	ldr	r3, [pc, #72]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e22:	4a11      	ldr	r2, [pc, #68]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e2a:	4b0f      	ldr	r3, [pc, #60]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a0e      	ldr	r2, [pc, #56]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e36:	f7fc fb4d 	bl	80054d4 <HAL_GetTick>
 8008e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e3c:	e008      	b.n	8008e50 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e3e:	f7fc fb49 	bl	80054d4 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d901      	bls.n	8008e50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e006      	b.n	8008e5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e50:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0f0      	beq.n	8008e3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	58024400 	.word	0x58024400
 8008e6c:	ffff0007 	.word	0xffff0007

08008e70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e7e:	4b53      	ldr	r3, [pc, #332]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d101      	bne.n	8008e8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e099      	b.n	8008fc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e8e:	4b4f      	ldr	r3, [pc, #316]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a4e      	ldr	r2, [pc, #312]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e9a:	f7fc fb1b 	bl	80054d4 <HAL_GetTick>
 8008e9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ea0:	e008      	b.n	8008eb4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008ea2:	f7fc fb17 	bl	80054d4 <HAL_GetTick>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d901      	bls.n	8008eb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e086      	b.n	8008fc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008eb4:	4b45      	ldr	r3, [pc, #276]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1f0      	bne.n	8008ea2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ec0:	4b42      	ldr	r3, [pc, #264]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	051b      	lsls	r3, r3, #20
 8008ece:	493f      	ldr	r1, [pc, #252]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	628b      	str	r3, [r1, #40]	; 0x28
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	025b      	lsls	r3, r3, #9
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	041b      	lsls	r3, r3, #16
 8008ef2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	061b      	lsls	r3, r3, #24
 8008f00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f04:	4931      	ldr	r1, [pc, #196]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f0a:	4b30      	ldr	r3, [pc, #192]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	492d      	ldr	r1, [pc, #180]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f1c:	4b2b      	ldr	r3, [pc, #172]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	4928      	ldr	r1, [pc, #160]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f2e:	4b27      	ldr	r3, [pc, #156]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f32:	4a26      	ldr	r2, [pc, #152]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f3a:	4b24      	ldr	r3, [pc, #144]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f3e:	4b24      	ldr	r3, [pc, #144]	; (8008fd0 <RCCEx_PLL3_Config+0x160>)
 8008f40:	4013      	ands	r3, r2
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	69d2      	ldr	r2, [r2, #28]
 8008f46:	00d2      	lsls	r2, r2, #3
 8008f48:	4920      	ldr	r1, [pc, #128]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f4e:	4b1f      	ldr	r3, [pc, #124]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	4a1e      	ldr	r2, [pc, #120]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d106      	bne.n	8008f6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f60:	4b1a      	ldr	r3, [pc, #104]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	4a19      	ldr	r2, [pc, #100]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f6c:	e00f      	b.n	8008f8e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d106      	bne.n	8008f82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f74:	4b15      	ldr	r3, [pc, #84]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	4a14      	ldr	r2, [pc, #80]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f80:	e005      	b.n	8008f8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f82:	4b12      	ldr	r3, [pc, #72]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	4a11      	ldr	r2, [pc, #68]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008f8e:	4b0f      	ldr	r3, [pc, #60]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a0e      	ldr	r2, [pc, #56]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f9a:	f7fc fa9b 	bl	80054d4 <HAL_GetTick>
 8008f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fa0:	e008      	b.n	8008fb4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008fa2:	f7fc fa97 	bl	80054d4 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d901      	bls.n	8008fb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e006      	b.n	8008fc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fb4:	4b05      	ldr	r3, [pc, #20]	; (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0f0      	beq.n	8008fa2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	58024400 	.word	0x58024400
 8008fd0:	ffff0007 	.word	0xffff0007

08008fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e049      	b.n	800907a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d106      	bne.n	8009000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f841 	bl	8009082 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3304      	adds	r3, #4
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f000 f9f8 	bl	8009408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800908a:	bf00      	nop
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
	...

08009098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d001      	beq.n	80090b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e04f      	b.n	8009150 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0201 	orr.w	r2, r2, #1
 80090c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a23      	ldr	r2, [pc, #140]	; (800915c <HAL_TIM_Base_Start_IT+0xc4>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d01d      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090da:	d018      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a1f      	ldr	r2, [pc, #124]	; (8009160 <HAL_TIM_Base_Start_IT+0xc8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d013      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a1e      	ldr	r2, [pc, #120]	; (8009164 <HAL_TIM_Base_Start_IT+0xcc>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d00e      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a1c      	ldr	r2, [pc, #112]	; (8009168 <HAL_TIM_Base_Start_IT+0xd0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d009      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a1b      	ldr	r2, [pc, #108]	; (800916c <HAL_TIM_Base_Start_IT+0xd4>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d004      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a19      	ldr	r2, [pc, #100]	; (8009170 <HAL_TIM_Base_Start_IT+0xd8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d115      	bne.n	800913a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	4b17      	ldr	r3, [pc, #92]	; (8009174 <HAL_TIM_Base_Start_IT+0xdc>)
 8009116:	4013      	ands	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b06      	cmp	r3, #6
 800911e:	d015      	beq.n	800914c <HAL_TIM_Base_Start_IT+0xb4>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009126:	d011      	beq.n	800914c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0201 	orr.w	r2, r2, #1
 8009136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009138:	e008      	b.n	800914c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0201 	orr.w	r2, r2, #1
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	e000      	b.n	800914e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800914c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	40010000 	.word	0x40010000
 8009160:	40000400 	.word	0x40000400
 8009164:	40000800 	.word	0x40000800
 8009168:	40000c00 	.word	0x40000c00
 800916c:	40010400 	.word	0x40010400
 8009170:	40001800 	.word	0x40001800
 8009174:	00010007 	.word	0x00010007

08009178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b02      	cmp	r3, #2
 800918c:	d122      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b02      	cmp	r3, #2
 800919a:	d11b      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0202 	mvn.w	r2, #2
 80091a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f905 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 80091c0:	e005      	b.n	80091ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f8f7 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f908 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	f003 0304 	and.w	r3, r3, #4
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d122      	bne.n	8009228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	d11b      	bne.n	8009228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0204 	mvn.w	r2, #4
 80091f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2202      	movs	r2, #2
 80091fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f8db 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 8009214:	e005      	b.n	8009222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f8cd 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f8de 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	f003 0308 	and.w	r3, r3, #8
 8009232:	2b08      	cmp	r3, #8
 8009234:	d122      	bne.n	800927c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f003 0308 	and.w	r3, r3, #8
 8009240:	2b08      	cmp	r3, #8
 8009242:	d11b      	bne.n	800927c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f06f 0208 	mvn.w	r2, #8
 800924c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2204      	movs	r2, #4
 8009252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d003      	beq.n	800926a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f8b1 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 8009268:	e005      	b.n	8009276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f8a3 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f8b4 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	f003 0310 	and.w	r3, r3, #16
 8009286:	2b10      	cmp	r3, #16
 8009288:	d122      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f003 0310 	and.w	r3, r3, #16
 8009294:	2b10      	cmp	r3, #16
 8009296:	d11b      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f06f 0210 	mvn.w	r2, #16
 80092a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2208      	movs	r2, #8
 80092a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f887 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 80092bc:	e005      	b.n	80092ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f879 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f88a 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d10e      	bne.n	80092fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d107      	bne.n	80092fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f06f 0201 	mvn.w	r2, #1
 80092f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7fb fde2 	bl	8004ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009306:	2b80      	cmp	r3, #128	; 0x80
 8009308:	d10e      	bne.n	8009328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009314:	2b80      	cmp	r3, #128	; 0x80
 8009316:	d107      	bne.n	8009328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f914 	bl	8009550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009336:	d10e      	bne.n	8009356 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009342:	2b80      	cmp	r3, #128	; 0x80
 8009344:	d107      	bne.n	8009356 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800934e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f907 	bl	8009564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009360:	2b40      	cmp	r3, #64	; 0x40
 8009362:	d10e      	bne.n	8009382 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936e:	2b40      	cmp	r3, #64	; 0x40
 8009370:	d107      	bne.n	8009382 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800937a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f838 	bl	80093f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b20      	cmp	r3, #32
 800938e:	d10e      	bne.n	80093ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b20      	cmp	r3, #32
 800939c:	d107      	bne.n	80093ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f06f 0220 	mvn.w	r2, #32
 80093a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f8c7 	bl	800953c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093ae:	bf00      	nop
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093d2:	bf00      	nop
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093fa:	bf00      	nop
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
	...

08009408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a40      	ldr	r2, [pc, #256]	; (800951c <TIM_Base_SetConfig+0x114>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d013      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009426:	d00f      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a3d      	ldr	r2, [pc, #244]	; (8009520 <TIM_Base_SetConfig+0x118>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00b      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a3c      	ldr	r2, [pc, #240]	; (8009524 <TIM_Base_SetConfig+0x11c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d007      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a3b      	ldr	r2, [pc, #236]	; (8009528 <TIM_Base_SetConfig+0x120>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d003      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a3a      	ldr	r2, [pc, #232]	; (800952c <TIM_Base_SetConfig+0x124>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d108      	bne.n	800945a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800944e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a2f      	ldr	r2, [pc, #188]	; (800951c <TIM_Base_SetConfig+0x114>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d01f      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009468:	d01b      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a2c      	ldr	r2, [pc, #176]	; (8009520 <TIM_Base_SetConfig+0x118>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d017      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a2b      	ldr	r2, [pc, #172]	; (8009524 <TIM_Base_SetConfig+0x11c>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d013      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a2a      	ldr	r2, [pc, #168]	; (8009528 <TIM_Base_SetConfig+0x120>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00f      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a29      	ldr	r2, [pc, #164]	; (800952c <TIM_Base_SetConfig+0x124>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00b      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a28      	ldr	r2, [pc, #160]	; (8009530 <TIM_Base_SetConfig+0x128>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d007      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a27      	ldr	r2, [pc, #156]	; (8009534 <TIM_Base_SetConfig+0x12c>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d003      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a26      	ldr	r2, [pc, #152]	; (8009538 <TIM_Base_SetConfig+0x130>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d108      	bne.n	80094b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	4313      	orrs	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	689a      	ldr	r2, [r3, #8]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a10      	ldr	r2, [pc, #64]	; (800951c <TIM_Base_SetConfig+0x114>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d00f      	beq.n	8009500 <TIM_Base_SetConfig+0xf8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a12      	ldr	r2, [pc, #72]	; (800952c <TIM_Base_SetConfig+0x124>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d00b      	beq.n	8009500 <TIM_Base_SetConfig+0xf8>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a11      	ldr	r2, [pc, #68]	; (8009530 <TIM_Base_SetConfig+0x128>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d007      	beq.n	8009500 <TIM_Base_SetConfig+0xf8>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a10      	ldr	r2, [pc, #64]	; (8009534 <TIM_Base_SetConfig+0x12c>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d003      	beq.n	8009500 <TIM_Base_SetConfig+0xf8>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a0f      	ldr	r2, [pc, #60]	; (8009538 <TIM_Base_SetConfig+0x130>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d103      	bne.n	8009508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	691a      	ldr	r2, [r3, #16]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	615a      	str	r2, [r3, #20]
}
 800950e:	bf00      	nop
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	40010000 	.word	0x40010000
 8009520:	40000400 	.word	0x40000400
 8009524:	40000800 	.word	0x40000800
 8009528:	40000c00 	.word	0x40000c00
 800952c:	40010400 	.word	0x40010400
 8009530:	40014000 	.word	0x40014000
 8009534:	40014400 	.word	0x40014400
 8009538:	40014800 	.word	0x40014800

0800953c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e042      	b.n	8009610 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009590:	2b00      	cmp	r3, #0
 8009592:	d106      	bne.n	80095a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7fb fd2f 	bl	8005000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2224      	movs	r2, #36	; 0x24
 80095a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 0201 	bic.w	r2, r2, #1
 80095b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f8c2 	bl	8009744 <UART_SetConfig>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d101      	bne.n	80095ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e022      	b.n	8009610 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fe20 	bl	800a218 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689a      	ldr	r2, [r3, #8]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0201 	orr.w	r2, r2, #1
 8009606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fea7 	bl	800a35c <UART_CheckIdleState>
 800960e:	4603      	mov	r3, r0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b08a      	sub	sp, #40	; 0x28
 800961c:	af02      	add	r7, sp, #8
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	603b      	str	r3, [r7, #0]
 8009624:	4613      	mov	r3, r2
 8009626:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800962e:	2b20      	cmp	r3, #32
 8009630:	f040 8083 	bne.w	800973a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <HAL_UART_Transmit+0x28>
 800963a:	88fb      	ldrh	r3, [r7, #6]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e07b      	b.n	800973c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800964a:	2b01      	cmp	r3, #1
 800964c:	d101      	bne.n	8009652 <HAL_UART_Transmit+0x3a>
 800964e:	2302      	movs	r3, #2
 8009650:	e074      	b.n	800973c <HAL_UART_Transmit+0x124>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2221      	movs	r2, #33	; 0x21
 8009666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800966a:	f7fb ff33 	bl	80054d4 <HAL_GetTick>
 800966e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	88fa      	ldrh	r2, [r7, #6]
 8009674:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	88fa      	ldrh	r2, [r7, #6]
 800967c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009688:	d108      	bne.n	800969c <HAL_UART_Transmit+0x84>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d104      	bne.n	800969c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	61bb      	str	r3, [r7, #24]
 800969a:	e003      	b.n	80096a4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096a0:	2300      	movs	r3, #0
 80096a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80096ac:	e02c      	b.n	8009708 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2200      	movs	r2, #0
 80096b6:	2180      	movs	r1, #128	; 0x80
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 fe9a 	bl	800a3f2 <UART_WaitOnFlagUntilTimeout>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e039      	b.n	800973c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10b      	bne.n	80096e6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	461a      	mov	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	3302      	adds	r3, #2
 80096e2:	61bb      	str	r3, [r7, #24]
 80096e4:	e007      	b.n	80096f6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	781a      	ldrb	r2, [r3, #0]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	3301      	adds	r3, #1
 80096f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	3b01      	subs	r3, #1
 8009700:	b29a      	uxth	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800970e:	b29b      	uxth	r3, r3
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1cc      	bne.n	80096ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	2200      	movs	r2, #0
 800971c:	2140      	movs	r1, #64	; 0x40
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 fe67 	bl	800a3f2 <UART_WaitOnFlagUntilTimeout>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e006      	b.n	800973c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2220      	movs	r2, #32
 8009732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	e000      	b.n	800973c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800973a:	2302      	movs	r3, #2
  }
}
 800973c:	4618      	mov	r0, r3
 800973e:	3720      	adds	r7, #32
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009748:	b092      	sub	sp, #72	; 0x48
 800974a:	af00      	add	r7, sp, #0
 800974c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	431a      	orrs	r2, r3
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	431a      	orrs	r2, r3
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	4313      	orrs	r3, r2
 800976a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	4bbe      	ldr	r3, [pc, #760]	; (8009a6c <UART_SetConfig+0x328>)
 8009774:	4013      	ands	r3, r2
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	6812      	ldr	r2, [r2, #0]
 800977a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800977c:	430b      	orrs	r3, r1
 800977e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	430a      	orrs	r2, r1
 8009794:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4ab3      	ldr	r2, [pc, #716]	; (8009a70 <UART_SetConfig+0x32c>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d004      	beq.n	80097b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097ac:	4313      	orrs	r3, r2
 80097ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689a      	ldr	r2, [r3, #8]
 80097b6:	4baf      	ldr	r3, [pc, #700]	; (8009a74 <UART_SetConfig+0x330>)
 80097b8:	4013      	ands	r3, r2
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	6812      	ldr	r2, [r2, #0]
 80097be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097c0:	430b      	orrs	r3, r1
 80097c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ca:	f023 010f 	bic.w	r1, r3, #15
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4aa6      	ldr	r2, [pc, #664]	; (8009a78 <UART_SetConfig+0x334>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d177      	bne.n	80098d4 <UART_SetConfig+0x190>
 80097e4:	4ba5      	ldr	r3, [pc, #660]	; (8009a7c <UART_SetConfig+0x338>)
 80097e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097ec:	2b28      	cmp	r3, #40	; 0x28
 80097ee:	d86d      	bhi.n	80098cc <UART_SetConfig+0x188>
 80097f0:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <UART_SetConfig+0xb4>)
 80097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f6:	bf00      	nop
 80097f8:	0800989d 	.word	0x0800989d
 80097fc:	080098cd 	.word	0x080098cd
 8009800:	080098cd 	.word	0x080098cd
 8009804:	080098cd 	.word	0x080098cd
 8009808:	080098cd 	.word	0x080098cd
 800980c:	080098cd 	.word	0x080098cd
 8009810:	080098cd 	.word	0x080098cd
 8009814:	080098cd 	.word	0x080098cd
 8009818:	080098a5 	.word	0x080098a5
 800981c:	080098cd 	.word	0x080098cd
 8009820:	080098cd 	.word	0x080098cd
 8009824:	080098cd 	.word	0x080098cd
 8009828:	080098cd 	.word	0x080098cd
 800982c:	080098cd 	.word	0x080098cd
 8009830:	080098cd 	.word	0x080098cd
 8009834:	080098cd 	.word	0x080098cd
 8009838:	080098ad 	.word	0x080098ad
 800983c:	080098cd 	.word	0x080098cd
 8009840:	080098cd 	.word	0x080098cd
 8009844:	080098cd 	.word	0x080098cd
 8009848:	080098cd 	.word	0x080098cd
 800984c:	080098cd 	.word	0x080098cd
 8009850:	080098cd 	.word	0x080098cd
 8009854:	080098cd 	.word	0x080098cd
 8009858:	080098b5 	.word	0x080098b5
 800985c:	080098cd 	.word	0x080098cd
 8009860:	080098cd 	.word	0x080098cd
 8009864:	080098cd 	.word	0x080098cd
 8009868:	080098cd 	.word	0x080098cd
 800986c:	080098cd 	.word	0x080098cd
 8009870:	080098cd 	.word	0x080098cd
 8009874:	080098cd 	.word	0x080098cd
 8009878:	080098bd 	.word	0x080098bd
 800987c:	080098cd 	.word	0x080098cd
 8009880:	080098cd 	.word	0x080098cd
 8009884:	080098cd 	.word	0x080098cd
 8009888:	080098cd 	.word	0x080098cd
 800988c:	080098cd 	.word	0x080098cd
 8009890:	080098cd 	.word	0x080098cd
 8009894:	080098cd 	.word	0x080098cd
 8009898:	080098c5 	.word	0x080098c5
 800989c:	2301      	movs	r3, #1
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a2:	e222      	b.n	8009cea <UART_SetConfig+0x5a6>
 80098a4:	2304      	movs	r3, #4
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098aa:	e21e      	b.n	8009cea <UART_SetConfig+0x5a6>
 80098ac:	2308      	movs	r3, #8
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b2:	e21a      	b.n	8009cea <UART_SetConfig+0x5a6>
 80098b4:	2310      	movs	r3, #16
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ba:	e216      	b.n	8009cea <UART_SetConfig+0x5a6>
 80098bc:	2320      	movs	r3, #32
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098c2:	e212      	b.n	8009cea <UART_SetConfig+0x5a6>
 80098c4:	2340      	movs	r3, #64	; 0x40
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ca:	e20e      	b.n	8009cea <UART_SetConfig+0x5a6>
 80098cc:	2380      	movs	r3, #128	; 0x80
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098d2:	e20a      	b.n	8009cea <UART_SetConfig+0x5a6>
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a69      	ldr	r2, [pc, #420]	; (8009a80 <UART_SetConfig+0x33c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d130      	bne.n	8009940 <UART_SetConfig+0x1fc>
 80098de:	4b67      	ldr	r3, [pc, #412]	; (8009a7c <UART_SetConfig+0x338>)
 80098e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	2b05      	cmp	r3, #5
 80098e8:	d826      	bhi.n	8009938 <UART_SetConfig+0x1f4>
 80098ea:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <UART_SetConfig+0x1ac>)
 80098ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f0:	08009909 	.word	0x08009909
 80098f4:	08009911 	.word	0x08009911
 80098f8:	08009919 	.word	0x08009919
 80098fc:	08009921 	.word	0x08009921
 8009900:	08009929 	.word	0x08009929
 8009904:	08009931 	.word	0x08009931
 8009908:	2300      	movs	r3, #0
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990e:	e1ec      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009910:	2304      	movs	r3, #4
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009916:	e1e8      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009918:	2308      	movs	r3, #8
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800991e:	e1e4      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009920:	2310      	movs	r3, #16
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009926:	e1e0      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009928:	2320      	movs	r3, #32
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800992e:	e1dc      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009930:	2340      	movs	r3, #64	; 0x40
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009936:	e1d8      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009938:	2380      	movs	r3, #128	; 0x80
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800993e:	e1d4      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a4f      	ldr	r2, [pc, #316]	; (8009a84 <UART_SetConfig+0x340>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d130      	bne.n	80099ac <UART_SetConfig+0x268>
 800994a:	4b4c      	ldr	r3, [pc, #304]	; (8009a7c <UART_SetConfig+0x338>)
 800994c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	2b05      	cmp	r3, #5
 8009954:	d826      	bhi.n	80099a4 <UART_SetConfig+0x260>
 8009956:	a201      	add	r2, pc, #4	; (adr r2, 800995c <UART_SetConfig+0x218>)
 8009958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995c:	08009975 	.word	0x08009975
 8009960:	0800997d 	.word	0x0800997d
 8009964:	08009985 	.word	0x08009985
 8009968:	0800998d 	.word	0x0800998d
 800996c:	08009995 	.word	0x08009995
 8009970:	0800999d 	.word	0x0800999d
 8009974:	2300      	movs	r3, #0
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997a:	e1b6      	b.n	8009cea <UART_SetConfig+0x5a6>
 800997c:	2304      	movs	r3, #4
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009982:	e1b2      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009984:	2308      	movs	r3, #8
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998a:	e1ae      	b.n	8009cea <UART_SetConfig+0x5a6>
 800998c:	2310      	movs	r3, #16
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009992:	e1aa      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009994:	2320      	movs	r3, #32
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999a:	e1a6      	b.n	8009cea <UART_SetConfig+0x5a6>
 800999c:	2340      	movs	r3, #64	; 0x40
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a2:	e1a2      	b.n	8009cea <UART_SetConfig+0x5a6>
 80099a4:	2380      	movs	r3, #128	; 0x80
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099aa:	e19e      	b.n	8009cea <UART_SetConfig+0x5a6>
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a35      	ldr	r2, [pc, #212]	; (8009a88 <UART_SetConfig+0x344>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d130      	bne.n	8009a18 <UART_SetConfig+0x2d4>
 80099b6:	4b31      	ldr	r3, [pc, #196]	; (8009a7c <UART_SetConfig+0x338>)
 80099b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ba:	f003 0307 	and.w	r3, r3, #7
 80099be:	2b05      	cmp	r3, #5
 80099c0:	d826      	bhi.n	8009a10 <UART_SetConfig+0x2cc>
 80099c2:	a201      	add	r2, pc, #4	; (adr r2, 80099c8 <UART_SetConfig+0x284>)
 80099c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c8:	080099e1 	.word	0x080099e1
 80099cc:	080099e9 	.word	0x080099e9
 80099d0:	080099f1 	.word	0x080099f1
 80099d4:	080099f9 	.word	0x080099f9
 80099d8:	08009a01 	.word	0x08009a01
 80099dc:	08009a09 	.word	0x08009a09
 80099e0:	2300      	movs	r3, #0
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e6:	e180      	b.n	8009cea <UART_SetConfig+0x5a6>
 80099e8:	2304      	movs	r3, #4
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ee:	e17c      	b.n	8009cea <UART_SetConfig+0x5a6>
 80099f0:	2308      	movs	r3, #8
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f6:	e178      	b.n	8009cea <UART_SetConfig+0x5a6>
 80099f8:	2310      	movs	r3, #16
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fe:	e174      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009a00:	2320      	movs	r3, #32
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a06:	e170      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009a08:	2340      	movs	r3, #64	; 0x40
 8009a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0e:	e16c      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009a10:	2380      	movs	r3, #128	; 0x80
 8009a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a16:	e168      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a1b      	ldr	r2, [pc, #108]	; (8009a8c <UART_SetConfig+0x348>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d142      	bne.n	8009aa8 <UART_SetConfig+0x364>
 8009a22:	4b16      	ldr	r3, [pc, #88]	; (8009a7c <UART_SetConfig+0x338>)
 8009a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b05      	cmp	r3, #5
 8009a2c:	d838      	bhi.n	8009aa0 <UART_SetConfig+0x35c>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <UART_SetConfig+0x2f0>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a4d 	.word	0x08009a4d
 8009a38:	08009a55 	.word	0x08009a55
 8009a3c:	08009a5d 	.word	0x08009a5d
 8009a40:	08009a65 	.word	0x08009a65
 8009a44:	08009a91 	.word	0x08009a91
 8009a48:	08009a99 	.word	0x08009a99
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a52:	e14a      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5a:	e146      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a62:	e142      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6a:	e13e      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009a6c:	cfff69f3 	.word	0xcfff69f3
 8009a70:	58000c00 	.word	0x58000c00
 8009a74:	11fff4ff 	.word	0x11fff4ff
 8009a78:	40011000 	.word	0x40011000
 8009a7c:	58024400 	.word	0x58024400
 8009a80:	40004400 	.word	0x40004400
 8009a84:	40004800 	.word	0x40004800
 8009a88:	40004c00 	.word	0x40004c00
 8009a8c:	40005000 	.word	0x40005000
 8009a90:	2320      	movs	r3, #32
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a96:	e128      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9e:	e124      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009aa0:	2380      	movs	r3, #128	; 0x80
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa6:	e120      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4acb      	ldr	r2, [pc, #812]	; (8009ddc <UART_SetConfig+0x698>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d176      	bne.n	8009ba0 <UART_SetConfig+0x45c>
 8009ab2:	4bcb      	ldr	r3, [pc, #812]	; (8009de0 <UART_SetConfig+0x69c>)
 8009ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009aba:	2b28      	cmp	r3, #40	; 0x28
 8009abc:	d86c      	bhi.n	8009b98 <UART_SetConfig+0x454>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <UART_SetConfig+0x380>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009b69 	.word	0x08009b69
 8009ac8:	08009b99 	.word	0x08009b99
 8009acc:	08009b99 	.word	0x08009b99
 8009ad0:	08009b99 	.word	0x08009b99
 8009ad4:	08009b99 	.word	0x08009b99
 8009ad8:	08009b99 	.word	0x08009b99
 8009adc:	08009b99 	.word	0x08009b99
 8009ae0:	08009b99 	.word	0x08009b99
 8009ae4:	08009b71 	.word	0x08009b71
 8009ae8:	08009b99 	.word	0x08009b99
 8009aec:	08009b99 	.word	0x08009b99
 8009af0:	08009b99 	.word	0x08009b99
 8009af4:	08009b99 	.word	0x08009b99
 8009af8:	08009b99 	.word	0x08009b99
 8009afc:	08009b99 	.word	0x08009b99
 8009b00:	08009b99 	.word	0x08009b99
 8009b04:	08009b79 	.word	0x08009b79
 8009b08:	08009b99 	.word	0x08009b99
 8009b0c:	08009b99 	.word	0x08009b99
 8009b10:	08009b99 	.word	0x08009b99
 8009b14:	08009b99 	.word	0x08009b99
 8009b18:	08009b99 	.word	0x08009b99
 8009b1c:	08009b99 	.word	0x08009b99
 8009b20:	08009b99 	.word	0x08009b99
 8009b24:	08009b81 	.word	0x08009b81
 8009b28:	08009b99 	.word	0x08009b99
 8009b2c:	08009b99 	.word	0x08009b99
 8009b30:	08009b99 	.word	0x08009b99
 8009b34:	08009b99 	.word	0x08009b99
 8009b38:	08009b99 	.word	0x08009b99
 8009b3c:	08009b99 	.word	0x08009b99
 8009b40:	08009b99 	.word	0x08009b99
 8009b44:	08009b89 	.word	0x08009b89
 8009b48:	08009b99 	.word	0x08009b99
 8009b4c:	08009b99 	.word	0x08009b99
 8009b50:	08009b99 	.word	0x08009b99
 8009b54:	08009b99 	.word	0x08009b99
 8009b58:	08009b99 	.word	0x08009b99
 8009b5c:	08009b99 	.word	0x08009b99
 8009b60:	08009b99 	.word	0x08009b99
 8009b64:	08009b91 	.word	0x08009b91
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6e:	e0bc      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009b70:	2304      	movs	r3, #4
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b76:	e0b8      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009b78:	2308      	movs	r3, #8
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7e:	e0b4      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009b80:	2310      	movs	r3, #16
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b86:	e0b0      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009b88:	2320      	movs	r3, #32
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8e:	e0ac      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009b90:	2340      	movs	r3, #64	; 0x40
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b96:	e0a8      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009b98:	2380      	movs	r3, #128	; 0x80
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9e:	e0a4      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a8f      	ldr	r2, [pc, #572]	; (8009de4 <UART_SetConfig+0x6a0>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d130      	bne.n	8009c0c <UART_SetConfig+0x4c8>
 8009baa:	4b8d      	ldr	r3, [pc, #564]	; (8009de0 <UART_SetConfig+0x69c>)
 8009bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	2b05      	cmp	r3, #5
 8009bb4:	d826      	bhi.n	8009c04 <UART_SetConfig+0x4c0>
 8009bb6:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <UART_SetConfig+0x478>)
 8009bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbc:	08009bd5 	.word	0x08009bd5
 8009bc0:	08009bdd 	.word	0x08009bdd
 8009bc4:	08009be5 	.word	0x08009be5
 8009bc8:	08009bed 	.word	0x08009bed
 8009bcc:	08009bf5 	.word	0x08009bf5
 8009bd0:	08009bfd 	.word	0x08009bfd
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	e086      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009bdc:	2304      	movs	r3, #4
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be2:	e082      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009be4:	2308      	movs	r3, #8
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bea:	e07e      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009bec:	2310      	movs	r3, #16
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf2:	e07a      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009bf4:	2320      	movs	r3, #32
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfa:	e076      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009bfc:	2340      	movs	r3, #64	; 0x40
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c02:	e072      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009c04:	2380      	movs	r3, #128	; 0x80
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0a:	e06e      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a75      	ldr	r2, [pc, #468]	; (8009de8 <UART_SetConfig+0x6a4>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d130      	bne.n	8009c78 <UART_SetConfig+0x534>
 8009c16:	4b72      	ldr	r3, [pc, #456]	; (8009de0 <UART_SetConfig+0x69c>)
 8009c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	2b05      	cmp	r3, #5
 8009c20:	d826      	bhi.n	8009c70 <UART_SetConfig+0x52c>
 8009c22:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <UART_SetConfig+0x4e4>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c41 	.word	0x08009c41
 8009c2c:	08009c49 	.word	0x08009c49
 8009c30:	08009c51 	.word	0x08009c51
 8009c34:	08009c59 	.word	0x08009c59
 8009c38:	08009c61 	.word	0x08009c61
 8009c3c:	08009c69 	.word	0x08009c69
 8009c40:	2300      	movs	r3, #0
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c46:	e050      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009c48:	2304      	movs	r3, #4
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e04c      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009c50:	2308      	movs	r3, #8
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c56:	e048      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009c58:	2310      	movs	r3, #16
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5e:	e044      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009c60:	2320      	movs	r3, #32
 8009c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c66:	e040      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009c68:	2340      	movs	r3, #64	; 0x40
 8009c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6e:	e03c      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009c70:	2380      	movs	r3, #128	; 0x80
 8009c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c76:	e038      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a5b      	ldr	r2, [pc, #364]	; (8009dec <UART_SetConfig+0x6a8>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d130      	bne.n	8009ce4 <UART_SetConfig+0x5a0>
 8009c82:	4b57      	ldr	r3, [pc, #348]	; (8009de0 <UART_SetConfig+0x69c>)
 8009c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	d826      	bhi.n	8009cdc <UART_SetConfig+0x598>
 8009c8e:	a201      	add	r2, pc, #4	; (adr r2, 8009c94 <UART_SetConfig+0x550>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009cad 	.word	0x08009cad
 8009c98:	08009cb5 	.word	0x08009cb5
 8009c9c:	08009cbd 	.word	0x08009cbd
 8009ca0:	08009cc5 	.word	0x08009cc5
 8009ca4:	08009ccd 	.word	0x08009ccd
 8009ca8:	08009cd5 	.word	0x08009cd5
 8009cac:	2302      	movs	r3, #2
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb2:	e01a      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009cb4:	2304      	movs	r3, #4
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cba:	e016      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009cbc:	2308      	movs	r3, #8
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc2:	e012      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009cc4:	2310      	movs	r3, #16
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cca:	e00e      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009ccc:	2320      	movs	r3, #32
 8009cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd2:	e00a      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009cd4:	2340      	movs	r3, #64	; 0x40
 8009cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cda:	e006      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009cdc:	2380      	movs	r3, #128	; 0x80
 8009cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce2:	e002      	b.n	8009cea <UART_SetConfig+0x5a6>
 8009ce4:	2380      	movs	r3, #128	; 0x80
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a3f      	ldr	r2, [pc, #252]	; (8009dec <UART_SetConfig+0x6a8>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	f040 80f8 	bne.w	8009ee6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009cf6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cfa:	2b20      	cmp	r3, #32
 8009cfc:	dc46      	bgt.n	8009d8c <UART_SetConfig+0x648>
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	f2c0 8082 	blt.w	8009e08 <UART_SetConfig+0x6c4>
 8009d04:	3b02      	subs	r3, #2
 8009d06:	2b1e      	cmp	r3, #30
 8009d08:	d87e      	bhi.n	8009e08 <UART_SetConfig+0x6c4>
 8009d0a:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <UART_SetConfig+0x5cc>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009d93 	.word	0x08009d93
 8009d14:	08009e09 	.word	0x08009e09
 8009d18:	08009d9b 	.word	0x08009d9b
 8009d1c:	08009e09 	.word	0x08009e09
 8009d20:	08009e09 	.word	0x08009e09
 8009d24:	08009e09 	.word	0x08009e09
 8009d28:	08009dab 	.word	0x08009dab
 8009d2c:	08009e09 	.word	0x08009e09
 8009d30:	08009e09 	.word	0x08009e09
 8009d34:	08009e09 	.word	0x08009e09
 8009d38:	08009e09 	.word	0x08009e09
 8009d3c:	08009e09 	.word	0x08009e09
 8009d40:	08009e09 	.word	0x08009e09
 8009d44:	08009e09 	.word	0x08009e09
 8009d48:	08009dbb 	.word	0x08009dbb
 8009d4c:	08009e09 	.word	0x08009e09
 8009d50:	08009e09 	.word	0x08009e09
 8009d54:	08009e09 	.word	0x08009e09
 8009d58:	08009e09 	.word	0x08009e09
 8009d5c:	08009e09 	.word	0x08009e09
 8009d60:	08009e09 	.word	0x08009e09
 8009d64:	08009e09 	.word	0x08009e09
 8009d68:	08009e09 	.word	0x08009e09
 8009d6c:	08009e09 	.word	0x08009e09
 8009d70:	08009e09 	.word	0x08009e09
 8009d74:	08009e09 	.word	0x08009e09
 8009d78:	08009e09 	.word	0x08009e09
 8009d7c:	08009e09 	.word	0x08009e09
 8009d80:	08009e09 	.word	0x08009e09
 8009d84:	08009e09 	.word	0x08009e09
 8009d88:	08009dfb 	.word	0x08009dfb
 8009d8c:	2b40      	cmp	r3, #64	; 0x40
 8009d8e:	d037      	beq.n	8009e00 <UART_SetConfig+0x6bc>
 8009d90:	e03a      	b.n	8009e08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009d92:	f7fe fcfd 	bl	8008790 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d98:	e03c      	b.n	8009e14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe fd0c 	bl	80087bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009da8:	e034      	b.n	8009e14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009daa:	f107 0318 	add.w	r3, r7, #24
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe fe58 	bl	8008a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009db8:	e02c      	b.n	8009e14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dba:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <UART_SetConfig+0x69c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0320 	and.w	r3, r3, #32
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d016      	beq.n	8009df4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dc6:	4b06      	ldr	r3, [pc, #24]	; (8009de0 <UART_SetConfig+0x69c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	08db      	lsrs	r3, r3, #3
 8009dcc:	f003 0303 	and.w	r3, r3, #3
 8009dd0:	4a07      	ldr	r2, [pc, #28]	; (8009df0 <UART_SetConfig+0x6ac>)
 8009dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dd8:	e01c      	b.n	8009e14 <UART_SetConfig+0x6d0>
 8009dda:	bf00      	nop
 8009ddc:	40011400 	.word	0x40011400
 8009de0:	58024400 	.word	0x58024400
 8009de4:	40007800 	.word	0x40007800
 8009de8:	40007c00 	.word	0x40007c00
 8009dec:	58000c00 	.word	0x58000c00
 8009df0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009df4:	4b9e      	ldr	r3, [pc, #632]	; (800a070 <UART_SetConfig+0x92c>)
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df8:	e00c      	b.n	8009e14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dfa:	4b9e      	ldr	r3, [pc, #632]	; (800a074 <UART_SetConfig+0x930>)
 8009dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dfe:	e009      	b.n	8009e14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e06:	e005      	b.n	8009e14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 81e0 	beq.w	800a1dc <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e20:	4a95      	ldr	r2, [pc, #596]	; (800a078 <UART_SetConfig+0x934>)
 8009e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e26:	461a      	mov	r2, r3
 8009e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e2e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	4613      	mov	r3, r2
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	4413      	add	r3, r2
 8009e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d305      	bcc.n	8009e4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d903      	bls.n	8009e54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e52:	e1c3      	b.n	800a1dc <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e56:	2200      	movs	r2, #0
 8009e58:	60bb      	str	r3, [r7, #8]
 8009e5a:	60fa      	str	r2, [r7, #12]
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	4a85      	ldr	r2, [pc, #532]	; (800a078 <UART_SetConfig+0x934>)
 8009e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	2200      	movs	r2, #0
 8009e6a:	603b      	str	r3, [r7, #0]
 8009e6c:	607a      	str	r2, [r7, #4]
 8009e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e76:	f7f6 fa85 	bl	8000384 <__aeabi_uldivmod>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4610      	mov	r0, r2
 8009e80:	4619      	mov	r1, r3
 8009e82:	f04f 0200 	mov.w	r2, #0
 8009e86:	f04f 0300 	mov.w	r3, #0
 8009e8a:	020b      	lsls	r3, r1, #8
 8009e8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e90:	0202      	lsls	r2, r0, #8
 8009e92:	6979      	ldr	r1, [r7, #20]
 8009e94:	6849      	ldr	r1, [r1, #4]
 8009e96:	0849      	lsrs	r1, r1, #1
 8009e98:	2000      	movs	r0, #0
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	eb12 0804 	adds.w	r8, r2, r4
 8009ea2:	eb43 0905 	adc.w	r9, r3, r5
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	469a      	mov	sl, r3
 8009eae:	4693      	mov	fp, r2
 8009eb0:	4652      	mov	r2, sl
 8009eb2:	465b      	mov	r3, fp
 8009eb4:	4640      	mov	r0, r8
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	f7f6 fa64 	bl	8000384 <__aeabi_uldivmod>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009eca:	d308      	bcc.n	8009ede <UART_SetConfig+0x79a>
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ed2:	d204      	bcs.n	8009ede <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eda:	60da      	str	r2, [r3, #12]
 8009edc:	e17e      	b.n	800a1dc <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ee4:	e17a      	b.n	800a1dc <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	69db      	ldr	r3, [r3, #28]
 8009eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eee:	f040 80c7 	bne.w	800a080 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 8009ef2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ef6:	2b20      	cmp	r3, #32
 8009ef8:	dc48      	bgt.n	8009f8c <UART_SetConfig+0x848>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	db7b      	blt.n	8009ff6 <UART_SetConfig+0x8b2>
 8009efe:	2b20      	cmp	r3, #32
 8009f00:	d879      	bhi.n	8009ff6 <UART_SetConfig+0x8b2>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <UART_SetConfig+0x7c4>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f93 	.word	0x08009f93
 8009f0c:	08009f9b 	.word	0x08009f9b
 8009f10:	08009ff7 	.word	0x08009ff7
 8009f14:	08009ff7 	.word	0x08009ff7
 8009f18:	08009fa3 	.word	0x08009fa3
 8009f1c:	08009ff7 	.word	0x08009ff7
 8009f20:	08009ff7 	.word	0x08009ff7
 8009f24:	08009ff7 	.word	0x08009ff7
 8009f28:	08009fb3 	.word	0x08009fb3
 8009f2c:	08009ff7 	.word	0x08009ff7
 8009f30:	08009ff7 	.word	0x08009ff7
 8009f34:	08009ff7 	.word	0x08009ff7
 8009f38:	08009ff7 	.word	0x08009ff7
 8009f3c:	08009ff7 	.word	0x08009ff7
 8009f40:	08009ff7 	.word	0x08009ff7
 8009f44:	08009ff7 	.word	0x08009ff7
 8009f48:	08009fc3 	.word	0x08009fc3
 8009f4c:	08009ff7 	.word	0x08009ff7
 8009f50:	08009ff7 	.word	0x08009ff7
 8009f54:	08009ff7 	.word	0x08009ff7
 8009f58:	08009ff7 	.word	0x08009ff7
 8009f5c:	08009ff7 	.word	0x08009ff7
 8009f60:	08009ff7 	.word	0x08009ff7
 8009f64:	08009ff7 	.word	0x08009ff7
 8009f68:	08009ff7 	.word	0x08009ff7
 8009f6c:	08009ff7 	.word	0x08009ff7
 8009f70:	08009ff7 	.word	0x08009ff7
 8009f74:	08009ff7 	.word	0x08009ff7
 8009f78:	08009ff7 	.word	0x08009ff7
 8009f7c:	08009ff7 	.word	0x08009ff7
 8009f80:	08009ff7 	.word	0x08009ff7
 8009f84:	08009ff7 	.word	0x08009ff7
 8009f88:	08009fe9 	.word	0x08009fe9
 8009f8c:	2b40      	cmp	r3, #64	; 0x40
 8009f8e:	d02e      	beq.n	8009fee <UART_SetConfig+0x8aa>
 8009f90:	e031      	b.n	8009ff6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f92:	f7fd fc49 	bl	8007828 <HAL_RCC_GetPCLK1Freq>
 8009f96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f98:	e033      	b.n	800a002 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f9a:	f7fd fc5b 	bl	8007854 <HAL_RCC_GetPCLK2Freq>
 8009f9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fa0:	e02f      	b.n	800a002 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe fc08 	bl	80087bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fb0:	e027      	b.n	800a002 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fb2:	f107 0318 	add.w	r3, r7, #24
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe fd54 	bl	8008a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fc0:	e01f      	b.n	800a002 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fc2:	4b2e      	ldr	r3, [pc, #184]	; (800a07c <UART_SetConfig+0x938>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0320 	and.w	r3, r3, #32
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d009      	beq.n	8009fe2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fce:	4b2b      	ldr	r3, [pc, #172]	; (800a07c <UART_SetConfig+0x938>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	08db      	lsrs	r3, r3, #3
 8009fd4:	f003 0303 	and.w	r3, r3, #3
 8009fd8:	4a25      	ldr	r2, [pc, #148]	; (800a070 <UART_SetConfig+0x92c>)
 8009fda:	fa22 f303 	lsr.w	r3, r2, r3
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fe0:	e00f      	b.n	800a002 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009fe2:	4b23      	ldr	r3, [pc, #140]	; (800a070 <UART_SetConfig+0x92c>)
 8009fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe6:	e00c      	b.n	800a002 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fe8:	4b22      	ldr	r3, [pc, #136]	; (800a074 <UART_SetConfig+0x930>)
 8009fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fec:	e009      	b.n	800a002 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff4:	e005      	b.n	800a002 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a004:	2b00      	cmp	r3, #0
 800a006:	f000 80e9 	beq.w	800a1dc <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	4a1a      	ldr	r2, [pc, #104]	; (800a078 <UART_SetConfig+0x934>)
 800a010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a014:	461a      	mov	r2, r3
 800a016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a018:	fbb3 f3f2 	udiv	r3, r3, r2
 800a01c:	005a      	lsls	r2, r3, #1
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	085b      	lsrs	r3, r3, #1
 800a024:	441a      	add	r2, r3
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a02e:	b29b      	uxth	r3, r3
 800a030:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	2b0f      	cmp	r3, #15
 800a036:	d916      	bls.n	800a066 <UART_SetConfig+0x922>
 800a038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a03e:	d212      	bcs.n	800a066 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a042:	b29b      	uxth	r3, r3
 800a044:	f023 030f 	bic.w	r3, r3, #15
 800a048:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	085b      	lsrs	r3, r3, #1
 800a04e:	b29b      	uxth	r3, r3
 800a050:	f003 0307 	and.w	r3, r3, #7
 800a054:	b29a      	uxth	r2, r3
 800a056:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a058:	4313      	orrs	r3, r2
 800a05a:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a062:	60da      	str	r2, [r3, #12]
 800a064:	e0ba      	b.n	800a1dc <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a06c:	e0b6      	b.n	800a1dc <UART_SetConfig+0xa98>
 800a06e:	bf00      	nop
 800a070:	03d09000 	.word	0x03d09000
 800a074:	003d0900 	.word	0x003d0900
 800a078:	0800adec 	.word	0x0800adec
 800a07c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a080:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a084:	2b20      	cmp	r3, #32
 800a086:	dc49      	bgt.n	800a11c <UART_SetConfig+0x9d8>
 800a088:	2b00      	cmp	r3, #0
 800a08a:	db7c      	blt.n	800a186 <UART_SetConfig+0xa42>
 800a08c:	2b20      	cmp	r3, #32
 800a08e:	d87a      	bhi.n	800a186 <UART_SetConfig+0xa42>
 800a090:	a201      	add	r2, pc, #4	; (adr r2, 800a098 <UART_SetConfig+0x954>)
 800a092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a096:	bf00      	nop
 800a098:	0800a123 	.word	0x0800a123
 800a09c:	0800a12b 	.word	0x0800a12b
 800a0a0:	0800a187 	.word	0x0800a187
 800a0a4:	0800a187 	.word	0x0800a187
 800a0a8:	0800a133 	.word	0x0800a133
 800a0ac:	0800a187 	.word	0x0800a187
 800a0b0:	0800a187 	.word	0x0800a187
 800a0b4:	0800a187 	.word	0x0800a187
 800a0b8:	0800a143 	.word	0x0800a143
 800a0bc:	0800a187 	.word	0x0800a187
 800a0c0:	0800a187 	.word	0x0800a187
 800a0c4:	0800a187 	.word	0x0800a187
 800a0c8:	0800a187 	.word	0x0800a187
 800a0cc:	0800a187 	.word	0x0800a187
 800a0d0:	0800a187 	.word	0x0800a187
 800a0d4:	0800a187 	.word	0x0800a187
 800a0d8:	0800a153 	.word	0x0800a153
 800a0dc:	0800a187 	.word	0x0800a187
 800a0e0:	0800a187 	.word	0x0800a187
 800a0e4:	0800a187 	.word	0x0800a187
 800a0e8:	0800a187 	.word	0x0800a187
 800a0ec:	0800a187 	.word	0x0800a187
 800a0f0:	0800a187 	.word	0x0800a187
 800a0f4:	0800a187 	.word	0x0800a187
 800a0f8:	0800a187 	.word	0x0800a187
 800a0fc:	0800a187 	.word	0x0800a187
 800a100:	0800a187 	.word	0x0800a187
 800a104:	0800a187 	.word	0x0800a187
 800a108:	0800a187 	.word	0x0800a187
 800a10c:	0800a187 	.word	0x0800a187
 800a110:	0800a187 	.word	0x0800a187
 800a114:	0800a187 	.word	0x0800a187
 800a118:	0800a179 	.word	0x0800a179
 800a11c:	2b40      	cmp	r3, #64	; 0x40
 800a11e:	d02e      	beq.n	800a17e <UART_SetConfig+0xa3a>
 800a120:	e031      	b.n	800a186 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a122:	f7fd fb81 	bl	8007828 <HAL_RCC_GetPCLK1Freq>
 800a126:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a128:	e033      	b.n	800a192 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a12a:	f7fd fb93 	bl	8007854 <HAL_RCC_GetPCLK2Freq>
 800a12e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a130:	e02f      	b.n	800a192 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe fb40 	bl	80087bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a140:	e027      	b.n	800a192 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a142:	f107 0318 	add.w	r3, r7, #24
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe fc8c 	bl	8008a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a150:	e01f      	b.n	800a192 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a152:	4b2d      	ldr	r3, [pc, #180]	; (800a208 <UART_SetConfig+0xac4>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0320 	and.w	r3, r3, #32
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a15e:	4b2a      	ldr	r3, [pc, #168]	; (800a208 <UART_SetConfig+0xac4>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	08db      	lsrs	r3, r3, #3
 800a164:	f003 0303 	and.w	r3, r3, #3
 800a168:	4a28      	ldr	r2, [pc, #160]	; (800a20c <UART_SetConfig+0xac8>)
 800a16a:	fa22 f303 	lsr.w	r3, r2, r3
 800a16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a170:	e00f      	b.n	800a192 <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800a172:	4b26      	ldr	r3, [pc, #152]	; (800a20c <UART_SetConfig+0xac8>)
 800a174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a176:	e00c      	b.n	800a192 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a178:	4b25      	ldr	r3, [pc, #148]	; (800a210 <UART_SetConfig+0xacc>)
 800a17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a17c:	e009      	b.n	800a192 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a17e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a184:	e005      	b.n	800a192 <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800a186:	2300      	movs	r3, #0
 800a188:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a190:	bf00      	nop
    }

    if (pclk != 0U)
 800a192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a194:	2b00      	cmp	r3, #0
 800a196:	d021      	beq.n	800a1dc <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	4a1d      	ldr	r2, [pc, #116]	; (800a214 <UART_SetConfig+0xad0>)
 800a19e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	085b      	lsrs	r3, r3, #1
 800a1b0:	441a      	add	r2, r3
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c0:	2b0f      	cmp	r3, #15
 800a1c2:	d908      	bls.n	800a1d6 <UART_SetConfig+0xa92>
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ca:	d204      	bcs.n	800a1d6 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1d2:	60da      	str	r2, [r3, #12]
 800a1d4:	e002      	b.n	800a1dc <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a1f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3748      	adds	r7, #72	; 0x48
 800a200:	46bd      	mov	sp, r7
 800a202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a206:	bf00      	nop
 800a208:	58024400 	.word	0x58024400
 800a20c:	03d09000 	.word	0x03d09000
 800a210:	003d0900 	.word	0x003d0900
 800a214:	0800adec 	.word	0x0800adec

0800a218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a224:	f003 0301 	and.w	r3, r3, #1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00a      	beq.n	800a242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	430a      	orrs	r2, r1
 800a240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a246:	f003 0302 	and.w	r3, r3, #2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00a      	beq.n	800a264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a268:	f003 0304 	and.w	r3, r3, #4
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00a      	beq.n	800a286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ac:	f003 0310 	and.w	r3, r3, #16
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00a      	beq.n	800a2ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ce:	f003 0320 	and.w	r3, r3, #32
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d01a      	beq.n	800a32e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	430a      	orrs	r2, r1
 800a30c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a316:	d10a      	bne.n	800a32e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00a      	beq.n	800a350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	430a      	orrs	r2, r1
 800a34e:	605a      	str	r2, [r3, #4]
  }
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af02      	add	r7, sp, #8
 800a362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a36c:	f7fb f8b2 	bl	80054d4 <HAL_GetTick>
 800a370:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0308 	and.w	r3, r3, #8
 800a37c:	2b08      	cmp	r3, #8
 800a37e:	d10e      	bne.n	800a39e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f82f 	bl	800a3f2 <UART_WaitOnFlagUntilTimeout>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e025      	b.n	800a3ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0304 	and.w	r3, r3, #4
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	d10e      	bne.n	800a3ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f819 	bl	800a3f2 <UART_WaitOnFlagUntilTimeout>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e00f      	b.n	800a3ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2220      	movs	r2, #32
 800a3ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2220      	movs	r2, #32
 800a3d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	60f8      	str	r0, [r7, #12]
 800a3fa:	60b9      	str	r1, [r7, #8]
 800a3fc:	603b      	str	r3, [r7, #0]
 800a3fe:	4613      	mov	r3, r2
 800a400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a402:	e062      	b.n	800a4ca <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40a:	d05e      	beq.n	800a4ca <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a40c:	f7fb f862 	bl	80054d4 <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	69ba      	ldr	r2, [r7, #24]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d302      	bcc.n	800a422 <UART_WaitOnFlagUntilTimeout+0x30>
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d11d      	bne.n	800a45e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a430:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	689a      	ldr	r2, [r3, #8]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f022 0201 	bic.w	r2, r2, #1
 800a440:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2220      	movs	r2, #32
 800a446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2220      	movs	r2, #32
 800a44e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e045      	b.n	800a4ea <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d02e      	beq.n	800a4ca <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a47a:	d126      	bne.n	800a4ca <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a484:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a494:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 0201 	bic.w	r2, r2, #1
 800a4a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2220      	movs	r2, #32
 800a4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e00f      	b.n	800a4ea <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	69da      	ldr	r2, [r3, #28]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	bf0c      	ite	eq
 800a4da:	2301      	moveq	r3, #1
 800a4dc:	2300      	movne	r3, #0
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d08d      	beq.n	800a404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b085      	sub	sp, #20
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a500:	2b01      	cmp	r3, #1
 800a502:	d101      	bne.n	800a508 <HAL_UARTEx_DisableFifoMode+0x16>
 800a504:	2302      	movs	r3, #2
 800a506:	e027      	b.n	800a558 <HAL_UARTEx_DisableFifoMode+0x66>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2224      	movs	r2, #36	; 0x24
 800a514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f022 0201 	bic.w	r2, r2, #1
 800a52e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a536:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2220      	movs	r2, #32
 800a54a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a574:	2b01      	cmp	r3, #1
 800a576:	d101      	bne.n	800a57c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a578:	2302      	movs	r3, #2
 800a57a:	e02d      	b.n	800a5d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2224      	movs	r2, #36	; 0x24
 800a588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f022 0201 	bic.w	r2, r2, #1
 800a5a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f84f 	bl	800a65c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2220      	movs	r2, #32
 800a5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d101      	bne.n	800a5f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	e02d      	b.n	800a654 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2224      	movs	r2, #36	; 0x24
 800a604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f022 0201 	bic.w	r2, r2, #1
 800a61e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	683a      	ldr	r2, [r7, #0]
 800a630:	430a      	orrs	r2, r1
 800a632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f811 	bl	800a65c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2220      	movs	r2, #32
 800a646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d108      	bne.n	800a67e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a67c:	e031      	b.n	800a6e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a67e:	2310      	movs	r3, #16
 800a680:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a682:	2310      	movs	r3, #16
 800a684:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	0e5b      	lsrs	r3, r3, #25
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	f003 0307 	and.w	r3, r3, #7
 800a694:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	0f5b      	lsrs	r3, r3, #29
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	f003 0307 	and.w	r3, r3, #7
 800a6a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
 800a6a8:	7b3a      	ldrb	r2, [r7, #12]
 800a6aa:	4911      	ldr	r1, [pc, #68]	; (800a6f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a6ac:	5c8a      	ldrb	r2, [r1, r2]
 800a6ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6b2:	7b3a      	ldrb	r2, [r7, #12]
 800a6b4:	490f      	ldr	r1, [pc, #60]	; (800a6f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a6b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	7b7a      	ldrb	r2, [r7, #13]
 800a6c8:	4909      	ldr	r1, [pc, #36]	; (800a6f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a6ca:	5c8a      	ldrb	r2, [r1, r2]
 800a6cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6d0:	7b7a      	ldrb	r2, [r7, #13]
 800a6d2:	4908      	ldr	r1, [pc, #32]	; (800a6f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a6d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a6e2:	bf00      	nop
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	0800ae04 	.word	0x0800ae04
 800a6f4:	0800ae0c 	.word	0x0800ae0c

0800a6f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	f107 001c 	add.w	r0, r7, #28
 800a706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d120      	bne.n	800a752 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68da      	ldr	r2, [r3, #12]
 800a720:	4b2a      	ldr	r3, [pc, #168]	; (800a7cc <USB_CoreInit+0xd4>)
 800a722:	4013      	ands	r3, r2
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a736:	2b01      	cmp	r3, #1
 800a738:	d105      	bne.n	800a746 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f8c8 	bl	800a8dc <USB_CoreReset>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]
 800a750:	e01a      	b.n	800a788 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f8bc 	bl	800a8dc <USB_CoreReset>
 800a764:	4603      	mov	r3, r0
 800a766:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a772:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	639a      	str	r2, [r3, #56]	; 0x38
 800a77a:	e005      	b.n	800a788 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a780:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d116      	bne.n	800a7bc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a792:	b29a      	uxth	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a79c:	4b0c      	ldr	r3, [pc, #48]	; (800a7d0 <USB_CoreInit+0xd8>)
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f043 0206 	orr.w	r2, r3, #6
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f043 0220 	orr.w	r2, r3, #32
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7c8:	b004      	add	sp, #16
 800a7ca:	4770      	bx	lr
 800a7cc:	ffbdffbf 	.word	0xffbdffbf
 800a7d0:	03ee0000 	.word	0x03ee0000

0800a7d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	f023 0201 	bic.w	r2, r3, #1
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b082      	sub	sp, #8
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	460b      	mov	r3, r1
 800a800:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d106      	bne.n	800a822 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60da      	str	r2, [r3, #12]
 800a820:	e00b      	b.n	800a83a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a822:	78fb      	ldrb	r3, [r7, #3]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d106      	bne.n	800a836 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	60da      	str	r2, [r3, #12]
 800a834:	e001      	b.n	800a83a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e003      	b.n	800a842 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a83a:	2032      	movs	r0, #50	; 0x32
 800a83c:	f7fa fe56 	bl	80054ec <HAL_Delay>

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
	...

0800a84c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a856:	2300      	movs	r3, #0
 800a858:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	019b      	lsls	r3, r3, #6
 800a85e:	f043 0220 	orr.w	r2, r3, #32
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3301      	adds	r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	4a09      	ldr	r2, [pc, #36]	; (800a894 <USB_FlushTxFifo+0x48>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d901      	bls.n	800a878 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e006      	b.n	800a886 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	f003 0320 	and.w	r3, r3, #32
 800a880:	2b20      	cmp	r3, #32
 800a882:	d0f0      	beq.n	800a866 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	00030d40 	.word	0x00030d40

0800a898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2210      	movs	r2, #16
 800a8a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4a09      	ldr	r2, [pc, #36]	; (800a8d8 <USB_FlushRxFifo+0x40>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d901      	bls.n	800a8bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e006      	b.n	800a8ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	f003 0310 	and.w	r3, r3, #16
 800a8c4:	2b10      	cmp	r3, #16
 800a8c6:	d0f0      	beq.n	800a8aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	00030d40 	.word	0x00030d40

0800a8dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	60fb      	str	r3, [r7, #12]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	4a13      	ldr	r2, [pc, #76]	; (800a940 <USB_CoreReset+0x64>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d901      	bls.n	800a8fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e01b      	b.n	800a932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	daf2      	bge.n	800a8e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a902:	2300      	movs	r3, #0
 800a904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	f043 0201 	orr.w	r2, r3, #1
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3301      	adds	r3, #1
 800a916:	60fb      	str	r3, [r7, #12]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	4a09      	ldr	r2, [pc, #36]	; (800a940 <USB_CoreReset+0x64>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d901      	bls.n	800a924 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a920:	2303      	movs	r3, #3
 800a922:	e006      	b.n	800a932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	f003 0301 	and.w	r3, r3, #1
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d0f0      	beq.n	800a912 <USB_CoreReset+0x36>

  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	00030d40 	.word	0x00030d40

0800a944 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a944:	b084      	sub	sp, #16
 800a946:	b580      	push	{r7, lr}
 800a948:	b084      	sub	sp, #16
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	f107 001c 	add.w	r0, r7, #28
 800a952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a960:	461a      	mov	r2, r3
 800a962:	2300      	movs	r3, #0
 800a964:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a976:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a986:	2b00      	cmp	r3, #0
 800a988:	d018      	beq.n	800a9bc <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d10a      	bne.n	800a9a6 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a99e:	f043 0304 	orr.w	r3, r3, #4
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	e014      	b.n	800a9d0 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9b4:	f023 0304 	bic.w	r3, r3, #4
 800a9b8:	6013      	str	r3, [r2, #0]
 800a9ba:	e009      	b.n	800a9d0 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9ca:	f023 0304 	bic.w	r3, r3, #4
 800a9ce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a9d0:	2110      	movs	r1, #16
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7ff ff3a 	bl	800a84c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7ff ff5d 	bl	800a898 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
 800a9e2:	e015      	b.n	800aa10 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa04:	461a      	mov	r2, r3
 800aa06:	2300      	movs	r3, #0
 800aa08:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	60fb      	str	r3, [r7, #12]
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d3e5      	bcc.n	800a9e4 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800aa18:	2101      	movs	r1, #1
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f848 	bl	800aab0 <USB_DriveVbus>

  HAL_Delay(200U);
 800aa20:	20c8      	movs	r0, #200	; 0xc8
 800aa22:	f7fa fd63 	bl	80054ec <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa32:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa46:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a14      	ldr	r2, [pc, #80]	; (800aa9c <USB_HostInit+0x158>)
 800aa4c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a13      	ldr	r2, [pc, #76]	; (800aaa0 <USB_HostInit+0x15c>)
 800aa52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800aa56:	e009      	b.n	800aa6c <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2280      	movs	r2, #128	; 0x80
 800aa5c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a10      	ldr	r2, [pc, #64]	; (800aaa4 <USB_HostInit+0x160>)
 800aa62:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a10      	ldr	r2, [pc, #64]	; (800aaa8 <USB_HostInit+0x164>)
 800aa68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d105      	bne.n	800aa7e <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	f043 0210 	orr.w	r2, r3, #16
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	699a      	ldr	r2, [r3, #24]
 800aa82:	4b0a      	ldr	r3, [pc, #40]	; (800aaac <USB_HostInit+0x168>)
 800aa84:	4313      	orrs	r3, r2
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa96:	b004      	add	sp, #16
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	01000200 	.word	0x01000200
 800aaa0:	00e00300 	.word	0x00e00300
 800aaa4:	00600080 	.word	0x00600080
 800aaa8:	004000e0 	.word	0x004000e0
 800aaac:	a3200008 	.word	0xa3200008

0800aab0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800aac0:	2300      	movs	r3, #0
 800aac2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aad4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d109      	bne.n	800aaf4 <USB_DriveVbus+0x44>
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d106      	bne.n	800aaf4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aaee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaf2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aafa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aafe:	d109      	bne.n	800ab14 <USB_DriveVbus+0x64>
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d106      	bne.n	800ab14 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ab0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab12:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
	...

0800ab24 <__libc_init_array>:
 800ab24:	b570      	push	{r4, r5, r6, lr}
 800ab26:	4d0d      	ldr	r5, [pc, #52]	; (800ab5c <__libc_init_array+0x38>)
 800ab28:	4c0d      	ldr	r4, [pc, #52]	; (800ab60 <__libc_init_array+0x3c>)
 800ab2a:	1b64      	subs	r4, r4, r5
 800ab2c:	10a4      	asrs	r4, r4, #2
 800ab2e:	2600      	movs	r6, #0
 800ab30:	42a6      	cmp	r6, r4
 800ab32:	d109      	bne.n	800ab48 <__libc_init_array+0x24>
 800ab34:	4d0b      	ldr	r5, [pc, #44]	; (800ab64 <__libc_init_array+0x40>)
 800ab36:	4c0c      	ldr	r4, [pc, #48]	; (800ab68 <__libc_init_array+0x44>)
 800ab38:	f000 f83e 	bl	800abb8 <_init>
 800ab3c:	1b64      	subs	r4, r4, r5
 800ab3e:	10a4      	asrs	r4, r4, #2
 800ab40:	2600      	movs	r6, #0
 800ab42:	42a6      	cmp	r6, r4
 800ab44:	d105      	bne.n	800ab52 <__libc_init_array+0x2e>
 800ab46:	bd70      	pop	{r4, r5, r6, pc}
 800ab48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab4c:	4798      	blx	r3
 800ab4e:	3601      	adds	r6, #1
 800ab50:	e7ee      	b.n	800ab30 <__libc_init_array+0xc>
 800ab52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab56:	4798      	blx	r3
 800ab58:	3601      	adds	r6, #1
 800ab5a:	e7f2      	b.n	800ab42 <__libc_init_array+0x1e>
 800ab5c:	0800ae1c 	.word	0x0800ae1c
 800ab60:	0800ae1c 	.word	0x0800ae1c
 800ab64:	0800ae1c 	.word	0x0800ae1c
 800ab68:	0800ae20 	.word	0x0800ae20

0800ab6c <memcmp>:
 800ab6c:	b510      	push	{r4, lr}
 800ab6e:	3901      	subs	r1, #1
 800ab70:	4402      	add	r2, r0
 800ab72:	4290      	cmp	r0, r2
 800ab74:	d101      	bne.n	800ab7a <memcmp+0xe>
 800ab76:	2000      	movs	r0, #0
 800ab78:	e005      	b.n	800ab86 <memcmp+0x1a>
 800ab7a:	7803      	ldrb	r3, [r0, #0]
 800ab7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab80:	42a3      	cmp	r3, r4
 800ab82:	d001      	beq.n	800ab88 <memcmp+0x1c>
 800ab84:	1b18      	subs	r0, r3, r4
 800ab86:	bd10      	pop	{r4, pc}
 800ab88:	3001      	adds	r0, #1
 800ab8a:	e7f2      	b.n	800ab72 <memcmp+0x6>

0800ab8c <memcpy>:
 800ab8c:	440a      	add	r2, r1
 800ab8e:	4291      	cmp	r1, r2
 800ab90:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab94:	d100      	bne.n	800ab98 <memcpy+0xc>
 800ab96:	4770      	bx	lr
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aba2:	4291      	cmp	r1, r2
 800aba4:	d1f9      	bne.n	800ab9a <memcpy+0xe>
 800aba6:	bd10      	pop	{r4, pc}

0800aba8 <memset>:
 800aba8:	4402      	add	r2, r0
 800abaa:	4603      	mov	r3, r0
 800abac:	4293      	cmp	r3, r2
 800abae:	d100      	bne.n	800abb2 <memset+0xa>
 800abb0:	4770      	bx	lr
 800abb2:	f803 1b01 	strb.w	r1, [r3], #1
 800abb6:	e7f9      	b.n	800abac <memset+0x4>

0800abb8 <_init>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	bf00      	nop
 800abbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abbe:	bc08      	pop	{r3}
 800abc0:	469e      	mov	lr, r3
 800abc2:	4770      	bx	lr

0800abc4 <_fini>:
 800abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc6:	bf00      	nop
 800abc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abca:	bc08      	pop	{r3}
 800abcc:	469e      	mov	lr, r3
 800abce:	4770      	bx	lr
