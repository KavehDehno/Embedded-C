
FreeRTOS_3_LEDs_TaskNotify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08009368  08009368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009560  08009560  00019560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009564  08009564  00019564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  24000000  08009568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0007f7f8  24000020  08009588  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2407f818  08009588  0002f818  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020c3d  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000394e  00000000  00000000  00040c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a78  00000000  00000000  000445e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000018c0  00000000  00000000  00046058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038477  00000000  00000000  00047918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e447  00000000  00000000  0007fd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00175d23  00000000  00000000  0009e1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00213ef9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007174  00000000  00000000  00213f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000020 	.word	0x24000020
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009350 	.word	0x08009350

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000024 	.word	0x24000024
 80002dc:	08009350 	.word	0x08009350

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	2400723c 	.word	0x2400723c

08000374 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f103 0208 	add.w	r2, r3, #8
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f103 0208 	add.w	r2, r3, #8
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f103 0208 	add.w	r2, r3, #8
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80003ce:	b480      	push	{r7}
 80003d0:	b085      	sub	sp, #20
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	683a      	ldr	r2, [r7, #0]
 80003f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	1c5a      	adds	r2, r3, #1
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	601a      	str	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000416:	b480      	push	{r7}
 8000418:	b085      	sub	sp, #20
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
 800041e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800042c:	d103      	bne.n	8000436 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	691b      	ldr	r3, [r3, #16]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	e00c      	b.n	8000450 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3308      	adds	r3, #8
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	e002      	b.n	8000444 <vListInsert+0x2e>
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	429a      	cmp	r2, r3
 800044e:	d2f6      	bcs.n	800043e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	685a      	ldr	r2, [r3, #4]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	683a      	ldr	r2, [r7, #0]
 800046a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	691b      	ldr	r3, [r3, #16]
 8000494:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	6892      	ldr	r2, [r2, #8]
 800049e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	6852      	ldr	r2, [r2, #4]
 80004a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d103      	bne.n	80004bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	689a      	ldr	r2, [r3, #8]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	1e5a      	subs	r2, r3, #1
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	4613      	mov	r3, r2
 80004ea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 f9d1 	bl	8001898 <pvPortMalloc>
 80004f6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00e      	beq.n	800051c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80004fe:	205c      	movs	r0, #92	; 0x5c
 8000500:	f001 f9ca 	bl	8001898 <pvPortMalloc>
 8000504:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	631a      	str	r2, [r3, #48]	; 0x30
 8000512:	e005      	b.n	8000520 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000514:	6978      	ldr	r0, [r7, #20]
 8000516:	f001 faa5 	bl	8001a64 <vPortFree>
 800051a:	e001      	b.n	8000520 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d013      	beq.n	800054e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000526:	88fa      	ldrh	r2, [r7, #6]
 8000528:	2300      	movs	r3, #0
 800052a:	9303      	str	r3, [sp, #12]
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	9302      	str	r3, [sp, #8]
 8000530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	68b9      	ldr	r1, [r7, #8]
 800053c:	68f8      	ldr	r0, [r7, #12]
 800053e:	f000 f80e 	bl	800055e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000542:	69f8      	ldr	r0, [r7, #28]
 8000544:	f000 f8a4 	bl	8000690 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000548:	2301      	movs	r3, #1
 800054a:	61bb      	str	r3, [r7, #24]
 800054c:	e002      	b.n	8000554 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000554:	69bb      	ldr	r3, [r7, #24]
    }
 8000556:	4618      	mov	r0, r3
 8000558:	3720      	adds	r7, #32
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b088      	sub	sp, #32
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800056e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	461a      	mov	r2, r3
 8000576:	21a5      	movs	r1, #165	; 0xa5
 8000578:	f008 fee2 	bl	8009340 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000586:	440b      	add	r3, r1
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	f023 0307 	bic.w	r3, r3, #7
 8000594:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00c      	beq.n	80005ba <prvInitialiseNewTask+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	b672      	cpsid	i
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	b662      	cpsie	i
 80005b4:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b6:	bf00      	nop
 80005b8:	e7fe      	b.n	80005b8 <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d01f      	beq.n	8000600 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
 80005c4:	e012      	b.n	80005ec <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	4413      	add	r3, r2
 80005cc:	7819      	ldrb	r1, [r3, #0]
 80005ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	4413      	add	r3, r2
 80005d4:	3334      	adds	r3, #52	; 0x34
 80005d6:	460a      	mov	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3301      	adds	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d9e9      	bls.n	80005c6 <prvInitialiseNewTask+0x68>
 80005f2:	e000      	b.n	80005f6 <prvInitialiseNewTask+0x98>
            {
                break;
 80005f4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80005f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80005fe:	e003      	b.n	8000608 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800060a:	2b06      	cmp	r3, #6
 800060c:	d901      	bls.n	8000612 <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800060e:	2306      	movs	r3, #6
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800061c:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000620:	2200      	movs	r2, #0
 8000622:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000626:	3304      	adds	r3, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fec3 	bl	80003b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000630:	3318      	adds	r3, #24
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff febe 	bl	80003b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800063c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000640:	f1c3 0207 	rsb	r2, r3, #7
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800064a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800064e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000650:	3354      	adds	r3, #84	; 0x54
 8000652:	2204      	movs	r2, #4
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f008 fe72 	bl	8009340 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065e:	3358      	adds	r3, #88	; 0x58
 8000660:	2201      	movs	r2, #1
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f008 fe6b 	bl	8009340 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	69b8      	ldr	r0, [r7, #24]
 8000670:	f000 fecc 	bl	800140c <pxPortInitialiseStack>
 8000674:	4602      	mov	r2, r0
 8000676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000678:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000684:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000698:	f000 ffca 	bl	8001630 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a34      	ldr	r2, [pc, #208]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 80006a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80006a6:	4b34      	ldr	r3, [pc, #208]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d109      	bne.n	80006c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80006ae:	4a32      	ldr	r2, [pc, #200]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80006b4:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d110      	bne.n	80006de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80006bc:	f000 fc12 	bl	8000ee4 <prvInitialiseTaskLists>
 80006c0:	e00d      	b.n	80006de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80006c2:	4b2e      	ldr	r3, [pc, #184]	; (800077c <prvAddNewTaskToReadyList+0xec>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d802      	bhi.n	80006de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a26      	ldr	r2, [pc, #152]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d016      	beq.n	8000724 <prvAddNewTaskToReadyList+0x94>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fd17 	bl	800412c <SEGGER_SYSVIEW_OnTaskCreate>
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	461d      	mov	r5, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	461c      	mov	r4, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	1ae3      	subs	r3, r4, r3
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	462b      	mov	r3, r5
 8000720:	f001 fb72 	bl	8001e08 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fd84 	bl	8004234 <SEGGER_SYSVIEW_OnTaskStartReady>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000730:	2201      	movs	r2, #1
 8000732:	409a      	lsls	r2, r3
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <prvAddNewTaskToReadyList+0xf4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4313      	orrs	r3, r2
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <prvAddNewTaskToReadyList+0xf4>)
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <prvAddNewTaskToReadyList+0xf8>)
 800074c:	441a      	add	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3304      	adds	r3, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4610      	mov	r0, r2
 8000756:	f7ff fe3a 	bl	80003ce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800075a:	f000 ff9d 	bl	8001698 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <prvAddNewTaskToReadyList+0xec>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 8000768:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bdb0      	pop	{r4, r5, r7, pc}
 8000772:	bf00      	nop
 8000774:	2400013c 	.word	0x2400013c
 8000778:	2400003c 	.word	0x2400003c
 800077c:	24000148 	.word	0x24000148
 8000780:	24000158 	.word	0x24000158
 8000784:	24000144 	.word	0x24000144
 8000788:	24000040 	.word	0x24000040

0800078c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000794:	f000 ff4c 	bl	8001630 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <vTaskDelete+0x18>
 800079e:	4b47      	ldr	r3, [pc, #284]	; (80008bc <vTaskDelete+0x130>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	e000      	b.n	80007a6 <vTaskDelete+0x1a>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3304      	adds	r3, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fe6b 	bl	8000488 <uxListRemove>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d115      	bne.n	80007e4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007bc:	4940      	ldr	r1, [pc, #256]	; (80008c0 <vTaskDelete+0x134>)
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10a      	bne.n	80007e4 <vTaskDelete+0x58>
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	2201      	movs	r2, #1
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	43da      	mvns	r2, r3
 80007da:	4b3a      	ldr	r3, [pc, #232]	; (80008c4 <vTaskDelete+0x138>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4013      	ands	r3, r2
 80007e0:	4a38      	ldr	r2, [pc, #224]	; (80008c4 <vTaskDelete+0x138>)
 80007e2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3318      	adds	r3, #24
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fe49 	bl	8000488 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <vTaskDelete+0x13c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <vTaskDelete+0x13c>)
 80007fe:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <vTaskDelete+0x130>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	429a      	cmp	r2, r3
 8000808:	d118      	bne.n	800083c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3304      	adds	r3, #4
 800080e:	4619      	mov	r1, r3
 8000810:	482e      	ldr	r0, [pc, #184]	; (80008cc <vTaskDelete+0x140>)
 8000812:	f7ff fddc 	bl	80003ce <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <vTaskDelete+0x144>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a2c      	ldr	r2, [pc, #176]	; (80008d0 <vTaskDelete+0x144>)
 800081e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fda8 	bl	8004378 <SEGGER_SYSVIEW_ShrinkId>
 8000828:	4603      	mov	r3, r0
 800082a:	4619      	mov	r1, r3
 800082c:	2022      	movs	r0, #34	; 0x22
 800082e:	f002 fff5 	bl	800381c <SEGGER_SYSVIEW_RecordU32>
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fb4f 	bl	8001ed8 <SYSVIEW_DeleteTask>
 800083a:	e016      	b.n	800086a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <vTaskDelete+0x148>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3b01      	subs	r3, #1
 8000842:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <vTaskDelete+0x148>)
 8000844:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4618      	mov	r0, r3
 800084a:	f003 fd95 	bl	8004378 <SEGGER_SYSVIEW_ShrinkId>
 800084e:	4603      	mov	r3, r0
 8000850:	4619      	mov	r1, r3
 8000852:	2022      	movs	r0, #34	; 0x22
 8000854:	f002 ffe2 	bl	800381c <SEGGER_SYSVIEW_RecordU32>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fb3c 	bl	8001ed8 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f000 fbad 	bl	8000fc0 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8000866:	f000 fbbb 	bl	8000fe0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800086a:	f000 ff15 	bl	8001698 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <vTaskDelete+0x14c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d01d      	beq.n	80008b2 <vTaskDelete+0x126>
        {
            if( pxTCB == pxCurrentTCB )
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <vTaskDelete+0x130>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d118      	bne.n	80008b2 <vTaskDelete+0x126>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <vTaskDelete+0x150>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d00c      	beq.n	80008a2 <vTaskDelete+0x116>
        __asm volatile
 8000888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800088c:	b672      	cpsid	i
 800088e:	f383 8811 	msr	BASEPRI, r3
 8000892:	f3bf 8f6f 	isb	sy
 8000896:	f3bf 8f4f 	dsb	sy
 800089a:	b662      	cpsie	i
 800089c:	60bb      	str	r3, [r7, #8]
    }
 800089e:	bf00      	nop
 80008a0:	e7fe      	b.n	80008a0 <vTaskDelete+0x114>
                portYIELD_WITHIN_API();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <vTaskDelete+0x154>)
 80008a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2400003c 	.word	0x2400003c
 80008c0:	24000040 	.word	0x24000040
 80008c4:	24000144 	.word	0x24000144
 80008c8:	24000158 	.word	0x24000158
 80008cc:	24000110 	.word	0x24000110
 80008d0:	24000124 	.word	0x24000124
 80008d4:	2400013c 	.word	0x2400013c
 80008d8:	24000148 	.word	0x24000148
 80008dc:	24000164 	.word	0x24000164
 80008e0:	e000ed04 	.word	0xe000ed04

080008e4 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d10c      	bne.n	8000912 <xTaskDelayUntil+0x2e>
        __asm volatile
 80008f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008fc:	b672      	cpsid	i
 80008fe:	f383 8811 	msr	BASEPRI, r3
 8000902:	f3bf 8f6f 	isb	sy
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	b662      	cpsie	i
 800090c:	617b      	str	r3, [r7, #20]
    }
 800090e:	bf00      	nop
 8000910:	e7fe      	b.n	8000910 <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d10c      	bne.n	8000932 <xTaskDelayUntil+0x4e>
        __asm volatile
 8000918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091c:	b672      	cpsid	i
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	b662      	cpsie	i
 800092c:	613b      	str	r3, [r7, #16]
    }
 800092e:	bf00      	nop
 8000930:	e7fe      	b.n	8000930 <xTaskDelayUntil+0x4c>
        configASSERT( uxSchedulerSuspended == 0 );
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <xTaskDelayUntil+0x104>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d00c      	beq.n	8000954 <xTaskDelayUntil+0x70>
        __asm volatile
 800093a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093e:	b672      	cpsid	i
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	b662      	cpsie	i
 800094e:	60fb      	str	r3, [r7, #12]
    }
 8000950:	bf00      	nop
 8000952:	e7fe      	b.n	8000952 <xTaskDelayUntil+0x6e>

        vTaskSuspendAll();
 8000954:	f000 f8e8 	bl	8000b28 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <xTaskDelayUntil+0x108>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	4413      	add	r3, r2
 8000966:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6a3a      	ldr	r2, [r7, #32]
 800096e:	429a      	cmp	r2, r3
 8000970:	d20b      	bcs.n	800098a <xTaskDelayUntil+0xa6>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	429a      	cmp	r2, r3
 800097a:	d211      	bcs.n	80009a0 <xTaskDelayUntil+0xbc>
 800097c:	69fa      	ldr	r2, [r7, #28]
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	429a      	cmp	r2, r3
 8000982:	d90d      	bls.n	80009a0 <xTaskDelayUntil+0xbc>
                {
                    xShouldDelay = pdTRUE;
 8000984:	2301      	movs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
 8000988:	e00a      	b.n	80009a0 <xTaskDelayUntil+0xbc>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	69fa      	ldr	r2, [r7, #28]
 8000990:	429a      	cmp	r2, r3
 8000992:	d303      	bcc.n	800099c <xTaskDelayUntil+0xb8>
 8000994:	69fa      	ldr	r2, [r7, #28]
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	429a      	cmp	r2, r3
 800099a:	d901      	bls.n	80009a0 <xTaskDelayUntil+0xbc>
                {
                    xShouldDelay = pdTRUE;
 800099c:	2301      	movs	r3, #1
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d009      	beq.n	80009c0 <xTaskDelayUntil+0xdc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80009ac:	2024      	movs	r0, #36	; 0x24
 80009ae:	f002 ff17 	bl	80037e0 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	6a3b      	ldr	r3, [r7, #32]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fcae 	bl	800131c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80009c0:	f000 f8c0 	bl	8000b44 <xTaskResumeAll>
 80009c4:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d107      	bne.n	80009dc <xTaskDelayUntil+0xf8>
        {
            portYIELD_WITHIN_API();
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <xTaskDelayUntil+0x10c>)
 80009ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	f3bf 8f4f 	dsb	sy
 80009d8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80009de:	4618      	mov	r0, r3
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	24000164 	.word	0x24000164
 80009ec:	24000140 	.word	0x24000140
 80009f0:	e000ed04 	.word	0xe000ed04

080009f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d01d      	beq.n	8000a42 <vTaskDelay+0x4e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <vTaskDelay+0x6c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d00c      	beq.n	8000a28 <vTaskDelay+0x34>
        __asm volatile
 8000a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a12:	b672      	cpsid	i
 8000a14:	f383 8811 	msr	BASEPRI, r3
 8000a18:	f3bf 8f6f 	isb	sy
 8000a1c:	f3bf 8f4f 	dsb	sy
 8000a20:	b662      	cpsie	i
 8000a22:	60bb      	str	r3, [r7, #8]
    }
 8000a24:	bf00      	nop
 8000a26:	e7fe      	b.n	8000a26 <vTaskDelay+0x32>
            vTaskSuspendAll();
 8000a28:	f000 f87e 	bl	8000b28 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	2023      	movs	r0, #35	; 0x23
 8000a30:	f002 fef4 	bl	800381c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000a34:	2100      	movs	r1, #0
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 fc70 	bl	800131c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000a3c:	f000 f882 	bl	8000b44 <xTaskResumeAll>
 8000a40:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d107      	bne.n	8000a58 <vTaskDelay+0x64>
        {
            portYIELD_WITHIN_API();
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <vTaskDelay+0x70>)
 8000a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	f3bf 8f4f 	dsb	sy
 8000a54:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	24000164 	.word	0x24000164
 8000a64:	e000ed04 	.word	0xe000ed04

08000a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <vTaskStartScheduler+0xa0>)
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	2300      	movs	r3, #0
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2300      	movs	r3, #0
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	4924      	ldr	r1, [pc, #144]	; (8000b0c <vTaskStartScheduler+0xa4>)
 8000a7c:	4824      	ldr	r0, [pc, #144]	; (8000b10 <vTaskStartScheduler+0xa8>)
 8000a7e:	f7ff fd2d 	bl	80004dc <xTaskCreate>
 8000a82:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d126      	bne.n	8000ad8 <vTaskStartScheduler+0x70>
        __asm volatile
 8000a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a8e:	b672      	cpsid	i
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	b662      	cpsie	i
 8000a9e:	60bb      	str	r3, [r7, #8]
    }
 8000aa0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <vTaskStartScheduler+0xac>)
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <vTaskStartScheduler+0xb0>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <vTaskStartScheduler+0xb4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <vTaskStartScheduler+0xb8>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <vTaskStartScheduler+0xa0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d102      	bne.n	8000ac8 <vTaskStartScheduler+0x60>
 8000ac2:	f003 fb17 	bl	80040f4 <SEGGER_SYSVIEW_OnIdle>
 8000ac6:	e004      	b.n	8000ad2 <vTaskStartScheduler+0x6a>
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <vTaskStartScheduler+0xb8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f003 fb6f 	bl	80041b0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000ad2:	f000 fd2f 	bl	8001534 <xPortStartScheduler>
 8000ad6:	e010      	b.n	8000afa <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ade:	d10c      	bne.n	8000afa <vTaskStartScheduler+0x92>
        __asm volatile
 8000ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ae4:	b672      	cpsid	i
 8000ae6:	f383 8811 	msr	BASEPRI, r3
 8000aea:	f3bf 8f6f 	isb	sy
 8000aee:	f3bf 8f4f 	dsb	sy
 8000af2:	b662      	cpsie	i
 8000af4:	607b      	str	r3, [r7, #4]
    }
 8000af6:	bf00      	nop
 8000af8:	e7fe      	b.n	8000af8 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <vTaskStartScheduler+0xbc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	24000160 	.word	0x24000160
 8000b0c:	08009368 	.word	0x08009368
 8000b10:	08000ec1 	.word	0x08000ec1
 8000b14:	2400015c 	.word	0x2400015c
 8000b18:	24000148 	.word	0x24000148
 8000b1c:	24000140 	.word	0x24000140
 8000b20:	2400003c 	.word	0x2400003c
 8000b24:	24000000 	.word	0x24000000

08000b28 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <vTaskSuspendAll+0x18>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	4a03      	ldr	r2, [pc, #12]	; (8000b40 <vTaskSuspendAll+0x18>)
 8000b34:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	24000164 	.word	0x24000164

08000b44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000b52:	4b3e      	ldr	r3, [pc, #248]	; (8000c4c <xTaskResumeAll+0x108>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10c      	bne.n	8000b74 <xTaskResumeAll+0x30>
        __asm volatile
 8000b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b5e:	b672      	cpsid	i
 8000b60:	f383 8811 	msr	BASEPRI, r3
 8000b64:	f3bf 8f6f 	isb	sy
 8000b68:	f3bf 8f4f 	dsb	sy
 8000b6c:	b662      	cpsie	i
 8000b6e:	603b      	str	r3, [r7, #0]
    }
 8000b70:	bf00      	nop
 8000b72:	e7fe      	b.n	8000b72 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000b74:	f000 fd5c 	bl	8001630 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000b78:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <xTaskResumeAll+0x108>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	4a33      	ldr	r2, [pc, #204]	; (8000c4c <xTaskResumeAll+0x108>)
 8000b80:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <xTaskResumeAll+0x108>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d159      	bne.n	8000c3e <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000b8a:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <xTaskResumeAll+0x10c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d055      	beq.n	8000c3e <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000b92:	e032      	b.n	8000bfa <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b94:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <xTaskResumeAll+0x110>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3318      	adds	r3, #24
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fc71 	bl	8000488 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fc6c 	bl	8000488 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fb3e 	bl	8004234 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <xTaskResumeAll+0x114>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	4a24      	ldr	r2, [pc, #144]	; (8000c58 <xTaskResumeAll+0x114>)
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bce:	4613      	mov	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <xTaskResumeAll+0x118>)
 8000bd8:	441a      	add	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4610      	mov	r0, r2
 8000be2:	f7ff fbf4 	bl	80003ce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <xTaskResumeAll+0x11c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d302      	bcc.n	8000bfa <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <xTaskResumeAll+0x120>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <xTaskResumeAll+0x110>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1c8      	bne.n	8000b94 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000c08:	f000 f9ea 	bl	8000fe0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <xTaskResumeAll+0x124>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d010      	beq.n	8000c3a <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000c18:	f000 f84a 	bl	8000cb0 <xTaskIncrementTick>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <xTaskResumeAll+0x120>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f1      	bne.n	8000c18 <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <xTaskResumeAll+0x124>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <xTaskResumeAll+0x120>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000c3e:	f000 fd2b 	bl	8001698 <vPortExitCritical>

    return xAlreadyYielded;
 8000c42:	687b      	ldr	r3, [r7, #4]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	24000164 	.word	0x24000164
 8000c50:	2400013c 	.word	0x2400013c
 8000c54:	240000fc 	.word	0x240000fc
 8000c58:	24000144 	.word	0x24000144
 8000c5c:	24000040 	.word	0x24000040
 8000c60:	2400003c 	.word	0x2400003c
 8000c64:	24000150 	.word	0x24000150
 8000c68:	2400014c 	.word	0x2400014c

08000c6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <xTaskGetTickCount+0x1c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000c78:	687b      	ldr	r3, [r7, #4]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	24000140 	.word	0x24000140

08000c8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c92:	f000 fdbd 	bl	8001810 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <xTaskGetTickCountFromISR+0x20>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000ca0:	683b      	ldr	r3, [r7, #0]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	24000140 	.word	0x24000140

08000cb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000cba:	4b42      	ldr	r3, [pc, #264]	; (8000dc4 <xTaskIncrementTick+0x114>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d175      	bne.n	8000dae <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000cc2:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <xTaskIncrementTick+0x118>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000cca:	4a3f      	ldr	r2, [pc, #252]	; (8000dc8 <xTaskIncrementTick+0x118>)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d122      	bne.n	8000d1c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000cd6:	4b3d      	ldr	r3, [pc, #244]	; (8000dcc <xTaskIncrementTick+0x11c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00c      	beq.n	8000cfa <xTaskIncrementTick+0x4a>
        __asm volatile
 8000ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce4:	b672      	cpsid	i
 8000ce6:	f383 8811 	msr	BASEPRI, r3
 8000cea:	f3bf 8f6f 	isb	sy
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	b662      	cpsie	i
 8000cf4:	603b      	str	r3, [r7, #0]
    }
 8000cf6:	bf00      	nop
 8000cf8:	e7fe      	b.n	8000cf8 <xTaskIncrementTick+0x48>
 8000cfa:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <xTaskIncrementTick+0x11c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <xTaskIncrementTick+0x120>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <xTaskIncrementTick+0x11c>)
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4a31      	ldr	r2, [pc, #196]	; (8000dd0 <xTaskIncrementTick+0x120>)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <xTaskIncrementTick+0x124>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3301      	adds	r3, #1
 8000d14:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <xTaskIncrementTick+0x124>)
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	f000 f962 	bl	8000fe0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <xTaskIncrementTick+0x128>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d348      	bcc.n	8000db8 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d26:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <xTaskIncrementTick+0x11c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d104      	bne.n	8000d3a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <xTaskIncrementTick+0x128>)
 8000d32:	f04f 32ff 	mov.w	r2, #4294967295
 8000d36:	601a      	str	r2, [r3, #0]
                    break;
 8000d38:	e03e      	b.n	8000db8 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <xTaskIncrementTick+0x11c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d203      	bcs.n	8000d5a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000d52:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <xTaskIncrementTick+0x128>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000d58:	e02e      	b.n	8000db8 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fb92 	bl	8000488 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d004      	beq.n	8000d76 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3318      	adds	r3, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fb89 	bl	8000488 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fa5b 	bl	8004234 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d82:	2201      	movs	r2, #1
 8000d84:	409a      	lsls	r2, r3
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <xTaskIncrementTick+0x12c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <xTaskIncrementTick+0x12c>)
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <xTaskIncrementTick+0x130>)
 8000d9e:	441a      	add	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3304      	adds	r3, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4610      	mov	r0, r2
 8000da8:	f7ff fb11 	bl	80003ce <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000dac:	e7bb      	b.n	8000d26 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <xTaskIncrementTick+0x134>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <xTaskIncrementTick+0x134>)
 8000db6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000db8:	697b      	ldr	r3, [r7, #20]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	24000164 	.word	0x24000164
 8000dc8:	24000140 	.word	0x24000140
 8000dcc:	240000f4 	.word	0x240000f4
 8000dd0:	240000f8 	.word	0x240000f8
 8000dd4:	24000154 	.word	0x24000154
 8000dd8:	2400015c 	.word	0x2400015c
 8000ddc:	24000144 	.word	0x24000144
 8000de0:	24000040 	.word	0x24000040
 8000de4:	2400014c 	.word	0x2400014c

08000de8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <vTaskSwitchContext+0xc0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <vTaskSwitchContext+0xc4>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000dfc:	e04f      	b.n	8000e9e <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8000dfe:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <vTaskSwitchContext+0xc4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <vTaskSwitchContext+0xc8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	fab3 f383 	clz	r3, r3
 8000e10:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000e12:	7afb      	ldrb	r3, [r7, #11]
 8000e14:	f1c3 031f 	rsb	r3, r3, #31
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	4926      	ldr	r1, [pc, #152]	; (8000eb4 <vTaskSwitchContext+0xcc>)
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10c      	bne.n	8000e48 <vTaskSwitchContext+0x60>
        __asm volatile
 8000e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e32:	b672      	cpsid	i
 8000e34:	f383 8811 	msr	BASEPRI, r3
 8000e38:	f3bf 8f6f 	isb	sy
 8000e3c:	f3bf 8f4f 	dsb	sy
 8000e40:	b662      	cpsie	i
 8000e42:	607b      	str	r3, [r7, #4]
    }
 8000e44:	bf00      	nop
 8000e46:	e7fe      	b.n	8000e46 <vTaskSwitchContext+0x5e>
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <vTaskSwitchContext+0xcc>)
 8000e54:	4413      	add	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	3308      	adds	r3, #8
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d104      	bne.n	8000e78 <vTaskSwitchContext+0x90>
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <vTaskSwitchContext+0xd0>)
 8000e80:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <vTaskSwitchContext+0xd0>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <vTaskSwitchContext+0xd4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d102      	bne.n	8000e94 <vTaskSwitchContext+0xac>
 8000e8e:	f003 f931 	bl	80040f4 <SEGGER_SYSVIEW_OnIdle>
}
 8000e92:	e004      	b.n	8000e9e <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <vTaskSwitchContext+0xd0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 f989 	bl	80041b0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	24000164 	.word	0x24000164
 8000eac:	24000150 	.word	0x24000150
 8000eb0:	24000144 	.word	0x24000144
 8000eb4:	24000040 	.word	0x24000040
 8000eb8:	2400003c 	.word	0x2400003c
 8000ebc:	24000160 	.word	0x24000160

08000ec0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000ec8:	f000 f84c 	bl	8000f64 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <prvIdleTask+0x20>)
 8000ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	f3bf 8f4f 	dsb	sy
 8000ed8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000edc:	e7f4      	b.n	8000ec8 <prvIdleTask+0x8>
 8000ede:	bf00      	nop
 8000ee0:	e000ed04 	.word	0xe000ed04

08000ee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	e00c      	b.n	8000f0a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <prvInitialiseTaskLists+0x60>)
 8000efc:	4413      	add	r3, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fa38 	bl	8000374 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3301      	adds	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b06      	cmp	r3, #6
 8000f0e:	d9ef      	bls.n	8000ef0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <prvInitialiseTaskLists+0x64>)
 8000f12:	f7ff fa2f 	bl	8000374 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <prvInitialiseTaskLists+0x68>)
 8000f18:	f7ff fa2c 	bl	8000374 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <prvInitialiseTaskLists+0x6c>)
 8000f1e:	f7ff fa29 	bl	8000374 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000f22:	480c      	ldr	r0, [pc, #48]	; (8000f54 <prvInitialiseTaskLists+0x70>)
 8000f24:	f7ff fa26 	bl	8000374 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <prvInitialiseTaskLists+0x74>)
 8000f2a:	f7ff fa23 	bl	8000374 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <prvInitialiseTaskLists+0x78>)
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <prvInitialiseTaskLists+0x64>)
 8000f32:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <prvInitialiseTaskLists+0x7c>)
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <prvInitialiseTaskLists+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	24000040 	.word	0x24000040
 8000f48:	240000cc 	.word	0x240000cc
 8000f4c:	240000e0 	.word	0x240000e0
 8000f50:	240000fc 	.word	0x240000fc
 8000f54:	24000110 	.word	0x24000110
 8000f58:	24000128 	.word	0x24000128
 8000f5c:	240000f4 	.word	0x240000f4
 8000f60:	240000f8 	.word	0x240000f8

08000f64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000f6a:	e019      	b.n	8000fa0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000f6c:	f000 fb60 	bl	8001630 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <prvCheckTasksWaitingTermination+0x50>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa83 	bl	8000488 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <prvCheckTasksWaitingTermination+0x54>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <prvCheckTasksWaitingTermination+0x54>)
 8000f8a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <prvCheckTasksWaitingTermination+0x58>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <prvCheckTasksWaitingTermination+0x58>)
 8000f94:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000f96:	f000 fb7f 	bl	8001698 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f810 	bl	8000fc0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <prvCheckTasksWaitingTermination+0x58>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1e1      	bne.n	8000f6c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	24000110 	.word	0x24000110
 8000fb8:	2400013c 	.word	0x2400013c
 8000fbc:	24000124 	.word	0x24000124

08000fc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fd49 	bl	8001a64 <vPortFree>
                vPortFree( pxTCB );
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fd46 	bl	8001a64 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <prvResetNextTaskUnblockTime+0x30>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d104      	bne.n	8000ff8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <prvResetNextTaskUnblockTime+0x34>)
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000ff6:	e005      	b.n	8001004 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <prvResetNextTaskUnblockTime+0x30>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <prvResetNextTaskUnblockTime+0x34>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	240000f4 	.word	0x240000f4
 8001014:	2400015c 	.word	0x2400015c

08001018 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00c      	beq.n	8001046 <xTaskGenericNotifyWait+0x2e>
        __asm volatile
 800102c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001030:	b672      	cpsid	i
 8001032:	f383 8811 	msr	BASEPRI, r3
 8001036:	f3bf 8f6f 	isb	sy
 800103a:	f3bf 8f4f 	dsb	sy
 800103e:	b662      	cpsie	i
 8001040:	613b      	str	r3, [r7, #16]
    }
 8001042:	bf00      	nop
 8001044:	e7fe      	b.n	8001044 <xTaskGenericNotifyWait+0x2c>

        taskENTER_CRITICAL();
 8001046:	f000 faf3 	bl	8001630 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800104a:	4b39      	ldr	r3, [pc, #228]	; (8001130 <xTaskGenericNotifyWait+0x118>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	3358      	adds	r3, #88	; 0x58
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d024      	beq.n	80010a6 <xTaskGenericNotifyWait+0x8e>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <xTaskGenericNotifyWait+0x118>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3314      	adds	r3, #20
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	6859      	ldr	r1, [r3, #4]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	43db      	mvns	r3, r3
 800106e:	4019      	ands	r1, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3314      	adds	r3, #20
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800107a:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <xTaskGenericNotifyWait+0x118>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4413      	add	r3, r2
 8001082:	3358      	adds	r3, #88	; 0x58
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00b      	beq.n	80010a6 <xTaskGenericNotifyWait+0x8e>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800108e:	2101      	movs	r1, #1
 8001090:	6a38      	ldr	r0, [r7, #32]
 8001092:	f000 f943 	bl	800131c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <xTaskGenericNotifyWait+0x11c>)
 8001098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	f3bf 8f4f 	dsb	sy
 80010a2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80010a6:	f000 faf7 	bl	8001698 <vPortExitCritical>

        taskENTER_CRITICAL();
 80010aa:	f000 fac1 	bl	8001630 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	4613      	mov	r3, r2
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	2040      	movs	r0, #64	; 0x40
 80010bc:	f002 fc44 	bl	8003948 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d008      	beq.n	80010d8 <xTaskGenericNotifyWait+0xc0>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <xTaskGenericNotifyWait+0x118>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3314      	adds	r3, #20
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <xTaskGenericNotifyWait+0x118>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	3358      	adds	r3, #88	; 0x58
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d002      	beq.n	80010f0 <xTaskGenericNotifyWait+0xd8>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	e010      	b.n	8001112 <xTaskGenericNotifyWait+0xfa>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <xTaskGenericNotifyWait+0x118>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3314      	adds	r3, #20
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	6859      	ldr	r1, [r3, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	43db      	mvns	r3, r3
 8001102:	4019      	ands	r1, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3314      	adds	r3, #20
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <xTaskGenericNotifyWait+0x118>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	3358      	adds	r3, #88	; 0x58
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001120:	f000 faba 	bl	8001698 <vPortExitCritical>

        return xReturn;
 8001124:	697b      	ldr	r3, [r7, #20]
    }
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2400003c 	.word	0x2400003c
 8001134:	e000ed04 	.word	0xe000ed04

08001138 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	; 0x38
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001146:	2301      	movs	r3, #1
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00c      	beq.n	800116a <xTaskGenericNotify+0x32>
        __asm volatile
 8001150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001154:	b672      	cpsid	i
 8001156:	f383 8811 	msr	BASEPRI, r3
 800115a:	f3bf 8f6f 	isb	sy
 800115e:	f3bf 8f4f 	dsb	sy
 8001162:	b662      	cpsie	i
 8001164:	623b      	str	r3, [r7, #32]
    }
 8001166:	bf00      	nop
 8001168:	e7fe      	b.n	8001168 <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10c      	bne.n	800118a <xTaskGenericNotify+0x52>
        __asm volatile
 8001170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001174:	b672      	cpsid	i
 8001176:	f383 8811 	msr	BASEPRI, r3
 800117a:	f3bf 8f6f 	isb	sy
 800117e:	f3bf 8f4f 	dsb	sy
 8001182:	b662      	cpsie	i
 8001184:	61fb      	str	r3, [r7, #28]
    }
 8001186:	bf00      	nop
 8001188:	e7fe      	b.n	8001188 <xTaskGenericNotify+0x50>
        pxTCB = xTaskToNotify;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800118e:	f000 fa4f 	bl	8001630 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001194:	2b00      	cmp	r3, #0
 8001196:	d007      	beq.n	80011a8 <xTaskGenericNotify+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3314      	adds	r3, #20
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a6:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80011a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	4413      	add	r3, r2
 80011ae:	3358      	adds	r3, #88	; 0x58
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80011b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4413      	add	r3, r2
 80011bc:	3358      	adds	r3, #88	; 0x58
 80011be:	2202      	movs	r2, #2
 80011c0:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d841      	bhi.n	800124c <xTaskGenericNotify+0x114>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <xTaskGenericNotify+0x98>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	0800126f 	.word	0x0800126f
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	08001203 	.word	0x08001203
 80011dc:	0800121f 	.word	0x0800121f
 80011e0:	0800122f 	.word	0x0800122f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80011e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3314      	adds	r3, #20
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3314      	adds	r3, #20
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	605a      	str	r2, [r3, #4]
                    break;
 8001200:	e038      	b.n	8001274 <xTaskGenericNotify+0x13c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	3314      	adds	r3, #20
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3314      	adds	r3, #20
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	605a      	str	r2, [r3, #4]
                    break;
 800121c:	e02a      	b.n	8001274 <xTaskGenericNotify+0x13c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800121e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	3314      	adds	r3, #20
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	605a      	str	r2, [r3, #4]
                    break;
 800122c:	e022      	b.n	8001274 <xTaskGenericNotify+0x13c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800122e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001232:	2b02      	cmp	r3, #2
 8001234:	d007      	beq.n	8001246 <xTaskGenericNotify+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	3314      	adds	r3, #20
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001244:	e016      	b.n	8001274 <xTaskGenericNotify+0x13c>
                        xReturn = pdFAIL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800124a:	e013      	b.n	8001274 <xTaskGenericNotify+0x13c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800124c:	4b2f      	ldr	r3, [pc, #188]	; (800130c <xTaskGenericNotify+0x1d4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00e      	beq.n	8001272 <xTaskGenericNotify+0x13a>
        __asm volatile
 8001254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001258:	b672      	cpsid	i
 800125a:	f383 8811 	msr	BASEPRI, r3
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	f3bf 8f4f 	dsb	sy
 8001266:	b662      	cpsie	i
 8001268:	61bb      	str	r3, [r7, #24]
    }
 800126a:	bf00      	nop
 800126c:	e7fe      	b.n	800126c <xTaskGenericNotify+0x134>
                    break;
 800126e:	bf00      	nop
 8001270:	e000      	b.n	8001274 <xTaskGenericNotify+0x13c>

                    break;
 8001272:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8001274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001276:	4618      	mov	r0, r3
 8001278:	f003 f87e 	bl	8004378 <SEGGER_SYSVIEW_ShrinkId>
 800127c:	4601      	mov	r1, r0
 800127e:	78fa      	ldrb	r2, [r7, #3]
 8001280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	4613      	mov	r3, r2
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	203e      	movs	r0, #62	; 0x3e
 800128a:	f002 fb5d 	bl	8003948 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800128e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001292:	2b01      	cmp	r3, #1
 8001294:	d132      	bne.n	80012fc <xTaskGenericNotify+0x1c4>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	3304      	adds	r3, #4
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f8f4 	bl	8000488 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 ffc6 	bl	8004234 <SEGGER_SYSVIEW_OnTaskStartReady>
 80012a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	2201      	movs	r2, #1
 80012ae:	409a      	lsls	r2, r3
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <xTaskGenericNotify+0x1d8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <xTaskGenericNotify+0x1d8>)
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <xTaskGenericNotify+0x1dc>)
 80012c8:	441a      	add	r2, r3
 80012ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012cc:	3304      	adds	r3, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4610      	mov	r0, r2
 80012d2:	f7ff f87c 	bl	80003ce <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00c      	beq.n	80012f8 <xTaskGenericNotify+0x1c0>
        __asm volatile
 80012de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012e2:	b672      	cpsid	i
 80012e4:	f383 8811 	msr	BASEPRI, r3
 80012e8:	f3bf 8f6f 	isb	sy
 80012ec:	f3bf 8f4f 	dsb	sy
 80012f0:	b662      	cpsie	i
 80012f2:	617b      	str	r3, [r7, #20]
    }
 80012f4:	bf00      	nop
 80012f6:	e7fe      	b.n	80012f6 <xTaskGenericNotify+0x1be>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <xTaskGenericNotify+0x1e0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80012fc:	f000 f9cc 	bl	8001698 <vPortExitCritical>

        return xReturn;
 8001300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8001302:	4618      	mov	r0, r3
 8001304:	3730      	adds	r7, #48	; 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	24000140 	.word	0x24000140
 8001310:	24000144 	.word	0x24000144
 8001314:	24000040 	.word	0x24000040
 8001318:	2400003c 	.word	0x2400003c

0800131c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001326:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3304      	adds	r3, #4
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f8a8 	bl	8000488 <uxListRemove>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10b      	bne.n	8001356 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	2201      	movs	r2, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4013      	ands	r3, r2
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001354:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135c:	d110      	bne.n	8001380 <prvAddCurrentTaskToDelayedList+0x64>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00d      	beq.n	8001380 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	211b      	movs	r1, #27
 800136a:	4618      	mov	r0, r3
 800136c:	f002 ffa4 	bl	80042b8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3304      	adds	r3, #4
 8001376:	4619      	mov	r1, r3
 8001378:	4820      	ldr	r0, [pc, #128]	; (80013fc <prvAddCurrentTaskToDelayedList+0xe0>)
 800137a:	f7ff f828 	bl	80003ce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800137e:	e032      	b.n	80013e6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d20f      	bcs.n	80013b8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2104      	movs	r1, #4
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 ff8a 	bl	80042b8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <prvAddCurrentTaskToDelayedList+0xe4>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3304      	adds	r3, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f7ff f830 	bl	8000416 <vListInsert>
}
 80013b6:	e016      	b.n	80013e6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2104      	movs	r1, #4
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 ff7a 	bl	80042b8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3304      	adds	r3, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4610      	mov	r0, r2
 80013d2:	f7ff f820 	bl	8000416 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <prvAddCurrentTaskToDelayedList+0xec>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d202      	bcs.n	80013e6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80013e0:	4a09      	ldr	r2, [pc, #36]	; (8001408 <prvAddCurrentTaskToDelayedList+0xec>)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	24000140 	.word	0x24000140
 80013f4:	2400003c 	.word	0x2400003c
 80013f8:	24000144 	.word	0x24000144
 80013fc:	24000128 	.word	0x24000128
 8001400:	240000f8 	.word	0x240000f8
 8001404:	240000f4 	.word	0x240000f4
 8001408:	2400015c 	.word	0x2400015c

0800140c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3b04      	subs	r3, #4
 800141c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001424:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3b04      	subs	r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	f023 0201 	bic.w	r2, r3, #1
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3b04      	subs	r3, #4
 800143a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800143c:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <pxPortInitialiseStack+0x64>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3b14      	subs	r3, #20
 8001446:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3b04      	subs	r3, #4
 8001452:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f06f 0202 	mvn.w	r2, #2
 800145a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3b20      	subs	r3, #32
 8001460:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	08001475 	.word	0x08001475

08001474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <prvTaskExitError+0x5c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001486:	d00c      	beq.n	80014a2 <prvTaskExitError+0x2e>
        __asm volatile
 8001488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800148c:	b672      	cpsid	i
 800148e:	f383 8811 	msr	BASEPRI, r3
 8001492:	f3bf 8f6f 	isb	sy
 8001496:	f3bf 8f4f 	dsb	sy
 800149a:	b662      	cpsie	i
 800149c:	60fb      	str	r3, [r7, #12]
    }
 800149e:	bf00      	nop
 80014a0:	e7fe      	b.n	80014a0 <prvTaskExitError+0x2c>
        __asm volatile
 80014a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a6:	b672      	cpsid	i
 80014a8:	f383 8811 	msr	BASEPRI, r3
 80014ac:	f3bf 8f6f 	isb	sy
 80014b0:	f3bf 8f4f 	dsb	sy
 80014b4:	b662      	cpsie	i
 80014b6:	60bb      	str	r3, [r7, #8]
    }
 80014b8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80014ba:	bf00      	nop
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0fc      	beq.n	80014bc <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	24000004 	.word	0x24000004
	...

080014e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <pxCurrentTCBConst2>)
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	6808      	ldr	r0, [r1, #0]
 80014e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ea:	f380 8809 	msr	PSP, r0
 80014ee:	f3bf 8f6f 	isb	sy
 80014f2:	f04f 0000 	mov.w	r0, #0
 80014f6:	f380 8811 	msr	BASEPRI, r0
 80014fa:	4770      	bx	lr
 80014fc:	f3af 8000 	nop.w

08001500 <pxCurrentTCBConst2>:
 8001500:	2400003c 	.word	0x2400003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop

08001508 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001508:	4808      	ldr	r0, [pc, #32]	; (800152c <prvPortStartFirstTask+0x24>)
 800150a:	6800      	ldr	r0, [r0, #0]
 800150c:	6800      	ldr	r0, [r0, #0]
 800150e:	f380 8808 	msr	MSP, r0
 8001512:	f04f 0000 	mov.w	r0, #0
 8001516:	f380 8814 	msr	CONTROL, r0
 800151a:	b662      	cpsie	i
 800151c:	b661      	cpsie	f
 800151e:	f3bf 8f4f 	dsb	sy
 8001522:	f3bf 8f6f 	isb	sy
 8001526:	df00      	svc	0
 8001528:	bf00      	nop
 800152a:	0000      	.short	0x0000
 800152c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop

08001534 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <xPortStartScheduler+0xe4>)
 800153c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	22ff      	movs	r2, #255	; 0xff
 800154a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b2f      	ldr	r3, [pc, #188]	; (800161c <xPortStartScheduler+0xe8>)
 8001560:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001562:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <xPortStartScheduler+0xec>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001568:	e009      	b.n	800157e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <xPortStartScheduler+0xec>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a2b      	ldr	r2, [pc, #172]	; (8001620 <xPortStartScheduler+0xec>)
 8001572:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001586:	2b80      	cmp	r3, #128	; 0x80
 8001588:	d0ef      	beq.n	800156a <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <xPortStartScheduler+0xec>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	d00c      	beq.n	80015b0 <xPortStartScheduler+0x7c>
        __asm volatile
 8001596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800159a:	b672      	cpsid	i
 800159c:	f383 8811 	msr	BASEPRI, r3
 80015a0:	f3bf 8f6f 	isb	sy
 80015a4:	f3bf 8f4f 	dsb	sy
 80015a8:	b662      	cpsie	i
 80015aa:	60bb      	str	r3, [r7, #8]
    }
 80015ac:	bf00      	nop
 80015ae:	e7fe      	b.n	80015ae <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <xPortStartScheduler+0xec>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <xPortStartScheduler+0xec>)
 80015b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <xPortStartScheduler+0xec>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <xPortStartScheduler+0xec>)
 80015c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <xPortStartScheduler+0xf0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <xPortStartScheduler+0xf0>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <xPortStartScheduler+0xf0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a11      	ldr	r2, [pc, #68]	; (8001624 <xPortStartScheduler+0xf0>)
 80015e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80015e4:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80015e6:	f000 f8e3 	bl	80017b0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <xPortStartScheduler+0xf4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80015f0:	f000 f902 	bl	80017f8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <xPortStartScheduler+0xf8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0c      	ldr	r2, [pc, #48]	; (800162c <xPortStartScheduler+0xf8>)
 80015fa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80015fe:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001600:	f7ff ff82 	bl	8001508 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001604:	f7ff fbf0 	bl	8000de8 <vTaskSwitchContext>
    prvTaskExitError();
 8001608:	f7ff ff34 	bl	8001474 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e400 	.word	0xe000e400
 800161c:	24000168 	.word	0x24000168
 8001620:	2400016c 	.word	0x2400016c
 8001624:	e000ed20 	.word	0xe000ed20
 8001628:	24000004 	.word	0x24000004
 800162c:	e000ef34 	.word	0xe000ef34

08001630 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
        __asm volatile
 8001636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800163a:	b672      	cpsid	i
 800163c:	f383 8811 	msr	BASEPRI, r3
 8001640:	f3bf 8f6f 	isb	sy
 8001644:	f3bf 8f4f 	dsb	sy
 8001648:	b662      	cpsie	i
 800164a:	607b      	str	r3, [r7, #4]
    }
 800164c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <vPortEnterCritical+0x60>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <vPortEnterCritical+0x60>)
 8001656:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <vPortEnterCritical+0x60>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d111      	bne.n	8001684 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <vPortEnterCritical+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00c      	beq.n	8001684 <vPortEnterCritical+0x54>
        __asm volatile
 800166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800166e:	b672      	cpsid	i
 8001670:	f383 8811 	msr	BASEPRI, r3
 8001674:	f3bf 8f6f 	isb	sy
 8001678:	f3bf 8f4f 	dsb	sy
 800167c:	b662      	cpsie	i
 800167e:	603b      	str	r3, [r7, #0]
    }
 8001680:	bf00      	nop
 8001682:	e7fe      	b.n	8001682 <vPortEnterCritical+0x52>
    }
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	24000004 	.word	0x24000004
 8001694:	e000ed04 	.word	0xe000ed04

08001698 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <vPortExitCritical+0x54>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <vPortExitCritical+0x28>
        __asm volatile
 80016a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016aa:	b672      	cpsid	i
 80016ac:	f383 8811 	msr	BASEPRI, r3
 80016b0:	f3bf 8f6f 	isb	sy
 80016b4:	f3bf 8f4f 	dsb	sy
 80016b8:	b662      	cpsie	i
 80016ba:	607b      	str	r3, [r7, #4]
    }
 80016bc:	bf00      	nop
 80016be:	e7fe      	b.n	80016be <vPortExitCritical+0x26>
    uxCriticalNesting--;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <vPortExitCritical+0x54>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <vPortExitCritical+0x54>)
 80016c8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <vPortExitCritical+0x54>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <vPortExitCritical+0x46>
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80016dc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	24000004 	.word	0x24000004

080016f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80016f0:	f3ef 8009 	mrs	r0, PSP
 80016f4:	f3bf 8f6f 	isb	sy
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <pxCurrentTCBConst>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	f01e 0f10 	tst.w	lr, #16
 8001700:	bf08      	it	eq
 8001702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800170a:	6010      	str	r0, [r2, #0]
 800170c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001714:	b672      	cpsid	i
 8001716:	f380 8811 	msr	BASEPRI, r0
 800171a:	f3bf 8f4f 	dsb	sy
 800171e:	f3bf 8f6f 	isb	sy
 8001722:	b662      	cpsie	i
 8001724:	f7ff fb60 	bl	8000de8 <vTaskSwitchContext>
 8001728:	f04f 0000 	mov.w	r0, #0
 800172c:	f380 8811 	msr	BASEPRI, r0
 8001730:	bc09      	pop	{r0, r3}
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	6808      	ldr	r0, [r1, #0]
 8001736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800173a:	f01e 0f10 	tst.w	lr, #16
 800173e:	bf08      	it	eq
 8001740:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001744:	f380 8809 	msr	PSP, r0
 8001748:	f3bf 8f6f 	isb	sy
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <pxCurrentTCBConst>:
 8001750:	2400003c 	.word	0x2400003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop

08001758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
        __asm volatile
 800175e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001762:	b672      	cpsid	i
 8001764:	f383 8811 	msr	BASEPRI, r3
 8001768:	f3bf 8f6f 	isb	sy
 800176c:	f3bf 8f4f 	dsb	sy
 8001770:	b662      	cpsie	i
 8001772:	607b      	str	r3, [r7, #4]
    }
 8001774:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001776:	f002 fc43 	bl	8004000 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800177a:	f7ff fa99 	bl	8000cb0 <xTaskIncrementTick>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001784:	f002 fc9a 	bl	80040bc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <SysTick_Handler+0x54>)
 800178a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e001      	b.n	8001796 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8001792:	f002 fc77 	bl	8004084 <SEGGER_SYSVIEW_RecordExitISR>
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
        __asm volatile
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f383 8811 	msr	BASEPRI, r3
    }
 80017a0:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000ed04 	.word	0xe000ed04

080017b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <vPortSetupTimerInterrupt+0x34>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <vPortSetupTimerInterrupt+0x38>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <vPortSetupTimerInterrupt+0x3c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <vPortSetupTimerInterrupt+0x40>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	099b      	lsrs	r3, r3, #6
 80017cc:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <vPortSetupTimerInterrupt+0x44>)
 80017ce:	3b01      	subs	r3, #1
 80017d0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <vPortSetupTimerInterrupt+0x34>)
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e010 	.word	0xe000e010
 80017e8:	e000e018 	.word	0xe000e018
 80017ec:	24000010 	.word	0x24000010
 80017f0:	10624dd3 	.word	0x10624dd3
 80017f4:	e000e014 	.word	0xe000e014

080017f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80017f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001808 <vPortEnableVFP+0x10>
 80017fc:	6801      	ldr	r1, [r0, #0]
 80017fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001802:	6001      	str	r1, [r0, #0]
 8001804:	4770      	bx	lr
 8001806:	0000      	.short	0x0000
 8001808:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop

08001810 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001816:	f3ef 8305 	mrs	r3, IPSR
 800181a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b0f      	cmp	r3, #15
 8001820:	d916      	bls.n	8001850 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001822:	4a19      	ldr	r2, [pc, #100]	; (8001888 <vPortValidateInterruptPriority+0x78>)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <vPortValidateInterruptPriority+0x7c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	7afa      	ldrb	r2, [r7, #11]
 8001832:	429a      	cmp	r2, r3
 8001834:	d20c      	bcs.n	8001850 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8001836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183a:	b672      	cpsid	i
 800183c:	f383 8811 	msr	BASEPRI, r3
 8001840:	f3bf 8f6f 	isb	sy
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	b662      	cpsie	i
 800184a:	607b      	str	r3, [r7, #4]
    }
 800184c:	bf00      	nop
 800184e:	e7fe      	b.n	800184e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <vPortValidateInterruptPriority+0x80>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <vPortValidateInterruptPriority+0x84>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d90c      	bls.n	800187a <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8001860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001864:	b672      	cpsid	i
 8001866:	f383 8811 	msr	BASEPRI, r3
 800186a:	f3bf 8f6f 	isb	sy
 800186e:	f3bf 8f4f 	dsb	sy
 8001872:	b662      	cpsie	i
 8001874:	603b      	str	r3, [r7, #0]
    }
 8001876:	bf00      	nop
 8001878:	e7fe      	b.n	8001878 <vPortValidateInterruptPriority+0x68>
    }
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e3f0 	.word	0xe000e3f0
 800188c:	24000168 	.word	0x24000168
 8001890:	e000ed0c 	.word	0xe000ed0c
 8001894:	2400016c 	.word	0x2400016c

08001898 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80018a4:	f7ff f940 	bl	8000b28 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80018a8:	4b68      	ldr	r3, [pc, #416]	; (8001a4c <pvPortMalloc+0x1b4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80018b0:	f000 f93e 	bl	8001b30 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80018b4:	4b66      	ldr	r3, [pc, #408]	; (8001a50 <pvPortMalloc+0x1b8>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 80ab 	bne.w	8001a18 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d02f      	beq.n	8001928 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80018c8:	2208      	movs	r2, #8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d229      	bcs.n	8001928 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 80018d4:	2208      	movs	r2, #8
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d023      	beq.n	800192e <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f023 0307 	bic.w	r3, r3, #7
 80018ec:	3308      	adds	r3, #8
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d216      	bcs.n	8001922 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f023 0307 	bic.w	r3, r3, #7
 80018fa:	3308      	adds	r3, #8
 80018fc:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	2b00      	cmp	r3, #0
 8001906:	d012      	beq.n	800192e <pvPortMalloc+0x96>
        __asm volatile
 8001908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190c:	b672      	cpsid	i
 800190e:	f383 8811 	msr	BASEPRI, r3
 8001912:	f3bf 8f6f 	isb	sy
 8001916:	f3bf 8f4f 	dsb	sy
 800191a:	b662      	cpsie	i
 800191c:	617b      	str	r3, [r7, #20]
    }
 800191e:	bf00      	nop
 8001920:	e7fe      	b.n	8001920 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001926:	e002      	b.n	800192e <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	e000      	b.n	8001930 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800192e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d070      	beq.n	8001a18 <pvPortMalloc+0x180>
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <pvPortMalloc+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	d86b      	bhi.n	8001a18 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001940:	4b45      	ldr	r3, [pc, #276]	; (8001a58 <pvPortMalloc+0x1c0>)
 8001942:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001944:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <pvPortMalloc+0x1c0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800194a:	e004      	b.n	8001956 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	d903      	bls.n	8001968 <pvPortMalloc+0xd0>
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f1      	bne.n	800194c <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <pvPortMalloc+0x1b4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196e:	429a      	cmp	r2, r3
 8001970:	d052      	beq.n	8001a18 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2208      	movs	r2, #8
 8001978:	4413      	add	r3, r2
 800197a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	1ad2      	subs	r2, r2, r3
 800198c:	2308      	movs	r3, #8
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	429a      	cmp	r2, r3
 8001992:	d921      	bls.n	80019d8 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00c      	beq.n	80019c0 <pvPortMalloc+0x128>
        __asm volatile
 80019a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019aa:	b672      	cpsid	i
 80019ac:	f383 8811 	msr	BASEPRI, r3
 80019b0:	f3bf 8f6f 	isb	sy
 80019b4:	f3bf 8f4f 	dsb	sy
 80019b8:	b662      	cpsie	i
 80019ba:	613b      	str	r3, [r7, #16]
    }
 80019bc:	bf00      	nop
 80019be:	e7fe      	b.n	80019be <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80019d2:	69b8      	ldr	r0, [r7, #24]
 80019d4:	f000 f90e 	bl	8001bf4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <pvPortMalloc+0x1bc>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <pvPortMalloc+0x1bc>)
 80019e4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <pvPortMalloc+0x1bc>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <pvPortMalloc+0x1c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d203      	bcs.n	80019fa <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <pvPortMalloc+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <pvPortMalloc+0x1c4>)
 80019f8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <pvPortMalloc+0x1b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <pvPortMalloc+0x1c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <pvPortMalloc+0x1c8>)
 8001a16:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001a18:	f7ff f894 	bl	8000b44 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00c      	beq.n	8001a40 <pvPortMalloc+0x1a8>
        __asm volatile
 8001a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2a:	b672      	cpsid	i
 8001a2c:	f383 8811 	msr	BASEPRI, r3
 8001a30:	f3bf 8f6f 	isb	sy
 8001a34:	f3bf 8f4f 	dsb	sy
 8001a38:	b662      	cpsie	i
 8001a3a:	60fb      	str	r3, [r7, #12]
    }
 8001a3c:	bf00      	nop
 8001a3e:	e7fe      	b.n	8001a3e <pvPortMalloc+0x1a6>
    return pvReturn;
 8001a40:	69fb      	ldr	r3, [r7, #28]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	24007178 	.word	0x24007178
 8001a50:	2400718c 	.word	0x2400718c
 8001a54:	2400717c 	.word	0x2400717c
 8001a58:	24007170 	.word	0x24007170
 8001a5c:	24007180 	.word	0x24007180
 8001a60:	24007184 	.word	0x24007184

08001a64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d051      	beq.n	8001b1a <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001a76:	2308      	movs	r3, #8
 8001a78:	425b      	negs	r3, r3
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <vPortFree+0xc0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10c      	bne.n	8001aac <vPortFree+0x48>
        __asm volatile
 8001a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a96:	b672      	cpsid	i
 8001a98:	f383 8811 	msr	BASEPRI, r3
 8001a9c:	f3bf 8f6f 	isb	sy
 8001aa0:	f3bf 8f4f 	dsb	sy
 8001aa4:	b662      	cpsie	i
 8001aa6:	60fb      	str	r3, [r7, #12]
    }
 8001aa8:	bf00      	nop
 8001aaa:	e7fe      	b.n	8001aaa <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00c      	beq.n	8001ace <vPortFree+0x6a>
        __asm volatile
 8001ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab8:	b672      	cpsid	i
 8001aba:	f383 8811 	msr	BASEPRI, r3
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f3bf 8f4f 	dsb	sy
 8001ac6:	b662      	cpsie	i
 8001ac8:	60bb      	str	r3, [r7, #8]
    }
 8001aca:	bf00      	nop
 8001acc:	e7fe      	b.n	8001acc <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <vPortFree+0xc0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01e      	beq.n	8001b1a <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d11a      	bne.n	8001b1a <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <vPortFree+0xc0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	401a      	ands	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001af4:	f7ff f818 	bl	8000b28 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <vPortFree+0xc4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <vPortFree+0xc4>)
 8001b04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b06:	6938      	ldr	r0, [r7, #16]
 8001b08:	f000 f874 	bl	8001bf4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <vPortFree+0xc8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <vPortFree+0xc8>)
 8001b14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001b16:	f7ff f815 	bl	8000b44 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2400718c 	.word	0x2400718c
 8001b28:	2400717c 	.word	0x2400717c
 8001b2c:	24007188 	.word	0x24007188

08001b30 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b36:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001b3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <prvHeapInit+0xac>)
 8001b3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00c      	beq.n	8001b64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3307      	adds	r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f023 0307 	bic.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <prvHeapInit+0xac>)
 8001b60:	4413      	add	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <prvHeapInit+0xb0>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <prvHeapInit+0xb0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f023 0307 	bic.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <prvHeapInit+0xb4>)
 8001b90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <prvHeapInit+0xb4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <prvHeapInit+0xb4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	1ad2      	subs	r2, r2, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <prvHeapInit+0xb4>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <prvHeapInit+0xb8>)
 8001bbe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a09      	ldr	r2, [pc, #36]	; (8001bec <prvHeapInit+0xbc>)
 8001bc6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <prvHeapInit+0xc0>)
 8001bca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bce:	601a      	str	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	24000170 	.word	0x24000170
 8001be0:	24007170 	.word	0x24007170
 8001be4:	24007178 	.word	0x24007178
 8001be8:	24007180 	.word	0x24007180
 8001bec:	2400717c 	.word	0x2400717c
 8001bf0:	2400718c 	.word	0x2400718c

08001bf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <prvInsertBlockIntoFreeList+0xac>)
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e002      	b.n	8001c08 <prvInsertBlockIntoFreeList+0x14>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d8f7      	bhi.n	8001c02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d108      	bne.n	8001c36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	441a      	add	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	441a      	add	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d118      	bne.n	8001c7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d00d      	beq.n	8001c72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	441a      	add	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e008      	b.n	8001c84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e003      	b.n	8001c84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d002      	beq.n	8001c92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	24007170 	.word	0x24007170
 8001ca4:	24007178 	.word	0x24007178

08001ca8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <_cbSendSystemDesc+0x14>)
 8001cae:	f002 f951 	bl	8003f54 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001cb2:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <_cbSendSystemDesc+0x18>)
 8001cb4:	f002 f94e 	bl	8003f54 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	08009370 	.word	0x08009370
 8001cc0:	080093a0 	.word	0x080093a0

08001cc4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001cce:	6819      	ldr	r1, [r3, #0]
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <SEGGER_SYSVIEW_Conf+0x24>)
 8001cd2:	4a06      	ldr	r2, [pc, #24]	; (8001cec <SEGGER_SYSVIEW_Conf+0x28>)
 8001cd4:	f001 fd2e 	bl	8003734 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001cd8:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 8001cdc:	f001 fd70 	bl	80037c0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	24000010 	.word	0x24000010
 8001ce8:	08001ca9 	.word	0x08001ca9
 8001cec:	08009514 	.word	0x08009514

08001cf0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	e033      	b.n	8001d64 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001cfc:	491e      	ldr	r1, [pc, #120]	; (8001d78 <_cbSendTaskList+0x88>)
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	491a      	ldr	r1, [pc, #104]	; (8001d78 <_cbSendTaskList+0x88>)
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	4c16      	ldr	r4, [pc, #88]	; (8001d78 <_cbSendTaskList+0x88>)
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4423      	add	r3, r4
 8001d2c:	3308      	adds	r3, #8
 8001d2e:	681c      	ldr	r4, [r3, #0]
 8001d30:	4d11      	ldr	r5, [pc, #68]	; (8001d78 <_cbSendTaskList+0x88>)
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	442b      	add	r3, r5
 8001d3e:	330c      	adds	r3, #12
 8001d40:	681d      	ldr	r5, [r3, #0]
 8001d42:	4e0d      	ldr	r6, [pc, #52]	; (8001d78 <_cbSendTaskList+0x88>)
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4433      	add	r3, r6
 8001d50:	3310      	adds	r3, #16
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	462b      	mov	r3, r5
 8001d58:	4622      	mov	r2, r4
 8001d5a:	f000 f979 	bl	8002050 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3301      	adds	r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <_cbSendTaskList+0x8c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d3c6      	bcc.n	8001cfc <_cbSendTaskList+0xc>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d78:	24007190 	.word	0x24007190
 8001d7c:	24007230 	.word	0x24007230

08001d80 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001d88:	f7fe ff80 	bl	8000c8c <xTaskGetTickCountFromISR>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2200      	movs	r2, #0
 8001d90:	469a      	mov	sl, r3
 8001d92:	4693      	mov	fp, r2
 8001d94:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001d98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	f04f 0a00 	mov.w	sl, #0
 8001da4:	f04f 0b00 	mov.w	fp, #0
 8001da8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001dac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001db0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001db4:	4652      	mov	r2, sl
 8001db6:	465b      	mov	r3, fp
 8001db8:	1a14      	subs	r4, r2, r0
 8001dba:	eb63 0501 	sbc.w	r5, r3, r1
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	00ab      	lsls	r3, r5, #2
 8001dc8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001dcc:	00a2      	lsls	r2, r4, #2
 8001dce:	4614      	mov	r4, r2
 8001dd0:	461d      	mov	r5, r3
 8001dd2:	eb14 0800 	adds.w	r8, r4, r0
 8001dd6:	eb45 0901 	adc.w	r9, r5, r1
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dee:	4690      	mov	r8, r2
 8001df0:	4699      	mov	r9, r3
 8001df2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001df6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001e08 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001e16:	2205      	movs	r2, #5
 8001e18:	492b      	ldr	r1, [pc, #172]	; (8001ec8 <SYSVIEW_AddTask+0xc0>)
 8001e1a:	68b8      	ldr	r0, [r7, #8]
 8001e1c:	f007 fa72 	bl	8009304 <memcmp>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d04b      	beq.n	8001ebe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <SYSVIEW_AddTask+0xc4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b07      	cmp	r3, #7
 8001e2c:	d903      	bls.n	8001e36 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001e2e:	4828      	ldr	r0, [pc, #160]	; (8001ed0 <SYSVIEW_AddTask+0xc8>)
 8001e30:	f002 fba2 	bl	8004578 <SEGGER_SYSVIEW_Warn>
    return;
 8001e34:	e044      	b.n	8001ec0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <SYSVIEW_AddTask+0xc4>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4926      	ldr	r1, [pc, #152]	; (8001ed4 <SYSVIEW_AddTask+0xcc>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <SYSVIEW_AddTask+0xc4>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4921      	ldr	r1, [pc, #132]	; (8001ed4 <SYSVIEW_AddTask+0xcc>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <SYSVIEW_AddTask+0xc4>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	491b      	ldr	r1, [pc, #108]	; (8001ed4 <SYSVIEW_AddTask+0xcc>)
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	3308      	adds	r3, #8
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <SYSVIEW_AddTask+0xc4>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4916      	ldr	r1, [pc, #88]	; (8001ed4 <SYSVIEW_AddTask+0xcc>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	330c      	adds	r3, #12
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <SYSVIEW_AddTask+0xc4>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4910      	ldr	r1, [pc, #64]	; (8001ed4 <SYSVIEW_AddTask+0xcc>)
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3310      	adds	r3, #16
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <SYSVIEW_AddTask+0xc4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <SYSVIEW_AddTask+0xc4>)
 8001eaa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f8ca 	bl	8002050 <SYSVIEW_SendTaskInfo>
 8001ebc:	e000      	b.n	8001ec0 <SYSVIEW_AddTask+0xb8>
    return;
 8001ebe:	bf00      	nop

}
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	080093b0 	.word	0x080093b0
 8001ecc:	24007230 	.word	0x24007230
 8001ed0:	080093b8 	.word	0x080093b8
 8001ed4:	24007190 	.word	0x24007190

08001ed8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8001ee0:	4b59      	ldr	r3, [pc, #356]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80ab 	beq.w	8002040 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	e00d      	b.n	8001f0c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8001ef0:	4956      	ldr	r1, [pc, #344]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d008      	beq.n	8001f18 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d3ec      	bcc.n	8001ef0 <SYSVIEW_DeleteTask+0x18>
 8001f16:	e000      	b.n	8001f1a <SYSVIEW_DeleteTask+0x42>
      break;
 8001f18:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8001f1a:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d111      	bne.n	8001f4a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4a46      	ldr	r2, [pc, #280]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8001f32:	4413      	add	r3, r2
 8001f34:	2214      	movs	r2, #20
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f007 fa01 	bl	8009340 <memset>
    _NumTasks--;
 8001f3e:	4b42      	ldr	r3, [pc, #264]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	4a40      	ldr	r2, [pc, #256]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e07b      	b.n	8002042 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8001f4a:	4b3f      	ldr	r3, [pc, #252]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d276      	bcs.n	8002042 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	1e5a      	subs	r2, r3, #1
 8001f5a:	493c      	ldr	r1, [pc, #240]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	6819      	ldr	r1, [r3, #0]
 8001f68:	4838      	ldr	r0, [pc, #224]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4403      	add	r3, r0
 8001f76:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8001f78:	4b33      	ldr	r3, [pc, #204]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	4933      	ldr	r1, [pc, #204]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	6819      	ldr	r1, [r3, #0]
 8001f8e:	482f      	ldr	r0, [pc, #188]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4403      	add	r3, r0
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8001fa0:	4b29      	ldr	r3, [pc, #164]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	4929      	ldr	r1, [pc, #164]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	4825      	ldr	r0, [pc, #148]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4403      	add	r3, r0
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	1e5a      	subs	r2, r3, #1
 8001fce:	491f      	ldr	r1, [pc, #124]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	330c      	adds	r3, #12
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	481b      	ldr	r0, [pc, #108]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4403      	add	r3, r0
 8001fec:	330c      	adds	r3, #12
 8001fee:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	1e5a      	subs	r2, r3, #1
 8001ff6:	4915      	ldr	r1, [pc, #84]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	3310      	adds	r3, #16
 8002004:	6819      	ldr	r1, [r3, #0]
 8002006:	4811      	ldr	r0, [pc, #68]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4403      	add	r3, r0
 8002014:	3310      	adds	r3, #16
 8002016:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <SYSVIEW_DeleteTask+0x174>)
 8002028:	4413      	add	r3, r2
 800202a:	2214      	movs	r2, #20
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f007 f986 	bl	8009340 <memset>
    _NumTasks--;
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3b01      	subs	r3, #1
 800203a:	4a03      	ldr	r2, [pc, #12]	; (8002048 <SYSVIEW_DeleteTask+0x170>)
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e000      	b.n	8002042 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8002040:	bf00      	nop
  }
}
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	24007230 	.word	0x24007230
 800204c:	24007190 	.word	0x24007190

08002050 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	2214      	movs	r2, #20
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f007 f96a 	bl	8009340 <memset>
  TaskInfo.TaskID     = TaskID;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800207c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4618      	mov	r0, r3
 8002086:	f001 fe6d 	bl	8003d64 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800209e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db0b      	blt.n	80020be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4907      	ldr	r1, [pc, #28]	; (80020cc <__NVIC_EnableIRQ+0x38>)
 80020ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2001      	movs	r0, #1
 80020b6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db0a      	blt.n	80020fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	490c      	ldr	r1, [pc, #48]	; (800211c <__NVIC_SetPriority+0x4c>)
 80020ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ee:	0112      	lsls	r2, r2, #4
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f8:	e00a      	b.n	8002110 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4908      	ldr	r1, [pc, #32]	; (8002120 <__NVIC_SetPriority+0x50>)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	3b04      	subs	r3, #4
 8002108:	0112      	lsls	r2, r2, #4
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	440b      	add	r3, r1
 800210e:	761a      	strb	r2, [r3, #24]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000e100 	.word	0xe000e100
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800212a:	f002 fa81 	bl	8004630 <SEGGER_SYSVIEW_IsStarted>
 800212e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8002136:	f001 fc99 	bl	8003a6c <SEGGER_SYSVIEW_Start>
  }
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <_cbOnUARTRx+0x3c>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b03      	cmp	r3, #3
 8002154:	d806      	bhi.n	8002164 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <_cbOnUARTRx+0x3c>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <_cbOnUARTRx+0x3c>)
 8002160:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002162:	e009      	b.n	8002178 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002164:	f7ff ffde 	bl	8002124 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <_cbOnUARTRx+0x3c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	1dfb      	adds	r3, r7, #7
 8002170:	2201      	movs	r2, #1
 8002172:	4619      	mov	r1, r3
 8002174:	f000 fb9e 	bl	80028b4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002178:	bf00      	nop
}
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	24000008 	.word	0x24000008

08002184 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <_cbOnUARTTx+0x5c>)
 800218e:	785b      	ldrb	r3, [r3, #1]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d80f      	bhi.n	80021b4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <_cbOnUARTTx+0x5c>)
 8002196:	785b      	ldrb	r3, [r3, #1]
 8002198:	461a      	mov	r2, r3
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <_cbOnUARTTx+0x60>)
 800219c:	5c9a      	ldrb	r2, [r3, r2]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <_cbOnUARTTx+0x5c>)
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <_cbOnUARTTx+0x5c>)
 80021ac:	705a      	strb	r2, [r3, #1]
    r = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
    goto Done;
 80021b2:	e00f      	b.n	80021d4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <_cbOnUARTTx+0x5c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fa1d 	bl	80025fc <SEGGER_RTT_ReadUpBufferNoLock>
 80021c2:	4603      	mov	r3, r0
 80021c4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da02      	bge.n	80021d2 <_cbOnUARTTx+0x4e>
    r = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e000      	b.n	80021d4 <_cbOnUARTTx+0x50>
  }
Done:
 80021d2:	bf00      	nop
  return r;
 80021d4:	68fb      	ldr	r3, [r7, #12]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	24000008 	.word	0x24000008
 80021e4:	0800951c 	.word	0x0800951c

080021e8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <SEGGER_UART_init+0x1c>)
 80021f2:	4905      	ldr	r1, [pc, #20]	; (8002208 <SEGGER_UART_init+0x20>)
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f865 	bl	80022c4 <HIF_UART_Init>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	08002145 	.word	0x08002145
 8002208:	08002185 	.word	0x08002185

0800220c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <USART2_IRQHandler+0x80>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d011      	beq.n	8002246 <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <USART2_IRQHandler+0x84>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 030b 	and.w	r3, r3, #11
 8002230:	2b00      	cmp	r3, #0
 8002232:	d108      	bne.n	8002246 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <USART2_IRQHandler+0x88>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800223c:	4b15      	ldr	r3, [pc, #84]	; (8002294 <USART2_IRQHandler+0x88>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	79fa      	ldrb	r2, [r7, #7]
 8002242:	4610      	mov	r0, r2
 8002244:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01a      	beq.n	8002286 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <USART2_IRQHandler+0x8c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <USART2_IRQHandler+0x8c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	1dfa      	adds	r2, r7, #7
 800225e:	4610      	mov	r0, r2
 8002260:	4798      	blx	r3
 8002262:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <USART2_IRQHandler+0x90>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <USART2_IRQHandler+0x90>)
 8002270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e006      	b.n	8002286 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <USART2_IRQHandler+0x80>)
 800227a:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 800227c:	79fa      	ldrb	r2, [r7, #7]
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <USART2_IRQHandler+0x94>)
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e000      	b.n	8002286 <USART2_IRQHandler+0x7a>
      return;
 8002284:	bf00      	nop
    }
  }
}
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	4000441c 	.word	0x4000441c
 8002290:	40004424 	.word	0x40004424
 8002294:	24007234 	.word	0x24007234
 8002298:	24007238 	.word	0x24007238
 800229c:	40004400 	.word	0x40004400
 80022a0:	40004428 	.word	0x40004428

080022a4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80022ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40004400 	.word	0x40004400

080022c4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80022d0:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HIF_UART_Init+0xc8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2d      	ldr	r2, [pc, #180]	; (800238c <HIF_UART_Init+0xc8>)
 80022d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022da:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 80022dc:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HIF_UART_Init+0xcc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <HIF_UART_Init+0xcc>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80022e8:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <HIF_UART_Init+0xd0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022f4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80022fc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80022fe:	4a25      	ldr	r2, [pc, #148]	; (8002394 <HIF_UART_Init+0xd0>)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HIF_UART_Init+0xd4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002310:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002318:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800231a:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <HIF_UART_Init+0xd4>)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HIF_UART_Init+0xd8>)
 8002322:	f248 022d 	movw	r2, #32813	; 0x802d
 8002326:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HIF_UART_Init+0xdc>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HIF_UART_Init+0xe0>)
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800233a:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <HIF_UART_Init+0xe4>)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	3301      	adds	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002352:	d302      	bcc.n	800235a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002354:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002358:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	4a11      	ldr	r2, [pc, #68]	; (80023ac <HIF_UART_Init+0xe8>)
 8002366:	b29b      	uxth	r3, r3
 8002368:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800236a:	4a11      	ldr	r2, [pc, #68]	; (80023b0 <HIF_UART_Init+0xec>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8002370:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HIF_UART_Init+0xf0>)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8002376:	2106      	movs	r1, #6
 8002378:	2026      	movs	r0, #38	; 0x26
 800237a:	f7ff fea9 	bl	80020d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800237e:	2026      	movs	r0, #38	; 0x26
 8002380:	f7ff fe88 	bl	8002094 <__NVIC_EnableIRQ>
}
 8002384:	bf00      	nop
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	580244e8 	.word	0x580244e8
 8002390:	580244e0 	.word	0x580244e0
 8002394:	58020020 	.word	0x58020020
 8002398:	58020000 	.word	0x58020000
 800239c:	40004400 	.word	0x40004400
 80023a0:	40004404 	.word	0x40004404
 80023a4:	40004408 	.word	0x40004408
 80023a8:	0e4e1c00 	.word	0x0e4e1c00
 80023ac:	4000440c 	.word	0x4000440c
 80023b0:	24007234 	.word	0x24007234
 80023b4:	24007238 	.word	0x24007238

080023b8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80023be:	4b26      	ldr	r3, [pc, #152]	; (8002458 <_DoInit+0xa0>)
 80023c0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80023c2:	22a8      	movs	r2, #168	; 0xa8
 80023c4:	2100      	movs	r1, #0
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	f006 ffba 	bl	8009340 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2203      	movs	r2, #3
 80023d0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2203      	movs	r2, #3
 80023d6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4a20      	ldr	r2, [pc, #128]	; (800245c <_DoInit+0xa4>)
 80023dc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <_DoInit+0xa8>)
 80023e2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ea:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	4a16      	ldr	r2, [pc, #88]	; (800245c <_DoInit+0xa4>)
 8002402:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4a17      	ldr	r2, [pc, #92]	; (8002464 <_DoInit+0xac>)
 8002408:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2210      	movs	r2, #16
 800240e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2200      	movs	r2, #0
 800241a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002422:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	e00c      	b.n	8002446 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f1c3 030f 	rsb	r3, r3, #15
 8002432:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <_DoInit+0xb0>)
 8002434:	5cd1      	ldrb	r1, [r2, r3]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	460a      	mov	r2, r1
 800243e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3301      	adds	r3, #1
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b0f      	cmp	r3, #15
 800244a:	d9ef      	bls.n	800242c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800244c:	f3bf 8f5f 	dmb	sy
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2400723c 	.word	0x2400723c
 800245c:	08009408 	.word	0x08009408
 8002460:	240072e4 	.word	0x240072e4
 8002464:	240076e4 	.word	0x240076e4
 8002468:	08009520 	.word	0x08009520

0800246c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	429a      	cmp	r2, r3
 800248e:	d905      	bls.n	800249c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	e007      	b.n	80024ac <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	1acb      	subs	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3b01      	subs	r3, #1
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b6:	4293      	cmp	r3, r2
 80024b8:	bf28      	it	cs
 80024ba:	4613      	movcs	r3, r2
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80024be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4293      	cmp	r3, r2
 80024c4:	bf28      	it	cs
 80024c6:	4613      	movcs	r3, r2
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80024d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	6978      	ldr	r0, [r7, #20]
 80024da:	f006 ff23 	bl	8009324 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80024de:	6a3a      	ldr	r2, [r7, #32]
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	4413      	add	r3, r2
 80024e4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	4413      	add	r3, r2
 80024ec:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	4413      	add	r3, r2
 80024fc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	429a      	cmp	r2, r3
 8002506:	d101      	bne.n	800250c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800250c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1b2      	bne.n	8002482 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800251c:	6a3b      	ldr	r3, [r7, #32]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3728      	adds	r7, #40	; 0x28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002526:	b580      	push	{r7, lr}
 8002528:	b088      	sub	sp, #32
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d911      	bls.n	800256e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	4413      	add	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	6938      	ldr	r0, [r7, #16]
 800255a:	f006 fee3 	bl	8009324 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800255e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	441a      	add	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800256c:	e01f      	b.n	80025ae <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	6938      	ldr	r0, [r7, #16]
 8002582:	f006 fecf 	bl	8009324 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4413      	add	r3, r2
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4619      	mov	r1, r3
 800259e:	6938      	ldr	r0, [r7, #16]
 80025a0:	f006 fec0 	bl	8009324 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80025a4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	60da      	str	r2, [r3, #12]
}
 80025ae:	bf00      	nop
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80025b6:	b480      	push	{r7}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d808      	bhi.n	80025e4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad2      	subs	r2, r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	3b01      	subs	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	e004      	b.n	80025ee <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
  }
  return r;
 80025ee:	697b      	ldr	r3, [r7, #20]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08c      	sub	sp, #48	; 0x30
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8002608:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800260a:	623b      	str	r3, [r7, #32]
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8002616:	f7ff fecf 	bl	80023b8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4a37      	ldr	r2, [pc, #220]	; (8002704 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002628:	4413      	add	r3, r2
 800262a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800263c:	2300      	movs	r3, #0
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	429a      	cmp	r2, r3
 8002646:	d92b      	bls.n	80026a0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4293      	cmp	r3, r2
 8002658:	bf28      	it	cs
 800265a:	4613      	movcs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	4413      	add	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	6939      	ldr	r1, [r7, #16]
 800266c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800266e:	f006 fe59 	bl	8009324 <memcpy>
    NumBytesRead += NumBytesRem;
 8002672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	4413      	add	r3, r2
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800267a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	4413      	add	r3, r2
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800268a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4413      	add	r3, r2
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002698:	429a      	cmp	r2, r3
 800269a:	d101      	bne.n	80026a0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4293      	cmp	r3, r2
 80026ae:	bf28      	it	cs
 80026b0:	4613      	movcs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d019      	beq.n	80026ee <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	4413      	add	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	6939      	ldr	r1, [r7, #16]
 80026c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026ca:	f006 fe2b 	bl	8009324 <memcpy>
    NumBytesRead += NumBytesRem;
 80026ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	4413      	add	r3, r2
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	4413      	add	r3, r2
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80026e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	4413      	add	r3, r2
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3730      	adds	r7, #48	; 0x30
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2400723c 	.word	0x2400723c

08002708 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	; 0x30
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002714:	4b3e      	ldr	r3, [pc, #248]	; (8002810 <SEGGER_RTT_ReadNoLock+0x108>)
 8002716:	623b      	str	r3, [r7, #32]
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <SEGGER_RTT_ReadNoLock+0x1e>
 8002722:	f7ff fe49 	bl	80023b8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	3360      	adds	r3, #96	; 0x60
 8002732:	4a37      	ldr	r2, [pc, #220]	; (8002810 <SEGGER_RTT_ReadNoLock+0x108>)
 8002734:	4413      	add	r3, r2
 8002736:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800274c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	429a      	cmp	r2, r3
 8002752:	d92b      	bls.n	80027ac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4293      	cmp	r3, r2
 8002764:	bf28      	it	cs
 8002766:	4613      	movcs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	4413      	add	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	6939      	ldr	r1, [r7, #16]
 8002778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800277a:	f006 fdd3 	bl	8009324 <memcpy>
    NumBytesRead += NumBytesRem;
 800277e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	4413      	add	r3, r2
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	4413      	add	r3, r2
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	4413      	add	r3, r2
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d101      	bne.n	80027ac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4293      	cmp	r3, r2
 80027ba:	bf28      	it	cs
 80027bc:	4613      	movcs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d019      	beq.n	80027fa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	4413      	add	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	6939      	ldr	r1, [r7, #16]
 80027d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027d6:	f006 fda5 	bl	8009324 <memcpy>
    NumBytesRead += NumBytesRem;
 80027da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	4413      	add	r3, r2
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	4413      	add	r3, r2
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80027f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	4413      	add	r3, r2
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002804:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002808:	4618      	mov	r0, r3
 800280a:	3730      	adds	r7, #48	; 0x30
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	2400723c 	.word	0x2400723c

08002814 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	3360      	adds	r3, #96	; 0x60
 8002830:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8002832:	4413      	add	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d029      	beq.n	8002892 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800283e:	2b02      	cmp	r3, #2
 8002840:	d82e      	bhi.n	80028a0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8002846:	2b01      	cmp	r3, #1
 8002848:	d013      	beq.n	8002872 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800284a:	e029      	b.n	80028a0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800284c:	6978      	ldr	r0, [r7, #20]
 800284e:	f7ff feb2 	bl	80025b6 <_GetAvailWriteSpace>
 8002852:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	d202      	bcs.n	8002862 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002860:	e021      	b.n	80028a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	69b9      	ldr	r1, [r7, #24]
 800286a:	6978      	ldr	r0, [r7, #20]
 800286c:	f7ff fe5b 	bl	8002526 <_WriteNoCheck>
    break;
 8002870:	e019      	b.n	80028a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff fe9f 	bl	80025b6 <_GetAvailWriteSpace>
 8002878:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4293      	cmp	r3, r2
 8002880:	bf28      	it	cs
 8002882:	4613      	movcs	r3, r2
 8002884:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	69b9      	ldr	r1, [r7, #24]
 800288a:	6978      	ldr	r0, [r7, #20]
 800288c:	f7ff fe4b 	bl	8002526 <_WriteNoCheck>
    break;
 8002890:	e009      	b.n	80028a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	69b9      	ldr	r1, [r7, #24]
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f7ff fde8 	bl	800246c <_WriteBlocking>
 800289c:	61f8      	str	r0, [r7, #28]
    break;
 800289e:	e002      	b.n	80028a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61fb      	str	r3, [r7, #28]
    break;
 80028a4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80028a6:	69fb      	ldr	r3, [r7, #28]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	2400723c 	.word	0x2400723c

080028b4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <SEGGER_RTT_WriteDownBuffer+0x48>)
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80028ce:	f7ff fd73 	bl	80023b8 <_DoInit>
  SEGGER_RTT_LOCK();
 80028d2:	f3ef 8311 	mrs	r3, BASEPRI
 80028d6:	f04f 0120 	mov.w	r1, #32
 80028da:	f381 8811 	msr	BASEPRI, r1
 80028de:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff ff95 	bl	8002814 <SEGGER_RTT_WriteDownBufferNoLock>
 80028ea:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80028f2:	697b      	ldr	r3, [r7, #20]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	2400723c 	.word	0x2400723c

08002900 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <SEGGER_RTT_AllocUpBuffer+0x20>
 800291c:	f7ff fd4c 	bl	80023b8 <_DoInit>
  SEGGER_RTT_LOCK();
 8002920:	f3ef 8311 	mrs	r3, BASEPRI
 8002924:	f04f 0120 	mov.w	r1, #32
 8002928:	f381 8811 	msr	BASEPRI, r1
 800292c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800292e:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002930:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002936:	6939      	ldr	r1, [r7, #16]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	3304      	adds	r3, #4
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3301      	adds	r3, #1
 8002952:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	429a      	cmp	r2, r3
 800295c:	dbeb      	blt.n	8002936 <SEGGER_RTT_AllocUpBuffer+0x36>
 800295e:	e000      	b.n	8002962 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002960:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	429a      	cmp	r2, r3
 800296a:	da3f      	bge.n	80029ec <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800296c:	6939      	ldr	r1, [r7, #16]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002980:	6939      	ldr	r1, [r7, #16]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	3304      	adds	r3, #4
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002996:	6939      	ldr	r1, [r7, #16]
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	3320      	adds	r3, #32
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80029aa:	6939      	ldr	r1, [r7, #16]
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	4613      	mov	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	3328      	adds	r3, #40	; 0x28
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80029be:	6939      	ldr	r1, [r7, #16]
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	440b      	add	r3, r1
 80029cc:	3324      	adds	r3, #36	; 0x24
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80029d2:	6939      	ldr	r1, [r7, #16]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	332c      	adds	r3, #44	; 0x2c
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80029e6:	f3bf 8f5f 	dmb	sy
 80029ea:	e002      	b.n	80029f2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
 80029f0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80029f8:	69fb      	ldr	r3, [r7, #28]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2400723c 	.word	0x2400723c

08002a08 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002a16:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002a18:	623b      	str	r3, [r7, #32]
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002a24:	f7ff fcc8 	bl	80023b8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002a2a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d82c      	bhi.n	8002a8c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8002a32:	f3ef 8311 	mrs	r3, BASEPRI
 8002a36:	f04f 0120 	mov.w	r1, #32
 8002a3a:	f381 8811 	msr	BASEPRI, r1
 8002a3e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	3360      	adds	r3, #96	; 0x60
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00e      	beq.n	8002a76 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a7a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002a7c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	e002      	b.n	8002a92 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3728      	adds	r7, #40	; 0x28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	2400723c 	.word	0x2400723c

08002aa0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00f      	beq.n	8002ad6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002ab6:	e002      	b.n	8002abe <_EncodeStr+0x1e>
      Len++;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	3301      	adds	r3, #1
 8002abc:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f6      	bne.n	8002ab8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d901      	bls.n	8002ad6 <_EncodeStr+0x36>
      Len = Limit;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2bfe      	cmp	r3, #254	; 0xfe
 8002ada:	d806      	bhi.n	8002aea <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	60fa      	str	r2, [r7, #12]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e011      	b.n	8002b0e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	60fa      	str	r2, [r7, #12]
 8002af0:	22ff      	movs	r2, #255	; 0xff
 8002af2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	60fa      	str	r2, [r7, #12]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	0a19      	lsrs	r1, r3, #8
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	60fa      	str	r2, [r7, #12]
 8002b0a:	b2ca      	uxtb	r2, r1
 8002b0c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002b12:	e00a      	b.n	8002b2a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	1c53      	adds	r3, r2, #1
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1c59      	adds	r1, r3, #1
 8002b1e:	60f9      	str	r1, [r7, #12]
 8002b20:	7812      	ldrb	r2, [r2, #0]
 8002b22:	701a      	strb	r2, [r3, #0]
    n++;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3301      	adds	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d3f0      	bcc.n	8002b14 <_EncodeStr+0x74>
  }
  return pPayload;
 8002b32:	68fb      	ldr	r3, [r7, #12]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3307      	adds	r3, #7
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002b5e:	4b35      	ldr	r3, [pc, #212]	; (8002c34 <_HandleIncomingPacket+0xdc>)
 8002b60:	7e1b      	ldrb	r3, [r3, #24]
 8002b62:	4618      	mov	r0, r3
 8002b64:	1cfb      	adds	r3, r7, #3
 8002b66:	2201      	movs	r2, #1
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f7ff fdcd 	bl	8002708 <SEGGER_RTT_ReadNoLock>
 8002b6e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d052      	beq.n	8002c1c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	2b80      	cmp	r3, #128	; 0x80
 8002b7a:	d031      	beq.n	8002be0 <_HandleIncomingPacket+0x88>
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	dc40      	bgt.n	8002c02 <_HandleIncomingPacket+0xaa>
 8002b80:	2b07      	cmp	r3, #7
 8002b82:	dc15      	bgt.n	8002bb0 <_HandleIncomingPacket+0x58>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	dd3c      	ble.n	8002c02 <_HandleIncomingPacket+0xaa>
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d839      	bhi.n	8002c02 <_HandleIncomingPacket+0xaa>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <_HandleIncomingPacket+0x3c>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002bb7 	.word	0x08002bb7
 8002b98:	08002bbd 	.word	0x08002bbd
 8002b9c:	08002bc3 	.word	0x08002bc3
 8002ba0:	08002bc9 	.word	0x08002bc9
 8002ba4:	08002bcf 	.word	0x08002bcf
 8002ba8:	08002bd5 	.word	0x08002bd5
 8002bac:	08002bdb 	.word	0x08002bdb
 8002bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8002bb2:	d035      	beq.n	8002c20 <_HandleIncomingPacket+0xc8>
 8002bb4:	e025      	b.n	8002c02 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002bb6:	f000 ff59 	bl	8003a6c <SEGGER_SYSVIEW_Start>
      break;
 8002bba:	e036      	b.n	8002c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002bbc:	f001 f812 	bl	8003be4 <SEGGER_SYSVIEW_Stop>
      break;
 8002bc0:	e033      	b.n	8002c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002bc2:	f001 f9eb 	bl	8003f9c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002bc6:	e030      	b.n	8002c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002bc8:	f001 f9b0 	bl	8003f2c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002bcc:	e02d      	b.n	8002c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002bce:	f001 f82f 	bl	8003c30 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002bd2:	e02a      	b.n	8002c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002bd4:	f001 fc7e 	bl	80044d4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002bd8:	e027      	b.n	8002c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002bda:	f001 fc5d 	bl	8004498 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002bde:	e024      	b.n	8002c2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <_HandleIncomingPacket+0xdc>)
 8002be2:	7e1b      	ldrb	r3, [r3, #24]
 8002be4:	4618      	mov	r0, r3
 8002be6:	1cfb      	adds	r3, r7, #3
 8002be8:	2201      	movs	r2, #1
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7ff fd8c 	bl	8002708 <SEGGER_RTT_ReadNoLock>
 8002bf0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d015      	beq.n	8002c24 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 fbcc 	bl	8004398 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002c00:	e010      	b.n	8002c24 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da0e      	bge.n	8002c28 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <_HandleIncomingPacket+0xdc>)
 8002c0c:	7e1b      	ldrb	r3, [r3, #24]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	1cfb      	adds	r3, r7, #3
 8002c12:	2201      	movs	r2, #1
 8002c14:	4619      	mov	r1, r3
 8002c16:	f7ff fd77 	bl	8002708 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002c1a:	e005      	b.n	8002c28 <_HandleIncomingPacket+0xd0>
    }
  }
 8002c1c:	bf00      	nop
 8002c1e:	e004      	b.n	8002c2a <_HandleIncomingPacket+0xd2>
      break;
 8002c20:	bf00      	nop
 8002c22:	e002      	b.n	8002c2a <_HandleIncomingPacket+0xd2>
      break;
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <_HandleIncomingPacket+0xd2>
      break;
 8002c28:	bf00      	nop
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2407f2fc 	.word	0x2407f2fc

08002c38 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08c      	sub	sp, #48	; 0x30
 8002c3c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002c3e:	2301      	movs	r3, #1
 8002c40:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	3301      	adds	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4c:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <_TrySendOverflowPacket+0xe0>)
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c52:	e00b      	b.n	8002c6c <_TrySendOverflowPacket+0x34>
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	1c59      	adds	r1, r3, #1
 8002c5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	09db      	lsrs	r3, r3, #7
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c70:	d8f0      	bhi.n	8002c54 <_TrySendOverflowPacket+0x1c>
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <_TrySendOverflowPacket+0xe4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002c88:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <_TrySendOverflowPacket+0xe0>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	623b      	str	r3, [r7, #32]
 8002c9a:	e00b      	b.n	8002cb4 <_TrySendOverflowPacket+0x7c>
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	1c59      	adds	r1, r3, #1
 8002ca4:	6279      	str	r1, [r7, #36]	; 0x24
 8002ca6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	09db      	lsrs	r3, r3, #7
 8002cb2:	623b      	str	r3, [r7, #32]
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8002cb8:	d8f0      	bhi.n	8002c9c <_TrySendOverflowPacket+0x64>
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	627a      	str	r2, [r7, #36]	; 0x24
 8002cc0:	6a3a      	ldr	r2, [r7, #32]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8002cca:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <_TrySendOverflowPacket+0xe0>)
 8002ccc:	785b      	ldrb	r3, [r3, #1]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7fd fb00 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002ce4:	f7ff fade 	bl	80022a4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <_TrySendOverflowPacket+0xe0>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <_TrySendOverflowPacket+0xe0>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <_TrySendOverflowPacket+0xe0>)
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e004      	b.n	8002d0c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <_TrySendOverflowPacket+0xe0>)
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	3301      	adds	r3, #1
 8002d08:	4a03      	ldr	r2, [pc, #12]	; (8002d18 <_TrySendOverflowPacket+0xe0>)
 8002d0a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002d0c:	693b      	ldr	r3, [r7, #16]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3730      	adds	r7, #48	; 0x30
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2407f2fc 	.word	0x2407f2fc
 8002d1c:	e0001004 	.word	0xe0001004

08002d20 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002d2c:	4b96      	ldr	r3, [pc, #600]	; (8002f88 <_SendPacket+0x268>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d010      	beq.n	8002d56 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002d34:	4b94      	ldr	r3, [pc, #592]	; (8002f88 <_SendPacket+0x268>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8130 	beq.w	8002f9e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002d3e:	4b92      	ldr	r3, [pc, #584]	; (8002f88 <_SendPacket+0x268>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d109      	bne.n	8002d5a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002d46:	f7ff ff77 	bl	8002c38 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002d4a:	4b8f      	ldr	r3, [pc, #572]	; (8002f88 <_SendPacket+0x268>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	f040 8127 	bne.w	8002fa2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8002d54:	e001      	b.n	8002d5a <_SendPacket+0x3a>
    goto Send;
 8002d56:	bf00      	nop
 8002d58:	e000      	b.n	8002d5c <_SendPacket+0x3c>
Send:
 8002d5a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b1f      	cmp	r3, #31
 8002d60:	d809      	bhi.n	8002d76 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002d62:	4b89      	ldr	r3, [pc, #548]	; (8002f88 <_SendPacket+0x268>)
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f040 8118 	bne.w	8002fa6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b17      	cmp	r3, #23
 8002d7a:	d807      	bhi.n	8002d8c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e0c4      	b.n	8002f16 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b7f      	cmp	r3, #127	; 0x7f
 8002d98:	d912      	bls.n	8002dc0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	09da      	lsrs	r2, r3, #7
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	3a01      	subs	r2, #1
 8002db2:	60fa      	str	r2, [r7, #12]
 8002db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e006      	b.n	8002dce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b7e      	cmp	r3, #126	; 0x7e
 8002dd2:	d807      	bhi.n	8002de4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e098      	b.n	8002f16 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dea:	d212      	bcs.n	8002e12 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	09da      	lsrs	r2, r3, #7
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	3a01      	subs	r2, #1
 8002e04:	60fa      	str	r2, [r7, #12]
 8002e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e081      	b.n	8002f16 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e18:	d21d      	bcs.n	8002e56 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0b9a      	lsrs	r2, r3, #14
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	09db      	lsrs	r3, r3, #7
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	3a01      	subs	r2, #1
 8002e34:	60fa      	str	r2, [r7, #12]
 8002e36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	3a01      	subs	r2, #1
 8002e48:	60fa      	str	r2, [r7, #12]
 8002e4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	e05f      	b.n	8002f16 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e5c:	d228      	bcs.n	8002eb0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	0d5a      	lsrs	r2, r3, #21
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	0b9b      	lsrs	r3, r3, #14
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	3a01      	subs	r2, #1
 8002e78:	60fa      	str	r2, [r7, #12]
 8002e7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	09db      	lsrs	r3, r3, #7
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	60fa      	str	r2, [r7, #12]
 8002e90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	60fa      	str	r2, [r7, #12]
 8002ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e032      	b.n	8002f16 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0f1a      	lsrs	r2, r3, #28
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0d5b      	lsrs	r3, r3, #21
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	60fa      	str	r2, [r7, #12]
 8002ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0b9b      	lsrs	r3, r3, #14
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	3a01      	subs	r2, #1
 8002ee0:	60fa      	str	r2, [r7, #12]
 8002ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	09db      	lsrs	r3, r3, #7
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	3a01      	subs	r2, #1
 8002ef6:	60fa      	str	r2, [r7, #12]
 8002ef8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	3a01      	subs	r2, #1
 8002f0a:	60fa      	str	r2, [r7, #12]
 8002f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002f16:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <_SendPacket+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <_SendPacket+0x268>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	623b      	str	r3, [r7, #32]
 8002f2e:	e00b      	b.n	8002f48 <_SendPacket+0x228>
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	1c59      	adds	r1, r3, #1
 8002f38:	6279      	str	r1, [r7, #36]	; 0x24
 8002f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	09db      	lsrs	r3, r3, #7
 8002f46:	623b      	str	r3, [r7, #32]
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f4c:	d8f0      	bhi.n	8002f30 <_SendPacket+0x210>
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	627a      	str	r2, [r7, #36]	; 0x24
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <_SendPacket+0x268>)
 8002f60:	785b      	ldrb	r3, [r3, #1]
 8002f62:	4618      	mov	r0, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68f9      	ldr	r1, [r7, #12]
 8002f6e:	f7fd f9b7 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002f72:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8002f74:	f7ff f996 	bl	80022a4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002f7e:	4a02      	ldr	r2, [pc, #8]	; (8002f88 <_SendPacket+0x268>)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	60d3      	str	r3, [r2, #12]
 8002f84:	e010      	b.n	8002fa8 <_SendPacket+0x288>
 8002f86:	bf00      	nop
 8002f88:	2407f2fc 	.word	0x2407f2fc
 8002f8c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <_SendPacket+0x2d8>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <_SendPacket+0x2d8>)
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e004      	b.n	8002fa8 <_SendPacket+0x288>
    goto SendDone;
 8002f9e:	bf00      	nop
 8002fa0:	e002      	b.n	8002fa8 <_SendPacket+0x288>
      goto SendDone;
 8002fa2:	bf00      	nop
 8002fa4:	e000      	b.n	8002fa8 <_SendPacket+0x288>
      goto SendDone;
 8002fa6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <_SendPacket+0x2d8>)
 8002faa:	7e1b      	ldrb	r3, [r3, #24]
 8002fac:	4619      	mov	r1, r3
 8002fae:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <_SendPacket+0x2dc>)
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	440b      	add	r3, r1
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	336c      	adds	r3, #108	; 0x6c
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <_SendPacket+0x2d8>)
 8002fc0:	7e1b      	ldrb	r3, [r3, #24]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	490d      	ldr	r1, [pc, #52]	; (8002ffc <_SendPacket+0x2dc>)
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4403      	add	r3, r0
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	440b      	add	r3, r1
 8002fd0:	3370      	adds	r3, #112	; 0x70
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d00b      	beq.n	8002ff0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002fd8:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <_SendPacket+0x2d8>)
 8002fda:	789b      	ldrb	r3, [r3, #2]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <_SendPacket+0x2d8>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002fe6:	f7ff fdb7 	bl	8002b58 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002fea:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <_SendPacket+0x2d8>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	2407f2fc 	.word	0x2407f2fc
 8002ffc:	2400723c 	.word	0x2400723c

08003000 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3301      	adds	r3, #1
 8003016:	2b80      	cmp	r3, #128	; 0x80
 8003018:	d80a      	bhi.n	8003030 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6051      	str	r1, [r2, #4]
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d15a      	bne.n	80030ee <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	623b      	str	r3, [r7, #32]
 8003058:	e00b      	b.n	8003072 <_StoreChar+0x72>
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	1c59      	adds	r1, r3, #1
 8003062:	6279      	str	r1, [r7, #36]	; 0x24
 8003064:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	09db      	lsrs	r3, r3, #7
 8003070:	623b      	str	r3, [r7, #32]
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2b7f      	cmp	r3, #127	; 0x7f
 8003076:	d8f0      	bhi.n	800305a <_StoreChar+0x5a>
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	627a      	str	r2, [r7, #36]	; 0x24
 800307e:	6a3a      	ldr	r2, [r7, #32]
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	61fb      	str	r3, [r7, #28]
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e00b      	b.n	80030aa <_StoreChar+0xaa>
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	1c59      	adds	r1, r3, #1
 800309a:	61f9      	str	r1, [r7, #28]
 800309c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	09db      	lsrs	r3, r3, #7
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b7f      	cmp	r3, #127	; 0x7f
 80030ae:	d8f0      	bhi.n	8003092 <_StoreChar+0x92>
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	61fa      	str	r2, [r7, #28]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	221a      	movs	r2, #26
 80030c6:	6939      	ldr	r1, [r7, #16]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fe29 	bl	8002d20 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fd34 	bl	8002b40 <_PreparePacket>
 80030d8:	4602      	mov	r2, r0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	611a      	str	r2, [r3, #16]
  }
}
 80030ee:	bf00      	nop
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800310a:	2301      	movs	r3, #1
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800310e:	2301      	movs	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003112:	e007      	b.n	8003124 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	623b      	str	r3, [r7, #32]
    Width++;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3301      	adds	r3, #1
 8003122:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003124:	6a3a      	ldr	r2, [r7, #32]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	429a      	cmp	r2, r3
 800312a:	d2f3      	bcs.n	8003114 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	429a      	cmp	r2, r3
 8003132:	d901      	bls.n	8003138 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11f      	bne.n	8003182 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01c      	beq.n	8003182 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <_PrintUnsigned+0x66>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <_PrintUnsigned+0x66>
        c = '0';
 8003158:	2330      	movs	r3, #48	; 0x30
 800315a:	76fb      	strb	r3, [r7, #27]
 800315c:	e001      	b.n	8003162 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800315e:	2320      	movs	r3, #32
 8003160:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003162:	e007      	b.n	8003174 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	3b01      	subs	r3, #1
 8003168:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800316a:	7efb      	ldrb	r3, [r7, #27]
 800316c:	4619      	mov	r1, r3
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff ff46 	bl	8003000 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <_PrintUnsigned+0x8a>
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	429a      	cmp	r2, r3
 8003180:	d3f0      	bcc.n	8003164 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d903      	bls.n	8003190 <_PrintUnsigned+0x98>
      NumDigits--;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	3b01      	subs	r3, #1
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	e009      	b.n	80031a4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d200      	bcs.n	80031a4 <_PrintUnsigned+0xac>
        break;
 80031a2:	e005      	b.n	80031b0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80031ae:	e7e8      	b.n	8003182 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80031c8:	4a15      	ldr	r2, [pc, #84]	; (8003220 <_PrintUnsigned+0x128>)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	4413      	add	r3, r2
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	4619      	mov	r1, r3
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff ff14 	bl	8003000 <_StoreChar>
    Digit /= Base;
 80031d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e3      	bne.n	80031b0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80031e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d011      	beq.n	8003216 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00e      	beq.n	8003216 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80031f8:	e006      	b.n	8003208 <_PrintUnsigned+0x110>
        FieldWidth--;
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	3b01      	subs	r3, #1
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8003200:	2120      	movs	r1, #32
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f7ff fefc 	bl	8003000 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <_PrintUnsigned+0x11e>
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	429a      	cmp	r2, r3
 8003214:	d3f1      	bcc.n	80031fa <_PrintUnsigned+0x102>
      }
    }
  }
}
 8003216:	bf00      	nop
 8003218:	3728      	adds	r7, #40	; 0x28
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	08009540 	.word	0x08009540

08003224 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	bfb8      	it	lt
 8003238:	425b      	neglt	r3, r3
 800323a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800323c:	2301      	movs	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003240:	e007      	b.n	8003252 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	fb92 f3f3 	sdiv	r3, r2, r3
 800324a:	613b      	str	r3, [r7, #16]
    Width++;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	3301      	adds	r3, #1
 8003250:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	429a      	cmp	r2, r3
 8003258:	daf3      	bge.n	8003242 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	429a      	cmp	r2, r3
 8003260:	d901      	bls.n	8003266 <_PrintInt+0x42>
    Width = NumDigits;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <_PrintInt+0x5e>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	db04      	blt.n	800327c <_PrintInt+0x58>
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <_PrintInt+0x5e>
    FieldWidth--;
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	3b01      	subs	r3, #1
 8003280:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <_PrintInt+0x6e>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <_PrintInt+0x9c>
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d111      	bne.n	80032c0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00e      	beq.n	80032c0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80032a2:	e006      	b.n	80032b2 <_PrintInt+0x8e>
        FieldWidth--;
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80032aa:	2120      	movs	r1, #32
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7ff fea7 	bl	8003000 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <_PrintInt+0x9c>
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d3f1      	bcc.n	80032a4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da07      	bge.n	80032d6 <_PrintInt+0xb2>
    v = -v;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	425b      	negs	r3, r3
 80032ca:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80032cc:	212d      	movs	r1, #45	; 0x2d
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff fe96 	bl	8003000 <_StoreChar>
 80032d4:	e008      	b.n	80032e8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80032e0:	212b      	movs	r1, #43	; 0x2b
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff fe8c 	bl	8003000 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d019      	beq.n	8003326 <_PrintInt+0x102>
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d114      	bne.n	8003326 <_PrintInt+0x102>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d111      	bne.n	8003326 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003308:	e006      	b.n	8003318 <_PrintInt+0xf4>
        FieldWidth--;
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	3b01      	subs	r3, #1
 800330e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8003310:	2130      	movs	r1, #48	; 0x30
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f7ff fe74 	bl	8003000 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <_PrintInt+0x102>
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	429a      	cmp	r2, r3
 8003324:	d3f1      	bcc.n	800330a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7ff fedf 	bl	80030f8 <_PrintUnsigned>
}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b098      	sub	sp, #96	; 0x60
 8003348:	af02      	add	r7, sp, #8
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003350:	f3ef 8311 	mrs	r3, BASEPRI
 8003354:	f04f 0120 	mov.w	r1, #32
 8003358:	f381 8811 	msr	BASEPRI, r1
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
 800335e:	48b7      	ldr	r0, [pc, #732]	; (800363c <_VPrintTarget+0x2f8>)
 8003360:	f7ff fbee 	bl	8002b40 <_PreparePacket>
 8003364:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003366:	4bb5      	ldr	r3, [pc, #724]	; (800363c <_VPrintTarget+0x2f8>)
 8003368:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3301      	adds	r3, #1
 8003376:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3301      	adds	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800338a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8183 	beq.w	800369a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8003394:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003398:	2b25      	cmp	r3, #37	; 0x25
 800339a:	f040 8170 	bne.w	800367e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800339e:	2300      	movs	r3, #0
 80033a0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80033ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033b2:	3b23      	subs	r3, #35	; 0x23
 80033b4:	2b0d      	cmp	r3, #13
 80033b6:	d83f      	bhi.n	8003438 <_VPrintTarget+0xf4>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <_VPrintTarget+0x7c>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	08003429 	.word	0x08003429
 80033c4:	08003439 	.word	0x08003439
 80033c8:	08003439 	.word	0x08003439
 80033cc:	08003439 	.word	0x08003439
 80033d0:	08003439 	.word	0x08003439
 80033d4:	08003439 	.word	0x08003439
 80033d8:	08003439 	.word	0x08003439
 80033dc:	08003439 	.word	0x08003439
 80033e0:	08003419 	.word	0x08003419
 80033e4:	08003439 	.word	0x08003439
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	08003439 	.word	0x08003439
 80033f0:	08003439 	.word	0x08003439
 80033f4:	08003409 	.word	0x08003409
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80033f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e01a      	b.n	800343e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8003408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340a:	f043 0302 	orr.w	r3, r3, #2
 800340e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e012      	b.n	800343e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8003418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e00a      	b.n	800343e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8003428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800342a:	f043 0308 	orr.w	r3, r3, #8
 800342e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3301      	adds	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	e002      	b.n	800343e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8003438:	2300      	movs	r3, #0
 800343a:	653b      	str	r3, [r7, #80]	; 0x50
 800343c:	bf00      	nop
        }
      } while (v);
 800343e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1b0      	bne.n	80033a6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003444:	2300      	movs	r3, #0
 8003446:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8003450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003454:	2b2f      	cmp	r3, #47	; 0x2f
 8003456:	d912      	bls.n	800347e <_VPrintTarget+0x13a>
 8003458:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800345c:	2b39      	cmp	r3, #57	; 0x39
 800345e:	d80e      	bhi.n	800347e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8003466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	461a      	mov	r2, r3
 8003472:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003476:	4413      	add	r3, r2
 8003478:	3b30      	subs	r3, #48	; 0x30
 800347a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800347c:	e7e4      	b.n	8003448 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800347e:	2300      	movs	r3, #0
 8003480:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800348a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800348e:	2b2e      	cmp	r3, #46	; 0x2e
 8003490:	d11d      	bne.n	80034ce <_VPrintTarget+0x18a>
        sFormat++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3301      	adds	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80034a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034a4:	2b2f      	cmp	r3, #47	; 0x2f
 80034a6:	d912      	bls.n	80034ce <_VPrintTarget+0x18a>
 80034a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034ac:	2b39      	cmp	r3, #57	; 0x39
 80034ae:	d80e      	bhi.n	80034ce <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3301      	adds	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80034b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	461a      	mov	r2, r3
 80034c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034c6:	4413      	add	r3, r2
 80034c8:	3b30      	subs	r3, #48	; 0x30
 80034ca:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80034cc:	e7e4      	b.n	8003498 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80034d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034da:	2b6c      	cmp	r3, #108	; 0x6c
 80034dc:	d003      	beq.n	80034e6 <_VPrintTarget+0x1a2>
 80034de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034e2:	2b68      	cmp	r3, #104	; 0x68
 80034e4:	d107      	bne.n	80034f6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3301      	adds	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80034f4:	e7ef      	b.n	80034d6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80034f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034fa:	2b25      	cmp	r3, #37	; 0x25
 80034fc:	f000 80b3 	beq.w	8003666 <_VPrintTarget+0x322>
 8003500:	2b25      	cmp	r3, #37	; 0x25
 8003502:	f2c0 80b7 	blt.w	8003674 <_VPrintTarget+0x330>
 8003506:	2b78      	cmp	r3, #120	; 0x78
 8003508:	f300 80b4 	bgt.w	8003674 <_VPrintTarget+0x330>
 800350c:	2b58      	cmp	r3, #88	; 0x58
 800350e:	f2c0 80b1 	blt.w	8003674 <_VPrintTarget+0x330>
 8003512:	3b58      	subs	r3, #88	; 0x58
 8003514:	2b20      	cmp	r3, #32
 8003516:	f200 80ad 	bhi.w	8003674 <_VPrintTarget+0x330>
 800351a:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <_VPrintTarget+0x1dc>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	08003617 	.word	0x08003617
 8003524:	08003675 	.word	0x08003675
 8003528:	08003675 	.word	0x08003675
 800352c:	08003675 	.word	0x08003675
 8003530:	08003675 	.word	0x08003675
 8003534:	08003675 	.word	0x08003675
 8003538:	08003675 	.word	0x08003675
 800353c:	08003675 	.word	0x08003675
 8003540:	08003675 	.word	0x08003675
 8003544:	08003675 	.word	0x08003675
 8003548:	08003675 	.word	0x08003675
 800354c:	080035a5 	.word	0x080035a5
 8003550:	080035cb 	.word	0x080035cb
 8003554:	08003675 	.word	0x08003675
 8003558:	08003675 	.word	0x08003675
 800355c:	08003675 	.word	0x08003675
 8003560:	08003675 	.word	0x08003675
 8003564:	08003675 	.word	0x08003675
 8003568:	08003675 	.word	0x08003675
 800356c:	08003675 	.word	0x08003675
 8003570:	08003675 	.word	0x08003675
 8003574:	08003675 	.word	0x08003675
 8003578:	08003675 	.word	0x08003675
 800357c:	08003675 	.word	0x08003675
 8003580:	08003641 	.word	0x08003641
 8003584:	08003675 	.word	0x08003675
 8003588:	08003675 	.word	0x08003675
 800358c:	08003675 	.word	0x08003675
 8003590:	08003675 	.word	0x08003675
 8003594:	080035f1 	.word	0x080035f1
 8003598:	08003675 	.word	0x08003675
 800359c:	08003675 	.word	0x08003675
 80035a0:	08003617 	.word	0x08003617
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	1d19      	adds	r1, r3, #4
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6011      	str	r1, [r2, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80035b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80035b8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fd1c 	bl	8003000 <_StoreChar>
        break;
 80035c8:	e055      	b.n	8003676 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1d19      	adds	r1, r3, #4
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6011      	str	r1, [r2, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80035d8:	f107 0014 	add.w	r0, r7, #20
 80035dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e6:	220a      	movs	r2, #10
 80035e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80035ea:	f7ff fe1b 	bl	8003224 <_PrintInt>
        break;
 80035ee:	e042      	b.n	8003676 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	1d19      	adds	r1, r3, #4
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6011      	str	r1, [r2, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80035fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003600:	f107 0014 	add.w	r0, r7, #20
 8003604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800360e:	220a      	movs	r2, #10
 8003610:	f7ff fd72 	bl	80030f8 <_PrintUnsigned>
        break;
 8003614:	e02f      	b.n	8003676 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	1d19      	adds	r1, r3, #4
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6011      	str	r1, [r2, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8003624:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003626:	f107 0014 	add.w	r0, r7, #20
 800362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	2210      	movs	r2, #16
 8003636:	f7ff fd5f 	bl	80030f8 <_PrintUnsigned>
        break;
 800363a:	e01c      	b.n	8003676 <_VPrintTarget+0x332>
 800363c:	2407f32c 	.word	0x2407f32c
      case 'p':
        v = va_arg(*pParamList, int);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	1d19      	adds	r1, r3, #4
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6011      	str	r1, [r2, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800364e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003650:	f107 0014 	add.w	r0, r7, #20
 8003654:	2300      	movs	r3, #0
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	2308      	movs	r3, #8
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2308      	movs	r3, #8
 800365e:	2210      	movs	r2, #16
 8003660:	f7ff fd4a 	bl	80030f8 <_PrintUnsigned>
        break;
 8003664:	e007      	b.n	8003676 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	2125      	movs	r1, #37	; 0x25
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fcc7 	bl	8003000 <_StoreChar>
        break;
 8003672:	e000      	b.n	8003676 <_VPrintTarget+0x332>
      default:
        break;
 8003674:	bf00      	nop
      }
      sFormat++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3301      	adds	r3, #1
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e007      	b.n	800368e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800367e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fcb9 	bl	8003000 <_StoreChar>
    }
  } while (*sFormat);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f47f ae72 	bne.w	800337c <_VPrintTarget+0x38>
 8003698:	e000      	b.n	800369c <_VPrintTarget+0x358>
      break;
 800369a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d041      	beq.n	8003726 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80036a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	643b      	str	r3, [r7, #64]	; 0x40
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b2:	e00b      	b.n	80036cc <_VPrintTarget+0x388>
 80036b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ba:	1c59      	adds	r1, r3, #1
 80036bc:	6439      	str	r1, [r7, #64]	; 0x40
 80036be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c8:	09db      	lsrs	r3, r3, #7
 80036ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ce:	2b7f      	cmp	r3, #127	; 0x7f
 80036d0:	d8f0      	bhi.n	80036b4 <_VPrintTarget+0x370>
 80036d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	643a      	str	r2, [r7, #64]	; 0x40
 80036d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e6:	2300      	movs	r3, #0
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ea:	e00b      	b.n	8003704 <_VPrintTarget+0x3c0>
 80036ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	1c59      	adds	r1, r3, #1
 80036f4:	63b9      	str	r1, [r7, #56]	; 0x38
 80036f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003700:	09db      	lsrs	r3, r3, #7
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
 8003704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003706:	2b7f      	cmp	r3, #127	; 0x7f
 8003708:	d8f0      	bhi.n	80036ec <_VPrintTarget+0x3a8>
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	69b9      	ldr	r1, [r7, #24]
 800371e:	221a      	movs	r2, #26
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fafd 	bl	8002d20 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800372c:	bf00      	nop
 800372e:	3758      	adds	r7, #88	; 0x58
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003742:	2300      	movs	r3, #0
 8003744:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <SEGGER_SYSVIEW_Init+0x74>)
 8003746:	4919      	ldr	r1, [pc, #100]	; (80037ac <SEGGER_SYSVIEW_Init+0x78>)
 8003748:	4819      	ldr	r0, [pc, #100]	; (80037b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800374a:	f7ff f8d9 	bl	8002900 <SEGGER_RTT_AllocUpBuffer>
 800374e:	4603      	mov	r3, r0
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <SEGGER_SYSVIEW_Init+0x80>)
 8003754:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003756:	4b17      	ldr	r3, [pc, #92]	; (80037b4 <SEGGER_SYSVIEW_Init+0x80>)
 8003758:	785a      	ldrb	r2, [r3, #1]
 800375a:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <SEGGER_SYSVIEW_Init+0x80>)
 800375c:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800375e:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <SEGGER_SYSVIEW_Init+0x80>)
 8003760:	7e1b      	ldrb	r3, [r3, #24]
 8003762:	4618      	mov	r0, r3
 8003764:	2300      	movs	r3, #0
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2308      	movs	r3, #8
 800376a:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <SEGGER_SYSVIEW_Init+0x84>)
 800376c:	4910      	ldr	r1, [pc, #64]	; (80037b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800376e:	f7ff f94b 	bl	8002a08 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <SEGGER_SYSVIEW_Init+0x80>)
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003778:	4b10      	ldr	r3, [pc, #64]	; (80037bc <SEGGER_SYSVIEW_Init+0x88>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0d      	ldr	r2, [pc, #52]	; (80037b4 <SEGGER_SYSVIEW_Init+0x80>)
 800377e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003780:	4a0c      	ldr	r2, [pc, #48]	; (80037b4 <SEGGER_SYSVIEW_Init+0x80>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003786:	4a0b      	ldr	r2, [pc, #44]	; (80037b4 <SEGGER_SYSVIEW_Init+0x80>)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800378c:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <SEGGER_SYSVIEW_Init+0x80>)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003792:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <SEGGER_SYSVIEW_Init+0x80>)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <SEGGER_SYSVIEW_Init+0x80>)
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	00077c00 	.word	0x00077c00
 80037ac:	240076f4 	.word	0x240076f4
 80037b0:	08009414 	.word	0x08009414
 80037b4:	2407f2fc 	.word	0x2407f2fc
 80037b8:	2407f2f4 	.word	0x2407f2f4
 80037bc:	e0001004 	.word	0xe0001004

080037c0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6113      	str	r3, [r2, #16]
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	2407f2fc 	.word	0x2407f2fc

080037e0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80037e8:	f3ef 8311 	mrs	r3, BASEPRI
 80037ec:	f04f 0120 	mov.w	r1, #32
 80037f0:	f381 8811 	msr	BASEPRI, r1
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	4808      	ldr	r0, [pc, #32]	; (8003818 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80037f8:	f7ff f9a2 	bl	8002b40 <_PreparePacket>
 80037fc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	68b8      	ldr	r0, [r7, #8]
 8003804:	f7ff fa8c 	bl	8002d20 <_SendPacket>
  RECORD_END();
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f383 8811 	msr	BASEPRI, r3
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	2407f32c 	.word	0x2407f32c

0800381c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003826:	f3ef 8311 	mrs	r3, BASEPRI
 800382a:	f04f 0120 	mov.w	r1, #32
 800382e:	f381 8811 	msr	BASEPRI, r1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	4816      	ldr	r0, [pc, #88]	; (8003890 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003836:	f7ff f983 	bl	8002b40 <_PreparePacket>
 800383a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	e00b      	b.n	8003862 <SEGGER_SYSVIEW_RecordU32+0x46>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	1c59      	adds	r1, r3, #1
 8003852:	61f9      	str	r1, [r7, #28]
 8003854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	09db      	lsrs	r3, r3, #7
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b7f      	cmp	r3, #127	; 0x7f
 8003866:	d8f0      	bhi.n	800384a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	61fa      	str	r2, [r7, #28]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	68f9      	ldr	r1, [r7, #12]
 800387c:	6938      	ldr	r0, [r7, #16]
 800387e:	f7ff fa4f 	bl	8002d20 <_SendPacket>
  RECORD_END();
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f383 8811 	msr	BASEPRI, r3
}
 8003888:	bf00      	nop
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	2407f32c 	.word	0x2407f32c

08003894 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b08c      	sub	sp, #48	; 0x30
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80038a0:	f3ef 8311 	mrs	r3, BASEPRI
 80038a4:	f04f 0120 	mov.w	r1, #32
 80038a8:	f381 8811 	msr	BASEPRI, r1
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	4825      	ldr	r0, [pc, #148]	; (8003944 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80038b0:	f7ff f946 	bl	8002b40 <_PreparePacket>
 80038b4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c2:	e00b      	b.n	80038dc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	1c59      	adds	r1, r3, #1
 80038cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80038ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	09db      	lsrs	r3, r3, #7
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	2b7f      	cmp	r3, #127	; 0x7f
 80038e0:	d8f0      	bhi.n	80038c4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	e00b      	b.n	8003914 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	1c59      	adds	r1, r3, #1
 8003904:	6279      	str	r1, [r7, #36]	; 0x24
 8003906:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	09db      	lsrs	r3, r3, #7
 8003912:	623b      	str	r3, [r7, #32]
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	2b7f      	cmp	r3, #127	; 0x7f
 8003918:	d8f0      	bhi.n	80038fc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	627a      	str	r2, [r7, #36]	; 0x24
 8003920:	6a3a      	ldr	r2, [r7, #32]
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	6979      	ldr	r1, [r7, #20]
 800392e:	69b8      	ldr	r0, [r7, #24]
 8003930:	f7ff f9f6 	bl	8002d20 <_SendPacket>
  RECORD_END();
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f383 8811 	msr	BASEPRI, r3
}
 800393a:	bf00      	nop
 800393c:	3730      	adds	r7, #48	; 0x30
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	2407f32c 	.word	0x2407f32c

08003948 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b090      	sub	sp, #64	; 0x40
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003956:	f3ef 8311 	mrs	r3, BASEPRI
 800395a:	f04f 0120 	mov.w	r1, #32
 800395e:	f381 8811 	msr	BASEPRI, r1
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	4840      	ldr	r0, [pc, #256]	; (8003a68 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003966:	f7ff f8eb 	bl	8002b40 <_PreparePacket>
 800396a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	63bb      	str	r3, [r7, #56]	; 0x38
 8003978:	e00b      	b.n	8003992 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	b2da      	uxtb	r2, r3
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003980:	1c59      	adds	r1, r3, #1
 8003982:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003984:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398e:	09db      	lsrs	r3, r3, #7
 8003990:	63bb      	str	r3, [r7, #56]	; 0x38
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	2b7f      	cmp	r3, #127	; 0x7f
 8003996:	d8f0      	bhi.n	800397a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800399e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	637b      	str	r3, [r7, #52]	; 0x34
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	633b      	str	r3, [r7, #48]	; 0x30
 80039b0:	e00b      	b.n	80039ca <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b8:	1c59      	adds	r1, r3, #1
 80039ba:	6379      	str	r1, [r7, #52]	; 0x34
 80039bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	09db      	lsrs	r3, r3, #7
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2b7f      	cmp	r3, #127	; 0x7f
 80039ce:	d8f0      	bhi.n	80039b2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80039d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	637a      	str	r2, [r7, #52]	; 0x34
 80039d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e8:	e00b      	b.n	8003a02 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	1c59      	adds	r1, r3, #1
 80039f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	09db      	lsrs	r3, r3, #7
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	2b7f      	cmp	r3, #127	; 0x7f
 8003a06:	d8f0      	bhi.n	80039ea <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1e:	623b      	str	r3, [r7, #32]
 8003a20:	e00b      	b.n	8003a3a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	1c59      	adds	r1, r3, #1
 8003a2a:	6279      	str	r1, [r7, #36]	; 0x24
 8003a2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	09db      	lsrs	r3, r3, #7
 8003a38:	623b      	str	r3, [r7, #32]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a3e:	d8f0      	bhi.n	8003a22 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	627a      	str	r2, [r7, #36]	; 0x24
 8003a46:	6a3a      	ldr	r2, [r7, #32]
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	6979      	ldr	r1, [r7, #20]
 8003a54:	69b8      	ldr	r0, [r7, #24]
 8003a56:	f7ff f963 	bl	8002d20 <_SendPacket>
  RECORD_END();
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f383 8811 	msr	BASEPRI, r3
}
 8003a60:	bf00      	nop
 8003a62:	3740      	adds	r7, #64	; 0x40
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	2407f32c 	.word	0x2407f32c

08003a6c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08c      	sub	sp, #48	; 0x30
 8003a70:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003a72:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003a78:	f3ef 8311 	mrs	r3, BASEPRI
 8003a7c:	f04f 0120 	mov.w	r1, #32
 8003a80:	f381 8811 	msr	BASEPRI, r1
 8003a84:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003a86:	4b54      	ldr	r3, [pc, #336]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	220a      	movs	r2, #10
 8003a8c:	4953      	ldr	r1, [pc, #332]	; (8003bdc <SEGGER_SYSVIEW_Start+0x170>)
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fc fc26 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003a9a:	f7fe fc03 	bl	80022a4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003a9e:	200a      	movs	r0, #10
 8003aa0:	f7ff fe9e 	bl	80037e0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8003aa8:	f04f 0120 	mov.w	r1, #32
 8003aac:	f381 8811 	msr	BASEPRI, r1
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	484b      	ldr	r0, [pc, #300]	; (8003be0 <SEGGER_SYSVIEW_Start+0x174>)
 8003ab4:	f7ff f844 	bl	8002b40 <_PreparePacket>
 8003ab8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac2:	4b45      	ldr	r3, [pc, #276]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac8:	e00b      	b.n	8003ae2 <SEGGER_SYSVIEW_Start+0x76>
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	1c59      	adds	r1, r3, #1
 8003ad2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003ad4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	09db      	lsrs	r3, r3, #7
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ae6:	d8f0      	bhi.n	8003aca <SEGGER_SYSVIEW_Start+0x5e>
 8003ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	623b      	str	r3, [r7, #32]
 8003b02:	e00b      	b.n	8003b1c <SEGGER_SYSVIEW_Start+0xb0>
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	6279      	str	r1, [r7, #36]	; 0x24
 8003b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	09db      	lsrs	r3, r3, #7
 8003b1a:	623b      	str	r3, [r7, #32]
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b20:	d8f0      	bhi.n	8003b04 <SEGGER_SYSVIEW_Start+0x98>
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	627a      	str	r2, [r7, #36]	; 0x24
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e00b      	b.n	8003b56 <SEGGER_SYSVIEW_Start+0xea>
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	1c59      	adds	r1, r3, #1
 8003b46:	61f9      	str	r1, [r7, #28]
 8003b48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	09db      	lsrs	r3, r3, #7
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b7f      	cmp	r3, #127	; 0x7f
 8003b5a:	d8f0      	bhi.n	8003b3e <SEGGER_SYSVIEW_Start+0xd2>
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	61fa      	str	r2, [r7, #28]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	e00b      	b.n	8003b8e <SEGGER_SYSVIEW_Start+0x122>
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	1c59      	adds	r1, r3, #1
 8003b7e:	6179      	str	r1, [r7, #20]
 8003b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	09db      	lsrs	r3, r3, #7
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b7f      	cmp	r3, #127	; 0x7f
 8003b92:	d8f0      	bhi.n	8003b76 <SEGGER_SYSVIEW_Start+0x10a>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	617a      	str	r2, [r7, #20]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003ba4:	2218      	movs	r2, #24
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff f8b9 	bl	8002d20 <_SendPacket>
      RECORD_END();
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003bc2:	f000 f9eb 	bl	8003f9c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003bc6:	f000 f9b1 	bl	8003f2c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003bca:	f000 fc83 	bl	80044d4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003bce:	bf00      	nop
 8003bd0:	3730      	adds	r7, #48	; 0x30
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	2407f2fc 	.word	0x2407f2fc
 8003bdc:	08009534 	.word	0x08009534
 8003be0:	2407f32c 	.word	0x2407f32c

08003be4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003bea:	f3ef 8311 	mrs	r3, BASEPRI
 8003bee:	f04f 0120 	mov.w	r1, #32
 8003bf2:	f381 8811 	msr	BASEPRI, r1
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	480b      	ldr	r0, [pc, #44]	; (8003c28 <SEGGER_SYSVIEW_Stop+0x44>)
 8003bfa:	f7fe ffa1 	bl	8002b40 <_PreparePacket>
 8003bfe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003c00:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <SEGGER_SYSVIEW_Stop+0x48>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003c08:	220b      	movs	r2, #11
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	6838      	ldr	r0, [r7, #0]
 8003c0e:	f7ff f887 	bl	8002d20 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <SEGGER_SYSVIEW_Stop+0x48>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f383 8811 	msr	BASEPRI, r3
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	2407f32c 	.word	0x2407f32c
 8003c2c:	2407f2fc 	.word	0x2407f2fc

08003c30 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08c      	sub	sp, #48	; 0x30
 8003c34:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c36:	f3ef 8311 	mrs	r3, BASEPRI
 8003c3a:	f04f 0120 	mov.w	r1, #32
 8003c3e:	f381 8811 	msr	BASEPRI, r1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	4845      	ldr	r0, [pc, #276]	; (8003d5c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003c46:	f7fe ff7b 	bl	8002b40 <_PreparePacket>
 8003c4a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c54:	4b42      	ldr	r3, [pc, #264]	; (8003d60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5a:	e00b      	b.n	8003c74 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c62:	1c59      	adds	r1, r3, #1
 8003c64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	09db      	lsrs	r3, r3, #7
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	2b7f      	cmp	r3, #127	; 0x7f
 8003c78:	d8f0      	bhi.n	8003c5c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	623b      	str	r3, [r7, #32]
 8003c94:	e00b      	b.n	8003cae <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	1c59      	adds	r1, r3, #1
 8003c9e:	6279      	str	r1, [r7, #36]	; 0x24
 8003ca0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	09db      	lsrs	r3, r3, #7
 8003cac:	623b      	str	r3, [r7, #32]
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8003cb2:	d8f0      	bhi.n	8003c96 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	627a      	str	r2, [r7, #36]	; 0x24
 8003cba:	6a3a      	ldr	r2, [r7, #32]
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e00b      	b.n	8003ce8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	1c59      	adds	r1, r3, #1
 8003cd8:	61f9      	str	r1, [r7, #28]
 8003cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	09db      	lsrs	r3, r3, #7
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b7f      	cmp	r3, #127	; 0x7f
 8003cec:	d8f0      	bhi.n	8003cd0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	61fa      	str	r2, [r7, #28]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e00b      	b.n	8003d20 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	1c59      	adds	r1, r3, #1
 8003d10:	6179      	str	r1, [r7, #20]
 8003d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	09db      	lsrs	r3, r3, #7
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b7f      	cmp	r3, #127	; 0x7f
 8003d24:	d8f0      	bhi.n	8003d08 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	617a      	str	r2, [r7, #20]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003d36:	2218      	movs	r2, #24
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	68b8      	ldr	r0, [r7, #8]
 8003d3c:	f7fe fff0 	bl	8002d20 <_SendPacket>
  RECORD_END();
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	4798      	blx	r3
  }
}
 8003d54:	bf00      	nop
 8003d56:	3730      	adds	r7, #48	; 0x30
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	2407f32c 	.word	0x2407f32c
 8003d60:	2407f2fc 	.word	0x2407f2fc

08003d64 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b092      	sub	sp, #72	; 0x48
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003d6c:	f3ef 8311 	mrs	r3, BASEPRI
 8003d70:	f04f 0120 	mov.w	r1, #32
 8003d74:	f381 8811 	msr	BASEPRI, r1
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	486a      	ldr	r0, [pc, #424]	; (8003f24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003d7c:	f7fe fee0 	bl	8002b40 <_PreparePacket>
 8003d80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	647b      	str	r3, [r7, #68]	; 0x44
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	643b      	str	r3, [r7, #64]	; 0x40
 8003d96:	e00b      	b.n	8003db0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	6479      	str	r1, [r7, #68]	; 0x44
 8003da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	09db      	lsrs	r3, r3, #7
 8003dae:	643b      	str	r3, [r7, #64]	; 0x40
 8003db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db2:	2b7f      	cmp	r3, #127	; 0x7f
 8003db4:	d8f0      	bhi.n	8003d98 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	647a      	str	r2, [r7, #68]	; 0x44
 8003dbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dd0:	e00b      	b.n	8003dea <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd8:	1c59      	adds	r1, r3, #1
 8003dda:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003ddc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	09db      	lsrs	r3, r3, #7
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2b7f      	cmp	r3, #127	; 0x7f
 8003dee:	d8f0      	bhi.n	8003dd2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	4619      	mov	r1, r3
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7fe fe49 	bl	8002aa0 <_EncodeStr>
 8003e0e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003e10:	2209      	movs	r2, #9
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	6938      	ldr	r0, [r7, #16]
 8003e16:	f7fe ff83 	bl	8002d20 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b40      	ldr	r3, [pc, #256]	; (8003f28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2e:	e00b      	b.n	8003e48 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	1c59      	adds	r1, r3, #1
 8003e38:	6379      	str	r1, [r7, #52]	; 0x34
 8003e3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	09db      	lsrs	r3, r3, #7
 8003e46:	633b      	str	r3, [r7, #48]	; 0x30
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e4c:	d8f0      	bhi.n	8003e30 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	637a      	str	r2, [r7, #52]	; 0x34
 8003e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e68:	e00b      	b.n	8003e82 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	1c59      	adds	r1, r3, #1
 8003e72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	09db      	lsrs	r3, r3, #7
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	2b7f      	cmp	r3, #127	; 0x7f
 8003e86:	d8f0      	bhi.n	8003e6a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	623b      	str	r3, [r7, #32]
 8003ea2:	e00b      	b.n	8003ebc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	1c59      	adds	r1, r3, #1
 8003eac:	6279      	str	r1, [r7, #36]	; 0x24
 8003eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	09db      	lsrs	r3, r3, #7
 8003eba:	623b      	str	r3, [r7, #32]
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8003ec0:	d8f0      	bhi.n	8003ea4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	627a      	str	r2, [r7, #36]	; 0x24
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	e00b      	b.n	8003ef4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	1c59      	adds	r1, r3, #1
 8003ee4:	61f9      	str	r1, [r7, #28]
 8003ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	09db      	lsrs	r3, r3, #7
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ef8:	d8f0      	bhi.n	8003edc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	61fa      	str	r2, [r7, #28]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003f0a:	2215      	movs	r2, #21
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	6938      	ldr	r0, [r7, #16]
 8003f10:	f7fe ff06 	bl	8002d20 <_SendPacket>
  RECORD_END();
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f383 8811 	msr	BASEPRI, r3
}
 8003f1a:	bf00      	nop
 8003f1c:	3748      	adds	r7, #72	; 0x48
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	2407f32c 	.word	0x2407f32c
 8003f28:	2407f2fc 	.word	0x2407f2fc

08003f2c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003f42:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4798      	blx	r3
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	2407f2fc 	.word	0x2407f2fc

08003f54 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8003f60:	f04f 0120 	mov.w	r1, #32
 8003f64:	f381 8811 	msr	BASEPRI, r1
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	480b      	ldr	r0, [pc, #44]	; (8003f98 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003f6c:	f7fe fde8 	bl	8002b40 <_PreparePacket>
 8003f70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	6938      	ldr	r0, [r7, #16]
 8003f78:	f7fe fd92 	bl	8002aa0 <_EncodeStr>
 8003f7c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003f7e:	220e      	movs	r2, #14
 8003f80:	68f9      	ldr	r1, [r7, #12]
 8003f82:	6938      	ldr	r0, [r7, #16]
 8003f84:	f7fe fecc 	bl	8002d20 <_SendPacket>
  RECORD_END();
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f383 8811 	msr	BASEPRI, r3
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	2407f32c 	.word	0x2407f32c

08003f9c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01a      	beq.n	8003fe0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d015      	beq.n	8003fe0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4798      	blx	r3
 8003fbc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003fc0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003fc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	000a      	movs	r2, r1
 8003fd0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	200d      	movs	r0, #13
 8003fda:	f7ff fc5b 	bl	8003894 <SEGGER_SYSVIEW_RecordU32x2>
 8003fde:	e006      	b.n	8003fee <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	200c      	movs	r0, #12
 8003fe8:	f7ff fc18 	bl	800381c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd90      	pop	{r4, r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	2407f2fc 	.word	0x2407f2fc
 8003ffc:	e0001004 	.word	0xe0001004

08004000 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004006:	f3ef 8311 	mrs	r3, BASEPRI
 800400a:	f04f 0120 	mov.w	r1, #32
 800400e:	f381 8811 	msr	BASEPRI, r1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	4819      	ldr	r0, [pc, #100]	; (800407c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004016:	f7fe fd93 	bl	8002b40 <_PreparePacket>
 800401a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004020:	4b17      	ldr	r3, [pc, #92]	; (8004080 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004028:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	e00b      	b.n	800404c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	b2da      	uxtb	r2, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	1c59      	adds	r1, r3, #1
 800403c:	6179      	str	r1, [r7, #20]
 800403e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	09db      	lsrs	r3, r3, #7
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b7f      	cmp	r3, #127	; 0x7f
 8004050:	d8f0      	bhi.n	8004034 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	617a      	str	r2, [r7, #20]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004062:	2202      	movs	r2, #2
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	68b8      	ldr	r0, [r7, #8]
 8004068:	f7fe fe5a 	bl	8002d20 <_SendPacket>
  RECORD_END();
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f383 8811 	msr	BASEPRI, r3
}
 8004072:	bf00      	nop
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	2407f32c 	.word	0x2407f32c
 8004080:	e000ed04 	.word	0xe000ed04

08004084 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800408a:	f3ef 8311 	mrs	r3, BASEPRI
 800408e:	f04f 0120 	mov.w	r1, #32
 8004092:	f381 8811 	msr	BASEPRI, r1
 8004096:	607b      	str	r3, [r7, #4]
 8004098:	4807      	ldr	r0, [pc, #28]	; (80040b8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800409a:	f7fe fd51 	bl	8002b40 <_PreparePacket>
 800409e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80040a0:	2203      	movs	r2, #3
 80040a2:	6839      	ldr	r1, [r7, #0]
 80040a4:	6838      	ldr	r0, [r7, #0]
 80040a6:	f7fe fe3b 	bl	8002d20 <_SendPacket>
  RECORD_END();
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f383 8811 	msr	BASEPRI, r3
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	2407f32c 	.word	0x2407f32c

080040bc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040c2:	f3ef 8311 	mrs	r3, BASEPRI
 80040c6:	f04f 0120 	mov.w	r1, #32
 80040ca:	f381 8811 	msr	BASEPRI, r1
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	4807      	ldr	r0, [pc, #28]	; (80040f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80040d2:	f7fe fd35 	bl	8002b40 <_PreparePacket>
 80040d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80040d8:	2212      	movs	r2, #18
 80040da:	6839      	ldr	r1, [r7, #0]
 80040dc:	6838      	ldr	r0, [r7, #0]
 80040de:	f7fe fe1f 	bl	8002d20 <_SendPacket>
  RECORD_END();
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f383 8811 	msr	BASEPRI, r3
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	2407f32c 	.word	0x2407f32c

080040f4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040fa:	f3ef 8311 	mrs	r3, BASEPRI
 80040fe:	f04f 0120 	mov.w	r1, #32
 8004102:	f381 8811 	msr	BASEPRI, r1
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	4807      	ldr	r0, [pc, #28]	; (8004128 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800410a:	f7fe fd19 	bl	8002b40 <_PreparePacket>
 800410e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004110:	2211      	movs	r2, #17
 8004112:	6839      	ldr	r1, [r7, #0]
 8004114:	6838      	ldr	r0, [r7, #0]
 8004116:	f7fe fe03 	bl	8002d20 <_SendPacket>
  RECORD_END();
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f383 8811 	msr	BASEPRI, r3
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	2407f32c 	.word	0x2407f32c

0800412c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004134:	f3ef 8311 	mrs	r3, BASEPRI
 8004138:	f04f 0120 	mov.w	r1, #32
 800413c:	f381 8811 	msr	BASEPRI, r1
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	4819      	ldr	r0, [pc, #100]	; (80041a8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004144:	f7fe fcfc 	bl	8002b40 <_PreparePacket>
 8004148:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800414e:	4b17      	ldr	r3, [pc, #92]	; (80041ac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	e00b      	b.n	800417a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	1c59      	adds	r1, r3, #1
 800416a:	61f9      	str	r1, [r7, #28]
 800416c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	09db      	lsrs	r3, r3, #7
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b7f      	cmp	r3, #127	; 0x7f
 800417e:	d8f0      	bhi.n	8004162 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	61fa      	str	r2, [r7, #28]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004190:	2208      	movs	r2, #8
 8004192:	68f9      	ldr	r1, [r7, #12]
 8004194:	6938      	ldr	r0, [r7, #16]
 8004196:	f7fe fdc3 	bl	8002d20 <_SendPacket>
  RECORD_END();
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f383 8811 	msr	BASEPRI, r3
}
 80041a0:	bf00      	nop
 80041a2:	3720      	adds	r7, #32
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	2407f32c 	.word	0x2407f32c
 80041ac:	2407f2fc 	.word	0x2407f2fc

080041b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041b8:	f3ef 8311 	mrs	r3, BASEPRI
 80041bc:	f04f 0120 	mov.w	r1, #32
 80041c0:	f381 8811 	msr	BASEPRI, r1
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	4819      	ldr	r0, [pc, #100]	; (800422c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80041c8:	f7fe fcba 	bl	8002b40 <_PreparePacket>
 80041cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	61fb      	str	r3, [r7, #28]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	e00b      	b.n	80041fe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	1c59      	adds	r1, r3, #1
 80041ee:	61f9      	str	r1, [r7, #28]
 80041f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	09db      	lsrs	r3, r3, #7
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b7f      	cmp	r3, #127	; 0x7f
 8004202:	d8f0      	bhi.n	80041e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	61fa      	str	r2, [r7, #28]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004214:	2204      	movs	r2, #4
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	6938      	ldr	r0, [r7, #16]
 800421a:	f7fe fd81 	bl	8002d20 <_SendPacket>
  RECORD_END();
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f383 8811 	msr	BASEPRI, r3
}
 8004224:	bf00      	nop
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	2407f32c 	.word	0x2407f32c
 8004230:	2407f2fc 	.word	0x2407f2fc

08004234 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800423c:	f3ef 8311 	mrs	r3, BASEPRI
 8004240:	f04f 0120 	mov.w	r1, #32
 8004244:	f381 8811 	msr	BASEPRI, r1
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	4819      	ldr	r0, [pc, #100]	; (80042b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800424c:	f7fe fc78 	bl	8002b40 <_PreparePacket>
 8004250:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	e00b      	b.n	8004282 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	1c59      	adds	r1, r3, #1
 8004272:	61f9      	str	r1, [r7, #28]
 8004274:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	09db      	lsrs	r3, r3, #7
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b7f      	cmp	r3, #127	; 0x7f
 8004286:	d8f0      	bhi.n	800426a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	61fa      	str	r2, [r7, #28]
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004298:	2206      	movs	r2, #6
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	6938      	ldr	r0, [r7, #16]
 800429e:	f7fe fd3f 	bl	8002d20 <_SendPacket>
  RECORD_END();
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f383 8811 	msr	BASEPRI, r3
}
 80042a8:	bf00      	nop
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	2407f32c 	.word	0x2407f32c
 80042b4:	2407f2fc 	.word	0x2407f2fc

080042b8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80042c2:	f3ef 8311 	mrs	r3, BASEPRI
 80042c6:	f04f 0120 	mov.w	r1, #32
 80042ca:	f381 8811 	msr	BASEPRI, r1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	4827      	ldr	r0, [pc, #156]	; (8004370 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80042d2:	f7fe fc35 	bl	8002b40 <_PreparePacket>
 80042d6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80042dc:	4b25      	ldr	r3, [pc, #148]	; (8004374 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	623b      	str	r3, [r7, #32]
 80042ee:	e00b      	b.n	8004308 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	1c59      	adds	r1, r3, #1
 80042f8:	6279      	str	r1, [r7, #36]	; 0x24
 80042fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	09db      	lsrs	r3, r3, #7
 8004306:	623b      	str	r3, [r7, #32]
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	2b7f      	cmp	r3, #127	; 0x7f
 800430c:	d8f0      	bhi.n	80042f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	627a      	str	r2, [r7, #36]	; 0x24
 8004314:	6a3a      	ldr	r2, [r7, #32]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	e00b      	b.n	8004340 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	61f9      	str	r1, [r7, #28]
 8004332:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	09db      	lsrs	r3, r3, #7
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b7f      	cmp	r3, #127	; 0x7f
 8004344:	d8f0      	bhi.n	8004328 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	61fa      	str	r2, [r7, #28]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004356:	2207      	movs	r2, #7
 8004358:	68f9      	ldr	r1, [r7, #12]
 800435a:	6938      	ldr	r0, [r7, #16]
 800435c:	f7fe fce0 	bl	8002d20 <_SendPacket>
  RECORD_END();
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f383 8811 	msr	BASEPRI, r3
}
 8004366:	bf00      	nop
 8004368:	3728      	adds	r7, #40	; 0x28
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	2407f32c 	.word	0x2407f32c
 8004374:	2407f2fc 	.word	0x2407f2fc

08004378 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	1ad3      	subs	r3, r2, r3
}
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	2407f2fc 	.word	0x2407f2fc

08004398 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b08c      	sub	sp, #48	; 0x30
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d06d      	beq.n	8004486 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80043aa:	4b39      	ldr	r3, [pc, #228]	; (8004490 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80043b0:	2300      	movs	r3, #0
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b4:	e008      	b.n	80043c8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	3301      	adds	r3, #1
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d3f2      	bcc.n	80043b6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80043d0:	e000      	b.n	80043d4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80043d2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d055      	beq.n	8004486 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043da:	f3ef 8311 	mrs	r3, BASEPRI
 80043de:	f04f 0120 	mov.w	r1, #32
 80043e2:	f381 8811 	msr	BASEPRI, r1
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	482a      	ldr	r0, [pc, #168]	; (8004494 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80043ea:	f7fe fba9 	bl	8002b40 <_PreparePacket>
 80043ee:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	623b      	str	r3, [r7, #32]
 80043fc:	e00b      	b.n	8004416 <SEGGER_SYSVIEW_SendModule+0x7e>
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	1c59      	adds	r1, r3, #1
 8004406:	6279      	str	r1, [r7, #36]	; 0x24
 8004408:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	09db      	lsrs	r3, r3, #7
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	2b7f      	cmp	r3, #127	; 0x7f
 800441a:	d8f0      	bhi.n	80043fe <SEGGER_SYSVIEW_SendModule+0x66>
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	627a      	str	r2, [r7, #36]	; 0x24
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	e00b      	b.n	8004450 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	b2da      	uxtb	r2, r3
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	1c59      	adds	r1, r3, #1
 8004440:	61f9      	str	r1, [r7, #28]
 8004442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	09db      	lsrs	r3, r3, #7
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b7f      	cmp	r3, #127	; 0x7f
 8004454:	d8f0      	bhi.n	8004438 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	61fa      	str	r2, [r7, #28]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2280      	movs	r2, #128	; 0x80
 800446c:	4619      	mov	r1, r3
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7fe fb16 	bl	8002aa0 <_EncodeStr>
 8004474:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004476:	2216      	movs	r2, #22
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	6938      	ldr	r0, [r7, #16]
 800447c:	f7fe fc50 	bl	8002d20 <_SendPacket>
      RECORD_END();
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004486:	bf00      	nop
 8004488:	3730      	adds	r7, #48	; 0x30
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	2407f324 	.word	0x2407f324
 8004494:	2407f32c 	.word	0x2407f32c

08004498 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800449e:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00f      	beq.n	80044c6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f2      	bne.n	80044ac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	2407f324 	.word	0x2407f324

080044d4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80044da:	f3ef 8311 	mrs	r3, BASEPRI
 80044de:	f04f 0120 	mov.w	r1, #32
 80044e2:	f381 8811 	msr	BASEPRI, r1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	4817      	ldr	r0, [pc, #92]	; (8004548 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80044ea:	f7fe fb29 	bl	8002b40 <_PreparePacket>
 80044ee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	e00b      	b.n	8004518 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	1c59      	adds	r1, r3, #1
 8004508:	6179      	str	r1, [r7, #20]
 800450a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	09db      	lsrs	r3, r3, #7
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b7f      	cmp	r3, #127	; 0x7f
 800451c:	d8f0      	bhi.n	8004500 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	617a      	str	r2, [r7, #20]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800452e:	221b      	movs	r2, #27
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	68b8      	ldr	r0, [r7, #8]
 8004534:	f7fe fbf4 	bl	8002d20 <_SendPacket>
  RECORD_END();
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f383 8811 	msr	BASEPRI, r3
}
 800453e:	bf00      	nop
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	2407f32c 	.word	0x2407f32c
 800454c:	2407f328 	.word	0x2407f328

08004550 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8004550:	b40f      	push	{r0, r1, r2, r3}
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8004558:	f107 0314 	add.w	r3, r7, #20
 800455c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	461a      	mov	r2, r3
 8004562:	2100      	movs	r1, #0
 8004564:	6938      	ldr	r0, [r7, #16]
 8004566:	f7fe feed 	bl	8003344 <_VPrintTarget>
  va_end(ParamList);
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004574:	b004      	add	sp, #16
 8004576:	4770      	bx	lr

08004578 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004580:	f3ef 8311 	mrs	r3, BASEPRI
 8004584:	f04f 0120 	mov.w	r1, #32
 8004588:	f381 8811 	msr	BASEPRI, r1
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	4827      	ldr	r0, [pc, #156]	; (800462c <SEGGER_SYSVIEW_Warn+0xb4>)
 8004590:	f7fe fad6 	bl	8002b40 <_PreparePacket>
 8004594:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	6938      	ldr	r0, [r7, #16]
 800459c:	f7fe fa80 	bl	8002aa0 <_EncodeStr>
 80045a0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	2301      	movs	r3, #1
 80045a8:	623b      	str	r3, [r7, #32]
 80045aa:	e00b      	b.n	80045c4 <SEGGER_SYSVIEW_Warn+0x4c>
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	1c59      	adds	r1, r3, #1
 80045b4:	6279      	str	r1, [r7, #36]	; 0x24
 80045b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	09db      	lsrs	r3, r3, #7
 80045c2:	623b      	str	r3, [r7, #32]
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2b7f      	cmp	r3, #127	; 0x7f
 80045c8:	d8f0      	bhi.n	80045ac <SEGGER_SYSVIEW_Warn+0x34>
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	627a      	str	r2, [r7, #36]	; 0x24
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	e00b      	b.n	80045fc <SEGGER_SYSVIEW_Warn+0x84>
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	1c59      	adds	r1, r3, #1
 80045ec:	61f9      	str	r1, [r7, #28]
 80045ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	09db      	lsrs	r3, r3, #7
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004600:	d8f0      	bhi.n	80045e4 <SEGGER_SYSVIEW_Warn+0x6c>
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	61fa      	str	r2, [r7, #28]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004612:	221a      	movs	r2, #26
 8004614:	68f9      	ldr	r1, [r7, #12]
 8004616:	6938      	ldr	r0, [r7, #16]
 8004618:	f7fe fb82 	bl	8002d20 <_SendPacket>
  RECORD_END();
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f383 8811 	msr	BASEPRI, r3
}
 8004622:	bf00      	nop
 8004624:	3728      	adds	r7, #40	; 0x28
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2407f32c 	.word	0x2407f32c

08004630 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004634:	4b13      	ldr	r3, [pc, #76]	; (8004684 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004636:	7e1b      	ldrb	r3, [r3, #24]
 8004638:	4619      	mov	r1, r3
 800463a:	4a13      	ldr	r2, [pc, #76]	; (8004688 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800463c:	460b      	mov	r3, r1
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	440b      	add	r3, r1
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	336c      	adds	r3, #108	; 0x6c
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800464c:	7e1b      	ldrb	r3, [r3, #24]
 800464e:	4618      	mov	r0, r3
 8004650:	490d      	ldr	r1, [pc, #52]	; (8004688 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004652:	4603      	mov	r3, r0
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4403      	add	r3, r0
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	440b      	add	r3, r1
 800465c:	3370      	adds	r3, #112	; 0x70
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d00b      	beq.n	800467c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004664:	4b07      	ldr	r3, [pc, #28]	; (8004684 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004666:	789b      	ldrb	r3, [r3, #2]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d107      	bne.n	800467c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800466e:	2201      	movs	r2, #1
 8004670:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004672:	f7fe fa71 	bl	8002b58 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004676:	4b03      	ldr	r3, [pc, #12]	; (8004684 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004678:	2200      	movs	r2, #0
 800467a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800467c:	4b01      	ldr	r3, [pc, #4]	; (8004684 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800467e:	781b      	ldrb	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	2407f2fc 	.word	0x2407f2fc
 8004688:	2400723c 	.word	0x2400723c

0800468c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004692:	f000 fdcd 	bl	8005230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004696:	f000 f8ab 	bl	80047f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800469a:	f000 f9dd 	bl	8004a58 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800469e:	f000 f955 	bl	800494c <MX_FDCAN2_Init>
  MX_USB_OTG_FS_HCD_Init();
 80046a2:	f000 f9b7 	bl	8004a14 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
//	user_data = "Start of program\r\n";
//	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);

	// Enable CCYCCNT Counter
	DWT->CTRL |= (1 << 0);
 80046a6:	4b3f      	ldr	r3, [pc, #252]	; (80047a4 <main+0x118>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3e      	ldr	r2, [pc, #248]	; (80047a4 <main+0x118>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6013      	str	r3, [r2, #0]

	// Used for SEGGER UART
	SEGGER_UART_init(500000);
 80046b2:	483d      	ldr	r0, [pc, #244]	; (80047a8 <main+0x11c>)
 80046b4:	f7fd fd98 	bl	80021e8 <SEGGER_UART_init>

	//Starting SEGGER SYSVIEW
	  SEGGER_SYSVIEW_Conf();
 80046b8:	f7fd fb04 	bl	8001cc4 <SEGGER_SYSVIEW_Conf>
	  //SEGGER_SYSVIEW_Start();

	  TaskStatus = xTaskCreate(Task_GreenLED_Handler, "GreenLED", 100, "Green LED TASK", 1, &Task_GreenLED_Handle);
 80046bc:	4b3b      	ldr	r3, [pc, #236]	; (80047ac <main+0x120>)
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	2301      	movs	r3, #1
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	4b3a      	ldr	r3, [pc, #232]	; (80047b0 <main+0x124>)
 80046c6:	2264      	movs	r2, #100	; 0x64
 80046c8:	493a      	ldr	r1, [pc, #232]	; (80047b4 <main+0x128>)
 80046ca:	483b      	ldr	r0, [pc, #236]	; (80047b8 <main+0x12c>)
 80046cc:	f7fb ff06 	bl	80004dc <xTaskCreate>
 80046d0:	6178      	str	r0, [r7, #20]
	  configASSERT(TaskStatus == pdPASS);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d00c      	beq.n	80046f2 <main+0x66>
        __asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	b672      	cpsid	i
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	b662      	cpsie	i
 80046ec:	613b      	str	r3, [r7, #16]
    }
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <main+0x64>

	  Next_Task_Handle = Task_GreenLED_Handle;
 80046f2:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <main+0x120>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a31      	ldr	r2, [pc, #196]	; (80047bc <main+0x130>)
 80046f8:	6013      	str	r3, [r2, #0]

	  TaskStatus = xTaskCreate(Task_RedLED_Handler, "RedLED", 100, "Red LED TASK", 1, &Task_RedLED_Handle);
 80046fa:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <main+0x134>)
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	2301      	movs	r3, #1
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <main+0x138>)
 8004704:	2264      	movs	r2, #100	; 0x64
 8004706:	4930      	ldr	r1, [pc, #192]	; (80047c8 <main+0x13c>)
 8004708:	4830      	ldr	r0, [pc, #192]	; (80047cc <main+0x140>)
 800470a:	f7fb fee7 	bl	80004dc <xTaskCreate>
 800470e:	6178      	str	r0, [r7, #20]
	  configASSERT(TaskStatus == pdPASS);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d00c      	beq.n	8004730 <main+0xa4>
        __asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	b672      	cpsid	i
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	b662      	cpsie	i
 800472a:	60fb      	str	r3, [r7, #12]
    }
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <main+0xa2>

	  TaskStatus = xTaskCreate(Task_BlueLED_Handler, "BlueLED", 100, "Blue LED TASK", 1, &Task_BlueLED_Handle);
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <main+0x144>)
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	2301      	movs	r3, #1
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <main+0x148>)
 800473a:	2264      	movs	r2, #100	; 0x64
 800473c:	4926      	ldr	r1, [pc, #152]	; (80047d8 <main+0x14c>)
 800473e:	4827      	ldr	r0, [pc, #156]	; (80047dc <main+0x150>)
 8004740:	f7fb fecc 	bl	80004dc <xTaskCreate>
 8004744:	6178      	str	r0, [r7, #20]
	  configASSERT(TaskStatus == pdPASS);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d00c      	beq.n	8004766 <main+0xda>
        __asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	b672      	cpsid	i
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	b662      	cpsie	i
 8004760:	60bb      	str	r3, [r7, #8]
    }
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <main+0xd8>

	  TaskStatus = xTaskCreate(Task_Button_Handler, "Button", 100, "Button TASK", 4, &Task_Button_Handle);
 8004766:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <main+0x154>)
 8004768:	9301      	str	r3, [sp, #4]
 800476a:	2304      	movs	r3, #4
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <main+0x158>)
 8004770:	2264      	movs	r2, #100	; 0x64
 8004772:	491d      	ldr	r1, [pc, #116]	; (80047e8 <main+0x15c>)
 8004774:	481d      	ldr	r0, [pc, #116]	; (80047ec <main+0x160>)
 8004776:	f7fb feb1 	bl	80004dc <xTaskCreate>
 800477a:	6178      	str	r0, [r7, #20]
	  configASSERT(TaskStatus == pdPASS);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d00c      	beq.n	800479c <main+0x110>
        __asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	b672      	cpsid	i
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	b662      	cpsie	i
 8004796:	607b      	str	r3, [r7, #4]
    }
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <main+0x10e>

	  // Start FreeRTOS scheduler
	  vTaskStartScheduler();
 800479c:	f7fc f964 	bl	8000a68 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80047a0:	e7fe      	b.n	80047a0 <main+0x114>
 80047a2:	bf00      	nop
 80047a4:	e0001000 	.word	0xe0001000
 80047a8:	0007a120 	.word	0x0007a120
 80047ac:	2407f7b4 	.word	0x2407f7b4
 80047b0:	0800942c 	.word	0x0800942c
 80047b4:	0800943c 	.word	0x0800943c
 80047b8:	08004b49 	.word	0x08004b49
 80047bc:	2407f7c4 	.word	0x2407f7c4
 80047c0:	2407f7b8 	.word	0x2407f7b8
 80047c4:	08009448 	.word	0x08009448
 80047c8:	08009458 	.word	0x08009458
 80047cc:	08004bd9 	.word	0x08004bd9
 80047d0:	2407f7bc 	.word	0x2407f7bc
 80047d4:	08009460 	.word	0x08009460
 80047d8:	08009470 	.word	0x08009470
 80047dc:	08004c69 	.word	0x08004c69
 80047e0:	2407f7c0 	.word	0x2407f7c0
 80047e4:	08009478 	.word	0x08009478
 80047e8:	08009484 	.word	0x08009484
 80047ec:	08004d01 	.word	0x08004d01

080047f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b09e      	sub	sp, #120	; 0x78
 80047f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047fa:	224c      	movs	r2, #76	; 0x4c
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f004 fd9e 	bl	8009340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004804:	f107 030c 	add.w	r3, r7, #12
 8004808:	2220      	movs	r2, #32
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f004 fd97 	bl	8009340 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004812:	2002      	movs	r0, #2
 8004814:	f001 ff72 	bl	80066fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	4b48      	ldr	r3, [pc, #288]	; (8004940 <SystemClock_Config+0x150>)
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	4a47      	ldr	r2, [pc, #284]	; (8004940 <SystemClock_Config+0x150>)
 8004822:	f023 0301 	bic.w	r3, r3, #1
 8004826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004828:	4b45      	ldr	r3, [pc, #276]	; (8004940 <SystemClock_Config+0x150>)
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	4b44      	ldr	r3, [pc, #272]	; (8004944 <SystemClock_Config+0x154>)
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	4a43      	ldr	r2, [pc, #268]	; (8004944 <SystemClock_Config+0x154>)
 8004838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800483c:	6193      	str	r3, [r2, #24]
 800483e:	4b41      	ldr	r3, [pc, #260]	; (8004944 <SystemClock_Config+0x154>)
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800484a:	bf00      	nop
 800484c:	4b3d      	ldr	r3, [pc, #244]	; (8004944 <SystemClock_Config+0x154>)
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004858:	d1f8      	bne.n	800484c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485a:	4b3b      	ldr	r3, [pc, #236]	; (8004948 <SystemClock_Config+0x158>)
 800485c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004860:	4a39      	ldr	r2, [pc, #228]	; (8004948 <SystemClock_Config+0x158>)
 8004862:	f043 0302 	orr.w	r3, r3, #2
 8004866:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800486a:	4b37      	ldr	r3, [pc, #220]	; (8004948 <SystemClock_Config+0x158>)
 800486c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	607b      	str	r3, [r7, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004878:	2300      	movs	r3, #0
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4b31      	ldr	r3, [pc, #196]	; (8004944 <SystemClock_Config+0x154>)
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	4a30      	ldr	r2, [pc, #192]	; (8004944 <SystemClock_Config+0x154>)
 8004882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004886:	6193      	str	r3, [r2, #24]
 8004888:	4b2e      	ldr	r3, [pc, #184]	; (8004944 <SystemClock_Config+0x154>)
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	4b2b      	ldr	r3, [pc, #172]	; (8004940 <SystemClock_Config+0x150>)
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	4a2a      	ldr	r2, [pc, #168]	; (8004940 <SystemClock_Config+0x150>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800489e:	4b28      	ldr	r3, [pc, #160]	; (8004940 <SystemClock_Config+0x150>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80048aa:	bf00      	nop
 80048ac:	4b25      	ldr	r3, [pc, #148]	; (8004944 <SystemClock_Config+0x154>)
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b8:	d1f8      	bne.n	80048ac <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048ba:	2301      	movs	r3, #1
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80048be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048c4:	2302      	movs	r3, #2
 80048c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048c8:	2302      	movs	r3, #2
 80048ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80048cc:	2301      	movs	r3, #1
 80048ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80048d0:	2378      	movs	r3, #120	; 0x78
 80048d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80048d4:	2302      	movs	r3, #2
 80048d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80048d8:	230f      	movs	r3, #15
 80048da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80048dc:	2302      	movs	r3, #2
 80048de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80048e0:	230c      	movs	r3, #12
 80048e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80048e4:	2300      	movs	r3, #0
 80048e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048f0:	4618      	mov	r0, r3
 80048f2:	f001 ff4d 	bl	8006790 <HAL_RCC_OscConfig>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80048fc:	f000 fa3a 	bl	8004d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004900:	233f      	movs	r3, #63	; 0x3f
 8004902:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004904:	2303      	movs	r3, #3
 8004906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800490c:	2308      	movs	r3, #8
 800490e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004910:	2340      	movs	r3, #64	; 0x40
 8004912:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004914:	2340      	movs	r3, #64	; 0x40
 8004916:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800491e:	2340      	movs	r3, #64	; 0x40
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004922:	f107 030c 	add.w	r3, r7, #12
 8004926:	2104      	movs	r1, #4
 8004928:	4618      	mov	r0, r3
 800492a:	f002 fb5f 	bl	8006fec <HAL_RCC_ClockConfig>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8004934:	f000 fa1e 	bl	8004d74 <Error_Handler>
  }
}
 8004938:	bf00      	nop
 800493a:	3778      	adds	r7, #120	; 0x78
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	58000400 	.word	0x58000400
 8004944:	58024800 	.word	0x58024800
 8004948:	58024400 	.word	0x58024400

0800494c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004950:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 8004952:	4a2f      	ldr	r2, [pc, #188]	; (8004a10 <MX_FDCAN2_Init+0xc4>)
 8004954:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004956:	4b2d      	ldr	r3, [pc, #180]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 8004958:	2200      	movs	r2, #0
 800495a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800495c:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 800495e:	2200      	movs	r2, #0
 8004960:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8004962:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 8004964:	2200      	movs	r2, #0
 8004966:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8004968:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 800496a:	2200      	movs	r2, #0
 800496c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800496e:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 8004970:	2200      	movs	r2, #0
 8004972:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 8004976:	2210      	movs	r2, #16
 8004978:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800497a:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 800497c:	2201      	movs	r2, #1
 800497e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8004980:	4b22      	ldr	r3, [pc, #136]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 8004982:	2202      	movs	r2, #2
 8004984:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8004986:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 8004988:	2202      	movs	r2, #2
 800498a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800498c:	4b1f      	ldr	r3, [pc, #124]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 800498e:	2201      	movs	r2, #1
 8004990:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8004992:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 8004994:	2201      	movs	r2, #1
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8004998:	4b1c      	ldr	r3, [pc, #112]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 800499a:	2201      	movs	r2, #1
 800499c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800499e:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80049aa:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80049b0:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80049b6:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049be:	2204      	movs	r2, #4
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049ca:	2204      	movs	r2, #4
 80049cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80049d4:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049d6:	2204      	movs	r2, #4
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80049da:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049dc:	2200      	movs	r2, #0
 80049de:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80049e6:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80049ec:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80049f2:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049f4:	2204      	movs	r2, #4
 80049f6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80049f8:	4804      	ldr	r0, [pc, #16]	; (8004a0c <MX_FDCAN2_Init+0xc0>)
 80049fa:	f000 fd85 	bl	8005508 <HAL_FDCAN_Init>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8004a04:	f000 f9b6 	bl	8004d74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8004a08:	bf00      	nop
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	2407f410 	.word	0x2407f410
 8004a10:	4000a400 	.word	0x4000a400

08004a14 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004a18:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004a1a:	4a0e      	ldr	r2, [pc, #56]	; (8004a54 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8004a1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004a20:	2210      	movs	r2, #16
 8004a22:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004a32:	2202      	movs	r2, #2
 8004a34:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004a3c:	4804      	ldr	r0, [pc, #16]	; (8004a50 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004a3e:	f001 fdfb 	bl	8006638 <HAL_HCD_Init>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8004a48:	f000 f994 	bl	8004d74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004a4c:	bf00      	nop
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	2407f4b0 	.word	0x2407f4b0
 8004a54:	40080000 	.word	0x40080000

08004a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5e:	f107 0314 	add.w	r3, r7, #20
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	605a      	str	r2, [r3, #4]
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	60da      	str	r2, [r3, #12]
 8004a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a6e:	4b34      	ldr	r3, [pc, #208]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a74:	4a32      	ldr	r2, [pc, #200]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004a76:	f043 0304 	orr.w	r3, r3, #4
 8004a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a7e:	4b30      	ldr	r3, [pc, #192]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a8c:	4b2c      	ldr	r3, [pc, #176]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a92:	4a2b      	ldr	r2, [pc, #172]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a9c:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aaa:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ab0:	4a23      	ldr	r2, [pc, #140]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004ab2:	f043 0302 	orr.w	r3, r3, #2
 8004ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004aba:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ace:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ad8:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <MX_GPIO_Init+0xe8>)
 8004ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	607b      	str	r3, [r7, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2107      	movs	r1, #7
 8004aea:	4816      	ldr	r0, [pc, #88]	; (8004b44 <MX_GPIO_Init+0xec>)
 8004aec:	f001 fd4c 	bl	8006588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004af6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b00:	f107 0314 	add.w	r3, r7, #20
 8004b04:	4619      	mov	r1, r3
 8004b06:	480f      	ldr	r0, [pc, #60]	; (8004b44 <MX_GPIO_Init+0xec>)
 8004b08:	f001 fb76 	bl	80061f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004b0c:	2307      	movs	r3, #7
 8004b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b10:	2301      	movs	r3, #1
 8004b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b1c:	f107 0314 	add.w	r3, r7, #20
 8004b20:	4619      	mov	r1, r3
 8004b22:	4808      	ldr	r0, [pc, #32]	; (8004b44 <MX_GPIO_Init+0xec>)
 8004b24:	f001 fb68 	bl	80061f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2105      	movs	r1, #5
 8004b2c:	2028      	movs	r0, #40	; 0x28
 8004b2e:	f000 fcc3 	bl	80054b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004b32:	2028      	movs	r0, #40	; 0x28
 8004b34:	f000 fcda 	bl	80054ec <HAL_NVIC_EnableIRQ>

}
 8004b38:	bf00      	nop
 8004b3a:	3728      	adds	r7, #40	; 0x28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	58024400 	.word	0x58024400
 8004b44:	58020800 	.word	0x58020800

08004b48 <Task_GreenLED_Handler>:

/* USER CODE BEGIN 4 */
static void Task_GreenLED_Handler(void* parameters)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	6078      	str	r0, [r7, #4]
	TickType_t LastWakeUpTime = xTaskGetTickCount();
 8004b50:	f7fc f88c 	bl	8000c6c <xTaskGetTickCount>
 8004b54:	4603      	mov	r3, r0
 8004b56:	60bb      	str	r3, [r7, #8]
	{
//		user_data = "Green -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8004b58:	481b      	ldr	r0, [pc, #108]	; (8004bc8 <Task_GreenLED_Handler+0x80>)
 8004b5a:	f7ff fcf9 	bl	8004550 <SEGGER_SYSVIEW_PrintfTarget>


		// 1000 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004b5e:	2102      	movs	r1, #2
 8004b60:	481a      	ldr	r0, [pc, #104]	; (8004bcc <Task_GreenLED_Handler+0x84>)
 8004b62:	f001 fd2a 	bl	80065ba <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(1000));
 8004b66:	f107 0308 	add.w	r3, r7, #8
 8004b6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fb feb8 	bl	80008e4 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004b74:	2102      	movs	r1, #2
 8004b76:	4815      	ldr	r0, [pc, #84]	; (8004bcc <Task_GreenLED_Handler+0x84>)
 8004b78:	f001 fd1f 	bl	80065ba <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(1000));
 8004b7c:	f107 0308 	add.w	r3, r7, #8
 8004b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fb fead 	bl	80008e4 <xTaskDelayUntil>
		NotificationStatus =xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8004b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2300      	movs	r3, #0
 8004b92:	2200      	movs	r2, #0
 8004b94:	2100      	movs	r1, #0
 8004b96:	2000      	movs	r0, #0
 8004b98:	f7fc fa3e 	bl	8001018 <xTaskGenericNotifyWait>
 8004b9c:	60f8      	str	r0, [r7, #12]
		if(NotificationStatus == pdTRUE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d1d9      	bne.n	8004b58 <Task_GreenLED_Handler+0x10>
		{
			vTaskSuspendAll();
 8004ba4:	f7fb ffc0 	bl	8000b28 <vTaskSuspendAll>
			Next_Task_Handle = Task_RedLED_Handle;
 8004ba8:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <Task_GreenLED_Handler+0x88>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <Task_GreenLED_Handler+0x8c>)
 8004bae:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8004bb0:	f7fb ffc8 	bl	8000b44 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Green_PIN, GPIO_PIN_SET);
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	4804      	ldr	r0, [pc, #16]	; (8004bcc <Task_GreenLED_Handler+0x84>)
 8004bba:	f001 fce5 	bl	8006588 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f7fb fde4 	bl	800078c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8004bc4:	e7c8      	b.n	8004b58 <Task_GreenLED_Handler+0x10>
 8004bc6:	bf00      	nop
 8004bc8:	0800948c 	.word	0x0800948c
 8004bcc:	58020800 	.word	0x58020800
 8004bd0:	2407f7b8 	.word	0x2407f7b8
 8004bd4:	2407f7c4 	.word	0x2407f7c4

08004bd8 <Task_RedLED_Handler>:
	}
}


static void Task_RedLED_Handler(void* parameters)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	6078      	str	r0, [r7, #4]
	TickType_t LastWakeUpTime = xTaskGetTickCount();
 8004be0:	f7fc f844 	bl	8000c6c <xTaskGetTickCount>
 8004be4:	4603      	mov	r3, r0
 8004be6:	60bb      	str	r3, [r7, #8]
	{
//		user_data = "Red -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8004be8:	481b      	ldr	r0, [pc, #108]	; (8004c58 <Task_RedLED_Handler+0x80>)
 8004bea:	f7ff fcb1 	bl	8004550 <SEGGER_SYSVIEW_PrintfTarget>


		// 800 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004bee:	2101      	movs	r1, #1
 8004bf0:	481a      	ldr	r0, [pc, #104]	; (8004c5c <Task_RedLED_Handler+0x84>)
 8004bf2:	f001 fce2 	bl	80065ba <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(800));
 8004bf6:	f107 0308 	add.w	r3, r7, #8
 8004bfa:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fb fe70 	bl	80008e4 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004c04:	2101      	movs	r1, #1
 8004c06:	4815      	ldr	r0, [pc, #84]	; (8004c5c <Task_RedLED_Handler+0x84>)
 8004c08:	f001 fcd7 	bl	80065ba <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(800));
 8004c0c:	f107 0308 	add.w	r3, r7, #8
 8004c10:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fb fe65 	bl	80008e4 <xTaskDelayUntil>
		NotificationStatus =xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8004c1a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	2300      	movs	r3, #0
 8004c22:	2200      	movs	r2, #0
 8004c24:	2100      	movs	r1, #0
 8004c26:	2000      	movs	r0, #0
 8004c28:	f7fc f9f6 	bl	8001018 <xTaskGenericNotifyWait>
 8004c2c:	60f8      	str	r0, [r7, #12]
		if(NotificationStatus == pdTRUE)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d1d9      	bne.n	8004be8 <Task_RedLED_Handler+0x10>
		{
			vTaskSuspendAll();
 8004c34:	f7fb ff78 	bl	8000b28 <vTaskSuspendAll>
			Next_Task_Handle = Task_BlueLED_Handle;
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <Task_RedLED_Handler+0x88>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <Task_RedLED_Handler+0x8c>)
 8004c3e:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8004c40:	f7fb ff80 	bl	8000b44 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Red_PIN, GPIO_PIN_SET);
 8004c44:	2201      	movs	r2, #1
 8004c46:	2101      	movs	r1, #1
 8004c48:	4804      	ldr	r0, [pc, #16]	; (8004c5c <Task_RedLED_Handler+0x84>)
 8004c4a:	f001 fc9d 	bl	8006588 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f7fb fd9c 	bl	800078c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8004c54:	e7c8      	b.n	8004be8 <Task_RedLED_Handler+0x10>
 8004c56:	bf00      	nop
 8004c58:	080094a0 	.word	0x080094a0
 8004c5c:	58020800 	.word	0x58020800
 8004c60:	2407f7bc 	.word	0x2407f7bc
 8004c64:	2407f7c4 	.word	0x2407f7c4

08004c68 <Task_BlueLED_Handler>:
	}
}


static void Task_BlueLED_Handler(void* parameters)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	6078      	str	r0, [r7, #4]
	TickType_t LastWakeUpTime = xTaskGetTickCount();
 8004c70:	f7fb fffc 	bl	8000c6c <xTaskGetTickCount>
 8004c74:	4603      	mov	r3, r0
 8004c76:	60bb      	str	r3, [r7, #8]
	{
//		user_data = "Blue -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8004c78:	481d      	ldr	r0, [pc, #116]	; (8004cf0 <Task_BlueLED_Handler+0x88>)
 8004c7a:	f7ff fc69 	bl	8004550 <SEGGER_SYSVIEW_PrintfTarget>


		// 400 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004c7e:	2104      	movs	r1, #4
 8004c80:	481c      	ldr	r0, [pc, #112]	; (8004cf4 <Task_BlueLED_Handler+0x8c>)
 8004c82:	f001 fc9a 	bl	80065ba <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(400));
 8004c86:	f107 0308 	add.w	r3, r7, #8
 8004c8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fb fe28 	bl	80008e4 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004c94:	2104      	movs	r1, #4
 8004c96:	4817      	ldr	r0, [pc, #92]	; (8004cf4 <Task_BlueLED_Handler+0x8c>)
 8004c98:	f001 fc8f 	bl	80065ba <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(400));
 8004c9c:	f107 0308 	add.w	r3, r7, #8
 8004ca0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fb fe1d 	bl	80008e4 <xTaskDelayUntil>
		NotificationStatus =xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8004caa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f7fc f9ae 	bl	8001018 <xTaskGenericNotifyWait>
 8004cbc:	60f8      	str	r0, [r7, #12]
		if(NotificationStatus == pdTRUE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d1d9      	bne.n	8004c78 <Task_BlueLED_Handler+0x10>
		{
			vTaskSuspendAll();
 8004cc4:	f7fb ff30 	bl	8000b28 <vTaskSuspendAll>
			Next_Task_Handle = NULL;
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <Task_BlueLED_Handler+0x90>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8004cce:	f7fb ff39 	bl	8000b44 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Blue_PIN, GPIO_PIN_SET);
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	2104      	movs	r1, #4
 8004cd6:	4807      	ldr	r0, [pc, #28]	; (8004cf4 <Task_BlueLED_Handler+0x8c>)
 8004cd8:	f001 fc56 	bl	8006588 <HAL_GPIO_WritePin>
			vTaskDelete(Task_Button_Handle);
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <Task_BlueLED_Handler+0x94>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fb fd53 	bl	800078c <vTaskDelete>
			vTaskDelete(NULL);
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f7fb fd50 	bl	800078c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8004cec:	e7c4      	b.n	8004c78 <Task_BlueLED_Handler+0x10>
 8004cee:	bf00      	nop
 8004cf0:	080094b4 	.word	0x080094b4
 8004cf4:	58020800 	.word	0x58020800
 8004cf8:	2407f7c4 	.word	0x2407f7c4
 8004cfc:	2407f7c0 	.word	0x2407f7c0

08004d00 <Task_Button_Handler>:
	}
}


static void Task_Button_Handler(void* parameters)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	6078      	str	r0, [r7, #4]
	uint8_t Button_Read = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_Read = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		Button_Read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8004d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d14:	480c      	ldr	r0, [pc, #48]	; (8004d48 <Task_Button_Handler+0x48>)
 8004d16:	f001 fc1f 	bl	8006558 <HAL_GPIO_ReadPin>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	73bb      	strb	r3, [r7, #14]

		if(Button_Read)
 8004d1e:	7bbb      	ldrb	r3, [r7, #14]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00b      	beq.n	8004d3c <Task_Button_Handler+0x3c>
		{
			if (! prev_Read)
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d108      	bne.n	8004d3c <Task_Button_Handler+0x3c>
				xTaskNotify(Next_Task_Handle, 0, eNoAction);
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <Task_Button_Handler+0x4c>)
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	2300      	movs	r3, #0
 8004d34:	2200      	movs	r2, #0
 8004d36:	2100      	movs	r1, #0
 8004d38:	f7fc f9fe 	bl	8001138 <xTaskGenericNotify>
		}
		prev_Read = Button_Read;
 8004d3c:	7bbb      	ldrb	r3, [r7, #14]
 8004d3e:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8004d40:	200a      	movs	r0, #10
 8004d42:	f7fb fe57 	bl	80009f4 <vTaskDelay>
		Button_Read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8004d46:	e7e3      	b.n	8004d10 <Task_Button_Handler+0x10>
 8004d48:	58020800 	.word	0x58020800
 8004d4c:	2407f7c4 	.word	0x2407f7c4

08004d50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a04      	ldr	r2, [pc, #16]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004d62:	f000 faa1 	bl	80052a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40001000 	.word	0x40001000

08004d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d78:	b672      	cpsid	i
}
 8004d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d7c:	e7fe      	b.n	8004d7c <Error_Handler+0x8>
	...

08004d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <HAL_MspInit+0x30>)
 8004d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d8c:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <HAL_MspInit+0x30>)
 8004d8e:	f043 0302 	orr.w	r3, r3, #2
 8004d92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_MspInit+0x30>)
 8004d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	607b      	str	r3, [r7, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	58024400 	.word	0x58024400

08004db4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b0b8      	sub	sp, #224	; 0xe0
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	605a      	str	r2, [r3, #4]
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004dcc:	f107 0310 	add.w	r3, r7, #16
 8004dd0:	22bc      	movs	r2, #188	; 0xbc
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f004 fab3 	bl	8009340 <memset>
  if(hfdcan->Instance==FDCAN2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a2d      	ldr	r2, [pc, #180]	; (8004e94 <HAL_FDCAN_MspInit+0xe0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d153      	bne.n	8004e8c <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004dea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004dee:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004df0:	f107 0310 	add.w	r3, r7, #16
 8004df4:	4618      	mov	r0, r3
 8004df6:	f002 fcb1 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004e00:	f7ff ffb8 	bl	8004d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004e04:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <HAL_FDCAN_MspInit+0xe4>)
 8004e06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e0a:	4a23      	ldr	r2, [pc, #140]	; (8004e98 <HAL_FDCAN_MspInit+0xe4>)
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e10:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004e14:	4b20      	ldr	r3, [pc, #128]	; (8004e98 <HAL_FDCAN_MspInit+0xe4>)
 8004e16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <HAL_FDCAN_MspInit+0xe4>)
 8004e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e28:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <HAL_FDCAN_MspInit+0xe4>)
 8004e2a:	f043 0302 	orr.w	r3, r3, #2
 8004e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e32:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <HAL_FDCAN_MspInit+0xe4>)
 8004e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004e40:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004e44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8004e5a:	2309      	movs	r3, #9
 8004e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004e64:	4619      	mov	r1, r3
 8004e66:	480d      	ldr	r0, [pc, #52]	; (8004e9c <HAL_FDCAN_MspInit+0xe8>)
 8004e68:	f001 f9c6 	bl	80061f8 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	2014      	movs	r0, #20
 8004e72:	f000 fb21 	bl	80054b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8004e76:	2014      	movs	r0, #20
 8004e78:	f000 fb38 	bl	80054ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2100      	movs	r1, #0
 8004e80:	2016      	movs	r0, #22
 8004e82:	f000 fb19 	bl	80054b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8004e86:	2016      	movs	r0, #22
 8004e88:	f000 fb30 	bl	80054ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8004e8c:	bf00      	nop
 8004e8e:	37e0      	adds	r7, #224	; 0xe0
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	4000a400 	.word	0x4000a400
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	58020400 	.word	0x58020400

08004ea0 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b0b8      	sub	sp, #224	; 0xe0
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	60da      	str	r2, [r3, #12]
 8004eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004eb8:	f107 0310 	add.w	r3, r7, #16
 8004ebc:	22bc      	movs	r2, #188	; 0xbc
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f004 fa3d 	bl	8009340 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a27      	ldr	r2, [pc, #156]	; (8004f68 <HAL_HCD_MspInit+0xc8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d146      	bne.n	8004f5e <HAL_HCD_MspInit+0xbe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004ed0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ed4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004ed6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004eda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ede:	f107 0310 	add.w	r3, r7, #16
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f002 fc3a 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8004eee:	f7ff ff41 	bl	8004d74 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8004ef2:	f001 fc3d 	bl	8006770 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <HAL_HCD_MspInit+0xcc>)
 8004ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004efc:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_HCD_MspInit+0xcc>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f06:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_HCD_MspInit+0xcc>)
 8004f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004f14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004f2e:	230a      	movs	r3, #10
 8004f30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f38:	4619      	mov	r1, r3
 8004f3a:	480d      	ldr	r0, [pc, #52]	; (8004f70 <HAL_HCD_MspInit+0xd0>)
 8004f3c:	f001 f95c 	bl	80061f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <HAL_HCD_MspInit+0xcc>)
 8004f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f46:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <HAL_HCD_MspInit+0xcc>)
 8004f48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <HAL_HCD_MspInit+0xcc>)
 8004f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004f5e:	bf00      	nop
 8004f60:	37e0      	adds	r7, #224	; 0xe0
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40080000 	.word	0x40080000
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	58020000 	.word	0x58020000

08004f74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b090      	sub	sp, #64	; 0x40
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b0f      	cmp	r3, #15
 8004f80:	d827      	bhi.n	8004fd2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004f82:	2200      	movs	r2, #0
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	2036      	movs	r0, #54	; 0x36
 8004f88:	f000 fa96 	bl	80054b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f8c:	2036      	movs	r0, #54	; 0x36
 8004f8e:	f000 faad 	bl	80054ec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004f92:	4a29      	ldr	r2, [pc, #164]	; (8005038 <HAL_InitTick+0xc4>)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004f98:	4b28      	ldr	r3, [pc, #160]	; (800503c <HAL_InitTick+0xc8>)
 8004f9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f9e:	4a27      	ldr	r2, [pc, #156]	; (800503c <HAL_InitTick+0xc8>)
 8004fa0:	f043 0310 	orr.w	r3, r3, #16
 8004fa4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004fa8:	4b24      	ldr	r3, [pc, #144]	; (800503c <HAL_InitTick+0xc8>)
 8004faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004fb6:	f107 0210 	add.w	r2, r7, #16
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f002 fb89 	bl	80076d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <HAL_InitTick+0x6a>
 8004fd0:	e001      	b.n	8004fd6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e02b      	b.n	800502e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004fd6:	f002 fb69 	bl	80076ac <HAL_RCC_GetPCLK1Freq>
 8004fda:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004fdc:	e004      	b.n	8004fe8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004fde:	f002 fb65 	bl	80076ac <HAL_RCC_GetPCLK1Freq>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fea:	4a15      	ldr	r2, [pc, #84]	; (8005040 <HAL_InitTick+0xcc>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	0c9b      	lsrs	r3, r3, #18
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004ff6:	4b13      	ldr	r3, [pc, #76]	; (8005044 <HAL_InitTick+0xd0>)
 8004ff8:	4a13      	ldr	r2, [pc, #76]	; (8005048 <HAL_InitTick+0xd4>)
 8004ffa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004ffc:	4b11      	ldr	r3, [pc, #68]	; (8005044 <HAL_InitTick+0xd0>)
 8004ffe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005002:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005004:	4a0f      	ldr	r2, [pc, #60]	; (8005044 <HAL_InitTick+0xd0>)
 8005006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005008:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800500a:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <HAL_InitTick+0xd0>)
 800500c:	2200      	movs	r2, #0
 800500e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <HAL_InitTick+0xd0>)
 8005012:	2200      	movs	r2, #0
 8005014:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005016:	480b      	ldr	r0, [pc, #44]	; (8005044 <HAL_InitTick+0xd0>)
 8005018:	f003 fc4a 	bl	80088b0 <HAL_TIM_Base_Init>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005022:	4808      	ldr	r0, [pc, #32]	; (8005044 <HAL_InitTick+0xd0>)
 8005024:	f003 fca6 	bl	8008974 <HAL_TIM_Base_Start_IT>
 8005028:	4603      	mov	r3, r0
 800502a:	e000      	b.n	800502e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
}
 800502e:	4618      	mov	r0, r3
 8005030:	3740      	adds	r7, #64	; 0x40
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	24000018 	.word	0x24000018
 800503c:	58024400 	.word	0x58024400
 8005040:	431bde83 	.word	0x431bde83
 8005044:	2407f7c8 	.word	0x2407f7c8
 8005048:	40001000 	.word	0x40001000

0800504c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005050:	e7fe      	b.n	8005050 <NMI_Handler+0x4>

08005052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005052:	b480      	push	{r7}
 8005054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005056:	e7fe      	b.n	8005056 <HardFault_Handler+0x4>

08005058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800505c:	e7fe      	b.n	800505c <MemManage_Handler+0x4>

0800505e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800505e:	b480      	push	{r7}
 8005060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005062:	e7fe      	b.n	8005062 <BusFault_Handler+0x4>

08005064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005068:	e7fe      	b.n	8005068 <UsageFault_Handler+0x4>

0800506a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800506a:	b480      	push	{r7}
 800506c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800506e:	bf00      	nop
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800507c:	4802      	ldr	r0, [pc, #8]	; (8005088 <FDCAN2_IT0_IRQHandler+0x10>)
 800507e:	f000 fc21 	bl	80058c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8005082:	bf00      	nop
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	2407f410 	.word	0x2407f410

0800508c <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8005090:	4802      	ldr	r0, [pc, #8]	; (800509c <FDCAN2_IT1_IRQHandler+0x10>)
 8005092:	f000 fc17 	bl	80058c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	2407f410 	.word	0x2407f410

080050a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80050a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80050a8:	f001 faa1 	bl	80065ee <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80050ac:	bf00      	nop
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80050b4:	4802      	ldr	r0, [pc, #8]	; (80050c0 <TIM6_DAC_IRQHandler+0x10>)
 80050b6:	f003 fcd5 	bl	8008a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	2407f7c8 	.word	0x2407f7c8

080050c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80050c8:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <SystemInit+0xec>)
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ce:	4a38      	ldr	r2, [pc, #224]	; (80051b0 <SystemInit+0xec>)
 80050d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80050d8:	4b36      	ldr	r3, [pc, #216]	; (80051b4 <SystemInit+0xf0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	2b06      	cmp	r3, #6
 80050e2:	d807      	bhi.n	80050f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80050e4:	4b33      	ldr	r3, [pc, #204]	; (80051b4 <SystemInit+0xf0>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f023 030f 	bic.w	r3, r3, #15
 80050ec:	4a31      	ldr	r2, [pc, #196]	; (80051b4 <SystemInit+0xf0>)
 80050ee:	f043 0307 	orr.w	r3, r3, #7
 80050f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80050f4:	4b30      	ldr	r3, [pc, #192]	; (80051b8 <SystemInit+0xf4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2f      	ldr	r2, [pc, #188]	; (80051b8 <SystemInit+0xf4>)
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005100:	4b2d      	ldr	r3, [pc, #180]	; (80051b8 <SystemInit+0xf4>)
 8005102:	2200      	movs	r2, #0
 8005104:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005106:	4b2c      	ldr	r3, [pc, #176]	; (80051b8 <SystemInit+0xf4>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	492b      	ldr	r1, [pc, #172]	; (80051b8 <SystemInit+0xf4>)
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <SystemInit+0xf8>)
 800510e:	4013      	ands	r3, r2
 8005110:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005112:	4b28      	ldr	r3, [pc, #160]	; (80051b4 <SystemInit+0xf0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800511e:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <SystemInit+0xf0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 030f 	bic.w	r3, r3, #15
 8005126:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <SystemInit+0xf0>)
 8005128:	f043 0307 	orr.w	r3, r3, #7
 800512c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800512e:	4b22      	ldr	r3, [pc, #136]	; (80051b8 <SystemInit+0xf4>)
 8005130:	2200      	movs	r2, #0
 8005132:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005134:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <SystemInit+0xf4>)
 8005136:	2200      	movs	r2, #0
 8005138:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800513a:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <SystemInit+0xf4>)
 800513c:	2200      	movs	r2, #0
 800513e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <SystemInit+0xf4>)
 8005142:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <SystemInit+0xfc>)
 8005144:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005146:	4b1c      	ldr	r3, [pc, #112]	; (80051b8 <SystemInit+0xf4>)
 8005148:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <SystemInit+0x100>)
 800514a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800514c:	4b1a      	ldr	r3, [pc, #104]	; (80051b8 <SystemInit+0xf4>)
 800514e:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <SystemInit+0x104>)
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005152:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <SystemInit+0xf4>)
 8005154:	2200      	movs	r2, #0
 8005156:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005158:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <SystemInit+0xf4>)
 800515a:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <SystemInit+0x104>)
 800515c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800515e:	4b16      	ldr	r3, [pc, #88]	; (80051b8 <SystemInit+0xf4>)
 8005160:	2200      	movs	r2, #0
 8005162:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005164:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <SystemInit+0xf4>)
 8005166:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <SystemInit+0x104>)
 8005168:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800516a:	4b13      	ldr	r3, [pc, #76]	; (80051b8 <SystemInit+0xf4>)
 800516c:	2200      	movs	r2, #0
 800516e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <SystemInit+0xf4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <SystemInit+0xf4>)
 8005176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800517a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <SystemInit+0xf4>)
 800517e:	2200      	movs	r2, #0
 8005180:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005182:	4b12      	ldr	r3, [pc, #72]	; (80051cc <SystemInit+0x108>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <SystemInit+0x10c>)
 8005188:	4013      	ands	r3, r2
 800518a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518e:	d202      	bcs.n	8005196 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005190:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <SystemInit+0x110>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005196:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <SystemInit+0x114>)
 8005198:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800519c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800519e:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <SystemInit+0xec>)
 80051a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051a4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80051a6:	bf00      	nop
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	e000ed00 	.word	0xe000ed00
 80051b4:	52002000 	.word	0x52002000
 80051b8:	58024400 	.word	0x58024400
 80051bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80051c0:	02020200 	.word	0x02020200
 80051c4:	01ff0000 	.word	0x01ff0000
 80051c8:	01010280 	.word	0x01010280
 80051cc:	5c001000 	.word	0x5c001000
 80051d0:	ffff0000 	.word	0xffff0000
 80051d4:	51008108 	.word	0x51008108
 80051d8:	52004000 	.word	0x52004000

080051dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80051dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005214 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80051e0:	f7ff ff70 	bl	80050c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051e4:	480c      	ldr	r0, [pc, #48]	; (8005218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80051e6:	490d      	ldr	r1, [pc, #52]	; (800521c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80051e8:	4a0d      	ldr	r2, [pc, #52]	; (8005220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80051ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051ec:	e002      	b.n	80051f4 <LoopCopyDataInit>

080051ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051f2:	3304      	adds	r3, #4

080051f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051f8:	d3f9      	bcc.n	80051ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051fa:	4a0a      	ldr	r2, [pc, #40]	; (8005224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80051fc:	4c0a      	ldr	r4, [pc, #40]	; (8005228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80051fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005200:	e001      	b.n	8005206 <LoopFillZerobss>

08005202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005204:	3204      	adds	r2, #4

08005206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005208:	d3fb      	bcc.n	8005202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800520a:	f004 f857 	bl	80092bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800520e:	f7ff fa3d 	bl	800468c <main>
  bx  lr
 8005212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005214:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005218:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800521c:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8005220:	08009568 	.word	0x08009568
  ldr r2, =_sbss
 8005224:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8005228:	2407f818 	.word	0x2407f818

0800522c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800522c:	e7fe      	b.n	800522c <ADC3_IRQHandler>
	...

08005230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005236:	2003      	movs	r0, #3
 8005238:	f000 f933 	bl	80054a2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800523c:	f002 f88c 	bl	8007358 <HAL_RCC_GetSysClockFreq>
 8005240:	4602      	mov	r2, r0
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <HAL_Init+0x68>)
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	0a1b      	lsrs	r3, r3, #8
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	4913      	ldr	r1, [pc, #76]	; (800529c <HAL_Init+0x6c>)
 800524e:	5ccb      	ldrb	r3, [r1, r3]
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
 8005258:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800525a:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <HAL_Init+0x68>)
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	4a0e      	ldr	r2, [pc, #56]	; (800529c <HAL_Init+0x6c>)
 8005264:	5cd3      	ldrb	r3, [r2, r3]
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
 8005270:	4a0b      	ldr	r2, [pc, #44]	; (80052a0 <HAL_Init+0x70>)
 8005272:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005274:	4a0b      	ldr	r2, [pc, #44]	; (80052a4 <HAL_Init+0x74>)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800527a:	200f      	movs	r0, #15
 800527c:	f7ff fe7a 	bl	8004f74 <HAL_InitTick>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e002      	b.n	8005290 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800528a:	f7ff fd79 	bl	8004d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	58024400 	.word	0x58024400
 800529c:	08009550 	.word	0x08009550
 80052a0:	24000014 	.word	0x24000014
 80052a4:	24000010 	.word	0x24000010

080052a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80052ac:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <HAL_IncTick+0x20>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_IncTick+0x24>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4413      	add	r3, r2
 80052b8:	4a04      	ldr	r2, [pc, #16]	; (80052cc <HAL_IncTick+0x24>)
 80052ba:	6013      	str	r3, [r2, #0]
}
 80052bc:	bf00      	nop
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	2400001c 	.word	0x2400001c
 80052cc:	2407f814 	.word	0x2407f814

080052d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  return uwTick;
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <HAL_GetTick+0x14>)
 80052d6:	681b      	ldr	r3, [r3, #0]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	2407f814 	.word	0x2407f814

080052e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052f0:	f7ff ffee 	bl	80052d0 <HAL_GetTick>
 80052f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d005      	beq.n	800530e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <HAL_Delay+0x44>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800530e:	bf00      	nop
 8005310:	f7ff ffde 	bl	80052d0 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	429a      	cmp	r2, r3
 800531e:	d8f7      	bhi.n	8005310 <HAL_Delay+0x28>
  {
  }
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	2400001c 	.word	0x2400001c

08005330 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <HAL_GetREVID+0x14>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	0c1b      	lsrs	r3, r3, #16
}
 800533a:	4618      	mov	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	5c001000 	.word	0x5c001000

08005348 <__NVIC_SetPriorityGrouping>:
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <__NVIC_SetPriorityGrouping+0x40>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005364:	4013      	ands	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005370:	4b06      	ldr	r3, [pc, #24]	; (800538c <__NVIC_SetPriorityGrouping+0x44>)
 8005372:	4313      	orrs	r3, r2
 8005374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005376:	4a04      	ldr	r2, [pc, #16]	; (8005388 <__NVIC_SetPriorityGrouping+0x40>)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	60d3      	str	r3, [r2, #12]
}
 800537c:	bf00      	nop
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	e000ed00 	.word	0xe000ed00
 800538c:	05fa0000 	.word	0x05fa0000

08005390 <__NVIC_GetPriorityGrouping>:
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	0a1b      	lsrs	r3, r3, #8
 800539a:	f003 0307 	and.w	r3, r3, #7
}
 800539e:	4618      	mov	r0, r3
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	e000ed00 	.word	0xe000ed00

080053ac <__NVIC_EnableIRQ>:
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	db0b      	blt.n	80053d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	f003 021f 	and.w	r2, r3, #31
 80053c4:	4907      	ldr	r1, [pc, #28]	; (80053e4 <__NVIC_EnableIRQ+0x38>)
 80053c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2001      	movs	r0, #1
 80053ce:	fa00 f202 	lsl.w	r2, r0, r2
 80053d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	e000e100 	.word	0xe000e100

080053e8 <__NVIC_SetPriority>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	6039      	str	r1, [r7, #0]
 80053f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	db0a      	blt.n	8005412 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	490c      	ldr	r1, [pc, #48]	; (8005434 <__NVIC_SetPriority+0x4c>)
 8005402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005406:	0112      	lsls	r2, r2, #4
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	440b      	add	r3, r1
 800540c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005410:	e00a      	b.n	8005428 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	4908      	ldr	r1, [pc, #32]	; (8005438 <__NVIC_SetPriority+0x50>)
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	3b04      	subs	r3, #4
 8005420:	0112      	lsls	r2, r2, #4
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	440b      	add	r3, r1
 8005426:	761a      	strb	r2, [r3, #24]
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	e000e100 	.word	0xe000e100
 8005438:	e000ed00 	.word	0xe000ed00

0800543c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f1c3 0307 	rsb	r3, r3, #7
 8005456:	2b04      	cmp	r3, #4
 8005458:	bf28      	it	cs
 800545a:	2304      	movcs	r3, #4
 800545c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	3304      	adds	r3, #4
 8005462:	2b06      	cmp	r3, #6
 8005464:	d902      	bls.n	800546c <NVIC_EncodePriority+0x30>
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3b03      	subs	r3, #3
 800546a:	e000      	b.n	800546e <NVIC_EncodePriority+0x32>
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005470:	f04f 32ff 	mov.w	r2, #4294967295
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43da      	mvns	r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	401a      	ands	r2, r3
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005484:	f04f 31ff 	mov.w	r1, #4294967295
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	fa01 f303 	lsl.w	r3, r1, r3
 800548e:	43d9      	mvns	r1, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005494:	4313      	orrs	r3, r2
         );
}
 8005496:	4618      	mov	r0, r3
 8005498:	3724      	adds	r7, #36	; 0x24
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff ff4c 	bl	8005348 <__NVIC_SetPriorityGrouping>
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054c6:	f7ff ff63 	bl	8005390 <__NVIC_GetPriorityGrouping>
 80054ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	6978      	ldr	r0, [r7, #20]
 80054d2:	f7ff ffb3 	bl	800543c <NVIC_EncodePriority>
 80054d6:	4602      	mov	r2, r0
 80054d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054dc:	4611      	mov	r1, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff ff82 	bl	80053e8 <__NVIC_SetPriority>
}
 80054e4:	bf00      	nop
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff ff56 	bl	80053ac <__NVIC_EnableIRQ>
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b098      	sub	sp, #96	; 0x60
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005510:	4a84      	ldr	r2, [pc, #528]	; (8005724 <HAL_FDCAN_Init+0x21c>)
 8005512:	f107 030c 	add.w	r3, r7, #12
 8005516:	4611      	mov	r1, r2
 8005518:	224c      	movs	r2, #76	; 0x4c
 800551a:	4618      	mov	r0, r3
 800551c:	f003 ff02 	bl	8009324 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e1c6      	b.n	80058b8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a7e      	ldr	r2, [pc, #504]	; (8005728 <HAL_FDCAN_Init+0x220>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d106      	bne.n	8005542 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800553c:	461a      	mov	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fc2c 	bl	8004db4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0210 	bic.w	r2, r2, #16
 800556a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800556c:	f7ff feb0 	bl	80052d0 <HAL_GetTick>
 8005570:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005572:	e014      	b.n	800559e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005574:	f7ff feac 	bl	80052d0 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b0a      	cmp	r3, #10
 8005580:	d90d      	bls.n	800559e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005588:	f043 0201 	orr.w	r2, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2203      	movs	r2, #3
 8005596:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e18c      	b.n	80058b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d0e3      	beq.n	8005574 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055bc:	f7ff fe88 	bl	80052d0 <HAL_GetTick>
 80055c0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80055c2:	e014      	b.n	80055ee <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80055c4:	f7ff fe84 	bl	80052d0 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b0a      	cmp	r3, #10
 80055d0:	d90d      	bls.n	80055ee <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055d8:	f043 0201 	orr.w	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2203      	movs	r2, #3
 80055e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e164      	b.n	80058b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0e3      	beq.n	80055c4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0202 	orr.w	r2, r2, #2
 800560a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	7c1b      	ldrb	r3, [r3, #16]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d108      	bne.n	8005626 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005622:	619a      	str	r2, [r3, #24]
 8005624:	e007      	b.n	8005636 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699a      	ldr	r2, [r3, #24]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005634:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	7c5b      	ldrb	r3, [r3, #17]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d108      	bne.n	8005650 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800564c:	619a      	str	r2, [r3, #24]
 800564e:	e007      	b.n	8005660 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800565e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	7c9b      	ldrb	r3, [r3, #18]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d108      	bne.n	800567a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005676:	619a      	str	r2, [r3, #24]
 8005678:	e007      	b.n	800568a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005688:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80056ae:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0210 	bic.w	r2, r2, #16
 80056be:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d108      	bne.n	80056da <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0204 	orr.w	r2, r2, #4
 80056d6:	619a      	str	r2, [r3, #24]
 80056d8:	e030      	b.n	800573c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d02c      	beq.n	800573c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d020      	beq.n	800572c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056f8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0210 	orr.w	r2, r2, #16
 8005708:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d114      	bne.n	800573c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0220 	orr.w	r2, r2, #32
 8005720:	619a      	str	r2, [r3, #24]
 8005722:	e00b      	b.n	800573c <HAL_FDCAN_Init+0x234>
 8005724:	080094c8 	.word	0x080094c8
 8005728:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0220 	orr.w	r2, r2, #32
 800573a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	3b01      	subs	r3, #1
 8005742:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	3b01      	subs	r3, #1
 800574a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800574c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005754:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	3b01      	subs	r3, #1
 800575e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005764:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005766:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005770:	d115      	bne.n	800579e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	3b01      	subs	r3, #1
 800577e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005780:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	3b01      	subs	r3, #1
 8005788:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800578a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	3b01      	subs	r3, #1
 8005794:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800579a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800579c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c4:	4413      	add	r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d011      	beq.n	80057ee <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80057d2:	f023 0107 	bic.w	r1, r3, #7
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	3360      	adds	r3, #96	; 0x60
 80057de:	443b      	add	r3, r7
 80057e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d011      	beq.n	800581a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80057fe:	f023 0107 	bic.w	r1, r3, #7
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	3360      	adds	r3, #96	; 0x60
 800580a:	443b      	add	r3, r7
 800580c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581e:	2b00      	cmp	r3, #0
 8005820:	d012      	beq.n	8005848 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800582a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	3360      	adds	r3, #96	; 0x60
 8005836:	443b      	add	r3, r7
 8005838:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800583c:	011a      	lsls	r2, r3, #4
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584c:	2b00      	cmp	r3, #0
 800584e:	d012      	beq.n	8005876 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005858:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	3360      	adds	r3, #96	; 0x60
 8005864:	443b      	add	r3, r7
 8005866:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800586a:	021a      	lsls	r2, r3, #8
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a11      	ldr	r2, [pc, #68]	; (80058c0 <HAL_FDCAN_Init+0x3b8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d107      	bne.n	8005890 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f022 0203 	bic.w	r2, r2, #3
 800588e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fb1f 	bl	8005eec <FDCAN_CalcultateRamBlockAddresses>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80058b4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3760      	adds	r7, #96	; 0x60
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	4000a000 	.word	0x4000a000

080058c4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b096      	sub	sp, #88	; 0x58
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80058cc:	4b9a      	ldr	r3, [pc, #616]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	079b      	lsls	r3, r3, #30
 80058d2:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80058d4:	4b98      	ldr	r3, [pc, #608]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	079b      	lsls	r3, r3, #30
 80058da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058dc:	4013      	ands	r3, r2
 80058de:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80058ea:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058f4:	4013      	ands	r3, r2
 80058f6:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800590c:	4013      	ands	r3, r2
 800590e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005924:	4013      	ands	r3, r2
 8005926:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800592e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8005932:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800593c:	4013      	ands	r3, r2
 800593e:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005946:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800594a:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005954:	4013      	ands	r3, r2
 8005956:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005966:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596a:	0a1b      	lsrs	r3, r3, #8
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d010      	beq.n	8005996 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005988:	651a      	str	r2, [r3, #80]	; 0x50
 800598a:	4b6b      	ldr	r3, [pc, #428]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 800598c:	2200      	movs	r2, #0
 800598e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fa5f 	bl	8005e54 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005998:	0a9b      	lsrs	r3, r3, #10
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01d      	beq.n	80059de <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	0a9b      	lsrs	r3, r3, #10
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d017      	beq.n	80059de <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80059b6:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059c2:	4013      	ands	r3, r2
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059ce:	651a      	str	r2, [r3, #80]	; 0x50
 80059d0:	4b59      	ldr	r3, [pc, #356]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80059d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fa12 	bl	8005e02 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80059de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00d      	beq.n	8005a00 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059ea:	4b54      	ldr	r3, [pc, #336]	; (8005b3c <HAL_FDCAN_IRQHandler+0x278>)
 80059ec:	400b      	ands	r3, r1
 80059ee:	6513      	str	r3, [r2, #80]	; 0x50
 80059f0:	4a51      	ldr	r2, [pc, #324]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 80059f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f4:	0f9b      	lsrs	r3, r3, #30
 80059f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80059f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f9c0 	bl	8005d80 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00d      	beq.n	8005a22 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a0c:	4b4b      	ldr	r3, [pc, #300]	; (8005b3c <HAL_FDCAN_IRQHandler+0x278>)
 8005a0e:	400b      	ands	r3, r1
 8005a10:	6513      	str	r3, [r2, #80]	; 0x50
 8005a12:	4a49      	ldr	r2, [pc, #292]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 8005a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a16:	0f9b      	lsrs	r3, r3, #30
 8005a18:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005a1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f9ba 	bl	8005d96 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005a2e:	4b43      	ldr	r3, [pc, #268]	; (8005b3c <HAL_FDCAN_IRQHandler+0x278>)
 8005a30:	400b      	ands	r3, r1
 8005a32:	6513      	str	r3, [r2, #80]	; 0x50
 8005a34:	4a40      	ldr	r2, [pc, #256]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 8005a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a38:	0f9b      	lsrs	r3, r3, #30
 8005a3a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005a3c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f9b4 	bl	8005dac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00d      	beq.n	8005a66 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a50:	4b3a      	ldr	r3, [pc, #232]	; (8005b3c <HAL_FDCAN_IRQHandler+0x278>)
 8005a52:	400b      	ands	r3, r1
 8005a54:	6513      	str	r3, [r2, #80]	; 0x50
 8005a56:	4a38      	ldr	r2, [pc, #224]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 8005a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a5a:	0f9b      	lsrs	r3, r3, #30
 8005a5c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005a5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f9ae 	bl	8005dc2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a68:	0adb      	lsrs	r3, r3, #11
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d010      	beq.n	8005a94 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	0adb      	lsrs	r3, r3, #11
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a86:	651a      	str	r2, [r3, #80]	; 0x50
 8005a88:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9a2 	bl	8005dd8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a96:	0a5b      	lsrs	r3, r3, #9
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01d      	beq.n	8005adc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	0a5b      	lsrs	r3, r3, #9
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d017      	beq.n	8005adc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005acc:	651a      	str	r2, [r3, #80]	; 0x50
 8005ace:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f988 	bl	8005dec <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ade:	0cdb      	lsrs	r3, r3, #19
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d010      	beq.n	8005b0a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aea:	0cdb      	lsrs	r3, r3, #19
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005afc:	651a      	str	r2, [r3, #80]	; 0x50
 8005afe:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f987 	bl	8005e18 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0c:	0c1b      	lsrs	r3, r3, #16
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d016      	beq.n	8005b44 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	0c1b      	lsrs	r3, r3, #16
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d010      	beq.n	8005b44 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b2a:	651a      	str	r2, [r3, #80]	; 0x50
 8005b2c:	4b02      	ldr	r3, [pc, #8]	; (8005b38 <HAL_FDCAN_IRQHandler+0x274>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	e004      	b.n	8005b40 <HAL_FDCAN_IRQHandler+0x27c>
 8005b36:	bf00      	nop
 8005b38:	4000a800 	.word	0x4000a800
 8005b3c:	3fcfffff 	.word	0x3fcfffff
 8005b40:	f000 f974 	bl	8005e2c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b46:	0c9b      	lsrs	r3, r3, #18
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d010      	beq.n	8005b72 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	0c9b      	lsrs	r3, r3, #18
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005b64:	651a      	str	r2, [r3, #80]	; 0x50
 8005b66:	4b83      	ldr	r3, [pc, #524]	; (8005d74 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f967 	bl	8005e40 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b74:	0c5b      	lsrs	r3, r3, #17
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d015      	beq.n	8005baa <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	0c5b      	lsrs	r3, r3, #17
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00f      	beq.n	8005baa <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b92:	651a      	str	r2, [r3, #80]	; 0x50
 8005b94:	4b77      	ldr	r3, [pc, #476]	; (8005d74 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ba0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00d      	beq.n	8005bcc <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bb6:	4b70      	ldr	r3, [pc, #448]	; (8005d78 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005bb8:	400b      	ands	r3, r1
 8005bba:	6513      	str	r3, [r2, #80]	; 0x50
 8005bbc:	4a6d      	ldr	r2, [pc, #436]	; (8005d74 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc0:	0f9b      	lsrs	r3, r3, #30
 8005bc2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005bc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f958 	bl	8005e7c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d011      	beq.n	8005bf6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bd8:	4b67      	ldr	r3, [pc, #412]	; (8005d78 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005bda:	400b      	ands	r3, r1
 8005bdc:	6513      	str	r3, [r2, #80]	; 0x50
 8005bde:	4a65      	ldr	r2, [pc, #404]	; (8005d74 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be2:	0f9b      	lsrs	r3, r3, #30
 8005be4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a60      	ldr	r2, [pc, #384]	; (8005d7c <HAL_FDCAN_IRQHandler+0x4b8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	f040 80ac 	bne.w	8005d5a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80a4 	beq.w	8005d5a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c26:	4013      	ands	r3, r2
 8005c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3e:	4013      	ands	r3, r2
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c56:	4013      	ands	r3, r2
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005c64:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	6a3a      	ldr	r2, [r7, #32]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8005c7c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	4013      	ands	r3, r2
 8005c88:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005ca8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f8f1 	bl	8005e92 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cbc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f8f1 	bl	8005ea8 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	099b      	lsrs	r3, r3, #6
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01a      	beq.n	8005d08 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	099b      	lsrs	r3, r3, #6
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d014      	beq.n	8005d08 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce4:	0c1b      	lsrs	r3, r3, #16
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cf4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2240      	movs	r2, #64	; 0x40
 8005cfc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	6939      	ldr	r1, [r7, #16]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f8db 	bl	8005ebe <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d14:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f8dc 	bl	8005ed6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	6a3a      	ldr	r2, [r7, #32]
 8005d2a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00b      	beq.n	8005d5a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f87f 	bl	8005e68 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005d6a:	bf00      	nop
 8005d6c:	3758      	adds	r7, #88	; 0x58
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	4000a800 	.word	0x4000a800
 8005d78:	3fcfffff 	.word	0x3fcfffff
 8005d7c:	4000a000 	.word	0x4000a000

08005d80 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005f02:	4ba7      	ldr	r3, [pc, #668]	; (80061a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	0091      	lsls	r1, r2, #2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f1c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	041a      	lsls	r2, r3, #16
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	4413      	add	r3, r2
 8005f38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f42:	4b97      	ldr	r3, [pc, #604]	; (80061a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	0091      	lsls	r1, r2, #2
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6812      	ldr	r2, [r2, #0]
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f64:	041a      	lsls	r2, r3, #16
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	4413      	add	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005f84:	4b86      	ldr	r3, [pc, #536]	; (80061a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	0091      	lsls	r1, r2, #2
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	430b      	orrs	r3, r1
 8005f92:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f9e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	041a      	lsls	r2, r3, #16
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005fcc:	4b74      	ldr	r3, [pc, #464]	; (80061a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	0091      	lsls	r1, r2, #2
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fe6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fee:	041a      	lsls	r2, r3, #16
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006002:	fb02 f303 	mul.w	r3, r2, r3
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	4413      	add	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006014:	4b62      	ldr	r3, [pc, #392]	; (80061a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006016:	4013      	ands	r3, r2
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	0091      	lsls	r1, r2, #2
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6812      	ldr	r2, [r2, #0]
 8006020:	430b      	orrs	r3, r1
 8006022:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800602e:	fb02 f303 	mul.w	r3, r2, r3
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	4413      	add	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006040:	4b57      	ldr	r3, [pc, #348]	; (80061a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006042:	4013      	ands	r3, r2
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	0091      	lsls	r1, r2, #2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	430b      	orrs	r3, r1
 800604e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800605a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006062:	041a      	lsls	r2, r3, #16
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	4413      	add	r3, r2
 8006078:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006082:	4b47      	ldr	r3, [pc, #284]	; (80061a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006084:	4013      	ands	r3, r2
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	0091      	lsls	r1, r2, #2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	430b      	orrs	r3, r1
 8006090:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800609c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a4:	041a      	lsls	r2, r3, #16
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80060b8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c0:	061a      	lsls	r2, r3, #24
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d0:	4b34      	ldr	r3, [pc, #208]	; (80061a4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80060d2:	4413      	add	r3, r2
 80060d4:	009a      	lsls	r2, r3, #2
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	441a      	add	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	441a      	add	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006106:	fb01 f303 	mul.w	r3, r1, r3
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	441a      	add	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800611e:	fb01 f303 	mul.w	r3, r1, r3
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	441a      	add	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	441a      	add	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	441a      	add	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006166:	fb01 f303 	mul.w	r3, r1, r3
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	441a      	add	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	4a04      	ldr	r2, [pc, #16]	; (80061a8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d915      	bls.n	80061c8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800619c:	e006      	b.n	80061ac <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800619e:	bf00      	nop
 80061a0:	ffff0003 	.word	0xffff0003
 80061a4:	10002b00 	.word	0x10002b00
 80061a8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2203      	movs	r2, #3
 80061c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e010      	b.n	80061ea <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	e005      	b.n	80061dc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3304      	adds	r3, #4
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d3f3      	bcc.n	80061d0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop

080061f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b089      	sub	sp, #36	; 0x24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006202:	2300      	movs	r3, #0
 8006204:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006206:	4b89      	ldr	r3, [pc, #548]	; (800642c <HAL_GPIO_Init+0x234>)
 8006208:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800620a:	e194      	b.n	8006536 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	2101      	movs	r1, #1
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	fa01 f303 	lsl.w	r3, r1, r3
 8006218:	4013      	ands	r3, r2
 800621a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 8186 	beq.w	8006530 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	2b01      	cmp	r3, #1
 800622e:	d005      	beq.n	800623c <HAL_GPIO_Init+0x44>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d130      	bne.n	800629e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	2203      	movs	r2, #3
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	43db      	mvns	r3, r3
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4013      	ands	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4313      	orrs	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006272:	2201      	movs	r2, #1
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	43db      	mvns	r3, r3
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	4013      	ands	r3, r2
 8006280:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	091b      	lsrs	r3, r3, #4
 8006288:	f003 0201 	and.w	r2, r3, #1
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	4313      	orrs	r3, r2
 8006296:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d017      	beq.n	80062da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	2203      	movs	r2, #3
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	43db      	mvns	r3, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4013      	ands	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d123      	bne.n	800632e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	08da      	lsrs	r2, r3, #3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3208      	adds	r2, #8
 80062ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	220f      	movs	r2, #15
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43db      	mvns	r3, r3
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	4013      	ands	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	691a      	ldr	r2, [r3, #16]
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	4313      	orrs	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	08da      	lsrs	r2, r3, #3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3208      	adds	r2, #8
 8006328:	69b9      	ldr	r1, [r7, #24]
 800632a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	2203      	movs	r2, #3
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	43db      	mvns	r3, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4013      	ands	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f003 0203 	and.w	r2, r3, #3
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4313      	orrs	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 80e0 	beq.w	8006530 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006370:	4b2f      	ldr	r3, [pc, #188]	; (8006430 <HAL_GPIO_Init+0x238>)
 8006372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006376:	4a2e      	ldr	r2, [pc, #184]	; (8006430 <HAL_GPIO_Init+0x238>)
 8006378:	f043 0302 	orr.w	r3, r3, #2
 800637c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006380:	4b2b      	ldr	r3, [pc, #172]	; (8006430 <HAL_GPIO_Init+0x238>)
 8006382:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800638e:	4a29      	ldr	r2, [pc, #164]	; (8006434 <HAL_GPIO_Init+0x23c>)
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	089b      	lsrs	r3, r3, #2
 8006394:	3302      	adds	r3, #2
 8006396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	220f      	movs	r2, #15
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	43db      	mvns	r3, r3
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	4013      	ands	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a20      	ldr	r2, [pc, #128]	; (8006438 <HAL_GPIO_Init+0x240>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d052      	beq.n	8006460 <HAL_GPIO_Init+0x268>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a1f      	ldr	r2, [pc, #124]	; (800643c <HAL_GPIO_Init+0x244>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d031      	beq.n	8006426 <HAL_GPIO_Init+0x22e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a1e      	ldr	r2, [pc, #120]	; (8006440 <HAL_GPIO_Init+0x248>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d02b      	beq.n	8006422 <HAL_GPIO_Init+0x22a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <HAL_GPIO_Init+0x24c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d025      	beq.n	800641e <HAL_GPIO_Init+0x226>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <HAL_GPIO_Init+0x250>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d01f      	beq.n	800641a <HAL_GPIO_Init+0x222>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1b      	ldr	r2, [pc, #108]	; (800644c <HAL_GPIO_Init+0x254>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d019      	beq.n	8006416 <HAL_GPIO_Init+0x21e>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1a      	ldr	r2, [pc, #104]	; (8006450 <HAL_GPIO_Init+0x258>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d013      	beq.n	8006412 <HAL_GPIO_Init+0x21a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a19      	ldr	r2, [pc, #100]	; (8006454 <HAL_GPIO_Init+0x25c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00d      	beq.n	800640e <HAL_GPIO_Init+0x216>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <HAL_GPIO_Init+0x260>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d007      	beq.n	800640a <HAL_GPIO_Init+0x212>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a17      	ldr	r2, [pc, #92]	; (800645c <HAL_GPIO_Init+0x264>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d101      	bne.n	8006406 <HAL_GPIO_Init+0x20e>
 8006402:	2309      	movs	r3, #9
 8006404:	e02d      	b.n	8006462 <HAL_GPIO_Init+0x26a>
 8006406:	230a      	movs	r3, #10
 8006408:	e02b      	b.n	8006462 <HAL_GPIO_Init+0x26a>
 800640a:	2308      	movs	r3, #8
 800640c:	e029      	b.n	8006462 <HAL_GPIO_Init+0x26a>
 800640e:	2307      	movs	r3, #7
 8006410:	e027      	b.n	8006462 <HAL_GPIO_Init+0x26a>
 8006412:	2306      	movs	r3, #6
 8006414:	e025      	b.n	8006462 <HAL_GPIO_Init+0x26a>
 8006416:	2305      	movs	r3, #5
 8006418:	e023      	b.n	8006462 <HAL_GPIO_Init+0x26a>
 800641a:	2304      	movs	r3, #4
 800641c:	e021      	b.n	8006462 <HAL_GPIO_Init+0x26a>
 800641e:	2303      	movs	r3, #3
 8006420:	e01f      	b.n	8006462 <HAL_GPIO_Init+0x26a>
 8006422:	2302      	movs	r3, #2
 8006424:	e01d      	b.n	8006462 <HAL_GPIO_Init+0x26a>
 8006426:	2301      	movs	r3, #1
 8006428:	e01b      	b.n	8006462 <HAL_GPIO_Init+0x26a>
 800642a:	bf00      	nop
 800642c:	58000080 	.word	0x58000080
 8006430:	58024400 	.word	0x58024400
 8006434:	58000400 	.word	0x58000400
 8006438:	58020000 	.word	0x58020000
 800643c:	58020400 	.word	0x58020400
 8006440:	58020800 	.word	0x58020800
 8006444:	58020c00 	.word	0x58020c00
 8006448:	58021000 	.word	0x58021000
 800644c:	58021400 	.word	0x58021400
 8006450:	58021800 	.word	0x58021800
 8006454:	58021c00 	.word	0x58021c00
 8006458:	58022000 	.word	0x58022000
 800645c:	58022400 	.word	0x58022400
 8006460:	2300      	movs	r3, #0
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	f002 0203 	and.w	r2, r2, #3
 8006468:	0092      	lsls	r2, r2, #2
 800646a:	4093      	lsls	r3, r2
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4313      	orrs	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006472:	4938      	ldr	r1, [pc, #224]	; (8006554 <HAL_GPIO_Init+0x35c>)
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	089b      	lsrs	r3, r3, #2
 8006478:	3302      	adds	r3, #2
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	43db      	mvns	r3, r3
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	4013      	ands	r3, r2
 8006490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80064a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80064ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	43db      	mvns	r3, r3
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	4013      	ands	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80064d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	43db      	mvns	r3, r3
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	4013      	ands	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	43db      	mvns	r3, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4013      	ands	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	3301      	adds	r3, #1
 8006534:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	fa22 f303 	lsr.w	r3, r2, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	f47f ae63 	bne.w	800620c <HAL_GPIO_Init+0x14>
  }
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	3724      	adds	r7, #36	; 0x24
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	58000400 	.word	0x58000400

08006558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	887b      	ldrh	r3, [r7, #2]
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
 8006574:	e001      	b.n	800657a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	807b      	strh	r3, [r7, #2]
 8006594:	4613      	mov	r3, r2
 8006596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006598:	787b      	ldrb	r3, [r7, #1]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800659e:	887a      	ldrh	r2, [r7, #2]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80065a4:	e003      	b.n	80065ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80065a6:	887b      	ldrh	r3, [r7, #2]
 80065a8:	041a      	lsls	r2, r3, #16
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	619a      	str	r2, [r3, #24]
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80065cc:	887a      	ldrh	r2, [r7, #2]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4013      	ands	r3, r2
 80065d2:	041a      	lsls	r2, r3, #16
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	43d9      	mvns	r1, r3
 80065d8:	887b      	ldrh	r3, [r7, #2]
 80065da:	400b      	ands	r3, r1
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	619a      	str	r2, [r3, #24]
}
 80065e2:	bf00      	nop
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	4603      	mov	r3, r0
 80065f6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80065f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	4013      	ands	r3, r2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	4618      	mov	r0, r3
 8006616:	f000 f804 	bl	8006622 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800661a:	bf00      	nop
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	4603      	mov	r3, r0
 800662a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800663a:	b08f      	sub	sp, #60	; 0x3c
 800663c:	af0a      	add	r7, sp, #40	; 0x28
 800663e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e054      	b.n	80066f4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d106      	bne.n	800666a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7fe fc1b 	bl	8004ea0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2203      	movs	r2, #3
 800666e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f002 fc59 	bl	8008f40 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	687e      	ldr	r6, [r7, #4]
 8006696:	466d      	mov	r5, sp
 8006698:	f106 0410 	add.w	r4, r6, #16
 800669c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800669e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80066ac:	1d33      	adds	r3, r6, #4
 80066ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066b0:	6838      	ldr	r0, [r7, #0]
 80066b2:	f002 fbd7 	bl	8008e64 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2101      	movs	r1, #1
 80066bc:	4618      	mov	r0, r3
 80066be:	f002 fc50 	bl	8008f62 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	687e      	ldr	r6, [r7, #4]
 80066ca:	466d      	mov	r5, sp
 80066cc:	f106 0410 	add.w	r4, r6, #16
 80066d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80066e0:	1d33      	adds	r3, r6, #4
 80066e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066e4:	6838      	ldr	r0, [r7, #0]
 80066e6:	f002 fd2f 	bl	8009148 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006704:	4b19      	ldr	r3, [pc, #100]	; (800676c <HAL_PWREx_ConfigSupply+0x70>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b04      	cmp	r3, #4
 800670e:	d00a      	beq.n	8006726 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006710:	4b16      	ldr	r3, [pc, #88]	; (800676c <HAL_PWREx_ConfigSupply+0x70>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	429a      	cmp	r2, r3
 800671c:	d001      	beq.n	8006722 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e01f      	b.n	8006762 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e01d      	b.n	8006762 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006726:	4b11      	ldr	r3, [pc, #68]	; (800676c <HAL_PWREx_ConfigSupply+0x70>)
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f023 0207 	bic.w	r2, r3, #7
 800672e:	490f      	ldr	r1, [pc, #60]	; (800676c <HAL_PWREx_ConfigSupply+0x70>)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4313      	orrs	r3, r2
 8006734:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006736:	f7fe fdcb 	bl	80052d0 <HAL_GetTick>
 800673a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800673c:	e009      	b.n	8006752 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800673e:	f7fe fdc7 	bl	80052d0 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800674c:	d901      	bls.n	8006752 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e007      	b.n	8006762 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006752:	4b06      	ldr	r3, [pc, #24]	; (800676c <HAL_PWREx_ConfigSupply+0x70>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800675a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800675e:	d1ee      	bne.n	800673e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	58024800 	.word	0x58024800

08006770 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006774:	4b05      	ldr	r3, [pc, #20]	; (800678c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	4a04      	ldr	r2, [pc, #16]	; (800678c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800677a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800677e:	60d3      	str	r3, [r2, #12]
}
 8006780:	bf00      	nop
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	58024800 	.word	0x58024800

08006790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08c      	sub	sp, #48	; 0x30
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f000 bc1d 	b.w	8006fde <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8087 	beq.w	80068c0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067b2:	4b99      	ldr	r3, [pc, #612]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067bc:	4b96      	ldr	r3, [pc, #600]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	2b10      	cmp	r3, #16
 80067c6:	d007      	beq.n	80067d8 <HAL_RCC_OscConfig+0x48>
 80067c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ca:	2b18      	cmp	r3, #24
 80067cc:	d110      	bne.n	80067f0 <HAL_RCC_OscConfig+0x60>
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d10b      	bne.n	80067f0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d8:	4b8f      	ldr	r3, [pc, #572]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d06c      	beq.n	80068be <HAL_RCC_OscConfig+0x12e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d168      	bne.n	80068be <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e3f6      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f8:	d106      	bne.n	8006808 <HAL_RCC_OscConfig+0x78>
 80067fa:	4b87      	ldr	r3, [pc, #540]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a86      	ldr	r2, [pc, #536]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	e02e      	b.n	8006866 <HAL_RCC_OscConfig+0xd6>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10c      	bne.n	800682a <HAL_RCC_OscConfig+0x9a>
 8006810:	4b81      	ldr	r3, [pc, #516]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a80      	ldr	r2, [pc, #512]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	4b7e      	ldr	r3, [pc, #504]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a7d      	ldr	r2, [pc, #500]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	e01d      	b.n	8006866 <HAL_RCC_OscConfig+0xd6>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006832:	d10c      	bne.n	800684e <HAL_RCC_OscConfig+0xbe>
 8006834:	4b78      	ldr	r3, [pc, #480]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a77      	ldr	r2, [pc, #476]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 800683a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	4b75      	ldr	r3, [pc, #468]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a74      	ldr	r2, [pc, #464]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	e00b      	b.n	8006866 <HAL_RCC_OscConfig+0xd6>
 800684e:	4b72      	ldr	r3, [pc, #456]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a71      	ldr	r2, [pc, #452]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	4b6f      	ldr	r3, [pc, #444]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a6e      	ldr	r2, [pc, #440]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006864:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d013      	beq.n	8006896 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686e:	f7fe fd2f 	bl	80052d0 <HAL_GetTick>
 8006872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006874:	e008      	b.n	8006888 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006876:	f7fe fd2b 	bl	80052d0 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b64      	cmp	r3, #100	; 0x64
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e3aa      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006888:	4b63      	ldr	r3, [pc, #396]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0f0      	beq.n	8006876 <HAL_RCC_OscConfig+0xe6>
 8006894:	e014      	b.n	80068c0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006896:	f7fe fd1b 	bl	80052d0 <HAL_GetTick>
 800689a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800689e:	f7fe fd17 	bl	80052d0 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b64      	cmp	r3, #100	; 0x64
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e396      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068b0:	4b59      	ldr	r3, [pc, #356]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1f0      	bne.n	800689e <HAL_RCC_OscConfig+0x10e>
 80068bc:	e000      	b.n	80068c0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80cb 	beq.w	8006a64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ce:	4b52      	ldr	r3, [pc, #328]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068d8:	4b4f      	ldr	r3, [pc, #316]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <HAL_RCC_OscConfig+0x164>
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	2b18      	cmp	r3, #24
 80068e8:	d156      	bne.n	8006998 <HAL_RCC_OscConfig+0x208>
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d151      	bne.n	8006998 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068f4:	4b48      	ldr	r3, [pc, #288]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <HAL_RCC_OscConfig+0x17c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e368      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800690c:	4b42      	ldr	r3, [pc, #264]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f023 0219 	bic.w	r2, r3, #25
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	493f      	ldr	r1, [pc, #252]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 800691a:	4313      	orrs	r3, r2
 800691c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800691e:	f7fe fcd7 	bl	80052d0 <HAL_GetTick>
 8006922:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006924:	e008      	b.n	8006938 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006926:	f7fe fcd3 	bl	80052d0 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e352      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006938:	4b37      	ldr	r3, [pc, #220]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0f0      	beq.n	8006926 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006944:	f7fe fcf4 	bl	8005330 <HAL_GetREVID>
 8006948:	4603      	mov	r3, r0
 800694a:	f241 0203 	movw	r2, #4099	; 0x1003
 800694e:	4293      	cmp	r3, r2
 8006950:	d817      	bhi.n	8006982 <HAL_RCC_OscConfig+0x1f2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d108      	bne.n	800696c <HAL_RCC_OscConfig+0x1dc>
 800695a:	4b2f      	ldr	r3, [pc, #188]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006962:	4a2d      	ldr	r2, [pc, #180]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006968:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800696a:	e07b      	b.n	8006a64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696c:	4b2a      	ldr	r3, [pc, #168]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	031b      	lsls	r3, r3, #12
 800697a:	4927      	ldr	r1, [pc, #156]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 800697c:	4313      	orrs	r3, r2
 800697e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006980:	e070      	b.n	8006a64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006982:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	061b      	lsls	r3, r3, #24
 8006990:	4921      	ldr	r1, [pc, #132]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006992:	4313      	orrs	r3, r2
 8006994:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006996:	e065      	b.n	8006a64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d048      	beq.n	8006a32 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069a0:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f023 0219 	bic.w	r2, r3, #25
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	491a      	ldr	r1, [pc, #104]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b2:	f7fe fc8d 	bl	80052d0 <HAL_GetTick>
 80069b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069b8:	e008      	b.n	80069cc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ba:	f7fe fc89 	bl	80052d0 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e308      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069cc:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f0      	beq.n	80069ba <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069d8:	f7fe fcaa 	bl	8005330 <HAL_GetREVID>
 80069dc:	4603      	mov	r3, r0
 80069de:	f241 0203 	movw	r2, #4099	; 0x1003
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d81a      	bhi.n	8006a1c <HAL_RCC_OscConfig+0x28c>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b40      	cmp	r3, #64	; 0x40
 80069ec:	d108      	bne.n	8006a00 <HAL_RCC_OscConfig+0x270>
 80069ee:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80069f6:	4a08      	ldr	r2, [pc, #32]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 80069f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069fc:	6053      	str	r3, [r2, #4]
 80069fe:	e031      	b.n	8006a64 <HAL_RCC_OscConfig+0x2d4>
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	031b      	lsls	r3, r3, #12
 8006a0e:	4902      	ldr	r1, [pc, #8]	; (8006a18 <HAL_RCC_OscConfig+0x288>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	604b      	str	r3, [r1, #4]
 8006a14:	e026      	b.n	8006a64 <HAL_RCC_OscConfig+0x2d4>
 8006a16:	bf00      	nop
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	4b9a      	ldr	r3, [pc, #616]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	061b      	lsls	r3, r3, #24
 8006a2a:	4997      	ldr	r1, [pc, #604]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	604b      	str	r3, [r1, #4]
 8006a30:	e018      	b.n	8006a64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a32:	4b95      	ldr	r3, [pc, #596]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a94      	ldr	r2, [pc, #592]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3e:	f7fe fc47 	bl	80052d0 <HAL_GetTick>
 8006a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a46:	f7fe fc43 	bl	80052d0 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e2c2      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a58:	4b8b      	ldr	r3, [pc, #556]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f0      	bne.n	8006a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 80a9 	beq.w	8006bc4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a72:	4b85      	ldr	r3, [pc, #532]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a7c:	4b82      	ldr	r3, [pc, #520]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a80:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d007      	beq.n	8006a98 <HAL_RCC_OscConfig+0x308>
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	2b18      	cmp	r3, #24
 8006a8c:	d13a      	bne.n	8006b04 <HAL_RCC_OscConfig+0x374>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f003 0303 	and.w	r3, r3, #3
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d135      	bne.n	8006b04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a98:	4b7b      	ldr	r3, [pc, #492]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x320>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	2b80      	cmp	r3, #128	; 0x80
 8006aaa:	d001      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e296      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ab0:	f7fe fc3e 	bl	8005330 <HAL_GetREVID>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f241 0203 	movw	r2, #4099	; 0x1003
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d817      	bhi.n	8006aee <HAL_RCC_OscConfig+0x35e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	d108      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x348>
 8006ac6:	4b70      	ldr	r3, [pc, #448]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ace:	4a6e      	ldr	r2, [pc, #440]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ad4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ad6:	e075      	b.n	8006bc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ad8:	4b6b      	ldr	r3, [pc, #428]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	069b      	lsls	r3, r3, #26
 8006ae6:	4968      	ldr	r1, [pc, #416]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006aec:	e06a      	b.n	8006bc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006aee:	4b66      	ldr	r3, [pc, #408]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	061b      	lsls	r3, r3, #24
 8006afc:	4962      	ldr	r1, [pc, #392]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b02:	e05f      	b.n	8006bc4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d042      	beq.n	8006b92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b0c:	4b5e      	ldr	r3, [pc, #376]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a5d      	ldr	r2, [pc, #372]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b18:	f7fe fbda 	bl	80052d0 <HAL_GetTick>
 8006b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b20:	f7fe fbd6 	bl	80052d0 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e255      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b32:	4b55      	ldr	r3, [pc, #340]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f0      	beq.n	8006b20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b3e:	f7fe fbf7 	bl	8005330 <HAL_GetREVID>
 8006b42:	4603      	mov	r3, r0
 8006b44:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d817      	bhi.n	8006b7c <HAL_RCC_OscConfig+0x3ec>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d108      	bne.n	8006b66 <HAL_RCC_OscConfig+0x3d6>
 8006b54:	4b4c      	ldr	r3, [pc, #304]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b5c:	4a4a      	ldr	r2, [pc, #296]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b62:	6053      	str	r3, [r2, #4]
 8006b64:	e02e      	b.n	8006bc4 <HAL_RCC_OscConfig+0x434>
 8006b66:	4b48      	ldr	r3, [pc, #288]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	069b      	lsls	r3, r3, #26
 8006b74:	4944      	ldr	r1, [pc, #272]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	604b      	str	r3, [r1, #4]
 8006b7a:	e023      	b.n	8006bc4 <HAL_RCC_OscConfig+0x434>
 8006b7c:	4b42      	ldr	r3, [pc, #264]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	061b      	lsls	r3, r3, #24
 8006b8a:	493f      	ldr	r1, [pc, #252]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60cb      	str	r3, [r1, #12]
 8006b90:	e018      	b.n	8006bc4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b92:	4b3d      	ldr	r3, [pc, #244]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a3c      	ldr	r2, [pc, #240]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006b98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fe fb97 	bl	80052d0 <HAL_GetTick>
 8006ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ba6:	f7fe fb93 	bl	80052d0 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e212      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bb8:	4b33      	ldr	r3, [pc, #204]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1f0      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d036      	beq.n	8006c3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d019      	beq.n	8006c0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bd8:	4b2b      	ldr	r3, [pc, #172]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bdc:	4a2a      	ldr	r2, [pc, #168]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be4:	f7fe fb74 	bl	80052d0 <HAL_GetTick>
 8006be8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bec:	f7fe fb70 	bl	80052d0 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e1ef      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bfe:	4b22      	ldr	r3, [pc, #136]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCC_OscConfig+0x45c>
 8006c0a:	e018      	b.n	8006c3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c0c:	4b1e      	ldr	r3, [pc, #120]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c10:	4a1d      	ldr	r2, [pc, #116]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006c12:	f023 0301 	bic.w	r3, r3, #1
 8006c16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c18:	f7fe fb5a 	bl	80052d0 <HAL_GetTick>
 8006c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c20:	f7fe fb56 	bl	80052d0 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e1d5      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c32:	4b15      	ldr	r3, [pc, #84]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f0      	bne.n	8006c20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d039      	beq.n	8006cbe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d01c      	beq.n	8006c8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c52:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a0c      	ldr	r2, [pc, #48]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c5e:	f7fe fb37 	bl	80052d0 <HAL_GetTick>
 8006c62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c66:	f7fe fb33 	bl	80052d0 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e1b2      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c78:	4b03      	ldr	r3, [pc, #12]	; (8006c88 <HAL_RCC_OscConfig+0x4f8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0f0      	beq.n	8006c66 <HAL_RCC_OscConfig+0x4d6>
 8006c84:	e01b      	b.n	8006cbe <HAL_RCC_OscConfig+0x52e>
 8006c86:	bf00      	nop
 8006c88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c8c:	4b9b      	ldr	r3, [pc, #620]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a9a      	ldr	r2, [pc, #616]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c98:	f7fe fb1a 	bl	80052d0 <HAL_GetTick>
 8006c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006ca0:	f7fe fb16 	bl	80052d0 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e195      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cb2:	4b92      	ldr	r3, [pc, #584]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 8081 	beq.w	8006dce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ccc:	4b8c      	ldr	r3, [pc, #560]	; (8006f00 <HAL_RCC_OscConfig+0x770>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a8b      	ldr	r2, [pc, #556]	; (8006f00 <HAL_RCC_OscConfig+0x770>)
 8006cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cd8:	f7fe fafa 	bl	80052d0 <HAL_GetTick>
 8006cdc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ce0:	f7fe faf6 	bl	80052d0 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b64      	cmp	r3, #100	; 0x64
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e175      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cf2:	4b83      	ldr	r3, [pc, #524]	; (8006f00 <HAL_RCC_OscConfig+0x770>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0f0      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d106      	bne.n	8006d14 <HAL_RCC_OscConfig+0x584>
 8006d06:	4b7d      	ldr	r3, [pc, #500]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	4a7c      	ldr	r2, [pc, #496]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	6713      	str	r3, [r2, #112]	; 0x70
 8006d12:	e02d      	b.n	8006d70 <HAL_RCC_OscConfig+0x5e0>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10c      	bne.n	8006d36 <HAL_RCC_OscConfig+0x5a6>
 8006d1c:	4b77      	ldr	r3, [pc, #476]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d20:	4a76      	ldr	r2, [pc, #472]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d22:	f023 0301 	bic.w	r3, r3, #1
 8006d26:	6713      	str	r3, [r2, #112]	; 0x70
 8006d28:	4b74      	ldr	r3, [pc, #464]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2c:	4a73      	ldr	r2, [pc, #460]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d2e:	f023 0304 	bic.w	r3, r3, #4
 8006d32:	6713      	str	r3, [r2, #112]	; 0x70
 8006d34:	e01c      	b.n	8006d70 <HAL_RCC_OscConfig+0x5e0>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	d10c      	bne.n	8006d58 <HAL_RCC_OscConfig+0x5c8>
 8006d3e:	4b6f      	ldr	r3, [pc, #444]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d42:	4a6e      	ldr	r2, [pc, #440]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d44:	f043 0304 	orr.w	r3, r3, #4
 8006d48:	6713      	str	r3, [r2, #112]	; 0x70
 8006d4a:	4b6c      	ldr	r3, [pc, #432]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4e:	4a6b      	ldr	r2, [pc, #428]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d50:	f043 0301 	orr.w	r3, r3, #1
 8006d54:	6713      	str	r3, [r2, #112]	; 0x70
 8006d56:	e00b      	b.n	8006d70 <HAL_RCC_OscConfig+0x5e0>
 8006d58:	4b68      	ldr	r3, [pc, #416]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5c:	4a67      	ldr	r2, [pc, #412]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d5e:	f023 0301 	bic.w	r3, r3, #1
 8006d62:	6713      	str	r3, [r2, #112]	; 0x70
 8006d64:	4b65      	ldr	r3, [pc, #404]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d68:	4a64      	ldr	r2, [pc, #400]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d6a:	f023 0304 	bic.w	r3, r3, #4
 8006d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d015      	beq.n	8006da4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d78:	f7fe faaa 	bl	80052d0 <HAL_GetTick>
 8006d7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d7e:	e00a      	b.n	8006d96 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d80:	f7fe faa6 	bl	80052d0 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e123      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d96:	4b59      	ldr	r3, [pc, #356]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0ee      	beq.n	8006d80 <HAL_RCC_OscConfig+0x5f0>
 8006da2:	e014      	b.n	8006dce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da4:	f7fe fa94 	bl	80052d0 <HAL_GetTick>
 8006da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006daa:	e00a      	b.n	8006dc2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dac:	f7fe fa90 	bl	80052d0 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e10d      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dc2:	4b4e      	ldr	r3, [pc, #312]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1ee      	bne.n	8006dac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8102 	beq.w	8006fdc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006dd8:	4b48      	ldr	r3, [pc, #288]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006de0:	2b18      	cmp	r3, #24
 8006de2:	f000 80bd 	beq.w	8006f60 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	f040 809e 	bne.w	8006f2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006df0:	4b42      	ldr	r3, [pc, #264]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a41      	ldr	r2, [pc, #260]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfc:	f7fe fa68 	bl	80052d0 <HAL_GetTick>
 8006e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e04:	f7fe fa64 	bl	80052d0 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e0e3      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e16:	4b39      	ldr	r3, [pc, #228]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e22:	4b36      	ldr	r3, [pc, #216]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e26:	4b37      	ldr	r3, [pc, #220]	; (8006f04 <HAL_RCC_OscConfig+0x774>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e32:	0112      	lsls	r2, r2, #4
 8006e34:	430a      	orrs	r2, r1
 8006e36:	4931      	ldr	r1, [pc, #196]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	628b      	str	r3, [r1, #40]	; 0x28
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	3b01      	subs	r3, #1
 8006e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	025b      	lsls	r3, r3, #9
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	3b01      	subs	r3, #1
 8006e58:	041b      	lsls	r3, r3, #16
 8006e5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e64:	3b01      	subs	r3, #1
 8006e66:	061b      	lsls	r3, r3, #24
 8006e68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e6c:	4923      	ldr	r1, [pc, #140]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006e72:	4b22      	ldr	r3, [pc, #136]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	4a21      	ldr	r2, [pc, #132]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e7e:	4b1f      	ldr	r3, [pc, #124]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e82:	4b21      	ldr	r3, [pc, #132]	; (8006f08 <HAL_RCC_OscConfig+0x778>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e8a:	00d2      	lsls	r2, r2, #3
 8006e8c:	491b      	ldr	r1, [pc, #108]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e92:	4b1a      	ldr	r3, [pc, #104]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	f023 020c 	bic.w	r2, r3, #12
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	4917      	ldr	r1, [pc, #92]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ea4:	4b15      	ldr	r3, [pc, #84]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	f023 0202 	bic.w	r2, r3, #2
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb0:	4912      	ldr	r1, [pc, #72]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006eb6:	4b11      	ldr	r3, [pc, #68]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eba:	4a10      	ldr	r2, [pc, #64]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec6:	4a0d      	ldr	r2, [pc, #52]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ece:	4b0b      	ldr	r3, [pc, #44]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	4a0a      	ldr	r2, [pc, #40]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006eda:	4b08      	ldr	r3, [pc, #32]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	4a07      	ldr	r2, [pc, #28]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a04      	ldr	r2, [pc, #16]	; (8006efc <HAL_RCC_OscConfig+0x76c>)
 8006eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef2:	f7fe f9ed 	bl	80052d0 <HAL_GetTick>
 8006ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ef8:	e011      	b.n	8006f1e <HAL_RCC_OscConfig+0x78e>
 8006efa:	bf00      	nop
 8006efc:	58024400 	.word	0x58024400
 8006f00:	58024800 	.word	0x58024800
 8006f04:	fffffc0c 	.word	0xfffffc0c
 8006f08:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f0c:	f7fe f9e0 	bl	80052d0 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e05f      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f1e:	4b32      	ldr	r3, [pc, #200]	; (8006fe8 <HAL_RCC_OscConfig+0x858>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0f0      	beq.n	8006f0c <HAL_RCC_OscConfig+0x77c>
 8006f2a:	e057      	b.n	8006fdc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f2c:	4b2e      	ldr	r3, [pc, #184]	; (8006fe8 <HAL_RCC_OscConfig+0x858>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a2d      	ldr	r2, [pc, #180]	; (8006fe8 <HAL_RCC_OscConfig+0x858>)
 8006f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f38:	f7fe f9ca 	bl	80052d0 <HAL_GetTick>
 8006f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f40:	f7fe f9c6 	bl	80052d0 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e045      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f52:	4b25      	ldr	r3, [pc, #148]	; (8006fe8 <HAL_RCC_OscConfig+0x858>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f0      	bne.n	8006f40 <HAL_RCC_OscConfig+0x7b0>
 8006f5e:	e03d      	b.n	8006fdc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f60:	4b21      	ldr	r3, [pc, #132]	; (8006fe8 <HAL_RCC_OscConfig+0x858>)
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f66:	4b20      	ldr	r3, [pc, #128]	; (8006fe8 <HAL_RCC_OscConfig+0x858>)
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d031      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f003 0203 	and.w	r2, r3, #3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d12a      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	091b      	lsrs	r3, r3, #4
 8006f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d122      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d11a      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	0a5b      	lsrs	r3, r3, #9
 8006fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d111      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	0c1b      	lsrs	r3, r3, #16
 8006fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d108      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	0e1b      	lsrs	r3, r3, #24
 8006fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d001      	beq.n	8006fdc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e000      	b.n	8006fde <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3730      	adds	r7, #48	; 0x30
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	58024400 	.word	0x58024400

08006fec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e19c      	b.n	800733a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007000:	4b8a      	ldr	r3, [pc, #552]	; (800722c <HAL_RCC_ClockConfig+0x240>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d910      	bls.n	8007030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800700e:	4b87      	ldr	r3, [pc, #540]	; (800722c <HAL_RCC_ClockConfig+0x240>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f023 020f 	bic.w	r2, r3, #15
 8007016:	4985      	ldr	r1, [pc, #532]	; (800722c <HAL_RCC_ClockConfig+0x240>)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	4313      	orrs	r3, r2
 800701c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800701e:	4b83      	ldr	r3, [pc, #524]	; (800722c <HAL_RCC_ClockConfig+0x240>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d001      	beq.n	8007030 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e184      	b.n	800733a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d010      	beq.n	800705e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	4b7b      	ldr	r3, [pc, #492]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007048:	429a      	cmp	r2, r3
 800704a:	d908      	bls.n	800705e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800704c:	4b78      	ldr	r3, [pc, #480]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	4975      	ldr	r1, [pc, #468]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 800705a:	4313      	orrs	r3, r2
 800705c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d010      	beq.n	800708c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695a      	ldr	r2, [r3, #20]
 800706e:	4b70      	ldr	r3, [pc, #448]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007076:	429a      	cmp	r2, r3
 8007078:	d908      	bls.n	800708c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800707a:	4b6d      	ldr	r3, [pc, #436]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	496a      	ldr	r1, [pc, #424]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 8007088:	4313      	orrs	r3, r2
 800708a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	d010      	beq.n	80070ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699a      	ldr	r2, [r3, #24]
 800709c:	4b64      	ldr	r3, [pc, #400]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d908      	bls.n	80070ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070a8:	4b61      	ldr	r3, [pc, #388]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	495e      	ldr	r1, [pc, #376]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d010      	beq.n	80070e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69da      	ldr	r2, [r3, #28]
 80070ca:	4b59      	ldr	r3, [pc, #356]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d908      	bls.n	80070e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80070d6:	4b56      	ldr	r3, [pc, #344]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	4953      	ldr	r1, [pc, #332]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d010      	beq.n	8007116 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	4b4d      	ldr	r3, [pc, #308]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f003 030f 	and.w	r3, r3, #15
 8007100:	429a      	cmp	r2, r3
 8007102:	d908      	bls.n	8007116 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007104:	4b4a      	ldr	r3, [pc, #296]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f023 020f 	bic.w	r2, r3, #15
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4947      	ldr	r1, [pc, #284]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 8007112:	4313      	orrs	r3, r2
 8007114:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d055      	beq.n	80071ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007122:	4b43      	ldr	r3, [pc, #268]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	4940      	ldr	r1, [pc, #256]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 8007130:	4313      	orrs	r3, r2
 8007132:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d107      	bne.n	800714c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800713c:	4b3c      	ldr	r3, [pc, #240]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d121      	bne.n	800718c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e0f6      	b.n	800733a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b03      	cmp	r3, #3
 8007152:	d107      	bne.n	8007164 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007154:	4b36      	ldr	r3, [pc, #216]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d115      	bne.n	800718c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e0ea      	b.n	800733a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d107      	bne.n	800717c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800716c:	4b30      	ldr	r3, [pc, #192]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d109      	bne.n	800718c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e0de      	b.n	800733a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800717c:	4b2c      	ldr	r3, [pc, #176]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e0d6      	b.n	800733a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800718c:	4b28      	ldr	r3, [pc, #160]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	f023 0207 	bic.w	r2, r3, #7
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	4925      	ldr	r1, [pc, #148]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 800719a:	4313      	orrs	r3, r2
 800719c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800719e:	f7fe f897 	bl	80052d0 <HAL_GetTick>
 80071a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071a4:	e00a      	b.n	80071bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071a6:	f7fe f893 	bl	80052d0 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e0be      	b.n	800733a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071bc:	4b1c      	ldr	r3, [pc, #112]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d1eb      	bne.n	80071a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d010      	beq.n	80071fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	4b14      	ldr	r3, [pc, #80]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d208      	bcs.n	80071fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071ea:	4b11      	ldr	r3, [pc, #68]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f023 020f 	bic.w	r2, r3, #15
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	490e      	ldr	r1, [pc, #56]	; (8007230 <HAL_RCC_ClockConfig+0x244>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071fc:	4b0b      	ldr	r3, [pc, #44]	; (800722c <HAL_RCC_ClockConfig+0x240>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 030f 	and.w	r3, r3, #15
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d214      	bcs.n	8007234 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800720a:	4b08      	ldr	r3, [pc, #32]	; (800722c <HAL_RCC_ClockConfig+0x240>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f023 020f 	bic.w	r2, r3, #15
 8007212:	4906      	ldr	r1, [pc, #24]	; (800722c <HAL_RCC_ClockConfig+0x240>)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	4313      	orrs	r3, r2
 8007218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800721a:	4b04      	ldr	r3, [pc, #16]	; (800722c <HAL_RCC_ClockConfig+0x240>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 030f 	and.w	r3, r3, #15
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d005      	beq.n	8007234 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e086      	b.n	800733a <HAL_RCC_ClockConfig+0x34e>
 800722c:	52002000 	.word	0x52002000
 8007230:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d010      	beq.n	8007262 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	4b3f      	ldr	r3, [pc, #252]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800724c:	429a      	cmp	r2, r3
 800724e:	d208      	bcs.n	8007262 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007250:	4b3c      	ldr	r3, [pc, #240]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	4939      	ldr	r1, [pc, #228]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 800725e:	4313      	orrs	r3, r2
 8007260:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0308 	and.w	r3, r3, #8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d010      	beq.n	8007290 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695a      	ldr	r2, [r3, #20]
 8007272:	4b34      	ldr	r3, [pc, #208]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800727a:	429a      	cmp	r2, r3
 800727c:	d208      	bcs.n	8007290 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800727e:	4b31      	ldr	r3, [pc, #196]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	492e      	ldr	r1, [pc, #184]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 800728c:	4313      	orrs	r3, r2
 800728e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0310 	and.w	r3, r3, #16
 8007298:	2b00      	cmp	r3, #0
 800729a:	d010      	beq.n	80072be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	699a      	ldr	r2, [r3, #24]
 80072a0:	4b28      	ldr	r3, [pc, #160]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d208      	bcs.n	80072be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072ac:	4b25      	ldr	r3, [pc, #148]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	4922      	ldr	r1, [pc, #136]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d010      	beq.n	80072ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69da      	ldr	r2, [r3, #28]
 80072ce:	4b1d      	ldr	r3, [pc, #116]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d208      	bcs.n	80072ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80072da:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	4917      	ldr	r1, [pc, #92]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072ec:	f000 f834 	bl	8007358 <HAL_RCC_GetSysClockFreq>
 80072f0:	4602      	mov	r2, r0
 80072f2:	4b14      	ldr	r3, [pc, #80]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	0a1b      	lsrs	r3, r3, #8
 80072f8:	f003 030f 	and.w	r3, r3, #15
 80072fc:	4912      	ldr	r1, [pc, #72]	; (8007348 <HAL_RCC_ClockConfig+0x35c>)
 80072fe:	5ccb      	ldrb	r3, [r1, r3]
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800730a:	4b0e      	ldr	r3, [pc, #56]	; (8007344 <HAL_RCC_ClockConfig+0x358>)
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	4a0d      	ldr	r2, [pc, #52]	; (8007348 <HAL_RCC_ClockConfig+0x35c>)
 8007314:	5cd3      	ldrb	r3, [r2, r3]
 8007316:	f003 031f 	and.w	r3, r3, #31
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	fa22 f303 	lsr.w	r3, r2, r3
 8007320:	4a0a      	ldr	r2, [pc, #40]	; (800734c <HAL_RCC_ClockConfig+0x360>)
 8007322:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007324:	4a0a      	ldr	r2, [pc, #40]	; (8007350 <HAL_RCC_ClockConfig+0x364>)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800732a:	4b0a      	ldr	r3, [pc, #40]	; (8007354 <HAL_RCC_ClockConfig+0x368>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f7fd fe20 	bl	8004f74 <HAL_InitTick>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	58024400 	.word	0x58024400
 8007348:	08009550 	.word	0x08009550
 800734c:	24000014 	.word	0x24000014
 8007350:	24000010 	.word	0x24000010
 8007354:	24000018 	.word	0x24000018

08007358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007358:	b480      	push	{r7}
 800735a:	b089      	sub	sp, #36	; 0x24
 800735c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800735e:	4bb3      	ldr	r3, [pc, #716]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007366:	2b18      	cmp	r3, #24
 8007368:	f200 8155 	bhi.w	8007616 <HAL_RCC_GetSysClockFreq+0x2be>
 800736c:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <HAL_RCC_GetSysClockFreq+0x1c>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	080073d9 	.word	0x080073d9
 8007378:	08007617 	.word	0x08007617
 800737c:	08007617 	.word	0x08007617
 8007380:	08007617 	.word	0x08007617
 8007384:	08007617 	.word	0x08007617
 8007388:	08007617 	.word	0x08007617
 800738c:	08007617 	.word	0x08007617
 8007390:	08007617 	.word	0x08007617
 8007394:	080073ff 	.word	0x080073ff
 8007398:	08007617 	.word	0x08007617
 800739c:	08007617 	.word	0x08007617
 80073a0:	08007617 	.word	0x08007617
 80073a4:	08007617 	.word	0x08007617
 80073a8:	08007617 	.word	0x08007617
 80073ac:	08007617 	.word	0x08007617
 80073b0:	08007617 	.word	0x08007617
 80073b4:	08007405 	.word	0x08007405
 80073b8:	08007617 	.word	0x08007617
 80073bc:	08007617 	.word	0x08007617
 80073c0:	08007617 	.word	0x08007617
 80073c4:	08007617 	.word	0x08007617
 80073c8:	08007617 	.word	0x08007617
 80073cc:	08007617 	.word	0x08007617
 80073d0:	08007617 	.word	0x08007617
 80073d4:	0800740b 	.word	0x0800740b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073d8:	4b94      	ldr	r3, [pc, #592]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0320 	and.w	r3, r3, #32
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d009      	beq.n	80073f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073e4:	4b91      	ldr	r3, [pc, #580]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	08db      	lsrs	r3, r3, #3
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	4a90      	ldr	r2, [pc, #576]	; (8007630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073f0:	fa22 f303 	lsr.w	r3, r2, r3
 80073f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80073f6:	e111      	b.n	800761c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073f8:	4b8d      	ldr	r3, [pc, #564]	; (8007630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073fa:	61bb      	str	r3, [r7, #24]
    break;
 80073fc:	e10e      	b.n	800761c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80073fe:	4b8d      	ldr	r3, [pc, #564]	; (8007634 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007400:	61bb      	str	r3, [r7, #24]
    break;
 8007402:	e10b      	b.n	800761c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007404:	4b8c      	ldr	r3, [pc, #560]	; (8007638 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007406:	61bb      	str	r3, [r7, #24]
    break;
 8007408:	e108      	b.n	800761c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800740a:	4b88      	ldr	r3, [pc, #544]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007414:	4b85      	ldr	r3, [pc, #532]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007418:	091b      	lsrs	r3, r3, #4
 800741a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800741e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007420:	4b82      	ldr	r3, [pc, #520]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800742a:	4b80      	ldr	r3, [pc, #512]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800742c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742e:	08db      	lsrs	r3, r3, #3
 8007430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	fb02 f303 	mul.w	r3, r2, r3
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007442:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 80e1 	beq.w	8007610 <HAL_RCC_GetSysClockFreq+0x2b8>
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b02      	cmp	r3, #2
 8007452:	f000 8083 	beq.w	800755c <HAL_RCC_GetSysClockFreq+0x204>
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b02      	cmp	r3, #2
 800745a:	f200 80a1 	bhi.w	80075a0 <HAL_RCC_GetSysClockFreq+0x248>
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <HAL_RCC_GetSysClockFreq+0x114>
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d056      	beq.n	8007518 <HAL_RCC_GetSysClockFreq+0x1c0>
 800746a:	e099      	b.n	80075a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800746c:	4b6f      	ldr	r3, [pc, #444]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0320 	and.w	r3, r3, #32
 8007474:	2b00      	cmp	r3, #0
 8007476:	d02d      	beq.n	80074d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007478:	4b6c      	ldr	r3, [pc, #432]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	08db      	lsrs	r3, r3, #3
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	4a6b      	ldr	r2, [pc, #428]	; (8007630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007484:	fa22 f303 	lsr.w	r3, r2, r3
 8007488:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	ee07 3a90 	vmov	s15, r3
 8007490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a2:	4b62      	ldr	r3, [pc, #392]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80074b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800763c <HAL_RCC_GetSysClockFreq+0x2e4>
 80074ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80074d2:	e087      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007640 <HAL_RCC_GetSysClockFreq+0x2e8>
 80074e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074e6:	4b51      	ldr	r3, [pc, #324]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80074fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800763c <HAL_RCC_GetSysClockFreq+0x2e4>
 80074fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800750a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800750e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007516:	e065      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007522:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007644 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800752a:	4b40      	ldr	r3, [pc, #256]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800753a:	ed97 6a02 	vldr	s12, [r7, #8]
 800753e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800763c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800754a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800754e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800755a:	e043      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007566:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007648 <HAL_RCC_GetSysClockFreq+0x2f0>
 800756a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800756e:	4b2f      	ldr	r3, [pc, #188]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800757e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007582:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800763c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800758a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800758e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800759e:	e021      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007644 <HAL_RCC_GetSysClockFreq+0x2ec>
 80075ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075b2:	4b1e      	ldr	r3, [pc, #120]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80075c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800763c <HAL_RCC_GetSysClockFreq+0x2e4>
 80075ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80075e4:	4b11      	ldr	r3, [pc, #68]	; (800762c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	0a5b      	lsrs	r3, r3, #9
 80075ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ee:	3301      	adds	r3, #1
 80075f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007608:	ee17 3a90 	vmov	r3, s15
 800760c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800760e:	e005      	b.n	800761c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	61bb      	str	r3, [r7, #24]
    break;
 8007614:	e002      	b.n	800761c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007616:	4b07      	ldr	r3, [pc, #28]	; (8007634 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007618:	61bb      	str	r3, [r7, #24]
    break;
 800761a:	bf00      	nop
  }

  return sysclockfreq;
 800761c:	69bb      	ldr	r3, [r7, #24]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3724      	adds	r7, #36	; 0x24
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	58024400 	.word	0x58024400
 8007630:	03d09000 	.word	0x03d09000
 8007634:	003d0900 	.word	0x003d0900
 8007638:	007a1200 	.word	0x007a1200
 800763c:	46000000 	.word	0x46000000
 8007640:	4c742400 	.word	0x4c742400
 8007644:	4a742400 	.word	0x4a742400
 8007648:	4af42400 	.word	0x4af42400

0800764c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007652:	f7ff fe81 	bl	8007358 <HAL_RCC_GetSysClockFreq>
 8007656:	4602      	mov	r2, r0
 8007658:	4b10      	ldr	r3, [pc, #64]	; (800769c <HAL_RCC_GetHCLKFreq+0x50>)
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	0a1b      	lsrs	r3, r3, #8
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	490f      	ldr	r1, [pc, #60]	; (80076a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007664:	5ccb      	ldrb	r3, [r1, r3]
 8007666:	f003 031f 	and.w	r3, r3, #31
 800766a:	fa22 f303 	lsr.w	r3, r2, r3
 800766e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007670:	4b0a      	ldr	r3, [pc, #40]	; (800769c <HAL_RCC_GetHCLKFreq+0x50>)
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	f003 030f 	and.w	r3, r3, #15
 8007678:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800767a:	5cd3      	ldrb	r3, [r2, r3]
 800767c:	f003 031f 	and.w	r3, r3, #31
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	fa22 f303 	lsr.w	r3, r2, r3
 8007686:	4a07      	ldr	r2, [pc, #28]	; (80076a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007688:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800768a:	4a07      	ldr	r2, [pc, #28]	; (80076a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007690:	4b04      	ldr	r3, [pc, #16]	; (80076a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007692:	681b      	ldr	r3, [r3, #0]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	58024400 	.word	0x58024400
 80076a0:	08009550 	.word	0x08009550
 80076a4:	24000014 	.word	0x24000014
 80076a8:	24000010 	.word	0x24000010

080076ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80076b0:	f7ff ffcc 	bl	800764c <HAL_RCC_GetHCLKFreq>
 80076b4:	4602      	mov	r2, r0
 80076b6:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	091b      	lsrs	r3, r3, #4
 80076bc:	f003 0307 	and.w	r3, r3, #7
 80076c0:	4904      	ldr	r1, [pc, #16]	; (80076d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076c2:	5ccb      	ldrb	r3, [r1, r3]
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	58024400 	.word	0x58024400
 80076d4:	08009550 	.word	0x08009550

080076d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	223f      	movs	r2, #63	; 0x3f
 80076e6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076e8:	4b1a      	ldr	r3, [pc, #104]	; (8007754 <HAL_RCC_GetClockConfig+0x7c>)
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f003 0207 	and.w	r2, r3, #7
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80076f4:	4b17      	ldr	r3, [pc, #92]	; (8007754 <HAL_RCC_GetClockConfig+0x7c>)
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007700:	4b14      	ldr	r3, [pc, #80]	; (8007754 <HAL_RCC_GetClockConfig+0x7c>)
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800770c:	4b11      	ldr	r3, [pc, #68]	; (8007754 <HAL_RCC_GetClockConfig+0x7c>)
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007718:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <HAL_RCC_GetClockConfig+0x7c>)
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007724:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <HAL_RCC_GetClockConfig+0x7c>)
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007730:	4b08      	ldr	r3, [pc, #32]	; (8007754 <HAL_RCC_GetClockConfig+0x7c>)
 8007732:	6a1b      	ldr	r3, [r3, #32]
 8007734:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800773c:	4b06      	ldr	r3, [pc, #24]	; (8007758 <HAL_RCC_GetClockConfig+0x80>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 020f 	and.w	r2, r3, #15
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	601a      	str	r2, [r3, #0]
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	58024400 	.word	0x58024400
 8007758:	52002000 	.word	0x52002000

0800775c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007764:	2300      	movs	r3, #0
 8007766:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007768:	2300      	movs	r3, #0
 800776a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d03f      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007780:	d02a      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007782:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007786:	d824      	bhi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800778c:	d018      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800778e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007792:	d81e      	bhi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800779c:	d007      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800779e:	e018      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a0:	4ba3      	ldr	r3, [pc, #652]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	4aa2      	ldr	r2, [pc, #648]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077ac:	e015      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3304      	adds	r3, #4
 80077b2:	2102      	movs	r1, #2
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 ff17 	bl	80085e8 <RCCEx_PLL2_Config>
 80077ba:	4603      	mov	r3, r0
 80077bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077be:	e00c      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3324      	adds	r3, #36	; 0x24
 80077c4:	2102      	movs	r1, #2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 ffc0 	bl	800874c <RCCEx_PLL3_Config>
 80077cc:	4603      	mov	r3, r0
 80077ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077d0:	e003      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	75fb      	strb	r3, [r7, #23]
      break;
 80077d6:	e000      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80077d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d109      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80077e0:	4b93      	ldr	r3, [pc, #588]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077ec:	4990      	ldr	r1, [pc, #576]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	650b      	str	r3, [r1, #80]	; 0x50
 80077f2:	e001      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	d03d      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007808:	2b04      	cmp	r3, #4
 800780a:	d826      	bhi.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800780c:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800780e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007812:	bf00      	nop
 8007814:	08007829 	.word	0x08007829
 8007818:	08007837 	.word	0x08007837
 800781c:	08007849 	.word	0x08007849
 8007820:	08007861 	.word	0x08007861
 8007824:	08007861 	.word	0x08007861
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007828:	4b81      	ldr	r3, [pc, #516]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	4a80      	ldr	r2, [pc, #512]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800782e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007832:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007834:	e015      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3304      	adds	r3, #4
 800783a:	2100      	movs	r1, #0
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fed3 	bl	80085e8 <RCCEx_PLL2_Config>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007846:	e00c      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3324      	adds	r3, #36	; 0x24
 800784c:	2100      	movs	r1, #0
 800784e:	4618      	mov	r0, r3
 8007850:	f000 ff7c 	bl	800874c <RCCEx_PLL3_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007858:	e003      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	75fb      	strb	r3, [r7, #23]
      break;
 800785e:	e000      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007862:	7dfb      	ldrb	r3, [r7, #23]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d109      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007868:	4b71      	ldr	r3, [pc, #452]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800786a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786c:	f023 0207 	bic.w	r2, r3, #7
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007874:	496e      	ldr	r1, [pc, #440]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007876:	4313      	orrs	r3, r2
 8007878:	650b      	str	r3, [r1, #80]	; 0x50
 800787a:	e001      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007888:	2b00      	cmp	r3, #0
 800788a:	d042      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007894:	d02b      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789a:	d825      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800789c:	2bc0      	cmp	r3, #192	; 0xc0
 800789e:	d028      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80078a0:	2bc0      	cmp	r3, #192	; 0xc0
 80078a2:	d821      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80078a4:	2b80      	cmp	r3, #128	; 0x80
 80078a6:	d016      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80078a8:	2b80      	cmp	r3, #128	; 0x80
 80078aa:	d81d      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80078b0:	2b40      	cmp	r3, #64	; 0x40
 80078b2:	d007      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80078b4:	e018      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b6:	4b5e      	ldr	r3, [pc, #376]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	4a5d      	ldr	r2, [pc, #372]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078c2:	e017      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3304      	adds	r3, #4
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fe8c 	bl	80085e8 <RCCEx_PLL2_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078d4:	e00e      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3324      	adds	r3, #36	; 0x24
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 ff35 	bl	800874c <RCCEx_PLL3_Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078e6:	e005      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	75fb      	strb	r3, [r7, #23]
      break;
 80078ec:	e002      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80078f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d109      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80078fa:	4b4d      	ldr	r3, [pc, #308]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	494a      	ldr	r1, [pc, #296]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007908:	4313      	orrs	r3, r2
 800790a:	650b      	str	r3, [r1, #80]	; 0x50
 800790c:	e001      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800791a:	2b00      	cmp	r3, #0
 800791c:	d049      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007928:	d030      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800792a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800792e:	d82a      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007930:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007934:	d02c      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007936:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800793a:	d824      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800793c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007940:	d018      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007946:	d81e      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800794c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007950:	d007      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007952:	e018      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007954:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	4a35      	ldr	r2, [pc, #212]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800795a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800795e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007960:	e017      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3304      	adds	r3, #4
 8007966:	2100      	movs	r1, #0
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fe3d 	bl	80085e8 <RCCEx_PLL2_Config>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007972:	e00e      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3324      	adds	r3, #36	; 0x24
 8007978:	2100      	movs	r1, #0
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fee6 	bl	800874c <RCCEx_PLL3_Config>
 8007980:	4603      	mov	r3, r0
 8007982:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007984:	e005      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	75fb      	strb	r3, [r7, #23]
      break;
 800798a:	e002      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800798c:	bf00      	nop
 800798e:	e000      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007998:	4b25      	ldr	r3, [pc, #148]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800799a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079a6:	4922      	ldr	r1, [pc, #136]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	658b      	str	r3, [r1, #88]	; 0x58
 80079ac:	e001      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d04b      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079c8:	d030      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80079ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079ce:	d82a      	bhi.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079d4:	d02e      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80079d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079da:	d824      	bhi.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079e0:	d018      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80079e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079e6:	d81e      	bhi.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80079ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079f0:	d007      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80079f2:	e018      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f4:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	4a0d      	ldr	r2, [pc, #52]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a00:	e019      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3304      	adds	r3, #4
 8007a06:	2100      	movs	r1, #0
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fded 	bl	80085e8 <RCCEx_PLL2_Config>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a12:	e010      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3324      	adds	r3, #36	; 0x24
 8007a18:	2100      	movs	r1, #0
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fe96 	bl	800874c <RCCEx_PLL3_Config>
 8007a20:	4603      	mov	r3, r0
 8007a22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a24:	e007      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	75fb      	strb	r3, [r7, #23]
      break;
 8007a2a:	e004      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007a2c:	bf00      	nop
 8007a2e:	e002      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007a30:	58024400 	.word	0x58024400
      break;
 8007a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a3c:	4b99      	ldr	r3, [pc, #612]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a4a:	4996      	ldr	r1, [pc, #600]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	658b      	str	r3, [r1, #88]	; 0x58
 8007a50:	e001      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d032      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a66:	2b30      	cmp	r3, #48	; 0x30
 8007a68:	d01c      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007a6a:	2b30      	cmp	r3, #48	; 0x30
 8007a6c:	d817      	bhi.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007a6e:	2b20      	cmp	r3, #32
 8007a70:	d00c      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d813      	bhi.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d016      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007a7a:	2b10      	cmp	r3, #16
 8007a7c:	d10f      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a7e:	4b89      	ldr	r3, [pc, #548]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a82:	4a88      	ldr	r2, [pc, #544]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a8a:	e00e      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	2102      	movs	r1, #2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 fda8 	bl	80085e8 <RCCEx_PLL2_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a9c:	e005      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa2:	e002      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007aa4:	bf00      	nop
 8007aa6:	e000      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d109      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ab0:	4b7c      	ldr	r3, [pc, #496]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007abc:	4979      	ldr	r1, [pc, #484]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ac2:	e001      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
 8007ac6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d047      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007adc:	d030      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ae2:	d82a      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007ae4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ae8:	d02c      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007aea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007aee:	d824      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af4:	d018      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afa:	d81e      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b04:	d007      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007b06:	e018      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b08:	4b66      	ldr	r3, [pc, #408]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	4a65      	ldr	r2, [pc, #404]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b14:	e017      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 fd63 	bl	80085e8 <RCCEx_PLL2_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b26:	e00e      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3324      	adds	r3, #36	; 0x24
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fe0c 	bl	800874c <RCCEx_PLL3_Config>
 8007b34:	4603      	mov	r3, r0
 8007b36:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b38:	e005      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b3e:	e002      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007b40:	bf00      	nop
 8007b42:	e000      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d109      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007b4c:	4b55      	ldr	r3, [pc, #340]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b50:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b58:	4952      	ldr	r1, [pc, #328]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8007b5e:	e001      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d049      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b78:	d02e      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007b7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b7e:	d828      	bhi.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b84:	d02a      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007b86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b8a:	d822      	bhi.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b90:	d026      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007b92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b96:	d81c      	bhi.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b9c:	d010      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ba2:	d816      	bhi.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01d      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bac:	d111      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fd17 	bl	80085e8 <RCCEx_PLL2_Config>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007bbe:	e012      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3324      	adds	r3, #36	; 0x24
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fdc0 	bl	800874c <RCCEx_PLL3_Config>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007bd0:	e009      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd6:	e006      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007bd8:	bf00      	nop
 8007bda:	e004      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007bdc:	bf00      	nop
 8007bde:	e002      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007be0:	bf00      	nop
 8007be2:	e000      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d109      	bne.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007bec:	4b2d      	ldr	r3, [pc, #180]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bf8:	492a      	ldr	r1, [pc, #168]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	650b      	str	r3, [r1, #80]	; 0x50
 8007bfe:	e001      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d04d      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c1a:	d02e      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c20:	d828      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c26:	d02a      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c2c:	d822      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007c2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c32:	d026      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007c34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c38:	d81c      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c3e:	d010      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c44:	d816      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d01d      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c4e:	d111      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3304      	adds	r3, #4
 8007c54:	2101      	movs	r1, #1
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fcc6 	bl	80085e8 <RCCEx_PLL2_Config>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c60:	e012      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3324      	adds	r3, #36	; 0x24
 8007c66:	2101      	movs	r1, #1
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fd6f 	bl	800874c <RCCEx_PLL3_Config>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c72:	e009      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	75fb      	strb	r3, [r7, #23]
      break;
 8007c78:	e006      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c7a:	bf00      	nop
 8007c7c:	e004      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c7e:	bf00      	nop
 8007c80:	e002      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c82:	bf00      	nop
 8007c84:	e000      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10c      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c8e:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c9c:	4901      	ldr	r1, [pc, #4]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	658b      	str	r3, [r1, #88]	; 0x58
 8007ca2:	e003      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007ca4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d02f      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc0:	d00e      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007cc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc6:	d814      	bhi.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d015      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cd0:	d10f      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd2:	4baf      	ldr	r3, [pc, #700]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	4aae      	ldr	r2, [pc, #696]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007cde:	e00c      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fc7e 	bl	80085e8 <RCCEx_PLL2_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007cf0:	e003      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf6:	e000      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d109      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d00:	4ba3      	ldr	r3, [pc, #652]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d0c:	49a0      	ldr	r1, [pc, #640]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	650b      	str	r3, [r1, #80]	; 0x50
 8007d12:	e001      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d032      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	d81b      	bhi.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007d2c:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d6b 	.word	0x08007d6b
 8007d38:	08007d45 	.word	0x08007d45
 8007d3c:	08007d53 	.word	0x08007d53
 8007d40:	08007d6b 	.word	0x08007d6b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d44:	4b92      	ldr	r3, [pc, #584]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	4a91      	ldr	r2, [pc, #580]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007d50:	e00c      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3304      	adds	r3, #4
 8007d56:	2102      	movs	r1, #2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 fc45 	bl	80085e8 <RCCEx_PLL2_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007d62:	e003      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	75fb      	strb	r3, [r7, #23]
      break;
 8007d68:	e000      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d109      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007d72:	4b87      	ldr	r3, [pc, #540]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d76:	f023 0203 	bic.w	r2, r3, #3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7e:	4984      	ldr	r1, [pc, #528]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d84:	e001      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 8086 	beq.w	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d98:	4b7e      	ldr	r3, [pc, #504]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a7d      	ldr	r2, [pc, #500]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007da2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007da4:	f7fd fa94 	bl	80052d0 <HAL_GetTick>
 8007da8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007daa:	e009      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dac:	f7fd fa90 	bl	80052d0 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b64      	cmp	r3, #100	; 0x64
 8007db8:	d902      	bls.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	75fb      	strb	r3, [r7, #23]
        break;
 8007dbe:	e005      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007dc0:	4b74      	ldr	r3, [pc, #464]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0ef      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d166      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007dd2:	4b6f      	ldr	r3, [pc, #444]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ddc:	4053      	eors	r3, r2
 8007dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d013      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007de6:	4b6a      	ldr	r3, [pc, #424]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007df0:	4b67      	ldr	r3, [pc, #412]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df4:	4a66      	ldr	r2, [pc, #408]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dfa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007dfc:	4b64      	ldr	r3, [pc, #400]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e00:	4a63      	ldr	r2, [pc, #396]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e06:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007e08:	4a61      	ldr	r2, [pc, #388]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e18:	d115      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1a:	f7fd fa59 	bl	80052d0 <HAL_GetTick>
 8007e1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e20:	e00b      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e22:	f7fd fa55 	bl	80052d0 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d902      	bls.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	75fb      	strb	r3, [r7, #23]
            break;
 8007e38:	e005      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e3a:	4b55      	ldr	r3, [pc, #340]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0ed      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d126      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e5a:	d10d      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007e5c:	4b4c      	ldr	r3, [pc, #304]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e6a:	0919      	lsrs	r1, r3, #4
 8007e6c:	4b4a      	ldr	r3, [pc, #296]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007e6e:	400b      	ands	r3, r1
 8007e70:	4947      	ldr	r1, [pc, #284]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	610b      	str	r3, [r1, #16]
 8007e76:	e005      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007e78:	4b45      	ldr	r3, [pc, #276]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	4a44      	ldr	r2, [pc, #272]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e82:	6113      	str	r3, [r2, #16]
 8007e84:	4b42      	ldr	r3, [pc, #264]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e92:	493f      	ldr	r1, [pc, #252]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	670b      	str	r3, [r1, #112]	; 0x70
 8007e98:	e004      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	75bb      	strb	r3, [r7, #22]
 8007e9e:	e001      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 8085 	beq.w	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eb6:	2b28      	cmp	r3, #40	; 0x28
 8007eb8:	d866      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007eba:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007f9d 	.word	0x08007f9d
 8007ec4:	08007f89 	.word	0x08007f89
 8007ec8:	08007f89 	.word	0x08007f89
 8007ecc:	08007f89 	.word	0x08007f89
 8007ed0:	08007f89 	.word	0x08007f89
 8007ed4:	08007f89 	.word	0x08007f89
 8007ed8:	08007f89 	.word	0x08007f89
 8007edc:	08007f89 	.word	0x08007f89
 8007ee0:	08007f65 	.word	0x08007f65
 8007ee4:	08007f89 	.word	0x08007f89
 8007ee8:	08007f89 	.word	0x08007f89
 8007eec:	08007f89 	.word	0x08007f89
 8007ef0:	08007f89 	.word	0x08007f89
 8007ef4:	08007f89 	.word	0x08007f89
 8007ef8:	08007f89 	.word	0x08007f89
 8007efc:	08007f89 	.word	0x08007f89
 8007f00:	08007f77 	.word	0x08007f77
 8007f04:	08007f89 	.word	0x08007f89
 8007f08:	08007f89 	.word	0x08007f89
 8007f0c:	08007f89 	.word	0x08007f89
 8007f10:	08007f89 	.word	0x08007f89
 8007f14:	08007f89 	.word	0x08007f89
 8007f18:	08007f89 	.word	0x08007f89
 8007f1c:	08007f89 	.word	0x08007f89
 8007f20:	08007f9d 	.word	0x08007f9d
 8007f24:	08007f89 	.word	0x08007f89
 8007f28:	08007f89 	.word	0x08007f89
 8007f2c:	08007f89 	.word	0x08007f89
 8007f30:	08007f89 	.word	0x08007f89
 8007f34:	08007f89 	.word	0x08007f89
 8007f38:	08007f89 	.word	0x08007f89
 8007f3c:	08007f89 	.word	0x08007f89
 8007f40:	08007f9d 	.word	0x08007f9d
 8007f44:	08007f89 	.word	0x08007f89
 8007f48:	08007f89 	.word	0x08007f89
 8007f4c:	08007f89 	.word	0x08007f89
 8007f50:	08007f89 	.word	0x08007f89
 8007f54:	08007f89 	.word	0x08007f89
 8007f58:	08007f89 	.word	0x08007f89
 8007f5c:	08007f89 	.word	0x08007f89
 8007f60:	08007f9d 	.word	0x08007f9d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3304      	adds	r3, #4
 8007f68:	2101      	movs	r1, #1
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fb3c 	bl	80085e8 <RCCEx_PLL2_Config>
 8007f70:	4603      	mov	r3, r0
 8007f72:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f74:	e013      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3324      	adds	r3, #36	; 0x24
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fbe5 	bl	800874c <RCCEx_PLL3_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f86:	e00a      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f8c:	e007      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007f8e:	bf00      	nop
 8007f90:	58024400 	.word	0x58024400
 8007f94:	58024800 	.word	0x58024800
 8007f98:	00ffffcf 	.word	0x00ffffcf
      break;
 8007f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d109      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007fa4:	4b96      	ldr	r3, [pc, #600]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fb0:	4993      	ldr	r1, [pc, #588]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	654b      	str	r3, [r1, #84]	; 0x54
 8007fb6:	e001      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
 8007fba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d038      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fcc:	2b05      	cmp	r3, #5
 8007fce:	d821      	bhi.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007fd0:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd6:	bf00      	nop
 8007fd8:	0800801b 	.word	0x0800801b
 8007fdc:	08007ff1 	.word	0x08007ff1
 8007fe0:	08008003 	.word	0x08008003
 8007fe4:	0800801b 	.word	0x0800801b
 8007fe8:	0800801b 	.word	0x0800801b
 8007fec:	0800801b 	.word	0x0800801b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 faf6 	bl	80085e8 <RCCEx_PLL2_Config>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008000:	e00c      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3324      	adds	r3, #36	; 0x24
 8008006:	2101      	movs	r1, #1
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fb9f 	bl	800874c <RCCEx_PLL3_Config>
 800800e:	4603      	mov	r3, r0
 8008010:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008012:	e003      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	75fb      	strb	r3, [r7, #23]
      break;
 8008018:	e000      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800801a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d109      	bne.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008022:	4b77      	ldr	r3, [pc, #476]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008026:	f023 0207 	bic.w	r2, r3, #7
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800802e:	4974      	ldr	r1, [pc, #464]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008030:	4313      	orrs	r3, r2
 8008032:	654b      	str	r3, [r1, #84]	; 0x54
 8008034:	e001      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	2b00      	cmp	r3, #0
 8008044:	d03a      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804c:	2b05      	cmp	r3, #5
 800804e:	d821      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008050:	a201      	add	r2, pc, #4	; (adr r2, 8008058 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	0800809b 	.word	0x0800809b
 800805c:	08008071 	.word	0x08008071
 8008060:	08008083 	.word	0x08008083
 8008064:	0800809b 	.word	0x0800809b
 8008068:	0800809b 	.word	0x0800809b
 800806c:	0800809b 	.word	0x0800809b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3304      	adds	r3, #4
 8008074:	2101      	movs	r1, #1
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fab6 	bl	80085e8 <RCCEx_PLL2_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008080:	e00c      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3324      	adds	r3, #36	; 0x24
 8008086:	2101      	movs	r1, #1
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fb5f 	bl	800874c <RCCEx_PLL3_Config>
 800808e:	4603      	mov	r3, r0
 8008090:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008092:	e003      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	75fb      	strb	r3, [r7, #23]
      break;
 8008098:	e000      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800809a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080a2:	4b57      	ldr	r3, [pc, #348]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80080a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a6:	f023 0207 	bic.w	r2, r3, #7
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b0:	4953      	ldr	r1, [pc, #332]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	658b      	str	r3, [r1, #88]	; 0x58
 80080b6:	e001      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d04b      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080d2:	d02e      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80080d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080d8:	d828      	bhi.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080de:	d02a      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80080e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e4:	d822      	bhi.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080ea:	d026      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80080ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080f0:	d81c      	bhi.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080f6:	d010      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80080f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080fc:	d816      	bhi.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d01d      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008106:	d111      	bne.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3304      	adds	r3, #4
 800810c:	2100      	movs	r1, #0
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fa6a 	bl	80085e8 <RCCEx_PLL2_Config>
 8008114:	4603      	mov	r3, r0
 8008116:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008118:	e012      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3324      	adds	r3, #36	; 0x24
 800811e:	2102      	movs	r1, #2
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fb13 	bl	800874c <RCCEx_PLL3_Config>
 8008126:	4603      	mov	r3, r0
 8008128:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800812a:	e009      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	75fb      	strb	r3, [r7, #23]
      break;
 8008130:	e006      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008132:	bf00      	nop
 8008134:	e004      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008136:	bf00      	nop
 8008138:	e002      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800813a:	bf00      	nop
 800813c:	e000      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800813e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008140:	7dfb      	ldrb	r3, [r7, #23]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10a      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008146:	4b2e      	ldr	r3, [pc, #184]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008154:	492a      	ldr	r1, [pc, #168]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008156:	4313      	orrs	r3, r2
 8008158:	654b      	str	r3, [r1, #84]	; 0x54
 800815a:	e001      	b.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815c:	7dfb      	ldrb	r3, [r7, #23]
 800815e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008168:	2b00      	cmp	r3, #0
 800816a:	d04d      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008172:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008176:	d02e      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008178:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800817c:	d828      	bhi.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800817e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008182:	d02a      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008188:	d822      	bhi.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800818a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800818e:	d026      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008190:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008194:	d81c      	bhi.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800819a:	d010      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800819c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081a0:	d816      	bhi.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d01d      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80081a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081aa:	d111      	bne.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3304      	adds	r3, #4
 80081b0:	2100      	movs	r1, #0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fa18 	bl	80085e8 <RCCEx_PLL2_Config>
 80081b8:	4603      	mov	r3, r0
 80081ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80081bc:	e012      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3324      	adds	r3, #36	; 0x24
 80081c2:	2102      	movs	r1, #2
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fac1 	bl	800874c <RCCEx_PLL3_Config>
 80081ca:	4603      	mov	r3, r0
 80081cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80081ce:	e009      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	75fb      	strb	r3, [r7, #23]
      break;
 80081d4:	e006      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081d6:	bf00      	nop
 80081d8:	e004      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081da:	bf00      	nop
 80081dc:	e002      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081de:	bf00      	nop
 80081e0:	e000      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10c      	bne.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081ea:	4b05      	ldr	r3, [pc, #20]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081f8:	4901      	ldr	r1, [pc, #4]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	658b      	str	r3, [r1, #88]	; 0x58
 80081fe:	e003      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008210:	2b00      	cmp	r3, #0
 8008212:	d04b      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800821a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800821e:	d02e      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008220:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008224:	d828      	bhi.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800822a:	d02a      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800822c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008230:	d822      	bhi.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008232:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008236:	d026      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008238:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800823c:	d81c      	bhi.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800823e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008242:	d010      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008248:	d816      	bhi.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d01d      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800824e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008252:	d111      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3304      	adds	r3, #4
 8008258:	2100      	movs	r1, #0
 800825a:	4618      	mov	r0, r3
 800825c:	f000 f9c4 	bl	80085e8 <RCCEx_PLL2_Config>
 8008260:	4603      	mov	r3, r0
 8008262:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008264:	e012      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	3324      	adds	r3, #36	; 0x24
 800826a:	2102      	movs	r1, #2
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fa6d 	bl	800874c <RCCEx_PLL3_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008276:	e009      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	75fb      	strb	r3, [r7, #23]
      break;
 800827c:	e006      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800827e:	bf00      	nop
 8008280:	e004      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008282:	bf00      	nop
 8008284:	e002      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008286:	bf00      	nop
 8008288:	e000      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800828a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008292:	4b9d      	ldr	r3, [pc, #628]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082a0:	4999      	ldr	r1, [pc, #612]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	658b      	str	r3, [r1, #88]	; 0x58
 80082a6:	e001      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01a      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c2:	d10a      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3324      	adds	r3, #36	; 0x24
 80082c8:	2102      	movs	r1, #2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fa3e 	bl	800874c <RCCEx_PLL3_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80082da:	4b8b      	ldr	r3, [pc, #556]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082e8:	4987      	ldr	r1, [pc, #540]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0310 	and.w	r3, r3, #16
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d01a      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008304:	d10a      	bne.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3324      	adds	r3, #36	; 0x24
 800830a:	2102      	movs	r1, #2
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fa1d 	bl	800874c <RCCEx_PLL3_Config>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800831c:	4b7a      	ldr	r3, [pc, #488]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800831e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800832a:	4977      	ldr	r1, [pc, #476]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800832c:	4313      	orrs	r3, r2
 800832e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d034      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008346:	d01d      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800834c:	d817      	bhi.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008356:	d009      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008358:	e011      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	3304      	adds	r3, #4
 800835e:	2100      	movs	r1, #0
 8008360:	4618      	mov	r0, r3
 8008362:	f000 f941 	bl	80085e8 <RCCEx_PLL2_Config>
 8008366:	4603      	mov	r3, r0
 8008368:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800836a:	e00c      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3324      	adds	r3, #36	; 0x24
 8008370:	2102      	movs	r1, #2
 8008372:	4618      	mov	r0, r3
 8008374:	f000 f9ea 	bl	800874c <RCCEx_PLL3_Config>
 8008378:	4603      	mov	r3, r0
 800837a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800837c:	e003      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	75fb      	strb	r3, [r7, #23]
      break;
 8008382:	e000      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008386:	7dfb      	ldrb	r3, [r7, #23]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800838c:	4b5e      	ldr	r3, [pc, #376]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800838e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800839a:	495b      	ldr	r1, [pc, #364]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800839c:	4313      	orrs	r3, r2
 800839e:	658b      	str	r3, [r1, #88]	; 0x58
 80083a0:	e001      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
 80083a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d033      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083bc:	d01c      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80083be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083c2:	d816      	bhi.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80083c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083c8:	d003      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80083ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083ce:	d007      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80083d0:	e00f      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d2:	4b4d      	ldr	r3, [pc, #308]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	4a4c      	ldr	r2, [pc, #304]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80083de:	e00c      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3324      	adds	r3, #36	; 0x24
 80083e4:	2101      	movs	r1, #1
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f9b0 	bl	800874c <RCCEx_PLL3_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80083f0:	e003      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	75fb      	strb	r3, [r7, #23]
      break;
 80083f6:	e000      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80083f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10a      	bne.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008400:	4b41      	ldr	r3, [pc, #260]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008404:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800840e:	493e      	ldr	r1, [pc, #248]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008410:	4313      	orrs	r3, r2
 8008412:	654b      	str	r3, [r1, #84]	; 0x54
 8008414:	e001      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d029      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800842e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008432:	d007      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008434:	e00f      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008436:	4b34      	ldr	r3, [pc, #208]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	4a33      	ldr	r2, [pc, #204]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800843c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008440:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008442:	e00b      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3304      	adds	r3, #4
 8008448:	2102      	movs	r1, #2
 800844a:	4618      	mov	r0, r3
 800844c:	f000 f8cc 	bl	80085e8 <RCCEx_PLL2_Config>
 8008450:	4603      	mov	r3, r0
 8008452:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008454:	e002      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	75fb      	strb	r3, [r7, #23]
      break;
 800845a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008462:	4b29      	ldr	r3, [pc, #164]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008466:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800846e:	4926      	ldr	r1, [pc, #152]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008470:	4313      	orrs	r3, r2
 8008472:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008474:	e001      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3324      	adds	r3, #36	; 0x24
 800848a:	2102      	movs	r1, #2
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f95d 	bl	800874c <RCCEx_PLL3_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d033      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084b0:	d017      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80084b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084b6:	d811      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80084b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084bc:	d013      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80084be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084c2:	d80b      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d010      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80084c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084cc:	d106      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ce:	4b0e      	ldr	r3, [pc, #56]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d2:	4a0d      	ldr	r2, [pc, #52]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80084da:	e007      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	75fb      	strb	r3, [r7, #23]
      break;
 80084e0:	e004      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80084e2:	bf00      	nop
 80084e4:	e002      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80084e6:	bf00      	nop
 80084e8:	e000      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80084ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084ec:	7dfb      	ldrb	r3, [r7, #23]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10c      	bne.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084f2:	4b05      	ldr	r3, [pc, #20]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fe:	4902      	ldr	r1, [pc, #8]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008500:	4313      	orrs	r3, r2
 8008502:	654b      	str	r3, [r1, #84]	; 0x54
 8008504:	e004      	b.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008506:	bf00      	nop
 8008508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d008      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800851c:	4b31      	ldr	r3, [pc, #196]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800851e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008520:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008528:	492e      	ldr	r1, [pc, #184]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800852a:	4313      	orrs	r3, r2
 800852c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d009      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800853a:	4b2a      	ldr	r3, [pc, #168]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008548:	4926      	ldr	r1, [pc, #152]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800854a:	4313      	orrs	r3, r2
 800854c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d008      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800855a:	4b22      	ldr	r3, [pc, #136]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800855c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800855e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008566:	491f      	ldr	r1, [pc, #124]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008568:	4313      	orrs	r3, r2
 800856a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00d      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008578:	4b1a      	ldr	r3, [pc, #104]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	4a19      	ldr	r2, [pc, #100]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800857e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008582:	6113      	str	r3, [r2, #16]
 8008584:	4b17      	ldr	r3, [pc, #92]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008586:	691a      	ldr	r2, [r3, #16]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800858e:	4915      	ldr	r1, [pc, #84]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008590:	4313      	orrs	r3, r2
 8008592:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	da08      	bge.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800859c:	4b11      	ldr	r3, [pc, #68]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800859e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a8:	490e      	ldr	r1, [pc, #56]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80085ba:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80085bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c8:	4906      	ldr	r1, [pc, #24]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80085ce:	7dbb      	ldrb	r3, [r7, #22]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d101      	bne.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	e000      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	58024400 	.word	0x58024400

080085e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085f6:	4b53      	ldr	r3, [pc, #332]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d101      	bne.n	8008606 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e099      	b.n	800873a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008606:	4b4f      	ldr	r3, [pc, #316]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a4e      	ldr	r2, [pc, #312]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800860c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008612:	f7fc fe5d 	bl	80052d0 <HAL_GetTick>
 8008616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008618:	e008      	b.n	800862c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800861a:	f7fc fe59 	bl	80052d0 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b02      	cmp	r3, #2
 8008626:	d901      	bls.n	800862c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e086      	b.n	800873a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800862c:	4b45      	ldr	r3, [pc, #276]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1f0      	bne.n	800861a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008638:	4b42      	ldr	r3, [pc, #264]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	031b      	lsls	r3, r3, #12
 8008646:	493f      	ldr	r1, [pc, #252]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008648:	4313      	orrs	r3, r2
 800864a:	628b      	str	r3, [r1, #40]	; 0x28
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	3b01      	subs	r3, #1
 8008652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	3b01      	subs	r3, #1
 800865c:	025b      	lsls	r3, r3, #9
 800865e:	b29b      	uxth	r3, r3
 8008660:	431a      	orrs	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	3b01      	subs	r3, #1
 8008668:	041b      	lsls	r3, r3, #16
 800866a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800866e:	431a      	orrs	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	3b01      	subs	r3, #1
 8008676:	061b      	lsls	r3, r3, #24
 8008678:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800867c:	4931      	ldr	r1, [pc, #196]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800867e:	4313      	orrs	r3, r2
 8008680:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008682:	4b30      	ldr	r3, [pc, #192]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008686:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	492d      	ldr	r1, [pc, #180]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008690:	4313      	orrs	r3, r2
 8008692:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008694:	4b2b      	ldr	r3, [pc, #172]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	f023 0220 	bic.w	r2, r3, #32
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	4928      	ldr	r1, [pc, #160]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80086a6:	4b27      	ldr	r3, [pc, #156]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086aa:	4a26      	ldr	r2, [pc, #152]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086ac:	f023 0310 	bic.w	r3, r3, #16
 80086b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80086b2:	4b24      	ldr	r3, [pc, #144]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b6:	4b24      	ldr	r3, [pc, #144]	; (8008748 <RCCEx_PLL2_Config+0x160>)
 80086b8:	4013      	ands	r3, r2
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	69d2      	ldr	r2, [r2, #28]
 80086be:	00d2      	lsls	r2, r2, #3
 80086c0:	4920      	ldr	r1, [pc, #128]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80086c6:	4b1f      	ldr	r3, [pc, #124]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	4a1e      	ldr	r2, [pc, #120]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086cc:	f043 0310 	orr.w	r3, r3, #16
 80086d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d106      	bne.n	80086e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80086d8:	4b1a      	ldr	r3, [pc, #104]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	4a19      	ldr	r2, [pc, #100]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086e4:	e00f      	b.n	8008706 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d106      	bne.n	80086fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80086ec:	4b15      	ldr	r3, [pc, #84]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	4a14      	ldr	r2, [pc, #80]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086f8:	e005      	b.n	8008706 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	4a11      	ldr	r2, [pc, #68]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008704:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008706:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a0e      	ldr	r2, [pc, #56]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800870c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008712:	f7fc fddd 	bl	80052d0 <HAL_GetTick>
 8008716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008718:	e008      	b.n	800872c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800871a:	f7fc fdd9 	bl	80052d0 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	2b02      	cmp	r3, #2
 8008726:	d901      	bls.n	800872c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e006      	b.n	800873a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <RCCEx_PLL2_Config+0x15c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0f0      	beq.n	800871a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008738:	7bfb      	ldrb	r3, [r7, #15]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	58024400 	.word	0x58024400
 8008748:	ffff0007 	.word	0xffff0007

0800874c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800875a:	4b53      	ldr	r3, [pc, #332]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b03      	cmp	r3, #3
 8008764:	d101      	bne.n	800876a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e099      	b.n	800889e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800876a:	4b4f      	ldr	r3, [pc, #316]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a4e      	ldr	r2, [pc, #312]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008776:	f7fc fdab 	bl	80052d0 <HAL_GetTick>
 800877a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800877c:	e008      	b.n	8008790 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800877e:	f7fc fda7 	bl	80052d0 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d901      	bls.n	8008790 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e086      	b.n	800889e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008790:	4b45      	ldr	r3, [pc, #276]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f0      	bne.n	800877e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800879c:	4b42      	ldr	r3, [pc, #264]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	051b      	lsls	r3, r3, #20
 80087aa:	493f      	ldr	r1, [pc, #252]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	628b      	str	r3, [r1, #40]	; 0x28
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	3b01      	subs	r3, #1
 80087c0:	025b      	lsls	r3, r3, #9
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	431a      	orrs	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	041b      	lsls	r3, r3, #16
 80087ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	3b01      	subs	r3, #1
 80087da:	061b      	lsls	r3, r3, #24
 80087dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087e0:	4931      	ldr	r1, [pc, #196]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80087e6:	4b30      	ldr	r3, [pc, #192]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	492d      	ldr	r1, [pc, #180]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80087f8:	4b2b      	ldr	r3, [pc, #172]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	4928      	ldr	r1, [pc, #160]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008806:	4313      	orrs	r3, r2
 8008808:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800880a:	4b27      	ldr	r3, [pc, #156]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	4a26      	ldr	r2, [pc, #152]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008816:	4b24      	ldr	r3, [pc, #144]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800881a:	4b24      	ldr	r3, [pc, #144]	; (80088ac <RCCEx_PLL3_Config+0x160>)
 800881c:	4013      	ands	r3, r2
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	69d2      	ldr	r2, [r2, #28]
 8008822:	00d2      	lsls	r2, r2, #3
 8008824:	4920      	ldr	r1, [pc, #128]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008826:	4313      	orrs	r3, r2
 8008828:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800882a:	4b1f      	ldr	r3, [pc, #124]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	4a1e      	ldr	r2, [pc, #120]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800883c:	4b1a      	ldr	r3, [pc, #104]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	4a19      	ldr	r2, [pc, #100]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008848:	e00f      	b.n	800886a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d106      	bne.n	800885e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008850:	4b15      	ldr	r3, [pc, #84]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	4a14      	ldr	r2, [pc, #80]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008856:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800885a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800885c:	e005      	b.n	800886a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	4a11      	ldr	r2, [pc, #68]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008868:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800886a:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a0e      	ldr	r2, [pc, #56]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008876:	f7fc fd2b 	bl	80052d0 <HAL_GetTick>
 800887a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800887c:	e008      	b.n	8008890 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800887e:	f7fc fd27 	bl	80052d0 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d901      	bls.n	8008890 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e006      	b.n	800889e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008890:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <RCCEx_PLL3_Config+0x15c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0f0      	beq.n	800887e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	58024400 	.word	0x58024400
 80088ac:	ffff0007 	.word	0xffff0007

080088b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e049      	b.n	8008956 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f841 	bl	800895e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2202      	movs	r2, #2
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3304      	adds	r3, #4
 80088ec:	4619      	mov	r1, r3
 80088ee:	4610      	mov	r0, r2
 80088f0:	f000 fa00 	bl	8008cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
	...

08008974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	d001      	beq.n	800898c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e054      	b.n	8008a36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0201 	orr.w	r2, r2, #1
 80089a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a26      	ldr	r2, [pc, #152]	; (8008a44 <HAL_TIM_Base_Start_IT+0xd0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d022      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x80>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b6:	d01d      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x80>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a22      	ldr	r2, [pc, #136]	; (8008a48 <HAL_TIM_Base_Start_IT+0xd4>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d018      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x80>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a21      	ldr	r2, [pc, #132]	; (8008a4c <HAL_TIM_Base_Start_IT+0xd8>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d013      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x80>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1f      	ldr	r2, [pc, #124]	; (8008a50 <HAL_TIM_Base_Start_IT+0xdc>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d00e      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x80>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a1e      	ldr	r2, [pc, #120]	; (8008a54 <HAL_TIM_Base_Start_IT+0xe0>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d009      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x80>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a1c      	ldr	r2, [pc, #112]	; (8008a58 <HAL_TIM_Base_Start_IT+0xe4>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d004      	beq.n	80089f4 <HAL_TIM_Base_Start_IT+0x80>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a1b      	ldr	r2, [pc, #108]	; (8008a5c <HAL_TIM_Base_Start_IT+0xe8>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d115      	bne.n	8008a20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	4b19      	ldr	r3, [pc, #100]	; (8008a60 <HAL_TIM_Base_Start_IT+0xec>)
 80089fc:	4013      	ands	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b06      	cmp	r3, #6
 8008a04:	d015      	beq.n	8008a32 <HAL_TIM_Base_Start_IT+0xbe>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a0c:	d011      	beq.n	8008a32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0201 	orr.w	r2, r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a1e:	e008      	b.n	8008a32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0201 	orr.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	e000      	b.n	8008a34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	40010000 	.word	0x40010000
 8008a48:	40000400 	.word	0x40000400
 8008a4c:	40000800 	.word	0x40000800
 8008a50:	40000c00 	.word	0x40000c00
 8008a54:	40010400 	.word	0x40010400
 8008a58:	40001800 	.word	0x40001800
 8008a5c:	40014000 	.word	0x40014000
 8008a60:	00010007 	.word	0x00010007

08008a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d122      	bne.n	8008ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	f003 0302 	and.w	r3, r3, #2
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d11b      	bne.n	8008ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f06f 0202 	mvn.w	r2, #2
 8008a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f905 	bl	8008cb6 <HAL_TIM_IC_CaptureCallback>
 8008aac:	e005      	b.n	8008aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f8f7 	bl	8008ca2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f908 	bl	8008cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	d122      	bne.n	8008b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d11b      	bne.n	8008b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f06f 0204 	mvn.w	r2, #4
 8008ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f8db 	bl	8008cb6 <HAL_TIM_IC_CaptureCallback>
 8008b00:	e005      	b.n	8008b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f8cd 	bl	8008ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f8de 	bl	8008cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	f003 0308 	and.w	r3, r3, #8
 8008b1e:	2b08      	cmp	r3, #8
 8008b20:	d122      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f003 0308 	and.w	r3, r3, #8
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d11b      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f06f 0208 	mvn.w	r2, #8
 8008b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2204      	movs	r2, #4
 8008b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f8b1 	bl	8008cb6 <HAL_TIM_IC_CaptureCallback>
 8008b54:	e005      	b.n	8008b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f8a3 	bl	8008ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f8b4 	bl	8008cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	f003 0310 	and.w	r3, r3, #16
 8008b72:	2b10      	cmp	r3, #16
 8008b74:	d122      	bne.n	8008bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	2b10      	cmp	r3, #16
 8008b82:	d11b      	bne.n	8008bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f06f 0210 	mvn.w	r2, #16
 8008b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2208      	movs	r2, #8
 8008b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f887 	bl	8008cb6 <HAL_TIM_IC_CaptureCallback>
 8008ba8:	e005      	b.n	8008bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f879 	bl	8008ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f88a 	bl	8008cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d10e      	bne.n	8008be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d107      	bne.n	8008be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f06f 0201 	mvn.w	r2, #1
 8008be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7fc f8b4 	bl	8004d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf2:	2b80      	cmp	r3, #128	; 0x80
 8008bf4:	d10e      	bne.n	8008c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c00:	2b80      	cmp	r3, #128	; 0x80
 8008c02:	d107      	bne.n	8008c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f914 	bl	8008e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c22:	d10e      	bne.n	8008c42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2e:	2b80      	cmp	r3, #128	; 0x80
 8008c30:	d107      	bne.n	8008c42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f907 	bl	8008e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4c:	2b40      	cmp	r3, #64	; 0x40
 8008c4e:	d10e      	bne.n	8008c6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5a:	2b40      	cmp	r3, #64	; 0x40
 8008c5c:	d107      	bne.n	8008c6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f838 	bl	8008cde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	f003 0320 	and.w	r3, r3, #32
 8008c78:	2b20      	cmp	r3, #32
 8008c7a:	d10e      	bne.n	8008c9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0320 	and.w	r3, r3, #32
 8008c86:	2b20      	cmp	r3, #32
 8008c88:	d107      	bne.n	8008c9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f06f 0220 	mvn.w	r2, #32
 8008c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8c7 	bl	8008e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c9a:	bf00      	nop
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008caa:	bf00      	nop
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cbe:	bf00      	nop
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b083      	sub	sp, #12
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cd2:	bf00      	nop
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
	...

08008cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a40      	ldr	r2, [pc, #256]	; (8008e08 <TIM_Base_SetConfig+0x114>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d013      	beq.n	8008d34 <TIM_Base_SetConfig+0x40>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d12:	d00f      	beq.n	8008d34 <TIM_Base_SetConfig+0x40>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a3d      	ldr	r2, [pc, #244]	; (8008e0c <TIM_Base_SetConfig+0x118>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00b      	beq.n	8008d34 <TIM_Base_SetConfig+0x40>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a3c      	ldr	r2, [pc, #240]	; (8008e10 <TIM_Base_SetConfig+0x11c>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d007      	beq.n	8008d34 <TIM_Base_SetConfig+0x40>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a3b      	ldr	r2, [pc, #236]	; (8008e14 <TIM_Base_SetConfig+0x120>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d003      	beq.n	8008d34 <TIM_Base_SetConfig+0x40>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a3a      	ldr	r2, [pc, #232]	; (8008e18 <TIM_Base_SetConfig+0x124>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d108      	bne.n	8008d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a2f      	ldr	r2, [pc, #188]	; (8008e08 <TIM_Base_SetConfig+0x114>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d01f      	beq.n	8008d8e <TIM_Base_SetConfig+0x9a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d54:	d01b      	beq.n	8008d8e <TIM_Base_SetConfig+0x9a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a2c      	ldr	r2, [pc, #176]	; (8008e0c <TIM_Base_SetConfig+0x118>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d017      	beq.n	8008d8e <TIM_Base_SetConfig+0x9a>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a2b      	ldr	r2, [pc, #172]	; (8008e10 <TIM_Base_SetConfig+0x11c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d013      	beq.n	8008d8e <TIM_Base_SetConfig+0x9a>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a2a      	ldr	r2, [pc, #168]	; (8008e14 <TIM_Base_SetConfig+0x120>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00f      	beq.n	8008d8e <TIM_Base_SetConfig+0x9a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a29      	ldr	r2, [pc, #164]	; (8008e18 <TIM_Base_SetConfig+0x124>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00b      	beq.n	8008d8e <TIM_Base_SetConfig+0x9a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a28      	ldr	r2, [pc, #160]	; (8008e1c <TIM_Base_SetConfig+0x128>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d007      	beq.n	8008d8e <TIM_Base_SetConfig+0x9a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a27      	ldr	r2, [pc, #156]	; (8008e20 <TIM_Base_SetConfig+0x12c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d003      	beq.n	8008d8e <TIM_Base_SetConfig+0x9a>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a26      	ldr	r2, [pc, #152]	; (8008e24 <TIM_Base_SetConfig+0x130>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d108      	bne.n	8008da0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a10      	ldr	r2, [pc, #64]	; (8008e08 <TIM_Base_SetConfig+0x114>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00f      	beq.n	8008dec <TIM_Base_SetConfig+0xf8>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a12      	ldr	r2, [pc, #72]	; (8008e18 <TIM_Base_SetConfig+0x124>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d00b      	beq.n	8008dec <TIM_Base_SetConfig+0xf8>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a11      	ldr	r2, [pc, #68]	; (8008e1c <TIM_Base_SetConfig+0x128>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d007      	beq.n	8008dec <TIM_Base_SetConfig+0xf8>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a10      	ldr	r2, [pc, #64]	; (8008e20 <TIM_Base_SetConfig+0x12c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d003      	beq.n	8008dec <TIM_Base_SetConfig+0xf8>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a0f      	ldr	r2, [pc, #60]	; (8008e24 <TIM_Base_SetConfig+0x130>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d103      	bne.n	8008df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	691a      	ldr	r2, [r3, #16]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	615a      	str	r2, [r3, #20]
}
 8008dfa:	bf00      	nop
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	40010000 	.word	0x40010000
 8008e0c:	40000400 	.word	0x40000400
 8008e10:	40000800 	.word	0x40000800
 8008e14:	40000c00 	.word	0x40000c00
 8008e18:	40010400 	.word	0x40010400
 8008e1c:	40014000 	.word	0x40014000
 8008e20:	40014400 	.word	0x40014400
 8008e24:	40014800 	.word	0x40014800

08008e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e64:	b084      	sub	sp, #16
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	f107 001c 	add.w	r0, r7, #28
 8008e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d120      	bne.n	8008ebe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68da      	ldr	r2, [r3, #12]
 8008e8c:	4b2a      	ldr	r3, [pc, #168]	; (8008f38 <USB_CoreInit+0xd4>)
 8008e8e:	4013      	ands	r3, r2
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d105      	bne.n	8008eb2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f914 	bl	80090e0 <USB_CoreReset>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]
 8008ebc:	e01a      	b.n	8008ef4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f908 	bl	80090e0 <USB_CoreReset>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38
 8008ee6:	e005      	b.n	8008ef4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d116      	bne.n	8008f28 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f08:	4b0c      	ldr	r3, [pc, #48]	; (8008f3c <USB_CoreInit+0xd8>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f043 0206 	orr.w	r2, r3, #6
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f043 0220 	orr.w	r2, r3, #32
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f34:	b004      	add	sp, #16
 8008f36:	4770      	bx	lr
 8008f38:	ffbdffbf 	.word	0xffbdffbf
 8008f3c:	03ee0000 	.word	0x03ee0000

08008f40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f023 0201 	bic.w	r2, r3, #1
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f7e:	78fb      	ldrb	r3, [r7, #3]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d115      	bne.n	8008fb0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f90:	2001      	movs	r0, #1
 8008f92:	f7fc f9a9 	bl	80052e8 <HAL_Delay>
      ms++;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f891 	bl	80090c4 <USB_GetMode>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d01e      	beq.n	8008fe6 <USB_SetCurrentMode+0x84>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b31      	cmp	r3, #49	; 0x31
 8008fac:	d9f0      	bls.n	8008f90 <USB_SetCurrentMode+0x2e>
 8008fae:	e01a      	b.n	8008fe6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d115      	bne.n	8008fe2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	f7fc f990 	bl	80052e8 <HAL_Delay>
      ms++;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f878 	bl	80090c4 <USB_GetMode>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <USB_SetCurrentMode+0x84>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b31      	cmp	r3, #49	; 0x31
 8008fde:	d9f0      	bls.n	8008fc2 <USB_SetCurrentMode+0x60>
 8008fe0:	e001      	b.n	8008fe6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e005      	b.n	8008ff2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b32      	cmp	r3, #50	; 0x32
 8008fea:	d101      	bne.n	8008ff0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e000      	b.n	8008ff2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3301      	adds	r3, #1
 800900e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4a13      	ldr	r2, [pc, #76]	; (8009060 <USB_FlushTxFifo+0x64>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d901      	bls.n	800901c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e01b      	b.n	8009054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	daf2      	bge.n	800900a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	019b      	lsls	r3, r3, #6
 800902c:	f043 0220 	orr.w	r2, r3, #32
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	3301      	adds	r3, #1
 8009038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4a08      	ldr	r2, [pc, #32]	; (8009060 <USB_FlushTxFifo+0x64>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d901      	bls.n	8009046 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e006      	b.n	8009054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b20      	cmp	r3, #32
 8009050:	d0f0      	beq.n	8009034 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	00030d40 	.word	0x00030d40

08009064 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3301      	adds	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	4a11      	ldr	r2, [pc, #68]	; (80090c0 <USB_FlushRxFifo+0x5c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d901      	bls.n	8009082 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e018      	b.n	80090b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	daf2      	bge.n	8009070 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2210      	movs	r2, #16
 8009092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	3301      	adds	r3, #1
 8009098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	4a08      	ldr	r2, [pc, #32]	; (80090c0 <USB_FlushRxFifo+0x5c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d901      	bls.n	80090a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e006      	b.n	80090b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	f003 0310 	and.w	r3, r3, #16
 80090ae:	2b10      	cmp	r3, #16
 80090b0:	d0f0      	beq.n	8009094 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	00030d40 	.word	0x00030d40

080090c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	f003 0301 	and.w	r3, r3, #1
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	3301      	adds	r3, #1
 80090f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	4a13      	ldr	r2, [pc, #76]	; (8009144 <USB_CoreReset+0x64>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d901      	bls.n	80090fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e01b      	b.n	8009136 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	daf2      	bge.n	80090ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f043 0201 	orr.w	r2, r3, #1
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	3301      	adds	r3, #1
 800911a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	4a09      	ldr	r2, [pc, #36]	; (8009144 <USB_CoreReset+0x64>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d901      	bls.n	8009128 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e006      	b.n	8009136 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b01      	cmp	r3, #1
 8009132:	d0f0      	beq.n	8009116 <USB_CoreReset+0x36>

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	00030d40 	.word	0x00030d40

08009148 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009148:	b084      	sub	sp, #16
 800914a:	b580      	push	{r7, lr}
 800914c:	b086      	sub	sp, #24
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009168:	461a      	mov	r2, r3
 800916a:	2300      	movs	r3, #0
 800916c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009172:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918e:	2b00      	cmp	r3, #0
 8009190:	d018      	beq.n	80091c4 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009194:	2b01      	cmp	r3, #1
 8009196:	d10a      	bne.n	80091ae <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091a6:	f043 0304 	orr.w	r3, r3, #4
 80091aa:	6013      	str	r3, [r2, #0]
 80091ac:	e014      	b.n	80091d8 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091bc:	f023 0304 	bic.w	r3, r3, #4
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	e009      	b.n	80091d8 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091d2:	f023 0304 	bic.w	r3, r3, #4
 80091d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091d8:	2110      	movs	r1, #16
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff ff0e 	bl	8008ffc <USB_FlushTxFifo>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff ff3a 	bl	8009064 <USB_FlushRxFifo>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80091fa:	2300      	movs	r3, #0
 80091fc:	613b      	str	r3, [r7, #16]
 80091fe:	e015      	b.n	800922c <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800920c:	461a      	mov	r2, r3
 800920e:	f04f 33ff 	mov.w	r3, #4294967295
 8009212:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4413      	add	r3, r2
 800921c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009220:	461a      	mov	r2, r3
 8009222:	2300      	movs	r3, #0
 8009224:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	3301      	adds	r3, #1
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	429a      	cmp	r2, r3
 8009232:	d3e5      	bcc.n	8009200 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f04f 32ff 	mov.w	r2, #4294967295
 8009240:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00b      	beq.n	8009266 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009254:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a13      	ldr	r2, [pc, #76]	; (80092a8 <USB_HostInit+0x160>)
 800925a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a13      	ldr	r2, [pc, #76]	; (80092ac <USB_HostInit+0x164>)
 8009260:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009264:	e009      	b.n	800927a <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2280      	movs	r2, #128	; 0x80
 800926a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a10      	ldr	r2, [pc, #64]	; (80092b0 <USB_HostInit+0x168>)
 8009270:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a0f      	ldr	r2, [pc, #60]	; (80092b4 <USB_HostInit+0x16c>)
 8009276:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	2b00      	cmp	r3, #0
 800927e:	d105      	bne.n	800928c <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	f043 0210 	orr.w	r2, r3, #16
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699a      	ldr	r2, [r3, #24]
 8009290:	4b09      	ldr	r3, [pc, #36]	; (80092b8 <USB_HostInit+0x170>)
 8009292:	4313      	orrs	r3, r2
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009298:	7dfb      	ldrb	r3, [r7, #23]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092a4:	b004      	add	sp, #16
 80092a6:	4770      	bx	lr
 80092a8:	01000200 	.word	0x01000200
 80092ac:	00e00300 	.word	0x00e00300
 80092b0:	00600080 	.word	0x00600080
 80092b4:	004000e0 	.word	0x004000e0
 80092b8:	a3200008 	.word	0xa3200008

080092bc <__libc_init_array>:
 80092bc:	b570      	push	{r4, r5, r6, lr}
 80092be:	4d0d      	ldr	r5, [pc, #52]	; (80092f4 <__libc_init_array+0x38>)
 80092c0:	4c0d      	ldr	r4, [pc, #52]	; (80092f8 <__libc_init_array+0x3c>)
 80092c2:	1b64      	subs	r4, r4, r5
 80092c4:	10a4      	asrs	r4, r4, #2
 80092c6:	2600      	movs	r6, #0
 80092c8:	42a6      	cmp	r6, r4
 80092ca:	d109      	bne.n	80092e0 <__libc_init_array+0x24>
 80092cc:	4d0b      	ldr	r5, [pc, #44]	; (80092fc <__libc_init_array+0x40>)
 80092ce:	4c0c      	ldr	r4, [pc, #48]	; (8009300 <__libc_init_array+0x44>)
 80092d0:	f000 f83e 	bl	8009350 <_init>
 80092d4:	1b64      	subs	r4, r4, r5
 80092d6:	10a4      	asrs	r4, r4, #2
 80092d8:	2600      	movs	r6, #0
 80092da:	42a6      	cmp	r6, r4
 80092dc:	d105      	bne.n	80092ea <__libc_init_array+0x2e>
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092e4:	4798      	blx	r3
 80092e6:	3601      	adds	r6, #1
 80092e8:	e7ee      	b.n	80092c8 <__libc_init_array+0xc>
 80092ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ee:	4798      	blx	r3
 80092f0:	3601      	adds	r6, #1
 80092f2:	e7f2      	b.n	80092da <__libc_init_array+0x1e>
 80092f4:	08009560 	.word	0x08009560
 80092f8:	08009560 	.word	0x08009560
 80092fc:	08009560 	.word	0x08009560
 8009300:	08009564 	.word	0x08009564

08009304 <memcmp>:
 8009304:	b510      	push	{r4, lr}
 8009306:	3901      	subs	r1, #1
 8009308:	4402      	add	r2, r0
 800930a:	4290      	cmp	r0, r2
 800930c:	d101      	bne.n	8009312 <memcmp+0xe>
 800930e:	2000      	movs	r0, #0
 8009310:	e005      	b.n	800931e <memcmp+0x1a>
 8009312:	7803      	ldrb	r3, [r0, #0]
 8009314:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009318:	42a3      	cmp	r3, r4
 800931a:	d001      	beq.n	8009320 <memcmp+0x1c>
 800931c:	1b18      	subs	r0, r3, r4
 800931e:	bd10      	pop	{r4, pc}
 8009320:	3001      	adds	r0, #1
 8009322:	e7f2      	b.n	800930a <memcmp+0x6>

08009324 <memcpy>:
 8009324:	440a      	add	r2, r1
 8009326:	4291      	cmp	r1, r2
 8009328:	f100 33ff 	add.w	r3, r0, #4294967295
 800932c:	d100      	bne.n	8009330 <memcpy+0xc>
 800932e:	4770      	bx	lr
 8009330:	b510      	push	{r4, lr}
 8009332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800933a:	4291      	cmp	r1, r2
 800933c:	d1f9      	bne.n	8009332 <memcpy+0xe>
 800933e:	bd10      	pop	{r4, pc}

08009340 <memset>:
 8009340:	4402      	add	r2, r0
 8009342:	4603      	mov	r3, r0
 8009344:	4293      	cmp	r3, r2
 8009346:	d100      	bne.n	800934a <memset+0xa>
 8009348:	4770      	bx	lr
 800934a:	f803 1b01 	strb.w	r1, [r3], #1
 800934e:	e7f9      	b.n	8009344 <memset+0x4>

08009350 <_init>:
 8009350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009352:	bf00      	nop
 8009354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009356:	bc08      	pop	{r3}
 8009358:	469e      	mov	lr, r3
 800935a:	4770      	bx	lr

0800935c <_fini>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	bf00      	nop
 8009360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009362:	bc08      	pop	{r3}
 8009364:	469e      	mov	lr, r3
 8009366:	4770      	bx	lr
