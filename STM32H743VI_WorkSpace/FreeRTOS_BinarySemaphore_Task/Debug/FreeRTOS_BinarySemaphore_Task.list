
FreeRTOS_BinarySemaphore_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da80  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800dd20  0800dd20  0001dd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e0b8  0800e0b8  0001e0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e0c0  0800e0c0  0001e0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e0c4  0800e0c4  0001e0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  0800e0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0007f18c  24000084  0800e14c  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2407f210  0800e14c  0002f210  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002af12  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047f9  00000000  00000000  0004afc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002040  00000000  00000000  0004f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001e58  00000000  00000000  00051800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a44d  00000000  00000000  00053658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028626  00000000  00000000  0008daa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018037d  00000000  00000000  000b60cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00236448  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009660  00000000  00000000  00236498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dd08 	.word	0x0800dd08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	0800dd08 	.word	0x0800dd08

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	24006aa0 	.word	0x24006aa0

08000374 <strlen>:
 8000374:	4603      	mov	r3, r0
 8000376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800037a:	2a00      	cmp	r2, #0
 800037c:	d1fb      	bne.n	8000376 <strlen+0x2>
 800037e:	1a18      	subs	r0, r3, r0
 8000380:	3801      	subs	r0, #1
 8000382:	4770      	bx	lr
	...

08000390 <memchr>:
 8000390:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000394:	2a10      	cmp	r2, #16
 8000396:	db2b      	blt.n	80003f0 <memchr+0x60>
 8000398:	f010 0f07 	tst.w	r0, #7
 800039c:	d008      	beq.n	80003b0 <memchr+0x20>
 800039e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a2:	3a01      	subs	r2, #1
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d02d      	beq.n	8000404 <memchr+0x74>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	b342      	cbz	r2, 8000400 <memchr+0x70>
 80003ae:	d1f6      	bne.n	800039e <memchr+0xe>
 80003b0:	b4f0      	push	{r4, r5, r6, r7}
 80003b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ba:	f022 0407 	bic.w	r4, r2, #7
 80003be:	f07f 0700 	mvns.w	r7, #0
 80003c2:	2300      	movs	r3, #0
 80003c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003c8:	3c08      	subs	r4, #8
 80003ca:	ea85 0501 	eor.w	r5, r5, r1
 80003ce:	ea86 0601 	eor.w	r6, r6, r1
 80003d2:	fa85 f547 	uadd8	r5, r5, r7
 80003d6:	faa3 f587 	sel	r5, r3, r7
 80003da:	fa86 f647 	uadd8	r6, r6, r7
 80003de:	faa5 f687 	sel	r6, r5, r7
 80003e2:	b98e      	cbnz	r6, 8000408 <memchr+0x78>
 80003e4:	d1ee      	bne.n	80003c4 <memchr+0x34>
 80003e6:	bcf0      	pop	{r4, r5, r6, r7}
 80003e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003ec:	f002 0207 	and.w	r2, r2, #7
 80003f0:	b132      	cbz	r2, 8000400 <memchr+0x70>
 80003f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003f6:	3a01      	subs	r2, #1
 80003f8:	ea83 0301 	eor.w	r3, r3, r1
 80003fc:	b113      	cbz	r3, 8000404 <memchr+0x74>
 80003fe:	d1f8      	bne.n	80003f2 <memchr+0x62>
 8000400:	2000      	movs	r0, #0
 8000402:	4770      	bx	lr
 8000404:	3801      	subs	r0, #1
 8000406:	4770      	bx	lr
 8000408:	2d00      	cmp	r5, #0
 800040a:	bf06      	itte	eq
 800040c:	4635      	moveq	r5, r6
 800040e:	3803      	subeq	r0, #3
 8000410:	3807      	subne	r0, #7
 8000412:	f015 0f01 	tst.w	r5, #1
 8000416:	d107      	bne.n	8000428 <memchr+0x98>
 8000418:	3001      	adds	r0, #1
 800041a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800041e:	bf02      	ittt	eq
 8000420:	3001      	addeq	r0, #1
 8000422:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000426:	3001      	addeq	r0, #1
 8000428:	bcf0      	pop	{r4, r5, r6, r7}
 800042a:	3801      	subs	r0, #1
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop

08000430 <__aeabi_uldivmod>:
 8000430:	b953      	cbnz	r3, 8000448 <__aeabi_uldivmod+0x18>
 8000432:	b94a      	cbnz	r2, 8000448 <__aeabi_uldivmod+0x18>
 8000434:	2900      	cmp	r1, #0
 8000436:	bf08      	it	eq
 8000438:	2800      	cmpeq	r0, #0
 800043a:	bf1c      	itt	ne
 800043c:	f04f 31ff 	movne.w	r1, #4294967295
 8000440:	f04f 30ff 	movne.w	r0, #4294967295
 8000444:	f000 b974 	b.w	8000730 <__aeabi_idiv0>
 8000448:	f1ad 0c08 	sub.w	ip, sp, #8
 800044c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000450:	f000 f806 	bl	8000460 <__udivmoddi4>
 8000454:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045c:	b004      	add	sp, #16
 800045e:	4770      	bx	lr

08000460 <__udivmoddi4>:
 8000460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000464:	9d08      	ldr	r5, [sp, #32]
 8000466:	4604      	mov	r4, r0
 8000468:	468e      	mov	lr, r1
 800046a:	2b00      	cmp	r3, #0
 800046c:	d14d      	bne.n	800050a <__udivmoddi4+0xaa>
 800046e:	428a      	cmp	r2, r1
 8000470:	4694      	mov	ip, r2
 8000472:	d969      	bls.n	8000548 <__udivmoddi4+0xe8>
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	b152      	cbz	r2, 8000490 <__udivmoddi4+0x30>
 800047a:	fa01 f302 	lsl.w	r3, r1, r2
 800047e:	f1c2 0120 	rsb	r1, r2, #32
 8000482:	fa20 f101 	lsr.w	r1, r0, r1
 8000486:	fa0c fc02 	lsl.w	ip, ip, r2
 800048a:	ea41 0e03 	orr.w	lr, r1, r3
 800048e:	4094      	lsls	r4, r2
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	0c21      	lsrs	r1, r4, #16
 8000496:	fbbe f6f8 	udiv	r6, lr, r8
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fb08 e316 	mls	r3, r8, r6, lr
 80004a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004a6:	fb06 f107 	mul.w	r1, r6, r7
 80004aa:	4299      	cmp	r1, r3
 80004ac:	d90a      	bls.n	80004c4 <__udivmoddi4+0x64>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80004b6:	f080 811f 	bcs.w	80006f8 <__udivmoddi4+0x298>
 80004ba:	4299      	cmp	r1, r3
 80004bc:	f240 811c 	bls.w	80006f8 <__udivmoddi4+0x298>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3310 	mls	r3, r8, r0, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb00 f707 	mul.w	r7, r0, r7
 80004d8:	42a7      	cmp	r7, r4
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x92>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e4:	f080 810a 	bcs.w	80006fc <__udivmoddi4+0x29c>
 80004e8:	42a7      	cmp	r7, r4
 80004ea:	f240 8107 	bls.w	80006fc <__udivmoddi4+0x29c>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004f6:	1be4      	subs	r4, r4, r7
 80004f8:	2600      	movs	r6, #0
 80004fa:	b11d      	cbz	r5, 8000504 <__udivmoddi4+0xa4>
 80004fc:	40d4      	lsrs	r4, r2
 80004fe:	2300      	movs	r3, #0
 8000500:	e9c5 4300 	strd	r4, r3, [r5]
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	428b      	cmp	r3, r1
 800050c:	d909      	bls.n	8000522 <__udivmoddi4+0xc2>
 800050e:	2d00      	cmp	r5, #0
 8000510:	f000 80ef 	beq.w	80006f2 <__udivmoddi4+0x292>
 8000514:	2600      	movs	r6, #0
 8000516:	e9c5 0100 	strd	r0, r1, [r5]
 800051a:	4630      	mov	r0, r6
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	fab3 f683 	clz	r6, r3
 8000526:	2e00      	cmp	r6, #0
 8000528:	d14a      	bne.n	80005c0 <__udivmoddi4+0x160>
 800052a:	428b      	cmp	r3, r1
 800052c:	d302      	bcc.n	8000534 <__udivmoddi4+0xd4>
 800052e:	4282      	cmp	r2, r0
 8000530:	f200 80f9 	bhi.w	8000726 <__udivmoddi4+0x2c6>
 8000534:	1a84      	subs	r4, r0, r2
 8000536:	eb61 0303 	sbc.w	r3, r1, r3
 800053a:	2001      	movs	r0, #1
 800053c:	469e      	mov	lr, r3
 800053e:	2d00      	cmp	r5, #0
 8000540:	d0e0      	beq.n	8000504 <__udivmoddi4+0xa4>
 8000542:	e9c5 4e00 	strd	r4, lr, [r5]
 8000546:	e7dd      	b.n	8000504 <__udivmoddi4+0xa4>
 8000548:	b902      	cbnz	r2, 800054c <__udivmoddi4+0xec>
 800054a:	deff      	udf	#255	; 0xff
 800054c:	fab2 f282 	clz	r2, r2
 8000550:	2a00      	cmp	r2, #0
 8000552:	f040 8092 	bne.w	800067a <__udivmoddi4+0x21a>
 8000556:	eba1 010c 	sub.w	r1, r1, ip
 800055a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800055e:	fa1f fe8c 	uxth.w	lr, ip
 8000562:	2601      	movs	r6, #1
 8000564:	0c20      	lsrs	r0, r4, #16
 8000566:	fbb1 f3f7 	udiv	r3, r1, r7
 800056a:	fb07 1113 	mls	r1, r7, r3, r1
 800056e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000572:	fb0e f003 	mul.w	r0, lr, r3
 8000576:	4288      	cmp	r0, r1
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x12c>
 800057a:	eb1c 0101 	adds.w	r1, ip, r1
 800057e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x12a>
 8000584:	4288      	cmp	r0, r1
 8000586:	f200 80cb 	bhi.w	8000720 <__udivmoddi4+0x2c0>
 800058a:	4643      	mov	r3, r8
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb1 f0f7 	udiv	r0, r1, r7
 8000594:	fb07 1110 	mls	r1, r7, r0, r1
 8000598:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800059c:	fb0e fe00 	mul.w	lr, lr, r0
 80005a0:	45a6      	cmp	lr, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x156>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80005ac:	d202      	bcs.n	80005b4 <__udivmoddi4+0x154>
 80005ae:	45a6      	cmp	lr, r4
 80005b0:	f200 80bb 	bhi.w	800072a <__udivmoddi4+0x2ca>
 80005b4:	4608      	mov	r0, r1
 80005b6:	eba4 040e 	sub.w	r4, r4, lr
 80005ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005be:	e79c      	b.n	80004fa <__udivmoddi4+0x9a>
 80005c0:	f1c6 0720 	rsb	r7, r6, #32
 80005c4:	40b3      	lsls	r3, r6
 80005c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80005ce:	fa20 f407 	lsr.w	r4, r0, r7
 80005d2:	fa01 f306 	lsl.w	r3, r1, r6
 80005d6:	431c      	orrs	r4, r3
 80005d8:	40f9      	lsrs	r1, r7
 80005da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005de:	fa00 f306 	lsl.w	r3, r0, r6
 80005e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80005e6:	0c20      	lsrs	r0, r4, #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fb09 1118 	mls	r1, r9, r8, r1
 80005f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005f4:	fb08 f00e 	mul.w	r0, r8, lr
 80005f8:	4288      	cmp	r0, r1
 80005fa:	fa02 f206 	lsl.w	r2, r2, r6
 80005fe:	d90b      	bls.n	8000618 <__udivmoddi4+0x1b8>
 8000600:	eb1c 0101 	adds.w	r1, ip, r1
 8000604:	f108 3aff 	add.w	sl, r8, #4294967295
 8000608:	f080 8088 	bcs.w	800071c <__udivmoddi4+0x2bc>
 800060c:	4288      	cmp	r0, r1
 800060e:	f240 8085 	bls.w	800071c <__udivmoddi4+0x2bc>
 8000612:	f1a8 0802 	sub.w	r8, r8, #2
 8000616:	4461      	add	r1, ip
 8000618:	1a09      	subs	r1, r1, r0
 800061a:	b2a4      	uxth	r4, r4
 800061c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000620:	fb09 1110 	mls	r1, r9, r0, r1
 8000624:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000628:	fb00 fe0e 	mul.w	lr, r0, lr
 800062c:	458e      	cmp	lr, r1
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x1e2>
 8000630:	eb1c 0101 	adds.w	r1, ip, r1
 8000634:	f100 34ff 	add.w	r4, r0, #4294967295
 8000638:	d26c      	bcs.n	8000714 <__udivmoddi4+0x2b4>
 800063a:	458e      	cmp	lr, r1
 800063c:	d96a      	bls.n	8000714 <__udivmoddi4+0x2b4>
 800063e:	3802      	subs	r0, #2
 8000640:	4461      	add	r1, ip
 8000642:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000646:	fba0 9402 	umull	r9, r4, r0, r2
 800064a:	eba1 010e 	sub.w	r1, r1, lr
 800064e:	42a1      	cmp	r1, r4
 8000650:	46c8      	mov	r8, r9
 8000652:	46a6      	mov	lr, r4
 8000654:	d356      	bcc.n	8000704 <__udivmoddi4+0x2a4>
 8000656:	d053      	beq.n	8000700 <__udivmoddi4+0x2a0>
 8000658:	b15d      	cbz	r5, 8000672 <__udivmoddi4+0x212>
 800065a:	ebb3 0208 	subs.w	r2, r3, r8
 800065e:	eb61 010e 	sbc.w	r1, r1, lr
 8000662:	fa01 f707 	lsl.w	r7, r1, r7
 8000666:	fa22 f306 	lsr.w	r3, r2, r6
 800066a:	40f1      	lsrs	r1, r6
 800066c:	431f      	orrs	r7, r3
 800066e:	e9c5 7100 	strd	r7, r1, [r5]
 8000672:	2600      	movs	r6, #0
 8000674:	4631      	mov	r1, r6
 8000676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	40d8      	lsrs	r0, r3
 8000680:	fa0c fc02 	lsl.w	ip, ip, r2
 8000684:	fa21 f303 	lsr.w	r3, r1, r3
 8000688:	4091      	lsls	r1, r2
 800068a:	4301      	orrs	r1, r0
 800068c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000690:	fa1f fe8c 	uxth.w	lr, ip
 8000694:	fbb3 f0f7 	udiv	r0, r3, r7
 8000698:	fb07 3610 	mls	r6, r7, r0, r3
 800069c:	0c0b      	lsrs	r3, r1, #16
 800069e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006a2:	fb00 f60e 	mul.w	r6, r0, lr
 80006a6:	429e      	cmp	r6, r3
 80006a8:	fa04 f402 	lsl.w	r4, r4, r2
 80006ac:	d908      	bls.n	80006c0 <__udivmoddi4+0x260>
 80006ae:	eb1c 0303 	adds.w	r3, ip, r3
 80006b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006b6:	d22f      	bcs.n	8000718 <__udivmoddi4+0x2b8>
 80006b8:	429e      	cmp	r6, r3
 80006ba:	d92d      	bls.n	8000718 <__udivmoddi4+0x2b8>
 80006bc:	3802      	subs	r0, #2
 80006be:	4463      	add	r3, ip
 80006c0:	1b9b      	subs	r3, r3, r6
 80006c2:	b289      	uxth	r1, r1
 80006c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80006c8:	fb07 3316 	mls	r3, r7, r6, r3
 80006cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006d0:	fb06 f30e 	mul.w	r3, r6, lr
 80006d4:	428b      	cmp	r3, r1
 80006d6:	d908      	bls.n	80006ea <__udivmoddi4+0x28a>
 80006d8:	eb1c 0101 	adds.w	r1, ip, r1
 80006dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80006e0:	d216      	bcs.n	8000710 <__udivmoddi4+0x2b0>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d914      	bls.n	8000710 <__udivmoddi4+0x2b0>
 80006e6:	3e02      	subs	r6, #2
 80006e8:	4461      	add	r1, ip
 80006ea:	1ac9      	subs	r1, r1, r3
 80006ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006f0:	e738      	b.n	8000564 <__udivmoddi4+0x104>
 80006f2:	462e      	mov	r6, r5
 80006f4:	4628      	mov	r0, r5
 80006f6:	e705      	b.n	8000504 <__udivmoddi4+0xa4>
 80006f8:	4606      	mov	r6, r0
 80006fa:	e6e3      	b.n	80004c4 <__udivmoddi4+0x64>
 80006fc:	4618      	mov	r0, r3
 80006fe:	e6f8      	b.n	80004f2 <__udivmoddi4+0x92>
 8000700:	454b      	cmp	r3, r9
 8000702:	d2a9      	bcs.n	8000658 <__udivmoddi4+0x1f8>
 8000704:	ebb9 0802 	subs.w	r8, r9, r2
 8000708:	eb64 0e0c 	sbc.w	lr, r4, ip
 800070c:	3801      	subs	r0, #1
 800070e:	e7a3      	b.n	8000658 <__udivmoddi4+0x1f8>
 8000710:	4646      	mov	r6, r8
 8000712:	e7ea      	b.n	80006ea <__udivmoddi4+0x28a>
 8000714:	4620      	mov	r0, r4
 8000716:	e794      	b.n	8000642 <__udivmoddi4+0x1e2>
 8000718:	4640      	mov	r0, r8
 800071a:	e7d1      	b.n	80006c0 <__udivmoddi4+0x260>
 800071c:	46d0      	mov	r8, sl
 800071e:	e77b      	b.n	8000618 <__udivmoddi4+0x1b8>
 8000720:	3b02      	subs	r3, #2
 8000722:	4461      	add	r1, ip
 8000724:	e732      	b.n	800058c <__udivmoddi4+0x12c>
 8000726:	4630      	mov	r0, r6
 8000728:	e709      	b.n	800053e <__udivmoddi4+0xde>
 800072a:	4464      	add	r4, ip
 800072c:	3802      	subs	r0, #2
 800072e:	e742      	b.n	80005b6 <__udivmoddi4+0x156>

08000730 <__aeabi_idiv0>:
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f103 0208 	add.w	r2, r3, #8
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f04f 32ff 	mov.w	r2, #4294967295
 800074c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f103 0208 	add.w	r2, r3, #8
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f103 0208 	add.w	r2, r3, #8
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800078e:	b480      	push	{r7}
 8000790:	b085      	sub	sp, #20
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ec:	d103      	bne.n	80007f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	e00c      	b.n	8000810 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3308      	adds	r3, #8
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e002      	b.n	8000804 <vListInsert+0x2e>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	429a      	cmp	r2, r3
 800080e:	d2f6      	bcs.n	80007fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	683a      	ldr	r2, [r7, #0]
 800081e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	601a      	str	r2, [r3, #0]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	6892      	ldr	r2, [r2, #8]
 800085e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	6852      	ldr	r2, [r2, #4]
 8000868:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	d103      	bne.n	800087c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10c      	bne.n	80008ca <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	b672      	cpsid	i
 80008b6:	f383 8811 	msr	BASEPRI, r3
 80008ba:	f3bf 8f6f 	isb	sy
 80008be:	f3bf 8f4f 	dsb	sy
 80008c2:	b662      	cpsie	i
 80008c4:	60bb      	str	r3, [r7, #8]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008c6:	bf00      	nop
 80008c8:	e7fe      	b.n	80008c8 <xQueueGenericReset+0x2c>

    taskENTER_CRITICAL();
 80008ca:	f001 fe19 	bl	8002500 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008d6:	68f9      	ldr	r1, [r7, #12]
 80008d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008da:	fb01 f303 	mul.w	r3, r1, r3
 80008de:	441a      	add	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008fa:	3b01      	subs	r3, #1
 80008fc:	68f9      	ldr	r1, [r7, #12]
 80008fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000900:	fb01 f303 	mul.w	r3, r1, r3
 8000904:	441a      	add	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d109      	bne.n	8000934 <xQueueGenericReset+0x98>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d00f      	beq.n	8000948 <xQueueGenericReset+0xac>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3310      	adds	r3, #16
 800092c:	4618      	mov	r0, r3
 800092e:	f001 f8f7 	bl	8001b20 <xTaskRemoveFromEventList>
 8000932:	e009      	b.n	8000948 <xQueueGenericReset+0xac>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3310      	adds	r3, #16
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fefb 	bl	8000734 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3324      	adds	r3, #36	; 0x24
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fef6 	bl	8000734 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000948:	f001 fe0e 	bl	8002568 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800094c:	2301      	movs	r3, #1
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000956:	b580      	push	{r7, lr}
 8000958:	b08c      	sub	sp, #48	; 0x30
 800095a:	af02      	add	r7, sp, #8
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	4613      	mov	r3, r2
 8000962:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10c      	bne.n	8000984 <xQueueGenericCreate+0x2e>
        __asm volatile
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	b672      	cpsid	i
 8000970:	f383 8811 	msr	BASEPRI, r3
 8000974:	f3bf 8f6f 	isb	sy
 8000978:	f3bf 8f4f 	dsb	sy
 800097c:	b662      	cpsie	i
 800097e:	61bb      	str	r3, [r7, #24]
    }
 8000980:	bf00      	nop
 8000982:	e7fe      	b.n	8000982 <xQueueGenericCreate+0x2c>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <xQueueGenericCreate+0x4c>
 8000994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	fbb2 f3f3 	udiv	r3, r2, r3
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d101      	bne.n	80009a6 <xQueueGenericCreate+0x50>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <xQueueGenericCreate+0x52>
 80009a6:	2300      	movs	r3, #0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10c      	bne.n	80009c6 <xQueueGenericCreate+0x70>
        __asm volatile
 80009ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b0:	b672      	cpsid	i
 80009b2:	f383 8811 	msr	BASEPRI, r3
 80009b6:	f3bf 8f6f 	isb	sy
 80009ba:	f3bf 8f4f 	dsb	sy
 80009be:	b662      	cpsie	i
 80009c0:	617b      	str	r3, [r7, #20]
    }
 80009c2:	bf00      	nop
 80009c4:	e7fe      	b.n	80009c4 <xQueueGenericCreate+0x6e>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80009cc:	d90c      	bls.n	80009e8 <xQueueGenericCreate+0x92>
        __asm volatile
 80009ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d2:	b672      	cpsid	i
 80009d4:	f383 8811 	msr	BASEPRI, r3
 80009d8:	f3bf 8f6f 	isb	sy
 80009dc:	f3bf 8f4f 	dsb	sy
 80009e0:	b662      	cpsie	i
 80009e2:	613b      	str	r3, [r7, #16]
    }
 80009e4:	bf00      	nop
 80009e6:	e7fe      	b.n	80009e6 <xQueueGenericCreate+0x90>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	3350      	adds	r3, #80	; 0x50
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 febb 	bl	8002768 <pvPortMalloc>
 80009f2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80009f4:	6a3b      	ldr	r3, [r7, #32]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00d      	beq.n	8000a16 <xQueueGenericCreate+0xc0>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3350      	adds	r3, #80	; 0x50
 8000a02:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	6a3b      	ldr	r3, [r7, #32]
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	69fa      	ldr	r2, [r7, #28]
 8000a0e:	68b9      	ldr	r1, [r7, #8]
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f000 f805 	bl	8000a20 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000a16:	6a3b      	ldr	r3, [r7, #32]
    }
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d103      	bne.n	8000a3c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e002      	b.n	8000a42 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000a4e:	2101      	movs	r1, #1
 8000a50:	69b8      	ldr	r0, [r7, #24]
 8000a52:	f7ff ff23 	bl	800089c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	78fa      	ldrb	r2, [r7, #3]
 8000a5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	68f9      	ldr	r1, [r7, #12]
 8000a64:	2073      	movs	r0, #115	; 0x73
 8000a66:	f003 faf7 	bl	8004058 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	; 0x40
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000a82:	2300      	movs	r3, #0
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d10c      	bne.n	8000aaa <xQueueGenericSend+0x36>
        __asm volatile
 8000a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a94:	b672      	cpsid	i
 8000a96:	f383 8811 	msr	BASEPRI, r3
 8000a9a:	f3bf 8f6f 	isb	sy
 8000a9e:	f3bf 8f4f 	dsb	sy
 8000aa2:	b662      	cpsie	i
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000aa6:	bf00      	nop
 8000aa8:	e7fe      	b.n	8000aa8 <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d103      	bne.n	8000ab8 <xQueueGenericSend+0x44>
 8000ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d101      	bne.n	8000abc <xQueueGenericSend+0x48>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e000      	b.n	8000abe <xQueueGenericSend+0x4a>
 8000abc:	2300      	movs	r3, #0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10c      	bne.n	8000adc <xQueueGenericSend+0x68>
        __asm volatile
 8000ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac6:	b672      	cpsid	i
 8000ac8:	f383 8811 	msr	BASEPRI, r3
 8000acc:	f3bf 8f6f 	isb	sy
 8000ad0:	f3bf 8f4f 	dsb	sy
 8000ad4:	b662      	cpsie	i
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000ad8:	bf00      	nop
 8000ada:	e7fe      	b.n	8000ada <xQueueGenericSend+0x66>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d103      	bne.n	8000aea <xQueueGenericSend+0x76>
 8000ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d101      	bne.n	8000aee <xQueueGenericSend+0x7a>
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <xQueueGenericSend+0x7c>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10c      	bne.n	8000b0e <xQueueGenericSend+0x9a>
        __asm volatile
 8000af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af8:	b672      	cpsid	i
 8000afa:	f383 8811 	msr	BASEPRI, r3
 8000afe:	f3bf 8f6f 	isb	sy
 8000b02:	f3bf 8f4f 	dsb	sy
 8000b06:	b662      	cpsie	i
 8000b08:	623b      	str	r3, [r7, #32]
    }
 8000b0a:	bf00      	nop
 8000b0c:	e7fe      	b.n	8000b0c <xQueueGenericSend+0x98>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b0e:	f001 f9a7 	bl	8001e60 <xTaskGetSchedulerState>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <xQueueGenericSend+0xaa>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <xQueueGenericSend+0xae>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <xQueueGenericSend+0xb0>
 8000b22:	2300      	movs	r3, #0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10c      	bne.n	8000b42 <xQueueGenericSend+0xce>
        __asm volatile
 8000b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b2c:	b672      	cpsid	i
 8000b2e:	f383 8811 	msr	BASEPRI, r3
 8000b32:	f3bf 8f6f 	isb	sy
 8000b36:	f3bf 8f4f 	dsb	sy
 8000b3a:	b662      	cpsie	i
 8000b3c:	61fb      	str	r3, [r7, #28]
    }
 8000b3e:	bf00      	nop
 8000b40:	e7fe      	b.n	8000b40 <xQueueGenericSend+0xcc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b42:	f001 fcdd 	bl	8002500 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d302      	bcc.n	8000b58 <xQueueGenericSend+0xe4>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d11f      	bne.n	8000b98 <xQueueGenericSend+0x124>
            {
                traceQUEUE_SEND( pxQueue );
 8000b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 f80a 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000b60:	68ba      	ldr	r2, [r7, #8]
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	205a      	movs	r0, #90	; 0x5a
 8000b6e:	f003 fae9 	bl	8004144 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b78:	f000 faee 	bl	8001158 <prvCopyDataToQueue>
 8000b7c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d004      	beq.n	8000b90 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b88:	3324      	adds	r3, #36	; 0x24
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 ffc8 	bl	8001b20 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000b90:	f001 fcea 	bl	8002568 <vPortExitCritical>
                return pdPASS;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e07d      	b.n	8000c94 <xQueueGenericSend+0x220>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d110      	bne.n	8000bc0 <xQueueGenericSend+0x14c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b9e:	f001 fce3 	bl	8002568 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 ffe5 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	205a      	movs	r0, #90	; 0x5a
 8000bb8:	f003 fac4 	bl	8004144 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e069      	b.n	8000c94 <xQueueGenericSend+0x220>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d106      	bne.n	8000bd4 <xQueueGenericSend+0x160>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 f810 	bl	8001bf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000bd4:	f001 fcc8 	bl	8002568 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000bd8:	f000 fdc0 	bl	800175c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bdc:	f001 fc90 	bl	8002500 <vPortEnterCritical>
 8000be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	d103      	bne.n	8000bf6 <xQueueGenericSend+0x182>
 8000bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c02:	d103      	bne.n	8000c0c <xQueueGenericSend+0x198>
 8000c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c0c:	f001 fcac 	bl	8002568 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c10:	1d3a      	adds	r2, r7, #4
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 ffff 	bl	8001c1c <xTaskCheckForTimeOut>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d124      	bne.n	8000c6e <xQueueGenericSend+0x1fa>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c26:	f000 fb8f 	bl	8001348 <prvIsQueueFull>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d018      	beq.n	8000c62 <xQueueGenericSend+0x1ee>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	3310      	adds	r3, #16
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 ff4b 	bl	8001ad4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c40:	f000 fb1a 	bl	8001278 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000c44:	f000 fd98 	bl	8001778 <xTaskResumeAll>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f47f af79 	bne.w	8000b42 <xQueueGenericSend+0xce>
                {
                    portYIELD_WITHIN_API();
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <xQueueGenericSend+0x228>)
 8000c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	f3bf 8f4f 	dsb	sy
 8000c5c:	f3bf 8f6f 	isb	sy
 8000c60:	e76f      	b.n	8000b42 <xQueueGenericSend+0xce>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000c62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c64:	f000 fb08 	bl	8001278 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c68:	f000 fd86 	bl	8001778 <xTaskResumeAll>
 8000c6c:	e769      	b.n	8000b42 <xQueueGenericSend+0xce>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c70:	f000 fb02 	bl	8001278 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c74:	f000 fd80 	bl	8001778 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 ff7a 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	4601      	mov	r1, r0
 8000c8c:	205a      	movs	r0, #90	; 0x5a
 8000c8e:	f003 fa59 	bl	8004144 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000c92:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3738      	adds	r7, #56	; 0x38
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	e000ed04 	.word	0xe000ed04

08000ca0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b08f      	sub	sp, #60	; 0x3c
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10c      	bne.n	8000cd4 <xQueueReceive+0x34>
        __asm volatile
 8000cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cbe:	b672      	cpsid	i
 8000cc0:	f383 8811 	msr	BASEPRI, r3
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	f3bf 8f4f 	dsb	sy
 8000ccc:	b662      	cpsie	i
 8000cce:	623b      	str	r3, [r7, #32]
    }
 8000cd0:	bf00      	nop
 8000cd2:	e7fe      	b.n	8000cd2 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <xQueueReceive+0x42>
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <xQueueReceive+0x46>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <xQueueReceive+0x48>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10c      	bne.n	8000d06 <xQueueReceive+0x66>
        __asm volatile
 8000cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf0:	b672      	cpsid	i
 8000cf2:	f383 8811 	msr	BASEPRI, r3
 8000cf6:	f3bf 8f6f 	isb	sy
 8000cfa:	f3bf 8f4f 	dsb	sy
 8000cfe:	b662      	cpsie	i
 8000d00:	61fb      	str	r3, [r7, #28]
    }
 8000d02:	bf00      	nop
 8000d04:	e7fe      	b.n	8000d04 <xQueueReceive+0x64>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d06:	f001 f8ab 	bl	8001e60 <xTaskGetSchedulerState>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <xQueueReceive+0x76>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <xQueueReceive+0x7a>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <xQueueReceive+0x7c>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d10c      	bne.n	8000d3a <xQueueReceive+0x9a>
        __asm volatile
 8000d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d24:	b672      	cpsid	i
 8000d26:	f383 8811 	msr	BASEPRI, r3
 8000d2a:	f3bf 8f6f 	isb	sy
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	b662      	cpsie	i
 8000d34:	61bb      	str	r3, [r7, #24]
    }
 8000d36:	bf00      	nop
 8000d38:	e7fe      	b.n	8000d38 <xQueueReceive+0x98>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d3a:	f001 fbe1 	bl	8002500 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d024      	beq.n	8000d94 <xQueueReceive+0xf4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d4a:	68b9      	ldr	r1, [r7, #8]
 8000d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d4e:	f000 fa6d 	bl	800122c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 ff0d 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f003 ff09 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000d62:	4602      	mov	r2, r0
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2101      	movs	r1, #1
 8000d68:	9100      	str	r1, [sp, #0]
 8000d6a:	4621      	mov	r1, r4
 8000d6c:	205c      	movs	r0, #92	; 0x5c
 8000d6e:	f003 f9e9 	bl	8004144 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d004      	beq.n	8000d8c <xQueueReceive+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d84:	3310      	adds	r3, #16
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 feca 	bl	8001b20 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d8c:	f001 fbec 	bl	8002568 <vPortExitCritical>
                return pdPASS;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e08a      	b.n	8000eaa <xQueueReceive+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d113      	bne.n	8000dc2 <xQueueReceive+0x122>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d9a:	f001 fbe5 	bl	8002568 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 fee7 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000da6:	4604      	mov	r4, r0
 8000da8:	2000      	movs	r0, #0
 8000daa:	f003 fee3 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000dae:	4602      	mov	r2, r0
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2101      	movs	r1, #1
 8000db4:	9100      	str	r1, [sp, #0]
 8000db6:	4621      	mov	r1, r4
 8000db8:	205c      	movs	r0, #92	; 0x5c
 8000dba:	f003 f9c3 	bl	8004144 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e073      	b.n	8000eaa <xQueueReceive+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d106      	bne.n	8000dd6 <xQueueReceive+0x136>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 ff0f 	bl	8001bf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000dd6:	f001 fbc7 	bl	8002568 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000dda:	f000 fcbf 	bl	800175c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000dde:	f001 fb8f 	bl	8002500 <vPortEnterCritical>
 8000de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dee:	d103      	bne.n	8000df8 <xQueueReceive+0x158>
 8000df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d103      	bne.n	8000e0e <xQueueReceive+0x16e>
 8000e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e0e:	f001 fbab 	bl	8002568 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e12:	1d3a      	adds	r2, r7, #4
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fefe 	bl	8001c1c <xTaskCheckForTimeOut>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d124      	bne.n	8000e70 <xQueueReceive+0x1d0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e28:	f000 fa78 	bl	800131c <prvIsQueueEmpty>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d018      	beq.n	8000e64 <xQueueReceive+0x1c4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e34:	3324      	adds	r3, #36	; 0x24
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fe4a 	bl	8001ad4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e42:	f000 fa19 	bl	8001278 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e46:	f000 fc97 	bl	8001778 <xTaskResumeAll>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f47f af74 	bne.w	8000d3a <xQueueReceive+0x9a>
                {
                    portYIELD_WITHIN_API();
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <xQueueReceive+0x214>)
 8000e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	f3bf 8f4f 	dsb	sy
 8000e5e:	f3bf 8f6f 	isb	sy
 8000e62:	e76a      	b.n	8000d3a <xQueueReceive+0x9a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e66:	f000 fa07 	bl	8001278 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e6a:	f000 fc85 	bl	8001778 <xTaskResumeAll>
 8000e6e:	e764      	b.n	8000d3a <xQueueReceive+0x9a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e72:	f000 fa01 	bl	8001278 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e76:	f000 fc7f 	bl	8001778 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e7c:	f000 fa4e 	bl	800131c <prvIsQueueEmpty>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f43f af59 	beq.w	8000d3a <xQueueReceive+0x9a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fe72 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000e90:	4604      	mov	r4, r0
 8000e92:	2000      	movs	r0, #0
 8000e94:	f003 fe6e 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	9100      	str	r1, [sp, #0]
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	205c      	movs	r0, #92	; 0x5c
 8000ea4:	f003 f94e 	bl	8004144 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000ea8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3734      	adds	r7, #52	; 0x34
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000ed04 	.word	0xe000ed04

08000eb8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b091      	sub	sp, #68	; 0x44
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10c      	bne.n	8000eee <xQueueSemaphoreTake+0x36>
        __asm volatile
 8000ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed8:	b672      	cpsid	i
 8000eda:	f383 8811 	msr	BASEPRI, r3
 8000ede:	f3bf 8f6f 	isb	sy
 8000ee2:	f3bf 8f4f 	dsb	sy
 8000ee6:	b662      	cpsie	i
 8000ee8:	623b      	str	r3, [r7, #32]
    }
 8000eea:	bf00      	nop
 8000eec:	e7fe      	b.n	8000eec <xQueueSemaphoreTake+0x34>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00c      	beq.n	8000f10 <xQueueSemaphoreTake+0x58>
        __asm volatile
 8000ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efa:	b672      	cpsid	i
 8000efc:	f383 8811 	msr	BASEPRI, r3
 8000f00:	f3bf 8f6f 	isb	sy
 8000f04:	f3bf 8f4f 	dsb	sy
 8000f08:	b662      	cpsie	i
 8000f0a:	61fb      	str	r3, [r7, #28]
    }
 8000f0c:	bf00      	nop
 8000f0e:	e7fe      	b.n	8000f0e <xQueueSemaphoreTake+0x56>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f10:	f000 ffa6 	bl	8001e60 <xTaskGetSchedulerState>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <xQueueSemaphoreTake+0x68>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <xQueueSemaphoreTake+0x6c>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <xQueueSemaphoreTake+0x6e>
 8000f24:	2300      	movs	r3, #0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10c      	bne.n	8000f44 <xQueueSemaphoreTake+0x8c>
        __asm volatile
 8000f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f2e:	b672      	cpsid	i
 8000f30:	f383 8811 	msr	BASEPRI, r3
 8000f34:	f3bf 8f6f 	isb	sy
 8000f38:	f3bf 8f4f 	dsb	sy
 8000f3c:	b662      	cpsie	i
 8000f3e:	61bb      	str	r3, [r7, #24]
    }
 8000f40:	bf00      	nop
 8000f42:	e7fe      	b.n	8000f42 <xQueueSemaphoreTake+0x8a>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000f44:	f001 fadc 	bl	8002500 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d029      	beq.n	8000fa8 <xQueueSemaphoreTake+0xf0>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8000f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fe0c 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000f5c:	4604      	mov	r4, r0
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f003 fe08 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000f64:	4602      	mov	r2, r0
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	9100      	str	r1, [sp, #0]
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	205c      	movs	r0, #92	; 0x5c
 8000f70:	f003 f8e8 	bl	8004144 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	1e5a      	subs	r2, r3, #1
 8000f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <xQueueSemaphoreTake+0xd6>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000f84:	f001 f924 	bl	80021d0 <pvTaskIncrementMutexHeldCount>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8c:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d004      	beq.n	8000fa0 <xQueueSemaphoreTake+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f98:	3310      	adds	r3, #16
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fdc0 	bl	8001b20 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000fa0:	f001 fae2 	bl	8002568 <vPortExitCritical>
                return pdPASS;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e0b9      	b.n	800111c <xQueueSemaphoreTake+0x264>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d123      	bne.n	8000ff6 <xQueueSemaphoreTake+0x13e>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8000fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00c      	beq.n	8000fce <xQueueSemaphoreTake+0x116>
        __asm volatile
 8000fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb8:	b672      	cpsid	i
 8000fba:	f383 8811 	msr	BASEPRI, r3
 8000fbe:	f3bf 8f6f 	isb	sy
 8000fc2:	f3bf 8f4f 	dsb	sy
 8000fc6:	b662      	cpsie	i
 8000fc8:	617b      	str	r3, [r7, #20]
    }
 8000fca:	bf00      	nop
 8000fcc:	e7fe      	b.n	8000fcc <xQueueSemaphoreTake+0x114>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000fce:	f001 facb 	bl	8002568 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 fdcd 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000fda:	4604      	mov	r4, r0
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f003 fdc9 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	9100      	str	r1, [sp, #0]
 8000fea:	4621      	mov	r1, r4
 8000fec:	205c      	movs	r0, #92	; 0x5c
 8000fee:	f003 f8a9 	bl	8004144 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e092      	b.n	800111c <xQueueSemaphoreTake+0x264>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d106      	bne.n	800100a <xQueueSemaphoreTake+0x152>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fdf5 	bl	8001bf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001006:	2301      	movs	r3, #1
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800100a:	f001 faad 	bl	8002568 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800100e:	f000 fba5 	bl	800175c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001012:	f001 fa75 	bl	8002500 <vPortEnterCritical>
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800101c:	b25b      	sxtb	r3, r3
 800101e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001022:	d103      	bne.n	800102c <xQueueSemaphoreTake+0x174>
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001032:	b25b      	sxtb	r3, r3
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d103      	bne.n	8001042 <xQueueSemaphoreTake+0x18a>
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001042:	f001 fa91 	bl	8002568 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001046:	463a      	mov	r2, r7
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fde4 	bl	8001c1c <xTaskCheckForTimeOut>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d132      	bne.n	80010c0 <xQueueSemaphoreTake+0x208>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800105a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800105c:	f000 f95e 	bl	800131c <prvIsQueueEmpty>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d026      	beq.n	80010b4 <xQueueSemaphoreTake+0x1fc>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <xQueueSemaphoreTake+0x1ca>
                        {
                            taskENTER_CRITICAL();
 800106e:	f001 fa47 	bl	8002500 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 ff10 	bl	8001e9c <xTaskPriorityInherit>
 800107c:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 800107e:	f001 fa73 	bl	8002568 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	3324      	adds	r3, #36	; 0x24
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fd22 	bl	8001ad4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001092:	f000 f8f1 	bl	8001278 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001096:	f000 fb6f 	bl	8001778 <xTaskResumeAll>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	f47f af51 	bne.w	8000f44 <xQueueSemaphoreTake+0x8c>
                {
                    portYIELD_WITHIN_API();
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <xQueueSemaphoreTake+0x26c>)
 80010a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	f3bf 8f4f 	dsb	sy
 80010ae:	f3bf 8f6f 	isb	sy
 80010b2:	e747      	b.n	8000f44 <xQueueSemaphoreTake+0x8c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80010b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010b6:	f000 f8df 	bl	8001278 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80010ba:	f000 fb5d 	bl	8001778 <xTaskResumeAll>
 80010be:	e741      	b.n	8000f44 <xQueueSemaphoreTake+0x8c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80010c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010c2:	f000 f8d9 	bl	8001278 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80010c6:	f000 fb57 	bl	8001778 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010cc:	f000 f926 	bl	800131c <prvIsQueueEmpty>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f43f af36 	beq.w	8000f44 <xQueueSemaphoreTake+0x8c>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80010d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00d      	beq.n	80010fa <xQueueSemaphoreTake+0x242>
                        {
                            taskENTER_CRITICAL();
 80010de:	f001 fa0f 	bl	8002500 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80010e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010e4:	f000 f820 	bl	8001128 <prvGetDisinheritPriorityAfterTimeout>
 80010e8:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 ffd1 	bl	8002098 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80010f6:	f001 fa37 	bl	8002568 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fd39 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 8001102:	4604      	mov	r4, r0
 8001104:	2000      	movs	r0, #0
 8001106:	f003 fd35 	bl	8004b74 <SEGGER_SYSVIEW_ShrinkId>
 800110a:	4602      	mov	r2, r0
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2101      	movs	r1, #1
 8001110:	9100      	str	r1, [sp, #0]
 8001112:	4621      	mov	r1, r4
 8001114:	205c      	movs	r0, #92	; 0x5c
 8001116:	f003 f815 	bl	8004144 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800111a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800111c:	4618      	mov	r0, r3
 800111e:	373c      	adds	r7, #60	; 0x3c
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	e000ed04 	.word	0xe000ed04

08001128 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e001      	b.n	800114a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800114a:	68fb      	ldr	r3, [r7, #12]
    }
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10d      	bne.n	8001192 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d14d      	bne.n	800121a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 ff04 	bl	8001f90 <xTaskPriorityDisinherit>
 8001188:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	e043      	b.n	800121a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d119      	bne.n	80011cc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6858      	ldr	r0, [r3, #4]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	461a      	mov	r2, r3
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	f00b fb98 	bl	800c8d8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	441a      	add	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d32b      	bcc.n	800121a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	e026      	b.n	800121a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	68d8      	ldr	r0, [r3, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	461a      	mov	r2, r3
 80011d6:	68b9      	ldr	r1, [r7, #8]
 80011d8:	f00b fb7e 	bl	800c8d8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	425b      	negs	r3, r3
 80011e6:	441a      	add	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d207      	bcs.n	8001208 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	425b      	negs	r3, r3
 8001202:	441a      	add	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d105      	bne.n	800121a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	3b01      	subs	r3, #1
 8001218:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001222:	697b      	ldr	r3, [r7, #20]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2b00      	cmp	r3, #0
 800123c:	d018      	beq.n	8001270 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	441a      	add	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	429a      	cmp	r2, r3
 8001256:	d303      	bcc.n	8001260 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68d9      	ldr	r1, [r3, #12]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	461a      	mov	r2, r3
 800126a:	6838      	ldr	r0, [r7, #0]
 800126c:	f00b fb34 	bl	800c8d8 <memcpy>
    }
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001280:	f001 f93e 	bl	8002500 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800128a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800128c:	e011      	b.n	80012b2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	2b00      	cmp	r3, #0
 8001294:	d012      	beq.n	80012bc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3324      	adds	r3, #36	; 0x24
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fc40 	bl	8001b20 <xTaskRemoveFromEventList>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80012a6:	f000 fd23 	bl	8001cf0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	dce9      	bgt.n	800128e <prvUnlockQueue+0x16>
 80012ba:	e000      	b.n	80012be <prvUnlockQueue+0x46>
                        break;
 80012bc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	22ff      	movs	r2, #255	; 0xff
 80012c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80012c6:	f001 f94f 	bl	8002568 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80012ca:	f001 f919 	bl	8002500 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012d4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80012d6:	e011      	b.n	80012fc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d012      	beq.n	8001306 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3310      	adds	r3, #16
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fc1b 	bl	8001b20 <xTaskRemoveFromEventList>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80012f0:	f000 fcfe 	bl	8001cf0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80012fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dce9      	bgt.n	80012d8 <prvUnlockQueue+0x60>
 8001304:	e000      	b.n	8001308 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001306:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	22ff      	movs	r2, #255	; 0xff
 800130c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001310:	f001 f92a 	bl	8002568 <vPortExitCritical>
}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001324:	f001 f8ec 	bl	8002500 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001330:	2301      	movs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	e001      	b.n	800133a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800133a:	f001 f915 	bl	8002568 <vPortExitCritical>

    return xReturn;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001350:	f001 f8d6 	bl	8002500 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135c:	429a      	cmp	r2, r3
 800135e:	d102      	bne.n	8001366 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001360:	2301      	movs	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e001      	b.n	800136a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800136a:	f001 f8fd 	bl	8002568 <vPortExitCritical>

    return xReturn;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af04      	add	r7, sp, #16
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4618      	mov	r0, r3
 800138e:	f001 f9eb 	bl	8002768 <pvPortMalloc>
 8001392:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00e      	beq.n	80013b8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800139a:	205c      	movs	r0, #92	; 0x5c
 800139c:	f001 f9e4 	bl	8002768 <pvPortMalloc>
 80013a0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
 80013ae:	e005      	b.n	80013bc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f001 fabf 	bl	8002934 <vPortFree>
 80013b6:	e001      	b.n	80013bc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d013      	beq.n	80013ea <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80013c2:	88fa      	ldrh	r2, [r7, #6]
 80013c4:	2300      	movs	r3, #0
 80013c6:	9303      	str	r3, [sp, #12]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68b9      	ldr	r1, [r7, #8]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 f80e 	bl	80013fa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80013de:	69f8      	ldr	r0, [r7, #28]
 80013e0:	f000 f8a4 	bl	800152c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	e002      	b.n	80013f0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80013f0:	69bb      	ldr	r3, [r7, #24]
    }
 80013f2:	4618      	mov	r0, r3
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b088      	sub	sp, #32
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	461a      	mov	r2, r3
 8001412:	21a5      	movs	r1, #165	; 0xa5
 8001414:	f00b fa6e 	bl	800c8f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001422:	440b      	add	r3, r1
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	f023 0307 	bic.w	r3, r3, #7
 8001430:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00c      	beq.n	8001456 <prvInitialiseNewTask+0x5c>
        __asm volatile
 800143c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001440:	b672      	cpsid	i
 8001442:	f383 8811 	msr	BASEPRI, r3
 8001446:	f3bf 8f6f 	isb	sy
 800144a:	f3bf 8f4f 	dsb	sy
 800144e:	b662      	cpsie	i
 8001450:	617b      	str	r3, [r7, #20]
    }
 8001452:	bf00      	nop
 8001454:	e7fe      	b.n	8001454 <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d01f      	beq.n	800149c <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	e012      	b.n	8001488 <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4413      	add	r3, r2
 8001468:	7819      	ldrb	r1, [r3, #0]
 800146a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	4413      	add	r3, r2
 8001470:	3334      	adds	r3, #52	; 0x34
 8001472:	460a      	mov	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	4413      	add	r3, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	d9e9      	bls.n	8001462 <prvInitialiseNewTask+0x68>
 800148e:	e000      	b.n	8001492 <prvInitialiseNewTask+0x98>
            {
                break;
 8001490:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800149a:	e003      	b.n	80014a4 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d901      	bls.n	80014ae <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80014aa:	2306      	movs	r3, #6
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80014ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80014b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014b8:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80014ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014bc:	2200      	movs	r2, #0
 80014be:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80014c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c2:	3304      	adds	r3, #4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f955 	bl	8000774 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80014ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014cc:	3318      	adds	r3, #24
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f950 	bl	8000774 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80014d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014d8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014dc:	f1c3 0207 	rsb	r2, r3, #7
 80014e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80014e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80014ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ec:	3354      	adds	r3, #84	; 0x54
 80014ee:	2204      	movs	r2, #4
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f00b f9fe 	bl	800c8f4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80014f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fa:	3358      	adds	r3, #88	; 0x58
 80014fc:	2201      	movs	r2, #1
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f00b f9f7 	bl	800c8f4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	68f9      	ldr	r1, [r7, #12]
 800150a:	69b8      	ldr	r0, [r7, #24]
 800150c:	f000 feec 	bl	80022e8 <pxPortInitialiseStack>
 8001510:	4602      	mov	r2, r0
 8001512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001514:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001520:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001522:	bf00      	nop
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af02      	add	r7, sp, #8
 8001532:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001534:	f000 ffe4 	bl	8002500 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <prvAddNewTaskToReadyList+0xe4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a34      	ldr	r2, [pc, #208]	; (8001610 <prvAddNewTaskToReadyList+0xe4>)
 8001540:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001542:	4b34      	ldr	r3, [pc, #208]	; (8001614 <prvAddNewTaskToReadyList+0xe8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800154a:	4a32      	ldr	r2, [pc, #200]	; (8001614 <prvAddNewTaskToReadyList+0xe8>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <prvAddNewTaskToReadyList+0xe4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d110      	bne.n	800157a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001558:	f000 fbe8 	bl	8001d2c <prvInitialiseTaskLists>
 800155c:	e00d      	b.n	800157a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <prvAddNewTaskToReadyList+0xec>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <prvAddNewTaskToReadyList+0xe8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	429a      	cmp	r2, r3
 8001572:	d802      	bhi.n	800157a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001574:	4a27      	ldr	r2, [pc, #156]	; (8001614 <prvAddNewTaskToReadyList+0xe8>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <prvAddNewTaskToReadyList+0xf0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	4a26      	ldr	r2, [pc, #152]	; (800161c <prvAddNewTaskToReadyList+0xf0>)
 8001582:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <prvAddNewTaskToReadyList+0xf0>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d016      	beq.n	80015c0 <prvAddNewTaskToReadyList+0x94>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	f003 f9c7 	bl	8004928 <SEGGER_SYSVIEW_OnTaskCreate>
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	461d      	mov	r5, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	461c      	mov	r4, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	1ae3      	subs	r3, r4, r3
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	462b      	mov	r3, r5
 80015bc:	f001 fb8c 	bl	8002cd8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fa34 	bl	8004a30 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	2201      	movs	r2, #1
 80015ce:	409a      	lsls	r2, r3
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <prvAddNewTaskToReadyList+0xf4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <prvAddNewTaskToReadyList+0xf4>)
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <prvAddNewTaskToReadyList+0xf8>)
 80015e8:	441a      	add	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3304      	adds	r3, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4610      	mov	r0, r2
 80015f2:	f7ff f8cc 	bl	800078e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80015f6:	f000 ffb7 	bl	8002568 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <prvAddNewTaskToReadyList+0xec>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <prvAddNewTaskToReadyList+0xe8>)
 8001604:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bdb0      	pop	{r4, r5, r7, pc}
 800160e:	bf00      	nop
 8001610:	240001a0 	.word	0x240001a0
 8001614:	240000a0 	.word	0x240000a0
 8001618:	240001ac 	.word	0x240001ac
 800161c:	240001bc 	.word	0x240001bc
 8001620:	240001a8 	.word	0x240001a8
 8001624:	240000a4 	.word	0x240000a4

08001628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01d      	beq.n	8001676 <vTaskDelay+0x4e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <vTaskDelay+0x6c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00c      	beq.n	800165c <vTaskDelay+0x34>
        __asm volatile
 8001642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001646:	b672      	cpsid	i
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	b662      	cpsie	i
 8001656:	60bb      	str	r3, [r7, #8]
    }
 8001658:	bf00      	nop
 800165a:	e7fe      	b.n	800165a <vTaskDelay+0x32>
            vTaskSuspendAll();
 800165c:	f000 f87e 	bl	800175c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	2023      	movs	r0, #35	; 0x23
 8001664:	f002 fc62 	bl	8003f2c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001668:	2100      	movs	r1, #0
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fdc4 	bl	80021f8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001670:	f000 f882 	bl	8001778 <xTaskResumeAll>
 8001674:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d107      	bne.n	800168c <vTaskDelay+0x64>
        {
            portYIELD_WITHIN_API();
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <vTaskDelay+0x70>)
 800167e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	f3bf 8f4f 	dsb	sy
 8001688:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	240001c8 	.word	0x240001c8
 8001698:	e000ed04 	.word	0xe000ed04

0800169c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <vTaskStartScheduler+0xa0>)
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	2300      	movs	r3, #0
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2300      	movs	r3, #0
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	4924      	ldr	r1, [pc, #144]	; (8001740 <vTaskStartScheduler+0xa4>)
 80016b0:	4824      	ldr	r0, [pc, #144]	; (8001744 <vTaskStartScheduler+0xa8>)
 80016b2:	f7ff fe61 	bl	8001378 <xTaskCreate>
 80016b6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d126      	bne.n	800170c <vTaskStartScheduler+0x70>
        __asm volatile
 80016be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c2:	b672      	cpsid	i
 80016c4:	f383 8811 	msr	BASEPRI, r3
 80016c8:	f3bf 8f6f 	isb	sy
 80016cc:	f3bf 8f4f 	dsb	sy
 80016d0:	b662      	cpsie	i
 80016d2:	60bb      	str	r3, [r7, #8]
    }
 80016d4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <vTaskStartScheduler+0xac>)
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <vTaskStartScheduler+0xb0>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <vTaskStartScheduler+0xb4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <vTaskStartScheduler+0xb8>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <vTaskStartScheduler+0xa0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d102      	bne.n	80016fc <vTaskStartScheduler+0x60>
 80016f6:	f003 f8fb 	bl	80048f0 <SEGGER_SYSVIEW_OnIdle>
 80016fa:	e004      	b.n	8001706 <vTaskStartScheduler+0x6a>
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <vTaskStartScheduler+0xb8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 f953 	bl	80049ac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001706:	f000 fe7d 	bl	8002404 <xPortStartScheduler>
 800170a:	e010      	b.n	800172e <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001712:	d10c      	bne.n	800172e <vTaskStartScheduler+0x92>
        __asm volatile
 8001714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001718:	b672      	cpsid	i
 800171a:	f383 8811 	msr	BASEPRI, r3
 800171e:	f3bf 8f6f 	isb	sy
 8001722:	f3bf 8f4f 	dsb	sy
 8001726:	b662      	cpsie	i
 8001728:	607b      	str	r3, [r7, #4]
    }
 800172a:	bf00      	nop
 800172c:	e7fe      	b.n	800172c <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <vTaskStartScheduler+0xbc>)
 8001730:	681b      	ldr	r3, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	240001c4 	.word	0x240001c4
 8001740:	0800dd20 	.word	0x0800dd20
 8001744:	08001d09 	.word	0x08001d09
 8001748:	240001c0 	.word	0x240001c0
 800174c:	240001ac 	.word	0x240001ac
 8001750:	240001a4 	.word	0x240001a4
 8001754:	240000a0 	.word	0x240000a0
 8001758:	24000000 	.word	0x24000000

0800175c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <vTaskSuspendAll+0x18>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	4a03      	ldr	r2, [pc, #12]	; (8001774 <vTaskSuspendAll+0x18>)
 8001768:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	240001c8 	.word	0x240001c8

08001778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001786:	4b3e      	ldr	r3, [pc, #248]	; (8001880 <xTaskResumeAll+0x108>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10c      	bne.n	80017a8 <xTaskResumeAll+0x30>
        __asm volatile
 800178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001792:	b672      	cpsid	i
 8001794:	f383 8811 	msr	BASEPRI, r3
 8001798:	f3bf 8f6f 	isb	sy
 800179c:	f3bf 8f4f 	dsb	sy
 80017a0:	b662      	cpsie	i
 80017a2:	603b      	str	r3, [r7, #0]
    }
 80017a4:	bf00      	nop
 80017a6:	e7fe      	b.n	80017a6 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80017a8:	f000 feaa 	bl	8002500 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80017ac:	4b34      	ldr	r3, [pc, #208]	; (8001880 <xTaskResumeAll+0x108>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	4a33      	ldr	r2, [pc, #204]	; (8001880 <xTaskResumeAll+0x108>)
 80017b4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <xTaskResumeAll+0x108>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d159      	bne.n	8001872 <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <xTaskResumeAll+0x10c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d055      	beq.n	8001872 <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80017c6:	e032      	b.n	800182e <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <xTaskResumeAll+0x110>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3318      	adds	r3, #24
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff f837 	bl	8000848 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3304      	adds	r3, #4
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f832 	bl	8000848 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 f922 	bl	8004a30 <SEGGER_SYSVIEW_OnTaskStartReady>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	2201      	movs	r2, #1
 80017f2:	409a      	lsls	r2, r3
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <xTaskResumeAll+0x114>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	4a24      	ldr	r2, [pc, #144]	; (800188c <xTaskResumeAll+0x114>)
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4a21      	ldr	r2, [pc, #132]	; (8001890 <xTaskResumeAll+0x118>)
 800180c:	441a      	add	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3304      	adds	r3, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f7fe ffba 	bl	800078e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <xTaskResumeAll+0x11c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	429a      	cmp	r2, r3
 8001826:	d302      	bcc.n	800182e <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <xTaskResumeAll+0x120>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <xTaskResumeAll+0x110>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1c8      	bne.n	80017c8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800183c:	f000 faf4 	bl	8001e28 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <xTaskResumeAll+0x124>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d010      	beq.n	800186e <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800184c:	f000 f83a 	bl	80018c4 <xTaskIncrementTick>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <xTaskResumeAll+0x120>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	3b01      	subs	r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f1      	bne.n	800184c <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <xTaskResumeAll+0x124>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <xTaskResumeAll+0x120>)
 8001870:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001872:	f000 fe79 	bl	8002568 <vPortExitCritical>

    return xAlreadyYielded;
 8001876:	687b      	ldr	r3, [r7, #4]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	240001c8 	.word	0x240001c8
 8001884:	240001a0 	.word	0x240001a0
 8001888:	24000160 	.word	0x24000160
 800188c:	240001a8 	.word	0x240001a8
 8001890:	240000a4 	.word	0x240000a4
 8001894:	240000a0 	.word	0x240000a0
 8001898:	240001b4 	.word	0x240001b4
 800189c:	240001b0 	.word	0x240001b0

080018a0 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80018a6:	f000 ff1b 	bl	80026e0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80018ae:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <xTaskGetTickCountFromISR+0x20>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80018b4:	683b      	ldr	r3, [r7, #0]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	240001a4 	.word	0x240001a4

080018c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018ce:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <xTaskIncrementTick+0x114>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d175      	bne.n	80019c2 <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80018d6:	4b41      	ldr	r3, [pc, #260]	; (80019dc <xTaskIncrementTick+0x118>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80018de:	4a3f      	ldr	r2, [pc, #252]	; (80019dc <xTaskIncrementTick+0x118>)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d122      	bne.n	8001930 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <xTaskIncrementTick+0x11c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00c      	beq.n	800190e <xTaskIncrementTick+0x4a>
        __asm volatile
 80018f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f8:	b672      	cpsid	i
 80018fa:	f383 8811 	msr	BASEPRI, r3
 80018fe:	f3bf 8f6f 	isb	sy
 8001902:	f3bf 8f4f 	dsb	sy
 8001906:	b662      	cpsie	i
 8001908:	603b      	str	r3, [r7, #0]
    }
 800190a:	bf00      	nop
 800190c:	e7fe      	b.n	800190c <xTaskIncrementTick+0x48>
 800190e:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <xTaskIncrementTick+0x11c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <xTaskIncrementTick+0x120>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a31      	ldr	r2, [pc, #196]	; (80019e0 <xTaskIncrementTick+0x11c>)
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4a31      	ldr	r2, [pc, #196]	; (80019e4 <xTaskIncrementTick+0x120>)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <xTaskIncrementTick+0x124>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	4a2f      	ldr	r2, [pc, #188]	; (80019e8 <xTaskIncrementTick+0x124>)
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	f000 fa7c 	bl	8001e28 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001930:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <xTaskIncrementTick+0x128>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	429a      	cmp	r2, r3
 8001938:	d348      	bcc.n	80019cc <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800193a:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <xTaskIncrementTick+0x11c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d104      	bne.n	800194e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <xTaskIncrementTick+0x128>)
 8001946:	f04f 32ff 	mov.w	r2, #4294967295
 800194a:	601a      	str	r2, [r3, #0]
                    break;
 800194c:	e03e      	b.n	80019cc <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <xTaskIncrementTick+0x11c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	d203      	bcs.n	800196e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001966:	4a21      	ldr	r2, [pc, #132]	; (80019ec <xTaskIncrementTick+0x128>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800196c:	e02e      	b.n	80019cc <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3304      	adds	r3, #4
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe ff68 	bl	8000848 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	3318      	adds	r3, #24
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe ff5f 	bl	8000848 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	4618      	mov	r0, r3
 800198e:	f003 f84f 	bl	8004a30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	2201      	movs	r2, #1
 8001998:	409a      	lsls	r2, r3
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <xTaskIncrementTick+0x12c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <xTaskIncrementTick+0x12c>)
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <xTaskIncrementTick+0x130>)
 80019b2:	441a      	add	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3304      	adds	r3, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4610      	mov	r0, r2
 80019bc:	f7fe fee7 	bl	800078e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019c0:	e7bb      	b.n	800193a <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <xTaskIncrementTick+0x134>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <xTaskIncrementTick+0x134>)
 80019ca:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80019cc:	697b      	ldr	r3, [r7, #20]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	240001c8 	.word	0x240001c8
 80019dc:	240001a4 	.word	0x240001a4
 80019e0:	24000158 	.word	0x24000158
 80019e4:	2400015c 	.word	0x2400015c
 80019e8:	240001b8 	.word	0x240001b8
 80019ec:	240001c0 	.word	0x240001c0
 80019f0:	240001a8 	.word	0x240001a8
 80019f4:	240000a4 	.word	0x240000a4
 80019f8:	240001b0 	.word	0x240001b0

080019fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a02:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <vTaskSwitchContext+0xc0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <vTaskSwitchContext+0xc4>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001a10:	e04f      	b.n	8001ab2 <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8001a12:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <vTaskSwitchContext+0xc4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <vTaskSwitchContext+0xc8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	f1c3 031f 	rsb	r3, r3, #31
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	4926      	ldr	r1, [pc, #152]	; (8001ac8 <vTaskSwitchContext+0xcc>)
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <vTaskSwitchContext+0x60>
        __asm volatile
 8001a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a46:	b672      	cpsid	i
 8001a48:	f383 8811 	msr	BASEPRI, r3
 8001a4c:	f3bf 8f6f 	isb	sy
 8001a50:	f3bf 8f4f 	dsb	sy
 8001a54:	b662      	cpsie	i
 8001a56:	607b      	str	r3, [r7, #4]
    }
 8001a58:	bf00      	nop
 8001a5a:	e7fe      	b.n	8001a5a <vTaskSwitchContext+0x5e>
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <vTaskSwitchContext+0xcc>)
 8001a68:	4413      	add	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	3308      	adds	r3, #8
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d104      	bne.n	8001a8c <vTaskSwitchContext+0x90>
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <vTaskSwitchContext+0xd0>)
 8001a94:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <vTaskSwitchContext+0xd0>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <vTaskSwitchContext+0xd4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d102      	bne.n	8001aa8 <vTaskSwitchContext+0xac>
 8001aa2:	f002 ff25 	bl	80048f0 <SEGGER_SYSVIEW_OnIdle>
}
 8001aa6:	e004      	b.n	8001ab2 <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <vTaskSwitchContext+0xd0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 ff7d 	bl	80049ac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	240001c8 	.word	0x240001c8
 8001ac0:	240001b4 	.word	0x240001b4
 8001ac4:	240001a8 	.word	0x240001a8
 8001ac8:	240000a4 	.word	0x240000a4
 8001acc:	240000a0 	.word	0x240000a0
 8001ad0:	240001c4 	.word	0x240001c4

08001ad4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10c      	bne.n	8001afe <vTaskPlaceOnEventList+0x2a>
        __asm volatile
 8001ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae8:	b672      	cpsid	i
 8001aea:	f383 8811 	msr	BASEPRI, r3
 8001aee:	f3bf 8f6f 	isb	sy
 8001af2:	f3bf 8f4f 	dsb	sy
 8001af6:	b662      	cpsie	i
 8001af8:	60fb      	str	r3, [r7, #12]
    }
 8001afa:	bf00      	nop
 8001afc:	e7fe      	b.n	8001afc <vTaskPlaceOnEventList+0x28>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <vTaskPlaceOnEventList+0x48>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	3318      	adds	r3, #24
 8001b04:	4619      	mov	r1, r3
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7fe fe65 	bl	80007d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	6838      	ldr	r0, [r7, #0]
 8001b10:	f000 fb72 	bl	80021f8 <prvAddCurrentTaskToDelayedList>
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	240000a0 	.word	0x240000a0

08001b20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10c      	bne.n	8001b50 <xTaskRemoveFromEventList+0x30>
        __asm volatile
 8001b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3a:	b672      	cpsid	i
 8001b3c:	f383 8811 	msr	BASEPRI, r3
 8001b40:	f3bf 8f6f 	isb	sy
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	b662      	cpsie	i
 8001b4a:	60fb      	str	r3, [r7, #12]
    }
 8001b4c:	bf00      	nop
 8001b4e:	e7fe      	b.n	8001b4e <xTaskRemoveFromEventList+0x2e>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	3318      	adds	r3, #24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fe77 	bl	8000848 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <xTaskRemoveFromEventList+0xb8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d120      	bne.n	8001ba4 <xTaskRemoveFromEventList+0x84>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	3304      	adds	r3, #4
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fe6e 	bl	8000848 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 ff5e 	bl	8004a30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	2201      	movs	r2, #1
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <xTaskRemoveFromEventList+0xbc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <xTaskRemoveFromEventList+0xbc>)
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <xTaskRemoveFromEventList+0xc0>)
 8001b94:	441a      	add	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f7fe fdf6 	bl	800078e <vListInsertEnd>
 8001ba2:	e005      	b.n	8001bb0 <xTaskRemoveFromEventList+0x90>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	3318      	adds	r3, #24
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480e      	ldr	r0, [pc, #56]	; (8001be4 <xTaskRemoveFromEventList+0xc4>)
 8001bac:	f7fe fdef 	bl	800078e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <xTaskRemoveFromEventList+0xc8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d905      	bls.n	8001bca <xTaskRemoveFromEventList+0xaa>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <xTaskRemoveFromEventList+0xcc>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e001      	b.n	8001bce <xTaskRemoveFromEventList+0xae>
    }
    else
    {
        xReturn = pdFALSE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001bce:	697b      	ldr	r3, [r7, #20]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	240001c8 	.word	0x240001c8
 8001bdc:	240001a8 	.word	0x240001a8
 8001be0:	240000a4 	.word	0x240000a4
 8001be4:	24000160 	.word	0x24000160
 8001be8:	240000a0 	.word	0x240000a0
 8001bec:	240001b4 	.word	0x240001b4

08001bf0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <vTaskInternalSetTimeOutState+0x24>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <vTaskInternalSetTimeOutState+0x28>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	605a      	str	r2, [r3, #4]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	240001b8 	.word	0x240001b8
 8001c18:	240001a4 	.word	0x240001a4

08001c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10c      	bne.n	8001c46 <xTaskCheckForTimeOut+0x2a>
        __asm volatile
 8001c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c30:	b672      	cpsid	i
 8001c32:	f383 8811 	msr	BASEPRI, r3
 8001c36:	f3bf 8f6f 	isb	sy
 8001c3a:	f3bf 8f4f 	dsb	sy
 8001c3e:	b662      	cpsie	i
 8001c40:	613b      	str	r3, [r7, #16]
    }
 8001c42:	bf00      	nop
 8001c44:	e7fe      	b.n	8001c44 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10c      	bne.n	8001c66 <xTaskCheckForTimeOut+0x4a>
        __asm volatile
 8001c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c50:	b672      	cpsid	i
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	b662      	cpsie	i
 8001c60:	60fb      	str	r3, [r7, #12]
    }
 8001c62:	bf00      	nop
 8001c64:	e7fe      	b.n	8001c64 <xTaskCheckForTimeOut+0x48>

    taskENTER_CRITICAL();
 8001c66:	f000 fc4b 	bl	8002500 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <xTaskCheckForTimeOut+0xcc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c82:	d102      	bne.n	8001c8a <xTaskCheckForTimeOut+0x6e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	e026      	b.n	8001cd8 <xTaskCheckForTimeOut+0xbc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <xTaskCheckForTimeOut+0xd0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d00a      	beq.n	8001cac <xTaskCheckForTimeOut+0x90>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d305      	bcc.n	8001cac <xTaskCheckForTimeOut+0x90>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	e015      	b.n	8001cd8 <xTaskCheckForTimeOut+0xbc>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d20b      	bcs.n	8001cce <xTaskCheckForTimeOut+0xb2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	1ad2      	subs	r2, r2, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff94 	bl	8001bf0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	e004      	b.n	8001cd8 <xTaskCheckForTimeOut+0xbc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001cd8:	f000 fc46 	bl	8002568 <vPortExitCritical>

    return xReturn;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	240001a4 	.word	0x240001a4
 8001cec:	240001b8 	.word	0x240001b8

08001cf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <vTaskMissedYield+0x14>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	240001b4 	.word	0x240001b4

08001d08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001d10:	f000 f84c 	bl	8001dac <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <prvIdleTask+0x20>)
 8001d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001d24:	e7f4      	b.n	8001d10 <prvIdleTask+0x8>
 8001d26:	bf00      	nop
 8001d28:	e000ed04 	.word	0xe000ed04

08001d2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	e00c      	b.n	8001d52 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <prvInitialiseTaskLists+0x60>)
 8001d44:	4413      	add	r3, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fcf4 	bl	8000734 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b06      	cmp	r3, #6
 8001d56:	d9ef      	bls.n	8001d38 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001d58:	480d      	ldr	r0, [pc, #52]	; (8001d90 <prvInitialiseTaskLists+0x64>)
 8001d5a:	f7fe fceb 	bl	8000734 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001d5e:	480d      	ldr	r0, [pc, #52]	; (8001d94 <prvInitialiseTaskLists+0x68>)
 8001d60:	f7fe fce8 	bl	8000734 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001d64:	480c      	ldr	r0, [pc, #48]	; (8001d98 <prvInitialiseTaskLists+0x6c>)
 8001d66:	f7fe fce5 	bl	8000734 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001d6a:	480c      	ldr	r0, [pc, #48]	; (8001d9c <prvInitialiseTaskLists+0x70>)
 8001d6c:	f7fe fce2 	bl	8000734 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001d70:	480b      	ldr	r0, [pc, #44]	; (8001da0 <prvInitialiseTaskLists+0x74>)
 8001d72:	f7fe fcdf 	bl	8000734 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <prvInitialiseTaskLists+0x78>)
 8001d78:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <prvInitialiseTaskLists+0x64>)
 8001d7a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <prvInitialiseTaskLists+0x7c>)
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <prvInitialiseTaskLists+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	240000a4 	.word	0x240000a4
 8001d90:	24000130 	.word	0x24000130
 8001d94:	24000144 	.word	0x24000144
 8001d98:	24000160 	.word	0x24000160
 8001d9c:	24000174 	.word	0x24000174
 8001da0:	2400018c 	.word	0x2400018c
 8001da4:	24000158 	.word	0x24000158
 8001da8:	2400015c 	.word	0x2400015c

08001dac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001db2:	e019      	b.n	8001de8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001db4:	f000 fba4 	bl	8002500 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <prvCheckTasksWaitingTermination+0x50>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fd3f 	bl	8000848 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <prvCheckTasksWaitingTermination+0x54>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <prvCheckTasksWaitingTermination+0x54>)
 8001dd2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <prvCheckTasksWaitingTermination+0x58>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <prvCheckTasksWaitingTermination+0x58>)
 8001ddc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001dde:	f000 fbc3 	bl	8002568 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f810 	bl	8001e08 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <prvCheckTasksWaitingTermination+0x58>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1e1      	bne.n	8001db4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	24000174 	.word	0x24000174
 8001e00:	240001a0 	.word	0x240001a0
 8001e04:	24000188 	.word	0x24000188

08001e08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fd8d 	bl	8002934 <vPortFree>
                vPortFree( pxTCB );
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fd8a 	bl	8002934 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <prvResetNextTaskUnblockTime+0x30>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d104      	bne.n	8001e40 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <prvResetNextTaskUnblockTime+0x34>)
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001e3e:	e005      	b.n	8001e4c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <prvResetNextTaskUnblockTime+0x30>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <prvResetNextTaskUnblockTime+0x34>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	24000158 	.word	0x24000158
 8001e5c:	240001c0 	.word	0x240001c0

08001e60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <xTaskGetSchedulerState+0x34>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	e008      	b.n	8001e86 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <xTaskGetSchedulerState+0x38>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	e001      	b.n	8001e86 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001e86:	687b      	ldr	r3, [r7, #4]
    }
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	240001ac 	.word	0x240001ac
 8001e98:	240001c8 	.word	0x240001c8

08001e9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb6:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <xTaskPriorityInherit+0xe8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d253      	bcs.n	8001f68 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db06      	blt.n	8001ed6 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <xTaskPriorityInherit+0xe8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	f1c3 0207 	rsb	r2, r3, #7
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	6959      	ldr	r1, [r3, #20]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4a28      	ldr	r2, [pc, #160]	; (8001f88 <xTaskPriorityInherit+0xec>)
 8001ee8:	4413      	add	r3, r2
 8001eea:	4299      	cmp	r1, r3
 8001eec:	d12f      	bne.n	8001f4e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fca8 	bl	8000848 <uxListRemove>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10a      	bne.n	8001f14 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	2201      	movs	r2, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <xTaskPriorityInherit+0xf0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <xTaskPriorityInherit+0xf0>)
 8001f12:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <xTaskPriorityInherit+0xe8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	2201      	movs	r2, #1
 8001f24:	409a      	lsls	r2, r3
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <xTaskPriorityInherit+0xf0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <xTaskPriorityInherit+0xf0>)
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <xTaskPriorityInherit+0xec>)
 8001f3e:	441a      	add	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f7fe fc21 	bl	800078e <vListInsertEnd>
 8001f4c:	e004      	b.n	8001f58 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <xTaskPriorityInherit+0xe8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	2049      	movs	r0, #73	; 0x49
 8001f5e:	f001 ffe5 	bl	8003f2c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001f62:	2301      	movs	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	e008      	b.n	8001f7a <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <xTaskPriorityInherit+0xe8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d201      	bcs.n	8001f7a <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001f76:	2301      	movs	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    }
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	240000a0 	.word	0x240000a0
 8001f88:	240000a4 	.word	0x240000a4
 8001f8c:	240001a8 	.word	0x240001a8

08001f90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d06c      	beq.n	8002080 <xTaskPriorityDisinherit+0xf0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <xTaskPriorityDisinherit+0xfc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d00c      	beq.n	8001fca <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8001fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb4:	b672      	cpsid	i
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	b662      	cpsie	i
 8001fc4:	60fb      	str	r3, [r7, #12]
    }
 8001fc6:	bf00      	nop
 8001fc8:	e7fe      	b.n	8001fc8 <xTaskPriorityDisinherit+0x38>
            configASSERT( pxTCB->uxMutexesHeld );
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10c      	bne.n	8001fec <xTaskPriorityDisinherit+0x5c>
        __asm volatile
 8001fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd6:	b672      	cpsid	i
 8001fd8:	f383 8811 	msr	BASEPRI, r3
 8001fdc:	f3bf 8f6f 	isb	sy
 8001fe0:	f3bf 8f4f 	dsb	sy
 8001fe4:	b662      	cpsie	i
 8001fe6:	60bb      	str	r3, [r7, #8]
    }
 8001fe8:	bf00      	nop
 8001fea:	e7fe      	b.n	8001fea <xTaskPriorityDisinherit+0x5a>
            ( pxTCB->uxMutexesHeld )--;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d03e      	beq.n	8002080 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002006:	2b00      	cmp	r3, #0
 8002008:	d13a      	bne.n	8002080 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	3304      	adds	r3, #4
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fc1a 	bl	8000848 <uxListRemove>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10a      	bne.n	8002030 <xTaskPriorityDisinherit+0xa0>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	2201      	movs	r2, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43da      	mvns	r2, r3
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <xTaskPriorityDisinherit+0x100>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4013      	ands	r3, r2
 800202c:	4a18      	ldr	r2, [pc, #96]	; (8002090 <xTaskPriorityDisinherit+0x100>)
 800202e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4619      	mov	r1, r3
 8002034:	204a      	movs	r0, #74	; 0x4a
 8002036:	f001 ff79 	bl	8003f2c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	f1c3 0207 	rsb	r2, r3, #7
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	2201      	movs	r2, #1
 8002054:	409a      	lsls	r2, r3
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <xTaskPriorityDisinherit+0x100>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <xTaskPriorityDisinherit+0x100>)
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4a09      	ldr	r2, [pc, #36]	; (8002094 <xTaskPriorityDisinherit+0x104>)
 800206e:	441a      	add	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	3304      	adds	r3, #4
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f7fe fb89 	bl	800078e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800207c:	2301      	movs	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002080:	697b      	ldr	r3, [r7, #20]
    }
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	240000a0 	.word	0x240000a0
 8002090:	240001a8 	.word	0x240001a8
 8002094:	240000a4 	.word	0x240000a4

08002098 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8085 	beq.w	80021bc <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10c      	bne.n	80020d4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
        __asm volatile
 80020ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020be:	b672      	cpsid	i
 80020c0:	f383 8811 	msr	BASEPRI, r3
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	f3bf 8f4f 	dsb	sy
 80020cc:	b662      	cpsie	i
 80020ce:	60fb      	str	r3, [r7, #12]
    }
 80020d0:	bf00      	nop
 80020d2:	e7fe      	b.n	80020d2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d902      	bls.n	80020e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e002      	b.n	80020ea <vTaskPriorityDisinheritAfterTimeout+0x52>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d063      	beq.n	80021bc <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d15e      	bne.n	80021bc <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	429a      	cmp	r2, r3
 8002106:	d10c      	bne.n	8002122 <vTaskPriorityDisinheritAfterTimeout+0x8a>
        __asm volatile
 8002108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210c:	b672      	cpsid	i
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	b662      	cpsie	i
 800211c:	60bb      	str	r3, [r7, #8]
    }
 800211e:	bf00      	nop
 8002120:	e7fe      	b.n	8002120 <vTaskPriorityDisinheritAfterTimeout+0x88>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4619      	mov	r1, r3
 8002126:	204a      	movs	r0, #74	; 0x4a
 8002128:	f001 ff00 	bl	8003f2c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db04      	blt.n	800214a <vTaskPriorityDisinheritAfterTimeout+0xb2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0207 	rsb	r2, r3, #7
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	6959      	ldr	r1, [r3, #20]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800215a:	4413      	add	r3, r2
 800215c:	4299      	cmp	r1, r3
 800215e:	d12d      	bne.n	80021bc <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	3304      	adds	r3, #4
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fb6f 	bl	8000848 <uxListRemove>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10a      	bne.n	8002186 <vTaskPriorityDisinheritAfterTimeout+0xee>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	2201      	movs	r2, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4013      	ands	r3, r2
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8002184:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4618      	mov	r0, r3
 800218a:	f002 fc51 	bl	8004a30 <SEGGER_SYSVIEW_OnTaskStartReady>
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	2201      	movs	r2, #1
 8002194:	409a      	lsls	r2, r3
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80021ae:	441a      	add	r2, r3
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	3304      	adds	r3, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f7fe fae9 	bl	800078e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80021bc:	bf00      	nop
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	240000a0 	.word	0x240000a0
 80021c8:	240000a4 	.word	0x240000a4
 80021cc:	240001a8 	.word	0x240001a8

080021d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d004      	beq.n	80021e6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021e2:	3201      	adds	r2, #1
 80021e4:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 80021e6:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80021e8:	681b      	ldr	r3, [r3, #0]
    }
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	240000a0 	.word	0x240000a0

080021f8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002202:	4b32      	ldr	r3, [pc, #200]	; (80022cc <prvAddCurrentTaskToDelayedList+0xd4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3304      	adds	r3, #4
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fb1a 	bl	8000848 <uxListRemove>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10b      	bne.n	8002232 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	2201      	movs	r2, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4013      	ands	r3, r2
 800222e:	4a29      	ldr	r2, [pc, #164]	; (80022d4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002230:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d110      	bne.n	800225c <prvAddCurrentTaskToDelayedList+0x64>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	211b      	movs	r1, #27
 8002246:	4618      	mov	r0, r3
 8002248:	f002 fc34 	bl	8004ab4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3304      	adds	r3, #4
 8002252:	4619      	mov	r1, r3
 8002254:	4820      	ldr	r0, [pc, #128]	; (80022d8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002256:	f7fe fa9a 	bl	800078e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800225a:	e032      	b.n	80022c2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d20f      	bcs.n	8002294 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002274:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2104      	movs	r1, #4
 800227a:	4618      	mov	r0, r3
 800227c:	f002 fc1a 	bl	8004ab4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <prvAddCurrentTaskToDelayedList+0xe4>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3304      	adds	r3, #4
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f7fe faa2 	bl	80007d6 <vListInsert>
}
 8002292:	e016      	b.n	80022c2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2104      	movs	r1, #4
 800229a:	4618      	mov	r0, r3
 800229c:	f002 fc0a 	bl	8004ab4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3304      	adds	r3, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4610      	mov	r0, r2
 80022ae:	f7fe fa92 	bl	80007d6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <prvAddCurrentTaskToDelayedList+0xec>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d202      	bcs.n	80022c2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80022bc:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <prvAddCurrentTaskToDelayedList+0xec>)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	6013      	str	r3, [r2, #0]
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	240001a4 	.word	0x240001a4
 80022d0:	240000a0 	.word	0x240000a0
 80022d4:	240001a8 	.word	0x240001a8
 80022d8:	2400018c 	.word	0x2400018c
 80022dc:	2400015c 	.word	0x2400015c
 80022e0:	24000158 	.word	0x24000158
 80022e4:	240001c0 	.word	0x240001c0

080022e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3b04      	subs	r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002300:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3b04      	subs	r3, #4
 8002306:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f023 0201 	bic.w	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3b04      	subs	r3, #4
 8002316:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002318:	4a0c      	ldr	r2, [pc, #48]	; (800234c <pxPortInitialiseStack+0x64>)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3b14      	subs	r3, #20
 8002322:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3b04      	subs	r3, #4
 800232e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f06f 0202 	mvn.w	r2, #2
 8002336:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3b20      	subs	r3, #32
 800233c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800233e:	68fb      	ldr	r3, [r7, #12]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	08002351 	.word	0x08002351

08002350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <prvTaskExitError+0x5c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002362:	d00c      	beq.n	800237e <prvTaskExitError+0x2e>
        __asm volatile
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	b672      	cpsid	i
 800236a:	f383 8811 	msr	BASEPRI, r3
 800236e:	f3bf 8f6f 	isb	sy
 8002372:	f3bf 8f4f 	dsb	sy
 8002376:	b662      	cpsie	i
 8002378:	60fb      	str	r3, [r7, #12]
    }
 800237a:	bf00      	nop
 800237c:	e7fe      	b.n	800237c <prvTaskExitError+0x2c>
        __asm volatile
 800237e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002382:	b672      	cpsid	i
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	b662      	cpsie	i
 8002392:	60bb      	str	r3, [r7, #8]
    }
 8002394:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002396:	bf00      	nop
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0fc      	beq.n	8002398 <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	24000004 	.word	0x24000004

080023b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <pxCurrentTCBConst2>)
 80023b2:	6819      	ldr	r1, [r3, #0]
 80023b4:	6808      	ldr	r0, [r1, #0]
 80023b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ba:	f380 8809 	msr	PSP, r0
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f04f 0000 	mov.w	r0, #0
 80023c6:	f380 8811 	msr	BASEPRI, r0
 80023ca:	4770      	bx	lr
 80023cc:	f3af 8000 	nop.w

080023d0 <pxCurrentTCBConst2>:
 80023d0:	240000a0 	.word	0x240000a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop

080023d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80023d8:	4808      	ldr	r0, [pc, #32]	; (80023fc <prvPortStartFirstTask+0x24>)
 80023da:	6800      	ldr	r0, [r0, #0]
 80023dc:	6800      	ldr	r0, [r0, #0]
 80023de:	f380 8808 	msr	MSP, r0
 80023e2:	f04f 0000 	mov.w	r0, #0
 80023e6:	f380 8814 	msr	CONTROL, r0
 80023ea:	b662      	cpsie	i
 80023ec:	b661      	cpsie	f
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	df00      	svc	0
 80023f8:	bf00      	nop
 80023fa:	0000      	.short	0x0000
 80023fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop

08002404 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800240a:	4b37      	ldr	r3, [pc, #220]	; (80024e8 <xPortStartScheduler+0xe4>)
 800240c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	22ff      	movs	r2, #255	; 0xff
 800241a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <xPortStartScheduler+0xe8>)
 8002430:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002432:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <xPortStartScheduler+0xec>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002438:	e009      	b.n	800244e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800243a:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <xPortStartScheduler+0xec>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3b01      	subs	r3, #1
 8002440:	4a2b      	ldr	r2, [pc, #172]	; (80024f0 <xPortStartScheduler+0xec>)
 8002442:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	b2db      	uxtb	r3, r3
 800244c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b80      	cmp	r3, #128	; 0x80
 8002458:	d0ef      	beq.n	800243a <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800245a:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <xPortStartScheduler+0xec>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1c3 0307 	rsb	r3, r3, #7
 8002462:	2b04      	cmp	r3, #4
 8002464:	d00c      	beq.n	8002480 <xPortStartScheduler+0x7c>
        __asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	b672      	cpsid	i
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	b662      	cpsie	i
 800247a:	60bb      	str	r3, [r7, #8]
    }
 800247c:	bf00      	nop
 800247e:	e7fe      	b.n	800247e <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <xPortStartScheduler+0xec>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <xPortStartScheduler+0xec>)
 8002488:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <xPortStartScheduler+0xec>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002492:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <xPortStartScheduler+0xec>)
 8002494:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <xPortStartScheduler+0xf0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <xPortStartScheduler+0xf0>)
 80024a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a8:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <xPortStartScheduler+0xf0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <xPortStartScheduler+0xf0>)
 80024b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80024b4:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80024b6:	f000 f8e3 	bl	8002680 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <xPortStartScheduler+0xf4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80024c0:	f000 f902 	bl	80026c8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <xPortStartScheduler+0xf8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <xPortStartScheduler+0xf8>)
 80024ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80024ce:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80024d0:	f7ff ff82 	bl	80023d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80024d4:	f7ff fa92 	bl	80019fc <vTaskSwitchContext>
    prvTaskExitError();
 80024d8:	f7ff ff3a 	bl	8002350 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e400 	.word	0xe000e400
 80024ec:	240001cc 	.word	0x240001cc
 80024f0:	240001d0 	.word	0x240001d0
 80024f4:	e000ed20 	.word	0xe000ed20
 80024f8:	24000004 	.word	0x24000004
 80024fc:	e000ef34 	.word	0xe000ef34

08002500 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
        __asm volatile
 8002506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250a:	b672      	cpsid	i
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	b662      	cpsie	i
 800251a:	607b      	str	r3, [r7, #4]
    }
 800251c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <vPortEnterCritical+0x60>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <vPortEnterCritical+0x60>)
 8002526:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <vPortEnterCritical+0x60>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d111      	bne.n	8002554 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <vPortEnterCritical+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <vPortEnterCritical+0x54>
        __asm volatile
 800253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253e:	b672      	cpsid	i
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	b662      	cpsie	i
 800254e:	603b      	str	r3, [r7, #0]
    }
 8002550:	bf00      	nop
 8002552:	e7fe      	b.n	8002552 <vPortEnterCritical+0x52>
    }
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	24000004 	.word	0x24000004
 8002564:	e000ed04 	.word	0xe000ed04

08002568 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <vPortExitCritical+0x54>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <vPortExitCritical+0x28>
        __asm volatile
 8002576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257a:	b672      	cpsid	i
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	b662      	cpsie	i
 800258a:	607b      	str	r3, [r7, #4]
    }
 800258c:	bf00      	nop
 800258e:	e7fe      	b.n	800258e <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <vPortExitCritical+0x54>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3b01      	subs	r3, #1
 8002596:	4a09      	ldr	r2, [pc, #36]	; (80025bc <vPortExitCritical+0x54>)
 8002598:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <vPortExitCritical+0x54>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <vPortExitCritical+0x46>
 80025a2:	2300      	movs	r3, #0
 80025a4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80025ac:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	24000004 	.word	0x24000004

080025c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80025c0:	f3ef 8009 	mrs	r0, PSP
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <pxCurrentTCBConst>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	f01e 0f10 	tst.w	lr, #16
 80025d0:	bf08      	it	eq
 80025d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80025d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025da:	6010      	str	r0, [r2, #0]
 80025dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80025e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80025e4:	b672      	cpsid	i
 80025e6:	f380 8811 	msr	BASEPRI, r0
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	b662      	cpsie	i
 80025f4:	f7ff fa02 	bl	80019fc <vTaskSwitchContext>
 80025f8:	f04f 0000 	mov.w	r0, #0
 80025fc:	f380 8811 	msr	BASEPRI, r0
 8002600:	bc09      	pop	{r0, r3}
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	6808      	ldr	r0, [r1, #0]
 8002606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800260a:	f01e 0f10 	tst.w	lr, #16
 800260e:	bf08      	it	eq
 8002610:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002614:	f380 8809 	msr	PSP, r0
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop

08002620 <pxCurrentTCBConst>:
 8002620:	240000a0 	.word	0x240000a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop

08002628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
        __asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	b672      	cpsid	i
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	b662      	cpsie	i
 8002642:	607b      	str	r3, [r7, #4]
    }
 8002644:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002646:	f002 f8d9 	bl	80047fc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800264a:	f7ff f93b 	bl	80018c4 <xTaskIncrementTick>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002654:	f002 f930 	bl	80048b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <SysTick_Handler+0x54>)
 800265a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e001      	b.n	8002666 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8002662:	f002 f90d 	bl	8004880 <SEGGER_SYSVIEW_RecordExitISR>
 8002666:	2300      	movs	r3, #0
 8002668:	603b      	str	r3, [r7, #0]
        __asm volatile
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f383 8811 	msr	BASEPRI, r3
    }
 8002670:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000ed04 	.word	0xe000ed04

08002680 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <vPortSetupTimerInterrupt+0x34>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <vPortSetupTimerInterrupt+0x38>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002690:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <vPortSetupTimerInterrupt+0x3c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <vPortSetupTimerInterrupt+0x40>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	099b      	lsrs	r3, r3, #6
 800269c:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <vPortSetupTimerInterrupt+0x44>)
 800269e:	3b01      	subs	r3, #1
 80026a0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <vPortSetupTimerInterrupt+0x34>)
 80026a4:	2207      	movs	r2, #7
 80026a6:	601a      	str	r2, [r3, #0]
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000e010 	.word	0xe000e010
 80026b8:	e000e018 	.word	0xe000e018
 80026bc:	24000010 	.word	0x24000010
 80026c0:	10624dd3 	.word	0x10624dd3
 80026c4:	e000e014 	.word	0xe000e014

080026c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80026c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80026d8 <vPortEnableVFP+0x10>
 80026cc:	6801      	ldr	r1, [r0, #0]
 80026ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80026d2:	6001      	str	r1, [r0, #0]
 80026d4:	4770      	bx	lr
 80026d6:	0000      	.short	0x0000
 80026d8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop

080026e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80026e6:	f3ef 8305 	mrs	r3, IPSR
 80026ea:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	d916      	bls.n	8002720 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80026f2:	4a19      	ldr	r2, [pc, #100]	; (8002758 <vPortValidateInterruptPriority+0x78>)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <vPortValidateInterruptPriority+0x7c>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	7afa      	ldrb	r2, [r7, #11]
 8002702:	429a      	cmp	r2, r3
 8002704:	d20c      	bcs.n	8002720 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270a:	b672      	cpsid	i
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	b662      	cpsie	i
 800271a:	607b      	str	r3, [r7, #4]
    }
 800271c:	bf00      	nop
 800271e:	e7fe      	b.n	800271e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <vPortValidateInterruptPriority+0x80>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <vPortValidateInterruptPriority+0x84>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d90c      	bls.n	800274a <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	b672      	cpsid	i
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	b662      	cpsie	i
 8002744:	603b      	str	r3, [r7, #0]
    }
 8002746:	bf00      	nop
 8002748:	e7fe      	b.n	8002748 <vPortValidateInterruptPriority+0x68>
    }
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e3f0 	.word	0xe000e3f0
 800275c:	240001cc 	.word	0x240001cc
 8002760:	e000ed0c 	.word	0xe000ed0c
 8002764:	240001d0 	.word	0x240001d0

08002768 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002774:	f7fe fff2 	bl	800175c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002778:	4b68      	ldr	r3, [pc, #416]	; (800291c <pvPortMalloc+0x1b4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002780:	f000 f93e 	bl	8002a00 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002784:	4b66      	ldr	r3, [pc, #408]	; (8002920 <pvPortMalloc+0x1b8>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	f040 80ab 	bne.w	80028e8 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02f      	beq.n	80027f8 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002798:	2208      	movs	r2, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d229      	bcs.n	80027f8 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 80027a4:	2208      	movs	r2, #8
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d023      	beq.n	80027fe <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f023 0307 	bic.w	r3, r3, #7
 80027bc:	3308      	adds	r3, #8
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d216      	bcs.n	80027f2 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	3308      	adds	r3, #8
 80027cc:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d012      	beq.n	80027fe <pvPortMalloc+0x96>
        __asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	b672      	cpsid	i
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	b662      	cpsie	i
 80027ec:	617b      	str	r3, [r7, #20]
    }
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80027f6:	e002      	b.n	80027fe <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	e000      	b.n	8002800 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80027fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d070      	beq.n	80028e8 <pvPortMalloc+0x180>
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <pvPortMalloc+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	429a      	cmp	r2, r3
 800280e:	d86b      	bhi.n	80028e8 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002810:	4b45      	ldr	r3, [pc, #276]	; (8002928 <pvPortMalloc+0x1c0>)
 8002812:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002814:	4b44      	ldr	r3, [pc, #272]	; (8002928 <pvPortMalloc+0x1c0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800281a:	e004      	b.n	8002826 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	d903      	bls.n	8002838 <pvPortMalloc+0xd0>
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f1      	bne.n	800281c <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002838:	4b38      	ldr	r3, [pc, #224]	; (800291c <pvPortMalloc+0x1b4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283e:	429a      	cmp	r2, r3
 8002840:	d052      	beq.n	80028e8 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2208      	movs	r2, #8
 8002848:	4413      	add	r3, r2
 800284a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	1ad2      	subs	r2, r2, r3
 800285c:	2308      	movs	r3, #8
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	429a      	cmp	r2, r3
 8002862:	d921      	bls.n	80028a8 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00c      	beq.n	8002890 <pvPortMalloc+0x128>
        __asm volatile
 8002876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287a:	b672      	cpsid	i
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	b662      	cpsie	i
 800288a:	613b      	str	r3, [r7, #16]
    }
 800288c:	bf00      	nop
 800288e:	e7fe      	b.n	800288e <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	1ad2      	subs	r2, r2, r3
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028a2:	69b8      	ldr	r0, [r7, #24]
 80028a4:	f000 f90e 	bl	8002ac4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028a8:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <pvPortMalloc+0x1bc>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <pvPortMalloc+0x1bc>)
 80028b4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <pvPortMalloc+0x1bc>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <pvPortMalloc+0x1c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d203      	bcs.n	80028ca <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <pvPortMalloc+0x1bc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a19      	ldr	r2, [pc, #100]	; (800292c <pvPortMalloc+0x1c4>)
 80028c8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4b14      	ldr	r3, [pc, #80]	; (8002920 <pvPortMalloc+0x1b8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80028de:	4b14      	ldr	r3, [pc, #80]	; (8002930 <pvPortMalloc+0x1c8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	4a12      	ldr	r2, [pc, #72]	; (8002930 <pvPortMalloc+0x1c8>)
 80028e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80028e8:	f7fe ff46 	bl	8001778 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <pvPortMalloc+0x1a8>
        __asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	b672      	cpsid	i
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	b662      	cpsie	i
 800290a:	60fb      	str	r3, [r7, #12]
    }
 800290c:	bf00      	nop
 800290e:	e7fe      	b.n	800290e <pvPortMalloc+0x1a6>
    return pvReturn;
 8002910:	69fb      	ldr	r3, [r7, #28]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3728      	adds	r7, #40	; 0x28
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	240069dc 	.word	0x240069dc
 8002920:	240069f0 	.word	0x240069f0
 8002924:	240069e0 	.word	0x240069e0
 8002928:	240069d4 	.word	0x240069d4
 800292c:	240069e4 	.word	0x240069e4
 8002930:	240069e8 	.word	0x240069e8

08002934 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d051      	beq.n	80029ea <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002946:	2308      	movs	r3, #8
 8002948:	425b      	negs	r3, r3
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4413      	add	r3, r2
 800294e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <vPortFree+0xc0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10c      	bne.n	800297c <vPortFree+0x48>
        __asm volatile
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	b672      	cpsid	i
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	b662      	cpsie	i
 8002976:	60fb      	str	r3, [r7, #12]
    }
 8002978:	bf00      	nop
 800297a:	e7fe      	b.n	800297a <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00c      	beq.n	800299e <vPortFree+0x6a>
        __asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	b672      	cpsid	i
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	b662      	cpsie	i
 8002998:	60bb      	str	r3, [r7, #8]
    }
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <vPortFree+0xc0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01e      	beq.n	80029ea <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d11a      	bne.n	80029ea <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <vPortFree+0xc0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	43db      	mvns	r3, r3
 80029be:	401a      	ands	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80029c4:	f7fe feca 	bl	800175c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <vPortFree+0xc4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <vPortFree+0xc4>)
 80029d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80029d6:	6938      	ldr	r0, [r7, #16]
 80029d8:	f000 f874 	bl	8002ac4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80029dc:	4b07      	ldr	r3, [pc, #28]	; (80029fc <vPortFree+0xc8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	4a06      	ldr	r2, [pc, #24]	; (80029fc <vPortFree+0xc8>)
 80029e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80029e6:	f7fe fec7 	bl	8001778 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	240069f0 	.word	0x240069f0
 80029f8:	240069e0 	.word	0x240069e0
 80029fc:	240069ec 	.word	0x240069ec

08002a00 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a06:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002a0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <prvHeapInit+0xac>)
 8002a0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00c      	beq.n	8002a34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3307      	adds	r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0307 	bic.w	r3, r3, #7
 8002a26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <prvHeapInit+0xac>)
 8002a30:	4413      	add	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a38:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <prvHeapInit+0xb0>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <prvHeapInit+0xb0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4413      	add	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 0307 	bic.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <prvHeapInit+0xb4>)
 8002a60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002a62:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <prvHeapInit+0xb4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2200      	movs	r2, #0
 8002a68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <prvHeapInit+0xb4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	1ad2      	subs	r2, r2, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <prvHeapInit+0xb4>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <prvHeapInit+0xb8>)
 8002a8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a09      	ldr	r2, [pc, #36]	; (8002abc <prvHeapInit+0xbc>)
 8002a96:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <prvHeapInit+0xc0>)
 8002a9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a9e:	601a      	str	r2, [r3, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	240001d4 	.word	0x240001d4
 8002ab0:	240069d4 	.word	0x240069d4
 8002ab4:	240069dc 	.word	0x240069dc
 8002ab8:	240069e4 	.word	0x240069e4
 8002abc:	240069e0 	.word	0x240069e0
 8002ac0:	240069f0 	.word	0x240069f0

08002ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002acc:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <prvInsertBlockIntoFreeList+0xac>)
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e002      	b.n	8002ad8 <prvInsertBlockIntoFreeList+0x14>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d8f7      	bhi.n	8002ad2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	4413      	add	r3, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d108      	bne.n	8002b06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	441a      	add	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	441a      	add	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d118      	bne.n	8002b4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <prvInsertBlockIntoFreeList+0xb0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d00d      	beq.n	8002b42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	441a      	add	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e008      	b.n	8002b54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b42:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <prvInsertBlockIntoFreeList+0xb0>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e003      	b.n	8002b54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d002      	beq.n	8002b62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	240069d4 	.word	0x240069d4
 8002b74:	240069dc 	.word	0x240069dc

08002b78 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002b7c:	4803      	ldr	r0, [pc, #12]	; (8002b8c <_cbSendSystemDesc+0x14>)
 8002b7e:	f001 fde7 	bl	8004750 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002b82:	4803      	ldr	r0, [pc, #12]	; (8002b90 <_cbSendSystemDesc+0x18>)
 8002b84:	f001 fde4 	bl	8004750 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	0800dd28 	.word	0x0800dd28
 8002b90:	0800dd58 	.word	0x0800dd58

08002b94 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <SEGGER_SYSVIEW_Conf+0x24>)
 8002ba2:	4a06      	ldr	r2, [pc, #24]	; (8002bbc <SEGGER_SYSVIEW_Conf+0x28>)
 8002ba4:	f001 f94e 	bl	8003e44 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002ba8:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 8002bac:	f001 f990 	bl	8003ed0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002bb0:	bf00      	nop
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	24000010 	.word	0x24000010
 8002bb8:	08002b79 	.word	0x08002b79
 8002bbc:	0800df0c 	.word	0x0800df0c

08002bc0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	e033      	b.n	8002c34 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002bcc:	491e      	ldr	r1, [pc, #120]	; (8002c48 <_cbSendTaskList+0x88>)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	491a      	ldr	r1, [pc, #104]	; (8002c48 <_cbSendTaskList+0x88>)
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3304      	adds	r3, #4
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	4c16      	ldr	r4, [pc, #88]	; (8002c48 <_cbSendTaskList+0x88>)
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4423      	add	r3, r4
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	681c      	ldr	r4, [r3, #0]
 8002c00:	4d11      	ldr	r5, [pc, #68]	; (8002c48 <_cbSendTaskList+0x88>)
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	442b      	add	r3, r5
 8002c0e:	330c      	adds	r3, #12
 8002c10:	681d      	ldr	r5, [r3, #0]
 8002c12:	4e0d      	ldr	r6, [pc, #52]	; (8002c48 <_cbSendTaskList+0x88>)
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4433      	add	r3, r6
 8002c20:	3310      	adds	r3, #16
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	462b      	mov	r3, r5
 8002c28:	4622      	mov	r2, r4
 8002c2a:	f000 f8bd 	bl	8002da8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3301      	adds	r3, #1
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <_cbSendTaskList+0x8c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d3c6      	bcc.n	8002bcc <_cbSendTaskList+0xc>
  }
}
 8002c3e:	bf00      	nop
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c48:	240069f4 	.word	0x240069f4
 8002c4c:	24006a94 	.word	0x24006a94

08002c50 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002c58:	f7fe fe22 	bl	80018a0 <xTaskGetTickCountFromISR>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2200      	movs	r2, #0
 8002c60:	469a      	mov	sl, r3
 8002c62:	4693      	mov	fp, r2
 8002c64:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	f04f 0a00 	mov.w	sl, #0
 8002c74:	f04f 0b00 	mov.w	fp, #0
 8002c78:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002c7c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002c80:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002c84:	4652      	mov	r2, sl
 8002c86:	465b      	mov	r3, fp
 8002c88:	1a14      	subs	r4, r2, r0
 8002c8a:	eb63 0501 	sbc.w	r5, r3, r1
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	00ab      	lsls	r3, r5, #2
 8002c98:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002c9c:	00a2      	lsls	r2, r4, #2
 8002c9e:	4614      	mov	r4, r2
 8002ca0:	461d      	mov	r5, r3
 8002ca2:	eb14 0800 	adds.w	r8, r4, r0
 8002ca6:	eb45 0901 	adc.w	r9, r5, r1
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cbe:	4690      	mov	r8, r2
 8002cc0:	4699      	mov	r9, r3
 8002cc2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002cd8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002ce6:	2205      	movs	r2, #5
 8002ce8:	492b      	ldr	r1, [pc, #172]	; (8002d98 <SYSVIEW_AddTask+0xc0>)
 8002cea:	68b8      	ldr	r0, [r7, #8]
 8002cec:	f009 fde4 	bl	800c8b8 <memcmp>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d04b      	beq.n	8002d8e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <SYSVIEW_AddTask+0xc4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b07      	cmp	r3, #7
 8002cfc:	d903      	bls.n	8002d06 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002cfe:	4828      	ldr	r0, [pc, #160]	; (8002da0 <SYSVIEW_AddTask+0xc8>)
 8002d00:	f002 f824 	bl	8004d4c <SEGGER_SYSVIEW_Warn>
    return;
 8002d04:	e044      	b.n	8002d90 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002d06:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <SYSVIEW_AddTask+0xc4>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4926      	ldr	r1, [pc, #152]	; (8002da4 <SYSVIEW_AddTask+0xcc>)
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <SYSVIEW_AddTask+0xc4>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4921      	ldr	r1, [pc, #132]	; (8002da4 <SYSVIEW_AddTask+0xcc>)
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <SYSVIEW_AddTask+0xc4>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	491b      	ldr	r1, [pc, #108]	; (8002da4 <SYSVIEW_AddTask+0xcc>)
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	3308      	adds	r3, #8
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <SYSVIEW_AddTask+0xc4>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4916      	ldr	r1, [pc, #88]	; (8002da4 <SYSVIEW_AddTask+0xcc>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	330c      	adds	r3, #12
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <SYSVIEW_AddTask+0xc4>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4910      	ldr	r1, [pc, #64]	; (8002da4 <SYSVIEW_AddTask+0xcc>)
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3310      	adds	r3, #16
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <SYSVIEW_AddTask+0xc4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3301      	adds	r3, #1
 8002d78:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <SYSVIEW_AddTask+0xc4>)
 8002d7a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f80e 	bl	8002da8 <SYSVIEW_SendTaskInfo>
 8002d8c:	e000      	b.n	8002d90 <SYSVIEW_AddTask+0xb8>
    return;
 8002d8e:	bf00      	nop

}
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	0800dd68 	.word	0x0800dd68
 8002d9c:	24006a94 	.word	0x24006a94
 8002da0:	0800dd70 	.word	0x0800dd70
 8002da4:	240069f4 	.word	0x240069f4

08002da8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	; 0x28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002db6:	f107 0314 	add.w	r3, r7, #20
 8002dba:	2214      	movs	r2, #20
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f009 fd98 	bl	800c8f4 <memset>
  TaskInfo.TaskID     = TaskID;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 fbbf 	bl	8004560 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002de2:	bf00      	nop
 8002de4:	3728      	adds	r7, #40	; 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	db0b      	blt.n	8002e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	4907      	ldr	r1, [pc, #28]	; (8002e24 <__NVIC_EnableIRQ+0x38>)
 8002e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000e100 	.word	0xe000e100

08002e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	db0a      	blt.n	8002e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	490c      	ldr	r1, [pc, #48]	; (8002e74 <__NVIC_SetPriority+0x4c>)
 8002e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e50:	e00a      	b.n	8002e68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4908      	ldr	r1, [pc, #32]	; (8002e78 <__NVIC_SetPriority+0x50>)
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	3b04      	subs	r3, #4
 8002e60:	0112      	lsls	r2, r2, #4
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	440b      	add	r3, r1
 8002e66:	761a      	strb	r2, [r3, #24]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000e100 	.word	0xe000e100
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8002e82:	f001 ffbf 	bl	8004e04 <SEGGER_SYSVIEW_IsStarted>
 8002e86:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8002e8e:	f001 f9eb 	bl	8004268 <SEGGER_SYSVIEW_Start>
  }
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <_cbOnUARTRx+0x3c>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d806      	bhi.n	8002ebc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <_cbOnUARTRx+0x3c>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <_cbOnUARTRx+0x3c>)
 8002eb8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002eba:	e009      	b.n	8002ed0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002ebc:	f7ff ffde 	bl	8002e7c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <_cbOnUARTRx+0x3c>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	1dfb      	adds	r3, r7, #7
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f000 fbee 	bl	80036ac <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002ed0:	bf00      	nop
}
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	24000008 	.word	0x24000008

08002edc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <_cbOnUARTTx+0x5c>)
 8002ee6:	785b      	ldrb	r3, [r3, #1]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d80f      	bhi.n	8002f0c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <_cbOnUARTTx+0x5c>)
 8002eee:	785b      	ldrb	r3, [r3, #1]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <_cbOnUARTTx+0x60>)
 8002ef4:	5c9a      	ldrb	r2, [r3, r2]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8002efa:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <_cbOnUARTTx+0x5c>)
 8002efc:	785b      	ldrb	r3, [r3, #1]
 8002efe:	3301      	adds	r3, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <_cbOnUARTTx+0x5c>)
 8002f04:	705a      	strb	r2, [r3, #1]
    r = 1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
    goto Done;
 8002f0a:	e00f      	b.n	8002f2c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <_cbOnUARTTx+0x5c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fa1d 	bl	8003354 <SEGGER_RTT_ReadUpBufferNoLock>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da02      	bge.n	8002f2a <_cbOnUARTTx+0x4e>
    r = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	e000      	b.n	8002f2c <_cbOnUARTTx+0x50>
  }
Done:
 8002f2a:	bf00      	nop
  return r;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	24000008 	.word	0x24000008
 8002f3c:	0800df14 	.word	0x0800df14

08002f40 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8002f48:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <SEGGER_UART_init+0x1c>)
 8002f4a:	4905      	ldr	r1, [pc, #20]	; (8002f60 <SEGGER_UART_init+0x20>)
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f865 	bl	800301c <HIF_UART_Init>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	08002e9d 	.word	0x08002e9d
 8002f60:	08002edd 	.word	0x08002edd

08002f64 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <USART2_IRQHandler+0x80>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d011      	beq.n	8002f9e <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <USART2_IRQHandler+0x84>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 030b 	and.w	r3, r3, #11
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d108      	bne.n	8002f9e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <USART2_IRQHandler+0x88>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002f94:	4b15      	ldr	r3, [pc, #84]	; (8002fec <USART2_IRQHandler+0x88>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	79fa      	ldrb	r2, [r7, #7]
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01a      	beq.n	8002fde <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <USART2_IRQHandler+0x8c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d015      	beq.n	8002fdc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <USART2_IRQHandler+0x8c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	1dfa      	adds	r2, r7, #7
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4798      	blx	r3
 8002fba:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <USART2_IRQHandler+0x90>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <USART2_IRQHandler+0x90>)
 8002fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e006      	b.n	8002fde <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <USART2_IRQHandler+0x80>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8002fd4:	79fa      	ldrb	r2, [r7, #7]
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <USART2_IRQHandler+0x94>)
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e000      	b.n	8002fde <USART2_IRQHandler+0x7a>
      return;
 8002fdc:	bf00      	nop
    }
  }
}
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	4000441c 	.word	0x4000441c
 8002fe8:	40004424 	.word	0x40004424
 8002fec:	24006a98 	.word	0x24006a98
 8002ff0:	24006a9c 	.word	0x24006a9c
 8002ff4:	40004400 	.word	0x40004400
 8002ff8:	40004428 	.word	0x40004428

08002ffc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40004400 	.word	0x40004400

0800301c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003028:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <HIF_UART_Init+0xc8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a2d      	ldr	r2, [pc, #180]	; (80030e4 <HIF_UART_Init+0xc8>)
 800302e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003032:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 8003034:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HIF_UART_Init+0xcc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2b      	ldr	r2, [pc, #172]	; (80030e8 <HIF_UART_Init+0xcc>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003040:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <HIF_UART_Init+0xd0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800304c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003054:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003056:	4a25      	ldr	r2, [pc, #148]	; (80030ec <HIF_UART_Init+0xd0>)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HIF_UART_Init+0xd4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003068:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003070:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003072:	4a1f      	ldr	r2, [pc, #124]	; (80030f0 <HIF_UART_Init+0xd4>)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003078:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <HIF_UART_Init+0xd8>)
 800307a:	f248 022d 	movw	r2, #32813	; 0x802d
 800307e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HIF_UART_Init+0xdc>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003086:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HIF_UART_Init+0xe0>)
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003092:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HIF_UART_Init+0xe4>)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	3301      	adds	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030aa:	d302      	bcc.n	80030b2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80030ac:	f640 73ff 	movw	r3, #4095	; 0xfff
 80030b0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d004      	beq.n	80030c2 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	4a11      	ldr	r2, [pc, #68]	; (8003104 <HIF_UART_Init+0xe8>)
 80030be:	b29b      	uxth	r3, r3
 80030c0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80030c2:	4a11      	ldr	r2, [pc, #68]	; (8003108 <HIF_UART_Init+0xec>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80030c8:	4a10      	ldr	r2, [pc, #64]	; (800310c <HIF_UART_Init+0xf0>)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80030ce:	2106      	movs	r1, #6
 80030d0:	2026      	movs	r0, #38	; 0x26
 80030d2:	f7ff fea9 	bl	8002e28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80030d6:	2026      	movs	r0, #38	; 0x26
 80030d8:	f7ff fe88 	bl	8002dec <__NVIC_EnableIRQ>
}
 80030dc:	bf00      	nop
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	580244e8 	.word	0x580244e8
 80030e8:	580244e0 	.word	0x580244e0
 80030ec:	58020020 	.word	0x58020020
 80030f0:	58020000 	.word	0x58020000
 80030f4:	40004400 	.word	0x40004400
 80030f8:	40004404 	.word	0x40004404
 80030fc:	40004408 	.word	0x40004408
 8003100:	0e4e1c00 	.word	0x0e4e1c00
 8003104:	4000440c 	.word	0x4000440c
 8003108:	24006a98 	.word	0x24006a98
 800310c:	24006a9c 	.word	0x24006a9c

08003110 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <_DoInit+0xa0>)
 8003118:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800311a:	22a8      	movs	r2, #168	; 0xa8
 800311c:	2100      	movs	r1, #0
 800311e:	6838      	ldr	r0, [r7, #0]
 8003120:	f009 fbe8 	bl	800c8f4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2203      	movs	r2, #3
 8003128:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2203      	movs	r2, #3
 800312e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <_DoInit+0xa4>)
 8003134:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <_DoInit+0xa8>)
 800313a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003142:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2200      	movs	r2, #0
 800314e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	4a16      	ldr	r2, [pc, #88]	; (80031b4 <_DoInit+0xa4>)
 800315a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4a17      	ldr	r2, [pc, #92]	; (80031bc <_DoInit+0xac>)
 8003160:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2210      	movs	r2, #16
 8003166:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2200      	movs	r2, #0
 8003172:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800317a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	e00c      	b.n	800319e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f1c3 030f 	rsb	r3, r3, #15
 800318a:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <_DoInit+0xb0>)
 800318c:	5cd1      	ldrb	r1, [r2, r3]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	460a      	mov	r2, r1
 8003196:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3301      	adds	r3, #1
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d9ef      	bls.n	8003184 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80031a4:	f3bf 8f5f 	dmb	sy
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	24006aa0 	.word	0x24006aa0
 80031b4:	0800ddc0 	.word	0x0800ddc0
 80031b8:	24006b48 	.word	0x24006b48
 80031bc:	24006f48 	.word	0x24006f48
 80031c0:	0800df18 	.word	0x0800df18

080031c4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80031d0:	2300      	movs	r3, #0
 80031d2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d905      	bls.n	80031f4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
 80031f2:	e007      	b.n	8003204 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	69b9      	ldr	r1, [r7, #24]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	1acb      	subs	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	3b01      	subs	r3, #1
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320e:	4293      	cmp	r3, r2
 8003210:	bf28      	it	cs
 8003212:	4613      	movcs	r3, r2
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4293      	cmp	r3, r2
 800321c:	bf28      	it	cs
 800321e:	4613      	movcs	r3, r2
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800322c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	6978      	ldr	r0, [r7, #20]
 8003232:	f009 fb51 	bl	800c8d8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003236:	6a3a      	ldr	r2, [r7, #32]
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	4413      	add	r3, r2
 800323c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	4413      	add	r3, r2
 8003244:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	4413      	add	r3, r2
 8003254:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	429a      	cmp	r2, r3
 800325e:	d101      	bne.n	8003264 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003264:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1b2      	bne.n	80031da <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003274:	6a3b      	ldr	r3, [r7, #32]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3728      	adds	r7, #40	; 0x28
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800327e:	b580      	push	{r7, lr}
 8003280:	b088      	sub	sp, #32
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d911      	bls.n	80032c6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	4413      	add	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	6938      	ldr	r0, [r7, #16]
 80032b2:	f009 fb11 	bl	800c8d8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80032b6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	441a      	add	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80032c4:	e01f      	b.n	8003306 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	6938      	ldr	r0, [r7, #16]
 80032da:	f009 fafd 	bl	800c8d8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4413      	add	r3, r2
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4619      	mov	r1, r3
 80032f6:	6938      	ldr	r0, [r7, #16]
 80032f8:	f009 faee 	bl	800c8d8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80032fc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	60da      	str	r2, [r3, #12]
}
 8003306:	bf00      	nop
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800330e:	b480      	push	{r7}
 8003310:	b087      	sub	sp, #28
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	429a      	cmp	r2, r3
 8003328:	d808      	bhi.n	800333c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad2      	subs	r2, r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	3b01      	subs	r3, #1
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e004      	b.n	8003346 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003346:	697b      	ldr	r3, [r7, #20]
}
 8003348:	4618      	mov	r0, r3
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	; 0x30
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003360:	4b3e      	ldr	r3, [pc, #248]	; (800345c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003362:	623b      	str	r3, [r7, #32]
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800336e:	f7ff fecf 	bl	8003110 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4a37      	ldr	r2, [pc, #220]	; (800345c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003380:	4413      	add	r3, r2
 8003382:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003394:	2300      	movs	r3, #0
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	429a      	cmp	r2, r3
 800339e:	d92b      	bls.n	80033f8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4293      	cmp	r3, r2
 80033b0:	bf28      	it	cs
 80033b2:	4613      	movcs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	4413      	add	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	6939      	ldr	r1, [r7, #16]
 80033c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033c6:	f009 fa87 	bl	800c8d8 <memcpy>
    NumBytesRead += NumBytesRem;
 80033ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	4413      	add	r3, r2
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80033d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	4413      	add	r3, r2
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80033e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4413      	add	r3, r2
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d101      	bne.n	80033f8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4293      	cmp	r3, r2
 8003406:	bf28      	it	cs
 8003408:	4613      	movcs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d019      	beq.n	8003446 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	4413      	add	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	6939      	ldr	r1, [r7, #16]
 8003420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003422:	f009 fa59 	bl	800c8d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4413      	add	r3, r2
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800342e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	4413      	add	r3, r2
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800343e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	4413      	add	r3, r2
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003450:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003454:	4618      	mov	r0, r3
 8003456:	3730      	adds	r7, #48	; 0x30
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	24006aa0 	.word	0x24006aa0

08003460 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b08c      	sub	sp, #48	; 0x30
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800346c:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <SEGGER_RTT_ReadNoLock+0x108>)
 800346e:	623b      	str	r3, [r7, #32]
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <SEGGER_RTT_ReadNoLock+0x1e>
 800347a:	f7ff fe49 	bl	8003110 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	3360      	adds	r3, #96	; 0x60
 800348a:	4a37      	ldr	r2, [pc, #220]	; (8003568 <SEGGER_RTT_ReadNoLock+0x108>)
 800348c:	4413      	add	r3, r2
 800348e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80034a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d92b      	bls.n	8003504 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4293      	cmp	r3, r2
 80034bc:	bf28      	it	cs
 80034be:	4613      	movcs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c8:	4413      	add	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	6939      	ldr	r1, [r7, #16]
 80034d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034d2:	f009 fa01 	bl	800c8d8 <memcpy>
    NumBytesRead += NumBytesRem;
 80034d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	4413      	add	r3, r2
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80034de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	4413      	add	r3, r2
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80034ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	4413      	add	r3, r2
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d101      	bne.n	8003504 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003500:	2300      	movs	r3, #0
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4293      	cmp	r3, r2
 8003512:	bf28      	it	cs
 8003514:	4613      	movcs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d019      	beq.n	8003552 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	4413      	add	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	6939      	ldr	r1, [r7, #16]
 800352c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800352e:	f009 f9d3 	bl	800c8d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	4413      	add	r3, r2
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800353a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	4413      	add	r3, r2
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800354a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	4413      	add	r3, r2
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003560:	4618      	mov	r0, r3
 8003562:	3730      	adds	r7, #48	; 0x30
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	24006aa0 	.word	0x24006aa0

0800356c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	3360      	adds	r3, #96	; 0x60
 8003588:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800358a:	4413      	add	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d029      	beq.n	80035ea <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003596:	2b02      	cmp	r3, #2
 8003598:	d82e      	bhi.n	80035f8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d013      	beq.n	80035ca <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80035a2:	e029      	b.n	80035f8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80035a4:	6978      	ldr	r0, [r7, #20]
 80035a6:	f7ff feb2 	bl	800330e <_GetAvailWriteSpace>
 80035aa:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d202      	bcs.n	80035ba <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80035b8:	e021      	b.n	80035fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	69b9      	ldr	r1, [r7, #24]
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f7ff fe5b 	bl	800327e <_WriteNoCheck>
    break;
 80035c8:	e019      	b.n	80035fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff fe9f 	bl	800330e <_GetAvailWriteSpace>
 80035d0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4293      	cmp	r3, r2
 80035d8:	bf28      	it	cs
 80035da:	4613      	movcs	r3, r2
 80035dc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	69b9      	ldr	r1, [r7, #24]
 80035e2:	6978      	ldr	r0, [r7, #20]
 80035e4:	f7ff fe4b 	bl	800327e <_WriteNoCheck>
    break;
 80035e8:	e009      	b.n	80035fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	69b9      	ldr	r1, [r7, #24]
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f7ff fde8 	bl	80031c4 <_WriteBlocking>
 80035f4:	61f8      	str	r0, [r7, #28]
    break;
 80035f6:	e002      	b.n	80035fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
    break;
 80035fc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80035fe:	69fb      	ldr	r3, [r7, #28]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	24006aa0 	.word	0x24006aa0

0800360c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800362a:	4413      	add	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d029      	beq.n	800368a <SEGGER_RTT_WriteNoLock+0x7e>
 8003636:	2b02      	cmp	r3, #2
 8003638:	d82e      	bhi.n	8003698 <SEGGER_RTT_WriteNoLock+0x8c>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <SEGGER_RTT_WriteNoLock+0x38>
 800363e:	2b01      	cmp	r3, #1
 8003640:	d013      	beq.n	800366a <SEGGER_RTT_WriteNoLock+0x5e>
 8003642:	e029      	b.n	8003698 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003644:	6978      	ldr	r0, [r7, #20]
 8003646:	f7ff fe62 	bl	800330e <_GetAvailWriteSpace>
 800364a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	d202      	bcs.n	800365a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003658:	e021      	b.n	800369e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	69b9      	ldr	r1, [r7, #24]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff fe0b 	bl	800327e <_WriteNoCheck>
    break;
 8003668:	e019      	b.n	800369e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800366a:	6978      	ldr	r0, [r7, #20]
 800366c:	f7ff fe4f 	bl	800330e <_GetAvailWriteSpace>
 8003670:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4293      	cmp	r3, r2
 8003678:	bf28      	it	cs
 800367a:	4613      	movcs	r3, r2
 800367c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	6978      	ldr	r0, [r7, #20]
 8003684:	f7ff fdfb 	bl	800327e <_WriteNoCheck>
    break;
 8003688:	e009      	b.n	800369e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	69b9      	ldr	r1, [r7, #24]
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7ff fd98 	bl	80031c4 <_WriteBlocking>
 8003694:	61f8      	str	r0, [r7, #28]
    break;
 8003696:	e002      	b.n	800369e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
    break;
 800369c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800369e:	69fb      	ldr	r3, [r7, #28]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	24006aa0 	.word	0x24006aa0

080036ac <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <SEGGER_RTT_WriteDownBuffer+0x1e>
 80036c6:	f7ff fd23 	bl	8003110 <_DoInit>
  SEGGER_RTT_LOCK();
 80036ca:	f3ef 8311 	mrs	r3, BASEPRI
 80036ce:	f04f 0120 	mov.w	r1, #32
 80036d2:	f381 8811 	msr	BASEPRI, r1
 80036d6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7ff ff45 	bl	800356c <SEGGER_RTT_WriteDownBufferNoLock>
 80036e2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80036ea:	697b      	ldr	r3, [r7, #20]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3720      	adds	r7, #32
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	24006aa0 	.word	0x24006aa0

080036f8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <SEGGER_RTT_Write+0x48>)
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <SEGGER_RTT_Write+0x1e>
 8003712:	f7ff fcfd 	bl	8003110 <_DoInit>
  SEGGER_RTT_LOCK();
 8003716:	f3ef 8311 	mrs	r3, BASEPRI
 800371a:	f04f 0120 	mov.w	r1, #32
 800371e:	f381 8811 	msr	BASEPRI, r1
 8003722:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff ff6f 	bl	800360c <SEGGER_RTT_WriteNoLock>
 800372e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003736:	697b      	ldr	r3, [r7, #20]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	24006aa0 	.word	0x24006aa0

08003744 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003752:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003760:	f7ff fcd6 	bl	8003110 <_DoInit>
  SEGGER_RTT_LOCK();
 8003764:	f3ef 8311 	mrs	r3, BASEPRI
 8003768:	f04f 0120 	mov.w	r1, #32
 800376c:	f381 8811 	msr	BASEPRI, r1
 8003770:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003772:	4b35      	ldr	r3, [pc, #212]	; (8003848 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003774:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800377a:	6939      	ldr	r1, [r7, #16]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	440b      	add	r3, r1
 800378a:	3304      	adds	r3, #4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3301      	adds	r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	429a      	cmp	r2, r3
 80037a0:	dbeb      	blt.n	800377a <SEGGER_RTT_AllocUpBuffer+0x36>
 80037a2:	e000      	b.n	80037a6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80037a4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	da3f      	bge.n	8003830 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80037b0:	6939      	ldr	r1, [r7, #16]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	440b      	add	r3, r1
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80037c4:	6939      	ldr	r1, [r7, #16]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	440b      	add	r3, r1
 80037d4:	3304      	adds	r3, #4
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80037da:	6939      	ldr	r1, [r7, #16]
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	440b      	add	r3, r1
 80037e8:	3320      	adds	r3, #32
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80037ee:	6939      	ldr	r1, [r7, #16]
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	440b      	add	r3, r1
 80037fc:	3328      	adds	r3, #40	; 0x28
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003802:	6939      	ldr	r1, [r7, #16]
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	440b      	add	r3, r1
 8003810:	3324      	adds	r3, #36	; 0x24
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003816:	6939      	ldr	r1, [r7, #16]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	440b      	add	r3, r1
 8003824:	332c      	adds	r3, #44	; 0x2c
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800382a:	f3bf 8f5f 	dmb	sy
 800382e:	e002      	b.n	8003836 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003830:	f04f 33ff 	mov.w	r3, #4294967295
 8003834:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800383c:	69fb      	ldr	r3, [r7, #28]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	24006aa0 	.word	0x24006aa0

0800384c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800385a:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003868:	f7ff fc52 	bl	8003110 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800386c:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800386e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d82c      	bhi.n	80038d0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003876:	f3ef 8311 	mrs	r3, BASEPRI
 800387a:	f04f 0120 	mov.w	r1, #32
 800387e:	f381 8811 	msr	BASEPRI, r1
 8003882:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	3360      	adds	r3, #96	; 0x60
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00e      	beq.n	80038ba <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2200      	movs	r2, #0
 80038b2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2200      	movs	r2, #0
 80038b8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038be:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80038c0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
 80038ce:	e002      	b.n	80038d6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3728      	adds	r7, #40	; 0x28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	24006aa0 	.word	0x24006aa0

080038e4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00f      	beq.n	800391a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80038fa:	e002      	b.n	8003902 <_EncodeStr+0x1e>
      Len++;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	3301      	adds	r3, #1
 8003900:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f6      	bne.n	80038fc <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d901      	bls.n	800391a <_EncodeStr+0x36>
      Len = Limit;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2bfe      	cmp	r3, #254	; 0xfe
 800391e:	d806      	bhi.n	800392e <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	60fa      	str	r2, [r7, #12]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e011      	b.n	8003952 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	60fa      	str	r2, [r7, #12]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	60fa      	str	r2, [r7, #12]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	0a19      	lsrs	r1, r3, #8
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	60fa      	str	r2, [r7, #12]
 800394e:	b2ca      	uxtb	r2, r1
 8003950:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003956:	e00a      	b.n	800396e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	1c53      	adds	r3, r2, #1
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1c59      	adds	r1, r3, #1
 8003962:	60f9      	str	r1, [r7, #12]
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	701a      	strb	r2, [r3, #0]
    n++;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	3301      	adds	r3, #1
 800396c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	429a      	cmp	r2, r3
 8003974:	d3f0      	bcc.n	8003958 <_EncodeStr+0x74>
  }
  return pPayload;
 8003976:	68fb      	ldr	r3, [r7, #12]
}
 8003978:	4618      	mov	r0, r3
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3307      	adds	r3, #7
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80039a2:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <_HandleIncomingPacket+0xdc>)
 80039a4:	7e1b      	ldrb	r3, [r3, #24]
 80039a6:	4618      	mov	r0, r3
 80039a8:	1cfb      	adds	r3, r7, #3
 80039aa:	2201      	movs	r2, #1
 80039ac:	4619      	mov	r1, r3
 80039ae:	f7ff fd57 	bl	8003460 <SEGGER_RTT_ReadNoLock>
 80039b2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d052      	beq.n	8003a60 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	2b80      	cmp	r3, #128	; 0x80
 80039be:	d031      	beq.n	8003a24 <_HandleIncomingPacket+0x88>
 80039c0:	2b80      	cmp	r3, #128	; 0x80
 80039c2:	dc40      	bgt.n	8003a46 <_HandleIncomingPacket+0xaa>
 80039c4:	2b07      	cmp	r3, #7
 80039c6:	dc15      	bgt.n	80039f4 <_HandleIncomingPacket+0x58>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	dd3c      	ble.n	8003a46 <_HandleIncomingPacket+0xaa>
 80039cc:	3b01      	subs	r3, #1
 80039ce:	2b06      	cmp	r3, #6
 80039d0:	d839      	bhi.n	8003a46 <_HandleIncomingPacket+0xaa>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <_HandleIncomingPacket+0x3c>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	080039fb 	.word	0x080039fb
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a07 	.word	0x08003a07
 80039e4:	08003a0d 	.word	0x08003a0d
 80039e8:	08003a13 	.word	0x08003a13
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003a1f 	.word	0x08003a1f
 80039f4:	2b7f      	cmp	r3, #127	; 0x7f
 80039f6:	d035      	beq.n	8003a64 <_HandleIncomingPacket+0xc8>
 80039f8:	e025      	b.n	8003a46 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80039fa:	f000 fc35 	bl	8004268 <SEGGER_SYSVIEW_Start>
      break;
 80039fe:	e036      	b.n	8003a6e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003a00:	f000 fcee 	bl	80043e0 <SEGGER_SYSVIEW_Stop>
      break;
 8003a04:	e033      	b.n	8003a6e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003a06:	f000 fec7 	bl	8004798 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003a0a:	e030      	b.n	8003a6e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003a0c:	f000 fe8c 	bl	8004728 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003a10:	e02d      	b.n	8003a6e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003a12:	f000 fd0b 	bl	800442c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003a16:	e02a      	b.n	8003a6e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003a18:	f001 f95a 	bl	8004cd0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003a1c:	e027      	b.n	8003a6e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003a1e:	f001 f939 	bl	8004c94 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003a22:	e024      	b.n	8003a6e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <_HandleIncomingPacket+0xdc>)
 8003a26:	7e1b      	ldrb	r3, [r3, #24]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	1cfb      	adds	r3, r7, #3
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f7ff fd16 	bl	8003460 <SEGGER_RTT_ReadNoLock>
 8003a34:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d015      	beq.n	8003a68 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 f8a8 	bl	8004b94 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003a44:	e010      	b.n	8003a68 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	da0e      	bge.n	8003a6c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <_HandleIncomingPacket+0xdc>)
 8003a50:	7e1b      	ldrb	r3, [r3, #24]
 8003a52:	4618      	mov	r0, r3
 8003a54:	1cfb      	adds	r3, r7, #3
 8003a56:	2201      	movs	r2, #1
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f7ff fd01 	bl	8003460 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003a5e:	e005      	b.n	8003a6c <_HandleIncomingPacket+0xd0>
    }
  }
 8003a60:	bf00      	nop
 8003a62:	e004      	b.n	8003a6e <_HandleIncomingPacket+0xd2>
      break;
 8003a64:	bf00      	nop
 8003a66:	e002      	b.n	8003a6e <_HandleIncomingPacket+0xd2>
      break;
 8003a68:	bf00      	nop
 8003a6a:	e000      	b.n	8003a6e <_HandleIncomingPacket+0xd2>
      break;
 8003a6c:	bf00      	nop
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	2407eb60 	.word	0x2407eb60

08003a7c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	; 0x30
 8003a80:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003a82:	2301      	movs	r3, #1
 8003a84:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	3301      	adds	r3, #1
 8003a8a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a90:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <_TrySendOverflowPacket+0xe0>)
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a96:	e00b      	b.n	8003ab0 <_TrySendOverflowPacket+0x34>
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	1c59      	adds	r1, r3, #1
 8003aa0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003aa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	09db      	lsrs	r3, r3, #7
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ab4:	d8f0      	bhi.n	8003a98 <_TrySendOverflowPacket+0x1c>
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003ac6:	4b26      	ldr	r3, [pc, #152]	; (8003b60 <_TrySendOverflowPacket+0xe4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003acc:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <_TrySendOverflowPacket+0xe0>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	e00b      	b.n	8003af8 <_TrySendOverflowPacket+0x7c>
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	6279      	str	r1, [r7, #36]	; 0x24
 8003aea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	09db      	lsrs	r3, r3, #7
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	2b7f      	cmp	r3, #127	; 0x7f
 8003afc:	d8f0      	bhi.n	8003ae0 <_TrySendOverflowPacket+0x64>
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	627a      	str	r2, [r7, #36]	; 0x24
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <_TrySendOverflowPacket+0xe0>)
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	4618      	mov	r0, r3
 8003b14:	1d3b      	adds	r3, r7, #4
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	1d3b      	adds	r3, r7, #4
 8003b1e:	4619      	mov	r1, r3
 8003b20:	f7fc fbde 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003b24:	4603      	mov	r3, r0
 8003b26:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003b28:	f7ff fa68 	bl	8002ffc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <_TrySendOverflowPacket+0xe0>)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <_TrySendOverflowPacket+0xe0>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <_TrySendOverflowPacket+0xe0>)
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e004      	b.n	8003b50 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <_TrySendOverflowPacket+0xe0>)
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	4a03      	ldr	r2, [pc, #12]	; (8003b5c <_TrySendOverflowPacket+0xe0>)
 8003b4e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003b50:	693b      	ldr	r3, [r7, #16]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3730      	adds	r7, #48	; 0x30
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2407eb60 	.word	0x2407eb60
 8003b60:	e0001004 	.word	0xe0001004

08003b64 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003b70:	4b96      	ldr	r3, [pc, #600]	; (8003dcc <_SendPacket+0x268>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d010      	beq.n	8003b9a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003b78:	4b94      	ldr	r3, [pc, #592]	; (8003dcc <_SendPacket+0x268>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8130 	beq.w	8003de2 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003b82:	4b92      	ldr	r3, [pc, #584]	; (8003dcc <_SendPacket+0x268>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d109      	bne.n	8003b9e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003b8a:	f7ff ff77 	bl	8003a7c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003b8e:	4b8f      	ldr	r3, [pc, #572]	; (8003dcc <_SendPacket+0x268>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	f040 8127 	bne.w	8003de6 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8003b98:	e001      	b.n	8003b9e <_SendPacket+0x3a>
    goto Send;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <_SendPacket+0x3c>
Send:
 8003b9e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b1f      	cmp	r3, #31
 8003ba4:	d809      	bhi.n	8003bba <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003ba6:	4b89      	ldr	r3, [pc, #548]	; (8003dcc <_SendPacket+0x268>)
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f040 8118 	bne.w	8003dea <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b17      	cmp	r3, #23
 8003bbe:	d807      	bhi.n	8003bd0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e0c4      	b.n	8003d5a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b7f      	cmp	r3, #127	; 0x7f
 8003bdc:	d912      	bls.n	8003c04 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	09da      	lsrs	r2, r3, #7
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	3a01      	subs	r2, #1
 8003bf6:	60fa      	str	r2, [r7, #12]
 8003bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	e006      	b.n	8003c12 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b7e      	cmp	r3, #126	; 0x7e
 8003c16:	d807      	bhi.n	8003c28 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e098      	b.n	8003d5a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c2e:	d212      	bcs.n	8003c56 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	09da      	lsrs	r2, r3, #7
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	3a01      	subs	r2, #1
 8003c48:	60fa      	str	r2, [r7, #12]
 8003c4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	e081      	b.n	8003d5a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c5c:	d21d      	bcs.n	8003c9a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	0b9a      	lsrs	r2, r3, #14
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	09db      	lsrs	r3, r3, #7
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	3a01      	subs	r2, #1
 8003c78:	60fa      	str	r2, [r7, #12]
 8003c7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	3a01      	subs	r2, #1
 8003c8c:	60fa      	str	r2, [r7, #12]
 8003c8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e05f      	b.n	8003d5a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca0:	d228      	bcs.n	8003cf4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	0d5a      	lsrs	r2, r3, #21
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0b9b      	lsrs	r3, r3, #14
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	3a01      	subs	r2, #1
 8003cbc:	60fa      	str	r2, [r7, #12]
 8003cbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	09db      	lsrs	r3, r3, #7
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	3a01      	subs	r2, #1
 8003cd2:	60fa      	str	r2, [r7, #12]
 8003cd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	3a01      	subs	r2, #1
 8003ce6:	60fa      	str	r2, [r7, #12]
 8003ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	e032      	b.n	8003d5a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	0f1a      	lsrs	r2, r3, #28
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	0d5b      	lsrs	r3, r3, #21
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	3a01      	subs	r2, #1
 8003d0e:	60fa      	str	r2, [r7, #12]
 8003d10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0b9b      	lsrs	r3, r3, #14
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	3a01      	subs	r2, #1
 8003d24:	60fa      	str	r2, [r7, #12]
 8003d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	09db      	lsrs	r3, r3, #7
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	3a01      	subs	r2, #1
 8003d3a:	60fa      	str	r2, [r7, #12]
 8003d3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	3a01      	subs	r2, #1
 8003d4e:	60fa      	str	r2, [r7, #12]
 8003d50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <_SendPacket+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003d60:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <_SendPacket+0x268>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	623b      	str	r3, [r7, #32]
 8003d72:	e00b      	b.n	8003d8c <_SendPacket+0x228>
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	1c59      	adds	r1, r3, #1
 8003d7c:	6279      	str	r1, [r7, #36]	; 0x24
 8003d7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	09db      	lsrs	r3, r3, #7
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d90:	d8f0      	bhi.n	8003d74 <_SendPacket+0x210>
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	627a      	str	r2, [r7, #36]	; 0x24
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <_SendPacket+0x268>)
 8003da4:	785b      	ldrb	r3, [r3, #1]
 8003da6:	4618      	mov	r0, r3
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	f7fc fa95 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003db6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003db8:	f7ff f920 	bl	8002ffc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003dc2:	4a02      	ldr	r2, [pc, #8]	; (8003dcc <_SendPacket+0x268>)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	60d3      	str	r3, [r2, #12]
 8003dc8:	e010      	b.n	8003dec <_SendPacket+0x288>
 8003dca:	bf00      	nop
 8003dcc:	2407eb60 	.word	0x2407eb60
 8003dd0:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003dd4:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <_SendPacket+0x2d8>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <_SendPacket+0x2d8>)
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	e004      	b.n	8003dec <_SendPacket+0x288>
    goto SendDone;
 8003de2:	bf00      	nop
 8003de4:	e002      	b.n	8003dec <_SendPacket+0x288>
      goto SendDone;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <_SendPacket+0x288>
      goto SendDone;
 8003dea:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003dec:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <_SendPacket+0x2d8>)
 8003dee:	7e1b      	ldrb	r3, [r3, #24]
 8003df0:	4619      	mov	r1, r3
 8003df2:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <_SendPacket+0x2dc>)
 8003df4:	460b      	mov	r3, r1
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	440b      	add	r3, r1
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	336c      	adds	r3, #108	; 0x6c
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <_SendPacket+0x2d8>)
 8003e04:	7e1b      	ldrb	r3, [r3, #24]
 8003e06:	4618      	mov	r0, r3
 8003e08:	490d      	ldr	r1, [pc, #52]	; (8003e40 <_SendPacket+0x2dc>)
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4403      	add	r3, r0
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	440b      	add	r3, r1
 8003e14:	3370      	adds	r3, #112	; 0x70
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d00b      	beq.n	8003e34 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <_SendPacket+0x2d8>)
 8003e1e:	789b      	ldrb	r3, [r3, #2]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <_SendPacket+0x2d8>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003e2a:	f7ff fdb7 	bl	800399c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003e2e:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <_SendPacket+0x2d8>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003e34:	bf00      	nop
 8003e36:	3728      	adds	r7, #40	; 0x28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	2407eb60 	.word	0x2407eb60
 8003e40:	24006aa0 	.word	0x24006aa0

08003e44 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003e52:	2300      	movs	r3, #0
 8003e54:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <SEGGER_SYSVIEW_Init+0x74>)
 8003e56:	4919      	ldr	r1, [pc, #100]	; (8003ebc <SEGGER_SYSVIEW_Init+0x78>)
 8003e58:	4819      	ldr	r0, [pc, #100]	; (8003ec0 <SEGGER_SYSVIEW_Init+0x7c>)
 8003e5a:	f7ff fc73 	bl	8003744 <SEGGER_RTT_AllocUpBuffer>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x80>)
 8003e64:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x80>)
 8003e68:	785a      	ldrb	r2, [r3, #1]
 8003e6a:	4b16      	ldr	r3, [pc, #88]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x80>)
 8003e6c:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x80>)
 8003e70:	7e1b      	ldrb	r3, [r3, #24]
 8003e72:	4618      	mov	r0, r3
 8003e74:	2300      	movs	r3, #0
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	2308      	movs	r3, #8
 8003e7a:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <SEGGER_SYSVIEW_Init+0x84>)
 8003e7c:	4910      	ldr	r1, [pc, #64]	; (8003ec0 <SEGGER_SYSVIEW_Init+0x7c>)
 8003e7e:	f7ff fce5 	bl	800384c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x80>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003e88:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <SEGGER_SYSVIEW_Init+0x88>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x80>)
 8003e8e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003e90:	4a0c      	ldr	r2, [pc, #48]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x80>)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003e96:	4a0b      	ldr	r2, [pc, #44]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x80>)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003e9c:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x80>)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003ea2:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x80>)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x80>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	00077c00 	.word	0x00077c00
 8003ebc:	24006f58 	.word	0x24006f58
 8003ec0:	0800ddcc 	.word	0x0800ddcc
 8003ec4:	2407eb60 	.word	0x2407eb60
 8003ec8:	2407eb58 	.word	0x2407eb58
 8003ecc:	e0001004 	.word	0xe0001004

08003ed0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003ed8:	4a04      	ldr	r2, [pc, #16]	; (8003eec <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6113      	str	r3, [r2, #16]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	2407eb60 	.word	0x2407eb60

08003ef0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8003efc:	f04f 0120 	mov.w	r1, #32
 8003f00:	f381 8811 	msr	BASEPRI, r1
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	4808      	ldr	r0, [pc, #32]	; (8003f28 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003f08:	f7ff fd3c 	bl	8003984 <_PreparePacket>
 8003f0c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	68b8      	ldr	r0, [r7, #8]
 8003f14:	f7ff fe26 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f383 8811 	msr	BASEPRI, r3
}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	2407eb90 	.word	0x2407eb90

08003f2c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f36:	f3ef 8311 	mrs	r3, BASEPRI
 8003f3a:	f04f 0120 	mov.w	r1, #32
 8003f3e:	f381 8811 	msr	BASEPRI, r1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	4816      	ldr	r0, [pc, #88]	; (8003fa0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003f46:	f7ff fd1d 	bl	8003984 <_PreparePacket>
 8003f4a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	e00b      	b.n	8003f72 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	1c59      	adds	r1, r3, #1
 8003f62:	61f9      	str	r1, [r7, #28]
 8003f64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	09db      	lsrs	r3, r3, #7
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b7f      	cmp	r3, #127	; 0x7f
 8003f76:	d8f0      	bhi.n	8003f5a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	61fa      	str	r2, [r7, #28]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	6938      	ldr	r0, [r7, #16]
 8003f8e:	f7ff fde9 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f383 8811 	msr	BASEPRI, r3
}
 8003f98:	bf00      	nop
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	2407eb90 	.word	0x2407eb90

08003fa4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08c      	sub	sp, #48	; 0x30
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003fb0:	f3ef 8311 	mrs	r3, BASEPRI
 8003fb4:	f04f 0120 	mov.w	r1, #32
 8003fb8:	f381 8811 	msr	BASEPRI, r1
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	4825      	ldr	r0, [pc, #148]	; (8004054 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003fc0:	f7ff fce0 	bl	8003984 <_PreparePacket>
 8003fc4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd2:	e00b      	b.n	8003fec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	1c59      	adds	r1, r3, #1
 8003fdc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	09db      	lsrs	r3, r3, #7
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	2b7f      	cmp	r3, #127	; 0x7f
 8003ff0:	d8f0      	bhi.n	8003fd4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	623b      	str	r3, [r7, #32]
 800400a:	e00b      	b.n	8004024 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	1c59      	adds	r1, r3, #1
 8004014:	6279      	str	r1, [r7, #36]	; 0x24
 8004016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	09db      	lsrs	r3, r3, #7
 8004022:	623b      	str	r3, [r7, #32]
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	2b7f      	cmp	r3, #127	; 0x7f
 8004028:	d8f0      	bhi.n	800400c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	627a      	str	r2, [r7, #36]	; 0x24
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	6979      	ldr	r1, [r7, #20]
 800403e:	69b8      	ldr	r0, [r7, #24]
 8004040:	f7ff fd90 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f383 8811 	msr	BASEPRI, r3
}
 800404a:	bf00      	nop
 800404c:	3730      	adds	r7, #48	; 0x30
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	2407eb90 	.word	0x2407eb90

08004058 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b08e      	sub	sp, #56	; 0x38
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004066:	f3ef 8311 	mrs	r3, BASEPRI
 800406a:	f04f 0120 	mov.w	r1, #32
 800406e:	f381 8811 	msr	BASEPRI, r1
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	4832      	ldr	r0, [pc, #200]	; (8004140 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004076:	f7ff fc85 	bl	8003984 <_PreparePacket>
 800407a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
 8004088:	e00b      	b.n	80040a2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	b2da      	uxtb	r2, r3
 800408e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004090:	1c59      	adds	r1, r3, #1
 8004092:	6379      	str	r1, [r7, #52]	; 0x34
 8004094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	09db      	lsrs	r3, r3, #7
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	2b7f      	cmp	r3, #127	; 0x7f
 80040a6:	d8f0      	bhi.n	800408a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80040a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	637a      	str	r2, [r7, #52]	; 0x34
 80040ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c0:	e00b      	b.n	80040da <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	1c59      	adds	r1, r3, #1
 80040ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	09db      	lsrs	r3, r3, #7
 80040d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	2b7f      	cmp	r3, #127	; 0x7f
 80040de:	d8f0      	bhi.n	80040c2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	623b      	str	r3, [r7, #32]
 80040f8:	e00b      	b.n	8004112 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	1c59      	adds	r1, r3, #1
 8004102:	6279      	str	r1, [r7, #36]	; 0x24
 8004104:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	09db      	lsrs	r3, r3, #7
 8004110:	623b      	str	r3, [r7, #32]
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	2b7f      	cmp	r3, #127	; 0x7f
 8004116:	d8f0      	bhi.n	80040fa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	627a      	str	r2, [r7, #36]	; 0x24
 800411e:	6a3a      	ldr	r2, [r7, #32]
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	6979      	ldr	r1, [r7, #20]
 800412c:	69b8      	ldr	r0, [r7, #24]
 800412e:	f7ff fd19 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f383 8811 	msr	BASEPRI, r3
}
 8004138:	bf00      	nop
 800413a:	3738      	adds	r7, #56	; 0x38
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	2407eb90 	.word	0x2407eb90

08004144 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b090      	sub	sp, #64	; 0x40
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004152:	f3ef 8311 	mrs	r3, BASEPRI
 8004156:	f04f 0120 	mov.w	r1, #32
 800415a:	f381 8811 	msr	BASEPRI, r1
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	4840      	ldr	r0, [pc, #256]	; (8004264 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004162:	f7ff fc0f 	bl	8003984 <_PreparePacket>
 8004166:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38
 8004174:	e00b      	b.n	800418e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	b2da      	uxtb	r2, r3
 800417a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417c:	1c59      	adds	r1, r3, #1
 800417e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	09db      	lsrs	r3, r3, #7
 800418c:	63bb      	str	r3, [r7, #56]	; 0x38
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	2b7f      	cmp	r3, #127	; 0x7f
 8004192:	d8f0      	bhi.n	8004176 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	63fa      	str	r2, [r7, #60]	; 0x3c
 800419a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	637b      	str	r3, [r7, #52]	; 0x34
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	633b      	str	r3, [r7, #48]	; 0x30
 80041ac:	e00b      	b.n	80041c6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b4:	1c59      	adds	r1, r3, #1
 80041b6:	6379      	str	r1, [r7, #52]	; 0x34
 80041b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	09db      	lsrs	r3, r3, #7
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	2b7f      	cmp	r3, #127	; 0x7f
 80041ca:	d8f0      	bhi.n	80041ae <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80041cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	637a      	str	r2, [r7, #52]	; 0x34
 80041d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e4:	e00b      	b.n	80041fe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80041e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	1c59      	adds	r1, r3, #1
 80041ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80041f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	09db      	lsrs	r3, r3, #7
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	2b7f      	cmp	r3, #127	; 0x7f
 8004202:	d8f0      	bhi.n	80041e6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800420a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004212:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421a:	623b      	str	r3, [r7, #32]
 800421c:	e00b      	b.n	8004236 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	1c59      	adds	r1, r3, #1
 8004226:	6279      	str	r1, [r7, #36]	; 0x24
 8004228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	09db      	lsrs	r3, r3, #7
 8004234:	623b      	str	r3, [r7, #32]
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	2b7f      	cmp	r3, #127	; 0x7f
 800423a:	d8f0      	bhi.n	800421e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	627a      	str	r2, [r7, #36]	; 0x24
 8004242:	6a3a      	ldr	r2, [r7, #32]
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	6979      	ldr	r1, [r7, #20]
 8004250:	69b8      	ldr	r0, [r7, #24]
 8004252:	f7ff fc87 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f383 8811 	msr	BASEPRI, r3
}
 800425c:	bf00      	nop
 800425e:	3740      	adds	r7, #64	; 0x40
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	2407eb90 	.word	0x2407eb90

08004268 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b08c      	sub	sp, #48	; 0x30
 800426c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800426e:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004274:	f3ef 8311 	mrs	r3, BASEPRI
 8004278:	f04f 0120 	mov.w	r1, #32
 800427c:	f381 8811 	msr	BASEPRI, r1
 8004280:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004282:	4b54      	ldr	r3, [pc, #336]	; (80043d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004284:	785b      	ldrb	r3, [r3, #1]
 8004286:	220a      	movs	r2, #10
 8004288:	4953      	ldr	r1, [pc, #332]	; (80043d8 <SEGGER_SYSVIEW_Start+0x170>)
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc f828 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004296:	f7fe feb1 	bl	8002ffc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800429a:	200a      	movs	r0, #10
 800429c:	f7ff fe28 	bl	8003ef0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80042a0:	f3ef 8311 	mrs	r3, BASEPRI
 80042a4:	f04f 0120 	mov.w	r1, #32
 80042a8:	f381 8811 	msr	BASEPRI, r1
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	484b      	ldr	r0, [pc, #300]	; (80043dc <SEGGER_SYSVIEW_Start+0x174>)
 80042b0:	f7ff fb68 	bl	8003984 <_PreparePacket>
 80042b4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042be:	4b45      	ldr	r3, [pc, #276]	; (80043d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c4:	e00b      	b.n	80042de <SEGGER_SYSVIEW_Start+0x76>
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	1c59      	adds	r1, r3, #1
 80042ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	09db      	lsrs	r3, r3, #7
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	2b7f      	cmp	r3, #127	; 0x7f
 80042e2:	d8f0      	bhi.n	80042c6 <SEGGER_SYSVIEW_Start+0x5e>
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
 80042f8:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	623b      	str	r3, [r7, #32]
 80042fe:	e00b      	b.n	8004318 <SEGGER_SYSVIEW_Start+0xb0>
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	1c59      	adds	r1, r3, #1
 8004308:	6279      	str	r1, [r7, #36]	; 0x24
 800430a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	09db      	lsrs	r3, r3, #7
 8004316:	623b      	str	r3, [r7, #32]
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	2b7f      	cmp	r3, #127	; 0x7f
 800431c:	d8f0      	bhi.n	8004300 <SEGGER_SYSVIEW_Start+0x98>
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	627a      	str	r2, [r7, #36]	; 0x24
 8004324:	6a3a      	ldr	r2, [r7, #32]
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	e00b      	b.n	8004352 <SEGGER_SYSVIEW_Start+0xea>
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	1c59      	adds	r1, r3, #1
 8004342:	61f9      	str	r1, [r7, #28]
 8004344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	09db      	lsrs	r3, r3, #7
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b7f      	cmp	r3, #127	; 0x7f
 8004356:	d8f0      	bhi.n	800433a <SEGGER_SYSVIEW_Start+0xd2>
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	61fa      	str	r2, [r7, #28]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	e00b      	b.n	800438a <SEGGER_SYSVIEW_Start+0x122>
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	1c59      	adds	r1, r3, #1
 800437a:	6179      	str	r1, [r7, #20]
 800437c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	09db      	lsrs	r3, r3, #7
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b7f      	cmp	r3, #127	; 0x7f
 800438e:	d8f0      	bhi.n	8004372 <SEGGER_SYSVIEW_Start+0x10a>
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	617a      	str	r2, [r7, #20]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80043a0:	2218      	movs	r2, #24
 80043a2:	6839      	ldr	r1, [r7, #0]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff fbdd 	bl	8003b64 <_SendPacket>
      RECORD_END();
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80043b0:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80043be:	f000 f9eb 	bl	8004798 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80043c2:	f000 f9b1 	bl	8004728 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80043c6:	f000 fc83 	bl	8004cd0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80043ca:	bf00      	nop
 80043cc:	3730      	adds	r7, #48	; 0x30
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	2407eb60 	.word	0x2407eb60
 80043d8:	0800df2c 	.word	0x0800df2c
 80043dc:	2407eb90 	.word	0x2407eb90

080043e0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80043e6:	f3ef 8311 	mrs	r3, BASEPRI
 80043ea:	f04f 0120 	mov.w	r1, #32
 80043ee:	f381 8811 	msr	BASEPRI, r1
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	480b      	ldr	r0, [pc, #44]	; (8004424 <SEGGER_SYSVIEW_Stop+0x44>)
 80043f6:	f7ff fac5 	bl	8003984 <_PreparePacket>
 80043fa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <SEGGER_SYSVIEW_Stop+0x48>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004404:	220b      	movs	r2, #11
 8004406:	6839      	ldr	r1, [r7, #0]
 8004408:	6838      	ldr	r0, [r7, #0]
 800440a:	f7ff fbab 	bl	8003b64 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <SEGGER_SYSVIEW_Stop+0x48>)
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f383 8811 	msr	BASEPRI, r3
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	2407eb90 	.word	0x2407eb90
 8004428:	2407eb60 	.word	0x2407eb60

0800442c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b08c      	sub	sp, #48	; 0x30
 8004430:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004432:	f3ef 8311 	mrs	r3, BASEPRI
 8004436:	f04f 0120 	mov.w	r1, #32
 800443a:	f381 8811 	msr	BASEPRI, r1
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	4845      	ldr	r0, [pc, #276]	; (8004558 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004442:	f7ff fa9f 	bl	8003984 <_PreparePacket>
 8004446:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004450:	4b42      	ldr	r3, [pc, #264]	; (800455c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
 8004456:	e00b      	b.n	8004470 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	b2da      	uxtb	r2, r3
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	09db      	lsrs	r3, r3, #7
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	2b7f      	cmp	r3, #127	; 0x7f
 8004474:	d8f0      	bhi.n	8004458 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800447c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	4b34      	ldr	r3, [pc, #208]	; (800455c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	623b      	str	r3, [r7, #32]
 8004490:	e00b      	b.n	80044aa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	1c59      	adds	r1, r3, #1
 800449a:	6279      	str	r1, [r7, #36]	; 0x24
 800449c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	09db      	lsrs	r3, r3, #7
 80044a8:	623b      	str	r3, [r7, #32]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	2b7f      	cmp	r3, #127	; 0x7f
 80044ae:	d8f0      	bhi.n	8004492 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	627a      	str	r2, [r7, #36]	; 0x24
 80044b6:	6a3a      	ldr	r2, [r7, #32]
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	4b25      	ldr	r3, [pc, #148]	; (800455c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	e00b      	b.n	80044e4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	1c59      	adds	r1, r3, #1
 80044d4:	61f9      	str	r1, [r7, #28]
 80044d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	09db      	lsrs	r3, r3, #7
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b7f      	cmp	r3, #127	; 0x7f
 80044e8:	d8f0      	bhi.n	80044cc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	61fa      	str	r2, [r7, #28]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	e00b      	b.n	800451c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1c59      	adds	r1, r3, #1
 800450c:	6179      	str	r1, [r7, #20]
 800450e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	09db      	lsrs	r3, r3, #7
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b7f      	cmp	r3, #127	; 0x7f
 8004520:	d8f0      	bhi.n	8004504 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	617a      	str	r2, [r7, #20]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004532:	2218      	movs	r2, #24
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	68b8      	ldr	r0, [r7, #8]
 8004538:	f7ff fb14 	bl	8003b64 <_SendPacket>
  RECORD_END();
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800454a:	4b04      	ldr	r3, [pc, #16]	; (800455c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	4798      	blx	r3
  }
}
 8004550:	bf00      	nop
 8004552:	3730      	adds	r7, #48	; 0x30
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	2407eb90 	.word	0x2407eb90
 800455c:	2407eb60 	.word	0x2407eb60

08004560 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b092      	sub	sp, #72	; 0x48
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004568:	f3ef 8311 	mrs	r3, BASEPRI
 800456c:	f04f 0120 	mov.w	r1, #32
 8004570:	f381 8811 	msr	BASEPRI, r1
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	486a      	ldr	r0, [pc, #424]	; (8004720 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004578:	f7ff fa04 	bl	8003984 <_PreparePacket>
 800457c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	647b      	str	r3, [r7, #68]	; 0x44
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b66      	ldr	r3, [pc, #408]	; (8004724 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	643b      	str	r3, [r7, #64]	; 0x40
 8004592:	e00b      	b.n	80045ac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004596:	b2da      	uxtb	r2, r3
 8004598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459a:	1c59      	adds	r1, r3, #1
 800459c:	6479      	str	r1, [r7, #68]	; 0x44
 800459e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a8:	09db      	lsrs	r3, r3, #7
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40
 80045ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ae:	2b7f      	cmp	r3, #127	; 0x7f
 80045b0:	d8f0      	bhi.n	8004594 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80045b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	647a      	str	r2, [r7, #68]	; 0x44
 80045b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80045cc:	e00b      	b.n	80045e6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d4:	1c59      	adds	r1, r3, #1
 80045d6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80045d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e2:	09db      	lsrs	r3, r3, #7
 80045e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	2b7f      	cmp	r3, #127	; 0x7f
 80045ea:	d8f0      	bhi.n	80045ce <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	4619      	mov	r1, r3
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7ff f96d 	bl	80038e4 <_EncodeStr>
 800460a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800460c:	2209      	movs	r2, #9
 800460e:	68f9      	ldr	r1, [r7, #12]
 8004610:	6938      	ldr	r0, [r7, #16]
 8004612:	f7ff faa7 	bl	8003b64 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b40      	ldr	r3, [pc, #256]	; (8004724 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	633b      	str	r3, [r7, #48]	; 0x30
 800462a:	e00b      	b.n	8004644 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	b2da      	uxtb	r2, r3
 8004630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	6379      	str	r1, [r7, #52]	; 0x34
 8004636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	09db      	lsrs	r3, r3, #7
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	2b7f      	cmp	r3, #127	; 0x7f
 8004648:	d8f0      	bhi.n	800462c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800464a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	637a      	str	r2, [r7, #52]	; 0x34
 8004650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
 8004664:	e00b      	b.n	800467e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	b2da      	uxtb	r2, r3
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	1c59      	adds	r1, r3, #1
 800466e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004670:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	09db      	lsrs	r3, r3, #7
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	2b7f      	cmp	r3, #127	; 0x7f
 8004682:	d8f0      	bhi.n	8004666 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	62fa      	str	r2, [r7, #44]	; 0x2c
 800468a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	623b      	str	r3, [r7, #32]
 800469e:	e00b      	b.n	80046b8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	6279      	str	r1, [r7, #36]	; 0x24
 80046aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	09db      	lsrs	r3, r3, #7
 80046b6:	623b      	str	r3, [r7, #32]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2b7f      	cmp	r3, #127	; 0x7f
 80046bc:	d8f0      	bhi.n	80046a0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	627a      	str	r2, [r7, #36]	; 0x24
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	e00b      	b.n	80046f0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	1c59      	adds	r1, r3, #1
 80046e0:	61f9      	str	r1, [r7, #28]
 80046e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	09db      	lsrs	r3, r3, #7
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b7f      	cmp	r3, #127	; 0x7f
 80046f4:	d8f0      	bhi.n	80046d8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	61fa      	str	r2, [r7, #28]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004706:	2215      	movs	r2, #21
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	6938      	ldr	r0, [r7, #16]
 800470c:	f7ff fa2a 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f383 8811 	msr	BASEPRI, r3
}
 8004716:	bf00      	nop
 8004718:	3748      	adds	r7, #72	; 0x48
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	2407eb90 	.word	0x2407eb90
 8004724:	2407eb60 	.word	0x2407eb60

08004728 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800472c:	4b07      	ldr	r3, [pc, #28]	; (800474c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800473e:	4b03      	ldr	r3, [pc, #12]	; (800474c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4798      	blx	r3
  }
}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	2407eb60 	.word	0x2407eb60

08004750 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004758:	f3ef 8311 	mrs	r3, BASEPRI
 800475c:	f04f 0120 	mov.w	r1, #32
 8004760:	f381 8811 	msr	BASEPRI, r1
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	480b      	ldr	r0, [pc, #44]	; (8004794 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004768:	f7ff f90c 	bl	8003984 <_PreparePacket>
 800476c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800476e:	2280      	movs	r2, #128	; 0x80
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	6938      	ldr	r0, [r7, #16]
 8004774:	f7ff f8b6 	bl	80038e4 <_EncodeStr>
 8004778:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800477a:	220e      	movs	r2, #14
 800477c:	68f9      	ldr	r1, [r7, #12]
 800477e:	6938      	ldr	r0, [r7, #16]
 8004780:	f7ff f9f0 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f383 8811 	msr	BASEPRI, r3
}
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	2407eb90 	.word	0x2407eb90

08004798 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800479e:	4b15      	ldr	r3, [pc, #84]	; (80047f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d01a      	beq.n	80047dc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80047a6:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d015      	beq.n	80047dc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4798      	blx	r3
 80047b8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80047bc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80047be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	000a      	movs	r2, r1
 80047cc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80047ce:	4613      	mov	r3, r2
 80047d0:	461a      	mov	r2, r3
 80047d2:	4621      	mov	r1, r4
 80047d4:	200d      	movs	r0, #13
 80047d6:	f7ff fbe5 	bl	8003fa4 <SEGGER_SYSVIEW_RecordU32x2>
 80047da:	e006      	b.n	80047ea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80047dc:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4619      	mov	r1, r3
 80047e2:	200c      	movs	r0, #12
 80047e4:	f7ff fba2 	bl	8003f2c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd90      	pop	{r4, r7, pc}
 80047f2:	bf00      	nop
 80047f4:	2407eb60 	.word	0x2407eb60
 80047f8:	e0001004 	.word	0xe0001004

080047fc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004802:	f3ef 8311 	mrs	r3, BASEPRI
 8004806:	f04f 0120 	mov.w	r1, #32
 800480a:	f381 8811 	msr	BASEPRI, r1
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	4819      	ldr	r0, [pc, #100]	; (8004878 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004812:	f7ff f8b7 	bl	8003984 <_PreparePacket>
 8004816:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800481c:	4b17      	ldr	r3, [pc, #92]	; (800487c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004824:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	e00b      	b.n	8004848 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	b2da      	uxtb	r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	1c59      	adds	r1, r3, #1
 8004838:	6179      	str	r1, [r7, #20]
 800483a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	09db      	lsrs	r3, r3, #7
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b7f      	cmp	r3, #127	; 0x7f
 800484c:	d8f0      	bhi.n	8004830 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	617a      	str	r2, [r7, #20]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800485e:	2202      	movs	r2, #2
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	68b8      	ldr	r0, [r7, #8]
 8004864:	f7ff f97e 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f383 8811 	msr	BASEPRI, r3
}
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	2407eb90 	.word	0x2407eb90
 800487c:	e000ed04 	.word	0xe000ed04

08004880 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004886:	f3ef 8311 	mrs	r3, BASEPRI
 800488a:	f04f 0120 	mov.w	r1, #32
 800488e:	f381 8811 	msr	BASEPRI, r1
 8004892:	607b      	str	r3, [r7, #4]
 8004894:	4807      	ldr	r0, [pc, #28]	; (80048b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004896:	f7ff f875 	bl	8003984 <_PreparePacket>
 800489a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800489c:	2203      	movs	r2, #3
 800489e:	6839      	ldr	r1, [r7, #0]
 80048a0:	6838      	ldr	r0, [r7, #0]
 80048a2:	f7ff f95f 	bl	8003b64 <_SendPacket>
  RECORD_END();
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f383 8811 	msr	BASEPRI, r3
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	2407eb90 	.word	0x2407eb90

080048b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048be:	f3ef 8311 	mrs	r3, BASEPRI
 80048c2:	f04f 0120 	mov.w	r1, #32
 80048c6:	f381 8811 	msr	BASEPRI, r1
 80048ca:	607b      	str	r3, [r7, #4]
 80048cc:	4807      	ldr	r0, [pc, #28]	; (80048ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80048ce:	f7ff f859 	bl	8003984 <_PreparePacket>
 80048d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80048d4:	2212      	movs	r2, #18
 80048d6:	6839      	ldr	r1, [r7, #0]
 80048d8:	6838      	ldr	r0, [r7, #0]
 80048da:	f7ff f943 	bl	8003b64 <_SendPacket>
  RECORD_END();
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f383 8811 	msr	BASEPRI, r3
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	2407eb90 	.word	0x2407eb90

080048f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048f6:	f3ef 8311 	mrs	r3, BASEPRI
 80048fa:	f04f 0120 	mov.w	r1, #32
 80048fe:	f381 8811 	msr	BASEPRI, r1
 8004902:	607b      	str	r3, [r7, #4]
 8004904:	4807      	ldr	r0, [pc, #28]	; (8004924 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004906:	f7ff f83d 	bl	8003984 <_PreparePacket>
 800490a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800490c:	2211      	movs	r2, #17
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	6838      	ldr	r0, [r7, #0]
 8004912:	f7ff f927 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f383 8811 	msr	BASEPRI, r3
}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	2407eb90 	.word	0x2407eb90

08004928 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004930:	f3ef 8311 	mrs	r3, BASEPRI
 8004934:	f04f 0120 	mov.w	r1, #32
 8004938:	f381 8811 	msr	BASEPRI, r1
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	4819      	ldr	r0, [pc, #100]	; (80049a4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004940:	f7ff f820 	bl	8003984 <_PreparePacket>
 8004944:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800494a:	4b17      	ldr	r3, [pc, #92]	; (80049a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	61fb      	str	r3, [r7, #28]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	e00b      	b.n	8004976 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	1c59      	adds	r1, r3, #1
 8004966:	61f9      	str	r1, [r7, #28]
 8004968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	09db      	lsrs	r3, r3, #7
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b7f      	cmp	r3, #127	; 0x7f
 800497a:	d8f0      	bhi.n	800495e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	61fa      	str	r2, [r7, #28]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800498c:	2208      	movs	r2, #8
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	6938      	ldr	r0, [r7, #16]
 8004992:	f7ff f8e7 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f383 8811 	msr	BASEPRI, r3
}
 800499c:	bf00      	nop
 800499e:	3720      	adds	r7, #32
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	2407eb90 	.word	0x2407eb90
 80049a8:	2407eb60 	.word	0x2407eb60

080049ac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80049b4:	f3ef 8311 	mrs	r3, BASEPRI
 80049b8:	f04f 0120 	mov.w	r1, #32
 80049bc:	f381 8811 	msr	BASEPRI, r1
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	4819      	ldr	r0, [pc, #100]	; (8004a28 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80049c4:	f7fe ffde 	bl	8003984 <_PreparePacket>
 80049c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80049ce:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e00b      	b.n	80049fa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	1c59      	adds	r1, r3, #1
 80049ea:	61f9      	str	r1, [r7, #28]
 80049ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	09db      	lsrs	r3, r3, #7
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b7f      	cmp	r3, #127	; 0x7f
 80049fe:	d8f0      	bhi.n	80049e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	61fa      	str	r2, [r7, #28]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004a10:	2204      	movs	r2, #4
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	6938      	ldr	r0, [r7, #16]
 8004a16:	f7ff f8a5 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f383 8811 	msr	BASEPRI, r3
}
 8004a20:	bf00      	nop
 8004a22:	3720      	adds	r7, #32
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	2407eb90 	.word	0x2407eb90
 8004a2c:	2407eb60 	.word	0x2407eb60

08004a30 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a38:	f3ef 8311 	mrs	r3, BASEPRI
 8004a3c:	f04f 0120 	mov.w	r1, #32
 8004a40:	f381 8811 	msr	BASEPRI, r1
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	4819      	ldr	r0, [pc, #100]	; (8004aac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004a48:	f7fe ff9c 	bl	8003984 <_PreparePacket>
 8004a4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004a52:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	e00b      	b.n	8004a7e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	1c59      	adds	r1, r3, #1
 8004a6e:	61f9      	str	r1, [r7, #28]
 8004a70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	09db      	lsrs	r3, r3, #7
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b7f      	cmp	r3, #127	; 0x7f
 8004a82:	d8f0      	bhi.n	8004a66 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	61fa      	str	r2, [r7, #28]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004a94:	2206      	movs	r2, #6
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	6938      	ldr	r0, [r7, #16]
 8004a9a:	f7ff f863 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f383 8811 	msr	BASEPRI, r3
}
 8004aa4:	bf00      	nop
 8004aa6:	3720      	adds	r7, #32
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	2407eb90 	.word	0x2407eb90
 8004ab0:	2407eb60 	.word	0x2407eb60

08004ab4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	; 0x28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004abe:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac2:	f04f 0120 	mov.w	r1, #32
 8004ac6:	f381 8811 	msr	BASEPRI, r1
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	4827      	ldr	r0, [pc, #156]	; (8004b6c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004ace:	f7fe ff59 	bl	8003984 <_PreparePacket>
 8004ad2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	623b      	str	r3, [r7, #32]
 8004aea:	e00b      	b.n	8004b04 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	1c59      	adds	r1, r3, #1
 8004af4:	6279      	str	r1, [r7, #36]	; 0x24
 8004af6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	09db      	lsrs	r3, r3, #7
 8004b02:	623b      	str	r3, [r7, #32]
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	2b7f      	cmp	r3, #127	; 0x7f
 8004b08:	d8f0      	bhi.n	8004aec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b10:	6a3a      	ldr	r2, [r7, #32]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	e00b      	b.n	8004b3c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	1c59      	adds	r1, r3, #1
 8004b2c:	61f9      	str	r1, [r7, #28]
 8004b2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	09db      	lsrs	r3, r3, #7
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b40:	d8f0      	bhi.n	8004b24 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	61fa      	str	r2, [r7, #28]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004b52:	2207      	movs	r2, #7
 8004b54:	68f9      	ldr	r1, [r7, #12]
 8004b56:	6938      	ldr	r0, [r7, #16]
 8004b58:	f7ff f804 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f383 8811 	msr	BASEPRI, r3
}
 8004b62:	bf00      	nop
 8004b64:	3728      	adds	r7, #40	; 0x28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	2407eb90 	.word	0x2407eb90
 8004b70:	2407eb60 	.word	0x2407eb60

08004b74 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004b7c:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	1ad3      	subs	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	2407eb60 	.word	0x2407eb60

08004b94 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08c      	sub	sp, #48	; 0x30
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d06d      	beq.n	8004c82 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004ba6:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004bac:	2300      	movs	r3, #0
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb0:	e008      	b.n	8004bc4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d3f2      	bcc.n	8004bb2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004bcc:	e000      	b.n	8004bd0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004bce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d055      	beq.n	8004c82 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004bda:	f04f 0120 	mov.w	r1, #32
 8004bde:	f381 8811 	msr	BASEPRI, r1
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	482a      	ldr	r0, [pc, #168]	; (8004c90 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004be6:	f7fe fecd 	bl	8003984 <_PreparePacket>
 8004bea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	623b      	str	r3, [r7, #32]
 8004bf8:	e00b      	b.n	8004c12 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	1c59      	adds	r1, r3, #1
 8004c02:	6279      	str	r1, [r7, #36]	; 0x24
 8004c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	09db      	lsrs	r3, r3, #7
 8004c10:	623b      	str	r3, [r7, #32]
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	2b7f      	cmp	r3, #127	; 0x7f
 8004c16:	d8f0      	bhi.n	8004bfa <SEGGER_SYSVIEW_SendModule+0x66>
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	627a      	str	r2, [r7, #36]	; 0x24
 8004c1e:	6a3a      	ldr	r2, [r7, #32]
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	e00b      	b.n	8004c4c <SEGGER_SYSVIEW_SendModule+0xb8>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	1c59      	adds	r1, r3, #1
 8004c3c:	61f9      	str	r1, [r7, #28]
 8004c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	09db      	lsrs	r3, r3, #7
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c50:	d8f0      	bhi.n	8004c34 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	61fa      	str	r2, [r7, #28]
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2280      	movs	r2, #128	; 0x80
 8004c68:	4619      	mov	r1, r3
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7fe fe3a 	bl	80038e4 <_EncodeStr>
 8004c70:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004c72:	2216      	movs	r2, #22
 8004c74:	68f9      	ldr	r1, [r7, #12]
 8004c76:	6938      	ldr	r0, [r7, #16]
 8004c78:	f7fe ff74 	bl	8003b64 <_SendPacket>
      RECORD_END();
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004c82:	bf00      	nop
 8004c84:	3730      	adds	r7, #48	; 0x30
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	2407eb88 	.word	0x2407eb88
 8004c90:	2407eb90 	.word	0x2407eb90

08004c94 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00f      	beq.n	8004cc2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f2      	bne.n	8004ca8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	2407eb88 	.word	0x2407eb88

08004cd0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cda:	f04f 0120 	mov.w	r1, #32
 8004cde:	f381 8811 	msr	BASEPRI, r1
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	4817      	ldr	r0, [pc, #92]	; (8004d44 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004ce6:	f7fe fe4d 	bl	8003984 <_PreparePacket>
 8004cea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	e00b      	b.n	8004d14 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	1c59      	adds	r1, r3, #1
 8004d04:	6179      	str	r1, [r7, #20]
 8004d06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	09db      	lsrs	r3, r3, #7
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b7f      	cmp	r3, #127	; 0x7f
 8004d18:	d8f0      	bhi.n	8004cfc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	617a      	str	r2, [r7, #20]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004d2a:	221b      	movs	r2, #27
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	68b8      	ldr	r0, [r7, #8]
 8004d30:	f7fe ff18 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f383 8811 	msr	BASEPRI, r3
}
 8004d3a:	bf00      	nop
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	2407eb90 	.word	0x2407eb90
 8004d48:	2407eb8c 	.word	0x2407eb8c

08004d4c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08a      	sub	sp, #40	; 0x28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d54:	f3ef 8311 	mrs	r3, BASEPRI
 8004d58:	f04f 0120 	mov.w	r1, #32
 8004d5c:	f381 8811 	msr	BASEPRI, r1
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	4827      	ldr	r0, [pc, #156]	; (8004e00 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004d64:	f7fe fe0e 	bl	8003984 <_PreparePacket>
 8004d68:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d6a:	2280      	movs	r2, #128	; 0x80
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	6938      	ldr	r0, [r7, #16]
 8004d70:	f7fe fdb8 	bl	80038e4 <_EncodeStr>
 8004d74:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	623b      	str	r3, [r7, #32]
 8004d7e:	e00b      	b.n	8004d98 <SEGGER_SYSVIEW_Warn+0x4c>
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	6279      	str	r1, [r7, #36]	; 0x24
 8004d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	09db      	lsrs	r3, r3, #7
 8004d96:	623b      	str	r3, [r7, #32]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9c:	d8f0      	bhi.n	8004d80 <SEGGER_SYSVIEW_Warn+0x34>
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	627a      	str	r2, [r7, #36]	; 0x24
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	2300      	movs	r3, #0
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	e00b      	b.n	8004dd0 <SEGGER_SYSVIEW_Warn+0x84>
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	1c59      	adds	r1, r3, #1
 8004dc0:	61f9      	str	r1, [r7, #28]
 8004dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	09db      	lsrs	r3, r3, #7
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd4:	d8f0      	bhi.n	8004db8 <SEGGER_SYSVIEW_Warn+0x6c>
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	61fa      	str	r2, [r7, #28]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004de6:	221a      	movs	r2, #26
 8004de8:	68f9      	ldr	r1, [r7, #12]
 8004dea:	6938      	ldr	r0, [r7, #16]
 8004dec:	f7fe feba 	bl	8003b64 <_SendPacket>
  RECORD_END();
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f383 8811 	msr	BASEPRI, r3
}
 8004df6:	bf00      	nop
 8004df8:	3728      	adds	r7, #40	; 0x28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	2407eb90 	.word	0x2407eb90

08004e04 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004e08:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004e0a:	7e1b      	ldrb	r3, [r3, #24]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004e10:	460b      	mov	r3, r1
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	440b      	add	r3, r1
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4413      	add	r3, r2
 8004e1a:	336c      	adds	r3, #108	; 0x6c
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004e20:	7e1b      	ldrb	r3, [r3, #24]
 8004e22:	4618      	mov	r0, r3
 8004e24:	490d      	ldr	r1, [pc, #52]	; (8004e5c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004e26:	4603      	mov	r3, r0
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4403      	add	r3, r0
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	440b      	add	r3, r1
 8004e30:	3370      	adds	r3, #112	; 0x70
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d00b      	beq.n	8004e50 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004e38:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004e3a:	789b      	ldrb	r3, [r3, #2]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d107      	bne.n	8004e50 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004e46:	f7fe fda9 	bl	800399c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004e4a:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8004e50:	4b01      	ldr	r3, [pc, #4]	; (8004e58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	2407eb60 	.word	0x2407eb60
 8004e5c:	24006aa0 	.word	0x24006aa0

08004e60 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	2000      	movs	r0, #0
 8004e74:	f7fe fc40 	bl	80036f8 <SEGGER_RTT_Write>
  return len;
 8004e78:	683b      	ldr	r3, [r7, #0]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e8a:	f000 fefb 	bl	8005c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e8e:	f000 f89f 	bl	8004fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e92:	f000 fa1d 	bl	80052d0 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8004e96:	f000 f949 	bl	800512c <MX_FDCAN2_Init>
  MX_USB_OTG_FS_HCD_Init();
 8004e9a:	f000 f9f7 	bl	800528c <MX_USB_OTG_FS_HCD_Init>
  MX_USART3_UART_Init();
 8004e9e:	f000 f9a9 	bl	80051f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start LED
    int Start_Counter = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 8004ea6:	e010      	b.n	8004eca <main+0x46>
    {
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	483d      	ldr	r0, [pc, #244]	; (8004fa0 <main+0x11c>)
 8004eac:	f002 fdfb 	bl	8007aa6 <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 8004eb0:	20c8      	movs	r0, #200	; 0xc8
 8004eb2:	f000 ff43 	bl	8005d3c <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004eb6:	2104      	movs	r1, #4
 8004eb8:	4839      	ldr	r0, [pc, #228]	; (8004fa0 <main+0x11c>)
 8004eba:	f002 fdf4 	bl	8007aa6 <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 8004ebe:	20c8      	movs	r0, #200	; 0xc8
 8004ec0:	f000 ff3c 	bl	8005d3c <HAL_Delay>
  	  Start_Counter++;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	ddeb      	ble.n	8004ea8 <main+0x24>

    //user_data = "Start of program\r\n";
    	//HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);

    	// Enable CCYCCNT Counter for SEGGER SYSTEM VIEW
    	DWT->CTRL |= (1 << 0);
 8004ed0:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <main+0x120>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a33      	ldr	r2, [pc, #204]	; (8004fa4 <main+0x120>)
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	6013      	str	r3, [r2, #0]

    	// Used for SEGGER UART
    	SEGGER_UART_init(500000);
 8004edc:	4832      	ldr	r0, [pc, #200]	; (8004fa8 <main+0x124>)
 8004ede:	f7fe f82f 	bl	8002f40 <SEGGER_UART_init>

    	//Starting SEGGER SYSVIEW
    	  SEGGER_SYSVIEW_Conf();
 8004ee2:	f7fd fe57 	bl	8002b94 <SEGGER_SYSVIEW_Conf>
    	  //SEGGER_SYSVIEW_Start();

  /* USER CODE END 2 */
    		sprintf(usr_msg,"Demo of Binary semaphore usage between 2 Tasks \r\n");
 8004ee6:	4931      	ldr	r1, [pc, #196]	; (8004fac <main+0x128>)
 8004ee8:	4831      	ldr	r0, [pc, #196]	; (8004fb0 <main+0x12c>)
 8004eea:	f007 fd49 	bl	800c980 <siprintf>
    		USART_Send(usr_msg);
 8004eee:	4830      	ldr	r0, [pc, #192]	; (8004fb0 <main+0x12c>)
 8004ef0:	f000 faec 	bl	80054cc <USART_Send>


    	    /* Before a semaphore is used it must be explicitly created.
    	     * In this example a binary semaphore is created . */
    	    vSemaphoreCreateBinary( xWork );
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f7fb fd2c 	bl	8000956 <xQueueGenericCreate>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4a2c      	ldr	r2, [pc, #176]	; (8004fb4 <main+0x130>)
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <main+0x130>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d006      	beq.n	8004f1a <main+0x96>
 8004f0c:	4b29      	ldr	r3, [pc, #164]	; (8004fb4 <main+0x130>)
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	2300      	movs	r3, #0
 8004f12:	2200      	movs	r2, #0
 8004f14:	2100      	movs	r1, #0
 8004f16:	f7fb fdad 	bl	8000a74 <xQueueGenericSend>

    		/* The queue is created to hold a maximum of 1 Element. */
    	    xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2104      	movs	r1, #4
 8004f1e:	2001      	movs	r0, #1
 8004f20:	f7fb fd19 	bl	8000956 <xQueueGenericCreate>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4a24      	ldr	r2, [pc, #144]	; (8004fb8 <main+0x134>)
 8004f28:	6013      	str	r3, [r2, #0]

    	    /* Check the semaphore and queue was created successfully. */
    	    if( (xWork != NULL) && (xWorkQueue != NULL) )
 8004f2a:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <main+0x130>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01b      	beq.n	8004f6a <main+0xe6>
 8004f32:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <main+0x134>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d017      	beq.n	8004f6a <main+0xe6>
    	    {

    			/* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
    	        xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, NULL );
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	2303      	movs	r3, #3
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	2300      	movs	r3, #0
 8004f44:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004f48:	491c      	ldr	r1, [pc, #112]	; (8004fbc <main+0x138>)
 8004f4a:	481d      	ldr	r0, [pc, #116]	; (8004fc0 <main+0x13c>)
 8004f4c:	f7fc fa14 	bl	8001378 <xTaskCreate>

    	        /* Create a employee task with less priority than manager */
    	        xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, NULL );
 8004f50:	2300      	movs	r3, #0
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	2301      	movs	r3, #1
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004f5e:	4919      	ldr	r1, [pc, #100]	; (8004fc4 <main+0x140>)
 8004f60:	4819      	ldr	r0, [pc, #100]	; (8004fc8 <main+0x144>)
 8004f62:	f7fc fa09 	bl	8001378 <xTaskCreate>

    	        /* Start the scheduler so the created tasks start executing. */
    	        vTaskStartScheduler();
 8004f66:	f7fc fb99 	bl	800169c <vTaskStartScheduler>
    	    }

    	    sprintf(usr_msg,"Queue/Sema create failed.. \r\n");
 8004f6a:	4918      	ldr	r1, [pc, #96]	; (8004fcc <main+0x148>)
 8004f6c:	4810      	ldr	r0, [pc, #64]	; (8004fb0 <main+0x12c>)
 8004f6e:	f007 fd07 	bl	800c980 <siprintf>
    	    USART_Send(usr_msg);
 8004f72:	480f      	ldr	r0, [pc, #60]	; (8004fb0 <main+0x12c>)
 8004f74:	f000 faaa 	bl	80054cc <USART_Send>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004f78:	2102      	movs	r1, #2
 8004f7a:	4809      	ldr	r0, [pc, #36]	; (8004fa0 <main+0x11c>)
 8004f7c:	f002 fd93 	bl	8007aa6 <HAL_GPIO_TogglePin>
  	  HAL_Delay(500);
 8004f80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f84:	f000 feda 	bl	8005d3c <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004f88:	2102      	movs	r1, #2
 8004f8a:	4805      	ldr	r0, [pc, #20]	; (8004fa0 <main+0x11c>)
 8004f8c:	f002 fd8b 	bl	8007aa6 <HAL_GPIO_TogglePin>
  	  HAL_Delay(500);
 8004f90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f94:	f000 fed2 	bl	8005d3c <HAL_Delay>
  	  Start_Counter++;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	607b      	str	r3, [r7, #4]
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004f9e:	e7eb      	b.n	8004f78 <main+0xf4>
 8004fa0:	58020800 	.word	0x58020800
 8004fa4:	e0001000 	.word	0xe0001000
 8004fa8:	0007a120 	.word	0x0007a120
 8004fac:	0800ddd8 	.word	0x0800ddd8
 8004fb0:	2407f0a8 	.word	0x2407f0a8
 8004fb4:	2407f1a4 	.word	0x2407f1a4
 8004fb8:	2407f1a8 	.word	0x2407f1a8
 8004fbc:	0800de0c 	.word	0x0800de0c
 8004fc0:	080053c1 	.word	0x080053c1
 8004fc4:	0800de14 	.word	0x0800de14
 8004fc8:	08005475 	.word	0x08005475
 8004fcc:	0800de20 	.word	0x0800de20

08004fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b09e      	sub	sp, #120	; 0x78
 8004fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fda:	224c      	movs	r2, #76	; 0x4c
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f007 fc88 	bl	800c8f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fe4:	f107 030c 	add.w	r3, r7, #12
 8004fe8:	2220      	movs	r2, #32
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f007 fc81 	bl	800c8f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004ff2:	2002      	movs	r0, #2
 8004ff4:	f002 fdf8 	bl	8007be8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	4b48      	ldr	r3, [pc, #288]	; (8005120 <SystemClock_Config+0x150>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4a47      	ldr	r2, [pc, #284]	; (8005120 <SystemClock_Config+0x150>)
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005008:	4b45      	ldr	r3, [pc, #276]	; (8005120 <SystemClock_Config+0x150>)
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	4b44      	ldr	r3, [pc, #272]	; (8005124 <SystemClock_Config+0x154>)
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	4a43      	ldr	r2, [pc, #268]	; (8005124 <SystemClock_Config+0x154>)
 8005018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800501c:	6193      	str	r3, [r2, #24]
 800501e:	4b41      	ldr	r3, [pc, #260]	; (8005124 <SystemClock_Config+0x154>)
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800502a:	bf00      	nop
 800502c:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <SystemClock_Config+0x154>)
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005038:	d1f8      	bne.n	800502c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800503a:	4b3b      	ldr	r3, [pc, #236]	; (8005128 <SystemClock_Config+0x158>)
 800503c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005040:	4a39      	ldr	r2, [pc, #228]	; (8005128 <SystemClock_Config+0x158>)
 8005042:	f043 0302 	orr.w	r3, r3, #2
 8005046:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800504a:	4b37      	ldr	r3, [pc, #220]	; (8005128 <SystemClock_Config+0x158>)
 800504c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005058:	2300      	movs	r3, #0
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4b31      	ldr	r3, [pc, #196]	; (8005124 <SystemClock_Config+0x154>)
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	4a30      	ldr	r2, [pc, #192]	; (8005124 <SystemClock_Config+0x154>)
 8005062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005066:	6193      	str	r3, [r2, #24]
 8005068:	4b2e      	ldr	r3, [pc, #184]	; (8005124 <SystemClock_Config+0x154>)
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <SystemClock_Config+0x150>)
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	4a2a      	ldr	r2, [pc, #168]	; (8005120 <SystemClock_Config+0x150>)
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800507e:	4b28      	ldr	r3, [pc, #160]	; (8005120 <SystemClock_Config+0x150>)
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800508a:	bf00      	nop
 800508c:	4b25      	ldr	r3, [pc, #148]	; (8005124 <SystemClock_Config+0x154>)
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005098:	d1f8      	bne.n	800508c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800509a:	2301      	movs	r3, #1
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800509e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050a4:	2302      	movs	r3, #2
 80050a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050a8:	2302      	movs	r3, #2
 80050aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80050ac:	2301      	movs	r3, #1
 80050ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80050b0:	2378      	movs	r3, #120	; 0x78
 80050b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80050b4:	2302      	movs	r3, #2
 80050b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80050b8:	230f      	movs	r3, #15
 80050ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80050bc:	2302      	movs	r3, #2
 80050be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80050c0:	230c      	movs	r3, #12
 80050c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80050c4:	2300      	movs	r3, #0
 80050c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050d0:	4618      	mov	r0, r3
 80050d2:	f002 fdd3 	bl	8007c7c <HAL_RCC_OscConfig>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80050dc:	f000 fa22 	bl	8005524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050e0:	233f      	movs	r3, #63	; 0x3f
 80050e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050e4:	2303      	movs	r3, #3
 80050e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80050ec:	2308      	movs	r3, #8
 80050ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80050f0:	2340      	movs	r3, #64	; 0x40
 80050f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80050f4:	2340      	movs	r3, #64	; 0x40
 80050f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80050f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80050fe:	2340      	movs	r3, #64	; 0x40
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005102:	f107 030c 	add.w	r3, r7, #12
 8005106:	2104      	movs	r1, #4
 8005108:	4618      	mov	r0, r3
 800510a:	f003 f9e5 	bl	80084d8 <HAL_RCC_ClockConfig>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8005114:	f000 fa06 	bl	8005524 <Error_Handler>
  }
}
 8005118:	bf00      	nop
 800511a:	3778      	adds	r7, #120	; 0x78
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	58000400 	.word	0x58000400
 8005124:	58024800 	.word	0x58024800
 8005128:	58024400 	.word	0x58024400

0800512c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8005130:	4b2e      	ldr	r3, [pc, #184]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005132:	4a2f      	ldr	r2, [pc, #188]	; (80051f0 <MX_FDCAN2_Init+0xc4>)
 8005134:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8005136:	4b2d      	ldr	r3, [pc, #180]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005138:	2200      	movs	r2, #0
 800513a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800513c:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 800513e:	2200      	movs	r2, #0
 8005140:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8005142:	4b2a      	ldr	r3, [pc, #168]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005144:	2200      	movs	r2, #0
 8005146:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8005148:	4b28      	ldr	r3, [pc, #160]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 800514a:	2200      	movs	r2, #0
 800514c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800514e:	4b27      	ldr	r3, [pc, #156]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005150:	2200      	movs	r2, #0
 8005152:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8005154:	4b25      	ldr	r3, [pc, #148]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005156:	2210      	movs	r2, #16
 8005158:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800515a:	4b24      	ldr	r3, [pc, #144]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 800515c:	2201      	movs	r2, #1
 800515e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8005160:	4b22      	ldr	r3, [pc, #136]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005162:	2202      	movs	r2, #2
 8005164:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8005166:	4b21      	ldr	r3, [pc, #132]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005168:	2202      	movs	r2, #2
 800516a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800516c:	4b1f      	ldr	r3, [pc, #124]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 800516e:	2201      	movs	r2, #1
 8005170:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8005172:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005174:	2201      	movs	r2, #1
 8005176:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8005178:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 800517a:	2201      	movs	r2, #1
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800517e:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005180:	2201      	movs	r2, #1
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8005184:	4b19      	ldr	r3, [pc, #100]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005186:	2200      	movs	r2, #0
 8005188:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800518a:	4b18      	ldr	r3, [pc, #96]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 800518c:	2200      	movs	r2, #0
 800518e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8005190:	4b16      	ldr	r3, [pc, #88]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005192:	2200      	movs	r2, #0
 8005194:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8005196:	4b15      	ldr	r3, [pc, #84]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 8005198:	2200      	movs	r2, #0
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800519c:	4b13      	ldr	r3, [pc, #76]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 800519e:	2204      	movs	r2, #4
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80051a2:	4b12      	ldr	r3, [pc, #72]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80051a8:	4b10      	ldr	r3, [pc, #64]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 80051aa:	2204      	movs	r2, #4
 80051ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80051ae:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80051b4:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 80051b6:	2204      	movs	r2, #4
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80051ba:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 80051bc:	2200      	movs	r2, #0
 80051be:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 80051d4:	2204      	movs	r2, #4
 80051d6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80051d8:	4804      	ldr	r0, [pc, #16]	; (80051ec <MX_FDCAN2_Init+0xc0>)
 80051da:	f001 fc23 	bl	8006a24 <HAL_FDCAN_Init>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80051e4:	f000 f99e 	bl	8005524 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80051e8:	bf00      	nop
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	2407ec74 	.word	0x2407ec74
 80051f0:	4000a400 	.word	0x4000a400

080051f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80051f8:	4b22      	ldr	r3, [pc, #136]	; (8005284 <MX_USART3_UART_Init+0x90>)
 80051fa:	4a23      	ldr	r2, [pc, #140]	; (8005288 <MX_USART3_UART_Init+0x94>)
 80051fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80051fe:	4b21      	ldr	r3, [pc, #132]	; (8005284 <MX_USART3_UART_Init+0x90>)
 8005200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005204:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005206:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <MX_USART3_UART_Init+0x90>)
 8005208:	2200      	movs	r2, #0
 800520a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800520c:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <MX_USART3_UART_Init+0x90>)
 800520e:	2200      	movs	r2, #0
 8005210:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <MX_USART3_UART_Init+0x90>)
 8005214:	2200      	movs	r2, #0
 8005216:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005218:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <MX_USART3_UART_Init+0x90>)
 800521a:	220c      	movs	r2, #12
 800521c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800521e:	4b19      	ldr	r3, [pc, #100]	; (8005284 <MX_USART3_UART_Init+0x90>)
 8005220:	2200      	movs	r2, #0
 8005222:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005224:	4b17      	ldr	r3, [pc, #92]	; (8005284 <MX_USART3_UART_Init+0x90>)
 8005226:	2200      	movs	r2, #0
 8005228:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800522a:	4b16      	ldr	r3, [pc, #88]	; (8005284 <MX_USART3_UART_Init+0x90>)
 800522c:	2200      	movs	r2, #0
 800522e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005230:	4b14      	ldr	r3, [pc, #80]	; (8005284 <MX_USART3_UART_Init+0x90>)
 8005232:	2200      	movs	r2, #0
 8005234:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005236:	4b13      	ldr	r3, [pc, #76]	; (8005284 <MX_USART3_UART_Init+0x90>)
 8005238:	2200      	movs	r2, #0
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800523c:	4811      	ldr	r0, [pc, #68]	; (8005284 <MX_USART3_UART_Init+0x90>)
 800523e:	f005 fb5b 	bl	800a8f8 <HAL_UART_Init>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005248:	f000 f96c 	bl	8005524 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800524c:	2100      	movs	r1, #0
 800524e:	480d      	ldr	r0, [pc, #52]	; (8005284 <MX_USART3_UART_Init+0x90>)
 8005250:	f007 f812 	bl	800c278 <HAL_UARTEx_SetTxFifoThreshold>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800525a:	f000 f963 	bl	8005524 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800525e:	2100      	movs	r1, #0
 8005260:	4808      	ldr	r0, [pc, #32]	; (8005284 <MX_USART3_UART_Init+0x90>)
 8005262:	f007 f847 	bl	800c2f4 <HAL_UARTEx_SetRxFifoThreshold>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800526c:	f000 f95a 	bl	8005524 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005270:	4804      	ldr	r0, [pc, #16]	; (8005284 <MX_USART3_UART_Init+0x90>)
 8005272:	f006 ffc8 	bl	800c206 <HAL_UARTEx_DisableFifoMode>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800527c:	f000 f952 	bl	8005524 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005280:	bf00      	nop
 8005282:	bd80      	pop	{r7, pc}
 8005284:	2407ed14 	.word	0x2407ed14
 8005288:	40004800 	.word	0x40004800

0800528c <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005290:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8005292:	4a0e      	ldr	r2, [pc, #56]	; (80052cc <MX_USB_OTG_FS_HCD_Init+0x40>)
 8005294:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8005298:	2210      	movs	r2, #16
 800529a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800529e:	2201      	movs	r2, #1
 80052a0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80052a2:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80052a8:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80052aa:	2202      	movs	r2, #2
 80052ac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80052b4:	4804      	ldr	r0, [pc, #16]	; (80052c8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80052b6:	f002 fc35 	bl	8007b24 <HAL_HCD_Init>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 80052c0:	f000 f930 	bl	8005524 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80052c4:	bf00      	nop
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	2407eda4 	.word	0x2407eda4
 80052cc:	40080000 	.word	0x40080000

080052d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d6:	f107 0314 	add.w	r3, r7, #20
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	605a      	str	r2, [r3, #4]
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	60da      	str	r2, [r3, #12]
 80052e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052e6:	4b34      	ldr	r3, [pc, #208]	; (80053b8 <MX_GPIO_Init+0xe8>)
 80052e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ec:	4a32      	ldr	r2, [pc, #200]	; (80053b8 <MX_GPIO_Init+0xe8>)
 80052ee:	f043 0304 	orr.w	r3, r3, #4
 80052f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052f6:	4b30      	ldr	r3, [pc, #192]	; (80053b8 <MX_GPIO_Init+0xe8>)
 80052f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005304:	4b2c      	ldr	r3, [pc, #176]	; (80053b8 <MX_GPIO_Init+0xe8>)
 8005306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800530a:	4a2b      	ldr	r2, [pc, #172]	; (80053b8 <MX_GPIO_Init+0xe8>)
 800530c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005314:	4b28      	ldr	r3, [pc, #160]	; (80053b8 <MX_GPIO_Init+0xe8>)
 8005316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005322:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <MX_GPIO_Init+0xe8>)
 8005324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005328:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <MX_GPIO_Init+0xe8>)
 800532a:	f043 0302 	orr.w	r3, r3, #2
 800532e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005332:	4b21      	ldr	r3, [pc, #132]	; (80053b8 <MX_GPIO_Init+0xe8>)
 8005334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005340:	4b1d      	ldr	r3, [pc, #116]	; (80053b8 <MX_GPIO_Init+0xe8>)
 8005342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005346:	4a1c      	ldr	r2, [pc, #112]	; (80053b8 <MX_GPIO_Init+0xe8>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <MX_GPIO_Init+0xe8>)
 8005352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 800535e:	2201      	movs	r2, #1
 8005360:	2107      	movs	r1, #7
 8005362:	4816      	ldr	r0, [pc, #88]	; (80053bc <MX_GPIO_Init+0xec>)
 8005364:	f002 fb86 	bl	8007a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800536c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800536e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005374:	2300      	movs	r3, #0
 8005376:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005378:	f107 0314 	add.w	r3, r7, #20
 800537c:	4619      	mov	r1, r3
 800537e:	480f      	ldr	r0, [pc, #60]	; (80053bc <MX_GPIO_Init+0xec>)
 8005380:	f002 f9c8 	bl	8007714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005384:	2307      	movs	r3, #7
 8005386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005388:	2301      	movs	r3, #1
 800538a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005390:	2300      	movs	r3, #0
 8005392:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005394:	f107 0314 	add.w	r3, r7, #20
 8005398:	4619      	mov	r1, r3
 800539a:	4808      	ldr	r0, [pc, #32]	; (80053bc <MX_GPIO_Init+0xec>)
 800539c:	f002 f9ba 	bl	8007714 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80053a0:	2200      	movs	r2, #0
 80053a2:	2105      	movs	r1, #5
 80053a4:	2028      	movs	r0, #40	; 0x28
 80053a6:	f000 fdb1 	bl	8005f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80053aa:	2028      	movs	r0, #40	; 0x28
 80053ac:	f000 fdc8 	bl	8005f40 <HAL_NVIC_EnableIRQ>

}
 80053b0:	bf00      	nop
 80053b2:	3728      	adds	r7, #40	; 0x28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	58024400 	.word	0x58024400
 80053bc:	58020800 	.word	0x58020800

080053c0 <vManagerTask>:

/* USER CODE BEGIN 4 */

void vManagerTask( void *pvParameters )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	 portBASE_TYPE xStatus;

   /* The semaphore is created in the 'empty' state, meaning the semaphore must
	 first be given using the xSemaphoreGive() API function before it
	 can subsequently be taken (obtained) */
   xSemaphoreGive( xWork);
 80053c8:	4b18      	ldr	r3, [pc, #96]	; (800542c <vManagerTask+0x6c>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	2300      	movs	r3, #0
 80053ce:	2200      	movs	r2, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	f7fb fb4f 	bl	8000a74 <xQueueGenericSend>

   for( ;; )
   {
       /* get a work ticket id(some random number) */
       xWorkTicketId = ( rand() & 0x1FF );
 80053d6:	f007 fa95 	bl	800c904 <rand>
 80053da:	4603      	mov	r3, r0
 80053dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e0:	60bb      	str	r3, [r7, #8]

		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY ); //Post an item on back of the queue
 80053e2:	4b13      	ldr	r3, [pc, #76]	; (8005430 <vManagerTask+0x70>)
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	f107 0108 	add.w	r1, r7, #8
 80053ea:	2300      	movs	r3, #0
 80053ec:	f04f 32ff 	mov.w	r2, #4294967295
 80053f0:	f7fb fb40 	bl	8000a74 <xQueueGenericSend>
 80053f4:	60f8      	str	r0, [r7, #12]

		if( xStatus != pdPASS )
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d007      	beq.n	800540c <vManagerTask+0x4c>
		{
			sprintf(usr_msg,"Could not send to the queue.\r\n");
 80053fc:	490d      	ldr	r1, [pc, #52]	; (8005434 <vManagerTask+0x74>)
 80053fe:	480e      	ldr	r0, [pc, #56]	; (8005438 <vManagerTask+0x78>)
 8005400:	f007 fabe 	bl	800c980 <siprintf>
			USART_Send(usr_msg);
 8005404:	480c      	ldr	r0, [pc, #48]	; (8005438 <vManagerTask+0x78>)
 8005406:	f000 f861 	bl	80054cc <USART_Send>
 800540a:	e7e4      	b.n	80053d6 <vManagerTask+0x16>

		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive( xWork);
 800540c:	4b07      	ldr	r3, [pc, #28]	; (800542c <vManagerTask+0x6c>)
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	2300      	movs	r3, #0
 8005412:	2200      	movs	r2, #0
 8005414:	2100      	movs	r1, #0
 8005416:	f7fb fb2d 	bl	8000a74 <xQueueGenericSend>
			/* after assigning the work , just yield the processor because nothing to do */
			taskYIELD();
 800541a:	4b08      	ldr	r3, [pc, #32]	; (800543c <vManagerTask+0x7c>)
 800541c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	f3bf 8f6f 	isb	sy
       xWorkTicketId = ( rand() & 0x1FF );
 800542a:	e7d4      	b.n	80053d6 <vManagerTask+0x16>
 800542c:	2407f1a4 	.word	0x2407f1a4
 8005430:	2407f1a8 	.word	0x2407f1a8
 8005434:	0800de40 	.word	0x0800de40
 8005438:	2407f0a8 	.word	0x2407f0a8
 800543c:	e000ed04 	.word	0xe000ed04

08005440 <EmployeeDoWork>:
   }
}
/*-----------------------------------------------------------*/

void EmployeeDoWork(unsigned char TicketId)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */
	sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n",TicketId);
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	461a      	mov	r2, r3
 800544e:	4907      	ldr	r1, [pc, #28]	; (800546c <EmployeeDoWork+0x2c>)
 8005450:	4807      	ldr	r0, [pc, #28]	; (8005470 <EmployeeDoWork+0x30>)
 8005452:	f007 fa95 	bl	800c980 <siprintf>
	USART_Send(usr_msg);
 8005456:	4806      	ldr	r0, [pc, #24]	; (8005470 <EmployeeDoWork+0x30>)
 8005458:	f000 f838 	bl	80054cc <USART_Send>
	vTaskDelay(TicketId);
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	4618      	mov	r0, r3
 8005460:	f7fc f8e2 	bl	8001628 <vTaskDelay>
}
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	0800de60 	.word	0x0800de60
 8005470:	2407f0a8 	.word	0x2407f0a8

08005474 <vEmployeeTask>:

static void vEmployeeTask( void *pvParameters )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;
   /* As per most tasks, this task is implemented within an infinite loop. */
   for( ;; )
   {
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
		xSemaphoreTake( xWork, 0 );
 800547c:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <vEmployeeTask+0x48>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2100      	movs	r1, #0
 8005482:	4618      	mov	r0, r3
 8005484:	f7fb fd18 	bl	8000eb8 <xQueueSemaphoreTake>

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
 8005488:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <vEmployeeTask+0x4c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f107 010b 	add.w	r1, r7, #11
 8005490:	2200      	movs	r2, #0
 8005492:	4618      	mov	r0, r3
 8005494:	f7fb fc04 	bl	8000ca0 <xQueueReceive>
 8005498:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS )
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d104      	bne.n	80054aa <vEmployeeTask+0x36>
		{
		  /* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 80054a0:	7afb      	ldrb	r3, [r7, #11]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff ffcc 	bl	8005440 <EmployeeDoWork>
 80054a8:	e7e8      	b.n	800547c <vEmployeeTask+0x8>
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			sprintf(usr_msg,"Employee task : Queue is empty , nothing to do.\r\n");
 80054aa:	4906      	ldr	r1, [pc, #24]	; (80054c4 <vEmployeeTask+0x50>)
 80054ac:	4806      	ldr	r0, [pc, #24]	; (80054c8 <vEmployeeTask+0x54>)
 80054ae:	f007 fa67 	bl	800c980 <siprintf>
			USART_Send(usr_msg);
 80054b2:	4805      	ldr	r0, [pc, #20]	; (80054c8 <vEmployeeTask+0x54>)
 80054b4:	f000 f80a 	bl	80054cc <USART_Send>
		xSemaphoreTake( xWork, 0 );
 80054b8:	e7e0      	b.n	800547c <vEmployeeTask+0x8>
 80054ba:	bf00      	nop
 80054bc:	2407f1a4 	.word	0x2407f1a4
 80054c0:	2407f1a8 	.word	0x2407f1a8
 80054c4:	0800de8c 	.word	0x0800de8c
 80054c8:	2407f0a8 	.word	0x2407f0a8

080054cc <USART_Send>:
//	va_end(args);
//
// }

void USART_Send(char* user_data)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Transmit(&huart3,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY) != HAL_OK)
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fa ff4d 	bl	8000374 <strlen>
 80054da:	4603      	mov	r3, r0
 80054dc:	b29a      	uxth	r2, r3
 80054de:	f04f 33ff 	mov.w	r3, #4294967295
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	4805      	ldr	r0, [pc, #20]	; (80054fc <USART_Send+0x30>)
 80054e6:	f005 fa57 	bl	800a998 <HAL_UART_Transmit>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <USART_Send+0x28>
	{
		// Error occurred
		Error_Handler();
 80054f0:	f000 f818 	bl	8005524 <Error_Handler>
	}
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	2407ed14 	.word	0x2407ed14

08005500 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a04      	ldr	r2, [pc, #16]	; (8005520 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d101      	bne.n	8005516 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005512:	f000 fbf3 	bl	8005cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40001000 	.word	0x40001000

08005524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005528:	b672      	cpsid	i
}
 800552a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800552c:	2101      	movs	r1, #1
 800552e:	4807      	ldr	r0, [pc, #28]	; (800554c <Error_Handler+0x28>)
 8005530:	f002 fab9 	bl	8007aa6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8005534:	2064      	movs	r0, #100	; 0x64
 8005536:	f000 fc01 	bl	8005d3c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800553a:	2101      	movs	r1, #1
 800553c:	4803      	ldr	r0, [pc, #12]	; (800554c <Error_Handler+0x28>)
 800553e:	f002 fab2 	bl	8007aa6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8005542:	2064      	movs	r0, #100	; 0x64
 8005544:	f000 fbfa 	bl	8005d3c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8005548:	e7f0      	b.n	800552c <Error_Handler+0x8>
 800554a:	bf00      	nop
 800554c:	58020800 	.word	0x58020800

08005550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <HAL_MspInit+0x30>)
 8005558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800555c:	4a08      	ldr	r2, [pc, #32]	; (8005580 <HAL_MspInit+0x30>)
 800555e:	f043 0302 	orr.w	r3, r3, #2
 8005562:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_MspInit+0x30>)
 8005568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	607b      	str	r3, [r7, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	58024400 	.word	0x58024400

08005584 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b0b8      	sub	sp, #224	; 0xe0
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800558c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	605a      	str	r2, [r3, #4]
 8005596:	609a      	str	r2, [r3, #8]
 8005598:	60da      	str	r2, [r3, #12]
 800559a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800559c:	f107 0310 	add.w	r3, r7, #16
 80055a0:	22bc      	movs	r2, #188	; 0xbc
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f007 f9a5 	bl	800c8f4 <memset>
  if(hfdcan->Instance==FDCAN2)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2d      	ldr	r2, [pc, #180]	; (8005664 <HAL_FDCAN_MspInit+0xe0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d153      	bne.n	800565c <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80055b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80055ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055be:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055c0:	f107 0310 	add.w	r3, r7, #16
 80055c4:	4618      	mov	r0, r3
 80055c6:	f003 fb55 	bl	8008c74 <HAL_RCCEx_PeriphCLKConfig>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80055d0:	f7ff ffa8 	bl	8005524 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80055d4:	4b24      	ldr	r3, [pc, #144]	; (8005668 <HAL_FDCAN_MspInit+0xe4>)
 80055d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80055da:	4a23      	ldr	r2, [pc, #140]	; (8005668 <HAL_FDCAN_MspInit+0xe4>)
 80055dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80055e4:	4b20      	ldr	r3, [pc, #128]	; (8005668 <HAL_FDCAN_MspInit+0xe4>)
 80055e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80055ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055f2:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <HAL_FDCAN_MspInit+0xe4>)
 80055f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055f8:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <HAL_FDCAN_MspInit+0xe4>)
 80055fa:	f043 0302 	orr.w	r3, r3, #2
 80055fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005602:	4b19      	ldr	r3, [pc, #100]	; (8005668 <HAL_FDCAN_MspInit+0xe4>)
 8005604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005610:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005614:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005618:	2302      	movs	r3, #2
 800561a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561e:	2300      	movs	r3, #0
 8005620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005624:	2300      	movs	r3, #0
 8005626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800562a:	2309      	movs	r3, #9
 800562c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005630:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005634:	4619      	mov	r1, r3
 8005636:	480d      	ldr	r0, [pc, #52]	; (800566c <HAL_FDCAN_MspInit+0xe8>)
 8005638:	f002 f86c 	bl	8007714 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 800563c:	2200      	movs	r2, #0
 800563e:	2100      	movs	r1, #0
 8005640:	2014      	movs	r0, #20
 8005642:	f000 fc63 	bl	8005f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8005646:	2014      	movs	r0, #20
 8005648:	f000 fc7a 	bl	8005f40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 800564c:	2200      	movs	r2, #0
 800564e:	2100      	movs	r1, #0
 8005650:	2016      	movs	r0, #22
 8005652:	f000 fc5b 	bl	8005f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8005656:	2016      	movs	r0, #22
 8005658:	f000 fc72 	bl	8005f40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800565c:	bf00      	nop
 800565e:	37e0      	adds	r7, #224	; 0xe0
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	4000a400 	.word	0x4000a400
 8005668:	58024400 	.word	0x58024400
 800566c:	58020400 	.word	0x58020400

08005670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b0b8      	sub	sp, #224	; 0xe0
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005678:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	605a      	str	r2, [r3, #4]
 8005682:	609a      	str	r2, [r3, #8]
 8005684:	60da      	str	r2, [r3, #12]
 8005686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005688:	f107 0310 	add.w	r3, r7, #16
 800568c:	22bc      	movs	r2, #188	; 0xbc
 800568e:	2100      	movs	r1, #0
 8005690:	4618      	mov	r0, r3
 8005692:	f007 f92f 	bl	800c8f4 <memset>
  if(huart->Instance==USART3)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a29      	ldr	r2, [pc, #164]	; (8005740 <HAL_UART_MspInit+0xd0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d14a      	bne.n	8005736 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80056a0:	2302      	movs	r3, #2
 80056a2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80056a4:	2300      	movs	r3, #0
 80056a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056aa:	f107 0310 	add.w	r3, r7, #16
 80056ae:	4618      	mov	r0, r3
 80056b0:	f003 fae0 	bl	8008c74 <HAL_RCCEx_PeriphCLKConfig>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80056ba:	f7ff ff33 	bl	8005524 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80056be:	4b21      	ldr	r3, [pc, #132]	; (8005744 <HAL_UART_MspInit+0xd4>)
 80056c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056c4:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <HAL_UART_MspInit+0xd4>)
 80056c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80056ce:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HAL_UART_MspInit+0xd4>)
 80056d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056dc:	4b19      	ldr	r3, [pc, #100]	; (8005744 <HAL_UART_MspInit+0xd4>)
 80056de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056e2:	4a18      	ldr	r2, [pc, #96]	; (8005744 <HAL_UART_MspInit+0xd4>)
 80056e4:	f043 0302 	orr.w	r3, r3, #2
 80056e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056ec:	4b15      	ldr	r3, [pc, #84]	; (8005744 <HAL_UART_MspInit+0xd4>)
 80056ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005702:	2302      	movs	r3, #2
 8005704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	2300      	movs	r3, #0
 800570a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800570e:	2300      	movs	r3, #0
 8005710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005714:	2307      	movs	r3, #7
 8005716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800571e:	4619      	mov	r1, r3
 8005720:	4809      	ldr	r0, [pc, #36]	; (8005748 <HAL_UART_MspInit+0xd8>)
 8005722:	f001 fff7 	bl	8007714 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005726:	2200      	movs	r2, #0
 8005728:	2100      	movs	r1, #0
 800572a:	2027      	movs	r0, #39	; 0x27
 800572c:	f000 fbee 	bl	8005f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005730:	2027      	movs	r0, #39	; 0x27
 8005732:	f000 fc05 	bl	8005f40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005736:	bf00      	nop
 8005738:	37e0      	adds	r7, #224	; 0xe0
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40004800 	.word	0x40004800
 8005744:	58024400 	.word	0x58024400
 8005748:	58020400 	.word	0x58020400

0800574c <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b0b8      	sub	sp, #224	; 0xe0
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005754:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	605a      	str	r2, [r3, #4]
 800575e:	609a      	str	r2, [r3, #8]
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005764:	f107 0310 	add.w	r3, r7, #16
 8005768:	22bc      	movs	r2, #188	; 0xbc
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f007 f8c1 	bl	800c8f4 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a27      	ldr	r2, [pc, #156]	; (8005814 <HAL_HCD_MspInit+0xc8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d146      	bne.n	800580a <HAL_HCD_MspInit+0xbe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800577c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005780:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8005782:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800578a:	f107 0310 	add.w	r3, r7, #16
 800578e:	4618      	mov	r0, r3
 8005790:	f003 fa70 	bl	8008c74 <HAL_RCCEx_PeriphCLKConfig>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 800579a:	f7ff fec3 	bl	8005524 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800579e:	f002 fa5d 	bl	8007c5c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057a2:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <HAL_HCD_MspInit+0xcc>)
 80057a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057a8:	4a1b      	ldr	r2, [pc, #108]	; (8005818 <HAL_HCD_MspInit+0xcc>)
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057b2:	4b19      	ldr	r3, [pc, #100]	; (8005818 <HAL_HCD_MspInit+0xcc>)
 80057b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80057c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80057c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c8:	2302      	movs	r3, #2
 80057ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057d4:	2300      	movs	r3, #0
 80057d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80057da:	230a      	movs	r3, #10
 80057dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80057e4:	4619      	mov	r1, r3
 80057e6:	480d      	ldr	r0, [pc, #52]	; (800581c <HAL_HCD_MspInit+0xd0>)
 80057e8:	f001 ff94 	bl	8007714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <HAL_HCD_MspInit+0xcc>)
 80057ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057f2:	4a09      	ldr	r2, [pc, #36]	; (8005818 <HAL_HCD_MspInit+0xcc>)
 80057f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <HAL_HCD_MspInit+0xcc>)
 80057fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800580a:	bf00      	nop
 800580c:	37e0      	adds	r7, #224	; 0xe0
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40080000 	.word	0x40080000
 8005818:	58024400 	.word	0x58024400
 800581c:	58020000 	.word	0x58020000

08005820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b090      	sub	sp, #64	; 0x40
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b0f      	cmp	r3, #15
 800582c:	d827      	bhi.n	800587e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800582e:	2200      	movs	r2, #0
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	2036      	movs	r0, #54	; 0x36
 8005834:	f000 fb6a 	bl	8005f0c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005838:	2036      	movs	r0, #54	; 0x36
 800583a:	f000 fb81 	bl	8005f40 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800583e:	4a29      	ldr	r2, [pc, #164]	; (80058e4 <HAL_InitTick+0xc4>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005844:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <HAL_InitTick+0xc8>)
 8005846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800584a:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <HAL_InitTick+0xc8>)
 800584c:	f043 0310 	orr.w	r3, r3, #16
 8005850:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005854:	4b24      	ldr	r3, [pc, #144]	; (80058e8 <HAL_InitTick+0xc8>)
 8005856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005862:	f107 0210 	add.w	r2, r7, #16
 8005866:	f107 0314 	add.w	r3, r7, #20
 800586a:	4611      	mov	r1, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f003 f9bf 	bl	8008bf0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <HAL_InitTick+0x6a>
 800587c:	e001      	b.n	8005882 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e02b      	b.n	80058da <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005882:	f003 f989 	bl	8008b98 <HAL_RCC_GetPCLK1Freq>
 8005886:	63f8      	str	r0, [r7, #60]	; 0x3c
 8005888:	e004      	b.n	8005894 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800588a:	f003 f985 	bl	8008b98 <HAL_RCC_GetPCLK1Freq>
 800588e:	4603      	mov	r3, r0
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005896:	4a15      	ldr	r2, [pc, #84]	; (80058ec <HAL_InitTick+0xcc>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	0c9b      	lsrs	r3, r3, #18
 800589e:	3b01      	subs	r3, #1
 80058a0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80058a2:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <HAL_InitTick+0xd0>)
 80058a4:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <HAL_InitTick+0xd4>)
 80058a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <HAL_InitTick+0xd0>)
 80058aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80058ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80058b0:	4a0f      	ldr	r2, [pc, #60]	; (80058f0 <HAL_InitTick+0xd0>)
 80058b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80058b6:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <HAL_InitTick+0xd0>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058bc:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <HAL_InitTick+0xd0>)
 80058be:	2200      	movs	r2, #0
 80058c0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80058c2:	480b      	ldr	r0, [pc, #44]	; (80058f0 <HAL_InitTick+0xd0>)
 80058c4:	f004 fd3e 	bl	800a344 <HAL_TIM_Base_Init>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80058ce:	4808      	ldr	r0, [pc, #32]	; (80058f0 <HAL_InitTick+0xd0>)
 80058d0:	f004 fd9a 	bl	800a408 <HAL_TIM_Base_Start_IT>
 80058d4:	4603      	mov	r3, r0
 80058d6:	e000      	b.n	80058da <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3740      	adds	r7, #64	; 0x40
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	24000018 	.word	0x24000018
 80058e8:	58024400 	.word	0x58024400
 80058ec:	431bde83 	.word	0x431bde83
 80058f0:	2407f1ac 	.word	0x2407f1ac
 80058f4:	40001000 	.word	0x40001000

080058f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80058fc:	2102      	movs	r1, #2
 80058fe:	4807      	ldr	r0, [pc, #28]	; (800591c <NMI_Handler+0x24>)
 8005900:	f002 f8d1 	bl	8007aa6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005904:	2064      	movs	r0, #100	; 0x64
 8005906:	f000 fa19 	bl	8005d3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 800590a:	2102      	movs	r1, #2
 800590c:	4803      	ldr	r0, [pc, #12]	; (800591c <NMI_Handler+0x24>)
 800590e:	f002 f8ca 	bl	8007aa6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005912:	2064      	movs	r0, #100	; 0x64
 8005914:	f000 fa12 	bl	8005d3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005918:	e7f0      	b.n	80058fc <NMI_Handler+0x4>
 800591a:	bf00      	nop
 800591c:	58020800 	.word	0x58020800

08005920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005924:	2102      	movs	r1, #2
 8005926:	4807      	ldr	r0, [pc, #28]	; (8005944 <HardFault_Handler+0x24>)
 8005928:	f002 f8bd 	bl	8007aa6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800592c:	2064      	movs	r0, #100	; 0x64
 800592e:	f000 fa05 	bl	8005d3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005932:	2102      	movs	r1, #2
 8005934:	4803      	ldr	r0, [pc, #12]	; (8005944 <HardFault_Handler+0x24>)
 8005936:	f002 f8b6 	bl	8007aa6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800593a:	2064      	movs	r0, #100	; 0x64
 800593c:	f000 f9fe 	bl	8005d3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005940:	e7f0      	b.n	8005924 <HardFault_Handler+0x4>
 8005942:	bf00      	nop
 8005944:	58020800 	.word	0x58020800

08005948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 800594c:	2102      	movs	r1, #2
 800594e:	4807      	ldr	r0, [pc, #28]	; (800596c <MemManage_Handler+0x24>)
 8005950:	f002 f8a9 	bl	8007aa6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005954:	2064      	movs	r0, #100	; 0x64
 8005956:	f000 f9f1 	bl	8005d3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 800595a:	2102      	movs	r1, #2
 800595c:	4803      	ldr	r0, [pc, #12]	; (800596c <MemManage_Handler+0x24>)
 800595e:	f002 f8a2 	bl	8007aa6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005962:	2064      	movs	r0, #100	; 0x64
 8005964:	f000 f9ea 	bl	8005d3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005968:	e7f0      	b.n	800594c <MemManage_Handler+0x4>
 800596a:	bf00      	nop
 800596c:	58020800 	.word	0x58020800

08005970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005974:	2102      	movs	r1, #2
 8005976:	4807      	ldr	r0, [pc, #28]	; (8005994 <BusFault_Handler+0x24>)
 8005978:	f002 f895 	bl	8007aa6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800597c:	2064      	movs	r0, #100	; 0x64
 800597e:	f000 f9dd 	bl	8005d3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005982:	2102      	movs	r1, #2
 8005984:	4803      	ldr	r0, [pc, #12]	; (8005994 <BusFault_Handler+0x24>)
 8005986:	f002 f88e 	bl	8007aa6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800598a:	2064      	movs	r0, #100	; 0x64
 800598c:	f000 f9d6 	bl	8005d3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005990:	e7f0      	b.n	8005974 <BusFault_Handler+0x4>
 8005992:	bf00      	nop
 8005994:	58020800 	.word	0x58020800

08005998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 800599c:	2102      	movs	r1, #2
 800599e:	4807      	ldr	r0, [pc, #28]	; (80059bc <UsageFault_Handler+0x24>)
 80059a0:	f002 f881 	bl	8007aa6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80059a4:	2064      	movs	r0, #100	; 0x64
 80059a6:	f000 f9c9 	bl	8005d3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80059aa:	2102      	movs	r1, #2
 80059ac:	4803      	ldr	r0, [pc, #12]	; (80059bc <UsageFault_Handler+0x24>)
 80059ae:	f002 f87a 	bl	8007aa6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80059b2:	2064      	movs	r0, #100	; 0x64
 80059b4:	f000 f9c2 	bl	8005d3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80059b8:	e7f0      	b.n	800599c <UsageFault_Handler+0x4>
 80059ba:	bf00      	nop
 80059bc:	58020800 	.word	0x58020800

080059c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059c4:	bf00      	nop
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80059d4:	4802      	ldr	r0, [pc, #8]	; (80059e0 <FDCAN2_IT0_IRQHandler+0x10>)
 80059d6:	f001 fa03 	bl	8006de0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80059da:	bf00      	nop
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	2407ec74 	.word	0x2407ec74

080059e4 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80059e8:	4802      	ldr	r0, [pc, #8]	; (80059f4 <FDCAN2_IT1_IRQHandler+0x10>)
 80059ea:	f001 f9f9 	bl	8006de0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 80059ee:	bf00      	nop
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	2407ec74 	.word	0x2407ec74

080059f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80059fc:	4802      	ldr	r0, [pc, #8]	; (8005a08 <USART3_IRQHandler+0x10>)
 80059fe:	f005 f861 	bl	800aac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005a02:	bf00      	nop
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	2407ed14 	.word	0x2407ed14

08005a0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005a10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005a14:	f002 f861 	bl	8007ada <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005a18:	bf00      	nop
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005a20:	4802      	ldr	r0, [pc, #8]	; (8005a2c <TIM6_DAC_IRQHandler+0x10>)
 8005a22:	f004 fd69 	bl	800a4f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005a26:	bf00      	nop
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	2407f1ac 	.word	0x2407f1ac

08005a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
	return 1;
 8005a34:	2301      	movs	r3, #1
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <_kill>:

int _kill(int pid, int sig)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005a4a:	f006 ff0b 	bl	800c864 <__errno>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2216      	movs	r2, #22
 8005a52:	601a      	str	r2, [r3, #0]
	return -1;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <_exit>:

void _exit (int status)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005a68:	f04f 31ff 	mov.w	r1, #4294967295
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ffe7 	bl	8005a40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005a72:	e7fe      	b.n	8005a72 <_exit+0x12>

08005a74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e00a      	b.n	8005a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a86:	f3af 8000 	nop.w
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	60ba      	str	r2, [r7, #8]
 8005a92:	b2ca      	uxtb	r2, r1
 8005a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	dbf0      	blt.n	8005a86 <_read+0x12>
	}

return len;
 8005aa4:	687b      	ldr	r3, [r7, #4]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <_close>:
	}
	return len;
}

int _close(int file)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
	return -1;
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ad6:	605a      	str	r2, [r3, #4]
	return 0;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <_isatty>:

int _isatty(int file)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
	return 1;
 8005aee:	2301      	movs	r3, #1
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
	return 0;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005b1c:	4b39      	ldr	r3, [pc, #228]	; (8005c04 <SystemInit+0xec>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	4a38      	ldr	r2, [pc, #224]	; (8005c04 <SystemInit+0xec>)
 8005b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <SystemInit+0xf0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	2b06      	cmp	r3, #6
 8005b36:	d807      	bhi.n	8005b48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b38:	4b33      	ldr	r3, [pc, #204]	; (8005c08 <SystemInit+0xf0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 030f 	bic.w	r3, r3, #15
 8005b40:	4a31      	ldr	r2, [pc, #196]	; (8005c08 <SystemInit+0xf0>)
 8005b42:	f043 0307 	orr.w	r3, r3, #7
 8005b46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005b48:	4b30      	ldr	r3, [pc, #192]	; (8005c0c <SystemInit+0xf4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a2f      	ldr	r2, [pc, #188]	; (8005c0c <SystemInit+0xf4>)
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b54:	4b2d      	ldr	r3, [pc, #180]	; (8005c0c <SystemInit+0xf4>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005b5a:	4b2c      	ldr	r3, [pc, #176]	; (8005c0c <SystemInit+0xf4>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	492b      	ldr	r1, [pc, #172]	; (8005c0c <SystemInit+0xf4>)
 8005b60:	4b2b      	ldr	r3, [pc, #172]	; (8005c10 <SystemInit+0xf8>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b66:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <SystemInit+0xf0>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b72:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <SystemInit+0xf0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f023 030f 	bic.w	r3, r3, #15
 8005b7a:	4a23      	ldr	r2, [pc, #140]	; (8005c08 <SystemInit+0xf0>)
 8005b7c:	f043 0307 	orr.w	r3, r3, #7
 8005b80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005b82:	4b22      	ldr	r3, [pc, #136]	; (8005c0c <SystemInit+0xf4>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005b88:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <SystemInit+0xf4>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005b8e:	4b1f      	ldr	r3, [pc, #124]	; (8005c0c <SystemInit+0xf4>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005b94:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <SystemInit+0xf4>)
 8005b96:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <SystemInit+0xfc>)
 8005b98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005b9a:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <SystemInit+0xf4>)
 8005b9c:	4a1e      	ldr	r2, [pc, #120]	; (8005c18 <SystemInit+0x100>)
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <SystemInit+0xf4>)
 8005ba2:	4a1e      	ldr	r2, [pc, #120]	; (8005c1c <SystemInit+0x104>)
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005ba6:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <SystemInit+0xf4>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005bac:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <SystemInit+0xf4>)
 8005bae:	4a1b      	ldr	r2, [pc, #108]	; (8005c1c <SystemInit+0x104>)
 8005bb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005bb2:	4b16      	ldr	r3, [pc, #88]	; (8005c0c <SystemInit+0xf4>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005bb8:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <SystemInit+0xf4>)
 8005bba:	4a18      	ldr	r2, [pc, #96]	; (8005c1c <SystemInit+0x104>)
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005bbe:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <SystemInit+0xf4>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005bc4:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <SystemInit+0xf4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a10      	ldr	r2, [pc, #64]	; (8005c0c <SystemInit+0xf4>)
 8005bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005bd0:	4b0e      	ldr	r3, [pc, #56]	; (8005c0c <SystemInit+0xf4>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005bd6:	4b12      	ldr	r3, [pc, #72]	; (8005c20 <SystemInit+0x108>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <SystemInit+0x10c>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be2:	d202      	bcs.n	8005bea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005be4:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <SystemInit+0x110>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005bea:	4b10      	ldr	r3, [pc, #64]	; (8005c2c <SystemInit+0x114>)
 8005bec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bf2:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <SystemInit+0xec>)
 8005bf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bf8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005bfa:	bf00      	nop
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	e000ed00 	.word	0xe000ed00
 8005c08:	52002000 	.word	0x52002000
 8005c0c:	58024400 	.word	0x58024400
 8005c10:	eaf6ed7f 	.word	0xeaf6ed7f
 8005c14:	02020200 	.word	0x02020200
 8005c18:	01ff0000 	.word	0x01ff0000
 8005c1c:	01010280 	.word	0x01010280
 8005c20:	5c001000 	.word	0x5c001000
 8005c24:	ffff0000 	.word	0xffff0000
 8005c28:	51008108 	.word	0x51008108
 8005c2c:	52004000 	.word	0x52004000

08005c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005c34:	f7ff ff70 	bl	8005b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c38:	480c      	ldr	r0, [pc, #48]	; (8005c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005c3a:	490d      	ldr	r1, [pc, #52]	; (8005c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005c3c:	4a0d      	ldr	r2, [pc, #52]	; (8005c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c40:	e002      	b.n	8005c48 <LoopCopyDataInit>

08005c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c46:	3304      	adds	r3, #4

08005c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c4c:	d3f9      	bcc.n	8005c42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c4e:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005c50:	4c0a      	ldr	r4, [pc, #40]	; (8005c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c54:	e001      	b.n	8005c5a <LoopFillZerobss>

08005c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c58:	3204      	adds	r2, #4

08005c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c5c:	d3fb      	bcc.n	8005c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005c5e:	f006 fe07 	bl	800c870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c62:	f7ff f90f 	bl	8004e84 <main>
  bx  lr
 8005c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005c68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005c6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005c70:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8005c74:	0800e0c8 	.word	0x0800e0c8
  ldr r2, =_sbss
 8005c78:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8005c7c:	2407f210 	.word	0x2407f210

08005c80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c80:	e7fe      	b.n	8005c80 <ADC3_IRQHandler>
	...

08005c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c8a:	2003      	movs	r0, #3
 8005c8c:	f000 f933 	bl	8005ef6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c90:	f002 fdd8 	bl	8008844 <HAL_RCC_GetSysClockFreq>
 8005c94:	4602      	mov	r2, r0
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <HAL_Init+0x68>)
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	4913      	ldr	r1, [pc, #76]	; (8005cf0 <HAL_Init+0x6c>)
 8005ca2:	5ccb      	ldrb	r3, [r1, r3]
 8005ca4:	f003 031f 	and.w	r3, r3, #31
 8005ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <HAL_Init+0x68>)
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	4a0e      	ldr	r2, [pc, #56]	; (8005cf0 <HAL_Init+0x6c>)
 8005cb8:	5cd3      	ldrb	r3, [r2, r3]
 8005cba:	f003 031f 	and.w	r3, r3, #31
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	4a0b      	ldr	r2, [pc, #44]	; (8005cf4 <HAL_Init+0x70>)
 8005cc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cc8:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <HAL_Init+0x74>)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005cce:	200f      	movs	r0, #15
 8005cd0:	f7ff fda6 	bl	8005820 <HAL_InitTick>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e002      	b.n	8005ce4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005cde:	f7ff fc37 	bl	8005550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	58024400 	.word	0x58024400
 8005cf0:	0800df38 	.word	0x0800df38
 8005cf4:	24000014 	.word	0x24000014
 8005cf8:	24000010 	.word	0x24000010

08005cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <HAL_IncTick+0x20>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <HAL_IncTick+0x24>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	4a04      	ldr	r2, [pc, #16]	; (8005d20 <HAL_IncTick+0x24>)
 8005d0e:	6013      	str	r3, [r2, #0]
}
 8005d10:	bf00      	nop
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	2400001c 	.word	0x2400001c
 8005d20:	2407f1f8 	.word	0x2407f1f8

08005d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  return uwTick;
 8005d28:	4b03      	ldr	r3, [pc, #12]	; (8005d38 <HAL_GetTick+0x14>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	2407f1f8 	.word	0x2407f1f8

08005d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d44:	f7ff ffee 	bl	8005d24 <HAL_GetTick>
 8005d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d005      	beq.n	8005d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d56:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <HAL_Delay+0x44>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d62:	bf00      	nop
 8005d64:	f7ff ffde 	bl	8005d24 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d8f7      	bhi.n	8005d64 <HAL_Delay+0x28>
  {
  }
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	2400001c 	.word	0x2400001c

08005d84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005d88:	4b03      	ldr	r3, [pc, #12]	; (8005d98 <HAL_GetREVID+0x14>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	0c1b      	lsrs	r3, r3, #16
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	5c001000 	.word	0x5c001000

08005d9c <__NVIC_SetPriorityGrouping>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dac:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <__NVIC_SetPriorityGrouping+0x40>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005db8:	4013      	ands	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dca:	4a04      	ldr	r2, [pc, #16]	; (8005ddc <__NVIC_SetPriorityGrouping+0x40>)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	60d3      	str	r3, [r2, #12]
}
 8005dd0:	bf00      	nop
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	e000ed00 	.word	0xe000ed00
 8005de0:	05fa0000 	.word	0x05fa0000

08005de4 <__NVIC_GetPriorityGrouping>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <__NVIC_GetPriorityGrouping+0x18>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	f003 0307 	and.w	r3, r3, #7
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	e000ed00 	.word	0xe000ed00

08005e00 <__NVIC_EnableIRQ>:
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	db0b      	blt.n	8005e2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e12:	88fb      	ldrh	r3, [r7, #6]
 8005e14:	f003 021f 	and.w	r2, r3, #31
 8005e18:	4907      	ldr	r1, [pc, #28]	; (8005e38 <__NVIC_EnableIRQ+0x38>)
 8005e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	2001      	movs	r0, #1
 8005e22:	fa00 f202 	lsl.w	r2, r0, r2
 8005e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	e000e100 	.word	0xe000e100

08005e3c <__NVIC_SetPriority>:
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	6039      	str	r1, [r7, #0]
 8005e46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	db0a      	blt.n	8005e66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	490c      	ldr	r1, [pc, #48]	; (8005e88 <__NVIC_SetPriority+0x4c>)
 8005e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e5a:	0112      	lsls	r2, r2, #4
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	440b      	add	r3, r1
 8005e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e64:	e00a      	b.n	8005e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	4908      	ldr	r1, [pc, #32]	; (8005e8c <__NVIC_SetPriority+0x50>)
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	3b04      	subs	r3, #4
 8005e74:	0112      	lsls	r2, r2, #4
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	440b      	add	r3, r1
 8005e7a:	761a      	strb	r2, [r3, #24]
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	e000e100 	.word	0xe000e100
 8005e8c:	e000ed00 	.word	0xe000ed00

08005e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b089      	sub	sp, #36	; 0x24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f1c3 0307 	rsb	r3, r3, #7
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	bf28      	it	cs
 8005eae:	2304      	movcs	r3, #4
 8005eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	2b06      	cmp	r3, #6
 8005eb8:	d902      	bls.n	8005ec0 <NVIC_EncodePriority+0x30>
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	3b03      	subs	r3, #3
 8005ebe:	e000      	b.n	8005ec2 <NVIC_EncodePriority+0x32>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	43da      	mvns	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	401a      	ands	r2, r3
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee2:	43d9      	mvns	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ee8:	4313      	orrs	r3, r2
         );
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3724      	adds	r7, #36	; 0x24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff ff4c 	bl	8005d9c <__NVIC_SetPriorityGrouping>
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f1a:	f7ff ff63 	bl	8005de4 <__NVIC_GetPriorityGrouping>
 8005f1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	6978      	ldr	r0, [r7, #20]
 8005f26:	f7ff ffb3 	bl	8005e90 <NVIC_EncodePriority>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff ff82 	bl	8005e3c <__NVIC_SetPriority>
}
 8005f38:	bf00      	nop
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff ff56 	bl	8005e00 <__NVIC_EnableIRQ>
}
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005f64:	f7ff fede 	bl	8005d24 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e2dc      	b.n	800652e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d008      	beq.n	8005f92 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e2cd      	b.n	800652e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a76      	ldr	r2, [pc, #472]	; (8006170 <HAL_DMA_Abort+0x214>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d04a      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a74      	ldr	r2, [pc, #464]	; (8006174 <HAL_DMA_Abort+0x218>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d045      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a73      	ldr	r2, [pc, #460]	; (8006178 <HAL_DMA_Abort+0x21c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d040      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a71      	ldr	r2, [pc, #452]	; (800617c <HAL_DMA_Abort+0x220>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d03b      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a70      	ldr	r2, [pc, #448]	; (8006180 <HAL_DMA_Abort+0x224>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d036      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a6e      	ldr	r2, [pc, #440]	; (8006184 <HAL_DMA_Abort+0x228>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d031      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a6d      	ldr	r2, [pc, #436]	; (8006188 <HAL_DMA_Abort+0x22c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d02c      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a6b      	ldr	r2, [pc, #428]	; (800618c <HAL_DMA_Abort+0x230>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d027      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a6a      	ldr	r2, [pc, #424]	; (8006190 <HAL_DMA_Abort+0x234>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d022      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a68      	ldr	r2, [pc, #416]	; (8006194 <HAL_DMA_Abort+0x238>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01d      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a67      	ldr	r2, [pc, #412]	; (8006198 <HAL_DMA_Abort+0x23c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d018      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a65      	ldr	r2, [pc, #404]	; (800619c <HAL_DMA_Abort+0x240>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d013      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a64      	ldr	r2, [pc, #400]	; (80061a0 <HAL_DMA_Abort+0x244>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00e      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a62      	ldr	r2, [pc, #392]	; (80061a4 <HAL_DMA_Abort+0x248>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d009      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a61      	ldr	r2, [pc, #388]	; (80061a8 <HAL_DMA_Abort+0x24c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d004      	beq.n	8006032 <HAL_DMA_Abort+0xd6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a5f      	ldr	r2, [pc, #380]	; (80061ac <HAL_DMA_Abort+0x250>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d101      	bne.n	8006036 <HAL_DMA_Abort+0xda>
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <HAL_DMA_Abort+0xdc>
 8006036:	2300      	movs	r3, #0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d013      	beq.n	8006064 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 021e 	bic.w	r2, r2, #30
 800604a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695a      	ldr	r2, [r3, #20]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800605a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	e00a      	b.n	800607a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 020e 	bic.w	r2, r2, #14
 8006072:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a3c      	ldr	r2, [pc, #240]	; (8006170 <HAL_DMA_Abort+0x214>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d072      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a3a      	ldr	r2, [pc, #232]	; (8006174 <HAL_DMA_Abort+0x218>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d06d      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a39      	ldr	r2, [pc, #228]	; (8006178 <HAL_DMA_Abort+0x21c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d068      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a37      	ldr	r2, [pc, #220]	; (800617c <HAL_DMA_Abort+0x220>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d063      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a36      	ldr	r2, [pc, #216]	; (8006180 <HAL_DMA_Abort+0x224>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d05e      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a34      	ldr	r2, [pc, #208]	; (8006184 <HAL_DMA_Abort+0x228>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d059      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a33      	ldr	r2, [pc, #204]	; (8006188 <HAL_DMA_Abort+0x22c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d054      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a31      	ldr	r2, [pc, #196]	; (800618c <HAL_DMA_Abort+0x230>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d04f      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a30      	ldr	r2, [pc, #192]	; (8006190 <HAL_DMA_Abort+0x234>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d04a      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2e      	ldr	r2, [pc, #184]	; (8006194 <HAL_DMA_Abort+0x238>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d045      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a2d      	ldr	r2, [pc, #180]	; (8006198 <HAL_DMA_Abort+0x23c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d040      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a2b      	ldr	r2, [pc, #172]	; (800619c <HAL_DMA_Abort+0x240>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d03b      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2a      	ldr	r2, [pc, #168]	; (80061a0 <HAL_DMA_Abort+0x244>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d036      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a28      	ldr	r2, [pc, #160]	; (80061a4 <HAL_DMA_Abort+0x248>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d031      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a27      	ldr	r2, [pc, #156]	; (80061a8 <HAL_DMA_Abort+0x24c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d02c      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a25      	ldr	r2, [pc, #148]	; (80061ac <HAL_DMA_Abort+0x250>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d027      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a24      	ldr	r2, [pc, #144]	; (80061b0 <HAL_DMA_Abort+0x254>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d022      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a22      	ldr	r2, [pc, #136]	; (80061b4 <HAL_DMA_Abort+0x258>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d01d      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a21      	ldr	r2, [pc, #132]	; (80061b8 <HAL_DMA_Abort+0x25c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d018      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a1f      	ldr	r2, [pc, #124]	; (80061bc <HAL_DMA_Abort+0x260>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d013      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a1e      	ldr	r2, [pc, #120]	; (80061c0 <HAL_DMA_Abort+0x264>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00e      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a1c      	ldr	r2, [pc, #112]	; (80061c4 <HAL_DMA_Abort+0x268>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d009      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1b      	ldr	r2, [pc, #108]	; (80061c8 <HAL_DMA_Abort+0x26c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d004      	beq.n	800616a <HAL_DMA_Abort+0x20e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a19      	ldr	r2, [pc, #100]	; (80061cc <HAL_DMA_Abort+0x270>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d132      	bne.n	80061d0 <HAL_DMA_Abort+0x274>
 800616a:	2301      	movs	r3, #1
 800616c:	e031      	b.n	80061d2 <HAL_DMA_Abort+0x276>
 800616e:	bf00      	nop
 8006170:	40020010 	.word	0x40020010
 8006174:	40020028 	.word	0x40020028
 8006178:	40020040 	.word	0x40020040
 800617c:	40020058 	.word	0x40020058
 8006180:	40020070 	.word	0x40020070
 8006184:	40020088 	.word	0x40020088
 8006188:	400200a0 	.word	0x400200a0
 800618c:	400200b8 	.word	0x400200b8
 8006190:	40020410 	.word	0x40020410
 8006194:	40020428 	.word	0x40020428
 8006198:	40020440 	.word	0x40020440
 800619c:	40020458 	.word	0x40020458
 80061a0:	40020470 	.word	0x40020470
 80061a4:	40020488 	.word	0x40020488
 80061a8:	400204a0 	.word	0x400204a0
 80061ac:	400204b8 	.word	0x400204b8
 80061b0:	58025408 	.word	0x58025408
 80061b4:	5802541c 	.word	0x5802541c
 80061b8:	58025430 	.word	0x58025430
 80061bc:	58025444 	.word	0x58025444
 80061c0:	58025458 	.word	0x58025458
 80061c4:	5802546c 	.word	0x5802546c
 80061c8:	58025480 	.word	0x58025480
 80061cc:	58025494 	.word	0x58025494
 80061d0:	2300      	movs	r3, #0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6d      	ldr	r2, [pc, #436]	; (80063a0 <HAL_DMA_Abort+0x444>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d04a      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6b      	ldr	r2, [pc, #428]	; (80063a4 <HAL_DMA_Abort+0x448>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d045      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6a      	ldr	r2, [pc, #424]	; (80063a8 <HAL_DMA_Abort+0x44c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d040      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a68      	ldr	r2, [pc, #416]	; (80063ac <HAL_DMA_Abort+0x450>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d03b      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a67      	ldr	r2, [pc, #412]	; (80063b0 <HAL_DMA_Abort+0x454>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d036      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a65      	ldr	r2, [pc, #404]	; (80063b4 <HAL_DMA_Abort+0x458>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d031      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a64      	ldr	r2, [pc, #400]	; (80063b8 <HAL_DMA_Abort+0x45c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d02c      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a62      	ldr	r2, [pc, #392]	; (80063bc <HAL_DMA_Abort+0x460>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d027      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a61      	ldr	r2, [pc, #388]	; (80063c0 <HAL_DMA_Abort+0x464>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d022      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a5f      	ldr	r2, [pc, #380]	; (80063c4 <HAL_DMA_Abort+0x468>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01d      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a5e      	ldr	r2, [pc, #376]	; (80063c8 <HAL_DMA_Abort+0x46c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d018      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a5c      	ldr	r2, [pc, #368]	; (80063cc <HAL_DMA_Abort+0x470>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a5b      	ldr	r2, [pc, #364]	; (80063d0 <HAL_DMA_Abort+0x474>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00e      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a59      	ldr	r2, [pc, #356]	; (80063d4 <HAL_DMA_Abort+0x478>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d009      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a58      	ldr	r2, [pc, #352]	; (80063d8 <HAL_DMA_Abort+0x47c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d004      	beq.n	8006286 <HAL_DMA_Abort+0x32a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a56      	ldr	r2, [pc, #344]	; (80063dc <HAL_DMA_Abort+0x480>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d108      	bne.n	8006298 <HAL_DMA_Abort+0x33c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0201 	bic.w	r2, r2, #1
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	e007      	b.n	80062a8 <HAL_DMA_Abort+0x34c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0201 	bic.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80062a8:	e013      	b.n	80062d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062aa:	f7ff fd3b 	bl	8005d24 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b05      	cmp	r3, #5
 80062b6:	d90c      	bls.n	80062d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2203      	movs	r2, #3
 80062c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e12d      	b.n	800652e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e5      	bne.n	80062aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2f      	ldr	r2, [pc, #188]	; (80063a0 <HAL_DMA_Abort+0x444>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d04a      	beq.n	800637e <HAL_DMA_Abort+0x422>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2d      	ldr	r2, [pc, #180]	; (80063a4 <HAL_DMA_Abort+0x448>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d045      	beq.n	800637e <HAL_DMA_Abort+0x422>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2c      	ldr	r2, [pc, #176]	; (80063a8 <HAL_DMA_Abort+0x44c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d040      	beq.n	800637e <HAL_DMA_Abort+0x422>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a2a      	ldr	r2, [pc, #168]	; (80063ac <HAL_DMA_Abort+0x450>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d03b      	beq.n	800637e <HAL_DMA_Abort+0x422>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a29      	ldr	r2, [pc, #164]	; (80063b0 <HAL_DMA_Abort+0x454>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d036      	beq.n	800637e <HAL_DMA_Abort+0x422>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a27      	ldr	r2, [pc, #156]	; (80063b4 <HAL_DMA_Abort+0x458>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d031      	beq.n	800637e <HAL_DMA_Abort+0x422>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a26      	ldr	r2, [pc, #152]	; (80063b8 <HAL_DMA_Abort+0x45c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d02c      	beq.n	800637e <HAL_DMA_Abort+0x422>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a24      	ldr	r2, [pc, #144]	; (80063bc <HAL_DMA_Abort+0x460>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d027      	beq.n	800637e <HAL_DMA_Abort+0x422>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a23      	ldr	r2, [pc, #140]	; (80063c0 <HAL_DMA_Abort+0x464>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <HAL_DMA_Abort+0x422>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <HAL_DMA_Abort+0x468>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01d      	beq.n	800637e <HAL_DMA_Abort+0x422>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a20      	ldr	r2, [pc, #128]	; (80063c8 <HAL_DMA_Abort+0x46c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d018      	beq.n	800637e <HAL_DMA_Abort+0x422>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <HAL_DMA_Abort+0x470>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <HAL_DMA_Abort+0x422>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1d      	ldr	r2, [pc, #116]	; (80063d0 <HAL_DMA_Abort+0x474>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00e      	beq.n	800637e <HAL_DMA_Abort+0x422>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1b      	ldr	r2, [pc, #108]	; (80063d4 <HAL_DMA_Abort+0x478>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d009      	beq.n	800637e <HAL_DMA_Abort+0x422>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1a      	ldr	r2, [pc, #104]	; (80063d8 <HAL_DMA_Abort+0x47c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_DMA_Abort+0x422>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a18      	ldr	r2, [pc, #96]	; (80063dc <HAL_DMA_Abort+0x480>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d101      	bne.n	8006382 <HAL_DMA_Abort+0x426>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <HAL_DMA_Abort+0x428>
 8006382:	2300      	movs	r3, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d02b      	beq.n	80063e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006392:	f003 031f 	and.w	r3, r3, #31
 8006396:	223f      	movs	r2, #63	; 0x3f
 8006398:	409a      	lsls	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	609a      	str	r2, [r3, #8]
 800639e:	e02a      	b.n	80063f6 <HAL_DMA_Abort+0x49a>
 80063a0:	40020010 	.word	0x40020010
 80063a4:	40020028 	.word	0x40020028
 80063a8:	40020040 	.word	0x40020040
 80063ac:	40020058 	.word	0x40020058
 80063b0:	40020070 	.word	0x40020070
 80063b4:	40020088 	.word	0x40020088
 80063b8:	400200a0 	.word	0x400200a0
 80063bc:	400200b8 	.word	0x400200b8
 80063c0:	40020410 	.word	0x40020410
 80063c4:	40020428 	.word	0x40020428
 80063c8:	40020440 	.word	0x40020440
 80063cc:	40020458 	.word	0x40020458
 80063d0:	40020470 	.word	0x40020470
 80063d4:	40020488 	.word	0x40020488
 80063d8:	400204a0 	.word	0x400204a0
 80063dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2201      	movs	r2, #1
 80063f0:	409a      	lsls	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a4f      	ldr	r2, [pc, #316]	; (8006538 <HAL_DMA_Abort+0x5dc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d072      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a4d      	ldr	r2, [pc, #308]	; (800653c <HAL_DMA_Abort+0x5e0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d06d      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a4c      	ldr	r2, [pc, #304]	; (8006540 <HAL_DMA_Abort+0x5e4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d068      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a4a      	ldr	r2, [pc, #296]	; (8006544 <HAL_DMA_Abort+0x5e8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d063      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a49      	ldr	r2, [pc, #292]	; (8006548 <HAL_DMA_Abort+0x5ec>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d05e      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a47      	ldr	r2, [pc, #284]	; (800654c <HAL_DMA_Abort+0x5f0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d059      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a46      	ldr	r2, [pc, #280]	; (8006550 <HAL_DMA_Abort+0x5f4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d054      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a44      	ldr	r2, [pc, #272]	; (8006554 <HAL_DMA_Abort+0x5f8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d04f      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a43      	ldr	r2, [pc, #268]	; (8006558 <HAL_DMA_Abort+0x5fc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d04a      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a41      	ldr	r2, [pc, #260]	; (800655c <HAL_DMA_Abort+0x600>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d045      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a40      	ldr	r2, [pc, #256]	; (8006560 <HAL_DMA_Abort+0x604>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d040      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a3e      	ldr	r2, [pc, #248]	; (8006564 <HAL_DMA_Abort+0x608>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d03b      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a3d      	ldr	r2, [pc, #244]	; (8006568 <HAL_DMA_Abort+0x60c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d036      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a3b      	ldr	r2, [pc, #236]	; (800656c <HAL_DMA_Abort+0x610>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d031      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a3a      	ldr	r2, [pc, #232]	; (8006570 <HAL_DMA_Abort+0x614>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d02c      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a38      	ldr	r2, [pc, #224]	; (8006574 <HAL_DMA_Abort+0x618>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d027      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a37      	ldr	r2, [pc, #220]	; (8006578 <HAL_DMA_Abort+0x61c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d022      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a35      	ldr	r2, [pc, #212]	; (800657c <HAL_DMA_Abort+0x620>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d01d      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a34      	ldr	r2, [pc, #208]	; (8006580 <HAL_DMA_Abort+0x624>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d018      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a32      	ldr	r2, [pc, #200]	; (8006584 <HAL_DMA_Abort+0x628>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d013      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a31      	ldr	r2, [pc, #196]	; (8006588 <HAL_DMA_Abort+0x62c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00e      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a2f      	ldr	r2, [pc, #188]	; (800658c <HAL_DMA_Abort+0x630>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d009      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a2e      	ldr	r2, [pc, #184]	; (8006590 <HAL_DMA_Abort+0x634>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d004      	beq.n	80064e6 <HAL_DMA_Abort+0x58a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a2c      	ldr	r2, [pc, #176]	; (8006594 <HAL_DMA_Abort+0x638>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d101      	bne.n	80064ea <HAL_DMA_Abort+0x58e>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <HAL_DMA_Abort+0x590>
 80064ea:	2300      	movs	r3, #0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d015      	beq.n	800651c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00c      	beq.n	800651c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006510:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800651a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40020010 	.word	0x40020010
 800653c:	40020028 	.word	0x40020028
 8006540:	40020040 	.word	0x40020040
 8006544:	40020058 	.word	0x40020058
 8006548:	40020070 	.word	0x40020070
 800654c:	40020088 	.word	0x40020088
 8006550:	400200a0 	.word	0x400200a0
 8006554:	400200b8 	.word	0x400200b8
 8006558:	40020410 	.word	0x40020410
 800655c:	40020428 	.word	0x40020428
 8006560:	40020440 	.word	0x40020440
 8006564:	40020458 	.word	0x40020458
 8006568:	40020470 	.word	0x40020470
 800656c:	40020488 	.word	0x40020488
 8006570:	400204a0 	.word	0x400204a0
 8006574:	400204b8 	.word	0x400204b8
 8006578:	58025408 	.word	0x58025408
 800657c:	5802541c 	.word	0x5802541c
 8006580:	58025430 	.word	0x58025430
 8006584:	58025444 	.word	0x58025444
 8006588:	58025458 	.word	0x58025458
 800658c:	5802546c 	.word	0x5802546c
 8006590:	58025480 	.word	0x58025480
 8006594:	58025494 	.word	0x58025494

08006598 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e237      	b.n	8006a1a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d004      	beq.n	80065c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2280      	movs	r2, #128	; 0x80
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e22c      	b.n	8006a1a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a5c      	ldr	r2, [pc, #368]	; (8006738 <HAL_DMA_Abort_IT+0x1a0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d04a      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a5b      	ldr	r2, [pc, #364]	; (800673c <HAL_DMA_Abort_IT+0x1a4>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d045      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a59      	ldr	r2, [pc, #356]	; (8006740 <HAL_DMA_Abort_IT+0x1a8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d040      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a58      	ldr	r2, [pc, #352]	; (8006744 <HAL_DMA_Abort_IT+0x1ac>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d03b      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a56      	ldr	r2, [pc, #344]	; (8006748 <HAL_DMA_Abort_IT+0x1b0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d036      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a55      	ldr	r2, [pc, #340]	; (800674c <HAL_DMA_Abort_IT+0x1b4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d031      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a53      	ldr	r2, [pc, #332]	; (8006750 <HAL_DMA_Abort_IT+0x1b8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d02c      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a52      	ldr	r2, [pc, #328]	; (8006754 <HAL_DMA_Abort_IT+0x1bc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d027      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a50      	ldr	r2, [pc, #320]	; (8006758 <HAL_DMA_Abort_IT+0x1c0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d022      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a4f      	ldr	r2, [pc, #316]	; (800675c <HAL_DMA_Abort_IT+0x1c4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d01d      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a4d      	ldr	r2, [pc, #308]	; (8006760 <HAL_DMA_Abort_IT+0x1c8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d018      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a4c      	ldr	r2, [pc, #304]	; (8006764 <HAL_DMA_Abort_IT+0x1cc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d013      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a4a      	ldr	r2, [pc, #296]	; (8006768 <HAL_DMA_Abort_IT+0x1d0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00e      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a49      	ldr	r2, [pc, #292]	; (800676c <HAL_DMA_Abort_IT+0x1d4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d009      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a47      	ldr	r2, [pc, #284]	; (8006770 <HAL_DMA_Abort_IT+0x1d8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <HAL_DMA_Abort_IT+0xc8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a46      	ldr	r2, [pc, #280]	; (8006774 <HAL_DMA_Abort_IT+0x1dc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d101      	bne.n	8006664 <HAL_DMA_Abort_IT+0xcc>
 8006660:	2301      	movs	r3, #1
 8006662:	e000      	b.n	8006666 <HAL_DMA_Abort_IT+0xce>
 8006664:	2300      	movs	r3, #0
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 8086 	beq.w	8006778 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2204      	movs	r2, #4
 8006670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a2f      	ldr	r2, [pc, #188]	; (8006738 <HAL_DMA_Abort_IT+0x1a0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d04a      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a2e      	ldr	r2, [pc, #184]	; (800673c <HAL_DMA_Abort_IT+0x1a4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d045      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a2c      	ldr	r2, [pc, #176]	; (8006740 <HAL_DMA_Abort_IT+0x1a8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d040      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a2b      	ldr	r2, [pc, #172]	; (8006744 <HAL_DMA_Abort_IT+0x1ac>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d03b      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a29      	ldr	r2, [pc, #164]	; (8006748 <HAL_DMA_Abort_IT+0x1b0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d036      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a28      	ldr	r2, [pc, #160]	; (800674c <HAL_DMA_Abort_IT+0x1b4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d031      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a26      	ldr	r2, [pc, #152]	; (8006750 <HAL_DMA_Abort_IT+0x1b8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d02c      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a25      	ldr	r2, [pc, #148]	; (8006754 <HAL_DMA_Abort_IT+0x1bc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d027      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a23      	ldr	r2, [pc, #140]	; (8006758 <HAL_DMA_Abort_IT+0x1c0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d022      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a22      	ldr	r2, [pc, #136]	; (800675c <HAL_DMA_Abort_IT+0x1c4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d01d      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a20      	ldr	r2, [pc, #128]	; (8006760 <HAL_DMA_Abort_IT+0x1c8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d018      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1f      	ldr	r2, [pc, #124]	; (8006764 <HAL_DMA_Abort_IT+0x1cc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d013      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1d      	ldr	r2, [pc, #116]	; (8006768 <HAL_DMA_Abort_IT+0x1d0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00e      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1c      	ldr	r2, [pc, #112]	; (800676c <HAL_DMA_Abort_IT+0x1d4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d009      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1a      	ldr	r2, [pc, #104]	; (8006770 <HAL_DMA_Abort_IT+0x1d8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d004      	beq.n	8006714 <HAL_DMA_Abort_IT+0x17c>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a19      	ldr	r2, [pc, #100]	; (8006774 <HAL_DMA_Abort_IT+0x1dc>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d108      	bne.n	8006726 <HAL_DMA_Abort_IT+0x18e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0201 	bic.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e178      	b.n	8006a18 <HAL_DMA_Abort_IT+0x480>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	e16f      	b.n	8006a18 <HAL_DMA_Abort_IT+0x480>
 8006738:	40020010 	.word	0x40020010
 800673c:	40020028 	.word	0x40020028
 8006740:	40020040 	.word	0x40020040
 8006744:	40020058 	.word	0x40020058
 8006748:	40020070 	.word	0x40020070
 800674c:	40020088 	.word	0x40020088
 8006750:	400200a0 	.word	0x400200a0
 8006754:	400200b8 	.word	0x400200b8
 8006758:	40020410 	.word	0x40020410
 800675c:	40020428 	.word	0x40020428
 8006760:	40020440 	.word	0x40020440
 8006764:	40020458 	.word	0x40020458
 8006768:	40020470 	.word	0x40020470
 800676c:	40020488 	.word	0x40020488
 8006770:	400204a0 	.word	0x400204a0
 8006774:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 020e 	bic.w	r2, r2, #14
 8006786:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a6c      	ldr	r2, [pc, #432]	; (8006940 <HAL_DMA_Abort_IT+0x3a8>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d04a      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a6b      	ldr	r2, [pc, #428]	; (8006944 <HAL_DMA_Abort_IT+0x3ac>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d045      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a69      	ldr	r2, [pc, #420]	; (8006948 <HAL_DMA_Abort_IT+0x3b0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d040      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a68      	ldr	r2, [pc, #416]	; (800694c <HAL_DMA_Abort_IT+0x3b4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d03b      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a66      	ldr	r2, [pc, #408]	; (8006950 <HAL_DMA_Abort_IT+0x3b8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d036      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a65      	ldr	r2, [pc, #404]	; (8006954 <HAL_DMA_Abort_IT+0x3bc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d031      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a63      	ldr	r2, [pc, #396]	; (8006958 <HAL_DMA_Abort_IT+0x3c0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d02c      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a62      	ldr	r2, [pc, #392]	; (800695c <HAL_DMA_Abort_IT+0x3c4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d027      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a60      	ldr	r2, [pc, #384]	; (8006960 <HAL_DMA_Abort_IT+0x3c8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d022      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a5f      	ldr	r2, [pc, #380]	; (8006964 <HAL_DMA_Abort_IT+0x3cc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d01d      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a5d      	ldr	r2, [pc, #372]	; (8006968 <HAL_DMA_Abort_IT+0x3d0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d018      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a5c      	ldr	r2, [pc, #368]	; (800696c <HAL_DMA_Abort_IT+0x3d4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d013      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a5a      	ldr	r2, [pc, #360]	; (8006970 <HAL_DMA_Abort_IT+0x3d8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00e      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a59      	ldr	r2, [pc, #356]	; (8006974 <HAL_DMA_Abort_IT+0x3dc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d009      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a57      	ldr	r2, [pc, #348]	; (8006978 <HAL_DMA_Abort_IT+0x3e0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d004      	beq.n	8006828 <HAL_DMA_Abort_IT+0x290>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a56      	ldr	r2, [pc, #344]	; (800697c <HAL_DMA_Abort_IT+0x3e4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d108      	bne.n	800683a <HAL_DMA_Abort_IT+0x2a2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0201 	bic.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	e007      	b.n	800684a <HAL_DMA_Abort_IT+0x2b2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0201 	bic.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a3c      	ldr	r2, [pc, #240]	; (8006940 <HAL_DMA_Abort_IT+0x3a8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d072      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a3a      	ldr	r2, [pc, #232]	; (8006944 <HAL_DMA_Abort_IT+0x3ac>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d06d      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a39      	ldr	r2, [pc, #228]	; (8006948 <HAL_DMA_Abort_IT+0x3b0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d068      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a37      	ldr	r2, [pc, #220]	; (800694c <HAL_DMA_Abort_IT+0x3b4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d063      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a36      	ldr	r2, [pc, #216]	; (8006950 <HAL_DMA_Abort_IT+0x3b8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d05e      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a34      	ldr	r2, [pc, #208]	; (8006954 <HAL_DMA_Abort_IT+0x3bc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d059      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a33      	ldr	r2, [pc, #204]	; (8006958 <HAL_DMA_Abort_IT+0x3c0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d054      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a31      	ldr	r2, [pc, #196]	; (800695c <HAL_DMA_Abort_IT+0x3c4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d04f      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a30      	ldr	r2, [pc, #192]	; (8006960 <HAL_DMA_Abort_IT+0x3c8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d04a      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a2e      	ldr	r2, [pc, #184]	; (8006964 <HAL_DMA_Abort_IT+0x3cc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d045      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a2d      	ldr	r2, [pc, #180]	; (8006968 <HAL_DMA_Abort_IT+0x3d0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d040      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a2b      	ldr	r2, [pc, #172]	; (800696c <HAL_DMA_Abort_IT+0x3d4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d03b      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a2a      	ldr	r2, [pc, #168]	; (8006970 <HAL_DMA_Abort_IT+0x3d8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d036      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a28      	ldr	r2, [pc, #160]	; (8006974 <HAL_DMA_Abort_IT+0x3dc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d031      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a27      	ldr	r2, [pc, #156]	; (8006978 <HAL_DMA_Abort_IT+0x3e0>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d02c      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a25      	ldr	r2, [pc, #148]	; (800697c <HAL_DMA_Abort_IT+0x3e4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d027      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a24      	ldr	r2, [pc, #144]	; (8006980 <HAL_DMA_Abort_IT+0x3e8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d022      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a22      	ldr	r2, [pc, #136]	; (8006984 <HAL_DMA_Abort_IT+0x3ec>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01d      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a21      	ldr	r2, [pc, #132]	; (8006988 <HAL_DMA_Abort_IT+0x3f0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d018      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1f      	ldr	r2, [pc, #124]	; (800698c <HAL_DMA_Abort_IT+0x3f4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d013      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <HAL_DMA_Abort_IT+0x3f8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00e      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1c      	ldr	r2, [pc, #112]	; (8006994 <HAL_DMA_Abort_IT+0x3fc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d009      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1b      	ldr	r2, [pc, #108]	; (8006998 <HAL_DMA_Abort_IT+0x400>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d004      	beq.n	800693a <HAL_DMA_Abort_IT+0x3a2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a19      	ldr	r2, [pc, #100]	; (800699c <HAL_DMA_Abort_IT+0x404>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d132      	bne.n	80069a0 <HAL_DMA_Abort_IT+0x408>
 800693a:	2301      	movs	r3, #1
 800693c:	e031      	b.n	80069a2 <HAL_DMA_Abort_IT+0x40a>
 800693e:	bf00      	nop
 8006940:	40020010 	.word	0x40020010
 8006944:	40020028 	.word	0x40020028
 8006948:	40020040 	.word	0x40020040
 800694c:	40020058 	.word	0x40020058
 8006950:	40020070 	.word	0x40020070
 8006954:	40020088 	.word	0x40020088
 8006958:	400200a0 	.word	0x400200a0
 800695c:	400200b8 	.word	0x400200b8
 8006960:	40020410 	.word	0x40020410
 8006964:	40020428 	.word	0x40020428
 8006968:	40020440 	.word	0x40020440
 800696c:	40020458 	.word	0x40020458
 8006970:	40020470 	.word	0x40020470
 8006974:	40020488 	.word	0x40020488
 8006978:	400204a0 	.word	0x400204a0
 800697c:	400204b8 	.word	0x400204b8
 8006980:	58025408 	.word	0x58025408
 8006984:	5802541c 	.word	0x5802541c
 8006988:	58025430 	.word	0x58025430
 800698c:	58025444 	.word	0x58025444
 8006990:	58025458 	.word	0x58025458
 8006994:	5802546c 	.word	0x5802546c
 8006998:	58025480 	.word	0x58025480
 800699c:	58025494 	.word	0x58025494
 80069a0:	2300      	movs	r3, #0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d028      	beq.n	80069f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	2201      	movs	r2, #1
 80069c6:	409a      	lsls	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80069d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00c      	beq.n	80069f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80069f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop

08006a24 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b098      	sub	sp, #96	; 0x60
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006a2c:	4a84      	ldr	r2, [pc, #528]	; (8006c40 <HAL_FDCAN_Init+0x21c>)
 8006a2e:	f107 030c 	add.w	r3, r7, #12
 8006a32:	4611      	mov	r1, r2
 8006a34:	224c      	movs	r2, #76	; 0x4c
 8006a36:	4618      	mov	r0, r3
 8006a38:	f005 ff4e 	bl	800c8d8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e1c6      	b.n	8006dd4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a7e      	ldr	r2, [pc, #504]	; (8006c44 <HAL_FDCAN_Init+0x220>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d106      	bne.n	8006a5e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006a58:	461a      	mov	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fe fd86 	bl	8005584 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0210 	bic.w	r2, r2, #16
 8006a86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a88:	f7ff f94c 	bl	8005d24 <HAL_GetTick>
 8006a8c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a8e:	e014      	b.n	8006aba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a90:	f7ff f948 	bl	8005d24 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b0a      	cmp	r3, #10
 8006a9c:	d90d      	bls.n	8006aba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aa4:	f043 0201 	orr.w	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e18c      	b.n	8006dd4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d0e3      	beq.n	8006a90 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ad8:	f7ff f924 	bl	8005d24 <HAL_GetTick>
 8006adc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ade:	e014      	b.n	8006b0a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006ae0:	f7ff f920 	bl	8005d24 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b0a      	cmp	r3, #10
 8006aec:	d90d      	bls.n	8006b0a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006af4:	f043 0201 	orr.w	r2, r3, #1
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2203      	movs	r2, #3
 8006b02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e164      	b.n	8006dd4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0e3      	beq.n	8006ae0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0202 	orr.w	r2, r2, #2
 8006b26:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	7c1b      	ldrb	r3, [r3, #16]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d108      	bne.n	8006b42 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b3e:	619a      	str	r2, [r3, #24]
 8006b40:	e007      	b.n	8006b52 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b50:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7c5b      	ldrb	r3, [r3, #17]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d108      	bne.n	8006b6c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b68:	619a      	str	r2, [r3, #24]
 8006b6a:	e007      	b.n	8006b7c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b7a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	7c9b      	ldrb	r3, [r3, #18]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d108      	bne.n	8006b96 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b92:	619a      	str	r2, [r3, #24]
 8006b94:	e007      	b.n	8006ba6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ba4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006bca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691a      	ldr	r2, [r3, #16]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0210 	bic.w	r2, r2, #16
 8006bda:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d108      	bne.n	8006bf6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0204 	orr.w	r2, r2, #4
 8006bf2:	619a      	str	r2, [r3, #24]
 8006bf4:	e030      	b.n	8006c58 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d02c      	beq.n	8006c58 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d020      	beq.n	8006c48 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	699a      	ldr	r2, [r3, #24]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c14:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0210 	orr.w	r2, r2, #16
 8006c24:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d114      	bne.n	8006c58 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699a      	ldr	r2, [r3, #24]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0220 	orr.w	r2, r2, #32
 8006c3c:	619a      	str	r2, [r3, #24]
 8006c3e:	e00b      	b.n	8006c58 <HAL_FDCAN_Init+0x234>
 8006c40:	0800dec0 	.word	0x0800dec0
 8006c44:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0220 	orr.w	r2, r2, #32
 8006c56:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c68:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c70:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c80:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c82:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c8c:	d115      	bne.n	8006cba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c9c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006ca6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006cb6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006cb8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce0:	4413      	add	r3, r2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d011      	beq.n	8006d0a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006cee:	f023 0107 	bic.w	r1, r3, #7
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	3360      	adds	r3, #96	; 0x60
 8006cfa:	443b      	add	r3, r7
 8006cfc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d011      	beq.n	8006d36 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d1a:	f023 0107 	bic.w	r1, r3, #7
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	3360      	adds	r3, #96	; 0x60
 8006d26:	443b      	add	r3, r7
 8006d28:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d012      	beq.n	8006d64 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d46:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	3360      	adds	r3, #96	; 0x60
 8006d52:	443b      	add	r3, r7
 8006d54:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d58:	011a      	lsls	r2, r3, #4
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d012      	beq.n	8006d92 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d74:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	3360      	adds	r3, #96	; 0x60
 8006d80:	443b      	add	r3, r7
 8006d82:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d86:	021a      	lsls	r2, r3, #8
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a11      	ldr	r2, [pc, #68]	; (8006ddc <HAL_FDCAN_Init+0x3b8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d107      	bne.n	8006dac <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f022 0203 	bic.w	r2, r2, #3
 8006daa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fb1f 	bl	8007408 <FDCAN_CalcultateRamBlockAddresses>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006dd0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3760      	adds	r7, #96	; 0x60
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	4000a000 	.word	0x4000a000

08006de0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b096      	sub	sp, #88	; 0x58
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006de8:	4b9a      	ldr	r3, [pc, #616]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	079b      	lsls	r3, r3, #30
 8006dee:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006df0:	4b98      	ldr	r3, [pc, #608]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	079b      	lsls	r3, r3, #30
 8006df6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006df8:	4013      	ands	r3, r2
 8006dfa:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e02:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006e06:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e10:	4013      	ands	r3, r2
 8006e12:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e28:	4013      	ands	r3, r2
 8006e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e40:	4013      	ands	r3, r2
 8006e42:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8006e4e:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e58:	4013      	ands	r3, r2
 8006e5a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e62:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8006e66:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e70:	4013      	ands	r3, r2
 8006e72:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e86:	0a1b      	lsrs	r3, r3, #8
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d010      	beq.n	8006eb2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	0a1b      	lsrs	r3, r3, #8
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ea4:	651a      	str	r2, [r3, #80]	; 0x50
 8006ea6:	4b6b      	ldr	r3, [pc, #428]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fa5f 	bl	8007370 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb4:	0a9b      	lsrs	r3, r3, #10
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01d      	beq.n	8006efa <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	0a9b      	lsrs	r3, r3, #10
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d017      	beq.n	8006efa <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006ed2:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ede:	4013      	ands	r3, r2
 8006ee0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006eea:	651a      	str	r2, [r3, #80]	; 0x50
 8006eec:	4b59      	ldr	r3, [pc, #356]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006ef2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fa12 	bl	800731e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00d      	beq.n	8006f1c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f06:	4b54      	ldr	r3, [pc, #336]	; (8007058 <HAL_FDCAN_IRQHandler+0x278>)
 8006f08:	400b      	ands	r3, r1
 8006f0a:	6513      	str	r3, [r2, #80]	; 0x50
 8006f0c:	4a51      	ldr	r2, [pc, #324]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 8006f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f10:	0f9b      	lsrs	r3, r3, #30
 8006f12:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006f14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f9c0 	bl	800729c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00d      	beq.n	8006f3e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f28:	4b4b      	ldr	r3, [pc, #300]	; (8007058 <HAL_FDCAN_IRQHandler+0x278>)
 8006f2a:	400b      	ands	r3, r1
 8006f2c:	6513      	str	r3, [r2, #80]	; 0x50
 8006f2e:	4a49      	ldr	r2, [pc, #292]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 8006f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f32:	0f9b      	lsrs	r3, r3, #30
 8006f34:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006f36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f9ba 	bl	80072b2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00d      	beq.n	8006f60 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006f4a:	4b43      	ldr	r3, [pc, #268]	; (8007058 <HAL_FDCAN_IRQHandler+0x278>)
 8006f4c:	400b      	ands	r3, r1
 8006f4e:	6513      	str	r3, [r2, #80]	; 0x50
 8006f50:	4a40      	ldr	r2, [pc, #256]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 8006f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f54:	0f9b      	lsrs	r3, r3, #30
 8006f56:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006f58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f9b4 	bl	80072c8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00d      	beq.n	8006f82 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f6c:	4b3a      	ldr	r3, [pc, #232]	; (8007058 <HAL_FDCAN_IRQHandler+0x278>)
 8006f6e:	400b      	ands	r3, r1
 8006f70:	6513      	str	r3, [r2, #80]	; 0x50
 8006f72:	4a38      	ldr	r2, [pc, #224]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 8006f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f76:	0f9b      	lsrs	r3, r3, #30
 8006f78:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006f7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f9ae 	bl	80072de <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f84:	0adb      	lsrs	r3, r3, #11
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d010      	beq.n	8006fb0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f90:	0adb      	lsrs	r3, r3, #11
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fa2:	651a      	str	r2, [r3, #80]	; 0x50
 8006fa4:	4b2b      	ldr	r3, [pc, #172]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f9a2 	bl	80072f4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb2:	0a5b      	lsrs	r3, r3, #9
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01d      	beq.n	8006ff8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	0a5b      	lsrs	r3, r3, #9
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d017      	beq.n	8006ff8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006fd0:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fdc:	4013      	ands	r3, r2
 8006fde:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fe8:	651a      	str	r2, [r3, #80]	; 0x50
 8006fea:	4b1a      	ldr	r3, [pc, #104]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f988 	bl	8007308 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffa:	0cdb      	lsrs	r3, r3, #19
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d010      	beq.n	8007026 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	0cdb      	lsrs	r3, r3, #19
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007018:	651a      	str	r2, [r3, #80]	; 0x50
 800701a:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 800701c:	2200      	movs	r2, #0
 800701e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f987 	bl	8007334 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	0c1b      	lsrs	r3, r3, #16
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d016      	beq.n	8007060 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	0c1b      	lsrs	r3, r3, #16
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d010      	beq.n	8007060 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007046:	651a      	str	r2, [r3, #80]	; 0x50
 8007048:	4b02      	ldr	r3, [pc, #8]	; (8007054 <HAL_FDCAN_IRQHandler+0x274>)
 800704a:	2200      	movs	r2, #0
 800704c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	e004      	b.n	800705c <HAL_FDCAN_IRQHandler+0x27c>
 8007052:	bf00      	nop
 8007054:	4000a800 	.word	0x4000a800
 8007058:	3fcfffff 	.word	0x3fcfffff
 800705c:	f000 f974 	bl	8007348 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007062:	0c9b      	lsrs	r3, r3, #18
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d010      	beq.n	800708e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	0c9b      	lsrs	r3, r3, #18
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00a      	beq.n	800708e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007080:	651a      	str	r2, [r3, #80]	; 0x50
 8007082:	4b83      	ldr	r3, [pc, #524]	; (8007290 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007084:	2200      	movs	r2, #0
 8007086:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f967 	bl	800735c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800708e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007090:	0c5b      	lsrs	r3, r3, #17
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d015      	beq.n	80070c6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	0c5b      	lsrs	r3, r3, #17
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00f      	beq.n	80070c6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80070ae:	651a      	str	r2, [r3, #80]	; 0x50
 80070b0:	4b77      	ldr	r3, [pc, #476]	; (8007290 <HAL_FDCAN_IRQHandler+0x4b0>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80070c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00d      	beq.n	80070e8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070d2:	4b70      	ldr	r3, [pc, #448]	; (8007294 <HAL_FDCAN_IRQHandler+0x4b4>)
 80070d4:	400b      	ands	r3, r1
 80070d6:	6513      	str	r3, [r2, #80]	; 0x50
 80070d8:	4a6d      	ldr	r2, [pc, #436]	; (8007290 <HAL_FDCAN_IRQHandler+0x4b0>)
 80070da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070dc:	0f9b      	lsrs	r3, r3, #30
 80070de:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80070e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f958 	bl	8007398 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80070e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d011      	beq.n	8007112 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070f4:	4b67      	ldr	r3, [pc, #412]	; (8007294 <HAL_FDCAN_IRQHandler+0x4b4>)
 80070f6:	400b      	ands	r3, r1
 80070f8:	6513      	str	r3, [r2, #80]	; 0x50
 80070fa:	4a65      	ldr	r2, [pc, #404]	; (8007290 <HAL_FDCAN_IRQHandler+0x4b0>)
 80070fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070fe:	0f9b      	lsrs	r3, r3, #30
 8007100:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a60      	ldr	r2, [pc, #384]	; (8007298 <HAL_FDCAN_IRQHandler+0x4b8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	f040 80ac 	bne.w	8007276 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 0303 	and.w	r3, r3, #3
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 80a4 	beq.w	8007276 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	f003 030f 	and.w	r3, r3, #15
 8007138:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007142:	4013      	ands	r3, r2
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800715a:	4013      	ands	r3, r2
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007172:	4013      	ands	r3, r2
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8007180:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	6a3a      	ldr	r2, [r7, #32]
 800718a:	4013      	ands	r3, r2
 800718c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8007198:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	4013      	ands	r3, r2
 80071a4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d007      	beq.n	80071cc <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071c2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80071c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f8f1 	bl	80073ae <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d007      	beq.n	80071e2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071d8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80071da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f8f1 	bl	80073c4 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	099b      	lsrs	r3, r3, #6
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d01a      	beq.n	8007224 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	099b      	lsrs	r3, r3, #6
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d014      	beq.n	8007224 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007200:	0c1b      	lsrs	r3, r3, #16
 8007202:	b29b      	uxth	r3, r3
 8007204:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007210:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	2240      	movs	r2, #64	; 0x40
 8007218:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	6939      	ldr	r1, [r7, #16]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f8db 	bl	80073da <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007230:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f8dc 	bl	80073f2 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	6a3a      	ldr	r2, [r7, #32]
 8007246:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	431a      	orrs	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	431a      	orrs	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f87f 	bl	8007384 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007286:	bf00      	nop
 8007288:	3758      	adds	r7, #88	; 0x58
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	4000a800 	.word	0x4000a800
 8007294:	3fcfffff 	.word	0x3fcfffff
 8007298:	4000a000 	.word	0x4000a000

0800729c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80073da:	b480      	push	{r7}
 80073dc:	b085      	sub	sp, #20
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007414:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800741e:	4ba7      	ldr	r3, [pc, #668]	; (80076bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007420:	4013      	ands	r3, r2
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	0091      	lsls	r1, r2, #2
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	430b      	orrs	r3, r1
 800742c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007438:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	041a      	lsls	r2, r3, #16
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	4413      	add	r3, r2
 8007454:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800745e:	4b97      	ldr	r3, [pc, #604]	; (80076bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007460:	4013      	ands	r3, r2
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	0091      	lsls	r1, r2, #2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	430b      	orrs	r3, r1
 800746c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007478:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007480:	041a      	lsls	r2, r3, #16
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	4413      	add	r3, r2
 8007496:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80074a0:	4b86      	ldr	r3, [pc, #536]	; (80076bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	0091      	lsls	r1, r2, #2
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6812      	ldr	r2, [r2, #0]
 80074ac:	430b      	orrs	r3, r1
 80074ae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074ba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	041a      	lsls	r2, r3, #16
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80074d6:	fb02 f303 	mul.w	r3, r2, r3
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	4413      	add	r3, r2
 80074de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80074e8:	4b74      	ldr	r3, [pc, #464]	; (80076bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80074ea:	4013      	ands	r3, r2
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	0091      	lsls	r1, r2, #2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	430b      	orrs	r3, r1
 80074f6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007502:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750a:	041a      	lsls	r2, r3, #16
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800751e:	fb02 f303 	mul.w	r3, r2, r3
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	4413      	add	r3, r2
 8007526:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007530:	4b62      	ldr	r3, [pc, #392]	; (80076bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007532:	4013      	ands	r3, r2
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	0091      	lsls	r1, r2, #2
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	430b      	orrs	r3, r1
 800753e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800754a:	fb02 f303 	mul.w	r3, r2, r3
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	4413      	add	r3, r2
 8007552:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800755c:	4b57      	ldr	r3, [pc, #348]	; (80076bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800755e:	4013      	ands	r3, r2
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	0091      	lsls	r1, r2, #2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6812      	ldr	r2, [r2, #0]
 8007568:	430b      	orrs	r3, r1
 800756a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007576:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757e:	041a      	lsls	r2, r3, #16
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	4413      	add	r3, r2
 8007594:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800759e:	4b47      	ldr	r3, [pc, #284]	; (80076bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	0091      	lsls	r1, r2, #2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6812      	ldr	r2, [r2, #0]
 80075aa:	430b      	orrs	r3, r1
 80075ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80075b8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c0:	041a      	lsls	r2, r3, #16
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80075d4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075dc:	061a      	lsls	r2, r3, #24
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075ec:	4b34      	ldr	r3, [pc, #208]	; (80076c0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80075ee:	4413      	add	r3, r2
 80075f0:	009a      	lsls	r2, r3, #2
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	441a      	add	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	441a      	add	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007622:	fb01 f303 	mul.w	r3, r1, r3
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	441a      	add	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800763a:	fb01 f303 	mul.w	r3, r1, r3
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	441a      	add	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	441a      	add	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	441a      	add	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007682:	fb01 f303 	mul.w	r3, r1, r3
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	441a      	add	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	441a      	add	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b2:	4a04      	ldr	r2, [pc, #16]	; (80076c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d915      	bls.n	80076e4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80076b8:	e006      	b.n	80076c8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80076ba:	bf00      	nop
 80076bc:	ffff0003 	.word	0xffff0003
 80076c0:	10002b00 	.word	0x10002b00
 80076c4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076ce:	f043 0220 	orr.w	r2, r3, #32
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2203      	movs	r2, #3
 80076dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e010      	b.n	8007706 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	e005      	b.n	80076f8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3304      	adds	r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	429a      	cmp	r2, r3
 8007702:	d3f3      	bcc.n	80076ec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop

08007714 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007714:	b480      	push	{r7}
 8007716:	b089      	sub	sp, #36	; 0x24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800771e:	2300      	movs	r3, #0
 8007720:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007722:	4b89      	ldr	r3, [pc, #548]	; (8007948 <HAL_GPIO_Init+0x234>)
 8007724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007726:	e194      	b.n	8007a52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	2101      	movs	r1, #1
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	fa01 f303 	lsl.w	r3, r1, r3
 8007734:	4013      	ands	r3, r2
 8007736:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 8186 	beq.w	8007a4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f003 0303 	and.w	r3, r3, #3
 8007748:	2b01      	cmp	r3, #1
 800774a:	d005      	beq.n	8007758 <HAL_GPIO_Init+0x44>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f003 0303 	and.w	r3, r3, #3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d130      	bne.n	80077ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	2203      	movs	r2, #3
 8007764:	fa02 f303 	lsl.w	r3, r2, r3
 8007768:	43db      	mvns	r3, r3
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	4013      	ands	r3, r2
 800776e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	fa02 f303 	lsl.w	r3, r2, r3
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	4313      	orrs	r3, r2
 8007780:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800778e:	2201      	movs	r2, #1
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	43db      	mvns	r3, r3
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	4013      	ands	r3, r2
 800779c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	091b      	lsrs	r3, r3, #4
 80077a4:	f003 0201 	and.w	r2, r3, #1
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	fa02 f303 	lsl.w	r3, r2, r3
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d017      	beq.n	80077f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	2203      	movs	r2, #3
 80077d2:	fa02 f303 	lsl.w	r3, r2, r3
 80077d6:	43db      	mvns	r3, r3
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	4013      	ands	r3, r2
 80077dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d123      	bne.n	800784a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	08da      	lsrs	r2, r3, #3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3208      	adds	r2, #8
 800780a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	220f      	movs	r2, #15
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	43db      	mvns	r3, r3
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	4013      	ands	r3, r2
 8007824:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	691a      	ldr	r2, [r3, #16]
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	fa02 f303 	lsl.w	r3, r2, r3
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	4313      	orrs	r3, r2
 800783a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	08da      	lsrs	r2, r3, #3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3208      	adds	r2, #8
 8007844:	69b9      	ldr	r1, [r7, #24]
 8007846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	2203      	movs	r2, #3
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	43db      	mvns	r3, r3
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	4013      	ands	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f003 0203 	and.w	r2, r3, #3
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	fa02 f303 	lsl.w	r3, r2, r3
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	4313      	orrs	r3, r2
 8007876:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 80e0 	beq.w	8007a4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800788c:	4b2f      	ldr	r3, [pc, #188]	; (800794c <HAL_GPIO_Init+0x238>)
 800788e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007892:	4a2e      	ldr	r2, [pc, #184]	; (800794c <HAL_GPIO_Init+0x238>)
 8007894:	f043 0302 	orr.w	r3, r3, #2
 8007898:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800789c:	4b2b      	ldr	r3, [pc, #172]	; (800794c <HAL_GPIO_Init+0x238>)
 800789e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078aa:	4a29      	ldr	r2, [pc, #164]	; (8007950 <HAL_GPIO_Init+0x23c>)
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	089b      	lsrs	r3, r3, #2
 80078b0:	3302      	adds	r3, #2
 80078b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	220f      	movs	r2, #15
 80078c2:	fa02 f303 	lsl.w	r3, r2, r3
 80078c6:	43db      	mvns	r3, r3
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	4013      	ands	r3, r2
 80078cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a20      	ldr	r2, [pc, #128]	; (8007954 <HAL_GPIO_Init+0x240>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d052      	beq.n	800797c <HAL_GPIO_Init+0x268>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <HAL_GPIO_Init+0x244>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d031      	beq.n	8007942 <HAL_GPIO_Init+0x22e>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a1e      	ldr	r2, [pc, #120]	; (800795c <HAL_GPIO_Init+0x248>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d02b      	beq.n	800793e <HAL_GPIO_Init+0x22a>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a1d      	ldr	r2, [pc, #116]	; (8007960 <HAL_GPIO_Init+0x24c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d025      	beq.n	800793a <HAL_GPIO_Init+0x226>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a1c      	ldr	r2, [pc, #112]	; (8007964 <HAL_GPIO_Init+0x250>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d01f      	beq.n	8007936 <HAL_GPIO_Init+0x222>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a1b      	ldr	r2, [pc, #108]	; (8007968 <HAL_GPIO_Init+0x254>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d019      	beq.n	8007932 <HAL_GPIO_Init+0x21e>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a1a      	ldr	r2, [pc, #104]	; (800796c <HAL_GPIO_Init+0x258>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d013      	beq.n	800792e <HAL_GPIO_Init+0x21a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a19      	ldr	r2, [pc, #100]	; (8007970 <HAL_GPIO_Init+0x25c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00d      	beq.n	800792a <HAL_GPIO_Init+0x216>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a18      	ldr	r2, [pc, #96]	; (8007974 <HAL_GPIO_Init+0x260>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d007      	beq.n	8007926 <HAL_GPIO_Init+0x212>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a17      	ldr	r2, [pc, #92]	; (8007978 <HAL_GPIO_Init+0x264>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d101      	bne.n	8007922 <HAL_GPIO_Init+0x20e>
 800791e:	2309      	movs	r3, #9
 8007920:	e02d      	b.n	800797e <HAL_GPIO_Init+0x26a>
 8007922:	230a      	movs	r3, #10
 8007924:	e02b      	b.n	800797e <HAL_GPIO_Init+0x26a>
 8007926:	2308      	movs	r3, #8
 8007928:	e029      	b.n	800797e <HAL_GPIO_Init+0x26a>
 800792a:	2307      	movs	r3, #7
 800792c:	e027      	b.n	800797e <HAL_GPIO_Init+0x26a>
 800792e:	2306      	movs	r3, #6
 8007930:	e025      	b.n	800797e <HAL_GPIO_Init+0x26a>
 8007932:	2305      	movs	r3, #5
 8007934:	e023      	b.n	800797e <HAL_GPIO_Init+0x26a>
 8007936:	2304      	movs	r3, #4
 8007938:	e021      	b.n	800797e <HAL_GPIO_Init+0x26a>
 800793a:	2303      	movs	r3, #3
 800793c:	e01f      	b.n	800797e <HAL_GPIO_Init+0x26a>
 800793e:	2302      	movs	r3, #2
 8007940:	e01d      	b.n	800797e <HAL_GPIO_Init+0x26a>
 8007942:	2301      	movs	r3, #1
 8007944:	e01b      	b.n	800797e <HAL_GPIO_Init+0x26a>
 8007946:	bf00      	nop
 8007948:	58000080 	.word	0x58000080
 800794c:	58024400 	.word	0x58024400
 8007950:	58000400 	.word	0x58000400
 8007954:	58020000 	.word	0x58020000
 8007958:	58020400 	.word	0x58020400
 800795c:	58020800 	.word	0x58020800
 8007960:	58020c00 	.word	0x58020c00
 8007964:	58021000 	.word	0x58021000
 8007968:	58021400 	.word	0x58021400
 800796c:	58021800 	.word	0x58021800
 8007970:	58021c00 	.word	0x58021c00
 8007974:	58022000 	.word	0x58022000
 8007978:	58022400 	.word	0x58022400
 800797c:	2300      	movs	r3, #0
 800797e:	69fa      	ldr	r2, [r7, #28]
 8007980:	f002 0203 	and.w	r2, r2, #3
 8007984:	0092      	lsls	r2, r2, #2
 8007986:	4093      	lsls	r3, r2
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	4313      	orrs	r3, r2
 800798c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800798e:	4938      	ldr	r1, [pc, #224]	; (8007a70 <HAL_GPIO_Init+0x35c>)
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	089b      	lsrs	r3, r3, #2
 8007994:	3302      	adds	r3, #2
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800799c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	43db      	mvns	r3, r3
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	4013      	ands	r3, r2
 80079ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	4313      	orrs	r3, r2
 80079c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80079c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80079ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	43db      	mvns	r3, r3
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	4013      	ands	r3, r2
 80079da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80079f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	43db      	mvns	r3, r3
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	4013      	ands	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f47f ae63 	bne.w	8007728 <HAL_GPIO_Init+0x14>
  }
}
 8007a62:	bf00      	nop
 8007a64:	bf00      	nop
 8007a66:	3724      	adds	r7, #36	; 0x24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	58000400 	.word	0x58000400

08007a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	807b      	strh	r3, [r7, #2]
 8007a80:	4613      	mov	r3, r2
 8007a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a84:	787b      	ldrb	r3, [r7, #1]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a8a:	887a      	ldrh	r2, [r7, #2]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a90:	e003      	b.n	8007a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a92:	887b      	ldrh	r3, [r7, #2]
 8007a94:	041a      	lsls	r2, r3, #16
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	619a      	str	r2, [r3, #24]
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ab8:	887a      	ldrh	r2, [r7, #2]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4013      	ands	r3, r2
 8007abe:	041a      	lsls	r2, r3, #16
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	43d9      	mvns	r1, r3
 8007ac4:	887b      	ldrh	r3, [r7, #2]
 8007ac6:	400b      	ands	r3, r1
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	619a      	str	r2, [r3, #24]
}
 8007ace:	bf00      	nop
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b082      	sub	sp, #8
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ae8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007aec:	88fb      	ldrh	r3, [r7, #6]
 8007aee:	4013      	ands	r3, r2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007af8:	88fb      	ldrh	r3, [r7, #6]
 8007afa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 f804 	bl	8007b0e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	4603      	mov	r3, r0
 8007b16:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b26:	b08f      	sub	sp, #60	; 0x3c
 8007b28:	af0a      	add	r7, sp, #40	; 0x28
 8007b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e054      	b.n	8007be0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7fd fdfb 	bl	800574c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2203      	movs	r2, #3
 8007b5a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f004 fcb7 	bl	800c4e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	687e      	ldr	r6, [r7, #4]
 8007b82:	466d      	mov	r5, sp
 8007b84:	f106 0410 	add.w	r4, r6, #16
 8007b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b94:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b98:	1d33      	adds	r3, r6, #4
 8007b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b9c:	6838      	ldr	r0, [r7, #0]
 8007b9e:	f004 fc35 	bl	800c40c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f004 fcae 	bl	800c50a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	603b      	str	r3, [r7, #0]
 8007bb4:	687e      	ldr	r6, [r7, #4]
 8007bb6:	466d      	mov	r5, sp
 8007bb8:	f106 0410 	add.w	r4, r6, #16
 8007bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007bc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007bcc:	1d33      	adds	r3, r6, #4
 8007bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bd0:	6838      	ldr	r0, [r7, #0]
 8007bd2:	f004 fd8d 	bl	800c6f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007be8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007bf0:	4b19      	ldr	r3, [pc, #100]	; (8007c58 <HAL_PWREx_ConfigSupply+0x70>)
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d00a      	beq.n	8007c12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007bfc:	4b16      	ldr	r3, [pc, #88]	; (8007c58 <HAL_PWREx_ConfigSupply+0x70>)
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d001      	beq.n	8007c0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e01f      	b.n	8007c4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e01d      	b.n	8007c4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c12:	4b11      	ldr	r3, [pc, #68]	; (8007c58 <HAL_PWREx_ConfigSupply+0x70>)
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f023 0207 	bic.w	r2, r3, #7
 8007c1a:	490f      	ldr	r1, [pc, #60]	; (8007c58 <HAL_PWREx_ConfigSupply+0x70>)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c22:	f7fe f87f 	bl	8005d24 <HAL_GetTick>
 8007c26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c28:	e009      	b.n	8007c3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c2a:	f7fe f87b 	bl	8005d24 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c38:	d901      	bls.n	8007c3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e007      	b.n	8007c4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c3e:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <HAL_PWREx_ConfigSupply+0x70>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c4a:	d1ee      	bne.n	8007c2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	58024800 	.word	0x58024800

08007c5c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007c60:	4b05      	ldr	r3, [pc, #20]	; (8007c78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	4a04      	ldr	r2, [pc, #16]	; (8007c78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c6a:	60d3      	str	r3, [r2, #12]
}
 8007c6c:	bf00      	nop
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	58024800 	.word	0x58024800

08007c7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08c      	sub	sp, #48	; 0x30
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d102      	bne.n	8007c90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f000 bc1d 	b.w	80084ca <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8087 	beq.w	8007dac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c9e:	4b99      	ldr	r3, [pc, #612]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ca8:	4b96      	ldr	r3, [pc, #600]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb0:	2b10      	cmp	r3, #16
 8007cb2:	d007      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x48>
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	2b18      	cmp	r3, #24
 8007cb8:	d110      	bne.n	8007cdc <HAL_RCC_OscConfig+0x60>
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	f003 0303 	and.w	r3, r3, #3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d10b      	bne.n	8007cdc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc4:	4b8f      	ldr	r3, [pc, #572]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d06c      	beq.n	8007daa <HAL_RCC_OscConfig+0x12e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d168      	bne.n	8007daa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e3f6      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce4:	d106      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x78>
 8007ce6:	4b87      	ldr	r3, [pc, #540]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a86      	ldr	r2, [pc, #536]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	e02e      	b.n	8007d52 <HAL_RCC_OscConfig+0xd6>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10c      	bne.n	8007d16 <HAL_RCC_OscConfig+0x9a>
 8007cfc:	4b81      	ldr	r3, [pc, #516]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a80      	ldr	r2, [pc, #512]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	4b7e      	ldr	r3, [pc, #504]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a7d      	ldr	r2, [pc, #500]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	e01d      	b.n	8007d52 <HAL_RCC_OscConfig+0xd6>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d1e:	d10c      	bne.n	8007d3a <HAL_RCC_OscConfig+0xbe>
 8007d20:	4b78      	ldr	r3, [pc, #480]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a77      	ldr	r2, [pc, #476]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	4b75      	ldr	r3, [pc, #468]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a74      	ldr	r2, [pc, #464]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	e00b      	b.n	8007d52 <HAL_RCC_OscConfig+0xd6>
 8007d3a:	4b72      	ldr	r3, [pc, #456]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a71      	ldr	r2, [pc, #452]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	4b6f      	ldr	r3, [pc, #444]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a6e      	ldr	r2, [pc, #440]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d013      	beq.n	8007d82 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d5a:	f7fd ffe3 	bl	8005d24 <HAL_GetTick>
 8007d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d60:	e008      	b.n	8007d74 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d62:	f7fd ffdf 	bl	8005d24 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	2b64      	cmp	r3, #100	; 0x64
 8007d6e:	d901      	bls.n	8007d74 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e3aa      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d74:	4b63      	ldr	r3, [pc, #396]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d0f0      	beq.n	8007d62 <HAL_RCC_OscConfig+0xe6>
 8007d80:	e014      	b.n	8007dac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d82:	f7fd ffcf 	bl	8005d24 <HAL_GetTick>
 8007d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d88:	e008      	b.n	8007d9c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d8a:	f7fd ffcb 	bl	8005d24 <HAL_GetTick>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	2b64      	cmp	r3, #100	; 0x64
 8007d96:	d901      	bls.n	8007d9c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e396      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d9c:	4b59      	ldr	r3, [pc, #356]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1f0      	bne.n	8007d8a <HAL_RCC_OscConfig+0x10e>
 8007da8:	e000      	b.n	8007dac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007daa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80cb 	beq.w	8007f50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dba:	4b52      	ldr	r3, [pc, #328]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dc2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dc4:	4b4f      	ldr	r3, [pc, #316]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d007      	beq.n	8007de0 <HAL_RCC_OscConfig+0x164>
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	2b18      	cmp	r3, #24
 8007dd4:	d156      	bne.n	8007e84 <HAL_RCC_OscConfig+0x208>
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d151      	bne.n	8007e84 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007de0:	4b48      	ldr	r3, [pc, #288]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <HAL_RCC_OscConfig+0x17c>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e368      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007df8:	4b42      	ldr	r3, [pc, #264]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f023 0219 	bic.w	r2, r3, #25
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	493f      	ldr	r1, [pc, #252]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e0a:	f7fd ff8b 	bl	8005d24 <HAL_GetTick>
 8007e0e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e10:	e008      	b.n	8007e24 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e12:	f7fd ff87 	bl	8005d24 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d901      	bls.n	8007e24 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e352      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e24:	4b37      	ldr	r3, [pc, #220]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0f0      	beq.n	8007e12 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e30:	f7fd ffa8 	bl	8005d84 <HAL_GetREVID>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d817      	bhi.n	8007e6e <HAL_RCC_OscConfig+0x1f2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b40      	cmp	r3, #64	; 0x40
 8007e44:	d108      	bne.n	8007e58 <HAL_RCC_OscConfig+0x1dc>
 8007e46:	4b2f      	ldr	r3, [pc, #188]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007e4e:	4a2d      	ldr	r2, [pc, #180]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e54:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e56:	e07b      	b.n	8007f50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e58:	4b2a      	ldr	r3, [pc, #168]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	031b      	lsls	r3, r3, #12
 8007e66:	4927      	ldr	r1, [pc, #156]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e6c:	e070      	b.n	8007f50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e6e:	4b25      	ldr	r3, [pc, #148]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	061b      	lsls	r3, r3, #24
 8007e7c:	4921      	ldr	r1, [pc, #132]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e82:	e065      	b.n	8007f50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d048      	beq.n	8007f1e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e8c:	4b1d      	ldr	r3, [pc, #116]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f023 0219 	bic.w	r2, r3, #25
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	491a      	ldr	r1, [pc, #104]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e9e:	f7fd ff41 	bl	8005d24 <HAL_GetTick>
 8007ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ea6:	f7fd ff3d 	bl	8005d24 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e308      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eb8:	4b12      	ldr	r3, [pc, #72]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0f0      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec4:	f7fd ff5e 	bl	8005d84 <HAL_GetREVID>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d81a      	bhi.n	8007f08 <HAL_RCC_OscConfig+0x28c>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d108      	bne.n	8007eec <HAL_RCC_OscConfig+0x270>
 8007eda:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007ee2:	4a08      	ldr	r2, [pc, #32]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ee8:	6053      	str	r3, [r2, #4]
 8007eea:	e031      	b.n	8007f50 <HAL_RCC_OscConfig+0x2d4>
 8007eec:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	031b      	lsls	r3, r3, #12
 8007efa:	4902      	ldr	r1, [pc, #8]	; (8007f04 <HAL_RCC_OscConfig+0x288>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	604b      	str	r3, [r1, #4]
 8007f00:	e026      	b.n	8007f50 <HAL_RCC_OscConfig+0x2d4>
 8007f02:	bf00      	nop
 8007f04:	58024400 	.word	0x58024400
 8007f08:	4b9a      	ldr	r3, [pc, #616]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	061b      	lsls	r3, r3, #24
 8007f16:	4997      	ldr	r1, [pc, #604]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	604b      	str	r3, [r1, #4]
 8007f1c:	e018      	b.n	8007f50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f1e:	4b95      	ldr	r3, [pc, #596]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a94      	ldr	r2, [pc, #592]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007f24:	f023 0301 	bic.w	r3, r3, #1
 8007f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2a:	f7fd fefb 	bl	8005d24 <HAL_GetTick>
 8007f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f30:	e008      	b.n	8007f44 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f32:	f7fd fef7 	bl	8005d24 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d901      	bls.n	8007f44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e2c2      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f44:	4b8b      	ldr	r3, [pc, #556]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1f0      	bne.n	8007f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0310 	and.w	r3, r3, #16
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80a9 	beq.w	80080b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f5e:	4b85      	ldr	r3, [pc, #532]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f68:	4b82      	ldr	r3, [pc, #520]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d007      	beq.n	8007f84 <HAL_RCC_OscConfig+0x308>
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	2b18      	cmp	r3, #24
 8007f78:	d13a      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x374>
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f003 0303 	and.w	r3, r3, #3
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d135      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f84:	4b7b      	ldr	r3, [pc, #492]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <HAL_RCC_OscConfig+0x320>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	2b80      	cmp	r3, #128	; 0x80
 8007f96:	d001      	beq.n	8007f9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e296      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f9c:	f7fd fef2 	bl	8005d84 <HAL_GetREVID>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d817      	bhi.n	8007fda <HAL_RCC_OscConfig+0x35e>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d108      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x348>
 8007fb2:	4b70      	ldr	r3, [pc, #448]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007fba:	4a6e      	ldr	r2, [pc, #440]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007fbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fc0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fc2:	e075      	b.n	80080b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fc4:	4b6b      	ldr	r3, [pc, #428]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	069b      	lsls	r3, r3, #26
 8007fd2:	4968      	ldr	r1, [pc, #416]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fd8:	e06a      	b.n	80080b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fda:	4b66      	ldr	r3, [pc, #408]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	061b      	lsls	r3, r3, #24
 8007fe8:	4962      	ldr	r1, [pc, #392]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fee:	e05f      	b.n	80080b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d042      	beq.n	800807e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007ff8:	4b5e      	ldr	r3, [pc, #376]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a5d      	ldr	r2, [pc, #372]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8007ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008004:	f7fd fe8e 	bl	8005d24 <HAL_GetTick>
 8008008:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800800a:	e008      	b.n	800801e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800800c:	f7fd fe8a 	bl	8005d24 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	2b02      	cmp	r3, #2
 8008018:	d901      	bls.n	800801e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e255      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800801e:	4b55      	ldr	r3, [pc, #340]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0f0      	beq.n	800800c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800802a:	f7fd feab 	bl	8005d84 <HAL_GetREVID>
 800802e:	4603      	mov	r3, r0
 8008030:	f241 0203 	movw	r2, #4099	; 0x1003
 8008034:	4293      	cmp	r3, r2
 8008036:	d817      	bhi.n	8008068 <HAL_RCC_OscConfig+0x3ec>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	2b20      	cmp	r3, #32
 800803e:	d108      	bne.n	8008052 <HAL_RCC_OscConfig+0x3d6>
 8008040:	4b4c      	ldr	r3, [pc, #304]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008048:	4a4a      	ldr	r2, [pc, #296]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 800804a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800804e:	6053      	str	r3, [r2, #4]
 8008050:	e02e      	b.n	80080b0 <HAL_RCC_OscConfig+0x434>
 8008052:	4b48      	ldr	r3, [pc, #288]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	069b      	lsls	r3, r3, #26
 8008060:	4944      	ldr	r1, [pc, #272]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8008062:	4313      	orrs	r3, r2
 8008064:	604b      	str	r3, [r1, #4]
 8008066:	e023      	b.n	80080b0 <HAL_RCC_OscConfig+0x434>
 8008068:	4b42      	ldr	r3, [pc, #264]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	061b      	lsls	r3, r3, #24
 8008076:	493f      	ldr	r1, [pc, #252]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8008078:	4313      	orrs	r3, r2
 800807a:	60cb      	str	r3, [r1, #12]
 800807c:	e018      	b.n	80080b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800807e:	4b3d      	ldr	r3, [pc, #244]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a3c      	ldr	r2, [pc, #240]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8008084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808a:	f7fd fe4b 	bl	8005d24 <HAL_GetTick>
 800808e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008090:	e008      	b.n	80080a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008092:	f7fd fe47 	bl	8005d24 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e212      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080a4:	4b33      	ldr	r3, [pc, #204]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1f0      	bne.n	8008092 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d036      	beq.n	800812a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d019      	beq.n	80080f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080c4:	4b2b      	ldr	r3, [pc, #172]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 80080c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080c8:	4a2a      	ldr	r2, [pc, #168]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 80080ca:	f043 0301 	orr.w	r3, r3, #1
 80080ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080d0:	f7fd fe28 	bl	8005d24 <HAL_GetTick>
 80080d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080d8:	f7fd fe24 	bl	8005d24 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e1ef      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080ea:	4b22      	ldr	r3, [pc, #136]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 80080ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0f0      	beq.n	80080d8 <HAL_RCC_OscConfig+0x45c>
 80080f6:	e018      	b.n	800812a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080f8:	4b1e      	ldr	r3, [pc, #120]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 80080fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080fc:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 80080fe:	f023 0301 	bic.w	r3, r3, #1
 8008102:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008104:	f7fd fe0e 	bl	8005d24 <HAL_GetTick>
 8008108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800810c:	f7fd fe0a 	bl	8005d24 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e1d5      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800811e:	4b15      	ldr	r3, [pc, #84]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8008120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f0      	bne.n	800810c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0320 	and.w	r3, r3, #32
 8008132:	2b00      	cmp	r3, #0
 8008134:	d039      	beq.n	80081aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d01c      	beq.n	8008178 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800813e:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a0c      	ldr	r2, [pc, #48]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8008144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008148:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800814a:	f7fd fdeb 	bl	8005d24 <HAL_GetTick>
 800814e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008150:	e008      	b.n	8008164 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008152:	f7fd fde7 	bl	8005d24 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e1b2      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008164:	4b03      	ldr	r3, [pc, #12]	; (8008174 <HAL_RCC_OscConfig+0x4f8>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0f0      	beq.n	8008152 <HAL_RCC_OscConfig+0x4d6>
 8008170:	e01b      	b.n	80081aa <HAL_RCC_OscConfig+0x52e>
 8008172:	bf00      	nop
 8008174:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008178:	4b9b      	ldr	r3, [pc, #620]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a9a      	ldr	r2, [pc, #616]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800817e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008182:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008184:	f7fd fdce 	bl	8005d24 <HAL_GetTick>
 8008188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800818c:	f7fd fdca 	bl	8005d24 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e195      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800819e:	4b92      	ldr	r3, [pc, #584]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f0      	bne.n	800818c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 8081 	beq.w	80082ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081b8:	4b8c      	ldr	r3, [pc, #560]	; (80083ec <HAL_RCC_OscConfig+0x770>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a8b      	ldr	r2, [pc, #556]	; (80083ec <HAL_RCC_OscConfig+0x770>)
 80081be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081c4:	f7fd fdae 	bl	8005d24 <HAL_GetTick>
 80081c8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ca:	e008      	b.n	80081de <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081cc:	f7fd fdaa 	bl	8005d24 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b64      	cmp	r3, #100	; 0x64
 80081d8:	d901      	bls.n	80081de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e175      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081de:	4b83      	ldr	r3, [pc, #524]	; (80083ec <HAL_RCC_OscConfig+0x770>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d106      	bne.n	8008200 <HAL_RCC_OscConfig+0x584>
 80081f2:	4b7d      	ldr	r3, [pc, #500]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80081f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f6:	4a7c      	ldr	r2, [pc, #496]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80081f8:	f043 0301 	orr.w	r3, r3, #1
 80081fc:	6713      	str	r3, [r2, #112]	; 0x70
 80081fe:	e02d      	b.n	800825c <HAL_RCC_OscConfig+0x5e0>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10c      	bne.n	8008222 <HAL_RCC_OscConfig+0x5a6>
 8008208:	4b77      	ldr	r3, [pc, #476]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800820a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820c:	4a76      	ldr	r2, [pc, #472]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800820e:	f023 0301 	bic.w	r3, r3, #1
 8008212:	6713      	str	r3, [r2, #112]	; 0x70
 8008214:	4b74      	ldr	r3, [pc, #464]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008218:	4a73      	ldr	r2, [pc, #460]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800821a:	f023 0304 	bic.w	r3, r3, #4
 800821e:	6713      	str	r3, [r2, #112]	; 0x70
 8008220:	e01c      	b.n	800825c <HAL_RCC_OscConfig+0x5e0>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b05      	cmp	r3, #5
 8008228:	d10c      	bne.n	8008244 <HAL_RCC_OscConfig+0x5c8>
 800822a:	4b6f      	ldr	r3, [pc, #444]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822e:	4a6e      	ldr	r2, [pc, #440]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008230:	f043 0304 	orr.w	r3, r3, #4
 8008234:	6713      	str	r3, [r2, #112]	; 0x70
 8008236:	4b6c      	ldr	r3, [pc, #432]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823a:	4a6b      	ldr	r2, [pc, #428]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800823c:	f043 0301 	orr.w	r3, r3, #1
 8008240:	6713      	str	r3, [r2, #112]	; 0x70
 8008242:	e00b      	b.n	800825c <HAL_RCC_OscConfig+0x5e0>
 8008244:	4b68      	ldr	r3, [pc, #416]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008248:	4a67      	ldr	r2, [pc, #412]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800824a:	f023 0301 	bic.w	r3, r3, #1
 800824e:	6713      	str	r3, [r2, #112]	; 0x70
 8008250:	4b65      	ldr	r3, [pc, #404]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008254:	4a64      	ldr	r2, [pc, #400]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008256:	f023 0304 	bic.w	r3, r3, #4
 800825a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d015      	beq.n	8008290 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008264:	f7fd fd5e 	bl	8005d24 <HAL_GetTick>
 8008268:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800826a:	e00a      	b.n	8008282 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800826c:	f7fd fd5a 	bl	8005d24 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	f241 3288 	movw	r2, #5000	; 0x1388
 800827a:	4293      	cmp	r3, r2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e123      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008282:	4b59      	ldr	r3, [pc, #356]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0ee      	beq.n	800826c <HAL_RCC_OscConfig+0x5f0>
 800828e:	e014      	b.n	80082ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008290:	f7fd fd48 	bl	8005d24 <HAL_GetTick>
 8008294:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008296:	e00a      	b.n	80082ae <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008298:	f7fd fd44 	bl	8005d24 <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e10d      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082ae:	4b4e      	ldr	r3, [pc, #312]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80082b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1ee      	bne.n	8008298 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 8102 	beq.w	80084c8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082c4:	4b48      	ldr	r3, [pc, #288]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082cc:	2b18      	cmp	r3, #24
 80082ce:	f000 80bd 	beq.w	800844c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	f040 809e 	bne.w	8008418 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082dc:	4b42      	ldr	r3, [pc, #264]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a41      	ldr	r2, [pc, #260]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80082e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e8:	f7fd fd1c 	bl	8005d24 <HAL_GetTick>
 80082ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082ee:	e008      	b.n	8008302 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082f0:	f7fd fd18 	bl	8005d24 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e0e3      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008302:	4b39      	ldr	r3, [pc, #228]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1f0      	bne.n	80082f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800830e:	4b36      	ldr	r3, [pc, #216]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008312:	4b37      	ldr	r3, [pc, #220]	; (80083f0 <HAL_RCC_OscConfig+0x774>)
 8008314:	4013      	ands	r3, r2
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800831e:	0112      	lsls	r2, r2, #4
 8008320:	430a      	orrs	r2, r1
 8008322:	4931      	ldr	r1, [pc, #196]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008324:	4313      	orrs	r3, r2
 8008326:	628b      	str	r3, [r1, #40]	; 0x28
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832c:	3b01      	subs	r3, #1
 800832e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008336:	3b01      	subs	r3, #1
 8008338:	025b      	lsls	r3, r3, #9
 800833a:	b29b      	uxth	r3, r3
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	3b01      	subs	r3, #1
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800834a:	431a      	orrs	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008350:	3b01      	subs	r3, #1
 8008352:	061b      	lsls	r3, r3, #24
 8008354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008358:	4923      	ldr	r1, [pc, #140]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800835a:	4313      	orrs	r3, r2
 800835c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800835e:	4b22      	ldr	r3, [pc, #136]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	4a21      	ldr	r2, [pc, #132]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008364:	f023 0301 	bic.w	r3, r3, #1
 8008368:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800836a:	4b1f      	ldr	r3, [pc, #124]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800836c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800836e:	4b21      	ldr	r3, [pc, #132]	; (80083f4 <HAL_RCC_OscConfig+0x778>)
 8008370:	4013      	ands	r3, r2
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008376:	00d2      	lsls	r2, r2, #3
 8008378:	491b      	ldr	r1, [pc, #108]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800837a:	4313      	orrs	r3, r2
 800837c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800837e:	4b1a      	ldr	r3, [pc, #104]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	f023 020c 	bic.w	r2, r3, #12
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	4917      	ldr	r1, [pc, #92]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800838c:	4313      	orrs	r3, r2
 800838e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008390:	4b15      	ldr	r3, [pc, #84]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	f023 0202 	bic.w	r2, r3, #2
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839c:	4912      	ldr	r1, [pc, #72]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083a2:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	4a10      	ldr	r2, [pc, #64]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80083a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ae:	4b0e      	ldr	r3, [pc, #56]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80083b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b2:	4a0d      	ldr	r2, [pc, #52]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80083b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80083bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083be:	4a0a      	ldr	r2, [pc, #40]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80083c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80083c6:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80083c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ca:	4a07      	ldr	r2, [pc, #28]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80083cc:	f043 0301 	orr.w	r3, r3, #1
 80083d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083d2:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a04      	ldr	r2, [pc, #16]	; (80083e8 <HAL_RCC_OscConfig+0x76c>)
 80083d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083de:	f7fd fca1 	bl	8005d24 <HAL_GetTick>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083e4:	e011      	b.n	800840a <HAL_RCC_OscConfig+0x78e>
 80083e6:	bf00      	nop
 80083e8:	58024400 	.word	0x58024400
 80083ec:	58024800 	.word	0x58024800
 80083f0:	fffffc0c 	.word	0xfffffc0c
 80083f4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083f8:	f7fd fc94 	bl	8005d24 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b02      	cmp	r3, #2
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e05f      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800840a:	4b32      	ldr	r3, [pc, #200]	; (80084d4 <HAL_RCC_OscConfig+0x858>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0f0      	beq.n	80083f8 <HAL_RCC_OscConfig+0x77c>
 8008416:	e057      	b.n	80084c8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008418:	4b2e      	ldr	r3, [pc, #184]	; (80084d4 <HAL_RCC_OscConfig+0x858>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a2d      	ldr	r2, [pc, #180]	; (80084d4 <HAL_RCC_OscConfig+0x858>)
 800841e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008424:	f7fd fc7e 	bl	8005d24 <HAL_GetTick>
 8008428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800842a:	e008      	b.n	800843e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800842c:	f7fd fc7a 	bl	8005d24 <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	2b02      	cmp	r3, #2
 8008438:	d901      	bls.n	800843e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e045      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800843e:	4b25      	ldr	r3, [pc, #148]	; (80084d4 <HAL_RCC_OscConfig+0x858>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1f0      	bne.n	800842c <HAL_RCC_OscConfig+0x7b0>
 800844a:	e03d      	b.n	80084c8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800844c:	4b21      	ldr	r3, [pc, #132]	; (80084d4 <HAL_RCC_OscConfig+0x858>)
 800844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008450:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008452:	4b20      	ldr	r3, [pc, #128]	; (80084d4 <HAL_RCC_OscConfig+0x858>)
 8008454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008456:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	2b01      	cmp	r3, #1
 800845e:	d031      	beq.n	80084c4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f003 0203 	and.w	r2, r3, #3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800846a:	429a      	cmp	r2, r3
 800846c:	d12a      	bne.n	80084c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	091b      	lsrs	r3, r3, #4
 8008472:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800847a:	429a      	cmp	r2, r3
 800847c:	d122      	bne.n	80084c4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008488:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800848a:	429a      	cmp	r2, r3
 800848c:	d11a      	bne.n	80084c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	0a5b      	lsrs	r3, r3, #9
 8008492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800849c:	429a      	cmp	r2, r3
 800849e:	d111      	bne.n	80084c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	0c1b      	lsrs	r3, r3, #16
 80084a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d108      	bne.n	80084c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	0e1b      	lsrs	r3, r3, #24
 80084b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d001      	beq.n	80084c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3730      	adds	r7, #48	; 0x30
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	58024400 	.word	0x58024400

080084d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e19c      	b.n	8008826 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084ec:	4b8a      	ldr	r3, [pc, #552]	; (8008718 <HAL_RCC_ClockConfig+0x240>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 030f 	and.w	r3, r3, #15
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d910      	bls.n	800851c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084fa:	4b87      	ldr	r3, [pc, #540]	; (8008718 <HAL_RCC_ClockConfig+0x240>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f023 020f 	bic.w	r2, r3, #15
 8008502:	4985      	ldr	r1, [pc, #532]	; (8008718 <HAL_RCC_ClockConfig+0x240>)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	4313      	orrs	r3, r2
 8008508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800850a:	4b83      	ldr	r3, [pc, #524]	; (8008718 <HAL_RCC_ClockConfig+0x240>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d001      	beq.n	800851c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e184      	b.n	8008826 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d010      	beq.n	800854a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	691a      	ldr	r2, [r3, #16]
 800852c:	4b7b      	ldr	r3, [pc, #492]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008534:	429a      	cmp	r2, r3
 8008536:	d908      	bls.n	800854a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008538:	4b78      	ldr	r3, [pc, #480]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	4975      	ldr	r1, [pc, #468]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 8008546:	4313      	orrs	r3, r2
 8008548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0308 	and.w	r3, r3, #8
 8008552:	2b00      	cmp	r3, #0
 8008554:	d010      	beq.n	8008578 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	695a      	ldr	r2, [r3, #20]
 800855a:	4b70      	ldr	r3, [pc, #448]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008562:	429a      	cmp	r2, r3
 8008564:	d908      	bls.n	8008578 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008566:	4b6d      	ldr	r3, [pc, #436]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	496a      	ldr	r1, [pc, #424]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 8008574:	4313      	orrs	r3, r2
 8008576:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b00      	cmp	r3, #0
 8008582:	d010      	beq.n	80085a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	699a      	ldr	r2, [r3, #24]
 8008588:	4b64      	ldr	r3, [pc, #400]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008590:	429a      	cmp	r2, r3
 8008592:	d908      	bls.n	80085a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008594:	4b61      	ldr	r3, [pc, #388]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	495e      	ldr	r1, [pc, #376]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0320 	and.w	r3, r3, #32
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d010      	beq.n	80085d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	69da      	ldr	r2, [r3, #28]
 80085b6:	4b59      	ldr	r3, [pc, #356]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085be:	429a      	cmp	r2, r3
 80085c0:	d908      	bls.n	80085d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80085c2:	4b56      	ldr	r3, [pc, #344]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	4953      	ldr	r1, [pc, #332]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d010      	beq.n	8008602 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	4b4d      	ldr	r3, [pc, #308]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	f003 030f 	and.w	r3, r3, #15
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d908      	bls.n	8008602 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085f0:	4b4a      	ldr	r3, [pc, #296]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	f023 020f 	bic.w	r2, r3, #15
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	4947      	ldr	r1, [pc, #284]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d055      	beq.n	80086ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800860e:	4b43      	ldr	r3, [pc, #268]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	4940      	ldr	r1, [pc, #256]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 800861c:	4313      	orrs	r3, r2
 800861e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	2b02      	cmp	r3, #2
 8008626:	d107      	bne.n	8008638 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008628:	4b3c      	ldr	r3, [pc, #240]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d121      	bne.n	8008678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e0f6      	b.n	8008826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	2b03      	cmp	r3, #3
 800863e:	d107      	bne.n	8008650 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008640:	4b36      	ldr	r3, [pc, #216]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d115      	bne.n	8008678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e0ea      	b.n	8008826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d107      	bne.n	8008668 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008658:	4b30      	ldr	r3, [pc, #192]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008660:	2b00      	cmp	r3, #0
 8008662:	d109      	bne.n	8008678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e0de      	b.n	8008826 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008668:	4b2c      	ldr	r3, [pc, #176]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e0d6      	b.n	8008826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008678:	4b28      	ldr	r3, [pc, #160]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	f023 0207 	bic.w	r2, r3, #7
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	4925      	ldr	r1, [pc, #148]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 8008686:	4313      	orrs	r3, r2
 8008688:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800868a:	f7fd fb4b 	bl	8005d24 <HAL_GetTick>
 800868e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008690:	e00a      	b.n	80086a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008692:	f7fd fb47 	bl	8005d24 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e0be      	b.n	8008826 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086a8:	4b1c      	ldr	r3, [pc, #112]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d1eb      	bne.n	8008692 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0302 	and.w	r3, r3, #2
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d010      	beq.n	80086e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	4b14      	ldr	r3, [pc, #80]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	f003 030f 	and.w	r3, r3, #15
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d208      	bcs.n	80086e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086d6:	4b11      	ldr	r3, [pc, #68]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	f023 020f 	bic.w	r2, r3, #15
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	490e      	ldr	r1, [pc, #56]	; (800871c <HAL_RCC_ClockConfig+0x244>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086e8:	4b0b      	ldr	r3, [pc, #44]	; (8008718 <HAL_RCC_ClockConfig+0x240>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 030f 	and.w	r3, r3, #15
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d214      	bcs.n	8008720 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086f6:	4b08      	ldr	r3, [pc, #32]	; (8008718 <HAL_RCC_ClockConfig+0x240>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f023 020f 	bic.w	r2, r3, #15
 80086fe:	4906      	ldr	r1, [pc, #24]	; (8008718 <HAL_RCC_ClockConfig+0x240>)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	4313      	orrs	r3, r2
 8008704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008706:	4b04      	ldr	r3, [pc, #16]	; (8008718 <HAL_RCC_ClockConfig+0x240>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 030f 	and.w	r3, r3, #15
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d005      	beq.n	8008720 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e086      	b.n	8008826 <HAL_RCC_ClockConfig+0x34e>
 8008718:	52002000 	.word	0x52002000
 800871c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	d010      	beq.n	800874e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691a      	ldr	r2, [r3, #16]
 8008730:	4b3f      	ldr	r3, [pc, #252]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008738:	429a      	cmp	r2, r3
 800873a:	d208      	bcs.n	800874e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800873c:	4b3c      	ldr	r3, [pc, #240]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	4939      	ldr	r1, [pc, #228]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 800874a:	4313      	orrs	r3, r2
 800874c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0308 	and.w	r3, r3, #8
 8008756:	2b00      	cmp	r3, #0
 8008758:	d010      	beq.n	800877c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	695a      	ldr	r2, [r3, #20]
 800875e:	4b34      	ldr	r3, [pc, #208]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008766:	429a      	cmp	r2, r3
 8008768:	d208      	bcs.n	800877c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800876a:	4b31      	ldr	r3, [pc, #196]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	492e      	ldr	r1, [pc, #184]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 8008778:	4313      	orrs	r3, r2
 800877a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0310 	and.w	r3, r3, #16
 8008784:	2b00      	cmp	r3, #0
 8008786:	d010      	beq.n	80087aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	699a      	ldr	r2, [r3, #24]
 800878c:	4b28      	ldr	r3, [pc, #160]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008794:	429a      	cmp	r2, r3
 8008796:	d208      	bcs.n	80087aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008798:	4b25      	ldr	r3, [pc, #148]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	4922      	ldr	r1, [pc, #136]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d010      	beq.n	80087d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	69da      	ldr	r2, [r3, #28]
 80087ba:	4b1d      	ldr	r3, [pc, #116]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d208      	bcs.n	80087d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80087c6:	4b1a      	ldr	r3, [pc, #104]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	4917      	ldr	r1, [pc, #92]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80087d8:	f000 f834 	bl	8008844 <HAL_RCC_GetSysClockFreq>
 80087dc:	4602      	mov	r2, r0
 80087de:	4b14      	ldr	r3, [pc, #80]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	0a1b      	lsrs	r3, r3, #8
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	4912      	ldr	r1, [pc, #72]	; (8008834 <HAL_RCC_ClockConfig+0x35c>)
 80087ea:	5ccb      	ldrb	r3, [r1, r3]
 80087ec:	f003 031f 	and.w	r3, r3, #31
 80087f0:	fa22 f303 	lsr.w	r3, r2, r3
 80087f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087f6:	4b0e      	ldr	r3, [pc, #56]	; (8008830 <HAL_RCC_ClockConfig+0x358>)
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f003 030f 	and.w	r3, r3, #15
 80087fe:	4a0d      	ldr	r2, [pc, #52]	; (8008834 <HAL_RCC_ClockConfig+0x35c>)
 8008800:	5cd3      	ldrb	r3, [r2, r3]
 8008802:	f003 031f 	and.w	r3, r3, #31
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	fa22 f303 	lsr.w	r3, r2, r3
 800880c:	4a0a      	ldr	r2, [pc, #40]	; (8008838 <HAL_RCC_ClockConfig+0x360>)
 800880e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008810:	4a0a      	ldr	r2, [pc, #40]	; (800883c <HAL_RCC_ClockConfig+0x364>)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008816:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <HAL_RCC_ClockConfig+0x368>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4618      	mov	r0, r3
 800881c:	f7fd f800 	bl	8005820 <HAL_InitTick>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	58024400 	.word	0x58024400
 8008834:	0800df38 	.word	0x0800df38
 8008838:	24000014 	.word	0x24000014
 800883c:	24000010 	.word	0x24000010
 8008840:	24000018 	.word	0x24000018

08008844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008844:	b480      	push	{r7}
 8008846:	b089      	sub	sp, #36	; 0x24
 8008848:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800884a:	4bb3      	ldr	r3, [pc, #716]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008852:	2b18      	cmp	r3, #24
 8008854:	f200 8155 	bhi.w	8008b02 <HAL_RCC_GetSysClockFreq+0x2be>
 8008858:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <HAL_RCC_GetSysClockFreq+0x1c>)
 800885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885e:	bf00      	nop
 8008860:	080088c5 	.word	0x080088c5
 8008864:	08008b03 	.word	0x08008b03
 8008868:	08008b03 	.word	0x08008b03
 800886c:	08008b03 	.word	0x08008b03
 8008870:	08008b03 	.word	0x08008b03
 8008874:	08008b03 	.word	0x08008b03
 8008878:	08008b03 	.word	0x08008b03
 800887c:	08008b03 	.word	0x08008b03
 8008880:	080088eb 	.word	0x080088eb
 8008884:	08008b03 	.word	0x08008b03
 8008888:	08008b03 	.word	0x08008b03
 800888c:	08008b03 	.word	0x08008b03
 8008890:	08008b03 	.word	0x08008b03
 8008894:	08008b03 	.word	0x08008b03
 8008898:	08008b03 	.word	0x08008b03
 800889c:	08008b03 	.word	0x08008b03
 80088a0:	080088f1 	.word	0x080088f1
 80088a4:	08008b03 	.word	0x08008b03
 80088a8:	08008b03 	.word	0x08008b03
 80088ac:	08008b03 	.word	0x08008b03
 80088b0:	08008b03 	.word	0x08008b03
 80088b4:	08008b03 	.word	0x08008b03
 80088b8:	08008b03 	.word	0x08008b03
 80088bc:	08008b03 	.word	0x08008b03
 80088c0:	080088f7 	.word	0x080088f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088c4:	4b94      	ldr	r3, [pc, #592]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0320 	and.w	r3, r3, #32
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d009      	beq.n	80088e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088d0:	4b91      	ldr	r3, [pc, #580]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	08db      	lsrs	r3, r3, #3
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	4a90      	ldr	r2, [pc, #576]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088dc:	fa22 f303 	lsr.w	r3, r2, r3
 80088e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80088e2:	e111      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80088e4:	4b8d      	ldr	r3, [pc, #564]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088e6:	61bb      	str	r3, [r7, #24]
    break;
 80088e8:	e10e      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80088ea:	4b8d      	ldr	r3, [pc, #564]	; (8008b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088ec:	61bb      	str	r3, [r7, #24]
    break;
 80088ee:	e10b      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80088f0:	4b8c      	ldr	r3, [pc, #560]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80088f2:	61bb      	str	r3, [r7, #24]
    break;
 80088f4:	e108      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088f6:	4b88      	ldr	r3, [pc, #544]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fa:	f003 0303 	and.w	r3, r3, #3
 80088fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008900:	4b85      	ldr	r3, [pc, #532]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008904:	091b      	lsrs	r3, r3, #4
 8008906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800890a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800890c:	4b82      	ldr	r3, [pc, #520]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008916:	4b80      	ldr	r3, [pc, #512]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	fb02 f303 	mul.w	r3, r2, r3
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 80e1 	beq.w	8008afc <HAL_RCC_GetSysClockFreq+0x2b8>
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b02      	cmp	r3, #2
 800893e:	f000 8083 	beq.w	8008a48 <HAL_RCC_GetSysClockFreq+0x204>
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b02      	cmp	r3, #2
 8008946:	f200 80a1 	bhi.w	8008a8c <HAL_RCC_GetSysClockFreq+0x248>
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <HAL_RCC_GetSysClockFreq+0x114>
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d056      	beq.n	8008a04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008956:	e099      	b.n	8008a8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008958:	4b6f      	ldr	r3, [pc, #444]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0320 	and.w	r3, r3, #32
 8008960:	2b00      	cmp	r3, #0
 8008962:	d02d      	beq.n	80089c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008964:	4b6c      	ldr	r3, [pc, #432]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	08db      	lsrs	r3, r3, #3
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	4a6b      	ldr	r2, [pc, #428]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008970:	fa22 f303 	lsr.w	r3, r2, r3
 8008974:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	ee07 3a90 	vmov	s15, r3
 800897c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	ee07 3a90 	vmov	s15, r3
 8008986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800898e:	4b62      	ldr	r3, [pc, #392]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899e:	ed97 6a02 	vldr	s12, [r7, #8]
 80089a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80089be:	e087      	b.n	8008ad0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008b2c <HAL_RCC_GetSysClockFreq+0x2e8>
 80089ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d2:	4b51      	ldr	r3, [pc, #324]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80089e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a02:	e065      	b.n	8008ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008b30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a16:	4b40      	ldr	r3, [pc, #256]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a46:	e043      	b.n	8008ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008b34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5a:	4b2f      	ldr	r3, [pc, #188]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a8a:	e021      	b.n	8008ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008b30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a9e:	4b1e      	ldr	r3, [pc, #120]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ab2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ace:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008ad0:	4b11      	ldr	r3, [pc, #68]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	0a5b      	lsrs	r3, r3, #9
 8008ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ada:	3301      	adds	r3, #1
 8008adc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	ee07 3a90 	vmov	s15, r3
 8008ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ae8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af4:	ee17 3a90 	vmov	r3, s15
 8008af8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008afa:	e005      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	61bb      	str	r3, [r7, #24]
    break;
 8008b00:	e002      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008b02:	4b07      	ldr	r3, [pc, #28]	; (8008b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b04:	61bb      	str	r3, [r7, #24]
    break;
 8008b06:	bf00      	nop
  }

  return sysclockfreq;
 8008b08:	69bb      	ldr	r3, [r7, #24]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3724      	adds	r7, #36	; 0x24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	58024400 	.word	0x58024400
 8008b1c:	03d09000 	.word	0x03d09000
 8008b20:	003d0900 	.word	0x003d0900
 8008b24:	007a1200 	.word	0x007a1200
 8008b28:	46000000 	.word	0x46000000
 8008b2c:	4c742400 	.word	0x4c742400
 8008b30:	4a742400 	.word	0x4a742400
 8008b34:	4af42400 	.word	0x4af42400

08008b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b3e:	f7ff fe81 	bl	8008844 <HAL_RCC_GetSysClockFreq>
 8008b42:	4602      	mov	r2, r0
 8008b44:	4b10      	ldr	r3, [pc, #64]	; (8008b88 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	0a1b      	lsrs	r3, r3, #8
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	490f      	ldr	r1, [pc, #60]	; (8008b8c <HAL_RCC_GetHCLKFreq+0x54>)
 8008b50:	5ccb      	ldrb	r3, [r1, r3]
 8008b52:	f003 031f 	and.w	r3, r3, #31
 8008b56:	fa22 f303 	lsr.w	r3, r2, r3
 8008b5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	4a09      	ldr	r2, [pc, #36]	; (8008b8c <HAL_RCC_GetHCLKFreq+0x54>)
 8008b66:	5cd3      	ldrb	r3, [r2, r3]
 8008b68:	f003 031f 	and.w	r3, r3, #31
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b72:	4a07      	ldr	r2, [pc, #28]	; (8008b90 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b76:	4a07      	ldr	r2, [pc, #28]	; (8008b94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b7c:	4b04      	ldr	r3, [pc, #16]	; (8008b90 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	58024400 	.word	0x58024400
 8008b8c:	0800df38 	.word	0x0800df38
 8008b90:	24000014 	.word	0x24000014
 8008b94:	24000010 	.word	0x24000010

08008b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b9c:	f7ff ffcc 	bl	8008b38 <HAL_RCC_GetHCLKFreq>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	4b06      	ldr	r3, [pc, #24]	; (8008bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	091b      	lsrs	r3, r3, #4
 8008ba8:	f003 0307 	and.w	r3, r3, #7
 8008bac:	4904      	ldr	r1, [pc, #16]	; (8008bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bae:	5ccb      	ldrb	r3, [r1, r3]
 8008bb0:	f003 031f 	and.w	r3, r3, #31
 8008bb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	58024400 	.word	0x58024400
 8008bc0:	0800df38 	.word	0x0800df38

08008bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008bc8:	f7ff ffb6 	bl	8008b38 <HAL_RCC_GetHCLKFreq>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	f003 0307 	and.w	r3, r3, #7
 8008bd8:	4904      	ldr	r1, [pc, #16]	; (8008bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8008bda:	5ccb      	ldrb	r3, [r1, r3]
 8008bdc:	f003 031f 	and.w	r3, r3, #31
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	58024400 	.word	0x58024400
 8008bec:	0800df38 	.word	0x0800df38

08008bf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	223f      	movs	r2, #63	; 0x3f
 8008bfe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c00:	4b1a      	ldr	r3, [pc, #104]	; (8008c6c <HAL_RCC_GetClockConfig+0x7c>)
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f003 0207 	and.w	r2, r3, #7
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008c0c:	4b17      	ldr	r3, [pc, #92]	; (8008c6c <HAL_RCC_GetClockConfig+0x7c>)
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008c18:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <HAL_RCC_GetClockConfig+0x7c>)
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f003 020f 	and.w	r2, r3, #15
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008c24:	4b11      	ldr	r3, [pc, #68]	; (8008c6c <HAL_RCC_GetClockConfig+0x7c>)
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008c30:	4b0e      	ldr	r3, [pc, #56]	; (8008c6c <HAL_RCC_GetClockConfig+0x7c>)
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008c3c:	4b0b      	ldr	r3, [pc, #44]	; (8008c6c <HAL_RCC_GetClockConfig+0x7c>)
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008c48:	4b08      	ldr	r3, [pc, #32]	; (8008c6c <HAL_RCC_GetClockConfig+0x7c>)
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c54:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <HAL_RCC_GetClockConfig+0x80>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 020f 	and.w	r2, r3, #15
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	601a      	str	r2, [r3, #0]
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	58024400 	.word	0x58024400
 8008c70:	52002000 	.word	0x52002000

08008c74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c80:	2300      	movs	r3, #0
 8008c82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d03f      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c98:	d02a      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008c9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c9e:	d824      	bhi.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ca4:	d018      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008caa:	d81e      	bhi.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb4:	d007      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008cb6:	e018      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb8:	4ba3      	ldr	r3, [pc, #652]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	4aa2      	ldr	r2, [pc, #648]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008cc4:	e015      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	2102      	movs	r1, #2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 f9d5 	bl	800a07c <RCCEx_PLL2_Config>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008cd6:	e00c      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	3324      	adds	r3, #36	; 0x24
 8008cdc:	2102      	movs	r1, #2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 fa7e 	bl	800a1e0 <RCCEx_PLL3_Config>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ce8:	e003      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	75fb      	strb	r3, [r7, #23]
      break;
 8008cee:	e000      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d109      	bne.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008cf8:	4b93      	ldr	r3, [pc, #588]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d04:	4990      	ldr	r1, [pc, #576]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	650b      	str	r3, [r1, #80]	; 0x50
 8008d0a:	e001      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d03d      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d826      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008d24:	a201      	add	r2, pc, #4	; (adr r2, 8008d2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2a:	bf00      	nop
 8008d2c:	08008d41 	.word	0x08008d41
 8008d30:	08008d4f 	.word	0x08008d4f
 8008d34:	08008d61 	.word	0x08008d61
 8008d38:	08008d79 	.word	0x08008d79
 8008d3c:	08008d79 	.word	0x08008d79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d40:	4b81      	ldr	r3, [pc, #516]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	4a80      	ldr	r2, [pc, #512]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d4c:	e015      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3304      	adds	r3, #4
 8008d52:	2100      	movs	r1, #0
 8008d54:	4618      	mov	r0, r3
 8008d56:	f001 f991 	bl	800a07c <RCCEx_PLL2_Config>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d5e:	e00c      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3324      	adds	r3, #36	; 0x24
 8008d64:	2100      	movs	r1, #0
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 fa3a 	bl	800a1e0 <RCCEx_PLL3_Config>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d70:	e003      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	75fb      	strb	r3, [r7, #23]
      break;
 8008d76:	e000      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d109      	bne.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d80:	4b71      	ldr	r3, [pc, #452]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d84:	f023 0207 	bic.w	r2, r3, #7
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8c:	496e      	ldr	r1, [pc, #440]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	650b      	str	r3, [r1, #80]	; 0x50
 8008d92:	e001      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d042      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dac:	d02b      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008db2:	d825      	bhi.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008db4:	2bc0      	cmp	r3, #192	; 0xc0
 8008db6:	d028      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008db8:	2bc0      	cmp	r3, #192	; 0xc0
 8008dba:	d821      	bhi.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008dbc:	2b80      	cmp	r3, #128	; 0x80
 8008dbe:	d016      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008dc0:	2b80      	cmp	r3, #128	; 0x80
 8008dc2:	d81d      	bhi.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008dc8:	2b40      	cmp	r3, #64	; 0x40
 8008dca:	d007      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008dcc:	e018      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dce:	4b5e      	ldr	r3, [pc, #376]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	4a5d      	ldr	r2, [pc, #372]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008dda:	e017      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3304      	adds	r3, #4
 8008de0:	2100      	movs	r1, #0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f001 f94a 	bl	800a07c <RCCEx_PLL2_Config>
 8008de8:	4603      	mov	r3, r0
 8008dea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008dec:	e00e      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3324      	adds	r3, #36	; 0x24
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f001 f9f3 	bl	800a1e0 <RCCEx_PLL3_Config>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008dfe:	e005      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	75fb      	strb	r3, [r7, #23]
      break;
 8008e04:	e002      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008e06:	bf00      	nop
 8008e08:	e000      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d109      	bne.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008e12:	4b4d      	ldr	r3, [pc, #308]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e16:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1e:	494a      	ldr	r1, [pc, #296]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	650b      	str	r3, [r1, #80]	; 0x50
 8008e24:	e001      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d049      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e40:	d030      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008e42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e46:	d82a      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008e48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e4c:	d02c      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008e4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e52:	d824      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e58:	d018      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e5e:	d81e      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e68:	d007      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008e6a:	e018      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e6c:	4b36      	ldr	r3, [pc, #216]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	4a35      	ldr	r2, [pc, #212]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e78:	e017      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	2100      	movs	r1, #0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 f8fb 	bl	800a07c <RCCEx_PLL2_Config>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e8a:	e00e      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3324      	adds	r3, #36	; 0x24
 8008e90:	2100      	movs	r1, #0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f001 f9a4 	bl	800a1e0 <RCCEx_PLL3_Config>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e9c:	e005      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea2:	e002      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008ea4:	bf00      	nop
 8008ea6:	e000      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008eb0:	4b25      	ldr	r3, [pc, #148]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ebe:	4922      	ldr	r1, [pc, #136]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	658b      	str	r3, [r1, #88]	; 0x58
 8008ec4:	e001      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d04b      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008edc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ee0:	d030      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008ee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ee6:	d82a      	bhi.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008ee8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008eec:	d02e      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008eee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ef2:	d824      	bhi.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ef8:	d018      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008efe:	d81e      	bhi.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d003      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f08:	d007      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008f0a:	e018      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f0c:	4b0e      	ldr	r3, [pc, #56]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f10:	4a0d      	ldr	r2, [pc, #52]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f18:	e019      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	2100      	movs	r1, #0
 8008f20:	4618      	mov	r0, r3
 8008f22:	f001 f8ab 	bl	800a07c <RCCEx_PLL2_Config>
 8008f26:	4603      	mov	r3, r0
 8008f28:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008f2a:	e010      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	3324      	adds	r3, #36	; 0x24
 8008f30:	2100      	movs	r1, #0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 f954 	bl	800a1e0 <RCCEx_PLL3_Config>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f3c:	e007      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	75fb      	strb	r3, [r7, #23]
      break;
 8008f42:	e004      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008f44:	bf00      	nop
 8008f46:	e002      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008f48:	58024400 	.word	0x58024400
      break;
 8008f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f54:	4b99      	ldr	r3, [pc, #612]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f58:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f62:	4996      	ldr	r1, [pc, #600]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	658b      	str	r3, [r1, #88]	; 0x58
 8008f68:	e001      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d032      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f7e:	2b30      	cmp	r3, #48	; 0x30
 8008f80:	d01c      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008f82:	2b30      	cmp	r3, #48	; 0x30
 8008f84:	d817      	bhi.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	d00c      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008f8a:	2b20      	cmp	r3, #32
 8008f8c:	d813      	bhi.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d016      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d10f      	bne.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f96:	4b89      	ldr	r3, [pc, #548]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9a:	4a88      	ldr	r2, [pc, #544]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008fa2:	e00e      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	2102      	movs	r1, #2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f001 f866 	bl	800a07c <RCCEx_PLL2_Config>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008fb4:	e005      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8008fba:	e002      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008fbc:	bf00      	nop
 8008fbe:	e000      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d109      	bne.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008fc8:	4b7c      	ldr	r3, [pc, #496]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fd4:	4979      	ldr	r1, [pc, #484]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008fda:	e001      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d047      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ff4:	d030      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ffa:	d82a      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008ffc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009000:	d02c      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009002:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009006:	d824      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800900c:	d018      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800900e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009012:	d81e      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901c:	d007      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800901e:	e018      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009020:	4b66      	ldr	r3, [pc, #408]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	4a65      	ldr	r2, [pc, #404]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800902a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800902c:	e017      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3304      	adds	r3, #4
 8009032:	2100      	movs	r1, #0
 8009034:	4618      	mov	r0, r3
 8009036:	f001 f821 	bl	800a07c <RCCEx_PLL2_Config>
 800903a:	4603      	mov	r3, r0
 800903c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800903e:	e00e      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3324      	adds	r3, #36	; 0x24
 8009044:	2100      	movs	r1, #0
 8009046:	4618      	mov	r0, r3
 8009048:	f001 f8ca 	bl	800a1e0 <RCCEx_PLL3_Config>
 800904c:	4603      	mov	r3, r0
 800904e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009050:	e005      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	75fb      	strb	r3, [r7, #23]
      break;
 8009056:	e002      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009058:	bf00      	nop
 800905a:	e000      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800905c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d109      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009064:	4b55      	ldr	r3, [pc, #340]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009068:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009070:	4952      	ldr	r1, [pc, #328]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009072:	4313      	orrs	r3, r2
 8009074:	650b      	str	r3, [r1, #80]	; 0x50
 8009076:	e001      	b.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009078:	7dfb      	ldrb	r3, [r7, #23]
 800907a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d049      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800908c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009090:	d02e      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009096:	d828      	bhi.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800909c:	d02a      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800909e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090a2:	d822      	bhi.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80090a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090a8:	d026      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80090aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090ae:	d81c      	bhi.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80090b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090b4:	d010      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80090b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090ba:	d816      	bhi.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01d      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x488>
 80090c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c4:	d111      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	3304      	adds	r3, #4
 80090ca:	2101      	movs	r1, #1
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 ffd5 	bl	800a07c <RCCEx_PLL2_Config>
 80090d2:	4603      	mov	r3, r0
 80090d4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80090d6:	e012      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	3324      	adds	r3, #36	; 0x24
 80090dc:	2101      	movs	r1, #1
 80090de:	4618      	mov	r0, r3
 80090e0:	f001 f87e 	bl	800a1e0 <RCCEx_PLL3_Config>
 80090e4:	4603      	mov	r3, r0
 80090e6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80090e8:	e009      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	75fb      	strb	r3, [r7, #23]
      break;
 80090ee:	e006      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80090f0:	bf00      	nop
 80090f2:	e004      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80090f4:	bf00      	nop
 80090f6:	e002      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80090f8:	bf00      	nop
 80090fa:	e000      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80090fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009104:	4b2d      	ldr	r3, [pc, #180]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009108:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009110:	492a      	ldr	r1, [pc, #168]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009112:	4313      	orrs	r3, r2
 8009114:	650b      	str	r3, [r1, #80]	; 0x50
 8009116:	e001      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d04d      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800912e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009132:	d02e      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009138:	d828      	bhi.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800913a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800913e:	d02a      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009144:	d822      	bhi.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800914a:	d026      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800914c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009150:	d81c      	bhi.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009156:	d010      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800915c:	d816      	bhi.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800915e:	2b00      	cmp	r3, #0
 8009160:	d01d      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009166:	d111      	bne.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3304      	adds	r3, #4
 800916c:	2101      	movs	r1, #1
 800916e:	4618      	mov	r0, r3
 8009170:	f000 ff84 	bl	800a07c <RCCEx_PLL2_Config>
 8009174:	4603      	mov	r3, r0
 8009176:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009178:	e012      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3324      	adds	r3, #36	; 0x24
 800917e:	2101      	movs	r1, #1
 8009180:	4618      	mov	r0, r3
 8009182:	f001 f82d 	bl	800a1e0 <RCCEx_PLL3_Config>
 8009186:	4603      	mov	r3, r0
 8009188:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800918a:	e009      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	75fb      	strb	r3, [r7, #23]
      break;
 8009190:	e006      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009192:	bf00      	nop
 8009194:	e004      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009196:	bf00      	nop
 8009198:	e002      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800919a:	bf00      	nop
 800919c:	e000      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800919e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10c      	bne.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80091a6:	4b05      	ldr	r3, [pc, #20]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091b4:	4901      	ldr	r1, [pc, #4]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	658b      	str	r3, [r1, #88]	; 0x58
 80091ba:	e003      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80091bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d02f      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091d8:	d00e      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80091da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091de:	d814      	bhi.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x596>
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d015      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80091e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091e8:	d10f      	bne.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ea:	4baf      	ldr	r3, [pc, #700]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80091ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ee:	4aae      	ldr	r2, [pc, #696]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80091f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80091f6:	e00c      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3304      	adds	r3, #4
 80091fc:	2101      	movs	r1, #1
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 ff3c 	bl	800a07c <RCCEx_PLL2_Config>
 8009204:	4603      	mov	r3, r0
 8009206:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009208:	e003      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	75fb      	strb	r3, [r7, #23]
      break;
 800920e:	e000      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d109      	bne.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009218:	4ba3      	ldr	r3, [pc, #652]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800921a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800921c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009224:	49a0      	ldr	r1, [pc, #640]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009226:	4313      	orrs	r3, r2
 8009228:	650b      	str	r3, [r1, #80]	; 0x50
 800922a:	e001      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800922c:	7dfb      	ldrb	r3, [r7, #23]
 800922e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d032      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009240:	2b03      	cmp	r3, #3
 8009242:	d81b      	bhi.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009244:	a201      	add	r2, pc, #4	; (adr r2, 800924c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924a:	bf00      	nop
 800924c:	08009283 	.word	0x08009283
 8009250:	0800925d 	.word	0x0800925d
 8009254:	0800926b 	.word	0x0800926b
 8009258:	08009283 	.word	0x08009283
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800925c:	4b92      	ldr	r3, [pc, #584]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	4a91      	ldr	r2, [pc, #580]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009266:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009268:	e00c      	b.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	3304      	adds	r3, #4
 800926e:	2102      	movs	r1, #2
 8009270:	4618      	mov	r0, r3
 8009272:	f000 ff03 	bl	800a07c <RCCEx_PLL2_Config>
 8009276:	4603      	mov	r3, r0
 8009278:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800927a:	e003      	b.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	75fb      	strb	r3, [r7, #23]
      break;
 8009280:	e000      	b.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d109      	bne.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800928a:	4b87      	ldr	r3, [pc, #540]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800928c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800928e:	f023 0203 	bic.w	r2, r3, #3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009296:	4984      	ldr	r1, [pc, #528]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009298:	4313      	orrs	r3, r2
 800929a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800929c:	e001      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800929e:	7dfb      	ldrb	r3, [r7, #23]
 80092a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 8086 	beq.w	80093bc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092b0:	4b7e      	ldr	r3, [pc, #504]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a7d      	ldr	r2, [pc, #500]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80092b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092bc:	f7fc fd32 	bl	8005d24 <HAL_GetTick>
 80092c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092c2:	e009      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092c4:	f7fc fd2e 	bl	8005d24 <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	2b64      	cmp	r3, #100	; 0x64
 80092d0:	d902      	bls.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	75fb      	strb	r3, [r7, #23]
        break;
 80092d6:	e005      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092d8:	4b74      	ldr	r3, [pc, #464]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d0ef      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d166      	bne.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80092ea:	4b6f      	ldr	r3, [pc, #444]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80092ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092f4:	4053      	eors	r3, r2
 80092f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d013      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092fe:	4b6a      	ldr	r3, [pc, #424]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009306:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009308:	4b67      	ldr	r3, [pc, #412]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800930a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930c:	4a66      	ldr	r2, [pc, #408]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800930e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009312:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009314:	4b64      	ldr	r3, [pc, #400]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009318:	4a63      	ldr	r2, [pc, #396]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800931a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800931e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009320:	4a61      	ldr	r2, [pc, #388]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800932c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009330:	d115      	bne.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009332:	f7fc fcf7 	bl	8005d24 <HAL_GetTick>
 8009336:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009338:	e00b      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800933a:	f7fc fcf3 	bl	8005d24 <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	f241 3288 	movw	r2, #5000	; 0x1388
 8009348:	4293      	cmp	r3, r2
 800934a:	d902      	bls.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800934c:	2303      	movs	r3, #3
 800934e:	75fb      	strb	r3, [r7, #23]
            break;
 8009350:	e005      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009352:	4b55      	ldr	r3, [pc, #340]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0ed      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d126      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800936a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800936e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009372:	d10d      	bne.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009374:	4b4c      	ldr	r3, [pc, #304]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009382:	0919      	lsrs	r1, r3, #4
 8009384:	4b4a      	ldr	r3, [pc, #296]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009386:	400b      	ands	r3, r1
 8009388:	4947      	ldr	r1, [pc, #284]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800938a:	4313      	orrs	r3, r2
 800938c:	610b      	str	r3, [r1, #16]
 800938e:	e005      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009390:	4b45      	ldr	r3, [pc, #276]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	4a44      	ldr	r2, [pc, #272]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009396:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800939a:	6113      	str	r3, [r2, #16]
 800939c:	4b42      	ldr	r3, [pc, #264]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800939e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093aa:	493f      	ldr	r1, [pc, #252]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	670b      	str	r3, [r1, #112]	; 0x70
 80093b0:	e004      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	75bb      	strb	r3, [r7, #22]
 80093b6:	e001      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 8085 	beq.w	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ce:	2b28      	cmp	r3, #40	; 0x28
 80093d0:	d866      	bhi.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80093d2:	a201      	add	r2, pc, #4	; (adr r2, 80093d8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80093d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d8:	080094b5 	.word	0x080094b5
 80093dc:	080094a1 	.word	0x080094a1
 80093e0:	080094a1 	.word	0x080094a1
 80093e4:	080094a1 	.word	0x080094a1
 80093e8:	080094a1 	.word	0x080094a1
 80093ec:	080094a1 	.word	0x080094a1
 80093f0:	080094a1 	.word	0x080094a1
 80093f4:	080094a1 	.word	0x080094a1
 80093f8:	0800947d 	.word	0x0800947d
 80093fc:	080094a1 	.word	0x080094a1
 8009400:	080094a1 	.word	0x080094a1
 8009404:	080094a1 	.word	0x080094a1
 8009408:	080094a1 	.word	0x080094a1
 800940c:	080094a1 	.word	0x080094a1
 8009410:	080094a1 	.word	0x080094a1
 8009414:	080094a1 	.word	0x080094a1
 8009418:	0800948f 	.word	0x0800948f
 800941c:	080094a1 	.word	0x080094a1
 8009420:	080094a1 	.word	0x080094a1
 8009424:	080094a1 	.word	0x080094a1
 8009428:	080094a1 	.word	0x080094a1
 800942c:	080094a1 	.word	0x080094a1
 8009430:	080094a1 	.word	0x080094a1
 8009434:	080094a1 	.word	0x080094a1
 8009438:	080094b5 	.word	0x080094b5
 800943c:	080094a1 	.word	0x080094a1
 8009440:	080094a1 	.word	0x080094a1
 8009444:	080094a1 	.word	0x080094a1
 8009448:	080094a1 	.word	0x080094a1
 800944c:	080094a1 	.word	0x080094a1
 8009450:	080094a1 	.word	0x080094a1
 8009454:	080094a1 	.word	0x080094a1
 8009458:	080094b5 	.word	0x080094b5
 800945c:	080094a1 	.word	0x080094a1
 8009460:	080094a1 	.word	0x080094a1
 8009464:	080094a1 	.word	0x080094a1
 8009468:	080094a1 	.word	0x080094a1
 800946c:	080094a1 	.word	0x080094a1
 8009470:	080094a1 	.word	0x080094a1
 8009474:	080094a1 	.word	0x080094a1
 8009478:	080094b5 	.word	0x080094b5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3304      	adds	r3, #4
 8009480:	2101      	movs	r1, #1
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fdfa 	bl	800a07c <RCCEx_PLL2_Config>
 8009488:	4603      	mov	r3, r0
 800948a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800948c:	e013      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3324      	adds	r3, #36	; 0x24
 8009492:	2101      	movs	r1, #1
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fea3 	bl	800a1e0 <RCCEx_PLL3_Config>
 800949a:	4603      	mov	r3, r0
 800949c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800949e:	e00a      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	75fb      	strb	r3, [r7, #23]
      break;
 80094a4:	e007      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80094a6:	bf00      	nop
 80094a8:	58024400 	.word	0x58024400
 80094ac:	58024800 	.word	0x58024800
 80094b0:	00ffffcf 	.word	0x00ffffcf
      break;
 80094b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d109      	bne.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80094bc:	4b96      	ldr	r3, [pc, #600]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80094be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094c8:	4993      	ldr	r1, [pc, #588]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	654b      	str	r3, [r1, #84]	; 0x54
 80094ce:	e001      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0302 	and.w	r3, r3, #2
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d038      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e4:	2b05      	cmp	r3, #5
 80094e6:	d821      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80094e8:	a201      	add	r2, pc, #4	; (adr r2, 80094f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80094ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ee:	bf00      	nop
 80094f0:	08009533 	.word	0x08009533
 80094f4:	08009509 	.word	0x08009509
 80094f8:	0800951b 	.word	0x0800951b
 80094fc:	08009533 	.word	0x08009533
 8009500:	08009533 	.word	0x08009533
 8009504:	08009533 	.word	0x08009533
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3304      	adds	r3, #4
 800950c:	2101      	movs	r1, #1
 800950e:	4618      	mov	r0, r3
 8009510:	f000 fdb4 	bl	800a07c <RCCEx_PLL2_Config>
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009518:	e00c      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3324      	adds	r3, #36	; 0x24
 800951e:	2101      	movs	r1, #1
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fe5d 	bl	800a1e0 <RCCEx_PLL3_Config>
 8009526:	4603      	mov	r3, r0
 8009528:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800952a:	e003      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	75fb      	strb	r3, [r7, #23]
      break;
 8009530:	e000      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800953a:	4b77      	ldr	r3, [pc, #476]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800953c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800953e:	f023 0207 	bic.w	r2, r3, #7
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009546:	4974      	ldr	r1, [pc, #464]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009548:	4313      	orrs	r3, r2
 800954a:	654b      	str	r3, [r1, #84]	; 0x54
 800954c:	e001      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0304 	and.w	r3, r3, #4
 800955a:	2b00      	cmp	r3, #0
 800955c:	d03a      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009564:	2b05      	cmp	r3, #5
 8009566:	d821      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009568:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	080095b3 	.word	0x080095b3
 8009574:	08009589 	.word	0x08009589
 8009578:	0800959b 	.word	0x0800959b
 800957c:	080095b3 	.word	0x080095b3
 8009580:	080095b3 	.word	0x080095b3
 8009584:	080095b3 	.word	0x080095b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3304      	adds	r3, #4
 800958c:	2101      	movs	r1, #1
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fd74 	bl	800a07c <RCCEx_PLL2_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009598:	e00c      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	3324      	adds	r3, #36	; 0x24
 800959e:	2101      	movs	r1, #1
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 fe1d 	bl	800a1e0 <RCCEx_PLL3_Config>
 80095a6:	4603      	mov	r3, r0
 80095a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80095aa:	e003      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	75fb      	strb	r3, [r7, #23]
      break;
 80095b0:	e000      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80095b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10a      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095ba:	4b57      	ldr	r3, [pc, #348]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80095bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095be:	f023 0207 	bic.w	r2, r3, #7
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c8:	4953      	ldr	r1, [pc, #332]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	658b      	str	r3, [r1, #88]	; 0x58
 80095ce:	e001      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
 80095d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0320 	and.w	r3, r3, #32
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d04b      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095ea:	d02e      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80095ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095f0:	d828      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f6:	d02a      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80095f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095fc:	d822      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80095fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009602:	d026      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009604:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009608:	d81c      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800960a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800960e:	d010      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009614:	d816      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009616:	2b00      	cmp	r3, #0
 8009618:	d01d      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800961a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800961e:	d111      	bne.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3304      	adds	r3, #4
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fd28 	bl	800a07c <RCCEx_PLL2_Config>
 800962c:	4603      	mov	r3, r0
 800962e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009630:	e012      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3324      	adds	r3, #36	; 0x24
 8009636:	2102      	movs	r1, #2
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fdd1 	bl	800a1e0 <RCCEx_PLL3_Config>
 800963e:	4603      	mov	r3, r0
 8009640:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009642:	e009      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	75fb      	strb	r3, [r7, #23]
      break;
 8009648:	e006      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800964a:	bf00      	nop
 800964c:	e004      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800964e:	bf00      	nop
 8009650:	e002      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009652:	bf00      	nop
 8009654:	e000      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800965e:	4b2e      	ldr	r3, [pc, #184]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009662:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800966c:	492a      	ldr	r1, [pc, #168]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800966e:	4313      	orrs	r3, r2
 8009670:	654b      	str	r3, [r1, #84]	; 0x54
 8009672:	e001      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009674:	7dfb      	ldrb	r3, [r7, #23]
 8009676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	d04d      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800968a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800968e:	d02e      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009690:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009694:	d828      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969a:	d02a      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800969c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a0:	d822      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80096a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096a6:	d026      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80096a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096ac:	d81c      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80096ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b2:	d010      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80096b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b8:	d816      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d01d      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80096be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096c2:	d111      	bne.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3304      	adds	r3, #4
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 fcd6 	bl	800a07c <RCCEx_PLL2_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80096d4:	e012      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3324      	adds	r3, #36	; 0x24
 80096da:	2102      	movs	r1, #2
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 fd7f 	bl	800a1e0 <RCCEx_PLL3_Config>
 80096e2:	4603      	mov	r3, r0
 80096e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80096e6:	e009      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	75fb      	strb	r3, [r7, #23]
      break;
 80096ec:	e006      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80096ee:	bf00      	nop
 80096f0:	e004      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80096f2:	bf00      	nop
 80096f4:	e002      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80096f6:	bf00      	nop
 80096f8:	e000      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80096fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096fc:	7dfb      	ldrb	r3, [r7, #23]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10c      	bne.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009702:	4b05      	ldr	r3, [pc, #20]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009706:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009710:	4901      	ldr	r1, [pc, #4]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009712:	4313      	orrs	r3, r2
 8009714:	658b      	str	r3, [r1, #88]	; 0x58
 8009716:	e003      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009718:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971c:	7dfb      	ldrb	r3, [r7, #23]
 800971e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009728:	2b00      	cmp	r3, #0
 800972a:	d04b      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009732:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009736:	d02e      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009738:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800973c:	d828      	bhi.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800973e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009742:	d02a      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009748:	d822      	bhi.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800974a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800974e:	d026      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009750:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009754:	d81c      	bhi.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800975a:	d010      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800975c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009760:	d816      	bhi.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d01d      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800976a:	d111      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3304      	adds	r3, #4
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f000 fc82 	bl	800a07c <RCCEx_PLL2_Config>
 8009778:	4603      	mov	r3, r0
 800977a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800977c:	e012      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3324      	adds	r3, #36	; 0x24
 8009782:	2102      	movs	r1, #2
 8009784:	4618      	mov	r0, r3
 8009786:	f000 fd2b 	bl	800a1e0 <RCCEx_PLL3_Config>
 800978a:	4603      	mov	r3, r0
 800978c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800978e:	e009      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	75fb      	strb	r3, [r7, #23]
      break;
 8009794:	e006      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009796:	bf00      	nop
 8009798:	e004      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800979a:	bf00      	nop
 800979c:	e002      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800979e:	bf00      	nop
 80097a0:	e000      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80097a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10a      	bne.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80097aa:	4b9d      	ldr	r3, [pc, #628]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097b8:	4999      	ldr	r1, [pc, #612]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	658b      	str	r3, [r1, #88]	; 0x58
 80097be:	e001      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 0308 	and.w	r3, r3, #8
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01a      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097da:	d10a      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3324      	adds	r3, #36	; 0x24
 80097e0:	2102      	movs	r1, #2
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 fcfc 	bl	800a1e0 <RCCEx_PLL3_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d001      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80097f2:	4b8b      	ldr	r3, [pc, #556]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009800:	4987      	ldr	r1, [pc, #540]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009802:	4313      	orrs	r3, r2
 8009804:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01a      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800981c:	d10a      	bne.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3324      	adds	r3, #36	; 0x24
 8009822:	2102      	movs	r1, #2
 8009824:	4618      	mov	r0, r3
 8009826:	f000 fcdb 	bl	800a1e0 <RCCEx_PLL3_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009834:	4b7a      	ldr	r3, [pc, #488]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009842:	4977      	ldr	r1, [pc, #476]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009844:	4313      	orrs	r3, r2
 8009846:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d034      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800985a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800985e:	d01d      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009860:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009864:	d817      	bhi.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800986a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800986e:	d009      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009870:	e011      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	3304      	adds	r3, #4
 8009876:	2100      	movs	r1, #0
 8009878:	4618      	mov	r0, r3
 800987a:	f000 fbff 	bl	800a07c <RCCEx_PLL2_Config>
 800987e:	4603      	mov	r3, r0
 8009880:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009882:	e00c      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	3324      	adds	r3, #36	; 0x24
 8009888:	2102      	movs	r1, #2
 800988a:	4618      	mov	r0, r3
 800988c:	f000 fca8 	bl	800a1e0 <RCCEx_PLL3_Config>
 8009890:	4603      	mov	r3, r0
 8009892:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009894:	e003      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	75fb      	strb	r3, [r7, #23]
      break;
 800989a:	e000      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800989c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10a      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80098a4:	4b5e      	ldr	r3, [pc, #376]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80098a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80098b2:	495b      	ldr	r1, [pc, #364]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	658b      	str	r3, [r1, #88]	; 0x58
 80098b8:	e001      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d033      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098d4:	d01c      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80098d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098da:	d816      	bhi.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80098dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098e0:	d003      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80098e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098e6:	d007      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80098e8:	e00f      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098ea:	4b4d      	ldr	r3, [pc, #308]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ee:	4a4c      	ldr	r2, [pc, #304]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80098f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80098f6:	e00c      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3324      	adds	r3, #36	; 0x24
 80098fc:	2101      	movs	r1, #1
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 fc6e 	bl	800a1e0 <RCCEx_PLL3_Config>
 8009904:	4603      	mov	r3, r0
 8009906:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009908:	e003      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	75fb      	strb	r3, [r7, #23]
      break;
 800990e:	e000      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009912:	7dfb      	ldrb	r3, [r7, #23]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009918:	4b41      	ldr	r3, [pc, #260]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800991a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800991c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009926:	493e      	ldr	r1, [pc, #248]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009928:	4313      	orrs	r3, r2
 800992a:	654b      	str	r3, [r1, #84]	; 0x54
 800992c:	e001      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800992e:	7dfb      	ldrb	r3, [r7, #23]
 8009930:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d029      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800994a:	d007      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800994c:	e00f      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800994e:	4b34      	ldr	r3, [pc, #208]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009952:	4a33      	ldr	r2, [pc, #204]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009958:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800995a:	e00b      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3304      	adds	r3, #4
 8009960:	2102      	movs	r1, #2
 8009962:	4618      	mov	r0, r3
 8009964:	f000 fb8a 	bl	800a07c <RCCEx_PLL2_Config>
 8009968:	4603      	mov	r3, r0
 800996a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800996c:	e002      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	75fb      	strb	r3, [r7, #23]
      break;
 8009972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d109      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800997a:	4b29      	ldr	r3, [pc, #164]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800997c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800997e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009986:	4926      	ldr	r1, [pc, #152]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009988:	4313      	orrs	r3, r2
 800998a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800998c:	e001      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	3324      	adds	r3, #36	; 0x24
 80099a2:	2102      	movs	r1, #2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 fc1b 	bl	800a1e0 <RCCEx_PLL3_Config>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d033      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099c8:	d017      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80099ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ce:	d811      	bhi.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80099d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099d4:	d013      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80099d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099da:	d80b      	bhi.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d010      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80099e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e4:	d106      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099e6:	4b0e      	ldr	r3, [pc, #56]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ea:	4a0d      	ldr	r2, [pc, #52]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80099f2:	e007      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	75fb      	strb	r3, [r7, #23]
      break;
 80099f8:	e004      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80099fa:	bf00      	nop
 80099fc:	e002      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80099fe:	bf00      	nop
 8009a00:	e000      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10c      	bne.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a0a:	4b05      	ldr	r3, [pc, #20]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a16:	4902      	ldr	r1, [pc, #8]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	654b      	str	r3, [r1, #84]	; 0x54
 8009a1c:	e004      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009a1e:	bf00      	nop
 8009a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d008      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a34:	4b31      	ldr	r3, [pc, #196]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a40:	492e      	ldr	r1, [pc, #184]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d009      	beq.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009a52:	4b2a      	ldr	r3, [pc, #168]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009a60:	4926      	ldr	r1, [pc, #152]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d008      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a72:	4b22      	ldr	r3, [pc, #136]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a7e:	491f      	ldr	r1, [pc, #124]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00d      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a90:	4b1a      	ldr	r3, [pc, #104]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	4a19      	ldr	r2, [pc, #100]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009a96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a9a:	6113      	str	r3, [r2, #16]
 8009a9c:	4b17      	ldr	r3, [pc, #92]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009a9e:	691a      	ldr	r2, [r3, #16]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009aa6:	4915      	ldr	r1, [pc, #84]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	da08      	bge.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ab4:	4b11      	ldr	r3, [pc, #68]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac0:	490e      	ldr	r1, [pc, #56]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d009      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009ad2:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ae0:	4906      	ldr	r1, [pc, #24]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009ae6:	7dbb      	ldrb	r3, [r7, #22]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	e000      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3718      	adds	r7, #24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	58024400 	.word	0x58024400

08009b00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009b04:	f7ff f818 	bl	8008b38 <HAL_RCC_GetHCLKFreq>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	091b      	lsrs	r3, r3, #4
 8009b10:	f003 0307 	and.w	r3, r3, #7
 8009b14:	4904      	ldr	r1, [pc, #16]	; (8009b28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b16:	5ccb      	ldrb	r3, [r1, r3]
 8009b18:	f003 031f 	and.w	r3, r3, #31
 8009b1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	58024400 	.word	0x58024400
 8009b28:	0800df38 	.word	0x0800df38

08009b2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b089      	sub	sp, #36	; 0x24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b34:	4ba1      	ldr	r3, [pc, #644]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b38:	f003 0303 	and.w	r3, r3, #3
 8009b3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009b3e:	4b9f      	ldr	r3, [pc, #636]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b42:	0b1b      	lsrs	r3, r3, #12
 8009b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b4a:	4b9c      	ldr	r3, [pc, #624]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4e:	091b      	lsrs	r3, r3, #4
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009b56:	4b99      	ldr	r3, [pc, #612]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b5a:	08db      	lsrs	r3, r3, #3
 8009b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	fb02 f303 	mul.w	r3, r2, r3
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 8111 	beq.w	8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	f000 8083 	beq.w	8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	f200 80a1 	bhi.w	8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d003      	beq.n	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d056      	beq.n	8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009b96:	e099      	b.n	8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b98:	4b88      	ldr	r3, [pc, #544]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0320 	and.w	r3, r3, #32
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d02d      	beq.n	8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ba4:	4b85      	ldr	r3, [pc, #532]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	08db      	lsrs	r3, r3, #3
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	4a84      	ldr	r2, [pc, #528]	; (8009dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	ee07 3a90 	vmov	s15, r3
 8009bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bce:	4b7b      	ldr	r3, [pc, #492]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8009be2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009bfe:	e087      	b.n	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c12:	4b6a      	ldr	r3, [pc, #424]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c42:	e065      	b.n	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009dcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c56:	4b59      	ldr	r3, [pc, #356]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c86:	e043      	b.n	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c9a:	4b48      	ldr	r3, [pc, #288]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cca:	e021      	b.n	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009dcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cde:	4b37      	ldr	r3, [pc, #220]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009d10:	4b2a      	ldr	r3, [pc, #168]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d14:	0a5b      	lsrs	r3, r3, #9
 8009d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d36:	ee17 2a90 	vmov	r2, s15
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009d3e:	4b1f      	ldr	r3, [pc, #124]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d42:	0c1b      	lsrs	r3, r3, #16
 8009d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d48:	ee07 3a90 	vmov	s15, r3
 8009d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d64:	ee17 2a90 	vmov	r2, s15
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009d6c:	4b13      	ldr	r3, [pc, #76]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d70:	0e1b      	lsrs	r3, r3, #24
 8009d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d92:	ee17 2a90 	vmov	r2, s15
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d9a:	e008      	b.n	8009dae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	609a      	str	r2, [r3, #8]
}
 8009dae:	bf00      	nop
 8009db0:	3724      	adds	r7, #36	; 0x24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	58024400 	.word	0x58024400
 8009dc0:	03d09000 	.word	0x03d09000
 8009dc4:	46000000 	.word	0x46000000
 8009dc8:	4c742400 	.word	0x4c742400
 8009dcc:	4a742400 	.word	0x4a742400
 8009dd0:	4af42400 	.word	0x4af42400

08009dd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b089      	sub	sp, #36	; 0x24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ddc:	4ba1      	ldr	r3, [pc, #644]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009de6:	4b9f      	ldr	r3, [pc, #636]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dea:	0d1b      	lsrs	r3, r3, #20
 8009dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009df0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009df2:	4b9c      	ldr	r3, [pc, #624]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df6:	0a1b      	lsrs	r3, r3, #8
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009dfe:	4b99      	ldr	r3, [pc, #612]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e02:	08db      	lsrs	r3, r3, #3
 8009e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	fb02 f303 	mul.w	r3, r2, r3
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 8111 	beq.w	800a044 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	f000 8083 	beq.w	8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	f200 80a1 	bhi.w	8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d056      	beq.n	8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e3e:	e099      	b.n	8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e40:	4b88      	ldr	r3, [pc, #544]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0320 	and.w	r3, r3, #32
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d02d      	beq.n	8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e4c:	4b85      	ldr	r3, [pc, #532]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	08db      	lsrs	r3, r3, #3
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	4a84      	ldr	r2, [pc, #528]	; (800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e58:	fa22 f303 	lsr.w	r3, r2, r3
 8009e5c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e76:	4b7b      	ldr	r3, [pc, #492]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009ea6:	e087      	b.n	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	ee07 3a90 	vmov	s15, r3
 8009eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a070 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eba:	4b6a      	ldr	r3, [pc, #424]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ece:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eea:	e065      	b.n	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a074 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009efe:	4b59      	ldr	r3, [pc, #356]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f2e:	e043      	b.n	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f42:	4b48      	ldr	r3, [pc, #288]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f72:	e021      	b.n	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a074 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f86:	4b37      	ldr	r3, [pc, #220]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f8e:	ee07 3a90 	vmov	s15, r3
 8009f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009fb8:	4b2a      	ldr	r3, [pc, #168]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbc:	0a5b      	lsrs	r3, r3, #9
 8009fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fde:	ee17 2a90 	vmov	r2, s15
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009fe6:	4b1f      	ldr	r3, [pc, #124]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	0c1b      	lsrs	r3, r3, #16
 8009fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff0:	ee07 3a90 	vmov	s15, r3
 8009ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a000:	edd7 6a07 	vldr	s13, [r7, #28]
 800a004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a00c:	ee17 2a90 	vmov	r2, s15
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a014:	4b13      	ldr	r3, [pc, #76]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a018:	0e1b      	lsrs	r3, r3, #24
 800a01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a02a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a02e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a03a:	ee17 2a90 	vmov	r2, s15
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a042:	e008      	b.n	800a056 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	609a      	str	r2, [r3, #8]
}
 800a056:	bf00      	nop
 800a058:	3724      	adds	r7, #36	; 0x24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	58024400 	.word	0x58024400
 800a068:	03d09000 	.word	0x03d09000
 800a06c:	46000000 	.word	0x46000000
 800a070:	4c742400 	.word	0x4c742400
 800a074:	4a742400 	.word	0x4a742400
 800a078:	4af42400 	.word	0x4af42400

0800a07c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a08a:	4b53      	ldr	r3, [pc, #332]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08e:	f003 0303 	and.w	r3, r3, #3
 800a092:	2b03      	cmp	r3, #3
 800a094:	d101      	bne.n	800a09a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e099      	b.n	800a1ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a09a:	4b4f      	ldr	r3, [pc, #316]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a4e      	ldr	r2, [pc, #312]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0a6:	f7fb fe3d 	bl	8005d24 <HAL_GetTick>
 800a0aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0ac:	e008      	b.n	800a0c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0ae:	f7fb fe39 	bl	8005d24 <HAL_GetTick>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d901      	bls.n	800a0c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e086      	b.n	800a1ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0c0:	4b45      	ldr	r3, [pc, #276]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1f0      	bne.n	800a0ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a0cc:	4b42      	ldr	r3, [pc, #264]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	031b      	lsls	r3, r3, #12
 800a0da:	493f      	ldr	r1, [pc, #252]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	628b      	str	r3, [r1, #40]	; 0x28
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	025b      	lsls	r3, r3, #9
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	041b      	lsls	r3, r3, #16
 800a0fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a102:	431a      	orrs	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	3b01      	subs	r3, #1
 800a10a:	061b      	lsls	r3, r3, #24
 800a10c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a110:	4931      	ldr	r1, [pc, #196]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a112:	4313      	orrs	r3, r2
 800a114:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a116:	4b30      	ldr	r3, [pc, #192]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	492d      	ldr	r1, [pc, #180]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a124:	4313      	orrs	r3, r2
 800a126:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a128:	4b2b      	ldr	r3, [pc, #172]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12c:	f023 0220 	bic.w	r2, r3, #32
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	4928      	ldr	r1, [pc, #160]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a136:	4313      	orrs	r3, r2
 800a138:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a13a:	4b27      	ldr	r3, [pc, #156]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13e:	4a26      	ldr	r2, [pc, #152]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a140:	f023 0310 	bic.w	r3, r3, #16
 800a144:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a146:	4b24      	ldr	r3, [pc, #144]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a148:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a14a:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <RCCEx_PLL2_Config+0x160>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	69d2      	ldr	r2, [r2, #28]
 800a152:	00d2      	lsls	r2, r2, #3
 800a154:	4920      	ldr	r1, [pc, #128]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a156:	4313      	orrs	r3, r2
 800a158:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a15a:	4b1f      	ldr	r3, [pc, #124]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15e:	4a1e      	ldr	r2, [pc, #120]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a160:	f043 0310 	orr.w	r3, r3, #16
 800a164:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d106      	bne.n	800a17a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a16c:	4b1a      	ldr	r3, [pc, #104]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	4a19      	ldr	r2, [pc, #100]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a176:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a178:	e00f      	b.n	800a19a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d106      	bne.n	800a18e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a180:	4b15      	ldr	r3, [pc, #84]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	4a14      	ldr	r2, [pc, #80]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a18a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a18c:	e005      	b.n	800a19a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a18e:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a192:	4a11      	ldr	r2, [pc, #68]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a198:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a19a:	4b0f      	ldr	r3, [pc, #60]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a0e      	ldr	r2, [pc, #56]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a1a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1a6:	f7fb fdbd 	bl	8005d24 <HAL_GetTick>
 800a1aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1ac:	e008      	b.n	800a1c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1ae:	f7fb fdb9 	bl	8005d24 <HAL_GetTick>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d901      	bls.n	800a1c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e006      	b.n	800a1ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1c0:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0f0      	beq.n	800a1ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	ffff0007 	.word	0xffff0007

0800a1e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1ee:	4b53      	ldr	r3, [pc, #332]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f2:	f003 0303 	and.w	r3, r3, #3
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d101      	bne.n	800a1fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e099      	b.n	800a332 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1fe:	4b4f      	ldr	r3, [pc, #316]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a4e      	ldr	r2, [pc, #312]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a20a:	f7fb fd8b 	bl	8005d24 <HAL_GetTick>
 800a20e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a210:	e008      	b.n	800a224 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a212:	f7fb fd87 	bl	8005d24 <HAL_GetTick>
 800a216:	4602      	mov	r2, r0
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d901      	bls.n	800a224 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e086      	b.n	800a332 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a224:	4b45      	ldr	r3, [pc, #276]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1f0      	bne.n	800a212 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a230:	4b42      	ldr	r3, [pc, #264]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a234:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	051b      	lsls	r3, r3, #20
 800a23e:	493f      	ldr	r1, [pc, #252]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a240:	4313      	orrs	r3, r2
 800a242:	628b      	str	r3, [r1, #40]	; 0x28
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	3b01      	subs	r3, #1
 800a24a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	3b01      	subs	r3, #1
 800a254:	025b      	lsls	r3, r3, #9
 800a256:	b29b      	uxth	r3, r3
 800a258:	431a      	orrs	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	3b01      	subs	r3, #1
 800a260:	041b      	lsls	r3, r3, #16
 800a262:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a266:	431a      	orrs	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	061b      	lsls	r3, r3, #24
 800a270:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a274:	4931      	ldr	r1, [pc, #196]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a276:	4313      	orrs	r3, r2
 800a278:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a27a:	4b30      	ldr	r3, [pc, #192]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	492d      	ldr	r1, [pc, #180]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a288:	4313      	orrs	r3, r2
 800a28a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a28c:	4b2b      	ldr	r3, [pc, #172]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	4928      	ldr	r1, [pc, #160]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a29e:	4b27      	ldr	r3, [pc, #156]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a2:	4a26      	ldr	r2, [pc, #152]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2aa:	4b24      	ldr	r3, [pc, #144]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2ae:	4b24      	ldr	r3, [pc, #144]	; (800a340 <RCCEx_PLL3_Config+0x160>)
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	69d2      	ldr	r2, [r2, #28]
 800a2b6:	00d2      	lsls	r2, r2, #3
 800a2b8:	4920      	ldr	r1, [pc, #128]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a2be:	4b1f      	ldr	r3, [pc, #124]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	4a1e      	ldr	r2, [pc, #120]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d106      	bne.n	800a2de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2d0:	4b1a      	ldr	r3, [pc, #104]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	4a19      	ldr	r2, [pc, #100]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a2da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2dc:	e00f      	b.n	800a2fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d106      	bne.n	800a2f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a2e4:	4b15      	ldr	r3, [pc, #84]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e8:	4a14      	ldr	r2, [pc, #80]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2f0:	e005      	b.n	800a2fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a2f2:	4b12      	ldr	r3, [pc, #72]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	4a11      	ldr	r2, [pc, #68]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2fe:	4b0f      	ldr	r3, [pc, #60]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a0e      	ldr	r2, [pc, #56]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a30a:	f7fb fd0b 	bl	8005d24 <HAL_GetTick>
 800a30e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a310:	e008      	b.n	800a324 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a312:	f7fb fd07 	bl	8005d24 <HAL_GetTick>
 800a316:	4602      	mov	r2, r0
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d901      	bls.n	800a324 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	e006      	b.n	800a332 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d0f0      	beq.n	800a312 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	58024400 	.word	0x58024400
 800a340:	ffff0007 	.word	0xffff0007

0800a344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e049      	b.n	800a3ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d106      	bne.n	800a370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f841 	bl	800a3f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2202      	movs	r2, #2
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3304      	adds	r3, #4
 800a380:	4619      	mov	r1, r3
 800a382:	4610      	mov	r0, r2
 800a384:	f000 fa00 	bl	800a788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a3fa:	bf00      	nop
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
	...

0800a408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d001      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e054      	b.n	800a4ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2202      	movs	r2, #2
 800a424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68da      	ldr	r2, [r3, #12]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f042 0201 	orr.w	r2, r2, #1
 800a436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a26      	ldr	r2, [pc, #152]	; (800a4d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d022      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a44a:	d01d      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a22      	ldr	r2, [pc, #136]	; (800a4dc <HAL_TIM_Base_Start_IT+0xd4>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d018      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a21      	ldr	r2, [pc, #132]	; (800a4e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d013      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1f      	ldr	r2, [pc, #124]	; (800a4e4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d00e      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1e      	ldr	r2, [pc, #120]	; (800a4e8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d009      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a1c      	ldr	r2, [pc, #112]	; (800a4ec <HAL_TIM_Base_Start_IT+0xe4>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d004      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x80>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1b      	ldr	r2, [pc, #108]	; (800a4f0 <HAL_TIM_Base_Start_IT+0xe8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d115      	bne.n	800a4b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	689a      	ldr	r2, [r3, #8]
 800a48e:	4b19      	ldr	r3, [pc, #100]	; (800a4f4 <HAL_TIM_Base_Start_IT+0xec>)
 800a490:	4013      	ands	r3, r2
 800a492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b06      	cmp	r3, #6
 800a498:	d015      	beq.n	800a4c6 <HAL_TIM_Base_Start_IT+0xbe>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a0:	d011      	beq.n	800a4c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f042 0201 	orr.w	r2, r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b2:	e008      	b.n	800a4c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f042 0201 	orr.w	r2, r2, #1
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	e000      	b.n	800a4c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	40010000 	.word	0x40010000
 800a4dc:	40000400 	.word	0x40000400
 800a4e0:	40000800 	.word	0x40000800
 800a4e4:	40000c00 	.word	0x40000c00
 800a4e8:	40010400 	.word	0x40010400
 800a4ec:	40001800 	.word	0x40001800
 800a4f0:	40014000 	.word	0x40014000
 800a4f4:	00010007 	.word	0x00010007

0800a4f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d122      	bne.n	800a554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f003 0302 	and.w	r3, r3, #2
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d11b      	bne.n	800a554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0202 	mvn.w	r2, #2
 800a524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	f003 0303 	and.w	r3, r3, #3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f905 	bl	800a74a <HAL_TIM_IC_CaptureCallback>
 800a540:	e005      	b.n	800a54e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f8f7 	bl	800a736 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f908 	bl	800a75e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	f003 0304 	and.w	r3, r3, #4
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d122      	bne.n	800a5a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	d11b      	bne.n	800a5a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f06f 0204 	mvn.w	r2, #4
 800a578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2202      	movs	r2, #2
 800a57e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f8db 	bl	800a74a <HAL_TIM_IC_CaptureCallback>
 800a594:	e005      	b.n	800a5a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f8cd 	bl	800a736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f8de 	bl	800a75e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	f003 0308 	and.w	r3, r3, #8
 800a5b2:	2b08      	cmp	r3, #8
 800a5b4:	d122      	bne.n	800a5fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	f003 0308 	and.w	r3, r3, #8
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d11b      	bne.n	800a5fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f06f 0208 	mvn.w	r2, #8
 800a5cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2204      	movs	r2, #4
 800a5d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	f003 0303 	and.w	r3, r3, #3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d003      	beq.n	800a5ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f8b1 	bl	800a74a <HAL_TIM_IC_CaptureCallback>
 800a5e8:	e005      	b.n	800a5f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f8a3 	bl	800a736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f8b4 	bl	800a75e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	f003 0310 	and.w	r3, r3, #16
 800a606:	2b10      	cmp	r3, #16
 800a608:	d122      	bne.n	800a650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	f003 0310 	and.w	r3, r3, #16
 800a614:	2b10      	cmp	r3, #16
 800a616:	d11b      	bne.n	800a650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f06f 0210 	mvn.w	r2, #16
 800a620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2208      	movs	r2, #8
 800a626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a632:	2b00      	cmp	r3, #0
 800a634:	d003      	beq.n	800a63e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f887 	bl	800a74a <HAL_TIM_IC_CaptureCallback>
 800a63c:	e005      	b.n	800a64a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f879 	bl	800a736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f88a 	bl	800a75e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d10e      	bne.n	800a67c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d107      	bne.n	800a67c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f06f 0201 	mvn.w	r2, #1
 800a674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7fa ff42 	bl	8005500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a686:	2b80      	cmp	r3, #128	; 0x80
 800a688:	d10e      	bne.n	800a6a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a694:	2b80      	cmp	r3, #128	; 0x80
 800a696:	d107      	bne.n	800a6a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f914 	bl	800a8d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b6:	d10e      	bne.n	800a6d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c2:	2b80      	cmp	r3, #128	; 0x80
 800a6c4:	d107      	bne.n	800a6d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a6ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f907 	bl	800a8e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e0:	2b40      	cmp	r3, #64	; 0x40
 800a6e2:	d10e      	bne.n	800a702 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ee:	2b40      	cmp	r3, #64	; 0x40
 800a6f0:	d107      	bne.n	800a702 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f838 	bl	800a772 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	f003 0320 	and.w	r3, r3, #32
 800a70c:	2b20      	cmp	r3, #32
 800a70e:	d10e      	bne.n	800a72e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	f003 0320 	and.w	r3, r3, #32
 800a71a:	2b20      	cmp	r3, #32
 800a71c:	d107      	bne.n	800a72e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f06f 0220 	mvn.w	r2, #32
 800a726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f8c7 	bl	800a8bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a72e:	bf00      	nop
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a73e:	bf00      	nop
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b083      	sub	sp, #12
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a752:	bf00      	nop
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a75e:	b480      	push	{r7}
 800a760:	b083      	sub	sp, #12
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a766:	bf00      	nop
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a772:	b480      	push	{r7}
 800a774:	b083      	sub	sp, #12
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a77a:	bf00      	nop
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
	...

0800a788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a40      	ldr	r2, [pc, #256]	; (800a89c <TIM_Base_SetConfig+0x114>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d013      	beq.n	800a7c8 <TIM_Base_SetConfig+0x40>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a6:	d00f      	beq.n	800a7c8 <TIM_Base_SetConfig+0x40>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a3d      	ldr	r2, [pc, #244]	; (800a8a0 <TIM_Base_SetConfig+0x118>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d00b      	beq.n	800a7c8 <TIM_Base_SetConfig+0x40>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a3c      	ldr	r2, [pc, #240]	; (800a8a4 <TIM_Base_SetConfig+0x11c>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d007      	beq.n	800a7c8 <TIM_Base_SetConfig+0x40>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a3b      	ldr	r2, [pc, #236]	; (800a8a8 <TIM_Base_SetConfig+0x120>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d003      	beq.n	800a7c8 <TIM_Base_SetConfig+0x40>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a3a      	ldr	r2, [pc, #232]	; (800a8ac <TIM_Base_SetConfig+0x124>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d108      	bne.n	800a7da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a2f      	ldr	r2, [pc, #188]	; (800a89c <TIM_Base_SetConfig+0x114>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d01f      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7e8:	d01b      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a2c      	ldr	r2, [pc, #176]	; (800a8a0 <TIM_Base_SetConfig+0x118>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d017      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a2b      	ldr	r2, [pc, #172]	; (800a8a4 <TIM_Base_SetConfig+0x11c>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d013      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a2a      	ldr	r2, [pc, #168]	; (800a8a8 <TIM_Base_SetConfig+0x120>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d00f      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a29      	ldr	r2, [pc, #164]	; (800a8ac <TIM_Base_SetConfig+0x124>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d00b      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a28      	ldr	r2, [pc, #160]	; (800a8b0 <TIM_Base_SetConfig+0x128>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d007      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a27      	ldr	r2, [pc, #156]	; (800a8b4 <TIM_Base_SetConfig+0x12c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d003      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a26      	ldr	r2, [pc, #152]	; (800a8b8 <TIM_Base_SetConfig+0x130>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d108      	bne.n	800a834 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	4313      	orrs	r3, r2
 800a832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	4313      	orrs	r3, r2
 800a840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	689a      	ldr	r2, [r3, #8]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a10      	ldr	r2, [pc, #64]	; (800a89c <TIM_Base_SetConfig+0x114>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d00f      	beq.n	800a880 <TIM_Base_SetConfig+0xf8>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a12      	ldr	r2, [pc, #72]	; (800a8ac <TIM_Base_SetConfig+0x124>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d00b      	beq.n	800a880 <TIM_Base_SetConfig+0xf8>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a11      	ldr	r2, [pc, #68]	; (800a8b0 <TIM_Base_SetConfig+0x128>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d007      	beq.n	800a880 <TIM_Base_SetConfig+0xf8>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a10      	ldr	r2, [pc, #64]	; (800a8b4 <TIM_Base_SetConfig+0x12c>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d003      	beq.n	800a880 <TIM_Base_SetConfig+0xf8>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a0f      	ldr	r2, [pc, #60]	; (800a8b8 <TIM_Base_SetConfig+0x130>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d103      	bne.n	800a888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	691a      	ldr	r2, [r3, #16]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	615a      	str	r2, [r3, #20]
}
 800a88e:	bf00      	nop
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	40010000 	.word	0x40010000
 800a8a0:	40000400 	.word	0x40000400
 800a8a4:	40000800 	.word	0x40000800
 800a8a8:	40000c00 	.word	0x40000c00
 800a8ac:	40010400 	.word	0x40010400
 800a8b0:	40014000 	.word	0x40014000
 800a8b4:	40014400 	.word	0x40014400
 800a8b8:	40014800 	.word	0x40014800

0800a8bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e042      	b.n	800a990 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a910:	2b00      	cmp	r3, #0
 800a912:	d106      	bne.n	800a922 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7fa fea7 	bl	8005670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2224      	movs	r2, #36	; 0x24
 800a926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f022 0201 	bic.w	r2, r2, #1
 800a938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fc80 	bl	800b240 <UART_SetConfig>
 800a940:	4603      	mov	r3, r0
 800a942:	2b01      	cmp	r3, #1
 800a944:	d101      	bne.n	800a94a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e022      	b.n	800a990 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d002      	beq.n	800a958 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f001 f9dc 	bl	800bd10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	685a      	ldr	r2, [r3, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	689a      	ldr	r2, [r3, #8]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f042 0201 	orr.w	r2, r2, #1
 800a986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f001 fa63 	bl	800be54 <UART_CheckIdleState>
 800a98e:	4603      	mov	r3, r0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08a      	sub	sp, #40	; 0x28
 800a99c:	af02      	add	r7, sp, #8
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9ae:	2b20      	cmp	r3, #32
 800a9b0:	f040 8083 	bne.w	800aaba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d002      	beq.n	800a9c0 <HAL_UART_Transmit+0x28>
 800a9ba:	88fb      	ldrh	r3, [r7, #6]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d101      	bne.n	800a9c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e07b      	b.n	800aabc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d101      	bne.n	800a9d2 <HAL_UART_Transmit+0x3a>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	e074      	b.n	800aabc <HAL_UART_Transmit+0x124>
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2221      	movs	r2, #33	; 0x21
 800a9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a9ea:	f7fb f99b 	bl	8005d24 <HAL_GetTick>
 800a9ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	88fa      	ldrh	r2, [r7, #6]
 800a9f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	88fa      	ldrh	r2, [r7, #6]
 800a9fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa08:	d108      	bne.n	800aa1c <HAL_UART_Transmit+0x84>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d104      	bne.n	800aa1c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	61bb      	str	r3, [r7, #24]
 800aa1a:	e003      	b.n	800aa24 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa20:	2300      	movs	r3, #0
 800aa22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800aa2c:	e02c      	b.n	800aa88 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2200      	movs	r2, #0
 800aa36:	2180      	movs	r1, #128	; 0x80
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f001 fa56 	bl	800beea <UART_WaitOnFlagUntilTimeout>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e039      	b.n	800aabc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10b      	bne.n	800aa66 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	881b      	ldrh	r3, [r3, #0]
 800aa52:	461a      	mov	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	3302      	adds	r3, #2
 800aa62:	61bb      	str	r3, [r7, #24]
 800aa64:	e007      	b.n	800aa76 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	781a      	ldrb	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	3301      	adds	r3, #1
 800aa74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1cc      	bne.n	800aa2e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	2140      	movs	r1, #64	; 0x40
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f001 fa23 	bl	800beea <UART_WaitOnFlagUntilTimeout>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e006      	b.n	800aabc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2220      	movs	r2, #32
 800aab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	e000      	b.n	800aabc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aaba:	2302      	movs	r3, #2
  }
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3720      	adds	r7, #32
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b0ba      	sub	sp, #232	; 0xe8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	69db      	ldr	r3, [r3, #28]
 800aad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aaea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aaee:	f640 030f 	movw	r3, #2063	; 0x80f
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aaf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d11b      	bne.n	800ab38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab04:	f003 0320 	and.w	r3, r3, #32
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d015      	beq.n	800ab38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab10:	f003 0320 	and.w	r3, r3, #32
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d105      	bne.n	800ab24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d009      	beq.n	800ab38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 835a 	beq.w	800b1e2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	4798      	blx	r3
      }
      return;
 800ab36:	e354      	b.n	800b1e2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 811f 	beq.w	800ad80 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ab46:	4b8b      	ldr	r3, [pc, #556]	; (800ad74 <HAL_UART_IRQHandler+0x2b0>)
 800ab48:	4013      	ands	r3, r2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d106      	bne.n	800ab5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ab52:	4b89      	ldr	r3, [pc, #548]	; (800ad78 <HAL_UART_IRQHandler+0x2b4>)
 800ab54:	4013      	ands	r3, r2
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f000 8112 	beq.w	800ad80 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d011      	beq.n	800ab8c <HAL_UART_IRQHandler+0xc8>
 800ab68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab82:	f043 0201 	orr.w	r2, r3, #1
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab90:	f003 0302 	and.w	r3, r3, #2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d011      	beq.n	800abbc <HAL_UART_IRQHandler+0xf8>
 800ab98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00b      	beq.n	800abbc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2202      	movs	r2, #2
 800abaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abb2:	f043 0204 	orr.w	r2, r3, #4
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d011      	beq.n	800abec <HAL_UART_IRQHandler+0x128>
 800abc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abcc:	f003 0301 	and.w	r3, r3, #1
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00b      	beq.n	800abec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2204      	movs	r2, #4
 800abda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abe2:	f043 0202 	orr.w	r2, r3, #2
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800abec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abf0:	f003 0308 	and.w	r3, r3, #8
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d017      	beq.n	800ac28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800abf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abfc:	f003 0320 	and.w	r3, r3, #32
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d105      	bne.n	800ac10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ac04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ac08:	4b5a      	ldr	r3, [pc, #360]	; (800ad74 <HAL_UART_IRQHandler+0x2b0>)
 800ac0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00b      	beq.n	800ac28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2208      	movs	r2, #8
 800ac16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac1e:	f043 0208 	orr.w	r2, r3, #8
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d012      	beq.n	800ac5a <HAL_UART_IRQHandler+0x196>
 800ac34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00c      	beq.n	800ac5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac50:	f043 0220 	orr.w	r2, r3, #32
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 82c0 	beq.w	800b1e6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac6a:	f003 0320 	and.w	r3, r3, #32
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d013      	beq.n	800ac9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac76:	f003 0320 	and.w	r3, r3, #32
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d105      	bne.n	800ac8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d007      	beq.n	800ac9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d003      	beq.n	800ac9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aca0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acae:	2b40      	cmp	r3, #64	; 0x40
 800acb0:	d005      	beq.n	800acbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800acb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d04f      	beq.n	800ad5e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f001 f9dc 	bl	800c07c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acce:	2b40      	cmp	r3, #64	; 0x40
 800acd0:	d141      	bne.n	800ad56 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3308      	adds	r3, #8
 800acd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ace0:	e853 3f00 	ldrex	r3, [r3]
 800ace4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ace8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800acec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	3308      	adds	r3, #8
 800acfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800acfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad0e:	e841 2300 	strex	r3, r2, [r1]
 800ad12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1d9      	bne.n	800acd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d013      	beq.n	800ad4e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad2a:	4a14      	ldr	r2, [pc, #80]	; (800ad7c <HAL_UART_IRQHandler+0x2b8>)
 800ad2c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fb fc30 	bl	8006598 <HAL_DMA_Abort_IT>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d017      	beq.n	800ad6e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad4c:	e00f      	b.n	800ad6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fa60 	bl	800b214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad54:	e00b      	b.n	800ad6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fa5c 	bl	800b214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad5c:	e007      	b.n	800ad6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa58 	bl	800b214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ad6c:	e23b      	b.n	800b1e6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad6e:	bf00      	nop
    return;
 800ad70:	e239      	b.n	800b1e6 <HAL_UART_IRQHandler+0x722>
 800ad72:	bf00      	nop
 800ad74:	10000001 	.word	0x10000001
 800ad78:	04000120 	.word	0x04000120
 800ad7c:	0800c149 	.word	0x0800c149

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	f040 81ce 	bne.w	800b126 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad8e:	f003 0310 	and.w	r3, r3, #16
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 81c7 	beq.w	800b126 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad9c:	f003 0310 	and.w	r3, r3, #16
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 81c0 	beq.w	800b126 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2210      	movs	r2, #16
 800adac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb8:	2b40      	cmp	r3, #64	; 0x40
 800adba:	f040 813b 	bne.w	800b034 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a8b      	ldr	r2, [pc, #556]	; (800aff4 <HAL_UART_IRQHandler+0x530>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d059      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a89      	ldr	r2, [pc, #548]	; (800aff8 <HAL_UART_IRQHandler+0x534>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d053      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a87      	ldr	r2, [pc, #540]	; (800affc <HAL_UART_IRQHandler+0x538>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d04d      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a85      	ldr	r2, [pc, #532]	; (800b000 <HAL_UART_IRQHandler+0x53c>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d047      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a83      	ldr	r2, [pc, #524]	; (800b004 <HAL_UART_IRQHandler+0x540>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d041      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a81      	ldr	r2, [pc, #516]	; (800b008 <HAL_UART_IRQHandler+0x544>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d03b      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a7f      	ldr	r2, [pc, #508]	; (800b00c <HAL_UART_IRQHandler+0x548>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d035      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a7d      	ldr	r2, [pc, #500]	; (800b010 <HAL_UART_IRQHandler+0x54c>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d02f      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a7b      	ldr	r2, [pc, #492]	; (800b014 <HAL_UART_IRQHandler+0x550>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d029      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a79      	ldr	r2, [pc, #484]	; (800b018 <HAL_UART_IRQHandler+0x554>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d023      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a77      	ldr	r2, [pc, #476]	; (800b01c <HAL_UART_IRQHandler+0x558>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d01d      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a75      	ldr	r2, [pc, #468]	; (800b020 <HAL_UART_IRQHandler+0x55c>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d017      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a73      	ldr	r2, [pc, #460]	; (800b024 <HAL_UART_IRQHandler+0x560>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d011      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a71      	ldr	r2, [pc, #452]	; (800b028 <HAL_UART_IRQHandler+0x564>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d00b      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a6f      	ldr	r2, [pc, #444]	; (800b02c <HAL_UART_IRQHandler+0x568>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d005      	beq.n	800ae7e <HAL_UART_IRQHandler+0x3ba>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a6d      	ldr	r2, [pc, #436]	; (800b030 <HAL_UART_IRQHandler+0x56c>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d105      	bne.n	800ae8a <HAL_UART_IRQHandler+0x3c6>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	e004      	b.n	800ae94 <HAL_UART_IRQHandler+0x3d0>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f000 81a4 	beq.w	800b1ea <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aea8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aeac:	429a      	cmp	r2, r3
 800aeae:	f080 819c 	bcs.w	800b1ea <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aeb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aec6:	f000 8086 	beq.w	800afd6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aed6:	e853 3f00 	ldrex	r3, [r3]
 800aeda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aee6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aef4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aef8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af04:	e841 2300 	strex	r3, r2, [r1]
 800af08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1da      	bne.n	800aeca <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3308      	adds	r3, #8
 800af1a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af1e:	e853 3f00 	ldrex	r3, [r3]
 800af22:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af26:	f023 0301 	bic.w	r3, r3, #1
 800af2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	3308      	adds	r3, #8
 800af34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af38:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af3c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800af40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800af4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e1      	bne.n	800af14 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	3308      	adds	r3, #8
 800af56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af5a:	e853 3f00 	ldrex	r3, [r3]
 800af5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800af60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3308      	adds	r3, #8
 800af70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800af74:	66fa      	str	r2, [r7, #108]	; 0x6c
 800af76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af7c:	e841 2300 	strex	r3, r2, [r1]
 800af80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800af82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1e3      	bne.n	800af50 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2220      	movs	r2, #32
 800af8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af9e:	e853 3f00 	ldrex	r3, [r3]
 800afa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afa6:	f023 0310 	bic.w	r3, r3, #16
 800afaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800afb8:	65bb      	str	r3, [r7, #88]	; 0x58
 800afba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afc0:	e841 2300 	strex	r3, r2, [r1]
 800afc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800afc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1e4      	bne.n	800af96 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fa ffc3 	bl	8005f5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	4619      	mov	r1, r3
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f91c 	bl	800b228 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aff0:	e0fb      	b.n	800b1ea <HAL_UART_IRQHandler+0x726>
 800aff2:	bf00      	nop
 800aff4:	40020010 	.word	0x40020010
 800aff8:	40020028 	.word	0x40020028
 800affc:	40020040 	.word	0x40020040
 800b000:	40020058 	.word	0x40020058
 800b004:	40020070 	.word	0x40020070
 800b008:	40020088 	.word	0x40020088
 800b00c:	400200a0 	.word	0x400200a0
 800b010:	400200b8 	.word	0x400200b8
 800b014:	40020410 	.word	0x40020410
 800b018:	40020428 	.word	0x40020428
 800b01c:	40020440 	.word	0x40020440
 800b020:	40020458 	.word	0x40020458
 800b024:	40020470 	.word	0x40020470
 800b028:	40020488 	.word	0x40020488
 800b02c:	400204a0 	.word	0x400204a0
 800b030:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b040:	b29b      	uxth	r3, r3
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b04e:	b29b      	uxth	r3, r3
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 80cc 	beq.w	800b1ee <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b056:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f000 80c7 	beq.w	800b1ee <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	e853 3f00 	ldrex	r3, [r3]
 800b06c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b070:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	461a      	mov	r2, r3
 800b07e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b082:	647b      	str	r3, [r7, #68]	; 0x44
 800b084:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e4      	bne.n	800b060 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3308      	adds	r3, #8
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	e853 3f00 	ldrex	r3, [r3]
 800b0a4:	623b      	str	r3, [r7, #32]
   return(result);
 800b0a6:	6a3a      	ldr	r2, [r7, #32]
 800b0a8:	4b54      	ldr	r3, [pc, #336]	; (800b1fc <HAL_UART_IRQHandler+0x738>)
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0ba:	633a      	str	r2, [r7, #48]	; 0x30
 800b0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e3      	bne.n	800b096 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	e853 3f00 	ldrex	r3, [r3]
 800b0ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f023 0310 	bic.w	r3, r3, #16
 800b0f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b104:	61fb      	str	r3, [r7, #28]
 800b106:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b108:	69b9      	ldr	r1, [r7, #24]
 800b10a:	69fa      	ldr	r2, [r7, #28]
 800b10c:	e841 2300 	strex	r3, r2, [r1]
 800b110:	617b      	str	r3, [r7, #20]
   return(result);
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1e4      	bne.n	800b0e2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f882 	bl	800b228 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b124:	e063      	b.n	800b1ee <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b12a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00e      	beq.n	800b150 <HAL_UART_IRQHandler+0x68c>
 800b132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d008      	beq.n	800b150 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b146:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f001 f83e 	bl	800c1ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b14e:	e051      	b.n	800b1f4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d014      	beq.n	800b186 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b164:	2b00      	cmp	r3, #0
 800b166:	d105      	bne.n	800b174 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b16c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d008      	beq.n	800b186 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d03a      	beq.n	800b1f2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	4798      	blx	r3
    }
    return;
 800b184:	e035      	b.n	800b1f2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b18a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d009      	beq.n	800b1a6 <HAL_UART_IRQHandler+0x6e2>
 800b192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 ffe8 	bl	800c174 <UART_EndTransmit_IT>
    return;
 800b1a4:	e026      	b.n	800b1f4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b1a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d009      	beq.n	800b1c6 <HAL_UART_IRQHandler+0x702>
 800b1b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f001 f817 	bl	800c1f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1c4:	e016      	b.n	800b1f4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d010      	beq.n	800b1f4 <HAL_UART_IRQHandler+0x730>
 800b1d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da0c      	bge.n	800b1f4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 ffff 	bl	800c1de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1e0:	e008      	b.n	800b1f4 <HAL_UART_IRQHandler+0x730>
      return;
 800b1e2:	bf00      	nop
 800b1e4:	e006      	b.n	800b1f4 <HAL_UART_IRQHandler+0x730>
    return;
 800b1e6:	bf00      	nop
 800b1e8:	e004      	b.n	800b1f4 <HAL_UART_IRQHandler+0x730>
      return;
 800b1ea:	bf00      	nop
 800b1ec:	e002      	b.n	800b1f4 <HAL_UART_IRQHandler+0x730>
      return;
 800b1ee:	bf00      	nop
 800b1f0:	e000      	b.n	800b1f4 <HAL_UART_IRQHandler+0x730>
    return;
 800b1f2:	bf00      	nop
  }
}
 800b1f4:	37e8      	adds	r7, #232	; 0xe8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	effffffe 	.word	0xeffffffe

0800b200 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b244:	b092      	sub	sp, #72	; 0x48
 800b246:	af00      	add	r7, sp, #0
 800b248:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	431a      	orrs	r2, r3
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	431a      	orrs	r2, r3
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	4313      	orrs	r3, r2
 800b266:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	4bbe      	ldr	r3, [pc, #760]	; (800b568 <UART_SetConfig+0x328>)
 800b270:	4013      	ands	r3, r2
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	6812      	ldr	r2, [r2, #0]
 800b276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b278:	430b      	orrs	r3, r1
 800b27a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	68da      	ldr	r2, [r3, #12]
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	430a      	orrs	r2, r1
 800b290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4ab3      	ldr	r2, [pc, #716]	; (800b56c <UART_SetConfig+0x32c>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d004      	beq.n	800b2ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	6a1b      	ldr	r3, [r3, #32]
 800b2a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	689a      	ldr	r2, [r3, #8]
 800b2b2:	4baf      	ldr	r3, [pc, #700]	; (800b570 <UART_SetConfig+0x330>)
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	6812      	ldr	r2, [r2, #0]
 800b2ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2bc:	430b      	orrs	r3, r1
 800b2be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c6:	f023 010f 	bic.w	r1, r3, #15
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4aa6      	ldr	r2, [pc, #664]	; (800b574 <UART_SetConfig+0x334>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d177      	bne.n	800b3d0 <UART_SetConfig+0x190>
 800b2e0:	4ba5      	ldr	r3, [pc, #660]	; (800b578 <UART_SetConfig+0x338>)
 800b2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2e8:	2b28      	cmp	r3, #40	; 0x28
 800b2ea:	d86d      	bhi.n	800b3c8 <UART_SetConfig+0x188>
 800b2ec:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <UART_SetConfig+0xb4>)
 800b2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f2:	bf00      	nop
 800b2f4:	0800b399 	.word	0x0800b399
 800b2f8:	0800b3c9 	.word	0x0800b3c9
 800b2fc:	0800b3c9 	.word	0x0800b3c9
 800b300:	0800b3c9 	.word	0x0800b3c9
 800b304:	0800b3c9 	.word	0x0800b3c9
 800b308:	0800b3c9 	.word	0x0800b3c9
 800b30c:	0800b3c9 	.word	0x0800b3c9
 800b310:	0800b3c9 	.word	0x0800b3c9
 800b314:	0800b3a1 	.word	0x0800b3a1
 800b318:	0800b3c9 	.word	0x0800b3c9
 800b31c:	0800b3c9 	.word	0x0800b3c9
 800b320:	0800b3c9 	.word	0x0800b3c9
 800b324:	0800b3c9 	.word	0x0800b3c9
 800b328:	0800b3c9 	.word	0x0800b3c9
 800b32c:	0800b3c9 	.word	0x0800b3c9
 800b330:	0800b3c9 	.word	0x0800b3c9
 800b334:	0800b3a9 	.word	0x0800b3a9
 800b338:	0800b3c9 	.word	0x0800b3c9
 800b33c:	0800b3c9 	.word	0x0800b3c9
 800b340:	0800b3c9 	.word	0x0800b3c9
 800b344:	0800b3c9 	.word	0x0800b3c9
 800b348:	0800b3c9 	.word	0x0800b3c9
 800b34c:	0800b3c9 	.word	0x0800b3c9
 800b350:	0800b3c9 	.word	0x0800b3c9
 800b354:	0800b3b1 	.word	0x0800b3b1
 800b358:	0800b3c9 	.word	0x0800b3c9
 800b35c:	0800b3c9 	.word	0x0800b3c9
 800b360:	0800b3c9 	.word	0x0800b3c9
 800b364:	0800b3c9 	.word	0x0800b3c9
 800b368:	0800b3c9 	.word	0x0800b3c9
 800b36c:	0800b3c9 	.word	0x0800b3c9
 800b370:	0800b3c9 	.word	0x0800b3c9
 800b374:	0800b3b9 	.word	0x0800b3b9
 800b378:	0800b3c9 	.word	0x0800b3c9
 800b37c:	0800b3c9 	.word	0x0800b3c9
 800b380:	0800b3c9 	.word	0x0800b3c9
 800b384:	0800b3c9 	.word	0x0800b3c9
 800b388:	0800b3c9 	.word	0x0800b3c9
 800b38c:	0800b3c9 	.word	0x0800b3c9
 800b390:	0800b3c9 	.word	0x0800b3c9
 800b394:	0800b3c1 	.word	0x0800b3c1
 800b398:	2301      	movs	r3, #1
 800b39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b39e:	e222      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b3a0:	2304      	movs	r3, #4
 800b3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3a6:	e21e      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b3a8:	2308      	movs	r3, #8
 800b3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ae:	e21a      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b3b0:	2310      	movs	r3, #16
 800b3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3b6:	e216      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b3b8:	2320      	movs	r3, #32
 800b3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3be:	e212      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b3c0:	2340      	movs	r3, #64	; 0x40
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c6:	e20e      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b3c8:	2380      	movs	r3, #128	; 0x80
 800b3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ce:	e20a      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a69      	ldr	r2, [pc, #420]	; (800b57c <UART_SetConfig+0x33c>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d130      	bne.n	800b43c <UART_SetConfig+0x1fc>
 800b3da:	4b67      	ldr	r3, [pc, #412]	; (800b578 <UART_SetConfig+0x338>)
 800b3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3de:	f003 0307 	and.w	r3, r3, #7
 800b3e2:	2b05      	cmp	r3, #5
 800b3e4:	d826      	bhi.n	800b434 <UART_SetConfig+0x1f4>
 800b3e6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ec <UART_SetConfig+0x1ac>)
 800b3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ec:	0800b405 	.word	0x0800b405
 800b3f0:	0800b40d 	.word	0x0800b40d
 800b3f4:	0800b415 	.word	0x0800b415
 800b3f8:	0800b41d 	.word	0x0800b41d
 800b3fc:	0800b425 	.word	0x0800b425
 800b400:	0800b42d 	.word	0x0800b42d
 800b404:	2300      	movs	r3, #0
 800b406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b40a:	e1ec      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b40c:	2304      	movs	r3, #4
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b412:	e1e8      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b414:	2308      	movs	r3, #8
 800b416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b41a:	e1e4      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b41c:	2310      	movs	r3, #16
 800b41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b422:	e1e0      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b424:	2320      	movs	r3, #32
 800b426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b42a:	e1dc      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b42c:	2340      	movs	r3, #64	; 0x40
 800b42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b432:	e1d8      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b434:	2380      	movs	r3, #128	; 0x80
 800b436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b43a:	e1d4      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a4f      	ldr	r2, [pc, #316]	; (800b580 <UART_SetConfig+0x340>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d130      	bne.n	800b4a8 <UART_SetConfig+0x268>
 800b446:	4b4c      	ldr	r3, [pc, #304]	; (800b578 <UART_SetConfig+0x338>)
 800b448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b44a:	f003 0307 	and.w	r3, r3, #7
 800b44e:	2b05      	cmp	r3, #5
 800b450:	d826      	bhi.n	800b4a0 <UART_SetConfig+0x260>
 800b452:	a201      	add	r2, pc, #4	; (adr r2, 800b458 <UART_SetConfig+0x218>)
 800b454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b458:	0800b471 	.word	0x0800b471
 800b45c:	0800b479 	.word	0x0800b479
 800b460:	0800b481 	.word	0x0800b481
 800b464:	0800b489 	.word	0x0800b489
 800b468:	0800b491 	.word	0x0800b491
 800b46c:	0800b499 	.word	0x0800b499
 800b470:	2300      	movs	r3, #0
 800b472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b476:	e1b6      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b478:	2304      	movs	r3, #4
 800b47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b47e:	e1b2      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b480:	2308      	movs	r3, #8
 800b482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b486:	e1ae      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b488:	2310      	movs	r3, #16
 800b48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b48e:	e1aa      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b490:	2320      	movs	r3, #32
 800b492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b496:	e1a6      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b498:	2340      	movs	r3, #64	; 0x40
 800b49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b49e:	e1a2      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b4a0:	2380      	movs	r3, #128	; 0x80
 800b4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4a6:	e19e      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a35      	ldr	r2, [pc, #212]	; (800b584 <UART_SetConfig+0x344>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d130      	bne.n	800b514 <UART_SetConfig+0x2d4>
 800b4b2:	4b31      	ldr	r3, [pc, #196]	; (800b578 <UART_SetConfig+0x338>)
 800b4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4b6:	f003 0307 	and.w	r3, r3, #7
 800b4ba:	2b05      	cmp	r3, #5
 800b4bc:	d826      	bhi.n	800b50c <UART_SetConfig+0x2cc>
 800b4be:	a201      	add	r2, pc, #4	; (adr r2, 800b4c4 <UART_SetConfig+0x284>)
 800b4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c4:	0800b4dd 	.word	0x0800b4dd
 800b4c8:	0800b4e5 	.word	0x0800b4e5
 800b4cc:	0800b4ed 	.word	0x0800b4ed
 800b4d0:	0800b4f5 	.word	0x0800b4f5
 800b4d4:	0800b4fd 	.word	0x0800b4fd
 800b4d8:	0800b505 	.word	0x0800b505
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4e2:	e180      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b4e4:	2304      	movs	r3, #4
 800b4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ea:	e17c      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b4ec:	2308      	movs	r3, #8
 800b4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4f2:	e178      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b4f4:	2310      	movs	r3, #16
 800b4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4fa:	e174      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b4fc:	2320      	movs	r3, #32
 800b4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b502:	e170      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b504:	2340      	movs	r3, #64	; 0x40
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b50a:	e16c      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b50c:	2380      	movs	r3, #128	; 0x80
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b512:	e168      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a1b      	ldr	r2, [pc, #108]	; (800b588 <UART_SetConfig+0x348>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d142      	bne.n	800b5a4 <UART_SetConfig+0x364>
 800b51e:	4b16      	ldr	r3, [pc, #88]	; (800b578 <UART_SetConfig+0x338>)
 800b520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b522:	f003 0307 	and.w	r3, r3, #7
 800b526:	2b05      	cmp	r3, #5
 800b528:	d838      	bhi.n	800b59c <UART_SetConfig+0x35c>
 800b52a:	a201      	add	r2, pc, #4	; (adr r2, 800b530 <UART_SetConfig+0x2f0>)
 800b52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b530:	0800b549 	.word	0x0800b549
 800b534:	0800b551 	.word	0x0800b551
 800b538:	0800b559 	.word	0x0800b559
 800b53c:	0800b561 	.word	0x0800b561
 800b540:	0800b58d 	.word	0x0800b58d
 800b544:	0800b595 	.word	0x0800b595
 800b548:	2300      	movs	r3, #0
 800b54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b54e:	e14a      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b550:	2304      	movs	r3, #4
 800b552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b556:	e146      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b558:	2308      	movs	r3, #8
 800b55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b55e:	e142      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b560:	2310      	movs	r3, #16
 800b562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b566:	e13e      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b568:	cfff69f3 	.word	0xcfff69f3
 800b56c:	58000c00 	.word	0x58000c00
 800b570:	11fff4ff 	.word	0x11fff4ff
 800b574:	40011000 	.word	0x40011000
 800b578:	58024400 	.word	0x58024400
 800b57c:	40004400 	.word	0x40004400
 800b580:	40004800 	.word	0x40004800
 800b584:	40004c00 	.word	0x40004c00
 800b588:	40005000 	.word	0x40005000
 800b58c:	2320      	movs	r3, #32
 800b58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b592:	e128      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b594:	2340      	movs	r3, #64	; 0x40
 800b596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59a:	e124      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b59c:	2380      	movs	r3, #128	; 0x80
 800b59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a2:	e120      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4acb      	ldr	r2, [pc, #812]	; (800b8d8 <UART_SetConfig+0x698>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d176      	bne.n	800b69c <UART_SetConfig+0x45c>
 800b5ae:	4bcb      	ldr	r3, [pc, #812]	; (800b8dc <UART_SetConfig+0x69c>)
 800b5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5b6:	2b28      	cmp	r3, #40	; 0x28
 800b5b8:	d86c      	bhi.n	800b694 <UART_SetConfig+0x454>
 800b5ba:	a201      	add	r2, pc, #4	; (adr r2, 800b5c0 <UART_SetConfig+0x380>)
 800b5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c0:	0800b665 	.word	0x0800b665
 800b5c4:	0800b695 	.word	0x0800b695
 800b5c8:	0800b695 	.word	0x0800b695
 800b5cc:	0800b695 	.word	0x0800b695
 800b5d0:	0800b695 	.word	0x0800b695
 800b5d4:	0800b695 	.word	0x0800b695
 800b5d8:	0800b695 	.word	0x0800b695
 800b5dc:	0800b695 	.word	0x0800b695
 800b5e0:	0800b66d 	.word	0x0800b66d
 800b5e4:	0800b695 	.word	0x0800b695
 800b5e8:	0800b695 	.word	0x0800b695
 800b5ec:	0800b695 	.word	0x0800b695
 800b5f0:	0800b695 	.word	0x0800b695
 800b5f4:	0800b695 	.word	0x0800b695
 800b5f8:	0800b695 	.word	0x0800b695
 800b5fc:	0800b695 	.word	0x0800b695
 800b600:	0800b675 	.word	0x0800b675
 800b604:	0800b695 	.word	0x0800b695
 800b608:	0800b695 	.word	0x0800b695
 800b60c:	0800b695 	.word	0x0800b695
 800b610:	0800b695 	.word	0x0800b695
 800b614:	0800b695 	.word	0x0800b695
 800b618:	0800b695 	.word	0x0800b695
 800b61c:	0800b695 	.word	0x0800b695
 800b620:	0800b67d 	.word	0x0800b67d
 800b624:	0800b695 	.word	0x0800b695
 800b628:	0800b695 	.word	0x0800b695
 800b62c:	0800b695 	.word	0x0800b695
 800b630:	0800b695 	.word	0x0800b695
 800b634:	0800b695 	.word	0x0800b695
 800b638:	0800b695 	.word	0x0800b695
 800b63c:	0800b695 	.word	0x0800b695
 800b640:	0800b685 	.word	0x0800b685
 800b644:	0800b695 	.word	0x0800b695
 800b648:	0800b695 	.word	0x0800b695
 800b64c:	0800b695 	.word	0x0800b695
 800b650:	0800b695 	.word	0x0800b695
 800b654:	0800b695 	.word	0x0800b695
 800b658:	0800b695 	.word	0x0800b695
 800b65c:	0800b695 	.word	0x0800b695
 800b660:	0800b68d 	.word	0x0800b68d
 800b664:	2301      	movs	r3, #1
 800b666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b66a:	e0bc      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b66c:	2304      	movs	r3, #4
 800b66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b672:	e0b8      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b674:	2308      	movs	r3, #8
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b67a:	e0b4      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b67c:	2310      	movs	r3, #16
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b682:	e0b0      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b684:	2320      	movs	r3, #32
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b68a:	e0ac      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b68c:	2340      	movs	r3, #64	; 0x40
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b692:	e0a8      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b694:	2380      	movs	r3, #128	; 0x80
 800b696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b69a:	e0a4      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a8f      	ldr	r2, [pc, #572]	; (800b8e0 <UART_SetConfig+0x6a0>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d130      	bne.n	800b708 <UART_SetConfig+0x4c8>
 800b6a6:	4b8d      	ldr	r3, [pc, #564]	; (800b8dc <UART_SetConfig+0x69c>)
 800b6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6aa:	f003 0307 	and.w	r3, r3, #7
 800b6ae:	2b05      	cmp	r3, #5
 800b6b0:	d826      	bhi.n	800b700 <UART_SetConfig+0x4c0>
 800b6b2:	a201      	add	r2, pc, #4	; (adr r2, 800b6b8 <UART_SetConfig+0x478>)
 800b6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b8:	0800b6d1 	.word	0x0800b6d1
 800b6bc:	0800b6d9 	.word	0x0800b6d9
 800b6c0:	0800b6e1 	.word	0x0800b6e1
 800b6c4:	0800b6e9 	.word	0x0800b6e9
 800b6c8:	0800b6f1 	.word	0x0800b6f1
 800b6cc:	0800b6f9 	.word	0x0800b6f9
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6d6:	e086      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b6d8:	2304      	movs	r3, #4
 800b6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6de:	e082      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b6e0:	2308      	movs	r3, #8
 800b6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6e6:	e07e      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b6e8:	2310      	movs	r3, #16
 800b6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ee:	e07a      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b6f0:	2320      	movs	r3, #32
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6f6:	e076      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b6f8:	2340      	movs	r3, #64	; 0x40
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6fe:	e072      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b700:	2380      	movs	r3, #128	; 0x80
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b706:	e06e      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a75      	ldr	r2, [pc, #468]	; (800b8e4 <UART_SetConfig+0x6a4>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d130      	bne.n	800b774 <UART_SetConfig+0x534>
 800b712:	4b72      	ldr	r3, [pc, #456]	; (800b8dc <UART_SetConfig+0x69c>)
 800b714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b716:	f003 0307 	and.w	r3, r3, #7
 800b71a:	2b05      	cmp	r3, #5
 800b71c:	d826      	bhi.n	800b76c <UART_SetConfig+0x52c>
 800b71e:	a201      	add	r2, pc, #4	; (adr r2, 800b724 <UART_SetConfig+0x4e4>)
 800b720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b724:	0800b73d 	.word	0x0800b73d
 800b728:	0800b745 	.word	0x0800b745
 800b72c:	0800b74d 	.word	0x0800b74d
 800b730:	0800b755 	.word	0x0800b755
 800b734:	0800b75d 	.word	0x0800b75d
 800b738:	0800b765 	.word	0x0800b765
 800b73c:	2300      	movs	r3, #0
 800b73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b742:	e050      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b744:	2304      	movs	r3, #4
 800b746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b74a:	e04c      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b74c:	2308      	movs	r3, #8
 800b74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b752:	e048      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b754:	2310      	movs	r3, #16
 800b756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b75a:	e044      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b75c:	2320      	movs	r3, #32
 800b75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b762:	e040      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b764:	2340      	movs	r3, #64	; 0x40
 800b766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b76a:	e03c      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b76c:	2380      	movs	r3, #128	; 0x80
 800b76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b772:	e038      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a5b      	ldr	r2, [pc, #364]	; (800b8e8 <UART_SetConfig+0x6a8>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d130      	bne.n	800b7e0 <UART_SetConfig+0x5a0>
 800b77e:	4b57      	ldr	r3, [pc, #348]	; (800b8dc <UART_SetConfig+0x69c>)
 800b780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b782:	f003 0307 	and.w	r3, r3, #7
 800b786:	2b05      	cmp	r3, #5
 800b788:	d826      	bhi.n	800b7d8 <UART_SetConfig+0x598>
 800b78a:	a201      	add	r2, pc, #4	; (adr r2, 800b790 <UART_SetConfig+0x550>)
 800b78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b790:	0800b7a9 	.word	0x0800b7a9
 800b794:	0800b7b1 	.word	0x0800b7b1
 800b798:	0800b7b9 	.word	0x0800b7b9
 800b79c:	0800b7c1 	.word	0x0800b7c1
 800b7a0:	0800b7c9 	.word	0x0800b7c9
 800b7a4:	0800b7d1 	.word	0x0800b7d1
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ae:	e01a      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b7b0:	2304      	movs	r3, #4
 800b7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7b6:	e016      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b7b8:	2308      	movs	r3, #8
 800b7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7be:	e012      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b7c0:	2310      	movs	r3, #16
 800b7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7c6:	e00e      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b7c8:	2320      	movs	r3, #32
 800b7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ce:	e00a      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b7d0:	2340      	movs	r3, #64	; 0x40
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7d6:	e006      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b7d8:	2380      	movs	r3, #128	; 0x80
 800b7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7de:	e002      	b.n	800b7e6 <UART_SetConfig+0x5a6>
 800b7e0:	2380      	movs	r3, #128	; 0x80
 800b7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a3f      	ldr	r2, [pc, #252]	; (800b8e8 <UART_SetConfig+0x6a8>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	f040 80f8 	bne.w	800b9e2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	dc46      	bgt.n	800b888 <UART_SetConfig+0x648>
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	f2c0 8082 	blt.w	800b904 <UART_SetConfig+0x6c4>
 800b800:	3b02      	subs	r3, #2
 800b802:	2b1e      	cmp	r3, #30
 800b804:	d87e      	bhi.n	800b904 <UART_SetConfig+0x6c4>
 800b806:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <UART_SetConfig+0x5cc>)
 800b808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80c:	0800b88f 	.word	0x0800b88f
 800b810:	0800b905 	.word	0x0800b905
 800b814:	0800b897 	.word	0x0800b897
 800b818:	0800b905 	.word	0x0800b905
 800b81c:	0800b905 	.word	0x0800b905
 800b820:	0800b905 	.word	0x0800b905
 800b824:	0800b8a7 	.word	0x0800b8a7
 800b828:	0800b905 	.word	0x0800b905
 800b82c:	0800b905 	.word	0x0800b905
 800b830:	0800b905 	.word	0x0800b905
 800b834:	0800b905 	.word	0x0800b905
 800b838:	0800b905 	.word	0x0800b905
 800b83c:	0800b905 	.word	0x0800b905
 800b840:	0800b905 	.word	0x0800b905
 800b844:	0800b8b7 	.word	0x0800b8b7
 800b848:	0800b905 	.word	0x0800b905
 800b84c:	0800b905 	.word	0x0800b905
 800b850:	0800b905 	.word	0x0800b905
 800b854:	0800b905 	.word	0x0800b905
 800b858:	0800b905 	.word	0x0800b905
 800b85c:	0800b905 	.word	0x0800b905
 800b860:	0800b905 	.word	0x0800b905
 800b864:	0800b905 	.word	0x0800b905
 800b868:	0800b905 	.word	0x0800b905
 800b86c:	0800b905 	.word	0x0800b905
 800b870:	0800b905 	.word	0x0800b905
 800b874:	0800b905 	.word	0x0800b905
 800b878:	0800b905 	.word	0x0800b905
 800b87c:	0800b905 	.word	0x0800b905
 800b880:	0800b905 	.word	0x0800b905
 800b884:	0800b8f7 	.word	0x0800b8f7
 800b888:	2b40      	cmp	r3, #64	; 0x40
 800b88a:	d037      	beq.n	800b8fc <UART_SetConfig+0x6bc>
 800b88c:	e03a      	b.n	800b904 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b88e:	f7fe f937 	bl	8009b00 <HAL_RCCEx_GetD3PCLK1Freq>
 800b892:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b894:	e03c      	b.n	800b910 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe f946 	bl	8009b2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8a4:	e034      	b.n	800b910 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8a6:	f107 0318 	add.w	r3, r7, #24
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe fa92 	bl	8009dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8b4:	e02c      	b.n	800b910 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8b6:	4b09      	ldr	r3, [pc, #36]	; (800b8dc <UART_SetConfig+0x69c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 0320 	and.w	r3, r3, #32
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d016      	beq.n	800b8f0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8c2:	4b06      	ldr	r3, [pc, #24]	; (800b8dc <UART_SetConfig+0x69c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	08db      	lsrs	r3, r3, #3
 800b8c8:	f003 0303 	and.w	r3, r3, #3
 800b8cc:	4a07      	ldr	r2, [pc, #28]	; (800b8ec <UART_SetConfig+0x6ac>)
 800b8ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b8d4:	e01c      	b.n	800b910 <UART_SetConfig+0x6d0>
 800b8d6:	bf00      	nop
 800b8d8:	40011400 	.word	0x40011400
 800b8dc:	58024400 	.word	0x58024400
 800b8e0:	40007800 	.word	0x40007800
 800b8e4:	40007c00 	.word	0x40007c00
 800b8e8:	58000c00 	.word	0x58000c00
 800b8ec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b8f0:	4b9d      	ldr	r3, [pc, #628]	; (800bb68 <UART_SetConfig+0x928>)
 800b8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f4:	e00c      	b.n	800b910 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b8f6:	4b9d      	ldr	r3, [pc, #628]	; (800bb6c <UART_SetConfig+0x92c>)
 800b8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8fa:	e009      	b.n	800b910 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b902:	e005      	b.n	800b910 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b90e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 81de 	beq.w	800bcd4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	4a94      	ldr	r2, [pc, #592]	; (800bb70 <UART_SetConfig+0x930>)
 800b91e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b922:	461a      	mov	r2, r3
 800b924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b926:	fbb3 f3f2 	udiv	r3, r3, r2
 800b92a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	685a      	ldr	r2, [r3, #4]
 800b930:	4613      	mov	r3, r2
 800b932:	005b      	lsls	r3, r3, #1
 800b934:	4413      	add	r3, r2
 800b936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b938:	429a      	cmp	r2, r3
 800b93a:	d305      	bcc.n	800b948 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b944:	429a      	cmp	r2, r3
 800b946:	d903      	bls.n	800b950 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b94e:	e1c1      	b.n	800bcd4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b952:	2200      	movs	r2, #0
 800b954:	60bb      	str	r3, [r7, #8]
 800b956:	60fa      	str	r2, [r7, #12]
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	4a84      	ldr	r2, [pc, #528]	; (800bb70 <UART_SetConfig+0x930>)
 800b95e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b962:	b29b      	uxth	r3, r3
 800b964:	2200      	movs	r2, #0
 800b966:	603b      	str	r3, [r7, #0]
 800b968:	607a      	str	r2, [r7, #4]
 800b96a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b96e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b972:	f7f4 fd5d 	bl	8000430 <__aeabi_uldivmod>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4610      	mov	r0, r2
 800b97c:	4619      	mov	r1, r3
 800b97e:	f04f 0200 	mov.w	r2, #0
 800b982:	f04f 0300 	mov.w	r3, #0
 800b986:	020b      	lsls	r3, r1, #8
 800b988:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b98c:	0202      	lsls	r2, r0, #8
 800b98e:	6979      	ldr	r1, [r7, #20]
 800b990:	6849      	ldr	r1, [r1, #4]
 800b992:	0849      	lsrs	r1, r1, #1
 800b994:	2000      	movs	r0, #0
 800b996:	460c      	mov	r4, r1
 800b998:	4605      	mov	r5, r0
 800b99a:	eb12 0804 	adds.w	r8, r2, r4
 800b99e:	eb43 0905 	adc.w	r9, r3, r5
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	469a      	mov	sl, r3
 800b9aa:	4693      	mov	fp, r2
 800b9ac:	4652      	mov	r2, sl
 800b9ae:	465b      	mov	r3, fp
 800b9b0:	4640      	mov	r0, r8
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	f7f4 fd3c 	bl	8000430 <__aeabi_uldivmod>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4613      	mov	r3, r2
 800b9be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9c6:	d308      	bcc.n	800b9da <UART_SetConfig+0x79a>
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9ce:	d204      	bcs.n	800b9da <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9d6:	60da      	str	r2, [r3, #12]
 800b9d8:	e17c      	b.n	800bcd4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b9e0:	e178      	b.n	800bcd4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	69db      	ldr	r3, [r3, #28]
 800b9e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9ea:	f040 80c5 	bne.w	800bb78 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b9ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b9f2:	2b20      	cmp	r3, #32
 800b9f4:	dc48      	bgt.n	800ba88 <UART_SetConfig+0x848>
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	db7b      	blt.n	800baf2 <UART_SetConfig+0x8b2>
 800b9fa:	2b20      	cmp	r3, #32
 800b9fc:	d879      	bhi.n	800baf2 <UART_SetConfig+0x8b2>
 800b9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ba04 <UART_SetConfig+0x7c4>)
 800ba00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba04:	0800ba8f 	.word	0x0800ba8f
 800ba08:	0800ba97 	.word	0x0800ba97
 800ba0c:	0800baf3 	.word	0x0800baf3
 800ba10:	0800baf3 	.word	0x0800baf3
 800ba14:	0800ba9f 	.word	0x0800ba9f
 800ba18:	0800baf3 	.word	0x0800baf3
 800ba1c:	0800baf3 	.word	0x0800baf3
 800ba20:	0800baf3 	.word	0x0800baf3
 800ba24:	0800baaf 	.word	0x0800baaf
 800ba28:	0800baf3 	.word	0x0800baf3
 800ba2c:	0800baf3 	.word	0x0800baf3
 800ba30:	0800baf3 	.word	0x0800baf3
 800ba34:	0800baf3 	.word	0x0800baf3
 800ba38:	0800baf3 	.word	0x0800baf3
 800ba3c:	0800baf3 	.word	0x0800baf3
 800ba40:	0800baf3 	.word	0x0800baf3
 800ba44:	0800babf 	.word	0x0800babf
 800ba48:	0800baf3 	.word	0x0800baf3
 800ba4c:	0800baf3 	.word	0x0800baf3
 800ba50:	0800baf3 	.word	0x0800baf3
 800ba54:	0800baf3 	.word	0x0800baf3
 800ba58:	0800baf3 	.word	0x0800baf3
 800ba5c:	0800baf3 	.word	0x0800baf3
 800ba60:	0800baf3 	.word	0x0800baf3
 800ba64:	0800baf3 	.word	0x0800baf3
 800ba68:	0800baf3 	.word	0x0800baf3
 800ba6c:	0800baf3 	.word	0x0800baf3
 800ba70:	0800baf3 	.word	0x0800baf3
 800ba74:	0800baf3 	.word	0x0800baf3
 800ba78:	0800baf3 	.word	0x0800baf3
 800ba7c:	0800baf3 	.word	0x0800baf3
 800ba80:	0800baf3 	.word	0x0800baf3
 800ba84:	0800bae5 	.word	0x0800bae5
 800ba88:	2b40      	cmp	r3, #64	; 0x40
 800ba8a:	d02e      	beq.n	800baea <UART_SetConfig+0x8aa>
 800ba8c:	e031      	b.n	800baf2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba8e:	f7fd f883 	bl	8008b98 <HAL_RCC_GetPCLK1Freq>
 800ba92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba94:	e033      	b.n	800bafe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba96:	f7fd f895 	bl	8008bc4 <HAL_RCC_GetPCLK2Freq>
 800ba9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba9c:	e02f      	b.n	800bafe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fe f842 	bl	8009b2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800baa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baac:	e027      	b.n	800bafe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baae:	f107 0318 	add.w	r3, r7, #24
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fe f98e 	bl	8009dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800babc:	e01f      	b.n	800bafe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800babe:	4b2d      	ldr	r3, [pc, #180]	; (800bb74 <UART_SetConfig+0x934>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f003 0320 	and.w	r3, r3, #32
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d009      	beq.n	800bade <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800baca:	4b2a      	ldr	r3, [pc, #168]	; (800bb74 <UART_SetConfig+0x934>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	08db      	lsrs	r3, r3, #3
 800bad0:	f003 0303 	and.w	r3, r3, #3
 800bad4:	4a24      	ldr	r2, [pc, #144]	; (800bb68 <UART_SetConfig+0x928>)
 800bad6:	fa22 f303 	lsr.w	r3, r2, r3
 800bada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800badc:	e00f      	b.n	800bafe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bade:	4b22      	ldr	r3, [pc, #136]	; (800bb68 <UART_SetConfig+0x928>)
 800bae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bae2:	e00c      	b.n	800bafe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bae4:	4b21      	ldr	r3, [pc, #132]	; (800bb6c <UART_SetConfig+0x92c>)
 800bae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bae8:	e009      	b.n	800bafe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800baea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baf0:	e005      	b.n	800bafe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800baf2:	2300      	movs	r3, #0
 800baf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bafc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 80e7 	beq.w	800bcd4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0a:	4a19      	ldr	r2, [pc, #100]	; (800bb70 <UART_SetConfig+0x930>)
 800bb0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb10:	461a      	mov	r2, r3
 800bb12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb14:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb18:	005a      	lsls	r2, r3, #1
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	085b      	lsrs	r3, r3, #1
 800bb20:	441a      	add	r2, r3
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2e:	2b0f      	cmp	r3, #15
 800bb30:	d916      	bls.n	800bb60 <UART_SetConfig+0x920>
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb38:	d212      	bcs.n	800bb60 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	f023 030f 	bic.w	r3, r3, #15
 800bb42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb46:	085b      	lsrs	r3, r3, #1
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	f003 0307 	and.w	r3, r3, #7
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb52:	4313      	orrs	r3, r2
 800bb54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bb5c:	60da      	str	r2, [r3, #12]
 800bb5e:	e0b9      	b.n	800bcd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bb66:	e0b5      	b.n	800bcd4 <UART_SetConfig+0xa94>
 800bb68:	03d09000 	.word	0x03d09000
 800bb6c:	003d0900 	.word	0x003d0900
 800bb70:	0800df48 	.word	0x0800df48
 800bb74:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bb7c:	2b20      	cmp	r3, #32
 800bb7e:	dc49      	bgt.n	800bc14 <UART_SetConfig+0x9d4>
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	db7c      	blt.n	800bc7e <UART_SetConfig+0xa3e>
 800bb84:	2b20      	cmp	r3, #32
 800bb86:	d87a      	bhi.n	800bc7e <UART_SetConfig+0xa3e>
 800bb88:	a201      	add	r2, pc, #4	; (adr r2, 800bb90 <UART_SetConfig+0x950>)
 800bb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8e:	bf00      	nop
 800bb90:	0800bc1b 	.word	0x0800bc1b
 800bb94:	0800bc23 	.word	0x0800bc23
 800bb98:	0800bc7f 	.word	0x0800bc7f
 800bb9c:	0800bc7f 	.word	0x0800bc7f
 800bba0:	0800bc2b 	.word	0x0800bc2b
 800bba4:	0800bc7f 	.word	0x0800bc7f
 800bba8:	0800bc7f 	.word	0x0800bc7f
 800bbac:	0800bc7f 	.word	0x0800bc7f
 800bbb0:	0800bc3b 	.word	0x0800bc3b
 800bbb4:	0800bc7f 	.word	0x0800bc7f
 800bbb8:	0800bc7f 	.word	0x0800bc7f
 800bbbc:	0800bc7f 	.word	0x0800bc7f
 800bbc0:	0800bc7f 	.word	0x0800bc7f
 800bbc4:	0800bc7f 	.word	0x0800bc7f
 800bbc8:	0800bc7f 	.word	0x0800bc7f
 800bbcc:	0800bc7f 	.word	0x0800bc7f
 800bbd0:	0800bc4b 	.word	0x0800bc4b
 800bbd4:	0800bc7f 	.word	0x0800bc7f
 800bbd8:	0800bc7f 	.word	0x0800bc7f
 800bbdc:	0800bc7f 	.word	0x0800bc7f
 800bbe0:	0800bc7f 	.word	0x0800bc7f
 800bbe4:	0800bc7f 	.word	0x0800bc7f
 800bbe8:	0800bc7f 	.word	0x0800bc7f
 800bbec:	0800bc7f 	.word	0x0800bc7f
 800bbf0:	0800bc7f 	.word	0x0800bc7f
 800bbf4:	0800bc7f 	.word	0x0800bc7f
 800bbf8:	0800bc7f 	.word	0x0800bc7f
 800bbfc:	0800bc7f 	.word	0x0800bc7f
 800bc00:	0800bc7f 	.word	0x0800bc7f
 800bc04:	0800bc7f 	.word	0x0800bc7f
 800bc08:	0800bc7f 	.word	0x0800bc7f
 800bc0c:	0800bc7f 	.word	0x0800bc7f
 800bc10:	0800bc71 	.word	0x0800bc71
 800bc14:	2b40      	cmp	r3, #64	; 0x40
 800bc16:	d02e      	beq.n	800bc76 <UART_SetConfig+0xa36>
 800bc18:	e031      	b.n	800bc7e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc1a:	f7fc ffbd 	bl	8008b98 <HAL_RCC_GetPCLK1Freq>
 800bc1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc20:	e033      	b.n	800bc8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc22:	f7fc ffcf 	bl	8008bc4 <HAL_RCC_GetPCLK2Freq>
 800bc26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc28:	e02f      	b.n	800bc8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fd ff7c 	bl	8009b2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc38:	e027      	b.n	800bc8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc3a:	f107 0318 	add.w	r3, r7, #24
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fe f8c8 	bl	8009dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc48:	e01f      	b.n	800bc8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc4a:	4b2d      	ldr	r3, [pc, #180]	; (800bd00 <UART_SetConfig+0xac0>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f003 0320 	and.w	r3, r3, #32
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d009      	beq.n	800bc6a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc56:	4b2a      	ldr	r3, [pc, #168]	; (800bd00 <UART_SetConfig+0xac0>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	08db      	lsrs	r3, r3, #3
 800bc5c:	f003 0303 	and.w	r3, r3, #3
 800bc60:	4a28      	ldr	r2, [pc, #160]	; (800bd04 <UART_SetConfig+0xac4>)
 800bc62:	fa22 f303 	lsr.w	r3, r2, r3
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc68:	e00f      	b.n	800bc8a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bc6a:	4b26      	ldr	r3, [pc, #152]	; (800bd04 <UART_SetConfig+0xac4>)
 800bc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc6e:	e00c      	b.n	800bc8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc70:	4b25      	ldr	r3, [pc, #148]	; (800bd08 <UART_SetConfig+0xac8>)
 800bc72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc74:	e009      	b.n	800bc8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc7c:	e005      	b.n	800bc8a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bc88:	bf00      	nop
    }

    if (pclk != 0U)
 800bc8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d021      	beq.n	800bcd4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc94:	4a1d      	ldr	r2, [pc, #116]	; (800bd0c <UART_SetConfig+0xacc>)
 800bc96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc9e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	085b      	lsrs	r3, r3, #1
 800bca8:	441a      	add	r2, r3
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcb2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb6:	2b0f      	cmp	r3, #15
 800bcb8:	d909      	bls.n	800bcce <UART_SetConfig+0xa8e>
 800bcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcc0:	d205      	bcs.n	800bcce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	60da      	str	r2, [r3, #12]
 800bccc:	e002      	b.n	800bcd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	2200      	movs	r2, #0
 800bce8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2200      	movs	r2, #0
 800bcee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bcf0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3748      	adds	r7, #72	; 0x48
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcfe:	bf00      	nop
 800bd00:	58024400 	.word	0x58024400
 800bd04:	03d09000 	.word	0x03d09000
 800bd08:	003d0900 	.word	0x003d0900
 800bd0c:	0800df48 	.word	0x0800df48

0800bd10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd1c:	f003 0301 	and.w	r3, r3, #1
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00a      	beq.n	800bd3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd3e:	f003 0302 	and.w	r3, r3, #2
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00a      	beq.n	800bd5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	430a      	orrs	r2, r1
 800bd5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd60:	f003 0304 	and.w	r3, r3, #4
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00a      	beq.n	800bd7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	f003 0308 	and.w	r3, r3, #8
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00a      	beq.n	800bda0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	430a      	orrs	r2, r1
 800bd9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda4:	f003 0310 	and.w	r3, r3, #16
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00a      	beq.n	800bdc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	430a      	orrs	r2, r1
 800bdc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc6:	f003 0320 	and.w	r3, r3, #32
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00a      	beq.n	800bde4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	430a      	orrs	r2, r1
 800bde2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d01a      	beq.n	800be26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	430a      	orrs	r2, r1
 800be04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be0e:	d10a      	bne.n	800be26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	430a      	orrs	r2, r1
 800be24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00a      	beq.n	800be48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	430a      	orrs	r2, r1
 800be46:	605a      	str	r2, [r3, #4]
  }
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af02      	add	r7, sp, #8
 800be5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be64:	f7f9 ff5e 	bl	8005d24 <HAL_GetTick>
 800be68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f003 0308 	and.w	r3, r3, #8
 800be74:	2b08      	cmp	r3, #8
 800be76:	d10e      	bne.n	800be96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f82f 	bl	800beea <UART_WaitOnFlagUntilTimeout>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d001      	beq.n	800be96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be92:	2303      	movs	r3, #3
 800be94:	e025      	b.n	800bee2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0304 	and.w	r3, r3, #4
 800bea0:	2b04      	cmp	r3, #4
 800bea2:	d10e      	bne.n	800bec2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f819 	bl	800beea <UART_WaitOnFlagUntilTimeout>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bebe:	2303      	movs	r3, #3
 800bec0:	e00f      	b.n	800bee2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2220      	movs	r2, #32
 800bec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2220      	movs	r2, #32
 800bece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b09c      	sub	sp, #112	; 0x70
 800beee:	af00      	add	r7, sp, #0
 800bef0:	60f8      	str	r0, [r7, #12]
 800bef2:	60b9      	str	r1, [r7, #8]
 800bef4:	603b      	str	r3, [r7, #0]
 800bef6:	4613      	mov	r3, r2
 800bef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800befa:	e0a9      	b.n	800c050 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800befc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800befe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf02:	f000 80a5 	beq.w	800c050 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf06:	f7f9 ff0d 	bl	8005d24 <HAL_GetTick>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d302      	bcc.n	800bf1c <UART_WaitOnFlagUntilTimeout+0x32>
 800bf16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d140      	bne.n	800bf9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf24:	e853 3f00 	ldrex	r3, [r3]
 800bf28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bf2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf30:	667b      	str	r3, [r7, #100]	; 0x64
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	461a      	mov	r2, r3
 800bf38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf42:	e841 2300 	strex	r3, r2, [r1]
 800bf46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bf48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d1e6      	bne.n	800bf1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	3308      	adds	r3, #8
 800bf54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf58:	e853 3f00 	ldrex	r3, [r3]
 800bf5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf60:	f023 0301 	bic.w	r3, r3, #1
 800bf64:	663b      	str	r3, [r7, #96]	; 0x60
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf6e:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf76:	e841 2300 	strex	r3, r2, [r1]
 800bf7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1e5      	bne.n	800bf4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2220      	movs	r2, #32
 800bf86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2220      	movs	r2, #32
 800bf8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	e069      	b.n	800c072 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f003 0304 	and.w	r3, r3, #4
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d051      	beq.n	800c050 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	69db      	ldr	r3, [r3, #28]
 800bfb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfba:	d149      	bne.n	800c050 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bfc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfce:	e853 3f00 	ldrex	r3, [r3]
 800bfd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bfda:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfe4:	637b      	str	r3, [r7, #52]	; 0x34
 800bfe6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfec:	e841 2300 	strex	r3, r2, [r1]
 800bff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1e6      	bne.n	800bfc6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3308      	adds	r3, #8
 800bffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	613b      	str	r3, [r7, #16]
   return(result);
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f023 0301 	bic.w	r3, r3, #1
 800c00e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3308      	adds	r3, #8
 800c016:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c018:	623a      	str	r2, [r7, #32]
 800c01a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	69f9      	ldr	r1, [r7, #28]
 800c01e:	6a3a      	ldr	r2, [r7, #32]
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	61bb      	str	r3, [r7, #24]
   return(result);
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e5      	bne.n	800bff8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2220      	movs	r2, #32
 800c030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2220      	movs	r2, #32
 800c038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2220      	movs	r2, #32
 800c040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c04c:	2303      	movs	r3, #3
 800c04e:	e010      	b.n	800c072 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	69da      	ldr	r2, [r3, #28]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	4013      	ands	r3, r2
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	bf0c      	ite	eq
 800c060:	2301      	moveq	r3, #1
 800c062:	2300      	movne	r3, #0
 800c064:	b2db      	uxtb	r3, r3
 800c066:	461a      	mov	r2, r3
 800c068:	79fb      	ldrb	r3, [r7, #7]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	f43f af46 	beq.w	800befc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3770      	adds	r7, #112	; 0x70
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
	...

0800c07c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b095      	sub	sp, #84	; 0x54
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08c:	e853 3f00 	ldrex	r3, [r3]
 800c090:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0a2:	643b      	str	r3, [r7, #64]	; 0x40
 800c0a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0aa:	e841 2300 	strex	r3, r2, [r1]
 800c0ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1e6      	bne.n	800c084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	3308      	adds	r3, #8
 800c0bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	e853 3f00 	ldrex	r3, [r3]
 800c0c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0c6:	69fa      	ldr	r2, [r7, #28]
 800c0c8:	4b1e      	ldr	r3, [pc, #120]	; (800c144 <UART_EndRxTransfer+0xc8>)
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3308      	adds	r3, #8
 800c0d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0de:	e841 2300 	strex	r3, r2, [r1]
 800c0e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1e5      	bne.n	800c0b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d118      	bne.n	800c124 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	e853 3f00 	ldrex	r3, [r3]
 800c0fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	f023 0310 	bic.w	r3, r3, #16
 800c106:	647b      	str	r3, [r7, #68]	; 0x44
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	461a      	mov	r2, r3
 800c10e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c110:	61bb      	str	r3, [r7, #24]
 800c112:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c114:	6979      	ldr	r1, [r7, #20]
 800c116:	69ba      	ldr	r2, [r7, #24]
 800c118:	e841 2300 	strex	r3, r2, [r1]
 800c11c:	613b      	str	r3, [r7, #16]
   return(result);
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1e6      	bne.n	800c0f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2220      	movs	r2, #32
 800c128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c138:	bf00      	nop
 800c13a:	3754      	adds	r7, #84	; 0x54
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr
 800c144:	effffffe 	.word	0xeffffffe

0800c148 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c154:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2200      	movs	r2, #0
 800c162:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	f7ff f854 	bl	800b214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c16c:	bf00      	nop
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b088      	sub	sp, #32
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	e853 3f00 	ldrex	r3, [r3]
 800c188:	60bb      	str	r3, [r7, #8]
   return(result);
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c190:	61fb      	str	r3, [r7, #28]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	61bb      	str	r3, [r7, #24]
 800c19c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19e:	6979      	ldr	r1, [r7, #20]
 800c1a0:	69ba      	ldr	r2, [r7, #24]
 800c1a2:	e841 2300 	strex	r3, r2, [r1]
 800c1a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1e6      	bne.n	800c17c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7ff f81f 	bl	800b200 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1c2:	bf00      	nop
 800c1c4:	3720      	adds	r7, #32
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c1d2:	bf00      	nop
 800c1d4:	370c      	adds	r7, #12
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c1fa:	bf00      	nop
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c206:	b480      	push	{r7}
 800c208:	b085      	sub	sp, #20
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c214:	2b01      	cmp	r3, #1
 800c216:	d101      	bne.n	800c21c <HAL_UARTEx_DisableFifoMode+0x16>
 800c218:	2302      	movs	r3, #2
 800c21a:	e027      	b.n	800c26c <HAL_UARTEx_DisableFifoMode+0x66>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2224      	movs	r2, #36	; 0x24
 800c228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f022 0201 	bic.w	r2, r2, #1
 800c242:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c24a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2220      	movs	r2, #32
 800c25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3714      	adds	r7, #20
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d101      	bne.n	800c290 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c28c:	2302      	movs	r3, #2
 800c28e:	e02d      	b.n	800c2ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2224      	movs	r2, #36	; 0x24
 800c29c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f022 0201 	bic.w	r2, r2, #1
 800c2b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	683a      	ldr	r2, [r7, #0]
 800c2c8:	430a      	orrs	r2, r1
 800c2ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 f84f 	bl	800c370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2220      	movs	r2, #32
 800c2de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c304:	2b01      	cmp	r3, #1
 800c306:	d101      	bne.n	800c30c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c308:	2302      	movs	r3, #2
 800c30a:	e02d      	b.n	800c368 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2224      	movs	r2, #36	; 0x24
 800c318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f022 0201 	bic.w	r2, r2, #1
 800c332:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	430a      	orrs	r2, r1
 800c346:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 f811 	bl	800c370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2220      	movs	r2, #32
 800c35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d108      	bne.n	800c392 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c390:	e031      	b.n	800c3f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c392:	2310      	movs	r3, #16
 800c394:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c396:	2310      	movs	r3, #16
 800c398:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	0e5b      	lsrs	r3, r3, #25
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	f003 0307 	and.w	r3, r3, #7
 800c3a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	0f5b      	lsrs	r3, r3, #29
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	f003 0307 	and.w	r3, r3, #7
 800c3b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	7b3a      	ldrb	r2, [r7, #12]
 800c3be:	4911      	ldr	r1, [pc, #68]	; (800c404 <UARTEx_SetNbDataToProcess+0x94>)
 800c3c0:	5c8a      	ldrb	r2, [r1, r2]
 800c3c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c3c6:	7b3a      	ldrb	r2, [r7, #12]
 800c3c8:	490f      	ldr	r1, [pc, #60]	; (800c408 <UARTEx_SetNbDataToProcess+0x98>)
 800c3ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3d0:	b29a      	uxth	r2, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3d8:	7bfb      	ldrb	r3, [r7, #15]
 800c3da:	7b7a      	ldrb	r2, [r7, #13]
 800c3dc:	4909      	ldr	r1, [pc, #36]	; (800c404 <UARTEx_SetNbDataToProcess+0x94>)
 800c3de:	5c8a      	ldrb	r2, [r1, r2]
 800c3e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c3e4:	7b7a      	ldrb	r2, [r7, #13]
 800c3e6:	4908      	ldr	r1, [pc, #32]	; (800c408 <UARTEx_SetNbDataToProcess+0x98>)
 800c3e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c3f6:	bf00      	nop
 800c3f8:	3714      	adds	r7, #20
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	0800df60 	.word	0x0800df60
 800c408:	0800df68 	.word	0x0800df68

0800c40c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c40c:	b084      	sub	sp, #16
 800c40e:	b580      	push	{r7, lr}
 800c410:	b084      	sub	sp, #16
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	f107 001c 	add.w	r0, r7, #28
 800c41a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	2b01      	cmp	r3, #1
 800c422:	d120      	bne.n	800c466 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c428:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	68da      	ldr	r2, [r3, #12]
 800c434:	4b2a      	ldr	r3, [pc, #168]	; (800c4e0 <USB_CoreInit+0xd4>)
 800c436:	4013      	ands	r3, r2
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d105      	bne.n	800c45a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f914 	bl	800c688 <USB_CoreReset>
 800c460:	4603      	mov	r3, r0
 800c462:	73fb      	strb	r3, [r7, #15]
 800c464:	e01a      	b.n	800c49c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f908 	bl	800c688 <USB_CoreReset>
 800c478:	4603      	mov	r3, r0
 800c47a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d106      	bne.n	800c490 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c486:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	639a      	str	r2, [r3, #56]	; 0x38
 800c48e:	e005      	b.n	800c49c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d116      	bne.n	800c4d0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4a6:	b29a      	uxth	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c4b0:	4b0c      	ldr	r3, [pc, #48]	; (800c4e4 <USB_CoreInit+0xd8>)
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f043 0206 	orr.w	r2, r3, #6
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	f043 0220 	orr.w	r2, r3, #32
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4dc:	b004      	add	sp, #16
 800c4de:	4770      	bx	lr
 800c4e0:	ffbdffbf 	.word	0xffbdffbf
 800c4e4:	03ee0000 	.word	0x03ee0000

0800c4e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	f023 0201 	bic.w	r2, r3, #1
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	370c      	adds	r7, #12
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b084      	sub	sp, #16
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	460b      	mov	r3, r1
 800c514:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c516:	2300      	movs	r3, #0
 800c518:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c526:	78fb      	ldrb	r3, [r7, #3]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d115      	bne.n	800c558 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c538:	2001      	movs	r0, #1
 800c53a:	f7f9 fbff 	bl	8005d3c <HAL_Delay>
      ms++;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	3301      	adds	r3, #1
 800c542:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 f891 	bl	800c66c <USB_GetMode>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d01e      	beq.n	800c58e <USB_SetCurrentMode+0x84>
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2b31      	cmp	r3, #49	; 0x31
 800c554:	d9f0      	bls.n	800c538 <USB_SetCurrentMode+0x2e>
 800c556:	e01a      	b.n	800c58e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c558:	78fb      	ldrb	r3, [r7, #3]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d115      	bne.n	800c58a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c56a:	2001      	movs	r0, #1
 800c56c:	f7f9 fbe6 	bl	8005d3c <HAL_Delay>
      ms++;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3301      	adds	r3, #1
 800c574:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f878 	bl	800c66c <USB_GetMode>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d005      	beq.n	800c58e <USB_SetCurrentMode+0x84>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2b31      	cmp	r3, #49	; 0x31
 800c586:	d9f0      	bls.n	800c56a <USB_SetCurrentMode+0x60>
 800c588:	e001      	b.n	800c58e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	e005      	b.n	800c59a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2b32      	cmp	r3, #50	; 0x32
 800c592:	d101      	bne.n	800c598 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	e000      	b.n	800c59a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
	...

0800c5a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	4a13      	ldr	r2, [pc, #76]	; (800c608 <USB_FlushTxFifo+0x64>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d901      	bls.n	800c5c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	e01b      	b.n	800c5fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	daf2      	bge.n	800c5b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	019b      	lsls	r3, r3, #6
 800c5d4:	f043 0220 	orr.w	r2, r3, #32
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	4a08      	ldr	r2, [pc, #32]	; (800c608 <USB_FlushTxFifo+0x64>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d901      	bls.n	800c5ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c5ea:	2303      	movs	r3, #3
 800c5ec:	e006      	b.n	800c5fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	f003 0320 	and.w	r3, r3, #32
 800c5f6:	2b20      	cmp	r3, #32
 800c5f8:	d0f0      	beq.n	800c5dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	00030d40 	.word	0x00030d40

0800c60c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c614:	2300      	movs	r3, #0
 800c616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	3301      	adds	r3, #1
 800c61c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	4a11      	ldr	r2, [pc, #68]	; (800c668 <USB_FlushRxFifo+0x5c>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d901      	bls.n	800c62a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c626:	2303      	movs	r3, #3
 800c628:	e018      	b.n	800c65c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	daf2      	bge.n	800c618 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c632:	2300      	movs	r3, #0
 800c634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2210      	movs	r2, #16
 800c63a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	3301      	adds	r3, #1
 800c640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	4a08      	ldr	r2, [pc, #32]	; (800c668 <USB_FlushRxFifo+0x5c>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d901      	bls.n	800c64e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c64a:	2303      	movs	r3, #3
 800c64c:	e006      	b.n	800c65c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	f003 0310 	and.w	r3, r3, #16
 800c656:	2b10      	cmp	r3, #16
 800c658:	d0f0      	beq.n	800c63c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr
 800c668:	00030d40 	.word	0x00030d40

0800c66c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	f003 0301 	and.w	r3, r3, #1
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c690:	2300      	movs	r3, #0
 800c692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	3301      	adds	r3, #1
 800c698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	4a13      	ldr	r2, [pc, #76]	; (800c6ec <USB_CoreReset+0x64>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d901      	bls.n	800c6a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	e01b      	b.n	800c6de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	daf2      	bge.n	800c694 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	f043 0201 	orr.w	r2, r3, #1
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	4a09      	ldr	r2, [pc, #36]	; (800c6ec <USB_CoreReset+0x64>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d901      	bls.n	800c6d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c6cc:	2303      	movs	r3, #3
 800c6ce:	e006      	b.n	800c6de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	691b      	ldr	r3, [r3, #16]
 800c6d4:	f003 0301 	and.w	r3, r3, #1
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d0f0      	beq.n	800c6be <USB_CoreReset+0x36>

  return HAL_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	00030d40 	.word	0x00030d40

0800c6f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6f0:	b084      	sub	sp, #16
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b086      	sub	sp, #24
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c6fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c702:	2300      	movs	r3, #0
 800c704:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c710:	461a      	mov	r2, r3
 800c712:	2300      	movs	r3, #0
 800c714:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c726:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c736:	2b00      	cmp	r3, #0
 800c738:	d018      	beq.n	800c76c <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d10a      	bne.n	800c756 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c74e:	f043 0304 	orr.w	r3, r3, #4
 800c752:	6013      	str	r3, [r2, #0]
 800c754:	e014      	b.n	800c780 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	68fa      	ldr	r2, [r7, #12]
 800c760:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c764:	f023 0304 	bic.w	r3, r3, #4
 800c768:	6013      	str	r3, [r2, #0]
 800c76a:	e009      	b.n	800c780 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c77a:	f023 0304 	bic.w	r3, r3, #4
 800c77e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c780:	2110      	movs	r1, #16
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7ff ff0e 	bl	800c5a4 <USB_FlushTxFifo>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7ff ff3a 	bl	800c60c <USB_FlushRxFifo>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	613b      	str	r3, [r7, #16]
 800c7a6:	e015      	b.n	800c7d4 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	015a      	lsls	r2, r3, #5
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	015a      	lsls	r2, r3, #5
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	613b      	str	r3, [r7, #16]
 800c7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d6:	693a      	ldr	r2, [r7, #16]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d3e5      	bcc.n	800c7a8 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00b      	beq.n	800c80e <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7fc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a13      	ldr	r2, [pc, #76]	; (800c850 <USB_HostInit+0x160>)
 800c802:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a13      	ldr	r2, [pc, #76]	; (800c854 <USB_HostInit+0x164>)
 800c808:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c80c:	e009      	b.n	800c822 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2280      	movs	r2, #128	; 0x80
 800c812:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a10      	ldr	r2, [pc, #64]	; (800c858 <USB_HostInit+0x168>)
 800c818:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4a0f      	ldr	r2, [pc, #60]	; (800c85c <USB_HostInit+0x16c>)
 800c81e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	2b00      	cmp	r3, #0
 800c826:	d105      	bne.n	800c834 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	699b      	ldr	r3, [r3, #24]
 800c82c:	f043 0210 	orr.w	r2, r3, #16
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	699a      	ldr	r2, [r3, #24]
 800c838:	4b09      	ldr	r3, [pc, #36]	; (800c860 <USB_HostInit+0x170>)
 800c83a:	4313      	orrs	r3, r2
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c840:	7dfb      	ldrb	r3, [r7, #23]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c84c:	b004      	add	sp, #16
 800c84e:	4770      	bx	lr
 800c850:	01000200 	.word	0x01000200
 800c854:	00e00300 	.word	0x00e00300
 800c858:	00600080 	.word	0x00600080
 800c85c:	004000e0 	.word	0x004000e0
 800c860:	a3200008 	.word	0xa3200008

0800c864 <__errno>:
 800c864:	4b01      	ldr	r3, [pc, #4]	; (800c86c <__errno+0x8>)
 800c866:	6818      	ldr	r0, [r3, #0]
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	24000020 	.word	0x24000020

0800c870 <__libc_init_array>:
 800c870:	b570      	push	{r4, r5, r6, lr}
 800c872:	4d0d      	ldr	r5, [pc, #52]	; (800c8a8 <__libc_init_array+0x38>)
 800c874:	4c0d      	ldr	r4, [pc, #52]	; (800c8ac <__libc_init_array+0x3c>)
 800c876:	1b64      	subs	r4, r4, r5
 800c878:	10a4      	asrs	r4, r4, #2
 800c87a:	2600      	movs	r6, #0
 800c87c:	42a6      	cmp	r6, r4
 800c87e:	d109      	bne.n	800c894 <__libc_init_array+0x24>
 800c880:	4d0b      	ldr	r5, [pc, #44]	; (800c8b0 <__libc_init_array+0x40>)
 800c882:	4c0c      	ldr	r4, [pc, #48]	; (800c8b4 <__libc_init_array+0x44>)
 800c884:	f001 fa40 	bl	800dd08 <_init>
 800c888:	1b64      	subs	r4, r4, r5
 800c88a:	10a4      	asrs	r4, r4, #2
 800c88c:	2600      	movs	r6, #0
 800c88e:	42a6      	cmp	r6, r4
 800c890:	d105      	bne.n	800c89e <__libc_init_array+0x2e>
 800c892:	bd70      	pop	{r4, r5, r6, pc}
 800c894:	f855 3b04 	ldr.w	r3, [r5], #4
 800c898:	4798      	blx	r3
 800c89a:	3601      	adds	r6, #1
 800c89c:	e7ee      	b.n	800c87c <__libc_init_array+0xc>
 800c89e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8a2:	4798      	blx	r3
 800c8a4:	3601      	adds	r6, #1
 800c8a6:	e7f2      	b.n	800c88e <__libc_init_array+0x1e>
 800c8a8:	0800e0c0 	.word	0x0800e0c0
 800c8ac:	0800e0c0 	.word	0x0800e0c0
 800c8b0:	0800e0c0 	.word	0x0800e0c0
 800c8b4:	0800e0c4 	.word	0x0800e0c4

0800c8b8 <memcmp>:
 800c8b8:	b510      	push	{r4, lr}
 800c8ba:	3901      	subs	r1, #1
 800c8bc:	4402      	add	r2, r0
 800c8be:	4290      	cmp	r0, r2
 800c8c0:	d101      	bne.n	800c8c6 <memcmp+0xe>
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	e005      	b.n	800c8d2 <memcmp+0x1a>
 800c8c6:	7803      	ldrb	r3, [r0, #0]
 800c8c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c8cc:	42a3      	cmp	r3, r4
 800c8ce:	d001      	beq.n	800c8d4 <memcmp+0x1c>
 800c8d0:	1b18      	subs	r0, r3, r4
 800c8d2:	bd10      	pop	{r4, pc}
 800c8d4:	3001      	adds	r0, #1
 800c8d6:	e7f2      	b.n	800c8be <memcmp+0x6>

0800c8d8 <memcpy>:
 800c8d8:	440a      	add	r2, r1
 800c8da:	4291      	cmp	r1, r2
 800c8dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8e0:	d100      	bne.n	800c8e4 <memcpy+0xc>
 800c8e2:	4770      	bx	lr
 800c8e4:	b510      	push	{r4, lr}
 800c8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8ee:	4291      	cmp	r1, r2
 800c8f0:	d1f9      	bne.n	800c8e6 <memcpy+0xe>
 800c8f2:	bd10      	pop	{r4, pc}

0800c8f4 <memset>:
 800c8f4:	4402      	add	r2, r0
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d100      	bne.n	800c8fe <memset+0xa>
 800c8fc:	4770      	bx	lr
 800c8fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c902:	e7f9      	b.n	800c8f8 <memset+0x4>

0800c904 <rand>:
 800c904:	4b16      	ldr	r3, [pc, #88]	; (800c960 <rand+0x5c>)
 800c906:	b510      	push	{r4, lr}
 800c908:	681c      	ldr	r4, [r3, #0]
 800c90a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c90c:	b9b3      	cbnz	r3, 800c93c <rand+0x38>
 800c90e:	2018      	movs	r0, #24
 800c910:	f000 f886 	bl	800ca20 <malloc>
 800c914:	63a0      	str	r0, [r4, #56]	; 0x38
 800c916:	b928      	cbnz	r0, 800c924 <rand+0x20>
 800c918:	4602      	mov	r2, r0
 800c91a:	4b12      	ldr	r3, [pc, #72]	; (800c964 <rand+0x60>)
 800c91c:	4812      	ldr	r0, [pc, #72]	; (800c968 <rand+0x64>)
 800c91e:	214e      	movs	r1, #78	; 0x4e
 800c920:	f000 f84e 	bl	800c9c0 <__assert_func>
 800c924:	4a11      	ldr	r2, [pc, #68]	; (800c96c <rand+0x68>)
 800c926:	4b12      	ldr	r3, [pc, #72]	; (800c970 <rand+0x6c>)
 800c928:	e9c0 2300 	strd	r2, r3, [r0]
 800c92c:	4b11      	ldr	r3, [pc, #68]	; (800c974 <rand+0x70>)
 800c92e:	6083      	str	r3, [r0, #8]
 800c930:	230b      	movs	r3, #11
 800c932:	8183      	strh	r3, [r0, #12]
 800c934:	2201      	movs	r2, #1
 800c936:	2300      	movs	r3, #0
 800c938:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c93c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800c93e:	4a0e      	ldr	r2, [pc, #56]	; (800c978 <rand+0x74>)
 800c940:	6920      	ldr	r0, [r4, #16]
 800c942:	6963      	ldr	r3, [r4, #20]
 800c944:	490d      	ldr	r1, [pc, #52]	; (800c97c <rand+0x78>)
 800c946:	4342      	muls	r2, r0
 800c948:	fb01 2203 	mla	r2, r1, r3, r2
 800c94c:	fba0 0101 	umull	r0, r1, r0, r1
 800c950:	1c43      	adds	r3, r0, #1
 800c952:	eb42 0001 	adc.w	r0, r2, r1
 800c956:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800c95a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c95e:	bd10      	pop	{r4, pc}
 800c960:	24000020 	.word	0x24000020
 800c964:	0800df74 	.word	0x0800df74
 800c968:	0800df8b 	.word	0x0800df8b
 800c96c:	abcd330e 	.word	0xabcd330e
 800c970:	e66d1234 	.word	0xe66d1234
 800c974:	0005deec 	.word	0x0005deec
 800c978:	5851f42d 	.word	0x5851f42d
 800c97c:	4c957f2d 	.word	0x4c957f2d

0800c980 <siprintf>:
 800c980:	b40e      	push	{r1, r2, r3}
 800c982:	b500      	push	{lr}
 800c984:	b09c      	sub	sp, #112	; 0x70
 800c986:	ab1d      	add	r3, sp, #116	; 0x74
 800c988:	9002      	str	r0, [sp, #8]
 800c98a:	9006      	str	r0, [sp, #24]
 800c98c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c990:	4809      	ldr	r0, [pc, #36]	; (800c9b8 <siprintf+0x38>)
 800c992:	9107      	str	r1, [sp, #28]
 800c994:	9104      	str	r1, [sp, #16]
 800c996:	4909      	ldr	r1, [pc, #36]	; (800c9bc <siprintf+0x3c>)
 800c998:	f853 2b04 	ldr.w	r2, [r3], #4
 800c99c:	9105      	str	r1, [sp, #20]
 800c99e:	6800      	ldr	r0, [r0, #0]
 800c9a0:	9301      	str	r3, [sp, #4]
 800c9a2:	a902      	add	r1, sp, #8
 800c9a4:	f000 f980 	bl	800cca8 <_svfiprintf_r>
 800c9a8:	9b02      	ldr	r3, [sp, #8]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	701a      	strb	r2, [r3, #0]
 800c9ae:	b01c      	add	sp, #112	; 0x70
 800c9b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9b4:	b003      	add	sp, #12
 800c9b6:	4770      	bx	lr
 800c9b8:	24000020 	.word	0x24000020
 800c9bc:	ffff0208 	.word	0xffff0208

0800c9c0 <__assert_func>:
 800c9c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9c2:	4614      	mov	r4, r2
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	4b09      	ldr	r3, [pc, #36]	; (800c9ec <__assert_func+0x2c>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	68d8      	ldr	r0, [r3, #12]
 800c9ce:	b14c      	cbz	r4, 800c9e4 <__assert_func+0x24>
 800c9d0:	4b07      	ldr	r3, [pc, #28]	; (800c9f0 <__assert_func+0x30>)
 800c9d2:	9100      	str	r1, [sp, #0]
 800c9d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9d8:	4906      	ldr	r1, [pc, #24]	; (800c9f4 <__assert_func+0x34>)
 800c9da:	462b      	mov	r3, r5
 800c9dc:	f000 f80e 	bl	800c9fc <fiprintf>
 800c9e0:	f000 fe20 	bl	800d624 <abort>
 800c9e4:	4b04      	ldr	r3, [pc, #16]	; (800c9f8 <__assert_func+0x38>)
 800c9e6:	461c      	mov	r4, r3
 800c9e8:	e7f3      	b.n	800c9d2 <__assert_func+0x12>
 800c9ea:	bf00      	nop
 800c9ec:	24000020 	.word	0x24000020
 800c9f0:	0800dfe6 	.word	0x0800dfe6
 800c9f4:	0800dff3 	.word	0x0800dff3
 800c9f8:	0800e021 	.word	0x0800e021

0800c9fc <fiprintf>:
 800c9fc:	b40e      	push	{r1, r2, r3}
 800c9fe:	b503      	push	{r0, r1, lr}
 800ca00:	4601      	mov	r1, r0
 800ca02:	ab03      	add	r3, sp, #12
 800ca04:	4805      	ldr	r0, [pc, #20]	; (800ca1c <fiprintf+0x20>)
 800ca06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca0a:	6800      	ldr	r0, [r0, #0]
 800ca0c:	9301      	str	r3, [sp, #4]
 800ca0e:	f000 fa75 	bl	800cefc <_vfiprintf_r>
 800ca12:	b002      	add	sp, #8
 800ca14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca18:	b003      	add	sp, #12
 800ca1a:	4770      	bx	lr
 800ca1c:	24000020 	.word	0x24000020

0800ca20 <malloc>:
 800ca20:	4b02      	ldr	r3, [pc, #8]	; (800ca2c <malloc+0xc>)
 800ca22:	4601      	mov	r1, r0
 800ca24:	6818      	ldr	r0, [r3, #0]
 800ca26:	f000 b86f 	b.w	800cb08 <_malloc_r>
 800ca2a:	bf00      	nop
 800ca2c:	24000020 	.word	0x24000020

0800ca30 <_free_r>:
 800ca30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca32:	2900      	cmp	r1, #0
 800ca34:	d044      	beq.n	800cac0 <_free_r+0x90>
 800ca36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca3a:	9001      	str	r0, [sp, #4]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f1a1 0404 	sub.w	r4, r1, #4
 800ca42:	bfb8      	it	lt
 800ca44:	18e4      	addlt	r4, r4, r3
 800ca46:	f001 f82f 	bl	800daa8 <__malloc_lock>
 800ca4a:	4a1e      	ldr	r2, [pc, #120]	; (800cac4 <_free_r+0x94>)
 800ca4c:	9801      	ldr	r0, [sp, #4]
 800ca4e:	6813      	ldr	r3, [r2, #0]
 800ca50:	b933      	cbnz	r3, 800ca60 <_free_r+0x30>
 800ca52:	6063      	str	r3, [r4, #4]
 800ca54:	6014      	str	r4, [r2, #0]
 800ca56:	b003      	add	sp, #12
 800ca58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca5c:	f001 b82a 	b.w	800dab4 <__malloc_unlock>
 800ca60:	42a3      	cmp	r3, r4
 800ca62:	d908      	bls.n	800ca76 <_free_r+0x46>
 800ca64:	6825      	ldr	r5, [r4, #0]
 800ca66:	1961      	adds	r1, r4, r5
 800ca68:	428b      	cmp	r3, r1
 800ca6a:	bf01      	itttt	eq
 800ca6c:	6819      	ldreq	r1, [r3, #0]
 800ca6e:	685b      	ldreq	r3, [r3, #4]
 800ca70:	1949      	addeq	r1, r1, r5
 800ca72:	6021      	streq	r1, [r4, #0]
 800ca74:	e7ed      	b.n	800ca52 <_free_r+0x22>
 800ca76:	461a      	mov	r2, r3
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	b10b      	cbz	r3, 800ca80 <_free_r+0x50>
 800ca7c:	42a3      	cmp	r3, r4
 800ca7e:	d9fa      	bls.n	800ca76 <_free_r+0x46>
 800ca80:	6811      	ldr	r1, [r2, #0]
 800ca82:	1855      	adds	r5, r2, r1
 800ca84:	42a5      	cmp	r5, r4
 800ca86:	d10b      	bne.n	800caa0 <_free_r+0x70>
 800ca88:	6824      	ldr	r4, [r4, #0]
 800ca8a:	4421      	add	r1, r4
 800ca8c:	1854      	adds	r4, r2, r1
 800ca8e:	42a3      	cmp	r3, r4
 800ca90:	6011      	str	r1, [r2, #0]
 800ca92:	d1e0      	bne.n	800ca56 <_free_r+0x26>
 800ca94:	681c      	ldr	r4, [r3, #0]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	6053      	str	r3, [r2, #4]
 800ca9a:	4421      	add	r1, r4
 800ca9c:	6011      	str	r1, [r2, #0]
 800ca9e:	e7da      	b.n	800ca56 <_free_r+0x26>
 800caa0:	d902      	bls.n	800caa8 <_free_r+0x78>
 800caa2:	230c      	movs	r3, #12
 800caa4:	6003      	str	r3, [r0, #0]
 800caa6:	e7d6      	b.n	800ca56 <_free_r+0x26>
 800caa8:	6825      	ldr	r5, [r4, #0]
 800caaa:	1961      	adds	r1, r4, r5
 800caac:	428b      	cmp	r3, r1
 800caae:	bf04      	itt	eq
 800cab0:	6819      	ldreq	r1, [r3, #0]
 800cab2:	685b      	ldreq	r3, [r3, #4]
 800cab4:	6063      	str	r3, [r4, #4]
 800cab6:	bf04      	itt	eq
 800cab8:	1949      	addeq	r1, r1, r5
 800caba:	6021      	streq	r1, [r4, #0]
 800cabc:	6054      	str	r4, [r2, #4]
 800cabe:	e7ca      	b.n	800ca56 <_free_r+0x26>
 800cac0:	b003      	add	sp, #12
 800cac2:	bd30      	pop	{r4, r5, pc}
 800cac4:	2407f1fc 	.word	0x2407f1fc

0800cac8 <sbrk_aligned>:
 800cac8:	b570      	push	{r4, r5, r6, lr}
 800caca:	4e0e      	ldr	r6, [pc, #56]	; (800cb04 <sbrk_aligned+0x3c>)
 800cacc:	460c      	mov	r4, r1
 800cace:	6831      	ldr	r1, [r6, #0]
 800cad0:	4605      	mov	r5, r0
 800cad2:	b911      	cbnz	r1, 800cada <sbrk_aligned+0x12>
 800cad4:	f000 fcd6 	bl	800d484 <_sbrk_r>
 800cad8:	6030      	str	r0, [r6, #0]
 800cada:	4621      	mov	r1, r4
 800cadc:	4628      	mov	r0, r5
 800cade:	f000 fcd1 	bl	800d484 <_sbrk_r>
 800cae2:	1c43      	adds	r3, r0, #1
 800cae4:	d00a      	beq.n	800cafc <sbrk_aligned+0x34>
 800cae6:	1cc4      	adds	r4, r0, #3
 800cae8:	f024 0403 	bic.w	r4, r4, #3
 800caec:	42a0      	cmp	r0, r4
 800caee:	d007      	beq.n	800cb00 <sbrk_aligned+0x38>
 800caf0:	1a21      	subs	r1, r4, r0
 800caf2:	4628      	mov	r0, r5
 800caf4:	f000 fcc6 	bl	800d484 <_sbrk_r>
 800caf8:	3001      	adds	r0, #1
 800cafa:	d101      	bne.n	800cb00 <sbrk_aligned+0x38>
 800cafc:	f04f 34ff 	mov.w	r4, #4294967295
 800cb00:	4620      	mov	r0, r4
 800cb02:	bd70      	pop	{r4, r5, r6, pc}
 800cb04:	2407f200 	.word	0x2407f200

0800cb08 <_malloc_r>:
 800cb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0c:	1ccd      	adds	r5, r1, #3
 800cb0e:	f025 0503 	bic.w	r5, r5, #3
 800cb12:	3508      	adds	r5, #8
 800cb14:	2d0c      	cmp	r5, #12
 800cb16:	bf38      	it	cc
 800cb18:	250c      	movcc	r5, #12
 800cb1a:	2d00      	cmp	r5, #0
 800cb1c:	4607      	mov	r7, r0
 800cb1e:	db01      	blt.n	800cb24 <_malloc_r+0x1c>
 800cb20:	42a9      	cmp	r1, r5
 800cb22:	d905      	bls.n	800cb30 <_malloc_r+0x28>
 800cb24:	230c      	movs	r3, #12
 800cb26:	603b      	str	r3, [r7, #0]
 800cb28:	2600      	movs	r6, #0
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb30:	4e2e      	ldr	r6, [pc, #184]	; (800cbec <_malloc_r+0xe4>)
 800cb32:	f000 ffb9 	bl	800daa8 <__malloc_lock>
 800cb36:	6833      	ldr	r3, [r6, #0]
 800cb38:	461c      	mov	r4, r3
 800cb3a:	bb34      	cbnz	r4, 800cb8a <_malloc_r+0x82>
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	4638      	mov	r0, r7
 800cb40:	f7ff ffc2 	bl	800cac8 <sbrk_aligned>
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	4604      	mov	r4, r0
 800cb48:	d14d      	bne.n	800cbe6 <_malloc_r+0xde>
 800cb4a:	6834      	ldr	r4, [r6, #0]
 800cb4c:	4626      	mov	r6, r4
 800cb4e:	2e00      	cmp	r6, #0
 800cb50:	d140      	bne.n	800cbd4 <_malloc_r+0xcc>
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	4631      	mov	r1, r6
 800cb56:	4638      	mov	r0, r7
 800cb58:	eb04 0803 	add.w	r8, r4, r3
 800cb5c:	f000 fc92 	bl	800d484 <_sbrk_r>
 800cb60:	4580      	cmp	r8, r0
 800cb62:	d13a      	bne.n	800cbda <_malloc_r+0xd2>
 800cb64:	6821      	ldr	r1, [r4, #0]
 800cb66:	3503      	adds	r5, #3
 800cb68:	1a6d      	subs	r5, r5, r1
 800cb6a:	f025 0503 	bic.w	r5, r5, #3
 800cb6e:	3508      	adds	r5, #8
 800cb70:	2d0c      	cmp	r5, #12
 800cb72:	bf38      	it	cc
 800cb74:	250c      	movcc	r5, #12
 800cb76:	4629      	mov	r1, r5
 800cb78:	4638      	mov	r0, r7
 800cb7a:	f7ff ffa5 	bl	800cac8 <sbrk_aligned>
 800cb7e:	3001      	adds	r0, #1
 800cb80:	d02b      	beq.n	800cbda <_malloc_r+0xd2>
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	442b      	add	r3, r5
 800cb86:	6023      	str	r3, [r4, #0]
 800cb88:	e00e      	b.n	800cba8 <_malloc_r+0xa0>
 800cb8a:	6822      	ldr	r2, [r4, #0]
 800cb8c:	1b52      	subs	r2, r2, r5
 800cb8e:	d41e      	bmi.n	800cbce <_malloc_r+0xc6>
 800cb90:	2a0b      	cmp	r2, #11
 800cb92:	d916      	bls.n	800cbc2 <_malloc_r+0xba>
 800cb94:	1961      	adds	r1, r4, r5
 800cb96:	42a3      	cmp	r3, r4
 800cb98:	6025      	str	r5, [r4, #0]
 800cb9a:	bf18      	it	ne
 800cb9c:	6059      	strne	r1, [r3, #4]
 800cb9e:	6863      	ldr	r3, [r4, #4]
 800cba0:	bf08      	it	eq
 800cba2:	6031      	streq	r1, [r6, #0]
 800cba4:	5162      	str	r2, [r4, r5]
 800cba6:	604b      	str	r3, [r1, #4]
 800cba8:	4638      	mov	r0, r7
 800cbaa:	f104 060b 	add.w	r6, r4, #11
 800cbae:	f000 ff81 	bl	800dab4 <__malloc_unlock>
 800cbb2:	f026 0607 	bic.w	r6, r6, #7
 800cbb6:	1d23      	adds	r3, r4, #4
 800cbb8:	1af2      	subs	r2, r6, r3
 800cbba:	d0b6      	beq.n	800cb2a <_malloc_r+0x22>
 800cbbc:	1b9b      	subs	r3, r3, r6
 800cbbe:	50a3      	str	r3, [r4, r2]
 800cbc0:	e7b3      	b.n	800cb2a <_malloc_r+0x22>
 800cbc2:	6862      	ldr	r2, [r4, #4]
 800cbc4:	42a3      	cmp	r3, r4
 800cbc6:	bf0c      	ite	eq
 800cbc8:	6032      	streq	r2, [r6, #0]
 800cbca:	605a      	strne	r2, [r3, #4]
 800cbcc:	e7ec      	b.n	800cba8 <_malloc_r+0xa0>
 800cbce:	4623      	mov	r3, r4
 800cbd0:	6864      	ldr	r4, [r4, #4]
 800cbd2:	e7b2      	b.n	800cb3a <_malloc_r+0x32>
 800cbd4:	4634      	mov	r4, r6
 800cbd6:	6876      	ldr	r6, [r6, #4]
 800cbd8:	e7b9      	b.n	800cb4e <_malloc_r+0x46>
 800cbda:	230c      	movs	r3, #12
 800cbdc:	603b      	str	r3, [r7, #0]
 800cbde:	4638      	mov	r0, r7
 800cbe0:	f000 ff68 	bl	800dab4 <__malloc_unlock>
 800cbe4:	e7a1      	b.n	800cb2a <_malloc_r+0x22>
 800cbe6:	6025      	str	r5, [r4, #0]
 800cbe8:	e7de      	b.n	800cba8 <_malloc_r+0xa0>
 800cbea:	bf00      	nop
 800cbec:	2407f1fc 	.word	0x2407f1fc

0800cbf0 <__ssputs_r>:
 800cbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf4:	688e      	ldr	r6, [r1, #8]
 800cbf6:	429e      	cmp	r6, r3
 800cbf8:	4682      	mov	sl, r0
 800cbfa:	460c      	mov	r4, r1
 800cbfc:	4690      	mov	r8, r2
 800cbfe:	461f      	mov	r7, r3
 800cc00:	d838      	bhi.n	800cc74 <__ssputs_r+0x84>
 800cc02:	898a      	ldrh	r2, [r1, #12]
 800cc04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc08:	d032      	beq.n	800cc70 <__ssputs_r+0x80>
 800cc0a:	6825      	ldr	r5, [r4, #0]
 800cc0c:	6909      	ldr	r1, [r1, #16]
 800cc0e:	eba5 0901 	sub.w	r9, r5, r1
 800cc12:	6965      	ldr	r5, [r4, #20]
 800cc14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	444b      	add	r3, r9
 800cc20:	106d      	asrs	r5, r5, #1
 800cc22:	429d      	cmp	r5, r3
 800cc24:	bf38      	it	cc
 800cc26:	461d      	movcc	r5, r3
 800cc28:	0553      	lsls	r3, r2, #21
 800cc2a:	d531      	bpl.n	800cc90 <__ssputs_r+0xa0>
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	f7ff ff6b 	bl	800cb08 <_malloc_r>
 800cc32:	4606      	mov	r6, r0
 800cc34:	b950      	cbnz	r0, 800cc4c <__ssputs_r+0x5c>
 800cc36:	230c      	movs	r3, #12
 800cc38:	f8ca 3000 	str.w	r3, [sl]
 800cc3c:	89a3      	ldrh	r3, [r4, #12]
 800cc3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc42:	81a3      	strh	r3, [r4, #12]
 800cc44:	f04f 30ff 	mov.w	r0, #4294967295
 800cc48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4c:	6921      	ldr	r1, [r4, #16]
 800cc4e:	464a      	mov	r2, r9
 800cc50:	f7ff fe42 	bl	800c8d8 <memcpy>
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc5e:	81a3      	strh	r3, [r4, #12]
 800cc60:	6126      	str	r6, [r4, #16]
 800cc62:	6165      	str	r5, [r4, #20]
 800cc64:	444e      	add	r6, r9
 800cc66:	eba5 0509 	sub.w	r5, r5, r9
 800cc6a:	6026      	str	r6, [r4, #0]
 800cc6c:	60a5      	str	r5, [r4, #8]
 800cc6e:	463e      	mov	r6, r7
 800cc70:	42be      	cmp	r6, r7
 800cc72:	d900      	bls.n	800cc76 <__ssputs_r+0x86>
 800cc74:	463e      	mov	r6, r7
 800cc76:	6820      	ldr	r0, [r4, #0]
 800cc78:	4632      	mov	r2, r6
 800cc7a:	4641      	mov	r1, r8
 800cc7c:	f000 fefa 	bl	800da74 <memmove>
 800cc80:	68a3      	ldr	r3, [r4, #8]
 800cc82:	1b9b      	subs	r3, r3, r6
 800cc84:	60a3      	str	r3, [r4, #8]
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	4433      	add	r3, r6
 800cc8a:	6023      	str	r3, [r4, #0]
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	e7db      	b.n	800cc48 <__ssputs_r+0x58>
 800cc90:	462a      	mov	r2, r5
 800cc92:	f000 ff15 	bl	800dac0 <_realloc_r>
 800cc96:	4606      	mov	r6, r0
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d1e1      	bne.n	800cc60 <__ssputs_r+0x70>
 800cc9c:	6921      	ldr	r1, [r4, #16]
 800cc9e:	4650      	mov	r0, sl
 800cca0:	f7ff fec6 	bl	800ca30 <_free_r>
 800cca4:	e7c7      	b.n	800cc36 <__ssputs_r+0x46>
	...

0800cca8 <_svfiprintf_r>:
 800cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccac:	4698      	mov	r8, r3
 800ccae:	898b      	ldrh	r3, [r1, #12]
 800ccb0:	061b      	lsls	r3, r3, #24
 800ccb2:	b09d      	sub	sp, #116	; 0x74
 800ccb4:	4607      	mov	r7, r0
 800ccb6:	460d      	mov	r5, r1
 800ccb8:	4614      	mov	r4, r2
 800ccba:	d50e      	bpl.n	800ccda <_svfiprintf_r+0x32>
 800ccbc:	690b      	ldr	r3, [r1, #16]
 800ccbe:	b963      	cbnz	r3, 800ccda <_svfiprintf_r+0x32>
 800ccc0:	2140      	movs	r1, #64	; 0x40
 800ccc2:	f7ff ff21 	bl	800cb08 <_malloc_r>
 800ccc6:	6028      	str	r0, [r5, #0]
 800ccc8:	6128      	str	r0, [r5, #16]
 800ccca:	b920      	cbnz	r0, 800ccd6 <_svfiprintf_r+0x2e>
 800cccc:	230c      	movs	r3, #12
 800ccce:	603b      	str	r3, [r7, #0]
 800ccd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd4:	e0d1      	b.n	800ce7a <_svfiprintf_r+0x1d2>
 800ccd6:	2340      	movs	r3, #64	; 0x40
 800ccd8:	616b      	str	r3, [r5, #20]
 800ccda:	2300      	movs	r3, #0
 800ccdc:	9309      	str	r3, [sp, #36]	; 0x24
 800ccde:	2320      	movs	r3, #32
 800cce0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cce4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cce8:	2330      	movs	r3, #48	; 0x30
 800ccea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce94 <_svfiprintf_r+0x1ec>
 800ccee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccf2:	f04f 0901 	mov.w	r9, #1
 800ccf6:	4623      	mov	r3, r4
 800ccf8:	469a      	mov	sl, r3
 800ccfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccfe:	b10a      	cbz	r2, 800cd04 <_svfiprintf_r+0x5c>
 800cd00:	2a25      	cmp	r2, #37	; 0x25
 800cd02:	d1f9      	bne.n	800ccf8 <_svfiprintf_r+0x50>
 800cd04:	ebba 0b04 	subs.w	fp, sl, r4
 800cd08:	d00b      	beq.n	800cd22 <_svfiprintf_r+0x7a>
 800cd0a:	465b      	mov	r3, fp
 800cd0c:	4622      	mov	r2, r4
 800cd0e:	4629      	mov	r1, r5
 800cd10:	4638      	mov	r0, r7
 800cd12:	f7ff ff6d 	bl	800cbf0 <__ssputs_r>
 800cd16:	3001      	adds	r0, #1
 800cd18:	f000 80aa 	beq.w	800ce70 <_svfiprintf_r+0x1c8>
 800cd1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd1e:	445a      	add	r2, fp
 800cd20:	9209      	str	r2, [sp, #36]	; 0x24
 800cd22:	f89a 3000 	ldrb.w	r3, [sl]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f000 80a2 	beq.w	800ce70 <_svfiprintf_r+0x1c8>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd36:	f10a 0a01 	add.w	sl, sl, #1
 800cd3a:	9304      	str	r3, [sp, #16]
 800cd3c:	9307      	str	r3, [sp, #28]
 800cd3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd42:	931a      	str	r3, [sp, #104]	; 0x68
 800cd44:	4654      	mov	r4, sl
 800cd46:	2205      	movs	r2, #5
 800cd48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4c:	4851      	ldr	r0, [pc, #324]	; (800ce94 <_svfiprintf_r+0x1ec>)
 800cd4e:	f7f3 fb1f 	bl	8000390 <memchr>
 800cd52:	9a04      	ldr	r2, [sp, #16]
 800cd54:	b9d8      	cbnz	r0, 800cd8e <_svfiprintf_r+0xe6>
 800cd56:	06d0      	lsls	r0, r2, #27
 800cd58:	bf44      	itt	mi
 800cd5a:	2320      	movmi	r3, #32
 800cd5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd60:	0711      	lsls	r1, r2, #28
 800cd62:	bf44      	itt	mi
 800cd64:	232b      	movmi	r3, #43	; 0x2b
 800cd66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd6a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd6e:	2b2a      	cmp	r3, #42	; 0x2a
 800cd70:	d015      	beq.n	800cd9e <_svfiprintf_r+0xf6>
 800cd72:	9a07      	ldr	r2, [sp, #28]
 800cd74:	4654      	mov	r4, sl
 800cd76:	2000      	movs	r0, #0
 800cd78:	f04f 0c0a 	mov.w	ip, #10
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd82:	3b30      	subs	r3, #48	; 0x30
 800cd84:	2b09      	cmp	r3, #9
 800cd86:	d94e      	bls.n	800ce26 <_svfiprintf_r+0x17e>
 800cd88:	b1b0      	cbz	r0, 800cdb8 <_svfiprintf_r+0x110>
 800cd8a:	9207      	str	r2, [sp, #28]
 800cd8c:	e014      	b.n	800cdb8 <_svfiprintf_r+0x110>
 800cd8e:	eba0 0308 	sub.w	r3, r0, r8
 800cd92:	fa09 f303 	lsl.w	r3, r9, r3
 800cd96:	4313      	orrs	r3, r2
 800cd98:	9304      	str	r3, [sp, #16]
 800cd9a:	46a2      	mov	sl, r4
 800cd9c:	e7d2      	b.n	800cd44 <_svfiprintf_r+0x9c>
 800cd9e:	9b03      	ldr	r3, [sp, #12]
 800cda0:	1d19      	adds	r1, r3, #4
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	9103      	str	r1, [sp, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	bfbb      	ittet	lt
 800cdaa:	425b      	neglt	r3, r3
 800cdac:	f042 0202 	orrlt.w	r2, r2, #2
 800cdb0:	9307      	strge	r3, [sp, #28]
 800cdb2:	9307      	strlt	r3, [sp, #28]
 800cdb4:	bfb8      	it	lt
 800cdb6:	9204      	strlt	r2, [sp, #16]
 800cdb8:	7823      	ldrb	r3, [r4, #0]
 800cdba:	2b2e      	cmp	r3, #46	; 0x2e
 800cdbc:	d10c      	bne.n	800cdd8 <_svfiprintf_r+0x130>
 800cdbe:	7863      	ldrb	r3, [r4, #1]
 800cdc0:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc2:	d135      	bne.n	800ce30 <_svfiprintf_r+0x188>
 800cdc4:	9b03      	ldr	r3, [sp, #12]
 800cdc6:	1d1a      	adds	r2, r3, #4
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	9203      	str	r2, [sp, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	bfb8      	it	lt
 800cdd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdd4:	3402      	adds	r4, #2
 800cdd6:	9305      	str	r3, [sp, #20]
 800cdd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cea4 <_svfiprintf_r+0x1fc>
 800cddc:	7821      	ldrb	r1, [r4, #0]
 800cdde:	2203      	movs	r2, #3
 800cde0:	4650      	mov	r0, sl
 800cde2:	f7f3 fad5 	bl	8000390 <memchr>
 800cde6:	b140      	cbz	r0, 800cdfa <_svfiprintf_r+0x152>
 800cde8:	2340      	movs	r3, #64	; 0x40
 800cdea:	eba0 000a 	sub.w	r0, r0, sl
 800cdee:	fa03 f000 	lsl.w	r0, r3, r0
 800cdf2:	9b04      	ldr	r3, [sp, #16]
 800cdf4:	4303      	orrs	r3, r0
 800cdf6:	3401      	adds	r4, #1
 800cdf8:	9304      	str	r3, [sp, #16]
 800cdfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdfe:	4826      	ldr	r0, [pc, #152]	; (800ce98 <_svfiprintf_r+0x1f0>)
 800ce00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce04:	2206      	movs	r2, #6
 800ce06:	f7f3 fac3 	bl	8000390 <memchr>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d038      	beq.n	800ce80 <_svfiprintf_r+0x1d8>
 800ce0e:	4b23      	ldr	r3, [pc, #140]	; (800ce9c <_svfiprintf_r+0x1f4>)
 800ce10:	bb1b      	cbnz	r3, 800ce5a <_svfiprintf_r+0x1b2>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	3307      	adds	r3, #7
 800ce16:	f023 0307 	bic.w	r3, r3, #7
 800ce1a:	3308      	adds	r3, #8
 800ce1c:	9303      	str	r3, [sp, #12]
 800ce1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce20:	4433      	add	r3, r6
 800ce22:	9309      	str	r3, [sp, #36]	; 0x24
 800ce24:	e767      	b.n	800ccf6 <_svfiprintf_r+0x4e>
 800ce26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	2001      	movs	r0, #1
 800ce2e:	e7a5      	b.n	800cd7c <_svfiprintf_r+0xd4>
 800ce30:	2300      	movs	r3, #0
 800ce32:	3401      	adds	r4, #1
 800ce34:	9305      	str	r3, [sp, #20]
 800ce36:	4619      	mov	r1, r3
 800ce38:	f04f 0c0a 	mov.w	ip, #10
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce42:	3a30      	subs	r2, #48	; 0x30
 800ce44:	2a09      	cmp	r2, #9
 800ce46:	d903      	bls.n	800ce50 <_svfiprintf_r+0x1a8>
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d0c5      	beq.n	800cdd8 <_svfiprintf_r+0x130>
 800ce4c:	9105      	str	r1, [sp, #20]
 800ce4e:	e7c3      	b.n	800cdd8 <_svfiprintf_r+0x130>
 800ce50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce54:	4604      	mov	r4, r0
 800ce56:	2301      	movs	r3, #1
 800ce58:	e7f0      	b.n	800ce3c <_svfiprintf_r+0x194>
 800ce5a:	ab03      	add	r3, sp, #12
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	462a      	mov	r2, r5
 800ce60:	4b0f      	ldr	r3, [pc, #60]	; (800cea0 <_svfiprintf_r+0x1f8>)
 800ce62:	a904      	add	r1, sp, #16
 800ce64:	4638      	mov	r0, r7
 800ce66:	f3af 8000 	nop.w
 800ce6a:	1c42      	adds	r2, r0, #1
 800ce6c:	4606      	mov	r6, r0
 800ce6e:	d1d6      	bne.n	800ce1e <_svfiprintf_r+0x176>
 800ce70:	89ab      	ldrh	r3, [r5, #12]
 800ce72:	065b      	lsls	r3, r3, #25
 800ce74:	f53f af2c 	bmi.w	800ccd0 <_svfiprintf_r+0x28>
 800ce78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce7a:	b01d      	add	sp, #116	; 0x74
 800ce7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce80:	ab03      	add	r3, sp, #12
 800ce82:	9300      	str	r3, [sp, #0]
 800ce84:	462a      	mov	r2, r5
 800ce86:	4b06      	ldr	r3, [pc, #24]	; (800cea0 <_svfiprintf_r+0x1f8>)
 800ce88:	a904      	add	r1, sp, #16
 800ce8a:	4638      	mov	r0, r7
 800ce8c:	f000 f9d4 	bl	800d238 <_printf_i>
 800ce90:	e7eb      	b.n	800ce6a <_svfiprintf_r+0x1c2>
 800ce92:	bf00      	nop
 800ce94:	0800e022 	.word	0x0800e022
 800ce98:	0800e02c 	.word	0x0800e02c
 800ce9c:	00000000 	.word	0x00000000
 800cea0:	0800cbf1 	.word	0x0800cbf1
 800cea4:	0800e028 	.word	0x0800e028

0800cea8 <__sfputc_r>:
 800cea8:	6893      	ldr	r3, [r2, #8]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	b410      	push	{r4}
 800ceb0:	6093      	str	r3, [r2, #8]
 800ceb2:	da08      	bge.n	800cec6 <__sfputc_r+0x1e>
 800ceb4:	6994      	ldr	r4, [r2, #24]
 800ceb6:	42a3      	cmp	r3, r4
 800ceb8:	db01      	blt.n	800cebe <__sfputc_r+0x16>
 800ceba:	290a      	cmp	r1, #10
 800cebc:	d103      	bne.n	800cec6 <__sfputc_r+0x1e>
 800cebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cec2:	f000 baef 	b.w	800d4a4 <__swbuf_r>
 800cec6:	6813      	ldr	r3, [r2, #0]
 800cec8:	1c58      	adds	r0, r3, #1
 800ceca:	6010      	str	r0, [r2, #0]
 800cecc:	7019      	strb	r1, [r3, #0]
 800cece:	4608      	mov	r0, r1
 800ced0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ced4:	4770      	bx	lr

0800ced6 <__sfputs_r>:
 800ced6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced8:	4606      	mov	r6, r0
 800ceda:	460f      	mov	r7, r1
 800cedc:	4614      	mov	r4, r2
 800cede:	18d5      	adds	r5, r2, r3
 800cee0:	42ac      	cmp	r4, r5
 800cee2:	d101      	bne.n	800cee8 <__sfputs_r+0x12>
 800cee4:	2000      	movs	r0, #0
 800cee6:	e007      	b.n	800cef8 <__sfputs_r+0x22>
 800cee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceec:	463a      	mov	r2, r7
 800ceee:	4630      	mov	r0, r6
 800cef0:	f7ff ffda 	bl	800cea8 <__sfputc_r>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d1f3      	bne.n	800cee0 <__sfputs_r+0xa>
 800cef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cefc <_vfiprintf_r>:
 800cefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf00:	460d      	mov	r5, r1
 800cf02:	b09d      	sub	sp, #116	; 0x74
 800cf04:	4614      	mov	r4, r2
 800cf06:	4698      	mov	r8, r3
 800cf08:	4606      	mov	r6, r0
 800cf0a:	b118      	cbz	r0, 800cf14 <_vfiprintf_r+0x18>
 800cf0c:	6983      	ldr	r3, [r0, #24]
 800cf0e:	b90b      	cbnz	r3, 800cf14 <_vfiprintf_r+0x18>
 800cf10:	f000 fcaa 	bl	800d868 <__sinit>
 800cf14:	4b89      	ldr	r3, [pc, #548]	; (800d13c <_vfiprintf_r+0x240>)
 800cf16:	429d      	cmp	r5, r3
 800cf18:	d11b      	bne.n	800cf52 <_vfiprintf_r+0x56>
 800cf1a:	6875      	ldr	r5, [r6, #4]
 800cf1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf1e:	07d9      	lsls	r1, r3, #31
 800cf20:	d405      	bmi.n	800cf2e <_vfiprintf_r+0x32>
 800cf22:	89ab      	ldrh	r3, [r5, #12]
 800cf24:	059a      	lsls	r2, r3, #22
 800cf26:	d402      	bmi.n	800cf2e <_vfiprintf_r+0x32>
 800cf28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf2a:	f000 fd3b 	bl	800d9a4 <__retarget_lock_acquire_recursive>
 800cf2e:	89ab      	ldrh	r3, [r5, #12]
 800cf30:	071b      	lsls	r3, r3, #28
 800cf32:	d501      	bpl.n	800cf38 <_vfiprintf_r+0x3c>
 800cf34:	692b      	ldr	r3, [r5, #16]
 800cf36:	b9eb      	cbnz	r3, 800cf74 <_vfiprintf_r+0x78>
 800cf38:	4629      	mov	r1, r5
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f000 fb04 	bl	800d548 <__swsetup_r>
 800cf40:	b1c0      	cbz	r0, 800cf74 <_vfiprintf_r+0x78>
 800cf42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf44:	07dc      	lsls	r4, r3, #31
 800cf46:	d50e      	bpl.n	800cf66 <_vfiprintf_r+0x6a>
 800cf48:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4c:	b01d      	add	sp, #116	; 0x74
 800cf4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf52:	4b7b      	ldr	r3, [pc, #492]	; (800d140 <_vfiprintf_r+0x244>)
 800cf54:	429d      	cmp	r5, r3
 800cf56:	d101      	bne.n	800cf5c <_vfiprintf_r+0x60>
 800cf58:	68b5      	ldr	r5, [r6, #8]
 800cf5a:	e7df      	b.n	800cf1c <_vfiprintf_r+0x20>
 800cf5c:	4b79      	ldr	r3, [pc, #484]	; (800d144 <_vfiprintf_r+0x248>)
 800cf5e:	429d      	cmp	r5, r3
 800cf60:	bf08      	it	eq
 800cf62:	68f5      	ldreq	r5, [r6, #12]
 800cf64:	e7da      	b.n	800cf1c <_vfiprintf_r+0x20>
 800cf66:	89ab      	ldrh	r3, [r5, #12]
 800cf68:	0598      	lsls	r0, r3, #22
 800cf6a:	d4ed      	bmi.n	800cf48 <_vfiprintf_r+0x4c>
 800cf6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf6e:	f000 fd1a 	bl	800d9a6 <__retarget_lock_release_recursive>
 800cf72:	e7e9      	b.n	800cf48 <_vfiprintf_r+0x4c>
 800cf74:	2300      	movs	r3, #0
 800cf76:	9309      	str	r3, [sp, #36]	; 0x24
 800cf78:	2320      	movs	r3, #32
 800cf7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf82:	2330      	movs	r3, #48	; 0x30
 800cf84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d148 <_vfiprintf_r+0x24c>
 800cf88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf8c:	f04f 0901 	mov.w	r9, #1
 800cf90:	4623      	mov	r3, r4
 800cf92:	469a      	mov	sl, r3
 800cf94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf98:	b10a      	cbz	r2, 800cf9e <_vfiprintf_r+0xa2>
 800cf9a:	2a25      	cmp	r2, #37	; 0x25
 800cf9c:	d1f9      	bne.n	800cf92 <_vfiprintf_r+0x96>
 800cf9e:	ebba 0b04 	subs.w	fp, sl, r4
 800cfa2:	d00b      	beq.n	800cfbc <_vfiprintf_r+0xc0>
 800cfa4:	465b      	mov	r3, fp
 800cfa6:	4622      	mov	r2, r4
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f7ff ff93 	bl	800ced6 <__sfputs_r>
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	f000 80aa 	beq.w	800d10a <_vfiprintf_r+0x20e>
 800cfb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfb8:	445a      	add	r2, fp
 800cfba:	9209      	str	r2, [sp, #36]	; 0x24
 800cfbc:	f89a 3000 	ldrb.w	r3, [sl]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f000 80a2 	beq.w	800d10a <_vfiprintf_r+0x20e>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cfcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfd0:	f10a 0a01 	add.w	sl, sl, #1
 800cfd4:	9304      	str	r3, [sp, #16]
 800cfd6:	9307      	str	r3, [sp, #28]
 800cfd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfdc:	931a      	str	r3, [sp, #104]	; 0x68
 800cfde:	4654      	mov	r4, sl
 800cfe0:	2205      	movs	r2, #5
 800cfe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe6:	4858      	ldr	r0, [pc, #352]	; (800d148 <_vfiprintf_r+0x24c>)
 800cfe8:	f7f3 f9d2 	bl	8000390 <memchr>
 800cfec:	9a04      	ldr	r2, [sp, #16]
 800cfee:	b9d8      	cbnz	r0, 800d028 <_vfiprintf_r+0x12c>
 800cff0:	06d1      	lsls	r1, r2, #27
 800cff2:	bf44      	itt	mi
 800cff4:	2320      	movmi	r3, #32
 800cff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cffa:	0713      	lsls	r3, r2, #28
 800cffc:	bf44      	itt	mi
 800cffe:	232b      	movmi	r3, #43	; 0x2b
 800d000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d004:	f89a 3000 	ldrb.w	r3, [sl]
 800d008:	2b2a      	cmp	r3, #42	; 0x2a
 800d00a:	d015      	beq.n	800d038 <_vfiprintf_r+0x13c>
 800d00c:	9a07      	ldr	r2, [sp, #28]
 800d00e:	4654      	mov	r4, sl
 800d010:	2000      	movs	r0, #0
 800d012:	f04f 0c0a 	mov.w	ip, #10
 800d016:	4621      	mov	r1, r4
 800d018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d01c:	3b30      	subs	r3, #48	; 0x30
 800d01e:	2b09      	cmp	r3, #9
 800d020:	d94e      	bls.n	800d0c0 <_vfiprintf_r+0x1c4>
 800d022:	b1b0      	cbz	r0, 800d052 <_vfiprintf_r+0x156>
 800d024:	9207      	str	r2, [sp, #28]
 800d026:	e014      	b.n	800d052 <_vfiprintf_r+0x156>
 800d028:	eba0 0308 	sub.w	r3, r0, r8
 800d02c:	fa09 f303 	lsl.w	r3, r9, r3
 800d030:	4313      	orrs	r3, r2
 800d032:	9304      	str	r3, [sp, #16]
 800d034:	46a2      	mov	sl, r4
 800d036:	e7d2      	b.n	800cfde <_vfiprintf_r+0xe2>
 800d038:	9b03      	ldr	r3, [sp, #12]
 800d03a:	1d19      	adds	r1, r3, #4
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	9103      	str	r1, [sp, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	bfbb      	ittet	lt
 800d044:	425b      	neglt	r3, r3
 800d046:	f042 0202 	orrlt.w	r2, r2, #2
 800d04a:	9307      	strge	r3, [sp, #28]
 800d04c:	9307      	strlt	r3, [sp, #28]
 800d04e:	bfb8      	it	lt
 800d050:	9204      	strlt	r2, [sp, #16]
 800d052:	7823      	ldrb	r3, [r4, #0]
 800d054:	2b2e      	cmp	r3, #46	; 0x2e
 800d056:	d10c      	bne.n	800d072 <_vfiprintf_r+0x176>
 800d058:	7863      	ldrb	r3, [r4, #1]
 800d05a:	2b2a      	cmp	r3, #42	; 0x2a
 800d05c:	d135      	bne.n	800d0ca <_vfiprintf_r+0x1ce>
 800d05e:	9b03      	ldr	r3, [sp, #12]
 800d060:	1d1a      	adds	r2, r3, #4
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	9203      	str	r2, [sp, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	bfb8      	it	lt
 800d06a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d06e:	3402      	adds	r4, #2
 800d070:	9305      	str	r3, [sp, #20]
 800d072:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d158 <_vfiprintf_r+0x25c>
 800d076:	7821      	ldrb	r1, [r4, #0]
 800d078:	2203      	movs	r2, #3
 800d07a:	4650      	mov	r0, sl
 800d07c:	f7f3 f988 	bl	8000390 <memchr>
 800d080:	b140      	cbz	r0, 800d094 <_vfiprintf_r+0x198>
 800d082:	2340      	movs	r3, #64	; 0x40
 800d084:	eba0 000a 	sub.w	r0, r0, sl
 800d088:	fa03 f000 	lsl.w	r0, r3, r0
 800d08c:	9b04      	ldr	r3, [sp, #16]
 800d08e:	4303      	orrs	r3, r0
 800d090:	3401      	adds	r4, #1
 800d092:	9304      	str	r3, [sp, #16]
 800d094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d098:	482c      	ldr	r0, [pc, #176]	; (800d14c <_vfiprintf_r+0x250>)
 800d09a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d09e:	2206      	movs	r2, #6
 800d0a0:	f7f3 f976 	bl	8000390 <memchr>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d03f      	beq.n	800d128 <_vfiprintf_r+0x22c>
 800d0a8:	4b29      	ldr	r3, [pc, #164]	; (800d150 <_vfiprintf_r+0x254>)
 800d0aa:	bb1b      	cbnz	r3, 800d0f4 <_vfiprintf_r+0x1f8>
 800d0ac:	9b03      	ldr	r3, [sp, #12]
 800d0ae:	3307      	adds	r3, #7
 800d0b0:	f023 0307 	bic.w	r3, r3, #7
 800d0b4:	3308      	adds	r3, #8
 800d0b6:	9303      	str	r3, [sp, #12]
 800d0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ba:	443b      	add	r3, r7
 800d0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d0be:	e767      	b.n	800cf90 <_vfiprintf_r+0x94>
 800d0c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0c4:	460c      	mov	r4, r1
 800d0c6:	2001      	movs	r0, #1
 800d0c8:	e7a5      	b.n	800d016 <_vfiprintf_r+0x11a>
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	3401      	adds	r4, #1
 800d0ce:	9305      	str	r3, [sp, #20]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	f04f 0c0a 	mov.w	ip, #10
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0dc:	3a30      	subs	r2, #48	; 0x30
 800d0de:	2a09      	cmp	r2, #9
 800d0e0:	d903      	bls.n	800d0ea <_vfiprintf_r+0x1ee>
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d0c5      	beq.n	800d072 <_vfiprintf_r+0x176>
 800d0e6:	9105      	str	r1, [sp, #20]
 800d0e8:	e7c3      	b.n	800d072 <_vfiprintf_r+0x176>
 800d0ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e7f0      	b.n	800d0d6 <_vfiprintf_r+0x1da>
 800d0f4:	ab03      	add	r3, sp, #12
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	462a      	mov	r2, r5
 800d0fa:	4b16      	ldr	r3, [pc, #88]	; (800d154 <_vfiprintf_r+0x258>)
 800d0fc:	a904      	add	r1, sp, #16
 800d0fe:	4630      	mov	r0, r6
 800d100:	f3af 8000 	nop.w
 800d104:	4607      	mov	r7, r0
 800d106:	1c78      	adds	r0, r7, #1
 800d108:	d1d6      	bne.n	800d0b8 <_vfiprintf_r+0x1bc>
 800d10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d10c:	07d9      	lsls	r1, r3, #31
 800d10e:	d405      	bmi.n	800d11c <_vfiprintf_r+0x220>
 800d110:	89ab      	ldrh	r3, [r5, #12]
 800d112:	059a      	lsls	r2, r3, #22
 800d114:	d402      	bmi.n	800d11c <_vfiprintf_r+0x220>
 800d116:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d118:	f000 fc45 	bl	800d9a6 <__retarget_lock_release_recursive>
 800d11c:	89ab      	ldrh	r3, [r5, #12]
 800d11e:	065b      	lsls	r3, r3, #25
 800d120:	f53f af12 	bmi.w	800cf48 <_vfiprintf_r+0x4c>
 800d124:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d126:	e711      	b.n	800cf4c <_vfiprintf_r+0x50>
 800d128:	ab03      	add	r3, sp, #12
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	462a      	mov	r2, r5
 800d12e:	4b09      	ldr	r3, [pc, #36]	; (800d154 <_vfiprintf_r+0x258>)
 800d130:	a904      	add	r1, sp, #16
 800d132:	4630      	mov	r0, r6
 800d134:	f000 f880 	bl	800d238 <_printf_i>
 800d138:	e7e4      	b.n	800d104 <_vfiprintf_r+0x208>
 800d13a:	bf00      	nop
 800d13c:	0800e078 	.word	0x0800e078
 800d140:	0800e098 	.word	0x0800e098
 800d144:	0800e058 	.word	0x0800e058
 800d148:	0800e022 	.word	0x0800e022
 800d14c:	0800e02c 	.word	0x0800e02c
 800d150:	00000000 	.word	0x00000000
 800d154:	0800ced7 	.word	0x0800ced7
 800d158:	0800e028 	.word	0x0800e028

0800d15c <_printf_common>:
 800d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d160:	4616      	mov	r6, r2
 800d162:	4699      	mov	r9, r3
 800d164:	688a      	ldr	r2, [r1, #8]
 800d166:	690b      	ldr	r3, [r1, #16]
 800d168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d16c:	4293      	cmp	r3, r2
 800d16e:	bfb8      	it	lt
 800d170:	4613      	movlt	r3, r2
 800d172:	6033      	str	r3, [r6, #0]
 800d174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d178:	4607      	mov	r7, r0
 800d17a:	460c      	mov	r4, r1
 800d17c:	b10a      	cbz	r2, 800d182 <_printf_common+0x26>
 800d17e:	3301      	adds	r3, #1
 800d180:	6033      	str	r3, [r6, #0]
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	0699      	lsls	r1, r3, #26
 800d186:	bf42      	ittt	mi
 800d188:	6833      	ldrmi	r3, [r6, #0]
 800d18a:	3302      	addmi	r3, #2
 800d18c:	6033      	strmi	r3, [r6, #0]
 800d18e:	6825      	ldr	r5, [r4, #0]
 800d190:	f015 0506 	ands.w	r5, r5, #6
 800d194:	d106      	bne.n	800d1a4 <_printf_common+0x48>
 800d196:	f104 0a19 	add.w	sl, r4, #25
 800d19a:	68e3      	ldr	r3, [r4, #12]
 800d19c:	6832      	ldr	r2, [r6, #0]
 800d19e:	1a9b      	subs	r3, r3, r2
 800d1a0:	42ab      	cmp	r3, r5
 800d1a2:	dc26      	bgt.n	800d1f2 <_printf_common+0x96>
 800d1a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1a8:	1e13      	subs	r3, r2, #0
 800d1aa:	6822      	ldr	r2, [r4, #0]
 800d1ac:	bf18      	it	ne
 800d1ae:	2301      	movne	r3, #1
 800d1b0:	0692      	lsls	r2, r2, #26
 800d1b2:	d42b      	bmi.n	800d20c <_printf_common+0xb0>
 800d1b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1b8:	4649      	mov	r1, r9
 800d1ba:	4638      	mov	r0, r7
 800d1bc:	47c0      	blx	r8
 800d1be:	3001      	adds	r0, #1
 800d1c0:	d01e      	beq.n	800d200 <_printf_common+0xa4>
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	68e5      	ldr	r5, [r4, #12]
 800d1c6:	6832      	ldr	r2, [r6, #0]
 800d1c8:	f003 0306 	and.w	r3, r3, #6
 800d1cc:	2b04      	cmp	r3, #4
 800d1ce:	bf08      	it	eq
 800d1d0:	1aad      	subeq	r5, r5, r2
 800d1d2:	68a3      	ldr	r3, [r4, #8]
 800d1d4:	6922      	ldr	r2, [r4, #16]
 800d1d6:	bf0c      	ite	eq
 800d1d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1dc:	2500      	movne	r5, #0
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	bfc4      	itt	gt
 800d1e2:	1a9b      	subgt	r3, r3, r2
 800d1e4:	18ed      	addgt	r5, r5, r3
 800d1e6:	2600      	movs	r6, #0
 800d1e8:	341a      	adds	r4, #26
 800d1ea:	42b5      	cmp	r5, r6
 800d1ec:	d11a      	bne.n	800d224 <_printf_common+0xc8>
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	e008      	b.n	800d204 <_printf_common+0xa8>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	4652      	mov	r2, sl
 800d1f6:	4649      	mov	r1, r9
 800d1f8:	4638      	mov	r0, r7
 800d1fa:	47c0      	blx	r8
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	d103      	bne.n	800d208 <_printf_common+0xac>
 800d200:	f04f 30ff 	mov.w	r0, #4294967295
 800d204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d208:	3501      	adds	r5, #1
 800d20a:	e7c6      	b.n	800d19a <_printf_common+0x3e>
 800d20c:	18e1      	adds	r1, r4, r3
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	2030      	movs	r0, #48	; 0x30
 800d212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d216:	4422      	add	r2, r4
 800d218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d21c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d220:	3302      	adds	r3, #2
 800d222:	e7c7      	b.n	800d1b4 <_printf_common+0x58>
 800d224:	2301      	movs	r3, #1
 800d226:	4622      	mov	r2, r4
 800d228:	4649      	mov	r1, r9
 800d22a:	4638      	mov	r0, r7
 800d22c:	47c0      	blx	r8
 800d22e:	3001      	adds	r0, #1
 800d230:	d0e6      	beq.n	800d200 <_printf_common+0xa4>
 800d232:	3601      	adds	r6, #1
 800d234:	e7d9      	b.n	800d1ea <_printf_common+0x8e>
	...

0800d238 <_printf_i>:
 800d238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d23c:	7e0f      	ldrb	r7, [r1, #24]
 800d23e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d240:	2f78      	cmp	r7, #120	; 0x78
 800d242:	4691      	mov	r9, r2
 800d244:	4680      	mov	r8, r0
 800d246:	460c      	mov	r4, r1
 800d248:	469a      	mov	sl, r3
 800d24a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d24e:	d807      	bhi.n	800d260 <_printf_i+0x28>
 800d250:	2f62      	cmp	r7, #98	; 0x62
 800d252:	d80a      	bhi.n	800d26a <_printf_i+0x32>
 800d254:	2f00      	cmp	r7, #0
 800d256:	f000 80d8 	beq.w	800d40a <_printf_i+0x1d2>
 800d25a:	2f58      	cmp	r7, #88	; 0x58
 800d25c:	f000 80a3 	beq.w	800d3a6 <_printf_i+0x16e>
 800d260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d268:	e03a      	b.n	800d2e0 <_printf_i+0xa8>
 800d26a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d26e:	2b15      	cmp	r3, #21
 800d270:	d8f6      	bhi.n	800d260 <_printf_i+0x28>
 800d272:	a101      	add	r1, pc, #4	; (adr r1, 800d278 <_printf_i+0x40>)
 800d274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d278:	0800d2d1 	.word	0x0800d2d1
 800d27c:	0800d2e5 	.word	0x0800d2e5
 800d280:	0800d261 	.word	0x0800d261
 800d284:	0800d261 	.word	0x0800d261
 800d288:	0800d261 	.word	0x0800d261
 800d28c:	0800d261 	.word	0x0800d261
 800d290:	0800d2e5 	.word	0x0800d2e5
 800d294:	0800d261 	.word	0x0800d261
 800d298:	0800d261 	.word	0x0800d261
 800d29c:	0800d261 	.word	0x0800d261
 800d2a0:	0800d261 	.word	0x0800d261
 800d2a4:	0800d3f1 	.word	0x0800d3f1
 800d2a8:	0800d315 	.word	0x0800d315
 800d2ac:	0800d3d3 	.word	0x0800d3d3
 800d2b0:	0800d261 	.word	0x0800d261
 800d2b4:	0800d261 	.word	0x0800d261
 800d2b8:	0800d413 	.word	0x0800d413
 800d2bc:	0800d261 	.word	0x0800d261
 800d2c0:	0800d315 	.word	0x0800d315
 800d2c4:	0800d261 	.word	0x0800d261
 800d2c8:	0800d261 	.word	0x0800d261
 800d2cc:	0800d3db 	.word	0x0800d3db
 800d2d0:	682b      	ldr	r3, [r5, #0]
 800d2d2:	1d1a      	adds	r2, r3, #4
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	602a      	str	r2, [r5, #0]
 800d2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e0a3      	b.n	800d42c <_printf_i+0x1f4>
 800d2e4:	6820      	ldr	r0, [r4, #0]
 800d2e6:	6829      	ldr	r1, [r5, #0]
 800d2e8:	0606      	lsls	r6, r0, #24
 800d2ea:	f101 0304 	add.w	r3, r1, #4
 800d2ee:	d50a      	bpl.n	800d306 <_printf_i+0xce>
 800d2f0:	680e      	ldr	r6, [r1, #0]
 800d2f2:	602b      	str	r3, [r5, #0]
 800d2f4:	2e00      	cmp	r6, #0
 800d2f6:	da03      	bge.n	800d300 <_printf_i+0xc8>
 800d2f8:	232d      	movs	r3, #45	; 0x2d
 800d2fa:	4276      	negs	r6, r6
 800d2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d300:	485e      	ldr	r0, [pc, #376]	; (800d47c <_printf_i+0x244>)
 800d302:	230a      	movs	r3, #10
 800d304:	e019      	b.n	800d33a <_printf_i+0x102>
 800d306:	680e      	ldr	r6, [r1, #0]
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d30e:	bf18      	it	ne
 800d310:	b236      	sxthne	r6, r6
 800d312:	e7ef      	b.n	800d2f4 <_printf_i+0xbc>
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	6820      	ldr	r0, [r4, #0]
 800d318:	1d19      	adds	r1, r3, #4
 800d31a:	6029      	str	r1, [r5, #0]
 800d31c:	0601      	lsls	r1, r0, #24
 800d31e:	d501      	bpl.n	800d324 <_printf_i+0xec>
 800d320:	681e      	ldr	r6, [r3, #0]
 800d322:	e002      	b.n	800d32a <_printf_i+0xf2>
 800d324:	0646      	lsls	r6, r0, #25
 800d326:	d5fb      	bpl.n	800d320 <_printf_i+0xe8>
 800d328:	881e      	ldrh	r6, [r3, #0]
 800d32a:	4854      	ldr	r0, [pc, #336]	; (800d47c <_printf_i+0x244>)
 800d32c:	2f6f      	cmp	r7, #111	; 0x6f
 800d32e:	bf0c      	ite	eq
 800d330:	2308      	moveq	r3, #8
 800d332:	230a      	movne	r3, #10
 800d334:	2100      	movs	r1, #0
 800d336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d33a:	6865      	ldr	r5, [r4, #4]
 800d33c:	60a5      	str	r5, [r4, #8]
 800d33e:	2d00      	cmp	r5, #0
 800d340:	bfa2      	ittt	ge
 800d342:	6821      	ldrge	r1, [r4, #0]
 800d344:	f021 0104 	bicge.w	r1, r1, #4
 800d348:	6021      	strge	r1, [r4, #0]
 800d34a:	b90e      	cbnz	r6, 800d350 <_printf_i+0x118>
 800d34c:	2d00      	cmp	r5, #0
 800d34e:	d04d      	beq.n	800d3ec <_printf_i+0x1b4>
 800d350:	4615      	mov	r5, r2
 800d352:	fbb6 f1f3 	udiv	r1, r6, r3
 800d356:	fb03 6711 	mls	r7, r3, r1, r6
 800d35a:	5dc7      	ldrb	r7, [r0, r7]
 800d35c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d360:	4637      	mov	r7, r6
 800d362:	42bb      	cmp	r3, r7
 800d364:	460e      	mov	r6, r1
 800d366:	d9f4      	bls.n	800d352 <_printf_i+0x11a>
 800d368:	2b08      	cmp	r3, #8
 800d36a:	d10b      	bne.n	800d384 <_printf_i+0x14c>
 800d36c:	6823      	ldr	r3, [r4, #0]
 800d36e:	07de      	lsls	r6, r3, #31
 800d370:	d508      	bpl.n	800d384 <_printf_i+0x14c>
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	6861      	ldr	r1, [r4, #4]
 800d376:	4299      	cmp	r1, r3
 800d378:	bfde      	ittt	le
 800d37a:	2330      	movle	r3, #48	; 0x30
 800d37c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d380:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d384:	1b52      	subs	r2, r2, r5
 800d386:	6122      	str	r2, [r4, #16]
 800d388:	f8cd a000 	str.w	sl, [sp]
 800d38c:	464b      	mov	r3, r9
 800d38e:	aa03      	add	r2, sp, #12
 800d390:	4621      	mov	r1, r4
 800d392:	4640      	mov	r0, r8
 800d394:	f7ff fee2 	bl	800d15c <_printf_common>
 800d398:	3001      	adds	r0, #1
 800d39a:	d14c      	bne.n	800d436 <_printf_i+0x1fe>
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	b004      	add	sp, #16
 800d3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a6:	4835      	ldr	r0, [pc, #212]	; (800d47c <_printf_i+0x244>)
 800d3a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d3ac:	6829      	ldr	r1, [r5, #0]
 800d3ae:	6823      	ldr	r3, [r4, #0]
 800d3b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3b4:	6029      	str	r1, [r5, #0]
 800d3b6:	061d      	lsls	r5, r3, #24
 800d3b8:	d514      	bpl.n	800d3e4 <_printf_i+0x1ac>
 800d3ba:	07df      	lsls	r7, r3, #31
 800d3bc:	bf44      	itt	mi
 800d3be:	f043 0320 	orrmi.w	r3, r3, #32
 800d3c2:	6023      	strmi	r3, [r4, #0]
 800d3c4:	b91e      	cbnz	r6, 800d3ce <_printf_i+0x196>
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	f023 0320 	bic.w	r3, r3, #32
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	2310      	movs	r3, #16
 800d3d0:	e7b0      	b.n	800d334 <_printf_i+0xfc>
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	f043 0320 	orr.w	r3, r3, #32
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	2378      	movs	r3, #120	; 0x78
 800d3dc:	4828      	ldr	r0, [pc, #160]	; (800d480 <_printf_i+0x248>)
 800d3de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3e2:	e7e3      	b.n	800d3ac <_printf_i+0x174>
 800d3e4:	0659      	lsls	r1, r3, #25
 800d3e6:	bf48      	it	mi
 800d3e8:	b2b6      	uxthmi	r6, r6
 800d3ea:	e7e6      	b.n	800d3ba <_printf_i+0x182>
 800d3ec:	4615      	mov	r5, r2
 800d3ee:	e7bb      	b.n	800d368 <_printf_i+0x130>
 800d3f0:	682b      	ldr	r3, [r5, #0]
 800d3f2:	6826      	ldr	r6, [r4, #0]
 800d3f4:	6961      	ldr	r1, [r4, #20]
 800d3f6:	1d18      	adds	r0, r3, #4
 800d3f8:	6028      	str	r0, [r5, #0]
 800d3fa:	0635      	lsls	r5, r6, #24
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	d501      	bpl.n	800d404 <_printf_i+0x1cc>
 800d400:	6019      	str	r1, [r3, #0]
 800d402:	e002      	b.n	800d40a <_printf_i+0x1d2>
 800d404:	0670      	lsls	r0, r6, #25
 800d406:	d5fb      	bpl.n	800d400 <_printf_i+0x1c8>
 800d408:	8019      	strh	r1, [r3, #0]
 800d40a:	2300      	movs	r3, #0
 800d40c:	6123      	str	r3, [r4, #16]
 800d40e:	4615      	mov	r5, r2
 800d410:	e7ba      	b.n	800d388 <_printf_i+0x150>
 800d412:	682b      	ldr	r3, [r5, #0]
 800d414:	1d1a      	adds	r2, r3, #4
 800d416:	602a      	str	r2, [r5, #0]
 800d418:	681d      	ldr	r5, [r3, #0]
 800d41a:	6862      	ldr	r2, [r4, #4]
 800d41c:	2100      	movs	r1, #0
 800d41e:	4628      	mov	r0, r5
 800d420:	f7f2 ffb6 	bl	8000390 <memchr>
 800d424:	b108      	cbz	r0, 800d42a <_printf_i+0x1f2>
 800d426:	1b40      	subs	r0, r0, r5
 800d428:	6060      	str	r0, [r4, #4]
 800d42a:	6863      	ldr	r3, [r4, #4]
 800d42c:	6123      	str	r3, [r4, #16]
 800d42e:	2300      	movs	r3, #0
 800d430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d434:	e7a8      	b.n	800d388 <_printf_i+0x150>
 800d436:	6923      	ldr	r3, [r4, #16]
 800d438:	462a      	mov	r2, r5
 800d43a:	4649      	mov	r1, r9
 800d43c:	4640      	mov	r0, r8
 800d43e:	47d0      	blx	sl
 800d440:	3001      	adds	r0, #1
 800d442:	d0ab      	beq.n	800d39c <_printf_i+0x164>
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	079b      	lsls	r3, r3, #30
 800d448:	d413      	bmi.n	800d472 <_printf_i+0x23a>
 800d44a:	68e0      	ldr	r0, [r4, #12]
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	4298      	cmp	r0, r3
 800d450:	bfb8      	it	lt
 800d452:	4618      	movlt	r0, r3
 800d454:	e7a4      	b.n	800d3a0 <_printf_i+0x168>
 800d456:	2301      	movs	r3, #1
 800d458:	4632      	mov	r2, r6
 800d45a:	4649      	mov	r1, r9
 800d45c:	4640      	mov	r0, r8
 800d45e:	47d0      	blx	sl
 800d460:	3001      	adds	r0, #1
 800d462:	d09b      	beq.n	800d39c <_printf_i+0x164>
 800d464:	3501      	adds	r5, #1
 800d466:	68e3      	ldr	r3, [r4, #12]
 800d468:	9903      	ldr	r1, [sp, #12]
 800d46a:	1a5b      	subs	r3, r3, r1
 800d46c:	42ab      	cmp	r3, r5
 800d46e:	dcf2      	bgt.n	800d456 <_printf_i+0x21e>
 800d470:	e7eb      	b.n	800d44a <_printf_i+0x212>
 800d472:	2500      	movs	r5, #0
 800d474:	f104 0619 	add.w	r6, r4, #25
 800d478:	e7f5      	b.n	800d466 <_printf_i+0x22e>
 800d47a:	bf00      	nop
 800d47c:	0800e033 	.word	0x0800e033
 800d480:	0800e044 	.word	0x0800e044

0800d484 <_sbrk_r>:
 800d484:	b538      	push	{r3, r4, r5, lr}
 800d486:	4d06      	ldr	r5, [pc, #24]	; (800d4a0 <_sbrk_r+0x1c>)
 800d488:	2300      	movs	r3, #0
 800d48a:	4604      	mov	r4, r0
 800d48c:	4608      	mov	r0, r1
 800d48e:	602b      	str	r3, [r5, #0]
 800d490:	f000 fc2c 	bl	800dcec <_sbrk>
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	d102      	bne.n	800d49e <_sbrk_r+0x1a>
 800d498:	682b      	ldr	r3, [r5, #0]
 800d49a:	b103      	cbz	r3, 800d49e <_sbrk_r+0x1a>
 800d49c:	6023      	str	r3, [r4, #0]
 800d49e:	bd38      	pop	{r3, r4, r5, pc}
 800d4a0:	2407f208 	.word	0x2407f208

0800d4a4 <__swbuf_r>:
 800d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a6:	460e      	mov	r6, r1
 800d4a8:	4614      	mov	r4, r2
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	b118      	cbz	r0, 800d4b6 <__swbuf_r+0x12>
 800d4ae:	6983      	ldr	r3, [r0, #24]
 800d4b0:	b90b      	cbnz	r3, 800d4b6 <__swbuf_r+0x12>
 800d4b2:	f000 f9d9 	bl	800d868 <__sinit>
 800d4b6:	4b21      	ldr	r3, [pc, #132]	; (800d53c <__swbuf_r+0x98>)
 800d4b8:	429c      	cmp	r4, r3
 800d4ba:	d12b      	bne.n	800d514 <__swbuf_r+0x70>
 800d4bc:	686c      	ldr	r4, [r5, #4]
 800d4be:	69a3      	ldr	r3, [r4, #24]
 800d4c0:	60a3      	str	r3, [r4, #8]
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	071a      	lsls	r2, r3, #28
 800d4c6:	d52f      	bpl.n	800d528 <__swbuf_r+0x84>
 800d4c8:	6923      	ldr	r3, [r4, #16]
 800d4ca:	b36b      	cbz	r3, 800d528 <__swbuf_r+0x84>
 800d4cc:	6923      	ldr	r3, [r4, #16]
 800d4ce:	6820      	ldr	r0, [r4, #0]
 800d4d0:	1ac0      	subs	r0, r0, r3
 800d4d2:	6963      	ldr	r3, [r4, #20]
 800d4d4:	b2f6      	uxtb	r6, r6
 800d4d6:	4283      	cmp	r3, r0
 800d4d8:	4637      	mov	r7, r6
 800d4da:	dc04      	bgt.n	800d4e6 <__swbuf_r+0x42>
 800d4dc:	4621      	mov	r1, r4
 800d4de:	4628      	mov	r0, r5
 800d4e0:	f000 f92e 	bl	800d740 <_fflush_r>
 800d4e4:	bb30      	cbnz	r0, 800d534 <__swbuf_r+0x90>
 800d4e6:	68a3      	ldr	r3, [r4, #8]
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	60a3      	str	r3, [r4, #8]
 800d4ec:	6823      	ldr	r3, [r4, #0]
 800d4ee:	1c5a      	adds	r2, r3, #1
 800d4f0:	6022      	str	r2, [r4, #0]
 800d4f2:	701e      	strb	r6, [r3, #0]
 800d4f4:	6963      	ldr	r3, [r4, #20]
 800d4f6:	3001      	adds	r0, #1
 800d4f8:	4283      	cmp	r3, r0
 800d4fa:	d004      	beq.n	800d506 <__swbuf_r+0x62>
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	07db      	lsls	r3, r3, #31
 800d500:	d506      	bpl.n	800d510 <__swbuf_r+0x6c>
 800d502:	2e0a      	cmp	r6, #10
 800d504:	d104      	bne.n	800d510 <__swbuf_r+0x6c>
 800d506:	4621      	mov	r1, r4
 800d508:	4628      	mov	r0, r5
 800d50a:	f000 f919 	bl	800d740 <_fflush_r>
 800d50e:	b988      	cbnz	r0, 800d534 <__swbuf_r+0x90>
 800d510:	4638      	mov	r0, r7
 800d512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d514:	4b0a      	ldr	r3, [pc, #40]	; (800d540 <__swbuf_r+0x9c>)
 800d516:	429c      	cmp	r4, r3
 800d518:	d101      	bne.n	800d51e <__swbuf_r+0x7a>
 800d51a:	68ac      	ldr	r4, [r5, #8]
 800d51c:	e7cf      	b.n	800d4be <__swbuf_r+0x1a>
 800d51e:	4b09      	ldr	r3, [pc, #36]	; (800d544 <__swbuf_r+0xa0>)
 800d520:	429c      	cmp	r4, r3
 800d522:	bf08      	it	eq
 800d524:	68ec      	ldreq	r4, [r5, #12]
 800d526:	e7ca      	b.n	800d4be <__swbuf_r+0x1a>
 800d528:	4621      	mov	r1, r4
 800d52a:	4628      	mov	r0, r5
 800d52c:	f000 f80c 	bl	800d548 <__swsetup_r>
 800d530:	2800      	cmp	r0, #0
 800d532:	d0cb      	beq.n	800d4cc <__swbuf_r+0x28>
 800d534:	f04f 37ff 	mov.w	r7, #4294967295
 800d538:	e7ea      	b.n	800d510 <__swbuf_r+0x6c>
 800d53a:	bf00      	nop
 800d53c:	0800e078 	.word	0x0800e078
 800d540:	0800e098 	.word	0x0800e098
 800d544:	0800e058 	.word	0x0800e058

0800d548 <__swsetup_r>:
 800d548:	4b32      	ldr	r3, [pc, #200]	; (800d614 <__swsetup_r+0xcc>)
 800d54a:	b570      	push	{r4, r5, r6, lr}
 800d54c:	681d      	ldr	r5, [r3, #0]
 800d54e:	4606      	mov	r6, r0
 800d550:	460c      	mov	r4, r1
 800d552:	b125      	cbz	r5, 800d55e <__swsetup_r+0x16>
 800d554:	69ab      	ldr	r3, [r5, #24]
 800d556:	b913      	cbnz	r3, 800d55e <__swsetup_r+0x16>
 800d558:	4628      	mov	r0, r5
 800d55a:	f000 f985 	bl	800d868 <__sinit>
 800d55e:	4b2e      	ldr	r3, [pc, #184]	; (800d618 <__swsetup_r+0xd0>)
 800d560:	429c      	cmp	r4, r3
 800d562:	d10f      	bne.n	800d584 <__swsetup_r+0x3c>
 800d564:	686c      	ldr	r4, [r5, #4]
 800d566:	89a3      	ldrh	r3, [r4, #12]
 800d568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d56c:	0719      	lsls	r1, r3, #28
 800d56e:	d42c      	bmi.n	800d5ca <__swsetup_r+0x82>
 800d570:	06dd      	lsls	r5, r3, #27
 800d572:	d411      	bmi.n	800d598 <__swsetup_r+0x50>
 800d574:	2309      	movs	r3, #9
 800d576:	6033      	str	r3, [r6, #0]
 800d578:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d57c:	81a3      	strh	r3, [r4, #12]
 800d57e:	f04f 30ff 	mov.w	r0, #4294967295
 800d582:	e03e      	b.n	800d602 <__swsetup_r+0xba>
 800d584:	4b25      	ldr	r3, [pc, #148]	; (800d61c <__swsetup_r+0xd4>)
 800d586:	429c      	cmp	r4, r3
 800d588:	d101      	bne.n	800d58e <__swsetup_r+0x46>
 800d58a:	68ac      	ldr	r4, [r5, #8]
 800d58c:	e7eb      	b.n	800d566 <__swsetup_r+0x1e>
 800d58e:	4b24      	ldr	r3, [pc, #144]	; (800d620 <__swsetup_r+0xd8>)
 800d590:	429c      	cmp	r4, r3
 800d592:	bf08      	it	eq
 800d594:	68ec      	ldreq	r4, [r5, #12]
 800d596:	e7e6      	b.n	800d566 <__swsetup_r+0x1e>
 800d598:	0758      	lsls	r0, r3, #29
 800d59a:	d512      	bpl.n	800d5c2 <__swsetup_r+0x7a>
 800d59c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d59e:	b141      	cbz	r1, 800d5b2 <__swsetup_r+0x6a>
 800d5a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5a4:	4299      	cmp	r1, r3
 800d5a6:	d002      	beq.n	800d5ae <__swsetup_r+0x66>
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	f7ff fa41 	bl	800ca30 <_free_r>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	6363      	str	r3, [r4, #52]	; 0x34
 800d5b2:	89a3      	ldrh	r3, [r4, #12]
 800d5b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5b8:	81a3      	strh	r3, [r4, #12]
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	6063      	str	r3, [r4, #4]
 800d5be:	6923      	ldr	r3, [r4, #16]
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	89a3      	ldrh	r3, [r4, #12]
 800d5c4:	f043 0308 	orr.w	r3, r3, #8
 800d5c8:	81a3      	strh	r3, [r4, #12]
 800d5ca:	6923      	ldr	r3, [r4, #16]
 800d5cc:	b94b      	cbnz	r3, 800d5e2 <__swsetup_r+0x9a>
 800d5ce:	89a3      	ldrh	r3, [r4, #12]
 800d5d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5d8:	d003      	beq.n	800d5e2 <__swsetup_r+0x9a>
 800d5da:	4621      	mov	r1, r4
 800d5dc:	4630      	mov	r0, r6
 800d5de:	f000 fa09 	bl	800d9f4 <__smakebuf_r>
 800d5e2:	89a0      	ldrh	r0, [r4, #12]
 800d5e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5e8:	f010 0301 	ands.w	r3, r0, #1
 800d5ec:	d00a      	beq.n	800d604 <__swsetup_r+0xbc>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	60a3      	str	r3, [r4, #8]
 800d5f2:	6963      	ldr	r3, [r4, #20]
 800d5f4:	425b      	negs	r3, r3
 800d5f6:	61a3      	str	r3, [r4, #24]
 800d5f8:	6923      	ldr	r3, [r4, #16]
 800d5fa:	b943      	cbnz	r3, 800d60e <__swsetup_r+0xc6>
 800d5fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d600:	d1ba      	bne.n	800d578 <__swsetup_r+0x30>
 800d602:	bd70      	pop	{r4, r5, r6, pc}
 800d604:	0781      	lsls	r1, r0, #30
 800d606:	bf58      	it	pl
 800d608:	6963      	ldrpl	r3, [r4, #20]
 800d60a:	60a3      	str	r3, [r4, #8]
 800d60c:	e7f4      	b.n	800d5f8 <__swsetup_r+0xb0>
 800d60e:	2000      	movs	r0, #0
 800d610:	e7f7      	b.n	800d602 <__swsetup_r+0xba>
 800d612:	bf00      	nop
 800d614:	24000020 	.word	0x24000020
 800d618:	0800e078 	.word	0x0800e078
 800d61c:	0800e098 	.word	0x0800e098
 800d620:	0800e058 	.word	0x0800e058

0800d624 <abort>:
 800d624:	b508      	push	{r3, lr}
 800d626:	2006      	movs	r0, #6
 800d628:	f000 faa2 	bl	800db70 <raise>
 800d62c:	2001      	movs	r0, #1
 800d62e:	f7f8 fa17 	bl	8005a60 <_exit>
	...

0800d634 <__sflush_r>:
 800d634:	898a      	ldrh	r2, [r1, #12]
 800d636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d63a:	4605      	mov	r5, r0
 800d63c:	0710      	lsls	r0, r2, #28
 800d63e:	460c      	mov	r4, r1
 800d640:	d458      	bmi.n	800d6f4 <__sflush_r+0xc0>
 800d642:	684b      	ldr	r3, [r1, #4]
 800d644:	2b00      	cmp	r3, #0
 800d646:	dc05      	bgt.n	800d654 <__sflush_r+0x20>
 800d648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	dc02      	bgt.n	800d654 <__sflush_r+0x20>
 800d64e:	2000      	movs	r0, #0
 800d650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d656:	2e00      	cmp	r6, #0
 800d658:	d0f9      	beq.n	800d64e <__sflush_r+0x1a>
 800d65a:	2300      	movs	r3, #0
 800d65c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d660:	682f      	ldr	r7, [r5, #0]
 800d662:	602b      	str	r3, [r5, #0]
 800d664:	d032      	beq.n	800d6cc <__sflush_r+0x98>
 800d666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d668:	89a3      	ldrh	r3, [r4, #12]
 800d66a:	075a      	lsls	r2, r3, #29
 800d66c:	d505      	bpl.n	800d67a <__sflush_r+0x46>
 800d66e:	6863      	ldr	r3, [r4, #4]
 800d670:	1ac0      	subs	r0, r0, r3
 800d672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d674:	b10b      	cbz	r3, 800d67a <__sflush_r+0x46>
 800d676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d678:	1ac0      	subs	r0, r0, r3
 800d67a:	2300      	movs	r3, #0
 800d67c:	4602      	mov	r2, r0
 800d67e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d680:	6a21      	ldr	r1, [r4, #32]
 800d682:	4628      	mov	r0, r5
 800d684:	47b0      	blx	r6
 800d686:	1c43      	adds	r3, r0, #1
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	d106      	bne.n	800d69a <__sflush_r+0x66>
 800d68c:	6829      	ldr	r1, [r5, #0]
 800d68e:	291d      	cmp	r1, #29
 800d690:	d82c      	bhi.n	800d6ec <__sflush_r+0xb8>
 800d692:	4a2a      	ldr	r2, [pc, #168]	; (800d73c <__sflush_r+0x108>)
 800d694:	40ca      	lsrs	r2, r1
 800d696:	07d6      	lsls	r6, r2, #31
 800d698:	d528      	bpl.n	800d6ec <__sflush_r+0xb8>
 800d69a:	2200      	movs	r2, #0
 800d69c:	6062      	str	r2, [r4, #4]
 800d69e:	04d9      	lsls	r1, r3, #19
 800d6a0:	6922      	ldr	r2, [r4, #16]
 800d6a2:	6022      	str	r2, [r4, #0]
 800d6a4:	d504      	bpl.n	800d6b0 <__sflush_r+0x7c>
 800d6a6:	1c42      	adds	r2, r0, #1
 800d6a8:	d101      	bne.n	800d6ae <__sflush_r+0x7a>
 800d6aa:	682b      	ldr	r3, [r5, #0]
 800d6ac:	b903      	cbnz	r3, 800d6b0 <__sflush_r+0x7c>
 800d6ae:	6560      	str	r0, [r4, #84]	; 0x54
 800d6b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6b2:	602f      	str	r7, [r5, #0]
 800d6b4:	2900      	cmp	r1, #0
 800d6b6:	d0ca      	beq.n	800d64e <__sflush_r+0x1a>
 800d6b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6bc:	4299      	cmp	r1, r3
 800d6be:	d002      	beq.n	800d6c6 <__sflush_r+0x92>
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f7ff f9b5 	bl	800ca30 <_free_r>
 800d6c6:	2000      	movs	r0, #0
 800d6c8:	6360      	str	r0, [r4, #52]	; 0x34
 800d6ca:	e7c1      	b.n	800d650 <__sflush_r+0x1c>
 800d6cc:	6a21      	ldr	r1, [r4, #32]
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	47b0      	blx	r6
 800d6d4:	1c41      	adds	r1, r0, #1
 800d6d6:	d1c7      	bne.n	800d668 <__sflush_r+0x34>
 800d6d8:	682b      	ldr	r3, [r5, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d0c4      	beq.n	800d668 <__sflush_r+0x34>
 800d6de:	2b1d      	cmp	r3, #29
 800d6e0:	d001      	beq.n	800d6e6 <__sflush_r+0xb2>
 800d6e2:	2b16      	cmp	r3, #22
 800d6e4:	d101      	bne.n	800d6ea <__sflush_r+0xb6>
 800d6e6:	602f      	str	r7, [r5, #0]
 800d6e8:	e7b1      	b.n	800d64e <__sflush_r+0x1a>
 800d6ea:	89a3      	ldrh	r3, [r4, #12]
 800d6ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6f0:	81a3      	strh	r3, [r4, #12]
 800d6f2:	e7ad      	b.n	800d650 <__sflush_r+0x1c>
 800d6f4:	690f      	ldr	r7, [r1, #16]
 800d6f6:	2f00      	cmp	r7, #0
 800d6f8:	d0a9      	beq.n	800d64e <__sflush_r+0x1a>
 800d6fa:	0793      	lsls	r3, r2, #30
 800d6fc:	680e      	ldr	r6, [r1, #0]
 800d6fe:	bf08      	it	eq
 800d700:	694b      	ldreq	r3, [r1, #20]
 800d702:	600f      	str	r7, [r1, #0]
 800d704:	bf18      	it	ne
 800d706:	2300      	movne	r3, #0
 800d708:	eba6 0807 	sub.w	r8, r6, r7
 800d70c:	608b      	str	r3, [r1, #8]
 800d70e:	f1b8 0f00 	cmp.w	r8, #0
 800d712:	dd9c      	ble.n	800d64e <__sflush_r+0x1a>
 800d714:	6a21      	ldr	r1, [r4, #32]
 800d716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d718:	4643      	mov	r3, r8
 800d71a:	463a      	mov	r2, r7
 800d71c:	4628      	mov	r0, r5
 800d71e:	47b0      	blx	r6
 800d720:	2800      	cmp	r0, #0
 800d722:	dc06      	bgt.n	800d732 <__sflush_r+0xfe>
 800d724:	89a3      	ldrh	r3, [r4, #12]
 800d726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d72a:	81a3      	strh	r3, [r4, #12]
 800d72c:	f04f 30ff 	mov.w	r0, #4294967295
 800d730:	e78e      	b.n	800d650 <__sflush_r+0x1c>
 800d732:	4407      	add	r7, r0
 800d734:	eba8 0800 	sub.w	r8, r8, r0
 800d738:	e7e9      	b.n	800d70e <__sflush_r+0xda>
 800d73a:	bf00      	nop
 800d73c:	20400001 	.word	0x20400001

0800d740 <_fflush_r>:
 800d740:	b538      	push	{r3, r4, r5, lr}
 800d742:	690b      	ldr	r3, [r1, #16]
 800d744:	4605      	mov	r5, r0
 800d746:	460c      	mov	r4, r1
 800d748:	b913      	cbnz	r3, 800d750 <_fflush_r+0x10>
 800d74a:	2500      	movs	r5, #0
 800d74c:	4628      	mov	r0, r5
 800d74e:	bd38      	pop	{r3, r4, r5, pc}
 800d750:	b118      	cbz	r0, 800d75a <_fflush_r+0x1a>
 800d752:	6983      	ldr	r3, [r0, #24]
 800d754:	b90b      	cbnz	r3, 800d75a <_fflush_r+0x1a>
 800d756:	f000 f887 	bl	800d868 <__sinit>
 800d75a:	4b14      	ldr	r3, [pc, #80]	; (800d7ac <_fflush_r+0x6c>)
 800d75c:	429c      	cmp	r4, r3
 800d75e:	d11b      	bne.n	800d798 <_fflush_r+0x58>
 800d760:	686c      	ldr	r4, [r5, #4]
 800d762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d0ef      	beq.n	800d74a <_fflush_r+0xa>
 800d76a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d76c:	07d0      	lsls	r0, r2, #31
 800d76e:	d404      	bmi.n	800d77a <_fflush_r+0x3a>
 800d770:	0599      	lsls	r1, r3, #22
 800d772:	d402      	bmi.n	800d77a <_fflush_r+0x3a>
 800d774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d776:	f000 f915 	bl	800d9a4 <__retarget_lock_acquire_recursive>
 800d77a:	4628      	mov	r0, r5
 800d77c:	4621      	mov	r1, r4
 800d77e:	f7ff ff59 	bl	800d634 <__sflush_r>
 800d782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d784:	07da      	lsls	r2, r3, #31
 800d786:	4605      	mov	r5, r0
 800d788:	d4e0      	bmi.n	800d74c <_fflush_r+0xc>
 800d78a:	89a3      	ldrh	r3, [r4, #12]
 800d78c:	059b      	lsls	r3, r3, #22
 800d78e:	d4dd      	bmi.n	800d74c <_fflush_r+0xc>
 800d790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d792:	f000 f908 	bl	800d9a6 <__retarget_lock_release_recursive>
 800d796:	e7d9      	b.n	800d74c <_fflush_r+0xc>
 800d798:	4b05      	ldr	r3, [pc, #20]	; (800d7b0 <_fflush_r+0x70>)
 800d79a:	429c      	cmp	r4, r3
 800d79c:	d101      	bne.n	800d7a2 <_fflush_r+0x62>
 800d79e:	68ac      	ldr	r4, [r5, #8]
 800d7a0:	e7df      	b.n	800d762 <_fflush_r+0x22>
 800d7a2:	4b04      	ldr	r3, [pc, #16]	; (800d7b4 <_fflush_r+0x74>)
 800d7a4:	429c      	cmp	r4, r3
 800d7a6:	bf08      	it	eq
 800d7a8:	68ec      	ldreq	r4, [r5, #12]
 800d7aa:	e7da      	b.n	800d762 <_fflush_r+0x22>
 800d7ac:	0800e078 	.word	0x0800e078
 800d7b0:	0800e098 	.word	0x0800e098
 800d7b4:	0800e058 	.word	0x0800e058

0800d7b8 <std>:
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	b510      	push	{r4, lr}
 800d7bc:	4604      	mov	r4, r0
 800d7be:	e9c0 3300 	strd	r3, r3, [r0]
 800d7c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7c6:	6083      	str	r3, [r0, #8]
 800d7c8:	8181      	strh	r1, [r0, #12]
 800d7ca:	6643      	str	r3, [r0, #100]	; 0x64
 800d7cc:	81c2      	strh	r2, [r0, #14]
 800d7ce:	6183      	str	r3, [r0, #24]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	2208      	movs	r2, #8
 800d7d4:	305c      	adds	r0, #92	; 0x5c
 800d7d6:	f7ff f88d 	bl	800c8f4 <memset>
 800d7da:	4b05      	ldr	r3, [pc, #20]	; (800d7f0 <std+0x38>)
 800d7dc:	6263      	str	r3, [r4, #36]	; 0x24
 800d7de:	4b05      	ldr	r3, [pc, #20]	; (800d7f4 <std+0x3c>)
 800d7e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7e2:	4b05      	ldr	r3, [pc, #20]	; (800d7f8 <std+0x40>)
 800d7e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d7e6:	4b05      	ldr	r3, [pc, #20]	; (800d7fc <std+0x44>)
 800d7e8:	6224      	str	r4, [r4, #32]
 800d7ea:	6323      	str	r3, [r4, #48]	; 0x30
 800d7ec:	bd10      	pop	{r4, pc}
 800d7ee:	bf00      	nop
 800d7f0:	0800dba9 	.word	0x0800dba9
 800d7f4:	0800dbcb 	.word	0x0800dbcb
 800d7f8:	0800dc03 	.word	0x0800dc03
 800d7fc:	0800dc27 	.word	0x0800dc27

0800d800 <_cleanup_r>:
 800d800:	4901      	ldr	r1, [pc, #4]	; (800d808 <_cleanup_r+0x8>)
 800d802:	f000 b8af 	b.w	800d964 <_fwalk_reent>
 800d806:	bf00      	nop
 800d808:	0800d741 	.word	0x0800d741

0800d80c <__sfmoreglue>:
 800d80c:	b570      	push	{r4, r5, r6, lr}
 800d80e:	2268      	movs	r2, #104	; 0x68
 800d810:	1e4d      	subs	r5, r1, #1
 800d812:	4355      	muls	r5, r2
 800d814:	460e      	mov	r6, r1
 800d816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d81a:	f7ff f975 	bl	800cb08 <_malloc_r>
 800d81e:	4604      	mov	r4, r0
 800d820:	b140      	cbz	r0, 800d834 <__sfmoreglue+0x28>
 800d822:	2100      	movs	r1, #0
 800d824:	e9c0 1600 	strd	r1, r6, [r0]
 800d828:	300c      	adds	r0, #12
 800d82a:	60a0      	str	r0, [r4, #8]
 800d82c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d830:	f7ff f860 	bl	800c8f4 <memset>
 800d834:	4620      	mov	r0, r4
 800d836:	bd70      	pop	{r4, r5, r6, pc}

0800d838 <__sfp_lock_acquire>:
 800d838:	4801      	ldr	r0, [pc, #4]	; (800d840 <__sfp_lock_acquire+0x8>)
 800d83a:	f000 b8b3 	b.w	800d9a4 <__retarget_lock_acquire_recursive>
 800d83e:	bf00      	nop
 800d840:	2407f205 	.word	0x2407f205

0800d844 <__sfp_lock_release>:
 800d844:	4801      	ldr	r0, [pc, #4]	; (800d84c <__sfp_lock_release+0x8>)
 800d846:	f000 b8ae 	b.w	800d9a6 <__retarget_lock_release_recursive>
 800d84a:	bf00      	nop
 800d84c:	2407f205 	.word	0x2407f205

0800d850 <__sinit_lock_acquire>:
 800d850:	4801      	ldr	r0, [pc, #4]	; (800d858 <__sinit_lock_acquire+0x8>)
 800d852:	f000 b8a7 	b.w	800d9a4 <__retarget_lock_acquire_recursive>
 800d856:	bf00      	nop
 800d858:	2407f206 	.word	0x2407f206

0800d85c <__sinit_lock_release>:
 800d85c:	4801      	ldr	r0, [pc, #4]	; (800d864 <__sinit_lock_release+0x8>)
 800d85e:	f000 b8a2 	b.w	800d9a6 <__retarget_lock_release_recursive>
 800d862:	bf00      	nop
 800d864:	2407f206 	.word	0x2407f206

0800d868 <__sinit>:
 800d868:	b510      	push	{r4, lr}
 800d86a:	4604      	mov	r4, r0
 800d86c:	f7ff fff0 	bl	800d850 <__sinit_lock_acquire>
 800d870:	69a3      	ldr	r3, [r4, #24]
 800d872:	b11b      	cbz	r3, 800d87c <__sinit+0x14>
 800d874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d878:	f7ff bff0 	b.w	800d85c <__sinit_lock_release>
 800d87c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d880:	6523      	str	r3, [r4, #80]	; 0x50
 800d882:	4b13      	ldr	r3, [pc, #76]	; (800d8d0 <__sinit+0x68>)
 800d884:	4a13      	ldr	r2, [pc, #76]	; (800d8d4 <__sinit+0x6c>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	62a2      	str	r2, [r4, #40]	; 0x28
 800d88a:	42a3      	cmp	r3, r4
 800d88c:	bf04      	itt	eq
 800d88e:	2301      	moveq	r3, #1
 800d890:	61a3      	streq	r3, [r4, #24]
 800d892:	4620      	mov	r0, r4
 800d894:	f000 f820 	bl	800d8d8 <__sfp>
 800d898:	6060      	str	r0, [r4, #4]
 800d89a:	4620      	mov	r0, r4
 800d89c:	f000 f81c 	bl	800d8d8 <__sfp>
 800d8a0:	60a0      	str	r0, [r4, #8]
 800d8a2:	4620      	mov	r0, r4
 800d8a4:	f000 f818 	bl	800d8d8 <__sfp>
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	60e0      	str	r0, [r4, #12]
 800d8ac:	2104      	movs	r1, #4
 800d8ae:	6860      	ldr	r0, [r4, #4]
 800d8b0:	f7ff ff82 	bl	800d7b8 <std>
 800d8b4:	68a0      	ldr	r0, [r4, #8]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	2109      	movs	r1, #9
 800d8ba:	f7ff ff7d 	bl	800d7b8 <std>
 800d8be:	68e0      	ldr	r0, [r4, #12]
 800d8c0:	2202      	movs	r2, #2
 800d8c2:	2112      	movs	r1, #18
 800d8c4:	f7ff ff78 	bl	800d7b8 <std>
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	61a3      	str	r3, [r4, #24]
 800d8cc:	e7d2      	b.n	800d874 <__sinit+0xc>
 800d8ce:	bf00      	nop
 800d8d0:	0800df70 	.word	0x0800df70
 800d8d4:	0800d801 	.word	0x0800d801

0800d8d8 <__sfp>:
 800d8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8da:	4607      	mov	r7, r0
 800d8dc:	f7ff ffac 	bl	800d838 <__sfp_lock_acquire>
 800d8e0:	4b1e      	ldr	r3, [pc, #120]	; (800d95c <__sfp+0x84>)
 800d8e2:	681e      	ldr	r6, [r3, #0]
 800d8e4:	69b3      	ldr	r3, [r6, #24]
 800d8e6:	b913      	cbnz	r3, 800d8ee <__sfp+0x16>
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f7ff ffbd 	bl	800d868 <__sinit>
 800d8ee:	3648      	adds	r6, #72	; 0x48
 800d8f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	d503      	bpl.n	800d900 <__sfp+0x28>
 800d8f8:	6833      	ldr	r3, [r6, #0]
 800d8fa:	b30b      	cbz	r3, 800d940 <__sfp+0x68>
 800d8fc:	6836      	ldr	r6, [r6, #0]
 800d8fe:	e7f7      	b.n	800d8f0 <__sfp+0x18>
 800d900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d904:	b9d5      	cbnz	r5, 800d93c <__sfp+0x64>
 800d906:	4b16      	ldr	r3, [pc, #88]	; (800d960 <__sfp+0x88>)
 800d908:	60e3      	str	r3, [r4, #12]
 800d90a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d90e:	6665      	str	r5, [r4, #100]	; 0x64
 800d910:	f000 f847 	bl	800d9a2 <__retarget_lock_init_recursive>
 800d914:	f7ff ff96 	bl	800d844 <__sfp_lock_release>
 800d918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d91c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d920:	6025      	str	r5, [r4, #0]
 800d922:	61a5      	str	r5, [r4, #24]
 800d924:	2208      	movs	r2, #8
 800d926:	4629      	mov	r1, r5
 800d928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d92c:	f7fe ffe2 	bl	800c8f4 <memset>
 800d930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d938:	4620      	mov	r0, r4
 800d93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d93c:	3468      	adds	r4, #104	; 0x68
 800d93e:	e7d9      	b.n	800d8f4 <__sfp+0x1c>
 800d940:	2104      	movs	r1, #4
 800d942:	4638      	mov	r0, r7
 800d944:	f7ff ff62 	bl	800d80c <__sfmoreglue>
 800d948:	4604      	mov	r4, r0
 800d94a:	6030      	str	r0, [r6, #0]
 800d94c:	2800      	cmp	r0, #0
 800d94e:	d1d5      	bne.n	800d8fc <__sfp+0x24>
 800d950:	f7ff ff78 	bl	800d844 <__sfp_lock_release>
 800d954:	230c      	movs	r3, #12
 800d956:	603b      	str	r3, [r7, #0]
 800d958:	e7ee      	b.n	800d938 <__sfp+0x60>
 800d95a:	bf00      	nop
 800d95c:	0800df70 	.word	0x0800df70
 800d960:	ffff0001 	.word	0xffff0001

0800d964 <_fwalk_reent>:
 800d964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d968:	4606      	mov	r6, r0
 800d96a:	4688      	mov	r8, r1
 800d96c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d970:	2700      	movs	r7, #0
 800d972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d976:	f1b9 0901 	subs.w	r9, r9, #1
 800d97a:	d505      	bpl.n	800d988 <_fwalk_reent+0x24>
 800d97c:	6824      	ldr	r4, [r4, #0]
 800d97e:	2c00      	cmp	r4, #0
 800d980:	d1f7      	bne.n	800d972 <_fwalk_reent+0xe>
 800d982:	4638      	mov	r0, r7
 800d984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d988:	89ab      	ldrh	r3, [r5, #12]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d907      	bls.n	800d99e <_fwalk_reent+0x3a>
 800d98e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d992:	3301      	adds	r3, #1
 800d994:	d003      	beq.n	800d99e <_fwalk_reent+0x3a>
 800d996:	4629      	mov	r1, r5
 800d998:	4630      	mov	r0, r6
 800d99a:	47c0      	blx	r8
 800d99c:	4307      	orrs	r7, r0
 800d99e:	3568      	adds	r5, #104	; 0x68
 800d9a0:	e7e9      	b.n	800d976 <_fwalk_reent+0x12>

0800d9a2 <__retarget_lock_init_recursive>:
 800d9a2:	4770      	bx	lr

0800d9a4 <__retarget_lock_acquire_recursive>:
 800d9a4:	4770      	bx	lr

0800d9a6 <__retarget_lock_release_recursive>:
 800d9a6:	4770      	bx	lr

0800d9a8 <__swhatbuf_r>:
 800d9a8:	b570      	push	{r4, r5, r6, lr}
 800d9aa:	460e      	mov	r6, r1
 800d9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9b0:	2900      	cmp	r1, #0
 800d9b2:	b096      	sub	sp, #88	; 0x58
 800d9b4:	4614      	mov	r4, r2
 800d9b6:	461d      	mov	r5, r3
 800d9b8:	da08      	bge.n	800d9cc <__swhatbuf_r+0x24>
 800d9ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	602a      	str	r2, [r5, #0]
 800d9c2:	061a      	lsls	r2, r3, #24
 800d9c4:	d410      	bmi.n	800d9e8 <__swhatbuf_r+0x40>
 800d9c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9ca:	e00e      	b.n	800d9ea <__swhatbuf_r+0x42>
 800d9cc:	466a      	mov	r2, sp
 800d9ce:	f000 f93f 	bl	800dc50 <_fstat_r>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	dbf1      	blt.n	800d9ba <__swhatbuf_r+0x12>
 800d9d6:	9a01      	ldr	r2, [sp, #4]
 800d9d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9e0:	425a      	negs	r2, r3
 800d9e2:	415a      	adcs	r2, r3
 800d9e4:	602a      	str	r2, [r5, #0]
 800d9e6:	e7ee      	b.n	800d9c6 <__swhatbuf_r+0x1e>
 800d9e8:	2340      	movs	r3, #64	; 0x40
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	b016      	add	sp, #88	; 0x58
 800d9f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d9f4 <__smakebuf_r>:
 800d9f4:	898b      	ldrh	r3, [r1, #12]
 800d9f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9f8:	079d      	lsls	r5, r3, #30
 800d9fa:	4606      	mov	r6, r0
 800d9fc:	460c      	mov	r4, r1
 800d9fe:	d507      	bpl.n	800da10 <__smakebuf_r+0x1c>
 800da00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	6123      	str	r3, [r4, #16]
 800da08:	2301      	movs	r3, #1
 800da0a:	6163      	str	r3, [r4, #20]
 800da0c:	b002      	add	sp, #8
 800da0e:	bd70      	pop	{r4, r5, r6, pc}
 800da10:	ab01      	add	r3, sp, #4
 800da12:	466a      	mov	r2, sp
 800da14:	f7ff ffc8 	bl	800d9a8 <__swhatbuf_r>
 800da18:	9900      	ldr	r1, [sp, #0]
 800da1a:	4605      	mov	r5, r0
 800da1c:	4630      	mov	r0, r6
 800da1e:	f7ff f873 	bl	800cb08 <_malloc_r>
 800da22:	b948      	cbnz	r0, 800da38 <__smakebuf_r+0x44>
 800da24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da28:	059a      	lsls	r2, r3, #22
 800da2a:	d4ef      	bmi.n	800da0c <__smakebuf_r+0x18>
 800da2c:	f023 0303 	bic.w	r3, r3, #3
 800da30:	f043 0302 	orr.w	r3, r3, #2
 800da34:	81a3      	strh	r3, [r4, #12]
 800da36:	e7e3      	b.n	800da00 <__smakebuf_r+0xc>
 800da38:	4b0d      	ldr	r3, [pc, #52]	; (800da70 <__smakebuf_r+0x7c>)
 800da3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800da3c:	89a3      	ldrh	r3, [r4, #12]
 800da3e:	6020      	str	r0, [r4, #0]
 800da40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da44:	81a3      	strh	r3, [r4, #12]
 800da46:	9b00      	ldr	r3, [sp, #0]
 800da48:	6163      	str	r3, [r4, #20]
 800da4a:	9b01      	ldr	r3, [sp, #4]
 800da4c:	6120      	str	r0, [r4, #16]
 800da4e:	b15b      	cbz	r3, 800da68 <__smakebuf_r+0x74>
 800da50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da54:	4630      	mov	r0, r6
 800da56:	f000 f90d 	bl	800dc74 <_isatty_r>
 800da5a:	b128      	cbz	r0, 800da68 <__smakebuf_r+0x74>
 800da5c:	89a3      	ldrh	r3, [r4, #12]
 800da5e:	f023 0303 	bic.w	r3, r3, #3
 800da62:	f043 0301 	orr.w	r3, r3, #1
 800da66:	81a3      	strh	r3, [r4, #12]
 800da68:	89a0      	ldrh	r0, [r4, #12]
 800da6a:	4305      	orrs	r5, r0
 800da6c:	81a5      	strh	r5, [r4, #12]
 800da6e:	e7cd      	b.n	800da0c <__smakebuf_r+0x18>
 800da70:	0800d801 	.word	0x0800d801

0800da74 <memmove>:
 800da74:	4288      	cmp	r0, r1
 800da76:	b510      	push	{r4, lr}
 800da78:	eb01 0402 	add.w	r4, r1, r2
 800da7c:	d902      	bls.n	800da84 <memmove+0x10>
 800da7e:	4284      	cmp	r4, r0
 800da80:	4623      	mov	r3, r4
 800da82:	d807      	bhi.n	800da94 <memmove+0x20>
 800da84:	1e43      	subs	r3, r0, #1
 800da86:	42a1      	cmp	r1, r4
 800da88:	d008      	beq.n	800da9c <memmove+0x28>
 800da8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da92:	e7f8      	b.n	800da86 <memmove+0x12>
 800da94:	4402      	add	r2, r0
 800da96:	4601      	mov	r1, r0
 800da98:	428a      	cmp	r2, r1
 800da9a:	d100      	bne.n	800da9e <memmove+0x2a>
 800da9c:	bd10      	pop	{r4, pc}
 800da9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800daa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daa6:	e7f7      	b.n	800da98 <memmove+0x24>

0800daa8 <__malloc_lock>:
 800daa8:	4801      	ldr	r0, [pc, #4]	; (800dab0 <__malloc_lock+0x8>)
 800daaa:	f7ff bf7b 	b.w	800d9a4 <__retarget_lock_acquire_recursive>
 800daae:	bf00      	nop
 800dab0:	2407f204 	.word	0x2407f204

0800dab4 <__malloc_unlock>:
 800dab4:	4801      	ldr	r0, [pc, #4]	; (800dabc <__malloc_unlock+0x8>)
 800dab6:	f7ff bf76 	b.w	800d9a6 <__retarget_lock_release_recursive>
 800daba:	bf00      	nop
 800dabc:	2407f204 	.word	0x2407f204

0800dac0 <_realloc_r>:
 800dac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac4:	4680      	mov	r8, r0
 800dac6:	4614      	mov	r4, r2
 800dac8:	460e      	mov	r6, r1
 800daca:	b921      	cbnz	r1, 800dad6 <_realloc_r+0x16>
 800dacc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dad0:	4611      	mov	r1, r2
 800dad2:	f7ff b819 	b.w	800cb08 <_malloc_r>
 800dad6:	b92a      	cbnz	r2, 800dae4 <_realloc_r+0x24>
 800dad8:	f7fe ffaa 	bl	800ca30 <_free_r>
 800dadc:	4625      	mov	r5, r4
 800dade:	4628      	mov	r0, r5
 800dae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae4:	f000 f8e8 	bl	800dcb8 <_malloc_usable_size_r>
 800dae8:	4284      	cmp	r4, r0
 800daea:	4607      	mov	r7, r0
 800daec:	d802      	bhi.n	800daf4 <_realloc_r+0x34>
 800daee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800daf2:	d812      	bhi.n	800db1a <_realloc_r+0x5a>
 800daf4:	4621      	mov	r1, r4
 800daf6:	4640      	mov	r0, r8
 800daf8:	f7ff f806 	bl	800cb08 <_malloc_r>
 800dafc:	4605      	mov	r5, r0
 800dafe:	2800      	cmp	r0, #0
 800db00:	d0ed      	beq.n	800dade <_realloc_r+0x1e>
 800db02:	42bc      	cmp	r4, r7
 800db04:	4622      	mov	r2, r4
 800db06:	4631      	mov	r1, r6
 800db08:	bf28      	it	cs
 800db0a:	463a      	movcs	r2, r7
 800db0c:	f7fe fee4 	bl	800c8d8 <memcpy>
 800db10:	4631      	mov	r1, r6
 800db12:	4640      	mov	r0, r8
 800db14:	f7fe ff8c 	bl	800ca30 <_free_r>
 800db18:	e7e1      	b.n	800dade <_realloc_r+0x1e>
 800db1a:	4635      	mov	r5, r6
 800db1c:	e7df      	b.n	800dade <_realloc_r+0x1e>

0800db1e <_raise_r>:
 800db1e:	291f      	cmp	r1, #31
 800db20:	b538      	push	{r3, r4, r5, lr}
 800db22:	4604      	mov	r4, r0
 800db24:	460d      	mov	r5, r1
 800db26:	d904      	bls.n	800db32 <_raise_r+0x14>
 800db28:	2316      	movs	r3, #22
 800db2a:	6003      	str	r3, [r0, #0]
 800db2c:	f04f 30ff 	mov.w	r0, #4294967295
 800db30:	bd38      	pop	{r3, r4, r5, pc}
 800db32:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db34:	b112      	cbz	r2, 800db3c <_raise_r+0x1e>
 800db36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db3a:	b94b      	cbnz	r3, 800db50 <_raise_r+0x32>
 800db3c:	4620      	mov	r0, r4
 800db3e:	f000 f831 	bl	800dba4 <_getpid_r>
 800db42:	462a      	mov	r2, r5
 800db44:	4601      	mov	r1, r0
 800db46:	4620      	mov	r0, r4
 800db48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db4c:	f000 b818 	b.w	800db80 <_kill_r>
 800db50:	2b01      	cmp	r3, #1
 800db52:	d00a      	beq.n	800db6a <_raise_r+0x4c>
 800db54:	1c59      	adds	r1, r3, #1
 800db56:	d103      	bne.n	800db60 <_raise_r+0x42>
 800db58:	2316      	movs	r3, #22
 800db5a:	6003      	str	r3, [r0, #0]
 800db5c:	2001      	movs	r0, #1
 800db5e:	e7e7      	b.n	800db30 <_raise_r+0x12>
 800db60:	2400      	movs	r4, #0
 800db62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db66:	4628      	mov	r0, r5
 800db68:	4798      	blx	r3
 800db6a:	2000      	movs	r0, #0
 800db6c:	e7e0      	b.n	800db30 <_raise_r+0x12>
	...

0800db70 <raise>:
 800db70:	4b02      	ldr	r3, [pc, #8]	; (800db7c <raise+0xc>)
 800db72:	4601      	mov	r1, r0
 800db74:	6818      	ldr	r0, [r3, #0]
 800db76:	f7ff bfd2 	b.w	800db1e <_raise_r>
 800db7a:	bf00      	nop
 800db7c:	24000020 	.word	0x24000020

0800db80 <_kill_r>:
 800db80:	b538      	push	{r3, r4, r5, lr}
 800db82:	4d07      	ldr	r5, [pc, #28]	; (800dba0 <_kill_r+0x20>)
 800db84:	2300      	movs	r3, #0
 800db86:	4604      	mov	r4, r0
 800db88:	4608      	mov	r0, r1
 800db8a:	4611      	mov	r1, r2
 800db8c:	602b      	str	r3, [r5, #0]
 800db8e:	f7f7 ff57 	bl	8005a40 <_kill>
 800db92:	1c43      	adds	r3, r0, #1
 800db94:	d102      	bne.n	800db9c <_kill_r+0x1c>
 800db96:	682b      	ldr	r3, [r5, #0]
 800db98:	b103      	cbz	r3, 800db9c <_kill_r+0x1c>
 800db9a:	6023      	str	r3, [r4, #0]
 800db9c:	bd38      	pop	{r3, r4, r5, pc}
 800db9e:	bf00      	nop
 800dba0:	2407f208 	.word	0x2407f208

0800dba4 <_getpid_r>:
 800dba4:	f7f7 bf44 	b.w	8005a30 <_getpid>

0800dba8 <__sread>:
 800dba8:	b510      	push	{r4, lr}
 800dbaa:	460c      	mov	r4, r1
 800dbac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb0:	f000 f88a 	bl	800dcc8 <_read_r>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	bfab      	itete	ge
 800dbb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dbba:	89a3      	ldrhlt	r3, [r4, #12]
 800dbbc:	181b      	addge	r3, r3, r0
 800dbbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dbc2:	bfac      	ite	ge
 800dbc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dbc6:	81a3      	strhlt	r3, [r4, #12]
 800dbc8:	bd10      	pop	{r4, pc}

0800dbca <__swrite>:
 800dbca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbce:	461f      	mov	r7, r3
 800dbd0:	898b      	ldrh	r3, [r1, #12]
 800dbd2:	05db      	lsls	r3, r3, #23
 800dbd4:	4605      	mov	r5, r0
 800dbd6:	460c      	mov	r4, r1
 800dbd8:	4616      	mov	r6, r2
 800dbda:	d505      	bpl.n	800dbe8 <__swrite+0x1e>
 800dbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f000 f856 	bl	800dc94 <_lseek_r>
 800dbe8:	89a3      	ldrh	r3, [r4, #12]
 800dbea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbf2:	81a3      	strh	r3, [r4, #12]
 800dbf4:	4632      	mov	r2, r6
 800dbf6:	463b      	mov	r3, r7
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbfe:	f7f7 b92f 	b.w	8004e60 <_write_r>

0800dc02 <__sseek>:
 800dc02:	b510      	push	{r4, lr}
 800dc04:	460c      	mov	r4, r1
 800dc06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc0a:	f000 f843 	bl	800dc94 <_lseek_r>
 800dc0e:	1c43      	adds	r3, r0, #1
 800dc10:	89a3      	ldrh	r3, [r4, #12]
 800dc12:	bf15      	itete	ne
 800dc14:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc1e:	81a3      	strheq	r3, [r4, #12]
 800dc20:	bf18      	it	ne
 800dc22:	81a3      	strhne	r3, [r4, #12]
 800dc24:	bd10      	pop	{r4, pc}

0800dc26 <__sclose>:
 800dc26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc2a:	f000 b801 	b.w	800dc30 <_close_r>
	...

0800dc30 <_close_r>:
 800dc30:	b538      	push	{r3, r4, r5, lr}
 800dc32:	4d06      	ldr	r5, [pc, #24]	; (800dc4c <_close_r+0x1c>)
 800dc34:	2300      	movs	r3, #0
 800dc36:	4604      	mov	r4, r0
 800dc38:	4608      	mov	r0, r1
 800dc3a:	602b      	str	r3, [r5, #0]
 800dc3c:	f7f7 ff37 	bl	8005aae <_close>
 800dc40:	1c43      	adds	r3, r0, #1
 800dc42:	d102      	bne.n	800dc4a <_close_r+0x1a>
 800dc44:	682b      	ldr	r3, [r5, #0]
 800dc46:	b103      	cbz	r3, 800dc4a <_close_r+0x1a>
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	bd38      	pop	{r3, r4, r5, pc}
 800dc4c:	2407f208 	.word	0x2407f208

0800dc50 <_fstat_r>:
 800dc50:	b538      	push	{r3, r4, r5, lr}
 800dc52:	4d07      	ldr	r5, [pc, #28]	; (800dc70 <_fstat_r+0x20>)
 800dc54:	2300      	movs	r3, #0
 800dc56:	4604      	mov	r4, r0
 800dc58:	4608      	mov	r0, r1
 800dc5a:	4611      	mov	r1, r2
 800dc5c:	602b      	str	r3, [r5, #0]
 800dc5e:	f7f7 ff32 	bl	8005ac6 <_fstat>
 800dc62:	1c43      	adds	r3, r0, #1
 800dc64:	d102      	bne.n	800dc6c <_fstat_r+0x1c>
 800dc66:	682b      	ldr	r3, [r5, #0]
 800dc68:	b103      	cbz	r3, 800dc6c <_fstat_r+0x1c>
 800dc6a:	6023      	str	r3, [r4, #0]
 800dc6c:	bd38      	pop	{r3, r4, r5, pc}
 800dc6e:	bf00      	nop
 800dc70:	2407f208 	.word	0x2407f208

0800dc74 <_isatty_r>:
 800dc74:	b538      	push	{r3, r4, r5, lr}
 800dc76:	4d06      	ldr	r5, [pc, #24]	; (800dc90 <_isatty_r+0x1c>)
 800dc78:	2300      	movs	r3, #0
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	4608      	mov	r0, r1
 800dc7e:	602b      	str	r3, [r5, #0]
 800dc80:	f7f7 ff31 	bl	8005ae6 <_isatty>
 800dc84:	1c43      	adds	r3, r0, #1
 800dc86:	d102      	bne.n	800dc8e <_isatty_r+0x1a>
 800dc88:	682b      	ldr	r3, [r5, #0]
 800dc8a:	b103      	cbz	r3, 800dc8e <_isatty_r+0x1a>
 800dc8c:	6023      	str	r3, [r4, #0]
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}
 800dc90:	2407f208 	.word	0x2407f208

0800dc94 <_lseek_r>:
 800dc94:	b538      	push	{r3, r4, r5, lr}
 800dc96:	4d07      	ldr	r5, [pc, #28]	; (800dcb4 <_lseek_r+0x20>)
 800dc98:	4604      	mov	r4, r0
 800dc9a:	4608      	mov	r0, r1
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	2200      	movs	r2, #0
 800dca0:	602a      	str	r2, [r5, #0]
 800dca2:	461a      	mov	r2, r3
 800dca4:	f7f7 ff2a 	bl	8005afc <_lseek>
 800dca8:	1c43      	adds	r3, r0, #1
 800dcaa:	d102      	bne.n	800dcb2 <_lseek_r+0x1e>
 800dcac:	682b      	ldr	r3, [r5, #0]
 800dcae:	b103      	cbz	r3, 800dcb2 <_lseek_r+0x1e>
 800dcb0:	6023      	str	r3, [r4, #0]
 800dcb2:	bd38      	pop	{r3, r4, r5, pc}
 800dcb4:	2407f208 	.word	0x2407f208

0800dcb8 <_malloc_usable_size_r>:
 800dcb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcbc:	1f18      	subs	r0, r3, #4
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	bfbc      	itt	lt
 800dcc2:	580b      	ldrlt	r3, [r1, r0]
 800dcc4:	18c0      	addlt	r0, r0, r3
 800dcc6:	4770      	bx	lr

0800dcc8 <_read_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4d07      	ldr	r5, [pc, #28]	; (800dce8 <_read_r+0x20>)
 800dccc:	4604      	mov	r4, r0
 800dcce:	4608      	mov	r0, r1
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	602a      	str	r2, [r5, #0]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	f7f7 fecc 	bl	8005a74 <_read>
 800dcdc:	1c43      	adds	r3, r0, #1
 800dcde:	d102      	bne.n	800dce6 <_read_r+0x1e>
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	b103      	cbz	r3, 800dce6 <_read_r+0x1e>
 800dce4:	6023      	str	r3, [r4, #0]
 800dce6:	bd38      	pop	{r3, r4, r5, pc}
 800dce8:	2407f208 	.word	0x2407f208

0800dcec <_sbrk>:
 800dcec:	4a04      	ldr	r2, [pc, #16]	; (800dd00 <_sbrk+0x14>)
 800dcee:	6811      	ldr	r1, [r2, #0]
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	b909      	cbnz	r1, 800dcf8 <_sbrk+0xc>
 800dcf4:	4903      	ldr	r1, [pc, #12]	; (800dd04 <_sbrk+0x18>)
 800dcf6:	6011      	str	r1, [r2, #0]
 800dcf8:	6810      	ldr	r0, [r2, #0]
 800dcfa:	4403      	add	r3, r0
 800dcfc:	6013      	str	r3, [r2, #0]
 800dcfe:	4770      	bx	lr
 800dd00:	2407f20c 	.word	0x2407f20c
 800dd04:	2407f210 	.word	0x2407f210

0800dd08 <_init>:
 800dd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0a:	bf00      	nop
 800dd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd0e:	bc08      	pop	{r3}
 800dd10:	469e      	mov	lr, r3
 800dd12:	4770      	bx	lr

0800dd14 <_fini>:
 800dd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd16:	bf00      	nop
 800dd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1a:	bc08      	pop	{r3}
 800dd1c:	469e      	mov	lr, r3
 800dd1e:	4770      	bx	lr
