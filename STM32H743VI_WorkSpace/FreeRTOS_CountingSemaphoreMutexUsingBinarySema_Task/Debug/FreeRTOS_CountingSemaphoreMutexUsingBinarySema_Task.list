
FreeRTOS_CountingSemaphoreMutexUsingBinarySema_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c86c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800cb0c  0800cb0c  0001cb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cd64  0800cd64  0001cd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cd6c  0800cd6c  0001cd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cd70  0800cd70  0001cd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  0800cd74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0007f188  24000084  0800cdf8  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2407f20c  0800cdf8  0002f20c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a0d5  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004545  00000000  00000000  0004a187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f68  00000000  00000000  0004e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001da0  00000000  00000000  00050638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039a4f  00000000  00000000  000523d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000277bb  00000000  00000000  0008be27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017eae8  00000000  00000000  000b35e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002320ca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008c0c  00000000  00000000  0023211c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800caf4 	.word	0x0800caf4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	0800caf4 	.word	0x0800caf4

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	24006aa0 	.word	0x24006aa0

08000374 <strlen>:
 8000374:	4603      	mov	r3, r0
 8000376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800037a:	2a00      	cmp	r2, #0
 800037c:	d1fb      	bne.n	8000376 <strlen+0x2>
 800037e:	1a18      	subs	r0, r3, r0
 8000380:	3801      	subs	r0, #1
 8000382:	4770      	bx	lr
	...

08000390 <memchr>:
 8000390:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000394:	2a10      	cmp	r2, #16
 8000396:	db2b      	blt.n	80003f0 <memchr+0x60>
 8000398:	f010 0f07 	tst.w	r0, #7
 800039c:	d008      	beq.n	80003b0 <memchr+0x20>
 800039e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a2:	3a01      	subs	r2, #1
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d02d      	beq.n	8000404 <memchr+0x74>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	b342      	cbz	r2, 8000400 <memchr+0x70>
 80003ae:	d1f6      	bne.n	800039e <memchr+0xe>
 80003b0:	b4f0      	push	{r4, r5, r6, r7}
 80003b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ba:	f022 0407 	bic.w	r4, r2, #7
 80003be:	f07f 0700 	mvns.w	r7, #0
 80003c2:	2300      	movs	r3, #0
 80003c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003c8:	3c08      	subs	r4, #8
 80003ca:	ea85 0501 	eor.w	r5, r5, r1
 80003ce:	ea86 0601 	eor.w	r6, r6, r1
 80003d2:	fa85 f547 	uadd8	r5, r5, r7
 80003d6:	faa3 f587 	sel	r5, r3, r7
 80003da:	fa86 f647 	uadd8	r6, r6, r7
 80003de:	faa5 f687 	sel	r6, r5, r7
 80003e2:	b98e      	cbnz	r6, 8000408 <memchr+0x78>
 80003e4:	d1ee      	bne.n	80003c4 <memchr+0x34>
 80003e6:	bcf0      	pop	{r4, r5, r6, r7}
 80003e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003ec:	f002 0207 	and.w	r2, r2, #7
 80003f0:	b132      	cbz	r2, 8000400 <memchr+0x70>
 80003f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003f6:	3a01      	subs	r2, #1
 80003f8:	ea83 0301 	eor.w	r3, r3, r1
 80003fc:	b113      	cbz	r3, 8000404 <memchr+0x74>
 80003fe:	d1f8      	bne.n	80003f2 <memchr+0x62>
 8000400:	2000      	movs	r0, #0
 8000402:	4770      	bx	lr
 8000404:	3801      	subs	r0, #1
 8000406:	4770      	bx	lr
 8000408:	2d00      	cmp	r5, #0
 800040a:	bf06      	itte	eq
 800040c:	4635      	moveq	r5, r6
 800040e:	3803      	subeq	r0, #3
 8000410:	3807      	subne	r0, #7
 8000412:	f015 0f01 	tst.w	r5, #1
 8000416:	d107      	bne.n	8000428 <memchr+0x98>
 8000418:	3001      	adds	r0, #1
 800041a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800041e:	bf02      	ittt	eq
 8000420:	3001      	addeq	r0, #1
 8000422:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000426:	3001      	addeq	r0, #1
 8000428:	bcf0      	pop	{r4, r5, r6, r7}
 800042a:	3801      	subs	r0, #1
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop

08000430 <__aeabi_uldivmod>:
 8000430:	b953      	cbnz	r3, 8000448 <__aeabi_uldivmod+0x18>
 8000432:	b94a      	cbnz	r2, 8000448 <__aeabi_uldivmod+0x18>
 8000434:	2900      	cmp	r1, #0
 8000436:	bf08      	it	eq
 8000438:	2800      	cmpeq	r0, #0
 800043a:	bf1c      	itt	ne
 800043c:	f04f 31ff 	movne.w	r1, #4294967295
 8000440:	f04f 30ff 	movne.w	r0, #4294967295
 8000444:	f000 b974 	b.w	8000730 <__aeabi_idiv0>
 8000448:	f1ad 0c08 	sub.w	ip, sp, #8
 800044c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000450:	f000 f806 	bl	8000460 <__udivmoddi4>
 8000454:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045c:	b004      	add	sp, #16
 800045e:	4770      	bx	lr

08000460 <__udivmoddi4>:
 8000460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000464:	9d08      	ldr	r5, [sp, #32]
 8000466:	4604      	mov	r4, r0
 8000468:	468e      	mov	lr, r1
 800046a:	2b00      	cmp	r3, #0
 800046c:	d14d      	bne.n	800050a <__udivmoddi4+0xaa>
 800046e:	428a      	cmp	r2, r1
 8000470:	4694      	mov	ip, r2
 8000472:	d969      	bls.n	8000548 <__udivmoddi4+0xe8>
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	b152      	cbz	r2, 8000490 <__udivmoddi4+0x30>
 800047a:	fa01 f302 	lsl.w	r3, r1, r2
 800047e:	f1c2 0120 	rsb	r1, r2, #32
 8000482:	fa20 f101 	lsr.w	r1, r0, r1
 8000486:	fa0c fc02 	lsl.w	ip, ip, r2
 800048a:	ea41 0e03 	orr.w	lr, r1, r3
 800048e:	4094      	lsls	r4, r2
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	0c21      	lsrs	r1, r4, #16
 8000496:	fbbe f6f8 	udiv	r6, lr, r8
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fb08 e316 	mls	r3, r8, r6, lr
 80004a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004a6:	fb06 f107 	mul.w	r1, r6, r7
 80004aa:	4299      	cmp	r1, r3
 80004ac:	d90a      	bls.n	80004c4 <__udivmoddi4+0x64>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80004b6:	f080 811f 	bcs.w	80006f8 <__udivmoddi4+0x298>
 80004ba:	4299      	cmp	r1, r3
 80004bc:	f240 811c 	bls.w	80006f8 <__udivmoddi4+0x298>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3310 	mls	r3, r8, r0, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb00 f707 	mul.w	r7, r0, r7
 80004d8:	42a7      	cmp	r7, r4
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x92>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e4:	f080 810a 	bcs.w	80006fc <__udivmoddi4+0x29c>
 80004e8:	42a7      	cmp	r7, r4
 80004ea:	f240 8107 	bls.w	80006fc <__udivmoddi4+0x29c>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004f6:	1be4      	subs	r4, r4, r7
 80004f8:	2600      	movs	r6, #0
 80004fa:	b11d      	cbz	r5, 8000504 <__udivmoddi4+0xa4>
 80004fc:	40d4      	lsrs	r4, r2
 80004fe:	2300      	movs	r3, #0
 8000500:	e9c5 4300 	strd	r4, r3, [r5]
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	428b      	cmp	r3, r1
 800050c:	d909      	bls.n	8000522 <__udivmoddi4+0xc2>
 800050e:	2d00      	cmp	r5, #0
 8000510:	f000 80ef 	beq.w	80006f2 <__udivmoddi4+0x292>
 8000514:	2600      	movs	r6, #0
 8000516:	e9c5 0100 	strd	r0, r1, [r5]
 800051a:	4630      	mov	r0, r6
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	fab3 f683 	clz	r6, r3
 8000526:	2e00      	cmp	r6, #0
 8000528:	d14a      	bne.n	80005c0 <__udivmoddi4+0x160>
 800052a:	428b      	cmp	r3, r1
 800052c:	d302      	bcc.n	8000534 <__udivmoddi4+0xd4>
 800052e:	4282      	cmp	r2, r0
 8000530:	f200 80f9 	bhi.w	8000726 <__udivmoddi4+0x2c6>
 8000534:	1a84      	subs	r4, r0, r2
 8000536:	eb61 0303 	sbc.w	r3, r1, r3
 800053a:	2001      	movs	r0, #1
 800053c:	469e      	mov	lr, r3
 800053e:	2d00      	cmp	r5, #0
 8000540:	d0e0      	beq.n	8000504 <__udivmoddi4+0xa4>
 8000542:	e9c5 4e00 	strd	r4, lr, [r5]
 8000546:	e7dd      	b.n	8000504 <__udivmoddi4+0xa4>
 8000548:	b902      	cbnz	r2, 800054c <__udivmoddi4+0xec>
 800054a:	deff      	udf	#255	; 0xff
 800054c:	fab2 f282 	clz	r2, r2
 8000550:	2a00      	cmp	r2, #0
 8000552:	f040 8092 	bne.w	800067a <__udivmoddi4+0x21a>
 8000556:	eba1 010c 	sub.w	r1, r1, ip
 800055a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800055e:	fa1f fe8c 	uxth.w	lr, ip
 8000562:	2601      	movs	r6, #1
 8000564:	0c20      	lsrs	r0, r4, #16
 8000566:	fbb1 f3f7 	udiv	r3, r1, r7
 800056a:	fb07 1113 	mls	r1, r7, r3, r1
 800056e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000572:	fb0e f003 	mul.w	r0, lr, r3
 8000576:	4288      	cmp	r0, r1
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x12c>
 800057a:	eb1c 0101 	adds.w	r1, ip, r1
 800057e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x12a>
 8000584:	4288      	cmp	r0, r1
 8000586:	f200 80cb 	bhi.w	8000720 <__udivmoddi4+0x2c0>
 800058a:	4643      	mov	r3, r8
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb1 f0f7 	udiv	r0, r1, r7
 8000594:	fb07 1110 	mls	r1, r7, r0, r1
 8000598:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800059c:	fb0e fe00 	mul.w	lr, lr, r0
 80005a0:	45a6      	cmp	lr, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x156>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80005ac:	d202      	bcs.n	80005b4 <__udivmoddi4+0x154>
 80005ae:	45a6      	cmp	lr, r4
 80005b0:	f200 80bb 	bhi.w	800072a <__udivmoddi4+0x2ca>
 80005b4:	4608      	mov	r0, r1
 80005b6:	eba4 040e 	sub.w	r4, r4, lr
 80005ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005be:	e79c      	b.n	80004fa <__udivmoddi4+0x9a>
 80005c0:	f1c6 0720 	rsb	r7, r6, #32
 80005c4:	40b3      	lsls	r3, r6
 80005c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80005ce:	fa20 f407 	lsr.w	r4, r0, r7
 80005d2:	fa01 f306 	lsl.w	r3, r1, r6
 80005d6:	431c      	orrs	r4, r3
 80005d8:	40f9      	lsrs	r1, r7
 80005da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005de:	fa00 f306 	lsl.w	r3, r0, r6
 80005e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80005e6:	0c20      	lsrs	r0, r4, #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fb09 1118 	mls	r1, r9, r8, r1
 80005f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005f4:	fb08 f00e 	mul.w	r0, r8, lr
 80005f8:	4288      	cmp	r0, r1
 80005fa:	fa02 f206 	lsl.w	r2, r2, r6
 80005fe:	d90b      	bls.n	8000618 <__udivmoddi4+0x1b8>
 8000600:	eb1c 0101 	adds.w	r1, ip, r1
 8000604:	f108 3aff 	add.w	sl, r8, #4294967295
 8000608:	f080 8088 	bcs.w	800071c <__udivmoddi4+0x2bc>
 800060c:	4288      	cmp	r0, r1
 800060e:	f240 8085 	bls.w	800071c <__udivmoddi4+0x2bc>
 8000612:	f1a8 0802 	sub.w	r8, r8, #2
 8000616:	4461      	add	r1, ip
 8000618:	1a09      	subs	r1, r1, r0
 800061a:	b2a4      	uxth	r4, r4
 800061c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000620:	fb09 1110 	mls	r1, r9, r0, r1
 8000624:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000628:	fb00 fe0e 	mul.w	lr, r0, lr
 800062c:	458e      	cmp	lr, r1
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x1e2>
 8000630:	eb1c 0101 	adds.w	r1, ip, r1
 8000634:	f100 34ff 	add.w	r4, r0, #4294967295
 8000638:	d26c      	bcs.n	8000714 <__udivmoddi4+0x2b4>
 800063a:	458e      	cmp	lr, r1
 800063c:	d96a      	bls.n	8000714 <__udivmoddi4+0x2b4>
 800063e:	3802      	subs	r0, #2
 8000640:	4461      	add	r1, ip
 8000642:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000646:	fba0 9402 	umull	r9, r4, r0, r2
 800064a:	eba1 010e 	sub.w	r1, r1, lr
 800064e:	42a1      	cmp	r1, r4
 8000650:	46c8      	mov	r8, r9
 8000652:	46a6      	mov	lr, r4
 8000654:	d356      	bcc.n	8000704 <__udivmoddi4+0x2a4>
 8000656:	d053      	beq.n	8000700 <__udivmoddi4+0x2a0>
 8000658:	b15d      	cbz	r5, 8000672 <__udivmoddi4+0x212>
 800065a:	ebb3 0208 	subs.w	r2, r3, r8
 800065e:	eb61 010e 	sbc.w	r1, r1, lr
 8000662:	fa01 f707 	lsl.w	r7, r1, r7
 8000666:	fa22 f306 	lsr.w	r3, r2, r6
 800066a:	40f1      	lsrs	r1, r6
 800066c:	431f      	orrs	r7, r3
 800066e:	e9c5 7100 	strd	r7, r1, [r5]
 8000672:	2600      	movs	r6, #0
 8000674:	4631      	mov	r1, r6
 8000676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	40d8      	lsrs	r0, r3
 8000680:	fa0c fc02 	lsl.w	ip, ip, r2
 8000684:	fa21 f303 	lsr.w	r3, r1, r3
 8000688:	4091      	lsls	r1, r2
 800068a:	4301      	orrs	r1, r0
 800068c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000690:	fa1f fe8c 	uxth.w	lr, ip
 8000694:	fbb3 f0f7 	udiv	r0, r3, r7
 8000698:	fb07 3610 	mls	r6, r7, r0, r3
 800069c:	0c0b      	lsrs	r3, r1, #16
 800069e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006a2:	fb00 f60e 	mul.w	r6, r0, lr
 80006a6:	429e      	cmp	r6, r3
 80006a8:	fa04 f402 	lsl.w	r4, r4, r2
 80006ac:	d908      	bls.n	80006c0 <__udivmoddi4+0x260>
 80006ae:	eb1c 0303 	adds.w	r3, ip, r3
 80006b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006b6:	d22f      	bcs.n	8000718 <__udivmoddi4+0x2b8>
 80006b8:	429e      	cmp	r6, r3
 80006ba:	d92d      	bls.n	8000718 <__udivmoddi4+0x2b8>
 80006bc:	3802      	subs	r0, #2
 80006be:	4463      	add	r3, ip
 80006c0:	1b9b      	subs	r3, r3, r6
 80006c2:	b289      	uxth	r1, r1
 80006c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80006c8:	fb07 3316 	mls	r3, r7, r6, r3
 80006cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006d0:	fb06 f30e 	mul.w	r3, r6, lr
 80006d4:	428b      	cmp	r3, r1
 80006d6:	d908      	bls.n	80006ea <__udivmoddi4+0x28a>
 80006d8:	eb1c 0101 	adds.w	r1, ip, r1
 80006dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80006e0:	d216      	bcs.n	8000710 <__udivmoddi4+0x2b0>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d914      	bls.n	8000710 <__udivmoddi4+0x2b0>
 80006e6:	3e02      	subs	r6, #2
 80006e8:	4461      	add	r1, ip
 80006ea:	1ac9      	subs	r1, r1, r3
 80006ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006f0:	e738      	b.n	8000564 <__udivmoddi4+0x104>
 80006f2:	462e      	mov	r6, r5
 80006f4:	4628      	mov	r0, r5
 80006f6:	e705      	b.n	8000504 <__udivmoddi4+0xa4>
 80006f8:	4606      	mov	r6, r0
 80006fa:	e6e3      	b.n	80004c4 <__udivmoddi4+0x64>
 80006fc:	4618      	mov	r0, r3
 80006fe:	e6f8      	b.n	80004f2 <__udivmoddi4+0x92>
 8000700:	454b      	cmp	r3, r9
 8000702:	d2a9      	bcs.n	8000658 <__udivmoddi4+0x1f8>
 8000704:	ebb9 0802 	subs.w	r8, r9, r2
 8000708:	eb64 0e0c 	sbc.w	lr, r4, ip
 800070c:	3801      	subs	r0, #1
 800070e:	e7a3      	b.n	8000658 <__udivmoddi4+0x1f8>
 8000710:	4646      	mov	r6, r8
 8000712:	e7ea      	b.n	80006ea <__udivmoddi4+0x28a>
 8000714:	4620      	mov	r0, r4
 8000716:	e794      	b.n	8000642 <__udivmoddi4+0x1e2>
 8000718:	4640      	mov	r0, r8
 800071a:	e7d1      	b.n	80006c0 <__udivmoddi4+0x260>
 800071c:	46d0      	mov	r8, sl
 800071e:	e77b      	b.n	8000618 <__udivmoddi4+0x1b8>
 8000720:	3b02      	subs	r3, #2
 8000722:	4461      	add	r1, ip
 8000724:	e732      	b.n	800058c <__udivmoddi4+0x12c>
 8000726:	4630      	mov	r0, r6
 8000728:	e709      	b.n	800053e <__udivmoddi4+0xde>
 800072a:	4464      	add	r4, ip
 800072c:	3802      	subs	r0, #2
 800072e:	e742      	b.n	80005b6 <__udivmoddi4+0x156>

08000730 <__aeabi_idiv0>:
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f103 0208 	add.w	r2, r3, #8
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f04f 32ff 	mov.w	r2, #4294967295
 800074c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f103 0208 	add.w	r2, r3, #8
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f103 0208 	add.w	r2, r3, #8
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800078e:	b480      	push	{r7}
 8000790:	b085      	sub	sp, #20
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ec:	d103      	bne.n	80007f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	e00c      	b.n	8000810 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3308      	adds	r3, #8
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e002      	b.n	8000804 <vListInsert+0x2e>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	429a      	cmp	r2, r3
 800080e:	d2f6      	bcs.n	80007fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	683a      	ldr	r2, [r7, #0]
 800081e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	601a      	str	r2, [r3, #0]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	6892      	ldr	r2, [r2, #8]
 800085e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	6852      	ldr	r2, [r2, #4]
 8000868:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	d103      	bne.n	800087c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10c      	bne.n	80008ca <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	b672      	cpsid	i
 80008b6:	f383 8811 	msr	BASEPRI, r3
 80008ba:	f3bf 8f6f 	isb	sy
 80008be:	f3bf 8f4f 	dsb	sy
 80008c2:	b662      	cpsie	i
 80008c4:	60bb      	str	r3, [r7, #8]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008c6:	bf00      	nop
 80008c8:	e7fe      	b.n	80008c8 <xQueueGenericReset+0x2c>

    taskENTER_CRITICAL();
 80008ca:	f001 fbc1 	bl	8002050 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008d6:	68f9      	ldr	r1, [r7, #12]
 80008d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008da:	fb01 f303 	mul.w	r3, r1, r3
 80008de:	441a      	add	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008fa:	3b01      	subs	r3, #1
 80008fc:	68f9      	ldr	r1, [r7, #12]
 80008fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000900:	fb01 f303 	mul.w	r3, r1, r3
 8000904:	441a      	add	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d109      	bne.n	8000934 <xQueueGenericReset+0x98>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d00f      	beq.n	8000948 <xQueueGenericReset+0xac>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3310      	adds	r3, #16
 800092c:	4618      	mov	r0, r3
 800092e:	f000 ff1d 	bl	800176c <xTaskRemoveFromEventList>
 8000932:	e009      	b.n	8000948 <xQueueGenericReset+0xac>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3310      	adds	r3, #16
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fefb 	bl	8000734 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3324      	adds	r3, #36	; 0x24
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fef6 	bl	8000734 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000948:	f001 fbb6 	bl	80020b8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800094c:	2301      	movs	r3, #1
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000956:	b580      	push	{r7, lr}
 8000958:	b08c      	sub	sp, #48	; 0x30
 800095a:	af02      	add	r7, sp, #8
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	4613      	mov	r3, r2
 8000962:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10c      	bne.n	8000984 <xQueueGenericCreate+0x2e>
        __asm volatile
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	b672      	cpsid	i
 8000970:	f383 8811 	msr	BASEPRI, r3
 8000974:	f3bf 8f6f 	isb	sy
 8000978:	f3bf 8f4f 	dsb	sy
 800097c:	b662      	cpsie	i
 800097e:	61bb      	str	r3, [r7, #24]
    }
 8000980:	bf00      	nop
 8000982:	e7fe      	b.n	8000982 <xQueueGenericCreate+0x2c>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <xQueueGenericCreate+0x4c>
 8000994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	fbb2 f3f3 	udiv	r3, r2, r3
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d101      	bne.n	80009a6 <xQueueGenericCreate+0x50>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <xQueueGenericCreate+0x52>
 80009a6:	2300      	movs	r3, #0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10c      	bne.n	80009c6 <xQueueGenericCreate+0x70>
        __asm volatile
 80009ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b0:	b672      	cpsid	i
 80009b2:	f383 8811 	msr	BASEPRI, r3
 80009b6:	f3bf 8f6f 	isb	sy
 80009ba:	f3bf 8f4f 	dsb	sy
 80009be:	b662      	cpsie	i
 80009c0:	617b      	str	r3, [r7, #20]
    }
 80009c2:	bf00      	nop
 80009c4:	e7fe      	b.n	80009c4 <xQueueGenericCreate+0x6e>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80009cc:	d90c      	bls.n	80009e8 <xQueueGenericCreate+0x92>
        __asm volatile
 80009ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d2:	b672      	cpsid	i
 80009d4:	f383 8811 	msr	BASEPRI, r3
 80009d8:	f3bf 8f6f 	isb	sy
 80009dc:	f3bf 8f4f 	dsb	sy
 80009e0:	b662      	cpsie	i
 80009e2:	613b      	str	r3, [r7, #16]
    }
 80009e4:	bf00      	nop
 80009e6:	e7fe      	b.n	80009e6 <xQueueGenericCreate+0x90>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	3350      	adds	r3, #80	; 0x50
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fc63 	bl	80022b8 <pvPortMalloc>
 80009f2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80009f4:	6a3b      	ldr	r3, [r7, #32]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00d      	beq.n	8000a16 <xQueueGenericCreate+0xc0>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3350      	adds	r3, #80	; 0x50
 8000a02:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	6a3b      	ldr	r3, [r7, #32]
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	69fa      	ldr	r2, [r7, #28]
 8000a0e:	68b9      	ldr	r1, [r7, #8]
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f000 f805 	bl	8000a20 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000a16:	6a3b      	ldr	r3, [r7, #32]
    }
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d103      	bne.n	8000a3c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e002      	b.n	8000a42 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000a4e:	2101      	movs	r1, #1
 8000a50:	69b8      	ldr	r0, [r7, #24]
 8000a52:	f7ff ff23 	bl	800089c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	78fa      	ldrb	r2, [r7, #3]
 8000a5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	68f9      	ldr	r1, [r7, #12]
 8000a64:	2073      	movs	r0, #115	; 0x73
 8000a66:	f003 f829 	bl	8003abc <SEGGER_SYSVIEW_RecordU32x3>
}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10c      	bne.n	8000a9c <xQueueCreateCountingSemaphore+0x2a>
        __asm volatile
 8000a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a86:	b672      	cpsid	i
 8000a88:	f383 8811 	msr	BASEPRI, r3
 8000a8c:	f3bf 8f6f 	isb	sy
 8000a90:	f3bf 8f4f 	dsb	sy
 8000a94:	b662      	cpsie	i
 8000a96:	613b      	str	r3, [r7, #16]
    }
 8000a98:	bf00      	nop
 8000a9a:	e7fe      	b.n	8000a9a <xQueueCreateCountingSemaphore+0x28>
        configASSERT( uxInitialCount <= uxMaxCount );
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d90c      	bls.n	8000abe <xQueueCreateCountingSemaphore+0x4c>
        __asm volatile
 8000aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa8:	b672      	cpsid	i
 8000aaa:	f383 8811 	msr	BASEPRI, r3
 8000aae:	f3bf 8f6f 	isb	sy
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	b662      	cpsie	i
 8000ab8:	60fb      	str	r3, [r7, #12]
    }
 8000aba:	bf00      	nop
 8000abc:	e7fe      	b.n	8000abc <xQueueCreateCountingSemaphore+0x4a>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8000abe:	2202      	movs	r2, #2
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ff47 	bl	8000956 <xQueueGenericCreate>
 8000ac8:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <xQueueCreateCountingSemaphore+0x64>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8000ad6:	697b      	ldr	r3, [r7, #20]
    }
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8000aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10c      	bne.n	8000b0e <xQueueGiveFromISR+0x2e>
        __asm volatile
 8000af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af8:	b672      	cpsid	i
 8000afa:	f383 8811 	msr	BASEPRI, r3
 8000afe:	f3bf 8f6f 	isb	sy
 8000b02:	f3bf 8f4f 	dsb	sy
 8000b06:	b662      	cpsie	i
 8000b08:	623b      	str	r3, [r7, #32]
    }
 8000b0a:	bf00      	nop
 8000b0c:	e7fe      	b.n	8000b0c <xQueueGiveFromISR+0x2c>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00c      	beq.n	8000b30 <xQueueGiveFromISR+0x50>
        __asm volatile
 8000b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b1a:	b672      	cpsid	i
 8000b1c:	f383 8811 	msr	BASEPRI, r3
 8000b20:	f3bf 8f6f 	isb	sy
 8000b24:	f3bf 8f4f 	dsb	sy
 8000b28:	b662      	cpsie	i
 8000b2a:	61fb      	str	r3, [r7, #28]
    }
 8000b2c:	bf00      	nop
 8000b2e:	e7fe      	b.n	8000b2e <xQueueGiveFromISR+0x4e>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d103      	bne.n	8000b40 <xQueueGiveFromISR+0x60>
 8000b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d101      	bne.n	8000b44 <xQueueGiveFromISR+0x64>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <xQueueGiveFromISR+0x66>
 8000b44:	2300      	movs	r3, #0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10c      	bne.n	8000b64 <xQueueGiveFromISR+0x84>
        __asm volatile
 8000b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b4e:	b672      	cpsid	i
 8000b50:	f383 8811 	msr	BASEPRI, r3
 8000b54:	f3bf 8f6f 	isb	sy
 8000b58:	f3bf 8f4f 	dsb	sy
 8000b5c:	b662      	cpsie	i
 8000b5e:	61bb      	str	r3, [r7, #24]
    }
 8000b60:	bf00      	nop
 8000b62:	e7fe      	b.n	8000b62 <xQueueGiveFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b64:	f001 fb64 	bl	8002230 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b68:	f3ef 8211 	mrs	r2, BASEPRI
 8000b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b70:	b672      	cpsid	i
 8000b72:	f383 8811 	msr	BASEPRI, r3
 8000b76:	f3bf 8f6f 	isb	sy
 8000b7a:	f3bf 8f4f 	dsb	sy
 8000b7e:	b662      	cpsie	i
 8000b80:	617a      	str	r2, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b84:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d246      	bcs.n	8000c26 <xQueueGiveFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 fd17 	bl	80045d8 <SEGGER_SYSVIEW_ShrinkId>
 8000baa:	4601      	mov	r1, r0
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2060      	movs	r0, #96	; 0x60
 8000bb2:	f002 ff29 	bl	8003a08 <SEGGER_SYSVIEW_RecordU32x2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bbc:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc6:	d112      	bne.n	8000bee <xQueueGiveFromISR+0x10e>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d027      	beq.n	8000c20 <xQueueGiveFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd2:	3324      	adds	r3, #36	; 0x24
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fdc9 	bl	800176c <xTaskRemoveFromEventList>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d01f      	beq.n	8000c20 <xQueueGiveFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d01c      	beq.n	8000c20 <xQueueGiveFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e018      	b.n	8000c20 <xQueueGiveFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000bee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf4:	d10c      	bne.n	8000c10 <xQueueGiveFromISR+0x130>
        __asm volatile
 8000bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfa:	b672      	cpsid	i
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	b662      	cpsie	i
 8000c0a:	60fb      	str	r3, [r7, #12]
    }
 8000c0c:	bf00      	nop
 8000c0e:	e7fe      	b.n	8000c0e <xQueueGiveFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c14:	3301      	adds	r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	b25a      	sxtb	r2, r3
 8000c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000c20:	2301      	movs	r3, #1
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
 8000c24:	e00b      	b.n	8000c3e <xQueueGiveFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 fcd5 	bl	80045d8 <SEGGER_SYSVIEW_ShrinkId>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	2060      	movs	r0, #96	; 0x60
 8000c36:	f002 fee7 	bl	8003a08 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c40:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c48:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3738      	adds	r7, #56	; 0x38
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b091      	sub	sp, #68	; 0x44
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10c      	bne.n	8000c8a <xQueueSemaphoreTake+0x36>
        __asm volatile
 8000c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c74:	b672      	cpsid	i
 8000c76:	f383 8811 	msr	BASEPRI, r3
 8000c7a:	f3bf 8f6f 	isb	sy
 8000c7e:	f3bf 8f4f 	dsb	sy
 8000c82:	b662      	cpsie	i
 8000c84:	623b      	str	r3, [r7, #32]
    }
 8000c86:	bf00      	nop
 8000c88:	e7fe      	b.n	8000c88 <xQueueSemaphoreTake+0x34>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00c      	beq.n	8000cac <xQueueSemaphoreTake+0x58>
        __asm volatile
 8000c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c96:	b672      	cpsid	i
 8000c98:	f383 8811 	msr	BASEPRI, r3
 8000c9c:	f3bf 8f6f 	isb	sy
 8000ca0:	f3bf 8f4f 	dsb	sy
 8000ca4:	b662      	cpsie	i
 8000ca6:	61fb      	str	r3, [r7, #28]
    }
 8000ca8:	bf00      	nop
 8000caa:	e7fe      	b.n	8000caa <xQueueSemaphoreTake+0x56>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cac:	f000 fefe 	bl	8001aac <xTaskGetSchedulerState>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d102      	bne.n	8000cbc <xQueueSemaphoreTake+0x68>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <xQueueSemaphoreTake+0x6c>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <xQueueSemaphoreTake+0x6e>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10c      	bne.n	8000ce0 <xQueueSemaphoreTake+0x8c>
        __asm volatile
 8000cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cca:	b672      	cpsid	i
 8000ccc:	f383 8811 	msr	BASEPRI, r3
 8000cd0:	f3bf 8f6f 	isb	sy
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	b662      	cpsie	i
 8000cda:	61bb      	str	r3, [r7, #24]
    }
 8000cdc:	bf00      	nop
 8000cde:	e7fe      	b.n	8000cde <xQueueSemaphoreTake+0x8a>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000ce0:	f001 f9b6 	bl	8002050 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d029      	beq.n	8000d44 <xQueueSemaphoreTake+0xf0>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8000cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fc70 	bl	80045d8 <SEGGER_SYSVIEW_ShrinkId>
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f003 fc6c 	bl	80045d8 <SEGGER_SYSVIEW_ShrinkId>
 8000d00:	4602      	mov	r2, r0
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	9100      	str	r1, [sp, #0]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	205c      	movs	r0, #92	; 0x5c
 8000d0c:	f002 ff4c 	bl	8003ba8 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d12:	1e5a      	subs	r2, r3, #1
 8000d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d16:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d104      	bne.n	8000d2a <xQueueSemaphoreTake+0xd6>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000d20:	f000 fff8 	bl	8001d14 <pvTaskIncrementMutexHeldCount>
 8000d24:	4602      	mov	r2, r0
 8000d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d28:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d004      	beq.n	8000d3c <xQueueSemaphoreTake+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d34:	3310      	adds	r3, #16
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fd18 	bl	800176c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d3c:	f001 f9bc 	bl	80020b8 <vPortExitCritical>
                return pdPASS;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e0b9      	b.n	8000eb8 <xQueueSemaphoreTake+0x264>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d123      	bne.n	8000d92 <xQueueSemaphoreTake+0x13e>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8000d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00c      	beq.n	8000d6a <xQueueSemaphoreTake+0x116>
        __asm volatile
 8000d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d54:	b672      	cpsid	i
 8000d56:	f383 8811 	msr	BASEPRI, r3
 8000d5a:	f3bf 8f6f 	isb	sy
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	b662      	cpsie	i
 8000d64:	617b      	str	r3, [r7, #20]
    }
 8000d66:	bf00      	nop
 8000d68:	e7fe      	b.n	8000d68 <xQueueSemaphoreTake+0x114>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000d6a:	f001 f9a5 	bl	80020b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fc31 	bl	80045d8 <SEGGER_SYSVIEW_ShrinkId>
 8000d76:	4604      	mov	r4, r0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f003 fc2d 	bl	80045d8 <SEGGER_SYSVIEW_ShrinkId>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2101      	movs	r1, #1
 8000d84:	9100      	str	r1, [sp, #0]
 8000d86:	4621      	mov	r1, r4
 8000d88:	205c      	movs	r0, #92	; 0x5c
 8000d8a:	f002 ff0d 	bl	8003ba8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e092      	b.n	8000eb8 <xQueueSemaphoreTake+0x264>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d106      	bne.n	8000da6 <xQueueSemaphoreTake+0x152>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fd4d 	bl	800183c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000da2:	2301      	movs	r3, #1
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000da6:	f001 f987 	bl	80020b8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000daa:	f000 fafd 	bl	80013a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000dae:	f001 f94f 	bl	8002050 <vPortEnterCritical>
 8000db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbe:	d103      	bne.n	8000dc8 <xQueueSemaphoreTake+0x174>
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d103      	bne.n	8000dde <xQueueSemaphoreTake+0x18a>
 8000dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000dde:	f001 f96b 	bl	80020b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000de2:	463a      	mov	r2, r7
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fd3c 	bl	8001868 <xTaskCheckForTimeOut>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d132      	bne.n	8000e5c <xQueueSemaphoreTake+0x208>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000df8:	f000 f8ce 	bl	8000f98 <prvIsQueueEmpty>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d026      	beq.n	8000e50 <xQueueSemaphoreTake+0x1fc>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d109      	bne.n	8000e1e <xQueueSemaphoreTake+0x1ca>
                        {
                            taskENTER_CRITICAL();
 8000e0a:	f001 f921 	bl	8002050 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fe68 	bl	8001ae8 <xTaskPriorityInherit>
 8000e18:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8000e1a:	f001 f94d 	bl	80020b8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e20:	3324      	adds	r3, #36	; 0x24
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fc7a 	bl	8001720 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e2e:	f000 f861 	bl	8000ef4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e32:	f000 fac7 	bl	80013c4 <xTaskResumeAll>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f47f af51 	bne.w	8000ce0 <xQueueSemaphoreTake+0x8c>
                {
                    portYIELD_WITHIN_API();
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <xQueueSemaphoreTake+0x26c>)
 8000e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	f3bf 8f6f 	isb	sy
 8000e4e:	e747      	b.n	8000ce0 <xQueueSemaphoreTake+0x8c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000e50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e52:	f000 f84f 	bl	8000ef4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e56:	f000 fab5 	bl	80013c4 <xTaskResumeAll>
 8000e5a:	e741      	b.n	8000ce0 <xQueueSemaphoreTake+0x8c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e5e:	f000 f849 	bl	8000ef4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e62:	f000 faaf 	bl	80013c4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e68:	f000 f896 	bl	8000f98 <prvIsQueueEmpty>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f43f af36 	beq.w	8000ce0 <xQueueSemaphoreTake+0x8c>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8000e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00d      	beq.n	8000e96 <xQueueSemaphoreTake+0x242>
                        {
                            taskENTER_CRITICAL();
 8000e7a:	f001 f8e9 	bl	8002050 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e80:	f000 f820 	bl	8000ec4 <prvGetDisinheritPriorityAfterTimeout>
 8000e84:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fea5 	bl	8001bdc <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8000e92:	f001 f911 	bl	80020b8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fb9d 	bl	80045d8 <SEGGER_SYSVIEW_ShrinkId>
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f003 fb99 	bl	80045d8 <SEGGER_SYSVIEW_ShrinkId>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	9100      	str	r1, [sp, #0]
 8000eae:	4621      	mov	r1, r4
 8000eb0:	205c      	movs	r0, #92	; 0x5c
 8000eb2:	f002 fe79 	bl	8003ba8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000eb6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	373c      	adds	r7, #60	; 0x3c
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	e000ed04 	.word	0xe000ed04

08000ec4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	e001      	b.n	8000ee6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    }
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000efc:	f001 f8a8 	bl	8002050 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f06:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f08:	e011      	b.n	8000f2e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d012      	beq.n	8000f38 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3324      	adds	r3, #36	; 0x24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fc28 	bl	800176c <xTaskRemoveFromEventList>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000f22:	f000 fd0b 	bl	800193c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	dce9      	bgt.n	8000f0a <prvUnlockQueue+0x16>
 8000f36:	e000      	b.n	8000f3a <prvUnlockQueue+0x46>
                        break;
 8000f38:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	22ff      	movs	r2, #255	; 0xff
 8000f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000f42:	f001 f8b9 	bl	80020b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000f46:	f001 f883 	bl	8002050 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f50:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f52:	e011      	b.n	8000f78 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d012      	beq.n	8000f82 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3310      	adds	r3, #16
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fc03 	bl	800176c <xTaskRemoveFromEventList>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000f6c:	f000 fce6 	bl	800193c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	dce9      	bgt.n	8000f54 <prvUnlockQueue+0x60>
 8000f80:	e000      	b.n	8000f84 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000f82:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	22ff      	movs	r2, #255	; 0xff
 8000f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000f8c:	f001 f894 	bl	80020b8 <vPortExitCritical>
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000fa0:	f001 f856 	bl	8002050 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e001      	b.n	8000fb6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000fb6:	f001 f87f 	bl	80020b8 <vPortExitCritical>

    return xReturn;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 f96d 	bl	80022b8 <pvPortMalloc>
 8000fde:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00e      	beq.n	8001004 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000fe6:	205c      	movs	r0, #92	; 0x5c
 8000fe8:	f001 f966 	bl	80022b8 <pvPortMalloc>
 8000fec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffa:	e005      	b.n	8001008 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000ffc:	6978      	ldr	r0, [r7, #20]
 8000ffe:	f001 fa41 	bl	8002484 <vPortFree>
 8001002:	e001      	b.n	8001008 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d013      	beq.n	8001036 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800100e:	88fa      	ldrh	r2, [r7, #6]
 8001010:	2300      	movs	r3, #0
 8001012:	9303      	str	r3, [sp, #12]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 f80e 	bl	8001046 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800102a:	69f8      	ldr	r0, [r7, #28]
 800102c:	f000 f8a4 	bl	8001178 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001030:	2301      	movs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	e002      	b.n	800103c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800103c:	69bb      	ldr	r3, [r7, #24]
    }
 800103e:	4618      	mov	r0, r3
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001056:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	461a      	mov	r2, r3
 800105e:	21a5      	movs	r1, #165	; 0xa5
 8001060:	f00b f8d2 	bl	800c208 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800106e:	440b      	add	r3, r1
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f023 0307 	bic.w	r3, r3, #7
 800107c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00c      	beq.n	80010a2 <prvInitialiseNewTask+0x5c>
        __asm volatile
 8001088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800108c:	b672      	cpsid	i
 800108e:	f383 8811 	msr	BASEPRI, r3
 8001092:	f3bf 8f6f 	isb	sy
 8001096:	f3bf 8f4f 	dsb	sy
 800109a:	b662      	cpsie	i
 800109c:	617b      	str	r3, [r7, #20]
    }
 800109e:	bf00      	nop
 80010a0:	e7fe      	b.n	80010a0 <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01f      	beq.n	80010e8 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	e012      	b.n	80010d4 <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	4413      	add	r3, r2
 80010b4:	7819      	ldrb	r1, [r3, #0]
 80010b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	4413      	add	r3, r2
 80010bc:	3334      	adds	r3, #52	; 0x34
 80010be:	460a      	mov	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	4413      	add	r3, r2
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d006      	beq.n	80010dc <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3301      	adds	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	d9e9      	bls.n	80010ae <prvInitialiseNewTask+0x68>
 80010da:	e000      	b.n	80010de <prvInitialiseNewTask+0x98>
            {
                break;
 80010dc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80010de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80010e6:	e003      	b.n	80010f0 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80010e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80010f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d901      	bls.n	80010fa <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80010f6:	2306      	movs	r3, #6
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80010fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001104:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8001106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001108:	2200      	movs	r2, #0
 800110a:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800110c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110e:	3304      	adds	r3, #4
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fb2f 	bl	8000774 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001118:	3318      	adds	r3, #24
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fb2a 	bl	8000774 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001124:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001128:	f1c3 0207 	rsb	r2, r3, #7
 800112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001138:	3354      	adds	r3, #84	; 0x54
 800113a:	2204      	movs	r2, #4
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00b f862 	bl	800c208 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001146:	3358      	adds	r3, #88	; 0x58
 8001148:	2201      	movs	r2, #1
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f00b f85b 	bl	800c208 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	68f9      	ldr	r1, [r7, #12]
 8001156:	69b8      	ldr	r0, [r7, #24]
 8001158:	f000 fe68 	bl	8001e2c <pxPortInitialiseStack>
 800115c:	4602      	mov	r2, r0
 800115e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001160:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800116c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800116e:	bf00      	nop
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001180:	f000 ff66 	bl	8002050 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001184:	4b35      	ldr	r3, [pc, #212]	; (800125c <prvAddNewTaskToReadyList+0xe4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4a34      	ldr	r2, [pc, #208]	; (800125c <prvAddNewTaskToReadyList+0xe4>)
 800118c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800118e:	4b34      	ldr	r3, [pc, #208]	; (8001260 <prvAddNewTaskToReadyList+0xe8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d109      	bne.n	80011aa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001196:	4a32      	ldr	r2, [pc, #200]	; (8001260 <prvAddNewTaskToReadyList+0xe8>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <prvAddNewTaskToReadyList+0xe4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d110      	bne.n	80011c6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80011a4:	f000 fbe8 	bl	8001978 <prvInitialiseTaskLists>
 80011a8:	e00d      	b.n	80011c6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <prvAddNewTaskToReadyList+0xec>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <prvAddNewTaskToReadyList+0xe8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011bc:	429a      	cmp	r2, r3
 80011be:	d802      	bhi.n	80011c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80011c0:	4a27      	ldr	r2, [pc, #156]	; (8001260 <prvAddNewTaskToReadyList+0xe8>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80011c6:	4b28      	ldr	r3, [pc, #160]	; (8001268 <prvAddNewTaskToReadyList+0xf0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <prvAddNewTaskToReadyList+0xf0>)
 80011ce:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <prvAddNewTaskToReadyList+0xf0>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d016      	beq.n	800120c <prvAddNewTaskToReadyList+0x94>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 f8d3 	bl	800438c <SEGGER_SYSVIEW_OnTaskCreate>
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	461d      	mov	r5, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	461c      	mov	r4, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	1ae3      	subs	r3, r4, r3
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	462b      	mov	r3, r5
 8001208:	f001 fb0e 	bl	8002828 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f003 f940 	bl	8004494 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	2201      	movs	r2, #1
 800121a:	409a      	lsls	r2, r3
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <prvAddNewTaskToReadyList+0xf4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4313      	orrs	r3, r2
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <prvAddNewTaskToReadyList+0xf4>)
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <prvAddNewTaskToReadyList+0xf8>)
 8001234:	441a      	add	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3304      	adds	r3, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4610      	mov	r0, r2
 800123e:	f7ff faa6 	bl	800078e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001242:	f000 ff39 	bl	80020b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <prvAddNewTaskToReadyList+0xec>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <prvAddNewTaskToReadyList+0xe8>)
 8001250:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bdb0      	pop	{r4, r5, r7, pc}
 800125a:	bf00      	nop
 800125c:	240001a0 	.word	0x240001a0
 8001260:	240000a0 	.word	0x240000a0
 8001264:	240001ac 	.word	0x240001ac
 8001268:	240001bc 	.word	0x240001bc
 800126c:	240001a8 	.word	0x240001a8
 8001270:	240000a4 	.word	0x240000a4

08001274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01d      	beq.n	80012c2 <vTaskDelay+0x4e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <vTaskDelay+0x6c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00c      	beq.n	80012a8 <vTaskDelay+0x34>
        __asm volatile
 800128e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001292:	b672      	cpsid	i
 8001294:	f383 8811 	msr	BASEPRI, r3
 8001298:	f3bf 8f6f 	isb	sy
 800129c:	f3bf 8f4f 	dsb	sy
 80012a0:	b662      	cpsie	i
 80012a2:	60bb      	str	r3, [r7, #8]
    }
 80012a4:	bf00      	nop
 80012a6:	e7fe      	b.n	80012a6 <vTaskDelay+0x32>
            vTaskSuspendAll();
 80012a8:	f000 f87e 	bl	80013a8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	2023      	movs	r0, #35	; 0x23
 80012b0:	f002 fb6e 	bl	8003990 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80012b4:	2100      	movs	r1, #0
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fd40 	bl	8001d3c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80012bc:	f000 f882 	bl	80013c4 <xTaskResumeAll>
 80012c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d107      	bne.n	80012d8 <vTaskDelay+0x64>
        {
            portYIELD_WITHIN_API();
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <vTaskDelay+0x70>)
 80012ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	f3bf 8f4f 	dsb	sy
 80012d4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	240001c8 	.word	0x240001c8
 80012e4:	e000ed04 	.word	0xe000ed04

080012e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80012ee:	4b26      	ldr	r3, [pc, #152]	; (8001388 <vTaskStartScheduler+0xa0>)
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2300      	movs	r3, #0
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	4924      	ldr	r1, [pc, #144]	; (800138c <vTaskStartScheduler+0xa4>)
 80012fc:	4824      	ldr	r0, [pc, #144]	; (8001390 <vTaskStartScheduler+0xa8>)
 80012fe:	f7ff fe61 	bl	8000fc4 <xTaskCreate>
 8001302:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d126      	bne.n	8001358 <vTaskStartScheduler+0x70>
        __asm volatile
 800130a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800130e:	b672      	cpsid	i
 8001310:	f383 8811 	msr	BASEPRI, r3
 8001314:	f3bf 8f6f 	isb	sy
 8001318:	f3bf 8f4f 	dsb	sy
 800131c:	b662      	cpsie	i
 800131e:	60bb      	str	r3, [r7, #8]
    }
 8001320:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <vTaskStartScheduler+0xac>)
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <vTaskStartScheduler+0xb0>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <vTaskStartScheduler+0xb4>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <vTaskStartScheduler+0xb8>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <vTaskStartScheduler+0xa0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d102      	bne.n	8001348 <vTaskStartScheduler+0x60>
 8001342:	f003 f807 	bl	8004354 <SEGGER_SYSVIEW_OnIdle>
 8001346:	e004      	b.n	8001352 <vTaskStartScheduler+0x6a>
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <vTaskStartScheduler+0xb8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f003 f85f 	bl	8004410 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001352:	f000 fdff 	bl	8001f54 <xPortStartScheduler>
 8001356:	e010      	b.n	800137a <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d10c      	bne.n	800137a <vTaskStartScheduler+0x92>
        __asm volatile
 8001360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001364:	b672      	cpsid	i
 8001366:	f383 8811 	msr	BASEPRI, r3
 800136a:	f3bf 8f6f 	isb	sy
 800136e:	f3bf 8f4f 	dsb	sy
 8001372:	b662      	cpsie	i
 8001374:	607b      	str	r3, [r7, #4]
    }
 8001376:	bf00      	nop
 8001378:	e7fe      	b.n	8001378 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <vTaskStartScheduler+0xbc>)
 800137c:	681b      	ldr	r3, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	240001c4 	.word	0x240001c4
 800138c:	0800cb0c 	.word	0x0800cb0c
 8001390:	08001955 	.word	0x08001955
 8001394:	240001c0 	.word	0x240001c0
 8001398:	240001ac 	.word	0x240001ac
 800139c:	240001a4 	.word	0x240001a4
 80013a0:	240000a0 	.word	0x240000a0
 80013a4:	24000000 	.word	0x24000000

080013a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <vTaskSuspendAll+0x18>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <vTaskSuspendAll+0x18>)
 80013b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	240001c8 	.word	0x240001c8

080013c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80013d2:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <xTaskResumeAll+0x108>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10c      	bne.n	80013f4 <xTaskResumeAll+0x30>
        __asm volatile
 80013da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013de:	b672      	cpsid	i
 80013e0:	f383 8811 	msr	BASEPRI, r3
 80013e4:	f3bf 8f6f 	isb	sy
 80013e8:	f3bf 8f4f 	dsb	sy
 80013ec:	b662      	cpsie	i
 80013ee:	603b      	str	r3, [r7, #0]
    }
 80013f0:	bf00      	nop
 80013f2:	e7fe      	b.n	80013f2 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80013f4:	f000 fe2c 	bl	8002050 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80013f8:	4b34      	ldr	r3, [pc, #208]	; (80014cc <xTaskResumeAll+0x108>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4a33      	ldr	r2, [pc, #204]	; (80014cc <xTaskResumeAll+0x108>)
 8001400:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001402:	4b32      	ldr	r3, [pc, #200]	; (80014cc <xTaskResumeAll+0x108>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d159      	bne.n	80014be <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <xTaskResumeAll+0x10c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d055      	beq.n	80014be <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001412:	e032      	b.n	800147a <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <xTaskResumeAll+0x110>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3318      	adds	r3, #24
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fa11 	bl	8000848 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3304      	adds	r3, #4
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fa0c 	bl	8000848 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4618      	mov	r0, r3
 8001434:	f003 f82e 	bl	8004494 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	2201      	movs	r2, #1
 800143e:	409a      	lsls	r2, r3
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <xTaskResumeAll+0x114>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4313      	orrs	r3, r2
 8001446:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <xTaskResumeAll+0x114>)
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4a21      	ldr	r2, [pc, #132]	; (80014dc <xTaskResumeAll+0x118>)
 8001458:	441a      	add	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3304      	adds	r3, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4610      	mov	r0, r2
 8001462:	f7ff f994 	bl	800078e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <xTaskResumeAll+0x11c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	429a      	cmp	r2, r3
 8001472:	d302      	bcc.n	800147a <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <xTaskResumeAll+0x120>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <xTaskResumeAll+0x110>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1c8      	bne.n	8001414 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001488:	f000 faf4 	bl	8001a74 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <xTaskResumeAll+0x124>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d010      	beq.n	80014ba <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001498:	f000 f83a 	bl	8001510 <xTaskIncrementTick>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <xTaskResumeAll+0x120>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f1      	bne.n	8001498 <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <xTaskResumeAll+0x124>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <xTaskResumeAll+0x120>)
 80014bc:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80014be:	f000 fdfb 	bl	80020b8 <vPortExitCritical>

    return xAlreadyYielded;
 80014c2:	687b      	ldr	r3, [r7, #4]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	240001c8 	.word	0x240001c8
 80014d0:	240001a0 	.word	0x240001a0
 80014d4:	24000160 	.word	0x24000160
 80014d8:	240001a8 	.word	0x240001a8
 80014dc:	240000a4 	.word	0x240000a4
 80014e0:	240000a0 	.word	0x240000a0
 80014e4:	240001b4 	.word	0x240001b4
 80014e8:	240001b0 	.word	0x240001b0

080014ec <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80014f2:	f000 fe9d 	bl	8002230 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <xTaskGetTickCountFromISR+0x20>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001500:	683b      	ldr	r3, [r7, #0]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	240001a4 	.word	0x240001a4

08001510 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800151a:	4b42      	ldr	r3, [pc, #264]	; (8001624 <xTaskIncrementTick+0x114>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d175      	bne.n	800160e <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <xTaskIncrementTick+0x118>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800152a:	4a3f      	ldr	r2, [pc, #252]	; (8001628 <xTaskIncrementTick+0x118>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d122      	bne.n	800157c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <xTaskIncrementTick+0x11c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00c      	beq.n	800155a <xTaskIncrementTick+0x4a>
        __asm volatile
 8001540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001544:	b672      	cpsid	i
 8001546:	f383 8811 	msr	BASEPRI, r3
 800154a:	f3bf 8f6f 	isb	sy
 800154e:	f3bf 8f4f 	dsb	sy
 8001552:	b662      	cpsie	i
 8001554:	603b      	str	r3, [r7, #0]
    }
 8001556:	bf00      	nop
 8001558:	e7fe      	b.n	8001558 <xTaskIncrementTick+0x48>
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <xTaskIncrementTick+0x11c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4b33      	ldr	r3, [pc, #204]	; (8001630 <xTaskIncrementTick+0x120>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a31      	ldr	r2, [pc, #196]	; (800162c <xTaskIncrementTick+0x11c>)
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4a31      	ldr	r2, [pc, #196]	; (8001630 <xTaskIncrementTick+0x120>)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <xTaskIncrementTick+0x124>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	4a2f      	ldr	r2, [pc, #188]	; (8001634 <xTaskIncrementTick+0x124>)
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	f000 fa7c 	bl	8001a74 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800157c:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <xTaskIncrementTick+0x128>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	429a      	cmp	r2, r3
 8001584:	d348      	bcc.n	8001618 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <xTaskIncrementTick+0x11c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d104      	bne.n	800159a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001590:	4b29      	ldr	r3, [pc, #164]	; (8001638 <xTaskIncrementTick+0x128>)
 8001592:	f04f 32ff 	mov.w	r2, #4294967295
 8001596:	601a      	str	r2, [r3, #0]
                    break;
 8001598:	e03e      	b.n	8001618 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <xTaskIncrementTick+0x11c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d203      	bcs.n	80015ba <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80015b2:	4a21      	ldr	r2, [pc, #132]	; (8001638 <xTaskIncrementTick+0x128>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80015b8:	e02e      	b.n	8001618 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3304      	adds	r3, #4
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff f942 	bl	8000848 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d004      	beq.n	80015d6 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	3318      	adds	r3, #24
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f939 	bl	8000848 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 ff5b 	bl	8004494 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	2201      	movs	r2, #1
 80015e4:	409a      	lsls	r2, r3
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <xTaskIncrementTick+0x12c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <xTaskIncrementTick+0x12c>)
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4a10      	ldr	r2, [pc, #64]	; (8001640 <xTaskIncrementTick+0x130>)
 80015fe:	441a      	add	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	3304      	adds	r3, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f7ff f8c1 	bl	800078e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800160c:	e7bb      	b.n	8001586 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <xTaskIncrementTick+0x134>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <xTaskIncrementTick+0x134>)
 8001616:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001618:	697b      	ldr	r3, [r7, #20]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	240001c8 	.word	0x240001c8
 8001628:	240001a4 	.word	0x240001a4
 800162c:	24000158 	.word	0x24000158
 8001630:	2400015c 	.word	0x2400015c
 8001634:	240001b8 	.word	0x240001b8
 8001638:	240001c0 	.word	0x240001c0
 800163c:	240001a8 	.word	0x240001a8
 8001640:	240000a4 	.word	0x240000a4
 8001644:	240001b0 	.word	0x240001b0

08001648 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <vTaskSwitchContext+0xc0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <vTaskSwitchContext+0xc4>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800165c:	e04f      	b.n	80016fe <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 800165e:	4b2b      	ldr	r3, [pc, #172]	; (800170c <vTaskSwitchContext+0xc4>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001664:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <vTaskSwitchContext+0xc8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001672:	7afb      	ldrb	r3, [r7, #11]
 8001674:	f1c3 031f 	rsb	r3, r3, #31
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	4926      	ldr	r1, [pc, #152]	; (8001714 <vTaskSwitchContext+0xcc>)
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <vTaskSwitchContext+0x60>
        __asm volatile
 800168e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001692:	b672      	cpsid	i
 8001694:	f383 8811 	msr	BASEPRI, r3
 8001698:	f3bf 8f6f 	isb	sy
 800169c:	f3bf 8f4f 	dsb	sy
 80016a0:	b662      	cpsie	i
 80016a2:	607b      	str	r3, [r7, #4]
    }
 80016a4:	bf00      	nop
 80016a6:	e7fe      	b.n	80016a6 <vTaskSwitchContext+0x5e>
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4a18      	ldr	r2, [pc, #96]	; (8001714 <vTaskSwitchContext+0xcc>)
 80016b4:	4413      	add	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	3308      	adds	r3, #8
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d104      	bne.n	80016d8 <vTaskSwitchContext+0x90>
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <vTaskSwitchContext+0xd0>)
 80016e0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <vTaskSwitchContext+0xd0>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <vTaskSwitchContext+0xd4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d102      	bne.n	80016f4 <vTaskSwitchContext+0xac>
 80016ee:	f002 fe31 	bl	8004354 <SEGGER_SYSVIEW_OnIdle>
}
 80016f2:	e004      	b.n	80016fe <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <vTaskSwitchContext+0xd0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fe89 	bl	8004410 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	240001c8 	.word	0x240001c8
 800170c:	240001b4 	.word	0x240001b4
 8001710:	240001a8 	.word	0x240001a8
 8001714:	240000a4 	.word	0x240000a4
 8001718:	240000a0 	.word	0x240000a0
 800171c:	240001c4 	.word	0x240001c4

08001720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10c      	bne.n	800174a <vTaskPlaceOnEventList+0x2a>
        __asm volatile
 8001730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001734:	b672      	cpsid	i
 8001736:	f383 8811 	msr	BASEPRI, r3
 800173a:	f3bf 8f6f 	isb	sy
 800173e:	f3bf 8f4f 	dsb	sy
 8001742:	b662      	cpsie	i
 8001744:	60fb      	str	r3, [r7, #12]
    }
 8001746:	bf00      	nop
 8001748:	e7fe      	b.n	8001748 <vTaskPlaceOnEventList+0x28>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <vTaskPlaceOnEventList+0x48>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3318      	adds	r3, #24
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff f83f 	bl	80007d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001758:	2101      	movs	r1, #1
 800175a:	6838      	ldr	r0, [r7, #0]
 800175c:	f000 faee 	bl	8001d3c <prvAddCurrentTaskToDelayedList>
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	240000a0 	.word	0x240000a0

0800176c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <xTaskRemoveFromEventList+0x30>
        __asm volatile
 8001782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001786:	b672      	cpsid	i
 8001788:	f383 8811 	msr	BASEPRI, r3
 800178c:	f3bf 8f6f 	isb	sy
 8001790:	f3bf 8f4f 	dsb	sy
 8001794:	b662      	cpsie	i
 8001796:	60fb      	str	r3, [r7, #12]
    }
 8001798:	bf00      	nop
 800179a:	e7fe      	b.n	800179a <xTaskRemoveFromEventList+0x2e>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	3318      	adds	r3, #24
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff f851 	bl	8000848 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <xTaskRemoveFromEventList+0xb8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d120      	bne.n	80017f0 <xTaskRemoveFromEventList+0x84>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	3304      	adds	r3, #4
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff f848 	bl	8000848 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 fe6a 	bl	8004494 <SEGGER_SYSVIEW_OnTaskStartReady>
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	2201      	movs	r2, #1
 80017c6:	409a      	lsls	r2, r3
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <xTaskRemoveFromEventList+0xbc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	4a16      	ldr	r2, [pc, #88]	; (8001828 <xTaskRemoveFromEventList+0xbc>)
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4a13      	ldr	r2, [pc, #76]	; (800182c <xTaskRemoveFromEventList+0xc0>)
 80017e0:	441a      	add	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	3304      	adds	r3, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4610      	mov	r0, r2
 80017ea:	f7fe ffd0 	bl	800078e <vListInsertEnd>
 80017ee:	e005      	b.n	80017fc <xTaskRemoveFromEventList+0x90>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	3318      	adds	r3, #24
 80017f4:	4619      	mov	r1, r3
 80017f6:	480e      	ldr	r0, [pc, #56]	; (8001830 <xTaskRemoveFromEventList+0xc4>)
 80017f8:	f7fe ffc9 	bl	800078e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <xTaskRemoveFromEventList+0xc8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	429a      	cmp	r2, r3
 8001808:	d905      	bls.n	8001816 <xTaskRemoveFromEventList+0xaa>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800180a:	2301      	movs	r3, #1
 800180c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <xTaskRemoveFromEventList+0xcc>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e001      	b.n	800181a <xTaskRemoveFromEventList+0xae>
    }
    else
    {
        xReturn = pdFALSE;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800181a:	697b      	ldr	r3, [r7, #20]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	240001c8 	.word	0x240001c8
 8001828:	240001a8 	.word	0x240001a8
 800182c:	240000a4 	.word	0x240000a4
 8001830:	24000160 	.word	0x24000160
 8001834:	240000a0 	.word	0x240000a0
 8001838:	240001b4 	.word	0x240001b4

0800183c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <vTaskInternalSetTimeOutState+0x24>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <vTaskInternalSetTimeOutState+0x28>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	605a      	str	r2, [r3, #4]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	240001b8 	.word	0x240001b8
 8001864:	240001a4 	.word	0x240001a4

08001868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10c      	bne.n	8001892 <xTaskCheckForTimeOut+0x2a>
        __asm volatile
 8001878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187c:	b672      	cpsid	i
 800187e:	f383 8811 	msr	BASEPRI, r3
 8001882:	f3bf 8f6f 	isb	sy
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	b662      	cpsie	i
 800188c:	613b      	str	r3, [r7, #16]
    }
 800188e:	bf00      	nop
 8001890:	e7fe      	b.n	8001890 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10c      	bne.n	80018b2 <xTaskCheckForTimeOut+0x4a>
        __asm volatile
 8001898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189c:	b672      	cpsid	i
 800189e:	f383 8811 	msr	BASEPRI, r3
 80018a2:	f3bf 8f6f 	isb	sy
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	b662      	cpsie	i
 80018ac:	60fb      	str	r3, [r7, #12]
    }
 80018ae:	bf00      	nop
 80018b0:	e7fe      	b.n	80018b0 <xTaskCheckForTimeOut+0x48>

    taskENTER_CRITICAL();
 80018b2:	f000 fbcd 	bl	8002050 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <xTaskCheckForTimeOut+0xcc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ce:	d102      	bne.n	80018d6 <xTaskCheckForTimeOut+0x6e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	e026      	b.n	8001924 <xTaskCheckForTimeOut+0xbc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <xTaskCheckForTimeOut+0xd0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d00a      	beq.n	80018f8 <xTaskCheckForTimeOut+0x90>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d305      	bcc.n	80018f8 <xTaskCheckForTimeOut+0x90>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e015      	b.n	8001924 <xTaskCheckForTimeOut+0xbc>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d20b      	bcs.n	800191a <xTaskCheckForTimeOut+0xb2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1ad2      	subs	r2, r2, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ff94 	bl	800183c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	e004      	b.n	8001924 <xTaskCheckForTimeOut+0xbc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001920:	2301      	movs	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001924:	f000 fbc8 	bl	80020b8 <vPortExitCritical>

    return xReturn;
 8001928:	69fb      	ldr	r3, [r7, #28]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	240001a4 	.word	0x240001a4
 8001938:	240001b8 	.word	0x240001b8

0800193c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <vTaskMissedYield+0x14>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	240001b4 	.word	0x240001b4

08001954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800195c:	f000 f84c 	bl	80019f8 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <prvIdleTask+0x20>)
 8001962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f3bf 8f4f 	dsb	sy
 800196c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001970:	e7f4      	b.n	800195c <prvIdleTask+0x8>
 8001972:	bf00      	nop
 8001974:	e000ed04 	.word	0xe000ed04

08001978 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	e00c      	b.n	800199e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <prvInitialiseTaskLists+0x60>)
 8001990:	4413      	add	r3, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fece 	bl	8000734 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3301      	adds	r3, #1
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d9ef      	bls.n	8001984 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <prvInitialiseTaskLists+0x64>)
 80019a6:	f7fe fec5 	bl	8000734 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <prvInitialiseTaskLists+0x68>)
 80019ac:	f7fe fec2 	bl	8000734 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <prvInitialiseTaskLists+0x6c>)
 80019b2:	f7fe febf 	bl	8000734 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80019b6:	480c      	ldr	r0, [pc, #48]	; (80019e8 <prvInitialiseTaskLists+0x70>)
 80019b8:	f7fe febc 	bl	8000734 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <prvInitialiseTaskLists+0x74>)
 80019be:	f7fe feb9 	bl	8000734 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <prvInitialiseTaskLists+0x78>)
 80019c4:	4a05      	ldr	r2, [pc, #20]	; (80019dc <prvInitialiseTaskLists+0x64>)
 80019c6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <prvInitialiseTaskLists+0x7c>)
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <prvInitialiseTaskLists+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	240000a4 	.word	0x240000a4
 80019dc:	24000130 	.word	0x24000130
 80019e0:	24000144 	.word	0x24000144
 80019e4:	24000160 	.word	0x24000160
 80019e8:	24000174 	.word	0x24000174
 80019ec:	2400018c 	.word	0x2400018c
 80019f0:	24000158 	.word	0x24000158
 80019f4:	2400015c 	.word	0x2400015c

080019f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019fe:	e019      	b.n	8001a34 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001a00:	f000 fb26 	bl	8002050 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <prvCheckTasksWaitingTermination+0x50>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe ff19 	bl	8000848 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <prvCheckTasksWaitingTermination+0x54>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <prvCheckTasksWaitingTermination+0x54>)
 8001a1e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <prvCheckTasksWaitingTermination+0x58>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <prvCheckTasksWaitingTermination+0x58>)
 8001a28:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001a2a:	f000 fb45 	bl	80020b8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f810 	bl	8001a54 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <prvCheckTasksWaitingTermination+0x58>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1e1      	bne.n	8001a00 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	24000174 	.word	0x24000174
 8001a4c:	240001a0 	.word	0x240001a0
 8001a50:	24000188 	.word	0x24000188

08001a54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fd0f 	bl	8002484 <vPortFree>
                vPortFree( pxTCB );
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fd0c 	bl	8002484 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <prvResetNextTaskUnblockTime+0x30>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d104      	bne.n	8001a8c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <prvResetNextTaskUnblockTime+0x34>)
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a8a:	e005      	b.n	8001a98 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <prvResetNextTaskUnblockTime+0x30>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <prvResetNextTaskUnblockTime+0x34>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	24000158 	.word	0x24000158
 8001aa8:	240001c0 	.word	0x240001c0

08001aac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <xTaskGetSchedulerState+0x34>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001aba:	2301      	movs	r3, #1
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	e008      	b.n	8001ad2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <xTaskGetSchedulerState+0x38>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	e001      	b.n	8001ad2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001ad2:	687b      	ldr	r3, [r7, #4]
    }
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	240001ac 	.word	0x240001ac
 8001ae4:	240001c8 	.word	0x240001c8

08001ae8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d063      	beq.n	8001bc6 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b02:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <xTaskPriorityInherit+0xe8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d253      	bcs.n	8001bb4 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db06      	blt.n	8001b22 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b14:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <xTaskPriorityInherit+0xe8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f1c3 0207 	rsb	r2, r3, #7
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	6959      	ldr	r1, [r3, #20]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <xTaskPriorityInherit+0xec>)
 8001b34:	4413      	add	r3, r2
 8001b36:	4299      	cmp	r1, r3
 8001b38:	d12f      	bne.n	8001b9a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fe82 	bl	8000848 <uxListRemove>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10a      	bne.n	8001b60 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	2201      	movs	r2, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43da      	mvns	r2, r3
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <xTaskPriorityInherit+0xf0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <xTaskPriorityInherit+0xf0>)
 8001b5e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <xTaskPriorityInherit+0xe8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	2201      	movs	r2, #1
 8001b70:	409a      	lsls	r2, r3
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <xTaskPriorityInherit+0xf0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <xTaskPriorityInherit+0xf0>)
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <xTaskPriorityInherit+0xec>)
 8001b8a:	441a      	add	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f7fe fdfb 	bl	800078e <vListInsertEnd>
 8001b98:	e004      	b.n	8001ba4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <xTaskPriorityInherit+0xe8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	2049      	movs	r0, #73	; 0x49
 8001baa:	f001 fef1 	bl	8003990 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	e008      	b.n	8001bc6 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <xTaskPriorityInherit+0xe8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d201      	bcs.n	8001bc6 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    }
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	240000a0 	.word	0x240000a0
 8001bd4:	240000a4 	.word	0x240000a4
 8001bd8:	240001a8 	.word	0x240001a8

08001bdc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001bea:	2301      	movs	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8085 	beq.w	8001d00 <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10c      	bne.n	8001c18 <vTaskPriorityDisinheritAfterTimeout+0x3c>
        __asm volatile
 8001bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c02:	b672      	cpsid	i
 8001c04:	f383 8811 	msr	BASEPRI, r3
 8001c08:	f3bf 8f6f 	isb	sy
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	b662      	cpsie	i
 8001c12:	60fb      	str	r3, [r7, #12]
    }
 8001c14:	bf00      	nop
 8001c16:	e7fe      	b.n	8001c16 <vTaskPriorityDisinheritAfterTimeout+0x3a>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d902      	bls.n	8001c28 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e002      	b.n	8001c2e <vTaskPriorityDisinheritAfterTimeout+0x52>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2c:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d063      	beq.n	8001d00 <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d15e      	bne.n	8001d00 <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d10c      	bne.n	8001c66 <vTaskPriorityDisinheritAfterTimeout+0x8a>
        __asm volatile
 8001c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c50:	b672      	cpsid	i
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	b662      	cpsie	i
 8001c60:	60bb      	str	r3, [r7, #8]
    }
 8001c62:	bf00      	nop
 8001c64:	e7fe      	b.n	8001c64 <vTaskPriorityDisinheritAfterTimeout+0x88>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	204a      	movs	r0, #74	; 0x4a
 8001c6c:	f001 fe90 	bl	8003990 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db04      	blt.n	8001c8e <vTaskPriorityDisinheritAfterTimeout+0xb2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0207 	rsb	r2, r3, #7
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	6959      	ldr	r1, [r3, #20]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4299      	cmp	r1, r3
 8001ca2:	d12d      	bne.n	8001d00 <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fdcd 	bl	8000848 <uxListRemove>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10a      	bne.n	8001cca <vTaskPriorityDisinheritAfterTimeout+0xee>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	2201      	movs	r2, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8001cc8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fbe1 	bl	8004494 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8001cf2:	441a      	add	r2, r3
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f7fe fd47 	bl	800078e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	240000a0 	.word	0x240000a0
 8001d0c:	240000a4 	.word	0x240000a4
 8001d10:	240001a8 	.word	0x240001a8

08001d14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <pvTaskIncrementMutexHeldCount+0x24>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <pvTaskIncrementMutexHeldCount+0x24>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d26:	3201      	adds	r2, #1
 8001d28:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 8001d2a:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <pvTaskIncrementMutexHeldCount+0x24>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
    }
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	240000a0 	.word	0x240000a0

08001d3c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3304      	adds	r3, #4
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fd78 	bl	8000848 <uxListRemove>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10b      	bne.n	8001d76 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	2201      	movs	r2, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4013      	ands	r3, r2
 8001d72:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001d74:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d110      	bne.n	8001da0 <prvAddCurrentTaskToDelayedList+0x64>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00d      	beq.n	8001da0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001d84:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	211b      	movs	r1, #27
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 fbc4 	bl	8004518 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3304      	adds	r3, #4
 8001d96:	4619      	mov	r1, r3
 8001d98:	4820      	ldr	r0, [pc, #128]	; (8001e1c <prvAddCurrentTaskToDelayedList+0xe0>)
 8001d9a:	f7fe fcf8 	bl	800078e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001d9e:	e032      	b.n	8001e06 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d20f      	bcs.n	8001dd8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 fbaa 	bl	8004518 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f7fe fd00 	bl	80007d6 <vListInsert>
}
 8001dd6:	e016      	b.n	8001e06 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2104      	movs	r1, #4
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 fb9a 	bl	8004518 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3304      	adds	r3, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4610      	mov	r0, r2
 8001df2:	f7fe fcf0 	bl	80007d6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <prvAddCurrentTaskToDelayedList+0xec>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d202      	bcs.n	8001e06 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001e00:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <prvAddCurrentTaskToDelayedList+0xec>)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	6013      	str	r3, [r2, #0]
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	240001a4 	.word	0x240001a4
 8001e14:	240000a0 	.word	0x240000a0
 8001e18:	240001a8 	.word	0x240001a8
 8001e1c:	2400018c 	.word	0x2400018c
 8001e20:	2400015c 	.word	0x2400015c
 8001e24:	24000158 	.word	0x24000158
 8001e28:	240001c0 	.word	0x240001c0

08001e2c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3b04      	subs	r3, #4
 8001e4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f023 0201 	bic.w	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3b04      	subs	r3, #4
 8001e5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <pxPortInitialiseStack+0x64>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3b14      	subs	r3, #20
 8001e66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3b04      	subs	r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f06f 0202 	mvn.w	r2, #2
 8001e7a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3b20      	subs	r3, #32
 8001e80:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	08001e95 	.word	0x08001e95

08001e94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <prvTaskExitError+0x5c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea6:	d00c      	beq.n	8001ec2 <prvTaskExitError+0x2e>
        __asm volatile
 8001ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eac:	b672      	cpsid	i
 8001eae:	f383 8811 	msr	BASEPRI, r3
 8001eb2:	f3bf 8f6f 	isb	sy
 8001eb6:	f3bf 8f4f 	dsb	sy
 8001eba:	b662      	cpsie	i
 8001ebc:	60fb      	str	r3, [r7, #12]
    }
 8001ebe:	bf00      	nop
 8001ec0:	e7fe      	b.n	8001ec0 <prvTaskExitError+0x2c>
        __asm volatile
 8001ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec6:	b672      	cpsid	i
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	b662      	cpsie	i
 8001ed6:	60bb      	str	r3, [r7, #8]
    }
 8001ed8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001eda:	bf00      	nop
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0fc      	beq.n	8001edc <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	24000004 	.word	0x24000004
	...

08001f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <pxCurrentTCBConst2>)
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	6808      	ldr	r0, [r1, #0]
 8001f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f0a:	f380 8809 	msr	PSP, r0
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	f04f 0000 	mov.w	r0, #0
 8001f16:	f380 8811 	msr	BASEPRI, r0
 8001f1a:	4770      	bx	lr
 8001f1c:	f3af 8000 	nop.w

08001f20 <pxCurrentTCBConst2>:
 8001f20:	240000a0 	.word	0x240000a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop

08001f28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001f28:	4808      	ldr	r0, [pc, #32]	; (8001f4c <prvPortStartFirstTask+0x24>)
 8001f2a:	6800      	ldr	r0, [r0, #0]
 8001f2c:	6800      	ldr	r0, [r0, #0]
 8001f2e:	f380 8808 	msr	MSP, r0
 8001f32:	f04f 0000 	mov.w	r0, #0
 8001f36:	f380 8814 	msr	CONTROL, r0
 8001f3a:	b662      	cpsie	i
 8001f3c:	b661      	cpsie	f
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	f3bf 8f6f 	isb	sy
 8001f46:	df00      	svc	0
 8001f48:	bf00      	nop
 8001f4a:	0000      	.short	0x0000
 8001f4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop

08001f54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <xPortStartScheduler+0xe4>)
 8001f5c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	22ff      	movs	r2, #255	; 0xff
 8001f6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <xPortStartScheduler+0xe8>)
 8001f80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001f82:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <xPortStartScheduler+0xec>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f88:	e009      	b.n	8001f9e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <xPortStartScheduler+0xec>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	4a2b      	ldr	r2, [pc, #172]	; (8002040 <xPortStartScheduler+0xec>)
 8001f92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa6:	2b80      	cmp	r3, #128	; 0x80
 8001fa8:	d0ef      	beq.n	8001f8a <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001faa:	4b25      	ldr	r3, [pc, #148]	; (8002040 <xPortStartScheduler+0xec>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f1c3 0307 	rsb	r3, r3, #7
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d00c      	beq.n	8001fd0 <xPortStartScheduler+0x7c>
        __asm volatile
 8001fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fba:	b672      	cpsid	i
 8001fbc:	f383 8811 	msr	BASEPRI, r3
 8001fc0:	f3bf 8f6f 	isb	sy
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	b662      	cpsie	i
 8001fca:	60bb      	str	r3, [r7, #8]
    }
 8001fcc:	bf00      	nop
 8001fce:	e7fe      	b.n	8001fce <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <xPortStartScheduler+0xec>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	4a1a      	ldr	r2, [pc, #104]	; (8002040 <xPortStartScheduler+0xec>)
 8001fd8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <xPortStartScheduler+0xec>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fe2:	4a17      	ldr	r2, [pc, #92]	; (8002040 <xPortStartScheduler+0xec>)
 8001fe4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <xPortStartScheduler+0xf0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a14      	ldr	r2, [pc, #80]	; (8002044 <xPortStartScheduler+0xf0>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff8:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <xPortStartScheduler+0xf0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a11      	ldr	r2, [pc, #68]	; (8002044 <xPortStartScheduler+0xf0>)
 8002000:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002004:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002006:	f000 f8e3 	bl	80021d0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <xPortStartScheduler+0xf4>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002010:	f000 f902 	bl	8002218 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <xPortStartScheduler+0xf8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0c      	ldr	r2, [pc, #48]	; (800204c <xPortStartScheduler+0xf8>)
 800201a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800201e:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002020:	f7ff ff82 	bl	8001f28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002024:	f7ff fb10 	bl	8001648 <vTaskSwitchContext>
    prvTaskExitError();
 8002028:	f7ff ff34 	bl	8001e94 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	e000e400 	.word	0xe000e400
 800203c:	240001cc 	.word	0x240001cc
 8002040:	240001d0 	.word	0x240001d0
 8002044:	e000ed20 	.word	0xe000ed20
 8002048:	24000004 	.word	0x24000004
 800204c:	e000ef34 	.word	0xe000ef34

08002050 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
        __asm volatile
 8002056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205a:	b672      	cpsid	i
 800205c:	f383 8811 	msr	BASEPRI, r3
 8002060:	f3bf 8f6f 	isb	sy
 8002064:	f3bf 8f4f 	dsb	sy
 8002068:	b662      	cpsie	i
 800206a:	607b      	str	r3, [r7, #4]
    }
 800206c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <vPortEnterCritical+0x60>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <vPortEnterCritical+0x60>)
 8002076:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <vPortEnterCritical+0x60>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d111      	bne.n	80020a4 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <vPortEnterCritical+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00c      	beq.n	80020a4 <vPortEnterCritical+0x54>
        __asm volatile
 800208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208e:	b672      	cpsid	i
 8002090:	f383 8811 	msr	BASEPRI, r3
 8002094:	f3bf 8f6f 	isb	sy
 8002098:	f3bf 8f4f 	dsb	sy
 800209c:	b662      	cpsie	i
 800209e:	603b      	str	r3, [r7, #0]
    }
 80020a0:	bf00      	nop
 80020a2:	e7fe      	b.n	80020a2 <vPortEnterCritical+0x52>
    }
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	24000004 	.word	0x24000004
 80020b4:	e000ed04 	.word	0xe000ed04

080020b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <vPortExitCritical+0x54>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10c      	bne.n	80020e0 <vPortExitCritical+0x28>
        __asm volatile
 80020c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ca:	b672      	cpsid	i
 80020cc:	f383 8811 	msr	BASEPRI, r3
 80020d0:	f3bf 8f6f 	isb	sy
 80020d4:	f3bf 8f4f 	dsb	sy
 80020d8:	b662      	cpsie	i
 80020da:	607b      	str	r3, [r7, #4]
    }
 80020dc:	bf00      	nop
 80020de:	e7fe      	b.n	80020de <vPortExitCritical+0x26>
    uxCriticalNesting--;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <vPortExitCritical+0x54>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <vPortExitCritical+0x54>)
 80020e8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <vPortExitCritical+0x54>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <vPortExitCritical+0x46>
 80020f2:	2300      	movs	r3, #0
 80020f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f383 8811 	msr	BASEPRI, r3
    }
 80020fc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	24000004 	.word	0x24000004

08002110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002110:	f3ef 8009 	mrs	r0, PSP
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <pxCurrentTCBConst>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	f01e 0f10 	tst.w	lr, #16
 8002120:	bf08      	it	eq
 8002122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800212a:	6010      	str	r0, [r2, #0]
 800212c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002134:	b672      	cpsid	i
 8002136:	f380 8811 	msr	BASEPRI, r0
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	b662      	cpsie	i
 8002144:	f7ff fa80 	bl	8001648 <vTaskSwitchContext>
 8002148:	f04f 0000 	mov.w	r0, #0
 800214c:	f380 8811 	msr	BASEPRI, r0
 8002150:	bc09      	pop	{r0, r3}
 8002152:	6819      	ldr	r1, [r3, #0]
 8002154:	6808      	ldr	r0, [r1, #0]
 8002156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800215a:	f01e 0f10 	tst.w	lr, #16
 800215e:	bf08      	it	eq
 8002160:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002164:	f380 8809 	msr	PSP, r0
 8002168:	f3bf 8f6f 	isb	sy
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop

08002170 <pxCurrentTCBConst>:
 8002170:	240000a0 	.word	0x240000a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop

08002178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
        __asm volatile
 800217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002182:	b672      	cpsid	i
 8002184:	f383 8811 	msr	BASEPRI, r3
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	b662      	cpsie	i
 8002192:	607b      	str	r3, [r7, #4]
    }
 8002194:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002196:	f002 f863 	bl	8004260 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800219a:	f7ff f9b9 	bl	8001510 <xTaskIncrementTick>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80021a4:	f002 f8ba 	bl	800431c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <SysTick_Handler+0x54>)
 80021aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e001      	b.n	80021b6 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 80021b2:	f002 f897 	bl	80042e4 <SEGGER_SYSVIEW_RecordExitISR>
 80021b6:	2300      	movs	r3, #0
 80021b8:	603b      	str	r3, [r7, #0]
        __asm volatile
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f383 8811 	msr	BASEPRI, r3
    }
 80021c0:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	e000ed04 	.word	0xe000ed04

080021d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <vPortSetupTimerInterrupt+0x34>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <vPortSetupTimerInterrupt+0x38>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <vPortSetupTimerInterrupt+0x3c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <vPortSetupTimerInterrupt+0x40>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	099b      	lsrs	r3, r3, #6
 80021ec:	4a09      	ldr	r2, [pc, #36]	; (8002214 <vPortSetupTimerInterrupt+0x44>)
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <vPortSetupTimerInterrupt+0x34>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010
 8002208:	e000e018 	.word	0xe000e018
 800220c:	24000010 	.word	0x24000010
 8002210:	10624dd3 	.word	0x10624dd3
 8002214:	e000e014 	.word	0xe000e014

08002218 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002218:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002228 <vPortEnableVFP+0x10>
 800221c:	6801      	ldr	r1, [r0, #0]
 800221e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002222:	6001      	str	r1, [r0, #0]
 8002224:	4770      	bx	lr
 8002226:	0000      	.short	0x0000
 8002228:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop

08002230 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002236:	f3ef 8305 	mrs	r3, IPSR
 800223a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b0f      	cmp	r3, #15
 8002240:	d916      	bls.n	8002270 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002242:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <vPortValidateInterruptPriority+0x78>)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <vPortValidateInterruptPriority+0x7c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	7afa      	ldrb	r2, [r7, #11]
 8002252:	429a      	cmp	r2, r3
 8002254:	d20c      	bcs.n	8002270 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225a:	b672      	cpsid	i
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	b662      	cpsie	i
 800226a:	607b      	str	r3, [r7, #4]
    }
 800226c:	bf00      	nop
 800226e:	e7fe      	b.n	800226e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <vPortValidateInterruptPriority+0x80>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <vPortValidateInterruptPriority+0x84>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d90c      	bls.n	800229a <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	b672      	cpsid	i
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	b662      	cpsie	i
 8002294:	603b      	str	r3, [r7, #0]
    }
 8002296:	bf00      	nop
 8002298:	e7fe      	b.n	8002298 <vPortValidateInterruptPriority+0x68>
    }
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000e3f0 	.word	0xe000e3f0
 80022ac:	240001cc 	.word	0x240001cc
 80022b0:	e000ed0c 	.word	0xe000ed0c
 80022b4:	240001d0 	.word	0x240001d0

080022b8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80022c4:	f7ff f870 	bl	80013a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80022c8:	4b68      	ldr	r3, [pc, #416]	; (800246c <pvPortMalloc+0x1b4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80022d0:	f000 f93e 	bl	8002550 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80022d4:	4b66      	ldr	r3, [pc, #408]	; (8002470 <pvPortMalloc+0x1b8>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 80ab 	bne.w	8002438 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d02f      	beq.n	8002348 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80022e8:	2208      	movs	r2, #8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d229      	bcs.n	8002348 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 80022f4:	2208      	movs	r2, #8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	2b00      	cmp	r3, #0
 8002304:	d023      	beq.n	800234e <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f023 0307 	bic.w	r3, r3, #7
 800230c:	3308      	adds	r3, #8
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	d216      	bcs.n	8002342 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f023 0307 	bic.w	r3, r3, #7
 800231a:	3308      	adds	r3, #8
 800231c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	2b00      	cmp	r3, #0
 8002326:	d012      	beq.n	800234e <pvPortMalloc+0x96>
        __asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	b672      	cpsid	i
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	b662      	cpsie	i
 800233c:	617b      	str	r3, [r7, #20]
    }
 800233e:	bf00      	nop
 8002340:	e7fe      	b.n	8002340 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002346:	e002      	b.n	800234e <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	e000      	b.n	8002350 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800234e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d070      	beq.n	8002438 <pvPortMalloc+0x180>
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <pvPortMalloc+0x1bc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	d86b      	bhi.n	8002438 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002360:	4b45      	ldr	r3, [pc, #276]	; (8002478 <pvPortMalloc+0x1c0>)
 8002362:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002364:	4b44      	ldr	r3, [pc, #272]	; (8002478 <pvPortMalloc+0x1c0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800236a:	e004      	b.n	8002376 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d903      	bls.n	8002388 <pvPortMalloc+0xd0>
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f1      	bne.n	800236c <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002388:	4b38      	ldr	r3, [pc, #224]	; (800246c <pvPortMalloc+0x1b4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238e:	429a      	cmp	r2, r3
 8002390:	d052      	beq.n	8002438 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2208      	movs	r2, #8
 8002398:	4413      	add	r3, r2
 800239a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	1ad2      	subs	r2, r2, r3
 80023ac:	2308      	movs	r3, #8
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d921      	bls.n	80023f8 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <pvPortMalloc+0x128>
        __asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ca:	b672      	cpsid	i
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	b662      	cpsie	i
 80023da:	613b      	str	r3, [r7, #16]
    }
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	1ad2      	subs	r2, r2, r3
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80023f2:	69b8      	ldr	r0, [r7, #24]
 80023f4:	f000 f90e 	bl	8002614 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <pvPortMalloc+0x1bc>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <pvPortMalloc+0x1bc>)
 8002404:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <pvPortMalloc+0x1bc>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b1c      	ldr	r3, [pc, #112]	; (800247c <pvPortMalloc+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d203      	bcs.n	800241a <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <pvPortMalloc+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a19      	ldr	r2, [pc, #100]	; (800247c <pvPortMalloc+0x1c4>)
 8002418:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <pvPortMalloc+0x1b8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	431a      	orrs	r2, r3
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <pvPortMalloc+0x1c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	4a12      	ldr	r2, [pc, #72]	; (8002480 <pvPortMalloc+0x1c8>)
 8002436:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002438:	f7fe ffc4 	bl	80013c4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00c      	beq.n	8002460 <pvPortMalloc+0x1a8>
        __asm volatile
 8002446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244a:	b672      	cpsid	i
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	b662      	cpsie	i
 800245a:	60fb      	str	r3, [r7, #12]
    }
 800245c:	bf00      	nop
 800245e:	e7fe      	b.n	800245e <pvPortMalloc+0x1a6>
    return pvReturn;
 8002460:	69fb      	ldr	r3, [r7, #28]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	240069dc 	.word	0x240069dc
 8002470:	240069f0 	.word	0x240069f0
 8002474:	240069e0 	.word	0x240069e0
 8002478:	240069d4 	.word	0x240069d4
 800247c:	240069e4 	.word	0x240069e4
 8002480:	240069e8 	.word	0x240069e8

08002484 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d051      	beq.n	800253a <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002496:	2308      	movs	r3, #8
 8002498:	425b      	negs	r3, r3
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4413      	add	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <vPortFree+0xc0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <vPortFree+0x48>
        __asm volatile
 80024b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b6:	b672      	cpsid	i
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	b662      	cpsie	i
 80024c6:	60fb      	str	r3, [r7, #12]
    }
 80024c8:	bf00      	nop
 80024ca:	e7fe      	b.n	80024ca <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00c      	beq.n	80024ee <vPortFree+0x6a>
        __asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	b672      	cpsid	i
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	b662      	cpsie	i
 80024e8:	60bb      	str	r3, [r7, #8]
    }
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <vPortFree+0xc0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01e      	beq.n	800253a <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11a      	bne.n	800253a <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <vPortFree+0xc0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002514:	f7fe ff48 	bl	80013a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <vPortFree+0xc4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4413      	add	r3, r2
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <vPortFree+0xc4>)
 8002524:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002526:	6938      	ldr	r0, [r7, #16]
 8002528:	f000 f874 	bl	8002614 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <vPortFree+0xc8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	4a06      	ldr	r2, [pc, #24]	; (800254c <vPortFree+0xc8>)
 8002534:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002536:	f7fe ff45 	bl	80013c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800253a:	bf00      	nop
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	240069f0 	.word	0x240069f0
 8002548:	240069e0 	.word	0x240069e0
 800254c:	240069ec 	.word	0x240069ec

08002550 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002556:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800255a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <prvHeapInit+0xac>)
 800255e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00c      	beq.n	8002584 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3307      	adds	r3, #7
 800256e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0307 	bic.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <prvHeapInit+0xac>)
 8002580:	4413      	add	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002588:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <prvHeapInit+0xb0>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <prvHeapInit+0xb0>)
 8002590:	2200      	movs	r2, #0
 8002592:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4413      	add	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800259c:	2208      	movs	r2, #8
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0307 	bic.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4a15      	ldr	r2, [pc, #84]	; (8002604 <prvHeapInit+0xb4>)
 80025b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80025b2:	4b14      	ldr	r3, [pc, #80]	; (8002604 <prvHeapInit+0xb4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2200      	movs	r2, #0
 80025b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <prvHeapInit+0xb4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	1ad2      	subs	r2, r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <prvHeapInit+0xb4>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <prvHeapInit+0xb8>)
 80025de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a09      	ldr	r2, [pc, #36]	; (800260c <prvHeapInit+0xbc>)
 80025e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <prvHeapInit+0xc0>)
 80025ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025ee:	601a      	str	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	240001d4 	.word	0x240001d4
 8002600:	240069d4 	.word	0x240069d4
 8002604:	240069dc 	.word	0x240069dc
 8002608:	240069e4 	.word	0x240069e4
 800260c:	240069e0 	.word	0x240069e0
 8002610:	240069f0 	.word	0x240069f0

08002614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <prvInsertBlockIntoFreeList+0xac>)
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e002      	b.n	8002628 <prvInsertBlockIntoFreeList+0x14>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	429a      	cmp	r2, r3
 8002630:	d8f7      	bhi.n	8002622 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	4413      	add	r3, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	429a      	cmp	r2, r3
 8002642:	d108      	bne.n	8002656 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	441a      	add	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	441a      	add	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d118      	bne.n	800269c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <prvInsertBlockIntoFreeList+0xb0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d00d      	beq.n	8002692 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	441a      	add	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e008      	b.n	80026a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <prvInsertBlockIntoFreeList+0xb0>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e003      	b.n	80026a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d002      	beq.n	80026b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	240069d4 	.word	0x240069d4
 80026c4:	240069dc 	.word	0x240069dc

080026c8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80026cc:	4803      	ldr	r0, [pc, #12]	; (80026dc <_cbSendSystemDesc+0x14>)
 80026ce:	f001 fd71 	bl	80041b4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80026d2:	4803      	ldr	r0, [pc, #12]	; (80026e0 <_cbSendSystemDesc+0x18>)
 80026d4:	f001 fd6e 	bl	80041b4 <SEGGER_SYSVIEW_SendSysDesc>
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	0800cb14 	.word	0x0800cb14
 80026e0:	0800cb44 	.word	0x0800cb44

080026e4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <SEGGER_SYSVIEW_Conf+0x20>)
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <SEGGER_SYSVIEW_Conf+0x20>)
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <SEGGER_SYSVIEW_Conf+0x24>)
 80026f2:	4a06      	ldr	r2, [pc, #24]	; (800270c <SEGGER_SYSVIEW_Conf+0x28>)
 80026f4:	f001 f8d8 	bl	80038a8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80026f8:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 80026fc:	f001 f91a 	bl	8003934 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	24000010 	.word	0x24000010
 8002708:	080026c9 	.word	0x080026c9
 800270c:	0800cccc 	.word	0x0800cccc

08002710 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	b085      	sub	sp, #20
 8002714:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	e033      	b.n	8002784 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800271c:	491e      	ldr	r1, [pc, #120]	; (8002798 <_cbSendTaskList+0x88>)
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	491a      	ldr	r1, [pc, #104]	; (8002798 <_cbSendTaskList+0x88>)
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3304      	adds	r3, #4
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	4c16      	ldr	r4, [pc, #88]	; (8002798 <_cbSendTaskList+0x88>)
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4423      	add	r3, r4
 800274c:	3308      	adds	r3, #8
 800274e:	681c      	ldr	r4, [r3, #0]
 8002750:	4d11      	ldr	r5, [pc, #68]	; (8002798 <_cbSendTaskList+0x88>)
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	442b      	add	r3, r5
 800275e:	330c      	adds	r3, #12
 8002760:	681d      	ldr	r5, [r3, #0]
 8002762:	4e0d      	ldr	r6, [pc, #52]	; (8002798 <_cbSendTaskList+0x88>)
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4433      	add	r3, r6
 8002770:	3310      	adds	r3, #16
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	462b      	mov	r3, r5
 8002778:	4622      	mov	r2, r4
 800277a:	f000 f8bd 	bl	80028f8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3301      	adds	r3, #1
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <_cbSendTaskList+0x8c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d3c6      	bcc.n	800271c <_cbSendTaskList+0xc>
  }
}
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002798:	240069f4 	.word	0x240069f4
 800279c:	24006a94 	.word	0x24006a94

080027a0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80027a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80027a8:	f7fe fea0 	bl	80014ec <xTaskGetTickCountFromISR>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2200      	movs	r2, #0
 80027b0:	469a      	mov	sl, r3
 80027b2:	4693      	mov	fp, r2
 80027b4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80027b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	f04f 0a00 	mov.w	sl, #0
 80027c4:	f04f 0b00 	mov.w	fp, #0
 80027c8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80027cc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80027d0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80027d4:	4652      	mov	r2, sl
 80027d6:	465b      	mov	r3, fp
 80027d8:	1a14      	subs	r4, r2, r0
 80027da:	eb63 0501 	sbc.w	r5, r3, r1
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	00ab      	lsls	r3, r5, #2
 80027e8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80027ec:	00a2      	lsls	r2, r4, #2
 80027ee:	4614      	mov	r4, r2
 80027f0:	461d      	mov	r5, r3
 80027f2:	eb14 0800 	adds.w	r8, r4, r0
 80027f6:	eb45 0901 	adc.w	r9, r5, r1
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800280a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800280e:	4690      	mov	r8, r2
 8002810:	4699      	mov	r9, r3
 8002812:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002816:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002828 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002836:	2205      	movs	r2, #5
 8002838:	492b      	ldr	r1, [pc, #172]	; (80028e8 <SYSVIEW_AddTask+0xc0>)
 800283a:	68b8      	ldr	r0, [r7, #8]
 800283c:	f009 fcc6 	bl	800c1cc <memcmp>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d04b      	beq.n	80028de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <SYSVIEW_AddTask+0xc4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b07      	cmp	r3, #7
 800284c:	d903      	bls.n	8002856 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800284e:	4828      	ldr	r0, [pc, #160]	; (80028f0 <SYSVIEW_AddTask+0xc8>)
 8002850:	f001 ffae 	bl	80047b0 <SEGGER_SYSVIEW_Warn>
    return;
 8002854:	e044      	b.n	80028e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002856:	4b25      	ldr	r3, [pc, #148]	; (80028ec <SYSVIEW_AddTask+0xc4>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4926      	ldr	r1, [pc, #152]	; (80028f4 <SYSVIEW_AddTask+0xcc>)
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <SYSVIEW_AddTask+0xc4>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4921      	ldr	r1, [pc, #132]	; (80028f4 <SYSVIEW_AddTask+0xcc>)
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	3304      	adds	r3, #4
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <SYSVIEW_AddTask+0xc4>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	491b      	ldr	r1, [pc, #108]	; (80028f4 <SYSVIEW_AddTask+0xcc>)
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	3308      	adds	r3, #8
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <SYSVIEW_AddTask+0xc4>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4916      	ldr	r1, [pc, #88]	; (80028f4 <SYSVIEW_AddTask+0xcc>)
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	330c      	adds	r3, #12
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <SYSVIEW_AddTask+0xc4>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4910      	ldr	r1, [pc, #64]	; (80028f4 <SYSVIEW_AddTask+0xcc>)
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3310      	adds	r3, #16
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <SYSVIEW_AddTask+0xc4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	4a08      	ldr	r2, [pc, #32]	; (80028ec <SYSVIEW_AddTask+0xc4>)
 80028ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f80e 	bl	80028f8 <SYSVIEW_SendTaskInfo>
 80028dc:	e000      	b.n	80028e0 <SYSVIEW_AddTask+0xb8>
    return;
 80028de:	bf00      	nop

}
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	0800cb54 	.word	0x0800cb54
 80028ec:	24006a94 	.word	0x24006a94
 80028f0:	0800cb5c 	.word	0x0800cb5c
 80028f4:	240069f4 	.word	0x240069f4

080028f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	2214      	movs	r2, #20
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f009 fc7a 	bl	800c208 <memset>
  TaskInfo.TaskID     = TaskID;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4618      	mov	r0, r3
 800292e:	f001 fb49 	bl	8003fc4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002932:	bf00      	nop
 8002934:	3728      	adds	r7, #40	; 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0b      	blt.n	8002966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4907      	ldr	r1, [pc, #28]	; (8002974 <__NVIC_EnableIRQ+0x38>)
 8002956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	; (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80029d2:	f001 ff49 	bl	8004868 <SEGGER_SYSVIEW_IsStarted>
 80029d6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80029de:	f001 f975 	bl	8003ccc <SEGGER_SYSVIEW_Start>
  }
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <_cbOnUARTRx+0x3c>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d806      	bhi.n	8002a0c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <_cbOnUARTRx+0x3c>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <_cbOnUARTRx+0x3c>)
 8002a08:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002a0a:	e009      	b.n	8002a20 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002a0c:	f7ff ffde 	bl	80029cc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <_cbOnUARTRx+0x3c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4618      	mov	r0, r3
 8002a16:	1dfb      	adds	r3, r7, #7
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f000 fb9e 	bl	800315c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002a20:	bf00      	nop
}
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	24000008 	.word	0x24000008

08002a2c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <_cbOnUARTTx+0x5c>)
 8002a36:	785b      	ldrb	r3, [r3, #1]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d80f      	bhi.n	8002a5c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <_cbOnUARTTx+0x5c>)
 8002a3e:	785b      	ldrb	r3, [r3, #1]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <_cbOnUARTTx+0x60>)
 8002a44:	5c9a      	ldrb	r2, [r3, r2]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <_cbOnUARTTx+0x5c>)
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <_cbOnUARTTx+0x5c>)
 8002a54:	705a      	strb	r2, [r3, #1]
    r = 1;
 8002a56:	2301      	movs	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
    goto Done;
 8002a5a:	e00f      	b.n	8002a7c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <_cbOnUARTTx+0x5c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fa1d 	bl	8002ea4 <SEGGER_RTT_ReadUpBufferNoLock>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	da02      	bge.n	8002a7a <_cbOnUARTTx+0x4e>
    r = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	e000      	b.n	8002a7c <_cbOnUARTTx+0x50>
  }
Done:
 8002a7a:	bf00      	nop
  return r;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	24000008 	.word	0x24000008
 8002a8c:	0800ccd4 	.word	0x0800ccd4

08002a90 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <SEGGER_UART_init+0x1c>)
 8002a9a:	4905      	ldr	r1, [pc, #20]	; (8002ab0 <SEGGER_UART_init+0x20>)
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f865 	bl	8002b6c <HIF_UART_Init>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	080029ed 	.word	0x080029ed
 8002ab0:	08002a2d 	.word	0x08002a2d

08002ab4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002aba:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <USART2_IRQHandler+0x80>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d011      	beq.n	8002aee <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <USART2_IRQHandler+0x84>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 030b 	and.w	r3, r3, #11
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002adc:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <USART2_IRQHandler+0x88>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <USART2_IRQHandler+0x88>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	79fa      	ldrb	r2, [r7, #7]
 8002aea:	4610      	mov	r0, r2
 8002aec:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01a      	beq.n	8002b2e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <USART2_IRQHandler+0x8c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <USART2_IRQHandler+0x8c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	1dfa      	adds	r2, r7, #7
 8002b06:	4610      	mov	r0, r2
 8002b08:	4798      	blx	r3
 8002b0a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <USART2_IRQHandler+0x90>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a0b      	ldr	r2, [pc, #44]	; (8002b44 <USART2_IRQHandler+0x90>)
 8002b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e006      	b.n	8002b2e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <USART2_IRQHandler+0x80>)
 8002b22:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8002b24:	79fa      	ldrb	r2, [r7, #7]
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <USART2_IRQHandler+0x94>)
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e000      	b.n	8002b2e <USART2_IRQHandler+0x7a>
      return;
 8002b2c:	bf00      	nop
    }
  }
}
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	4000441c 	.word	0x4000441c
 8002b38:	40004424 	.word	0x40004424
 8002b3c:	24006a98 	.word	0x24006a98
 8002b40:	24006a9c 	.word	0x24006a9c
 8002b44:	40004400 	.word	0x40004400
 8002b48:	40004428 	.word	0x40004428

08002b4c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40004400 	.word	0x40004400

08002b6c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8002b78:	4b2e      	ldr	r3, [pc, #184]	; (8002c34 <HIF_UART_Init+0xc8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2d      	ldr	r2, [pc, #180]	; (8002c34 <HIF_UART_Init+0xc8>)
 8002b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b82:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 8002b84:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <HIF_UART_Init+0xcc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2b      	ldr	r2, [pc, #172]	; (8002c38 <HIF_UART_Init+0xcc>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8002b90:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HIF_UART_Init+0xd0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b9c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8002ba4:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8002ba6:	4a25      	ldr	r2, [pc, #148]	; (8002c3c <HIF_UART_Init+0xd0>)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HIF_UART_Init+0xd4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bb8:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002bc0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <HIF_UART_Init+0xd4>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8002bc8:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <HIF_UART_Init+0xd8>)
 8002bca:	f248 022d 	movw	r2, #32813	; 0x802d
 8002bce:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8002bd0:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HIF_UART_Init+0xdc>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HIF_UART_Init+0xe0>)
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8002be2:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <HIF_UART_Init+0xe4>)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfa:	d302      	bcc.n	8002c02 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002bfc:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002c00:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <HIF_UART_Init+0xe8>)
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8002c12:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <HIF_UART_Init+0xec>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8002c18:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <HIF_UART_Init+0xf0>)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8002c1e:	2106      	movs	r1, #6
 8002c20:	2026      	movs	r0, #38	; 0x26
 8002c22:	f7ff fea9 	bl	8002978 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8002c26:	2026      	movs	r0, #38	; 0x26
 8002c28:	f7ff fe88 	bl	800293c <__NVIC_EnableIRQ>
}
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	580244e8 	.word	0x580244e8
 8002c38:	580244e0 	.word	0x580244e0
 8002c3c:	58020020 	.word	0x58020020
 8002c40:	58020000 	.word	0x58020000
 8002c44:	40004400 	.word	0x40004400
 8002c48:	40004404 	.word	0x40004404
 8002c4c:	40004408 	.word	0x40004408
 8002c50:	0e4e1c00 	.word	0x0e4e1c00
 8002c54:	4000440c 	.word	0x4000440c
 8002c58:	24006a98 	.word	0x24006a98
 8002c5c:	24006a9c 	.word	0x24006a9c

08002c60 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <_DoInit+0xa0>)
 8002c68:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8002c6a:	22a8      	movs	r2, #168	; 0xa8
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	6838      	ldr	r0, [r7, #0]
 8002c70:	f009 faca 	bl	800c208 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2203      	movs	r2, #3
 8002c78:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4a20      	ldr	r2, [pc, #128]	; (8002d04 <_DoInit+0xa4>)
 8002c84:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <_DoInit+0xa8>)
 8002c8a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c92:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2200      	movs	r2, #0
 8002c98:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <_DoInit+0xa4>)
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <_DoInit+0xac>)
 8002cb0:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002cca:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	e00c      	b.n	8002cee <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f1c3 030f 	rsb	r3, r3, #15
 8002cda:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <_DoInit+0xb0>)
 8002cdc:	5cd1      	ldrb	r1, [r2, r3]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3301      	adds	r3, #1
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0f      	cmp	r3, #15
 8002cf2:	d9ef      	bls.n	8002cd4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002cf4:	f3bf 8f5f 	dmb	sy
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	24006aa0 	.word	0x24006aa0
 8002d04:	0800cbac 	.word	0x0800cbac
 8002d08:	24006b48 	.word	0x24006b48
 8002d0c:	24006f48 	.word	0x24006f48
 8002d10:	0800ccd8 	.word	0x0800ccd8

08002d14 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d905      	bls.n	8002d44 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	e007      	b.n	8002d54 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	69b9      	ldr	r1, [r7, #24]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	1acb      	subs	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3b01      	subs	r3, #1
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	bf28      	it	cs
 8002d62:	4613      	movcs	r3, r2
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	bf28      	it	cs
 8002d6e:	4613      	movcs	r3, r2
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	6978      	ldr	r0, [r7, #20]
 8002d82:	f009 fa33 	bl	800c1ec <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002d86:	6a3a      	ldr	r2, [r7, #32]
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	4413      	add	r3, r2
 8002d8c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	4413      	add	r3, r2
 8002d94:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	4413      	add	r3, r2
 8002da4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d101      	bne.n	8002db4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002db4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1b2      	bne.n	8002d2a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3728      	adds	r7, #40	; 0x28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b088      	sub	sp, #32
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d911      	bls.n	8002e16 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	6938      	ldr	r0, [r7, #16]
 8002e02:	f009 f9f3 	bl	800c1ec <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002e06:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	441a      	add	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002e14:	e01f      	b.n	8002e56 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	4413      	add	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	6938      	ldr	r0, [r7, #16]
 8002e2a:	f009 f9df 	bl	800c1ec <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	4413      	add	r3, r2
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4619      	mov	r1, r3
 8002e46:	6938      	ldr	r0, [r7, #16]
 8002e48:	f009 f9d0 	bl	800c1ec <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002e4c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	60da      	str	r2, [r3, #12]
}
 8002e56:	bf00      	nop
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002e5e:	b480      	push	{r7}
 8002e60:	b087      	sub	sp, #28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d808      	bhi.n	8002e8c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad2      	subs	r2, r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	3b01      	subs	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e004      	b.n	8002e96 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002e96:	697b      	ldr	r3, [r7, #20]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08c      	sub	sp, #48	; 0x30
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8002eb0:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002eb2:	623b      	str	r3, [r7, #32]
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8002ebe:	f7ff fecf 	bl	8002c60 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4a37      	ldr	r2, [pc, #220]	; (8002fac <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002ed0:	4413      	add	r3, r2
 8002ed2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d92b      	bls.n	8002f48 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4293      	cmp	r3, r2
 8002f00:	bf28      	it	cs
 8002f02:	4613      	movcs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	4413      	add	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	6939      	ldr	r1, [r7, #16]
 8002f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f16:	f009 f969 	bl	800c1ec <memcpy>
    NumBytesRead += NumBytesRem;
 8002f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	4413      	add	r3, r2
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	4413      	add	r3, r2
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	4413      	add	r3, r2
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d101      	bne.n	8002f48 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4293      	cmp	r3, r2
 8002f56:	bf28      	it	cs
 8002f58:	4613      	movcs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	4413      	add	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	6939      	ldr	r1, [r7, #16]
 8002f70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f72:	f009 f93b 	bl	800c1ec <memcpy>
    NumBytesRead += NumBytesRem;
 8002f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	4413      	add	r3, r2
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	4413      	add	r3, r2
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3730      	adds	r7, #48	; 0x30
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	24006aa0 	.word	0x24006aa0

08002fb0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	; 0x30
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002fbc:	4b3e      	ldr	r3, [pc, #248]	; (80030b8 <SEGGER_RTT_ReadNoLock+0x108>)
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <SEGGER_RTT_ReadNoLock+0x1e>
 8002fca:	f7ff fe49 	bl	8002c60 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	3360      	adds	r3, #96	; 0x60
 8002fda:	4a37      	ldr	r2, [pc, #220]	; (80030b8 <SEGGER_RTT_ReadNoLock+0x108>)
 8002fdc:	4413      	add	r3, r2
 8002fde:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d92b      	bls.n	8003054 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4293      	cmp	r3, r2
 800300c:	bf28      	it	cs
 800300e:	4613      	movcs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	4413      	add	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	6939      	ldr	r1, [r7, #16]
 8003020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003022:	f009 f8e3 	bl	800c1ec <memcpy>
    NumBytesRead += NumBytesRem;
 8003026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	4413      	add	r3, r2
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800302e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	4413      	add	r3, r2
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800303e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	4413      	add	r3, r2
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800304c:	429a      	cmp	r2, r3
 800304e:	d101      	bne.n	8003054 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003050:	2300      	movs	r3, #0
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4293      	cmp	r3, r2
 8003062:	bf28      	it	cs
 8003064:	4613      	movcs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d019      	beq.n	80030a2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003074:	4413      	add	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	6939      	ldr	r1, [r7, #16]
 800307c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800307e:	f009 f8b5 	bl	800c1ec <memcpy>
    NumBytesRead += NumBytesRem;
 8003082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	4413      	add	r3, r2
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800308a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4413      	add	r3, r2
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800309a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	4413      	add	r3, r2
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3730      	adds	r7, #48	; 0x30
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	24006aa0 	.word	0x24006aa0

080030bc <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	3360      	adds	r3, #96	; 0x60
 80030d8:	4a1f      	ldr	r2, [pc, #124]	; (8003158 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80030da:	4413      	add	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d029      	beq.n	800313a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d82e      	bhi.n	8003148 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d013      	beq.n	800311a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80030f2:	e029      	b.n	8003148 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80030f4:	6978      	ldr	r0, [r7, #20]
 80030f6:	f7ff feb2 	bl	8002e5e <_GetAvailWriteSpace>
 80030fa:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d202      	bcs.n	800310a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003108:	e021      	b.n	800314e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	69b9      	ldr	r1, [r7, #24]
 8003112:	6978      	ldr	r0, [r7, #20]
 8003114:	f7ff fe5b 	bl	8002dce <_WriteNoCheck>
    break;
 8003118:	e019      	b.n	800314e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800311a:	6978      	ldr	r0, [r7, #20]
 800311c:	f7ff fe9f 	bl	8002e5e <_GetAvailWriteSpace>
 8003120:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4293      	cmp	r3, r2
 8003128:	bf28      	it	cs
 800312a:	4613      	movcs	r3, r2
 800312c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	6978      	ldr	r0, [r7, #20]
 8003134:	f7ff fe4b 	bl	8002dce <_WriteNoCheck>
    break;
 8003138:	e009      	b.n	800314e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	69b9      	ldr	r1, [r7, #24]
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f7ff fde8 	bl	8002d14 <_WriteBlocking>
 8003144:	61f8      	str	r0, [r7, #28]
    break;
 8003146:	e002      	b.n	800314e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
    break;
 800314c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800314e:	69fb      	ldr	r3, [r7, #28]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3720      	adds	r7, #32
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	24006aa0 	.word	0x24006aa0

0800315c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003176:	f7ff fd73 	bl	8002c60 <_DoInit>
  SEGGER_RTT_LOCK();
 800317a:	f3ef 8311 	mrs	r3, BASEPRI
 800317e:	f04f 0120 	mov.w	r1, #32
 8003182:	f381 8811 	msr	BASEPRI, r1
 8003186:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f7ff ff95 	bl	80030bc <SEGGER_RTT_WriteDownBufferNoLock>
 8003192:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800319a:	697b      	ldr	r3, [r7, #20]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	24006aa0 	.word	0x24006aa0

080031a8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <SEGGER_RTT_AllocUpBuffer+0x104>)
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80031c4:	f7ff fd4c 	bl	8002c60 <_DoInit>
  SEGGER_RTT_LOCK();
 80031c8:	f3ef 8311 	mrs	r3, BASEPRI
 80031cc:	f04f 0120 	mov.w	r1, #32
 80031d0:	f381 8811 	msr	BASEPRI, r1
 80031d4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80031d6:	4b35      	ldr	r3, [pc, #212]	; (80032ac <SEGGER_RTT_AllocUpBuffer+0x104>)
 80031d8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80031de:	6939      	ldr	r1, [r7, #16]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	440b      	add	r3, r1
 80031ee:	3304      	adds	r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3301      	adds	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	429a      	cmp	r2, r3
 8003204:	dbeb      	blt.n	80031de <SEGGER_RTT_AllocUpBuffer+0x36>
 8003206:	e000      	b.n	800320a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003208:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	429a      	cmp	r2, r3
 8003212:	da3f      	bge.n	8003294 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003214:	6939      	ldr	r1, [r7, #16]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	440b      	add	r3, r1
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003228:	6939      	ldr	r1, [r7, #16]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	3304      	adds	r3, #4
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800323e:	6939      	ldr	r1, [r7, #16]
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	3320      	adds	r3, #32
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003252:	6939      	ldr	r1, [r7, #16]
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	3328      	adds	r3, #40	; 0x28
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003266:	6939      	ldr	r1, [r7, #16]
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	3324      	adds	r3, #36	; 0x24
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800327a:	6939      	ldr	r1, [r7, #16]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	440b      	add	r3, r1
 8003288:	332c      	adds	r3, #44	; 0x2c
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800328e:	f3bf 8f5f 	dmb	sy
 8003292:	e002      	b.n	800329a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003294:	f04f 33ff 	mov.w	r3, #4294967295
 8003298:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80032a0:	69fb      	ldr	r3, [r7, #28]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	24006aa0 	.word	0x24006aa0

080032b0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80032be:	4b21      	ldr	r3, [pc, #132]	; (8003344 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80032c0:	623b      	str	r3, [r7, #32]
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80032cc:	f7ff fcc8 	bl	8002c60 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80032d0:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80032d2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d82c      	bhi.n	8003334 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80032da:	f3ef 8311 	mrs	r3, BASEPRI
 80032de:	f04f 0120 	mov.w	r1, #32
 80032e2:	f381 8811 	msr	BASEPRI, r1
 80032e6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	3360      	adds	r3, #96	; 0x60
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2200      	movs	r2, #0
 800331c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003322:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003324:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800332e:	2300      	movs	r3, #0
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	e002      	b.n	800333a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003334:	f04f 33ff 	mov.w	r3, #4294967295
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800333c:	4618      	mov	r0, r3
 800333e:	3728      	adds	r7, #40	; 0x28
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	24006aa0 	.word	0x24006aa0

08003348 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00f      	beq.n	800337e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800335e:	e002      	b.n	8003366 <_EncodeStr+0x1e>
      Len++;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	3301      	adds	r3, #1
 8003364:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f6      	bne.n	8003360 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	d901      	bls.n	800337e <_EncodeStr+0x36>
      Len = Limit;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2bfe      	cmp	r3, #254	; 0xfe
 8003382:	d806      	bhi.n	8003392 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	60fa      	str	r2, [r7, #12]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e011      	b.n	80033b6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	60fa      	str	r2, [r7, #12]
 8003398:	22ff      	movs	r2, #255	; 0xff
 800339a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	60fa      	str	r2, [r7, #12]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	0a19      	lsrs	r1, r3, #8
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	60fa      	str	r2, [r7, #12]
 80033b2:	b2ca      	uxtb	r2, r1
 80033b4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80033ba:	e00a      	b.n	80033d2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	1c53      	adds	r3, r2, #1
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1c59      	adds	r1, r3, #1
 80033c6:	60f9      	str	r1, [r7, #12]
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	701a      	strb	r2, [r3, #0]
    n++;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3301      	adds	r3, #1
 80033d0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d3f0      	bcc.n	80033bc <_EncodeStr+0x74>
  }
  return pPayload;
 80033da:	68fb      	ldr	r3, [r7, #12]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3307      	adds	r3, #7
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003406:	4b35      	ldr	r3, [pc, #212]	; (80034dc <_HandleIncomingPacket+0xdc>)
 8003408:	7e1b      	ldrb	r3, [r3, #24]
 800340a:	4618      	mov	r0, r3
 800340c:	1cfb      	adds	r3, r7, #3
 800340e:	2201      	movs	r2, #1
 8003410:	4619      	mov	r1, r3
 8003412:	f7ff fdcd 	bl	8002fb0 <SEGGER_RTT_ReadNoLock>
 8003416:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d052      	beq.n	80034c4 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	2b80      	cmp	r3, #128	; 0x80
 8003422:	d031      	beq.n	8003488 <_HandleIncomingPacket+0x88>
 8003424:	2b80      	cmp	r3, #128	; 0x80
 8003426:	dc40      	bgt.n	80034aa <_HandleIncomingPacket+0xaa>
 8003428:	2b07      	cmp	r3, #7
 800342a:	dc15      	bgt.n	8003458 <_HandleIncomingPacket+0x58>
 800342c:	2b00      	cmp	r3, #0
 800342e:	dd3c      	ble.n	80034aa <_HandleIncomingPacket+0xaa>
 8003430:	3b01      	subs	r3, #1
 8003432:	2b06      	cmp	r3, #6
 8003434:	d839      	bhi.n	80034aa <_HandleIncomingPacket+0xaa>
 8003436:	a201      	add	r2, pc, #4	; (adr r2, 800343c <_HandleIncomingPacket+0x3c>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	0800345f 	.word	0x0800345f
 8003440:	08003465 	.word	0x08003465
 8003444:	0800346b 	.word	0x0800346b
 8003448:	08003471 	.word	0x08003471
 800344c:	08003477 	.word	0x08003477
 8003450:	0800347d 	.word	0x0800347d
 8003454:	08003483 	.word	0x08003483
 8003458:	2b7f      	cmp	r3, #127	; 0x7f
 800345a:	d035      	beq.n	80034c8 <_HandleIncomingPacket+0xc8>
 800345c:	e025      	b.n	80034aa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800345e:	f000 fc35 	bl	8003ccc <SEGGER_SYSVIEW_Start>
      break;
 8003462:	e036      	b.n	80034d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003464:	f000 fcee 	bl	8003e44 <SEGGER_SYSVIEW_Stop>
      break;
 8003468:	e033      	b.n	80034d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800346a:	f000 fec7 	bl	80041fc <SEGGER_SYSVIEW_RecordSystime>
      break;
 800346e:	e030      	b.n	80034d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003470:	f000 fe8c 	bl	800418c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003474:	e02d      	b.n	80034d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003476:	f000 fd0b 	bl	8003e90 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800347a:	e02a      	b.n	80034d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800347c:	f001 f95a 	bl	8004734 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003480:	e027      	b.n	80034d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003482:	f001 f939 	bl	80046f8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003486:	e024      	b.n	80034d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003488:	4b14      	ldr	r3, [pc, #80]	; (80034dc <_HandleIncomingPacket+0xdc>)
 800348a:	7e1b      	ldrb	r3, [r3, #24]
 800348c:	4618      	mov	r0, r3
 800348e:	1cfb      	adds	r3, r7, #3
 8003490:	2201      	movs	r2, #1
 8003492:	4619      	mov	r1, r3
 8003494:	f7ff fd8c 	bl	8002fb0 <SEGGER_RTT_ReadNoLock>
 8003498:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 f8a8 	bl	80045f8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80034a8:	e010      	b.n	80034cc <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da0e      	bge.n	80034d0 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <_HandleIncomingPacket+0xdc>)
 80034b4:	7e1b      	ldrb	r3, [r3, #24]
 80034b6:	4618      	mov	r0, r3
 80034b8:	1cfb      	adds	r3, r7, #3
 80034ba:	2201      	movs	r2, #1
 80034bc:	4619      	mov	r1, r3
 80034be:	f7ff fd77 	bl	8002fb0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80034c2:	e005      	b.n	80034d0 <_HandleIncomingPacket+0xd0>
    }
  }
 80034c4:	bf00      	nop
 80034c6:	e004      	b.n	80034d2 <_HandleIncomingPacket+0xd2>
      break;
 80034c8:	bf00      	nop
 80034ca:	e002      	b.n	80034d2 <_HandleIncomingPacket+0xd2>
      break;
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <_HandleIncomingPacket+0xd2>
      break;
 80034d0:	bf00      	nop
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	2407eb60 	.word	0x2407eb60

080034e0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08c      	sub	sp, #48	; 0x30
 80034e4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80034e6:	2301      	movs	r3, #1
 80034e8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80034ea:	1d3b      	adds	r3, r7, #4
 80034ec:	3301      	adds	r3, #1
 80034ee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f4:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <_TrySendOverflowPacket+0xe0>)
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fa:	e00b      	b.n	8003514 <_TrySendOverflowPacket+0x34>
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	1c59      	adds	r1, r3, #1
 8003504:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003506:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	09db      	lsrs	r3, r3, #7
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	2b7f      	cmp	r3, #127	; 0x7f
 8003518:	d8f0      	bhi.n	80034fc <_TrySendOverflowPacket+0x1c>
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <_TrySendOverflowPacket+0xe4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003530:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <_TrySendOverflowPacket+0xe0>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	623b      	str	r3, [r7, #32]
 8003542:	e00b      	b.n	800355c <_TrySendOverflowPacket+0x7c>
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	1c59      	adds	r1, r3, #1
 800354c:	6279      	str	r1, [r7, #36]	; 0x24
 800354e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	09db      	lsrs	r3, r3, #7
 800355a:	623b      	str	r3, [r7, #32]
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	2b7f      	cmp	r3, #127	; 0x7f
 8003560:	d8f0      	bhi.n	8003544 <_TrySendOverflowPacket+0x64>
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	627a      	str	r2, [r7, #36]	; 0x24
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <_TrySendOverflowPacket+0xe0>)
 8003574:	785b      	ldrb	r3, [r3, #1]
 8003576:	4618      	mov	r0, r3
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	461a      	mov	r2, r3
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	4619      	mov	r1, r3
 8003584:	f7fc feac 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003588:	4603      	mov	r3, r0
 800358a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800358c:	f7ff fade 	bl	8002b4c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <_TrySendOverflowPacket+0xe0>)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <_TrySendOverflowPacket+0xe0>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <_TrySendOverflowPacket+0xe0>)
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e004      	b.n	80035b4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <_TrySendOverflowPacket+0xe0>)
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	3301      	adds	r3, #1
 80035b0:	4a03      	ldr	r2, [pc, #12]	; (80035c0 <_TrySendOverflowPacket+0xe0>)
 80035b2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80035b4:	693b      	ldr	r3, [r7, #16]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3730      	adds	r7, #48	; 0x30
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	2407eb60 	.word	0x2407eb60
 80035c4:	e0001004 	.word	0xe0001004

080035c8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08a      	sub	sp, #40	; 0x28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80035d4:	4b96      	ldr	r3, [pc, #600]	; (8003830 <_SendPacket+0x268>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d010      	beq.n	80035fe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80035dc:	4b94      	ldr	r3, [pc, #592]	; (8003830 <_SendPacket+0x268>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8130 	beq.w	8003846 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80035e6:	4b92      	ldr	r3, [pc, #584]	; (8003830 <_SendPacket+0x268>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d109      	bne.n	8003602 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80035ee:	f7ff ff77 	bl	80034e0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80035f2:	4b8f      	ldr	r3, [pc, #572]	; (8003830 <_SendPacket+0x268>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	f040 8127 	bne.w	800384a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80035fc:	e001      	b.n	8003602 <_SendPacket+0x3a>
    goto Send;
 80035fe:	bf00      	nop
 8003600:	e000      	b.n	8003604 <_SendPacket+0x3c>
Send:
 8003602:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b1f      	cmp	r3, #31
 8003608:	d809      	bhi.n	800361e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800360a:	4b89      	ldr	r3, [pc, #548]	; (8003830 <_SendPacket+0x268>)
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	f040 8118 	bne.w	800384e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b17      	cmp	r3, #23
 8003622:	d807      	bhi.n	8003634 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3b01      	subs	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e0c4      	b.n	80037be <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b7f      	cmp	r3, #127	; 0x7f
 8003640:	d912      	bls.n	8003668 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	09da      	lsrs	r2, r3, #7
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3b01      	subs	r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	3a01      	subs	r2, #1
 800365a:	60fa      	str	r2, [r7, #12]
 800365c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003660:	b2da      	uxtb	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e006      	b.n	8003676 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3b01      	subs	r3, #1
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b7e      	cmp	r3, #126	; 0x7e
 800367a:	d807      	bhi.n	800368c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3b01      	subs	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e098      	b.n	80037be <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003692:	d212      	bcs.n	80036ba <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	09da      	lsrs	r2, r3, #7
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3b01      	subs	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	3a01      	subs	r2, #1
 80036ac:	60fa      	str	r2, [r7, #12]
 80036ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e081      	b.n	80037be <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c0:	d21d      	bcs.n	80036fe <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	0b9a      	lsrs	r2, r3, #14
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	09db      	lsrs	r3, r3, #7
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	3a01      	subs	r2, #1
 80036dc:	60fa      	str	r2, [r7, #12]
 80036de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	3a01      	subs	r2, #1
 80036f0:	60fa      	str	r2, [r7, #12]
 80036f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e05f      	b.n	80037be <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003704:	d228      	bcs.n	8003758 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	0d5a      	lsrs	r2, r3, #21
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3b01      	subs	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	0b9b      	lsrs	r3, r3, #14
 800371a:	b2db      	uxtb	r3, r3
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	3a01      	subs	r2, #1
 8003720:	60fa      	str	r2, [r7, #12]
 8003722:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	09db      	lsrs	r3, r3, #7
 8003730:	b2db      	uxtb	r3, r3
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	3a01      	subs	r2, #1
 8003736:	60fa      	str	r2, [r7, #12]
 8003738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	3a01      	subs	r2, #1
 800374a:	60fa      	str	r2, [r7, #12]
 800374c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e032      	b.n	80037be <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	0f1a      	lsrs	r2, r3, #28
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3b01      	subs	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	0d5b      	lsrs	r3, r3, #21
 800376c:	b2db      	uxtb	r3, r3
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	3a01      	subs	r2, #1
 8003772:	60fa      	str	r2, [r7, #12]
 8003774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003778:	b2da      	uxtb	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0b9b      	lsrs	r3, r3, #14
 8003782:	b2db      	uxtb	r3, r3
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	3a01      	subs	r2, #1
 8003788:	60fa      	str	r2, [r7, #12]
 800378a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800378e:	b2da      	uxtb	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	09db      	lsrs	r3, r3, #7
 8003798:	b2db      	uxtb	r3, r3
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	3a01      	subs	r2, #1
 800379e:	60fa      	str	r2, [r7, #12]
 80037a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	3a01      	subs	r2, #1
 80037b2:	60fa      	str	r2, [r7, #12]
 80037b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80037be:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <_SendPacket+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <_SendPacket+0x268>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	e00b      	b.n	80037f0 <_SendPacket+0x228>
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	1c59      	adds	r1, r3, #1
 80037e0:	6279      	str	r1, [r7, #36]	; 0x24
 80037e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	09db      	lsrs	r3, r3, #7
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	2b7f      	cmp	r3, #127	; 0x7f
 80037f4:	d8f0      	bhi.n	80037d8 <_SendPacket+0x210>
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	627a      	str	r2, [r7, #36]	; 0x24
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <_SendPacket+0x268>)
 8003808:	785b      	ldrb	r3, [r3, #1]
 800380a:	4618      	mov	r0, r3
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	461a      	mov	r2, r3
 8003814:	68f9      	ldr	r1, [r7, #12]
 8003816:	f7fc fd63 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800381a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800381c:	f7ff f996 	bl	8002b4c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003826:	4a02      	ldr	r2, [pc, #8]	; (8003830 <_SendPacket+0x268>)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	60d3      	str	r3, [r2, #12]
 800382c:	e010      	b.n	8003850 <_SendPacket+0x288>
 800382e:	bf00      	nop
 8003830:	2407eb60 	.word	0x2407eb60
 8003834:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <_SendPacket+0x2d8>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	b2da      	uxtb	r2, r3
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <_SendPacket+0x2d8>)
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	e004      	b.n	8003850 <_SendPacket+0x288>
    goto SendDone;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <_SendPacket+0x288>
      goto SendDone;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <_SendPacket+0x288>
      goto SendDone;
 800384e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <_SendPacket+0x2d8>)
 8003852:	7e1b      	ldrb	r3, [r3, #24]
 8003854:	4619      	mov	r1, r3
 8003856:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <_SendPacket+0x2dc>)
 8003858:	460b      	mov	r3, r1
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	440b      	add	r3, r1
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	336c      	adds	r3, #108	; 0x6c
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <_SendPacket+0x2d8>)
 8003868:	7e1b      	ldrb	r3, [r3, #24]
 800386a:	4618      	mov	r0, r3
 800386c:	490d      	ldr	r1, [pc, #52]	; (80038a4 <_SendPacket+0x2dc>)
 800386e:	4603      	mov	r3, r0
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4403      	add	r3, r0
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	440b      	add	r3, r1
 8003878:	3370      	adds	r3, #112	; 0x70
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d00b      	beq.n	8003898 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003880:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <_SendPacket+0x2d8>)
 8003882:	789b      	ldrb	r3, [r3, #2]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d107      	bne.n	8003898 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <_SendPacket+0x2d8>)
 800388a:	2201      	movs	r2, #1
 800388c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800388e:	f7ff fdb7 	bl	8003400 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003892:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <_SendPacket+0x2d8>)
 8003894:	2200      	movs	r2, #0
 8003896:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003898:	bf00      	nop
 800389a:	3728      	adds	r7, #40	; 0x28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	2407eb60 	.word	0x2407eb60
 80038a4:	24006aa0 	.word	0x24006aa0

080038a8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80038b6:	2300      	movs	r3, #0
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <SEGGER_SYSVIEW_Init+0x74>)
 80038ba:	4919      	ldr	r1, [pc, #100]	; (8003920 <SEGGER_SYSVIEW_Init+0x78>)
 80038bc:	4819      	ldr	r0, [pc, #100]	; (8003924 <SEGGER_SYSVIEW_Init+0x7c>)
 80038be:	f7ff fc73 	bl	80031a8 <SEGGER_RTT_AllocUpBuffer>
 80038c2:	4603      	mov	r3, r0
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <SEGGER_SYSVIEW_Init+0x80>)
 80038c8:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80038ca:	4b17      	ldr	r3, [pc, #92]	; (8003928 <SEGGER_SYSVIEW_Init+0x80>)
 80038cc:	785a      	ldrb	r2, [r3, #1]
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <SEGGER_SYSVIEW_Init+0x80>)
 80038d0:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <SEGGER_SYSVIEW_Init+0x80>)
 80038d4:	7e1b      	ldrb	r3, [r3, #24]
 80038d6:	4618      	mov	r0, r3
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	2308      	movs	r3, #8
 80038de:	4a13      	ldr	r2, [pc, #76]	; (800392c <SEGGER_SYSVIEW_Init+0x84>)
 80038e0:	4910      	ldr	r1, [pc, #64]	; (8003924 <SEGGER_SYSVIEW_Init+0x7c>)
 80038e2:	f7ff fce5 	bl	80032b0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <SEGGER_SYSVIEW_Init+0x80>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80038ec:	4b10      	ldr	r3, [pc, #64]	; (8003930 <SEGGER_SYSVIEW_Init+0x88>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <SEGGER_SYSVIEW_Init+0x80>)
 80038f2:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80038f4:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <SEGGER_SYSVIEW_Init+0x80>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80038fa:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <SEGGER_SYSVIEW_Init+0x80>)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003900:	4a09      	ldr	r2, [pc, #36]	; (8003928 <SEGGER_SYSVIEW_Init+0x80>)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003906:	4a08      	ldr	r2, [pc, #32]	; (8003928 <SEGGER_SYSVIEW_Init+0x80>)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <SEGGER_SYSVIEW_Init+0x80>)
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	00077c00 	.word	0x00077c00
 8003920:	24006f58 	.word	0x24006f58
 8003924:	0800cbb8 	.word	0x0800cbb8
 8003928:	2407eb60 	.word	0x2407eb60
 800392c:	2407eb58 	.word	0x2407eb58
 8003930:	e0001004 	.word	0xe0001004

08003934 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6113      	str	r3, [r2, #16]
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	2407eb60 	.word	0x2407eb60

08003954 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800395c:	f3ef 8311 	mrs	r3, BASEPRI
 8003960:	f04f 0120 	mov.w	r1, #32
 8003964:	f381 8811 	msr	BASEPRI, r1
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	4808      	ldr	r0, [pc, #32]	; (800398c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800396c:	f7ff fd3c 	bl	80033e8 <_PreparePacket>
 8003970:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	68b8      	ldr	r0, [r7, #8]
 8003978:	f7ff fe26 	bl	80035c8 <_SendPacket>
  RECORD_END();
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f383 8811 	msr	BASEPRI, r3
}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	2407eb90 	.word	0x2407eb90

08003990 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800399a:	f3ef 8311 	mrs	r3, BASEPRI
 800399e:	f04f 0120 	mov.w	r1, #32
 80039a2:	f381 8811 	msr	BASEPRI, r1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	4816      	ldr	r0, [pc, #88]	; (8003a04 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80039aa:	f7ff fd1d 	bl	80033e8 <_PreparePacket>
 80039ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	e00b      	b.n	80039d6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	1c59      	adds	r1, r3, #1
 80039c6:	61f9      	str	r1, [r7, #28]
 80039c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	09db      	lsrs	r3, r3, #7
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b7f      	cmp	r3, #127	; 0x7f
 80039da:	d8f0      	bhi.n	80039be <SEGGER_SYSVIEW_RecordU32+0x2e>
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	61fa      	str	r2, [r7, #28]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68f9      	ldr	r1, [r7, #12]
 80039f0:	6938      	ldr	r0, [r7, #16]
 80039f2:	f7ff fde9 	bl	80035c8 <_SendPacket>
  RECORD_END();
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f383 8811 	msr	BASEPRI, r3
}
 80039fc:	bf00      	nop
 80039fe:	3720      	adds	r7, #32
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	2407eb90 	.word	0x2407eb90

08003a08 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08c      	sub	sp, #48	; 0x30
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a14:	f3ef 8311 	mrs	r3, BASEPRI
 8003a18:	f04f 0120 	mov.w	r1, #32
 8003a1c:	f381 8811 	msr	BASEPRI, r1
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	4825      	ldr	r0, [pc, #148]	; (8003ab8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003a24:	f7ff fce0 	bl	80033e8 <_PreparePacket>
 8003a28:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a36:	e00b      	b.n	8003a50 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	1c59      	adds	r1, r3, #1
 8003a40:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003a42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	09db      	lsrs	r3, r3, #7
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	2b7f      	cmp	r3, #127	; 0x7f
 8003a54:	d8f0      	bhi.n	8003a38 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	623b      	str	r3, [r7, #32]
 8003a6e:	e00b      	b.n	8003a88 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	1c59      	adds	r1, r3, #1
 8003a78:	6279      	str	r1, [r7, #36]	; 0x24
 8003a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	09db      	lsrs	r3, r3, #7
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a8c:	d8f0      	bhi.n	8003a70 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	627a      	str	r2, [r7, #36]	; 0x24
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	6979      	ldr	r1, [r7, #20]
 8003aa2:	69b8      	ldr	r0, [r7, #24]
 8003aa4:	f7ff fd90 	bl	80035c8 <_SendPacket>
  RECORD_END();
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f383 8811 	msr	BASEPRI, r3
}
 8003aae:	bf00      	nop
 8003ab0:	3730      	adds	r7, #48	; 0x30
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2407eb90 	.word	0x2407eb90

08003abc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08e      	sub	sp, #56	; 0x38
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003aca:	f3ef 8311 	mrs	r3, BASEPRI
 8003ace:	f04f 0120 	mov.w	r1, #32
 8003ad2:	f381 8811 	msr	BASEPRI, r1
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	4832      	ldr	r0, [pc, #200]	; (8003ba4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003ada:	f7ff fc85 	bl	80033e8 <_PreparePacket>
 8003ade:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
 8003aec:	e00b      	b.n	8003b06 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af4:	1c59      	adds	r1, r3, #1
 8003af6:	6379      	str	r1, [r7, #52]	; 0x34
 8003af8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	09db      	lsrs	r3, r3, #7
 8003b04:	633b      	str	r3, [r7, #48]	; 0x30
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	2b7f      	cmp	r3, #127	; 0x7f
 8003b0a:	d8f0      	bhi.n	8003aee <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	637a      	str	r2, [r7, #52]	; 0x34
 8003b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]
 8003b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b24:	e00b      	b.n	8003b3e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	1c59      	adds	r1, r3, #1
 8003b2e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	09db      	lsrs	r3, r3, #7
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	2b7f      	cmp	r3, #127	; 0x7f
 8003b42:	d8f0      	bhi.n	8003b26 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	e00b      	b.n	8003b76 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	1c59      	adds	r1, r3, #1
 8003b66:	6279      	str	r1, [r7, #36]	; 0x24
 8003b68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	701a      	strb	r2, [r3, #0]
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	09db      	lsrs	r3, r3, #7
 8003b74:	623b      	str	r3, [r7, #32]
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	2b7f      	cmp	r3, #127	; 0x7f
 8003b7a:	d8f0      	bhi.n	8003b5e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	627a      	str	r2, [r7, #36]	; 0x24
 8003b82:	6a3a      	ldr	r2, [r7, #32]
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	6979      	ldr	r1, [r7, #20]
 8003b90:	69b8      	ldr	r0, [r7, #24]
 8003b92:	f7ff fd19 	bl	80035c8 <_SendPacket>
  RECORD_END();
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f383 8811 	msr	BASEPRI, r3
}
 8003b9c:	bf00      	nop
 8003b9e:	3738      	adds	r7, #56	; 0x38
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	2407eb90 	.word	0x2407eb90

08003ba8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b090      	sub	sp, #64	; 0x40
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8003bba:	f04f 0120 	mov.w	r1, #32
 8003bbe:	f381 8811 	msr	BASEPRI, r1
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	4840      	ldr	r0, [pc, #256]	; (8003cc8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003bc6:	f7ff fc0f 	bl	80033e8 <_PreparePacket>
 8003bca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bd8:	e00b      	b.n	8003bf2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be0:	1c59      	adds	r1, r3, #1
 8003be2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003be4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	09db      	lsrs	r3, r3, #7
 8003bf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8003bf6:	d8f0      	bhi.n	8003bda <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c10:	e00b      	b.n	8003c2a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c18:	1c59      	adds	r1, r3, #1
 8003c1a:	6379      	str	r1, [r7, #52]	; 0x34
 8003c1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	09db      	lsrs	r3, r3, #7
 8003c28:	633b      	str	r3, [r7, #48]	; 0x30
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c2e:	d8f0      	bhi.n	8003c12 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	637a      	str	r2, [r7, #52]	; 0x34
 8003c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c48:	e00b      	b.n	8003c62 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	1c59      	adds	r1, r3, #1
 8003c52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	09db      	lsrs	r3, r3, #7
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	2b7f      	cmp	r3, #127	; 0x7f
 8003c66:	d8f0      	bhi.n	8003c4a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7e:	623b      	str	r3, [r7, #32]
 8003c80:	e00b      	b.n	8003c9a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	1c59      	adds	r1, r3, #1
 8003c8a:	6279      	str	r1, [r7, #36]	; 0x24
 8003c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	09db      	lsrs	r3, r3, #7
 8003c98:	623b      	str	r3, [r7, #32]
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c9e:	d8f0      	bhi.n	8003c82 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ca6:	6a3a      	ldr	r2, [r7, #32]
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	6979      	ldr	r1, [r7, #20]
 8003cb4:	69b8      	ldr	r0, [r7, #24]
 8003cb6:	f7ff fc87 	bl	80035c8 <_SendPacket>
  RECORD_END();
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f383 8811 	msr	BASEPRI, r3
}
 8003cc0:	bf00      	nop
 8003cc2:	3740      	adds	r7, #64	; 0x40
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	2407eb90 	.word	0x2407eb90

08003ccc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08c      	sub	sp, #48	; 0x30
 8003cd0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003cd2:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <SEGGER_SYSVIEW_Start+0x16c>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003cd8:	f3ef 8311 	mrs	r3, BASEPRI
 8003cdc:	f04f 0120 	mov.w	r1, #32
 8003ce0:	f381 8811 	msr	BASEPRI, r1
 8003ce4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003ce6:	4b54      	ldr	r3, [pc, #336]	; (8003e38 <SEGGER_SYSVIEW_Start+0x16c>)
 8003ce8:	785b      	ldrb	r3, [r3, #1]
 8003cea:	220a      	movs	r2, #10
 8003cec:	4953      	ldr	r1, [pc, #332]	; (8003e3c <SEGGER_SYSVIEW_Start+0x170>)
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fc faf6 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003cfa:	f7fe ff27 	bl	8002b4c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003cfe:	200a      	movs	r0, #10
 8003d00:	f7ff fe28 	bl	8003954 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d04:	f3ef 8311 	mrs	r3, BASEPRI
 8003d08:	f04f 0120 	mov.w	r1, #32
 8003d0c:	f381 8811 	msr	BASEPRI, r1
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	484b      	ldr	r0, [pc, #300]	; (8003e40 <SEGGER_SYSVIEW_Start+0x174>)
 8003d14:	f7ff fb68 	bl	80033e8 <_PreparePacket>
 8003d18:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d22:	4b45      	ldr	r3, [pc, #276]	; (8003e38 <SEGGER_SYSVIEW_Start+0x16c>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d28:	e00b      	b.n	8003d42 <SEGGER_SYSVIEW_Start+0x76>
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	1c59      	adds	r1, r3, #1
 8003d32:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	09db      	lsrs	r3, r3, #7
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	2b7f      	cmp	r3, #127	; 0x7f
 8003d46:	d8f0      	bhi.n	8003d2a <SEGGER_SYSVIEW_Start+0x5e>
 8003d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5c:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <SEGGER_SYSVIEW_Start+0x16c>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	623b      	str	r3, [r7, #32]
 8003d62:	e00b      	b.n	8003d7c <SEGGER_SYSVIEW_Start+0xb0>
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	1c59      	adds	r1, r3, #1
 8003d6c:	6279      	str	r1, [r7, #36]	; 0x24
 8003d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	09db      	lsrs	r3, r3, #7
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d80:	d8f0      	bhi.n	8003d64 <SEGGER_SYSVIEW_Start+0x98>
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	627a      	str	r2, [r7, #36]	; 0x24
 8003d88:	6a3a      	ldr	r2, [r7, #32]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <SEGGER_SYSVIEW_Start+0x16c>)
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	e00b      	b.n	8003db6 <SEGGER_SYSVIEW_Start+0xea>
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	1c59      	adds	r1, r3, #1
 8003da6:	61f9      	str	r1, [r7, #28]
 8003da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	09db      	lsrs	r3, r3, #7
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b7f      	cmp	r3, #127	; 0x7f
 8003dba:	d8f0      	bhi.n	8003d9e <SEGGER_SYSVIEW_Start+0xd2>
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	61fa      	str	r2, [r7, #28]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	e00b      	b.n	8003dee <SEGGER_SYSVIEW_Start+0x122>
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	1c59      	adds	r1, r3, #1
 8003dde:	6179      	str	r1, [r7, #20]
 8003de0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	09db      	lsrs	r3, r3, #7
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b7f      	cmp	r3, #127	; 0x7f
 8003df2:	d8f0      	bhi.n	8003dd6 <SEGGER_SYSVIEW_Start+0x10a>
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	617a      	str	r2, [r7, #20]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003e04:	2218      	movs	r2, #24
 8003e06:	6839      	ldr	r1, [r7, #0]
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff fbdd 	bl	80035c8 <_SendPacket>
      RECORD_END();
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <SEGGER_SYSVIEW_Start+0x16c>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <SEGGER_SYSVIEW_Start+0x16c>)
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003e22:	f000 f9eb 	bl	80041fc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003e26:	f000 f9b1 	bl	800418c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003e2a:	f000 fc83 	bl	8004734 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003e2e:	bf00      	nop
 8003e30:	3730      	adds	r7, #48	; 0x30
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2407eb60 	.word	0x2407eb60
 8003e3c:	0800ccec 	.word	0x0800ccec
 8003e40:	2407eb90 	.word	0x2407eb90

08003e44 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e4e:	f04f 0120 	mov.w	r1, #32
 8003e52:	f381 8811 	msr	BASEPRI, r1
 8003e56:	607b      	str	r3, [r7, #4]
 8003e58:	480b      	ldr	r0, [pc, #44]	; (8003e88 <SEGGER_SYSVIEW_Stop+0x44>)
 8003e5a:	f7ff fac5 	bl	80033e8 <_PreparePacket>
 8003e5e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <SEGGER_SYSVIEW_Stop+0x48>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003e68:	220b      	movs	r2, #11
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	6838      	ldr	r0, [r7, #0]
 8003e6e:	f7ff fbab 	bl	80035c8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <SEGGER_SYSVIEW_Stop+0x48>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f383 8811 	msr	BASEPRI, r3
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	2407eb90 	.word	0x2407eb90
 8003e8c:	2407eb60 	.word	0x2407eb60

08003e90 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08c      	sub	sp, #48	; 0x30
 8003e94:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e96:	f3ef 8311 	mrs	r3, BASEPRI
 8003e9a:	f04f 0120 	mov.w	r1, #32
 8003e9e:	f381 8811 	msr	BASEPRI, r1
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	4845      	ldr	r0, [pc, #276]	; (8003fbc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003ea6:	f7ff fa9f 	bl	80033e8 <_PreparePacket>
 8003eaa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb4:	4b42      	ldr	r3, [pc, #264]	; (8003fc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eba:	e00b      	b.n	8003ed4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	1c59      	adds	r1, r3, #1
 8003ec4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003ec6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	09db      	lsrs	r3, r3, #7
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ed8:	d8f0      	bhi.n	8003ebc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
 8003eee:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	623b      	str	r3, [r7, #32]
 8003ef4:	e00b      	b.n	8003f0e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	1c59      	adds	r1, r3, #1
 8003efe:	6279      	str	r1, [r7, #36]	; 0x24
 8003f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	701a      	strb	r2, [r3, #0]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	09db      	lsrs	r3, r3, #7
 8003f0c:	623b      	str	r3, [r7, #32]
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	2b7f      	cmp	r3, #127	; 0x7f
 8003f12:	d8f0      	bhi.n	8003ef6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	627a      	str	r2, [r7, #36]	; 0x24
 8003f1a:	6a3a      	ldr	r2, [r7, #32]
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	e00b      	b.n	8003f48 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	1c59      	adds	r1, r3, #1
 8003f38:	61f9      	str	r1, [r7, #28]
 8003f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	09db      	lsrs	r3, r3, #7
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f4c:	d8f0      	bhi.n	8003f30 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	61fa      	str	r2, [r7, #28]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	e00b      	b.n	8003f80 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	1c59      	adds	r1, r3, #1
 8003f70:	6179      	str	r1, [r7, #20]
 8003f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	09db      	lsrs	r3, r3, #7
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b7f      	cmp	r3, #127	; 0x7f
 8003f84:	d8f0      	bhi.n	8003f68 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	617a      	str	r2, [r7, #20]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003f96:	2218      	movs	r2, #24
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	68b8      	ldr	r0, [r7, #8]
 8003f9c:	f7ff fb14 	bl	80035c8 <_SendPacket>
  RECORD_END();
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	4798      	blx	r3
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3730      	adds	r7, #48	; 0x30
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	2407eb90 	.word	0x2407eb90
 8003fc0:	2407eb60 	.word	0x2407eb60

08003fc4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b092      	sub	sp, #72	; 0x48
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8003fd0:	f04f 0120 	mov.w	r1, #32
 8003fd4:	f381 8811 	msr	BASEPRI, r1
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	486a      	ldr	r0, [pc, #424]	; (8004184 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003fdc:	f7ff fa04 	bl	80033e8 <_PreparePacket>
 8003fe0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b66      	ldr	r3, [pc, #408]	; (8004188 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ff6:	e00b      	b.n	8004010 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffe:	1c59      	adds	r1, r3, #1
 8004000:	6479      	str	r1, [r7, #68]	; 0x44
 8004002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400c:	09db      	lsrs	r3, r3, #7
 800400e:	643b      	str	r3, [r7, #64]	; 0x40
 8004010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004012:	2b7f      	cmp	r3, #127	; 0x7f
 8004014:	d8f0      	bhi.n	8003ff8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	647a      	str	r2, [r7, #68]	; 0x44
 800401c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004024:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004030:	e00b      	b.n	800404a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	b2da      	uxtb	r2, r3
 8004036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004038:	1c59      	adds	r1, r3, #1
 800403a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800403c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	09db      	lsrs	r3, r3, #7
 8004048:	63bb      	str	r3, [r7, #56]	; 0x38
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	2b7f      	cmp	r3, #127	; 0x7f
 800404e:	d8f0      	bhi.n	8004032 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	4619      	mov	r1, r3
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff f96d 	bl	8003348 <_EncodeStr>
 800406e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004070:	2209      	movs	r2, #9
 8004072:	68f9      	ldr	r1, [r7, #12]
 8004074:	6938      	ldr	r0, [r7, #16]
 8004076:	f7ff faa7 	bl	80035c8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	637b      	str	r3, [r7, #52]	; 0x34
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4b40      	ldr	r3, [pc, #256]	; (8004188 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	633b      	str	r3, [r7, #48]	; 0x30
 800408e:	e00b      	b.n	80040a8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	b2da      	uxtb	r2, r3
 8004094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004096:	1c59      	adds	r1, r3, #1
 8004098:	6379      	str	r1, [r7, #52]	; 0x34
 800409a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	09db      	lsrs	r3, r3, #7
 80040a6:	633b      	str	r3, [r7, #48]	; 0x30
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	2b7f      	cmp	r3, #127	; 0x7f
 80040ac:	d8f0      	bhi.n	8004090 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80040ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	637a      	str	r2, [r7, #52]	; 0x34
 80040b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c8:	e00b      	b.n	80040e2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	1c59      	adds	r1, r3, #1
 80040d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	09db      	lsrs	r3, r3, #7
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	2b7f      	cmp	r3, #127	; 0x7f
 80040e6:	d8f0      	bhi.n	80040ca <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	e00b      	b.n	800411c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	6279      	str	r1, [r7, #36]	; 0x24
 800410e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	09db      	lsrs	r3, r3, #7
 800411a:	623b      	str	r3, [r7, #32]
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	2b7f      	cmp	r3, #127	; 0x7f
 8004120:	d8f0      	bhi.n	8004104 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	627a      	str	r2, [r7, #36]	; 0x24
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	e00b      	b.n	8004154 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	b2da      	uxtb	r2, r3
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	1c59      	adds	r1, r3, #1
 8004144:	61f9      	str	r1, [r7, #28]
 8004146:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	09db      	lsrs	r3, r3, #7
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b7f      	cmp	r3, #127	; 0x7f
 8004158:	d8f0      	bhi.n	800413c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	61fa      	str	r2, [r7, #28]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800416a:	2215      	movs	r2, #21
 800416c:	68f9      	ldr	r1, [r7, #12]
 800416e:	6938      	ldr	r0, [r7, #16]
 8004170:	f7ff fa2a 	bl	80035c8 <_SendPacket>
  RECORD_END();
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f383 8811 	msr	BASEPRI, r3
}
 800417a:	bf00      	nop
 800417c:	3748      	adds	r7, #72	; 0x48
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	2407eb90 	.word	0x2407eb90
 8004188:	2407eb60 	.word	0x2407eb60

0800418c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80041a2:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4798      	blx	r3
  }
}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2407eb60 	.word	0x2407eb60

080041b4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80041bc:	f3ef 8311 	mrs	r3, BASEPRI
 80041c0:	f04f 0120 	mov.w	r1, #32
 80041c4:	f381 8811 	msr	BASEPRI, r1
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	480b      	ldr	r0, [pc, #44]	; (80041f8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80041cc:	f7ff f90c 	bl	80033e8 <_PreparePacket>
 80041d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80041d2:	2280      	movs	r2, #128	; 0x80
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	6938      	ldr	r0, [r7, #16]
 80041d8:	f7ff f8b6 	bl	8003348 <_EncodeStr>
 80041dc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80041de:	220e      	movs	r2, #14
 80041e0:	68f9      	ldr	r1, [r7, #12]
 80041e2:	6938      	ldr	r0, [r7, #16]
 80041e4:	f7ff f9f0 	bl	80035c8 <_SendPacket>
  RECORD_END();
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f383 8811 	msr	BASEPRI, r3
}
 80041ee:	bf00      	nop
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	2407eb90 	.word	0x2407eb90

080041fc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01a      	beq.n	8004240 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800420a:	4b13      	ldr	r3, [pc, #76]	; (8004258 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d015      	beq.n	8004240 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4798      	blx	r3
 800421c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004220:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004222:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	000a      	movs	r2, r1
 8004230:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004232:	4613      	mov	r3, r2
 8004234:	461a      	mov	r2, r3
 8004236:	4621      	mov	r1, r4
 8004238:	200d      	movs	r0, #13
 800423a:	f7ff fbe5 	bl	8003a08 <SEGGER_SYSVIEW_RecordU32x2>
 800423e:	e006      	b.n	800424e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4619      	mov	r1, r3
 8004246:	200c      	movs	r0, #12
 8004248:	f7ff fba2 	bl	8003990 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	bd90      	pop	{r4, r7, pc}
 8004256:	bf00      	nop
 8004258:	2407eb60 	.word	0x2407eb60
 800425c:	e0001004 	.word	0xe0001004

08004260 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004266:	f3ef 8311 	mrs	r3, BASEPRI
 800426a:	f04f 0120 	mov.w	r1, #32
 800426e:	f381 8811 	msr	BASEPRI, r1
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	4819      	ldr	r0, [pc, #100]	; (80042dc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004276:	f7ff f8b7 	bl	80033e8 <_PreparePacket>
 800427a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004280:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004288:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e00b      	b.n	80042ac <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	b2da      	uxtb	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	1c59      	adds	r1, r3, #1
 800429c:	6179      	str	r1, [r7, #20]
 800429e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	09db      	lsrs	r3, r3, #7
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b7f      	cmp	r3, #127	; 0x7f
 80042b0:	d8f0      	bhi.n	8004294 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	617a      	str	r2, [r7, #20]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80042c2:	2202      	movs	r2, #2
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	68b8      	ldr	r0, [r7, #8]
 80042c8:	f7ff f97e 	bl	80035c8 <_SendPacket>
  RECORD_END();
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f383 8811 	msr	BASEPRI, r3
}
 80042d2:	bf00      	nop
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	2407eb90 	.word	0x2407eb90
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80042ea:	f3ef 8311 	mrs	r3, BASEPRI
 80042ee:	f04f 0120 	mov.w	r1, #32
 80042f2:	f381 8811 	msr	BASEPRI, r1
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	4807      	ldr	r0, [pc, #28]	; (8004318 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80042fa:	f7ff f875 	bl	80033e8 <_PreparePacket>
 80042fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004300:	2203      	movs	r2, #3
 8004302:	6839      	ldr	r1, [r7, #0]
 8004304:	6838      	ldr	r0, [r7, #0]
 8004306:	f7ff f95f 	bl	80035c8 <_SendPacket>
  RECORD_END();
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f383 8811 	msr	BASEPRI, r3
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	2407eb90 	.word	0x2407eb90

0800431c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004322:	f3ef 8311 	mrs	r3, BASEPRI
 8004326:	f04f 0120 	mov.w	r1, #32
 800432a:	f381 8811 	msr	BASEPRI, r1
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	4807      	ldr	r0, [pc, #28]	; (8004350 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004332:	f7ff f859 	bl	80033e8 <_PreparePacket>
 8004336:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004338:	2212      	movs	r2, #18
 800433a:	6839      	ldr	r1, [r7, #0]
 800433c:	6838      	ldr	r0, [r7, #0]
 800433e:	f7ff f943 	bl	80035c8 <_SendPacket>
  RECORD_END();
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f383 8811 	msr	BASEPRI, r3
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	2407eb90 	.word	0x2407eb90

08004354 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800435a:	f3ef 8311 	mrs	r3, BASEPRI
 800435e:	f04f 0120 	mov.w	r1, #32
 8004362:	f381 8811 	msr	BASEPRI, r1
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	4807      	ldr	r0, [pc, #28]	; (8004388 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800436a:	f7ff f83d 	bl	80033e8 <_PreparePacket>
 800436e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004370:	2211      	movs	r2, #17
 8004372:	6839      	ldr	r1, [r7, #0]
 8004374:	6838      	ldr	r0, [r7, #0]
 8004376:	f7ff f927 	bl	80035c8 <_SendPacket>
  RECORD_END();
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f383 8811 	msr	BASEPRI, r3
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	2407eb90 	.word	0x2407eb90

0800438c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004394:	f3ef 8311 	mrs	r3, BASEPRI
 8004398:	f04f 0120 	mov.w	r1, #32
 800439c:	f381 8811 	msr	BASEPRI, r1
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	4819      	ldr	r0, [pc, #100]	; (8004408 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80043a4:	f7ff f820 	bl	80033e8 <_PreparePacket>
 80043a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80043ae:	4b17      	ldr	r3, [pc, #92]	; (800440c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e00b      	b.n	80043da <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	1c59      	adds	r1, r3, #1
 80043ca:	61f9      	str	r1, [r7, #28]
 80043cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	09db      	lsrs	r3, r3, #7
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b7f      	cmp	r3, #127	; 0x7f
 80043de:	d8f0      	bhi.n	80043c2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	61fa      	str	r2, [r7, #28]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80043f0:	2208      	movs	r2, #8
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	6938      	ldr	r0, [r7, #16]
 80043f6:	f7ff f8e7 	bl	80035c8 <_SendPacket>
  RECORD_END();
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f383 8811 	msr	BASEPRI, r3
}
 8004400:	bf00      	nop
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	2407eb90 	.word	0x2407eb90
 800440c:	2407eb60 	.word	0x2407eb60

08004410 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004418:	f3ef 8311 	mrs	r3, BASEPRI
 800441c:	f04f 0120 	mov.w	r1, #32
 8004420:	f381 8811 	msr	BASEPRI, r1
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	4819      	ldr	r0, [pc, #100]	; (800448c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004428:	f7fe ffde 	bl	80033e8 <_PreparePacket>
 800442c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004432:	4b17      	ldr	r3, [pc, #92]	; (8004490 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e00b      	b.n	800445e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	1c59      	adds	r1, r3, #1
 800444e:	61f9      	str	r1, [r7, #28]
 8004450:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	09db      	lsrs	r3, r3, #7
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b7f      	cmp	r3, #127	; 0x7f
 8004462:	d8f0      	bhi.n	8004446 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	61fa      	str	r2, [r7, #28]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004474:	2204      	movs	r2, #4
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	6938      	ldr	r0, [r7, #16]
 800447a:	f7ff f8a5 	bl	80035c8 <_SendPacket>
  RECORD_END();
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f383 8811 	msr	BASEPRI, r3
}
 8004484:	bf00      	nop
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	2407eb90 	.word	0x2407eb90
 8004490:	2407eb60 	.word	0x2407eb60

08004494 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800449c:	f3ef 8311 	mrs	r3, BASEPRI
 80044a0:	f04f 0120 	mov.w	r1, #32
 80044a4:	f381 8811 	msr	BASEPRI, r1
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	4819      	ldr	r0, [pc, #100]	; (8004510 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80044ac:	f7fe ff9c 	bl	80033e8 <_PreparePacket>
 80044b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	e00b      	b.n	80044e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	1c59      	adds	r1, r3, #1
 80044d2:	61f9      	str	r1, [r7, #28]
 80044d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	09db      	lsrs	r3, r3, #7
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b7f      	cmp	r3, #127	; 0x7f
 80044e6:	d8f0      	bhi.n	80044ca <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	61fa      	str	r2, [r7, #28]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80044f8:	2206      	movs	r2, #6
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	6938      	ldr	r0, [r7, #16]
 80044fe:	f7ff f863 	bl	80035c8 <_SendPacket>
  RECORD_END();
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f383 8811 	msr	BASEPRI, r3
}
 8004508:	bf00      	nop
 800450a:	3720      	adds	r7, #32
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	2407eb90 	.word	0x2407eb90
 8004514:	2407eb60 	.word	0x2407eb60

08004518 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	; 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004522:	f3ef 8311 	mrs	r3, BASEPRI
 8004526:	f04f 0120 	mov.w	r1, #32
 800452a:	f381 8811 	msr	BASEPRI, r1
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	4827      	ldr	r0, [pc, #156]	; (80045d0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004532:	f7fe ff59 	bl	80033e8 <_PreparePacket>
 8004536:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800453c:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	623b      	str	r3, [r7, #32]
 800454e:	e00b      	b.n	8004568 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	1c59      	adds	r1, r3, #1
 8004558:	6279      	str	r1, [r7, #36]	; 0x24
 800455a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	09db      	lsrs	r3, r3, #7
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	2b7f      	cmp	r3, #127	; 0x7f
 800456c:	d8f0      	bhi.n	8004550 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	627a      	str	r2, [r7, #36]	; 0x24
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	e00b      	b.n	80045a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	1c59      	adds	r1, r3, #1
 8004590:	61f9      	str	r1, [r7, #28]
 8004592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	09db      	lsrs	r3, r3, #7
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b7f      	cmp	r3, #127	; 0x7f
 80045a4:	d8f0      	bhi.n	8004588 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	61fa      	str	r2, [r7, #28]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80045b6:	2207      	movs	r2, #7
 80045b8:	68f9      	ldr	r1, [r7, #12]
 80045ba:	6938      	ldr	r0, [r7, #16]
 80045bc:	f7ff f804 	bl	80035c8 <_SendPacket>
  RECORD_END();
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f383 8811 	msr	BASEPRI, r3
}
 80045c6:	bf00      	nop
 80045c8:	3728      	adds	r7, #40	; 0x28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2407eb90 	.word	0x2407eb90
 80045d4:	2407eb60 	.word	0x2407eb60

080045d8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	1ad3      	subs	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	2407eb60 	.word	0x2407eb60

080045f8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08c      	sub	sp, #48	; 0x30
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004602:	4b3b      	ldr	r3, [pc, #236]	; (80046f0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d06d      	beq.n	80046e6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800460a:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004610:	2300      	movs	r3, #0
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
 8004614:	e008      	b.n	8004628 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	3301      	adds	r3, #1
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800462c:	429a      	cmp	r2, r3
 800462e:	d3f2      	bcc.n	8004616 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004630:	e000      	b.n	8004634 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004632:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d055      	beq.n	80046e6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800463a:	f3ef 8311 	mrs	r3, BASEPRI
 800463e:	f04f 0120 	mov.w	r1, #32
 8004642:	f381 8811 	msr	BASEPRI, r1
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	482a      	ldr	r0, [pc, #168]	; (80046f4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800464a:	f7fe fecd 	bl	80033e8 <_PreparePacket>
 800464e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	e00b      	b.n	8004676 <SEGGER_SYSVIEW_SendModule+0x7e>
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	1c59      	adds	r1, r3, #1
 8004666:	6279      	str	r1, [r7, #36]	; 0x24
 8004668:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	09db      	lsrs	r3, r3, #7
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	2b7f      	cmp	r3, #127	; 0x7f
 800467a:	d8f0      	bhi.n	800465e <SEGGER_SYSVIEW_SendModule+0x66>
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	627a      	str	r2, [r7, #36]	; 0x24
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e00b      	b.n	80046b0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	b2da      	uxtb	r2, r3
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	1c59      	adds	r1, r3, #1
 80046a0:	61f9      	str	r1, [r7, #28]
 80046a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	09db      	lsrs	r3, r3, #7
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b7f      	cmp	r3, #127	; 0x7f
 80046b4:	d8f0      	bhi.n	8004698 <SEGGER_SYSVIEW_SendModule+0xa0>
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	61fa      	str	r2, [r7, #28]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	4619      	mov	r1, r3
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7fe fe3a 	bl	8003348 <_EncodeStr>
 80046d4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80046d6:	2216      	movs	r2, #22
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	6938      	ldr	r0, [r7, #16]
 80046dc:	f7fe ff74 	bl	80035c8 <_SendPacket>
      RECORD_END();
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80046e6:	bf00      	nop
 80046e8:	3730      	adds	r7, #48	; 0x30
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	2407eb88 	.word	0x2407eb88
 80046f4:	2407eb90 	.word	0x2407eb90

080046f8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00f      	beq.n	8004726 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004706:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f2      	bne.n	800470c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	2407eb88 	.word	0x2407eb88

08004734 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800473a:	f3ef 8311 	mrs	r3, BASEPRI
 800473e:	f04f 0120 	mov.w	r1, #32
 8004742:	f381 8811 	msr	BASEPRI, r1
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	4817      	ldr	r0, [pc, #92]	; (80047a8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800474a:	f7fe fe4d 	bl	80033e8 <_PreparePacket>
 800474e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	4b14      	ldr	r3, [pc, #80]	; (80047ac <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e00b      	b.n	8004778 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	1c59      	adds	r1, r3, #1
 8004768:	6179      	str	r1, [r7, #20]
 800476a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	09db      	lsrs	r3, r3, #7
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b7f      	cmp	r3, #127	; 0x7f
 800477c:	d8f0      	bhi.n	8004760 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	617a      	str	r2, [r7, #20]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800478e:	221b      	movs	r2, #27
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	68b8      	ldr	r0, [r7, #8]
 8004794:	f7fe ff18 	bl	80035c8 <_SendPacket>
  RECORD_END();
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f383 8811 	msr	BASEPRI, r3
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	2407eb90 	.word	0x2407eb90
 80047ac:	2407eb8c 	.word	0x2407eb8c

080047b0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	; 0x28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047b8:	f3ef 8311 	mrs	r3, BASEPRI
 80047bc:	f04f 0120 	mov.w	r1, #32
 80047c0:	f381 8811 	msr	BASEPRI, r1
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	4827      	ldr	r0, [pc, #156]	; (8004864 <SEGGER_SYSVIEW_Warn+0xb4>)
 80047c8:	f7fe fe0e 	bl	80033e8 <_PreparePacket>
 80047cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047ce:	2280      	movs	r2, #128	; 0x80
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	6938      	ldr	r0, [r7, #16]
 80047d4:	f7fe fdb8 	bl	8003348 <_EncodeStr>
 80047d8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
 80047de:	2301      	movs	r3, #1
 80047e0:	623b      	str	r3, [r7, #32]
 80047e2:	e00b      	b.n	80047fc <SEGGER_SYSVIEW_Warn+0x4c>
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	1c59      	adds	r1, r3, #1
 80047ec:	6279      	str	r1, [r7, #36]	; 0x24
 80047ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	09db      	lsrs	r3, r3, #7
 80047fa:	623b      	str	r3, [r7, #32]
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004800:	d8f0      	bhi.n	80047e4 <SEGGER_SYSVIEW_Warn+0x34>
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	627a      	str	r2, [r7, #36]	; 0x24
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	e00b      	b.n	8004834 <SEGGER_SYSVIEW_Warn+0x84>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	1c59      	adds	r1, r3, #1
 8004824:	61f9      	str	r1, [r7, #28]
 8004826:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	09db      	lsrs	r3, r3, #7
 8004832:	61bb      	str	r3, [r7, #24]
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b7f      	cmp	r3, #127	; 0x7f
 8004838:	d8f0      	bhi.n	800481c <SEGGER_SYSVIEW_Warn+0x6c>
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	61fa      	str	r2, [r7, #28]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800484a:	221a      	movs	r2, #26
 800484c:	68f9      	ldr	r1, [r7, #12]
 800484e:	6938      	ldr	r0, [r7, #16]
 8004850:	f7fe feba 	bl	80035c8 <_SendPacket>
  RECORD_END();
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f383 8811 	msr	BASEPRI, r3
}
 800485a:	bf00      	nop
 800485c:	3728      	adds	r7, #40	; 0x28
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	2407eb90 	.word	0x2407eb90

08004868 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800486c:	4b13      	ldr	r3, [pc, #76]	; (80048bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800486e:	7e1b      	ldrb	r3, [r3, #24]
 8004870:	4619      	mov	r1, r3
 8004872:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004874:	460b      	mov	r3, r1
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	440b      	add	r3, r1
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	336c      	adds	r3, #108	; 0x6c
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b0e      	ldr	r3, [pc, #56]	; (80048bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004884:	7e1b      	ldrb	r3, [r3, #24]
 8004886:	4618      	mov	r0, r3
 8004888:	490d      	ldr	r1, [pc, #52]	; (80048c0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800488a:	4603      	mov	r3, r0
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4403      	add	r3, r0
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	440b      	add	r3, r1
 8004894:	3370      	adds	r3, #112	; 0x70
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d00b      	beq.n	80048b4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800489c:	4b07      	ldr	r3, [pc, #28]	; (80048bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800489e:	789b      	ldrb	r3, [r3, #2]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d107      	bne.n	80048b4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80048aa:	f7fe fda9 	bl	8003400 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80048ae:	4b03      	ldr	r3, [pc, #12]	; (80048bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80048b4:	4b01      	ldr	r3, [pc, #4]	; (80048bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	2407eb60 	.word	0x2407eb60
 80048c0:	24006aa0 	.word	0x24006aa0

080048c4 <__NVIC_SetPendingIRQ>:
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	db0c      	blt.n	80048f0 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048d6:	88fb      	ldrh	r3, [r7, #6]
 80048d8:	f003 021f 	and.w	r2, r3, #31
 80048dc:	4907      	ldr	r1, [pc, #28]	; (80048fc <__NVIC_SetPendingIRQ+0x38>)
 80048de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	2001      	movs	r0, #1
 80048e6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ea:	3340      	adds	r3, #64	; 0x40
 80048ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000e100 	.word	0xe000e100

08004900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004906:	f000 fe4d 	bl	80055a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800490a:	f000 f869 	bl	80049e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800490e:	f000 f9e7 	bl	8004ce0 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8004912:	f000 f913 	bl	8004b3c <MX_FDCAN2_Init>
  MX_USB_OTG_FS_HCD_Init();
 8004916:	f000 f9c1 	bl	8004c9c <MX_USB_OTG_FS_HCD_Init>
  MX_USART3_UART_Init();
 800491a:	f000 f973 	bl	8004c04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start LED
    int Start_Counter = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 8004922:	e010      	b.n	8004946 <main+0x46>
    {
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004924:	2104      	movs	r1, #4
 8004926:	4824      	ldr	r0, [pc, #144]	; (80049b8 <main+0xb8>)
 8004928:	f002 fd4d 	bl	80073c6 <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 800492c:	20c8      	movs	r0, #200	; 0xc8
 800492e:	f000 fe95 	bl	800565c <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004932:	2104      	movs	r1, #4
 8004934:	4820      	ldr	r0, [pc, #128]	; (80049b8 <main+0xb8>)
 8004936:	f002 fd46 	bl	80073c6 <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 800493a:	20c8      	movs	r0, #200	; 0xc8
 800493c:	f000 fe8e 	bl	800565c <HAL_Delay>
  	  Start_Counter++;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3301      	adds	r3, #1
 8004944:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b04      	cmp	r3, #4
 800494a:	ddeb      	ble.n	8004924 <main+0x24>

    //user_data = "Start of program\r\n";
    	//HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);

    	// Enable CCYCCNT Counter for SEGGER SYSTEM VIEW
    	DWT->CTRL |= (1 << 0);
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <main+0xbc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <main+0xbc>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6013      	str	r3, [r2, #0]

    	// Used for SEGGER UART
    	SEGGER_UART_init(500000);
 8004958:	4819      	ldr	r0, [pc, #100]	; (80049c0 <main+0xc0>)
 800495a:	f7fe f899 	bl	8002a90 <SEGGER_UART_init>

    	//Starting SEGGER SYSVIEW
    	  SEGGER_SYSVIEW_Conf();
 800495e:	f7fd fec1 	bl	80026e4 <SEGGER_SYSVIEW_Conf>
    	  //SEGGER_SYSVIEW_Start();

	  sprintf(usr_msg,"Demo of usage of counting semaphore\r\n");
 8004962:	4918      	ldr	r1, [pc, #96]	; (80049c4 <main+0xc4>)
 8004964:	4818      	ldr	r0, [pc, #96]	; (80049c8 <main+0xc8>)
 8004966:	f007 fc57 	bl	800c218 <siprintf>
	  USART_Send(usr_msg);
 800496a:	4817      	ldr	r0, [pc, #92]	; (80049c8 <main+0xc8>)
 800496c:	f000 fa6a 	bl	8004e44 <USART_Send>


		  /* Before a semaphore is used it must be explicitly created.  In this example
		a counting semaphore is created.  The semaphore is created to have a maximum
		count value of 10, and an initial count value of 0. */
		  xCountingSemaphore = xSemaphoreCreateCounting( 10, 0 );
 8004970:	2100      	movs	r1, #0
 8004972:	200a      	movs	r0, #10
 8004974:	f7fc f87d 	bl	8000a72 <xQueueCreateCountingSemaphore>
 8004978:	4603      	mov	r3, r0
 800497a:	4a14      	ldr	r2, [pc, #80]	; (80049cc <main+0xcc>)
 800497c:	6013      	str	r3, [r2, #0]

		/* Check the semaphore was created successfully. */
		if( xCountingSemaphore != NULL )
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <main+0xcc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d017      	beq.n	80049b6 <main+0xb6>

			/* Create the 'handler' task.  This is the task that will be synchronized
			with the interrupt.  The handler task is created with a high priority to
			ensure it runs immediately after the interrupt exits.  In this case a
			priority of 3 is chosen. */
			xTaskCreate( vHandlerTask, "Handler", 500, NULL, 1, NULL );
 8004986:	2300      	movs	r3, #0
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	2301      	movs	r3, #1
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	2300      	movs	r3, #0
 8004990:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004994:	490e      	ldr	r1, [pc, #56]	; (80049d0 <main+0xd0>)
 8004996:	480f      	ldr	r0, [pc, #60]	; (80049d4 <main+0xd4>)
 8004998:	f7fc fb14 	bl	8000fc4 <xTaskCreate>

			/* Create the task that will periodically generate a software interrupt.
			This is created with a priority below the handler task to ensure it will
			get preempted each time the handler task exist the Blocked state. */
			xTaskCreate( vPeriodicTask, "Periodic", 500, NULL, 3, NULL );
 800499c:	2300      	movs	r3, #0
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	2303      	movs	r3, #3
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80049aa:	490b      	ldr	r1, [pc, #44]	; (80049d8 <main+0xd8>)
 80049ac:	480b      	ldr	r0, [pc, #44]	; (80049dc <main+0xdc>)
 80049ae:	f7fc fb09 	bl	8000fc4 <xTaskCreate>

			/* Start the scheduler so the created tasks start executing. */
			vTaskStartScheduler();
 80049b2:	f7fc fc99 	bl	80012e8 <vTaskStartScheduler>
		}

		  /* If all is well we will never reach here as the scheduler will now be
		  running the tasks.  If we do reach here then it is likely that there was
		  insufficient heap memory available for a resource to be created. */
		for( ;; );
 80049b6:	e7fe      	b.n	80049b6 <main+0xb6>
 80049b8:	58020800 	.word	0x58020800
 80049bc:	e0001000 	.word	0xe0001000
 80049c0:	0007a120 	.word	0x0007a120
 80049c4:	0800cbc4 	.word	0x0800cbc4
 80049c8:	2407f0ac 	.word	0x2407f0ac
 80049cc:	2407f0a8 	.word	0x2407f0a8
 80049d0:	0800cbec 	.word	0x0800cbec
 80049d4:	08004dd1 	.word	0x08004dd1
 80049d8:	0800cbf4 	.word	0x0800cbf4
 80049dc:	08004e05 	.word	0x08004e05

080049e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b09e      	sub	sp, #120	; 0x78
 80049e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049ea:	224c      	movs	r2, #76	; 0x4c
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f007 fc0a 	bl	800c208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049f4:	f107 030c 	add.w	r3, r7, #12
 80049f8:	2220      	movs	r2, #32
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f007 fc03 	bl	800c208 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004a02:	2002      	movs	r0, #2
 8004a04:	f002 fd80 	bl	8007508 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	4b48      	ldr	r3, [pc, #288]	; (8004b30 <SystemClock_Config+0x150>)
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	4a47      	ldr	r2, [pc, #284]	; (8004b30 <SystemClock_Config+0x150>)
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a18:	4b45      	ldr	r3, [pc, #276]	; (8004b30 <SystemClock_Config+0x150>)
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	4b44      	ldr	r3, [pc, #272]	; (8004b34 <SystemClock_Config+0x154>)
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	4a43      	ldr	r2, [pc, #268]	; (8004b34 <SystemClock_Config+0x154>)
 8004a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a2c:	6193      	str	r3, [r2, #24]
 8004a2e:	4b41      	ldr	r3, [pc, #260]	; (8004b34 <SystemClock_Config+0x154>)
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004a3a:	bf00      	nop
 8004a3c:	4b3d      	ldr	r3, [pc, #244]	; (8004b34 <SystemClock_Config+0x154>)
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a48:	d1f8      	bne.n	8004a3c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a4a:	4b3b      	ldr	r3, [pc, #236]	; (8004b38 <SystemClock_Config+0x158>)
 8004a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a50:	4a39      	ldr	r2, [pc, #228]	; (8004b38 <SystemClock_Config+0x158>)
 8004a52:	f043 0302 	orr.w	r3, r3, #2
 8004a56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a5a:	4b37      	ldr	r3, [pc, #220]	; (8004b38 <SystemClock_Config+0x158>)
 8004a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004a68:	2300      	movs	r3, #0
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <SystemClock_Config+0x154>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	4a30      	ldr	r2, [pc, #192]	; (8004b34 <SystemClock_Config+0x154>)
 8004a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a76:	6193      	str	r3, [r2, #24]
 8004a78:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <SystemClock_Config+0x154>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <SystemClock_Config+0x150>)
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	4a2a      	ldr	r2, [pc, #168]	; (8004b30 <SystemClock_Config+0x150>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a8e:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <SystemClock_Config+0x150>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004a9a:	bf00      	nop
 8004a9c:	4b25      	ldr	r3, [pc, #148]	; (8004b34 <SystemClock_Config+0x154>)
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa8:	d1f8      	bne.n	8004a9c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004abc:	2301      	movs	r3, #1
 8004abe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8004ac0:	2378      	movs	r3, #120	; 0x78
 8004ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8004ac8:	230f      	movs	r3, #15
 8004aca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004acc:	2302      	movs	r3, #2
 8004ace:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f002 fd5b 	bl	800759c <HAL_RCC_OscConfig>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8004aec:	f000 f9d6 	bl	8004e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004af0:	233f      	movs	r3, #63	; 0x3f
 8004af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004af4:	2303      	movs	r3, #3
 8004af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004afc:	2308      	movs	r3, #8
 8004afe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004b00:	2340      	movs	r3, #64	; 0x40
 8004b02:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004b04:	2340      	movs	r3, #64	; 0x40
 8004b06:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004b0e:	2340      	movs	r3, #64	; 0x40
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004b12:	f107 030c 	add.w	r3, r7, #12
 8004b16:	2104      	movs	r1, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f003 f96d 	bl	8007df8 <HAL_RCC_ClockConfig>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8004b24:	f000 f9ba 	bl	8004e9c <Error_Handler>
  }
}
 8004b28:	bf00      	nop
 8004b2a:	3778      	adds	r7, #120	; 0x78
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	58000400 	.word	0x58000400
 8004b34:	58024800 	.word	0x58024800
 8004b38:	58024400 	.word	0x58024400

08004b3c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004b40:	4b2e      	ldr	r3, [pc, #184]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b42:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <MX_FDCAN2_Init+0xc4>)
 8004b44:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004b46:	4b2d      	ldr	r3, [pc, #180]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8004b4c:	4b2b      	ldr	r3, [pc, #172]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8004b52:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8004b58:	4b28      	ldr	r3, [pc, #160]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8004b5e:	4b27      	ldr	r3, [pc, #156]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8004b64:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b66:	2210      	movs	r2, #16
 8004b68:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8004b6a:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8004b70:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b72:	2202      	movs	r2, #2
 8004b74:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8004b76:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b78:	2202      	movs	r2, #2
 8004b7a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8004b7c:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8004b82:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8004b88:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8004b94:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8004b9a:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8004ba0:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004bac:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004bae:	2204      	movs	r2, #4
 8004bb0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004bb8:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004bba:	2204      	movs	r2, #4
 8004bbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8004bca:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004bdc:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004be4:	2204      	movs	r2, #4
 8004be6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8004be8:	4804      	ldr	r0, [pc, #16]	; (8004bfc <MX_FDCAN2_Init+0xc0>)
 8004bea:	f001 fbab 	bl	8006344 <HAL_FDCAN_Init>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8004bf4:	f000 f952 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8004bf8:	bf00      	nop
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	2407ec74 	.word	0x2407ec74
 8004c00:	4000a400 	.word	0x4000a400

08004c04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004c08:	4b22      	ldr	r3, [pc, #136]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c0a:	4a23      	ldr	r2, [pc, #140]	; (8004c98 <MX_USART3_UART_Init+0x94>)
 8004c0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004c0e:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004c16:	4b1f      	ldr	r3, [pc, #124]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004c1c:	4b1d      	ldr	r3, [pc, #116]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004c22:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c2a:	220c      	movs	r2, #12
 8004c2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c2e:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c34:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c3a:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c40:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c46:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004c4c:	4811      	ldr	r0, [pc, #68]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c4e:	f005 fae3 	bl	800a218 <HAL_UART_Init>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004c58:	f000 f920 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	480d      	ldr	r0, [pc, #52]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c60:	f006 ff9a 	bl	800bb98 <HAL_UARTEx_SetTxFifoThreshold>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004c6a:	f000 f917 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4808      	ldr	r0, [pc, #32]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c72:	f006 ffcf 	bl	800bc14 <HAL_UARTEx_SetRxFifoThreshold>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004c7c:	f000 f90e 	bl	8004e9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004c80:	4804      	ldr	r0, [pc, #16]	; (8004c94 <MX_USART3_UART_Init+0x90>)
 8004c82:	f006 ff50 	bl	800bb26 <HAL_UARTEx_DisableFifoMode>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004c8c:	f000 f906 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004c90:	bf00      	nop
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	2407ed14 	.word	0x2407ed14
 8004c98:	40004800 	.word	0x40004800

08004c9c <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004ca0:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004ca2:	4a0e      	ldr	r2, [pc, #56]	; (8004cdc <MX_USB_OTG_FS_HCD_Init+0x40>)
 8004ca4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004ca8:	2210      	movs	r2, #16
 8004caa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004cb2:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004cb8:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004cba:	2202      	movs	r2, #2
 8004cbc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004cc4:	4804      	ldr	r0, [pc, #16]	; (8004cd8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004cc6:	f002 fbbd 	bl	8007444 <HAL_HCD_Init>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8004cd0:	f000 f8e4 	bl	8004e9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004cd4:	bf00      	nop
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	2407eda4 	.word	0x2407eda4
 8004cdc:	40080000 	.word	0x40080000

08004ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08a      	sub	sp, #40	; 0x28
 8004ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce6:	f107 0314 	add.w	r3, r7, #20
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	605a      	str	r2, [r3, #4]
 8004cf0:	609a      	str	r2, [r3, #8]
 8004cf2:	60da      	str	r2, [r3, #12]
 8004cf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cf6:	4b34      	ldr	r3, [pc, #208]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cfc:	4a32      	ldr	r2, [pc, #200]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004cfe:	f043 0304 	orr.w	r3, r3, #4
 8004d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d06:	4b30      	ldr	r3, [pc, #192]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d14:	4b2c      	ldr	r3, [pc, #176]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d1a:	4a2b      	ldr	r2, [pc, #172]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d24:	4b28      	ldr	r3, [pc, #160]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d32:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d38:	4a23      	ldr	r2, [pc, #140]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004d3a:	f043 0302 	orr.w	r3, r3, #2
 8004d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d42:	4b21      	ldr	r3, [pc, #132]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d50:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d56:	4a1c      	ldr	r2, [pc, #112]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d60:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <MX_GPIO_Init+0xe8>)
 8004d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8004d6e:	2201      	movs	r2, #1
 8004d70:	2107      	movs	r1, #7
 8004d72:	4816      	ldr	r0, [pc, #88]	; (8004dcc <MX_GPIO_Init+0xec>)
 8004d74:	f002 fb0e 	bl	8007394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d88:	f107 0314 	add.w	r3, r7, #20
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	480f      	ldr	r0, [pc, #60]	; (8004dcc <MX_GPIO_Init+0xec>)
 8004d90:	f002 f950 	bl	8007034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004d94:	2307      	movs	r3, #7
 8004d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da0:	2300      	movs	r3, #0
 8004da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004da4:	f107 0314 	add.w	r3, r7, #20
 8004da8:	4619      	mov	r1, r3
 8004daa:	4808      	ldr	r0, [pc, #32]	; (8004dcc <MX_GPIO_Init+0xec>)
 8004dac:	f002 f942 	bl	8007034 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004db0:	2200      	movs	r2, #0
 8004db2:	2105      	movs	r1, #5
 8004db4:	2028      	movs	r0, #40	; 0x28
 8004db6:	f000 fd39 	bl	800582c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004dba:	2028      	movs	r0, #40	; 0x28
 8004dbc:	f000 fd50 	bl	8005860 <HAL_NVIC_EnableIRQ>

}
 8004dc0:	bf00      	nop
 8004dc2:	3728      	adds	r7, #40	; 0x28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	58020800 	.word	0x58020800

08004dd0 <vHandlerTask>:

/* USER CODE BEGIN 4 */

static void vHandlerTask( void *pvParameters )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
		/* Use the semaphore to wait for the event.  The semaphore was created
		before the scheduler was started so before this task ran for the first
		time.  The task blocks indefinitely meaning this function call will only
		return once the semaphore has been successfully obtained - so there is no
		need to check the returned value. */
		xSemaphoreTake( xCountingSemaphore, portMAX_DELAY );
 8004dd8:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <vHandlerTask+0x28>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fb ff37 	bl	8000c54 <xQueueSemaphoreTake>

		/* To get here the event must have occurred.  Process the event (in this
		case we just print out a message). */
		sprintf(usr_msg, "Handler task - Processing event.\r\n");
 8004de6:	4905      	ldr	r1, [pc, #20]	; (8004dfc <vHandlerTask+0x2c>)
 8004de8:	4805      	ldr	r0, [pc, #20]	; (8004e00 <vHandlerTask+0x30>)
 8004dea:	f007 fa15 	bl	800c218 <siprintf>
		USART_Send(usr_msg);
 8004dee:	4804      	ldr	r0, [pc, #16]	; (8004e00 <vHandlerTask+0x30>)
 8004df0:	f000 f828 	bl	8004e44 <USART_Send>
		xSemaphoreTake( xCountingSemaphore, portMAX_DELAY );
 8004df4:	e7f0      	b.n	8004dd8 <vHandlerTask+0x8>
 8004df6:	bf00      	nop
 8004df8:	2407f0a8 	.word	0x2407f0a8
 8004dfc:	0800cc00 	.word	0x0800cc00
 8004e00:	2407f0ac 	.word	0x2407f0ac

08004e04 <vPeriodicTask>:
	}
}
/*-----------------------------------------------------------*/

static void vPeriodicTask( void *pvParameters )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	/* As per most tasks, this task is implemented within an infinite loop. */
	for( ;; )
	{
		/* This task is just used to 'simulate' an interrupt.  This is done by
		periodically generating a software interrupt. */
		vTaskDelay( pdMS_TO_TICKS(500) );
 8004e0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e10:	f7fc fa30 	bl	8001274 <vTaskDelay>

		/* Generate the interrupt, printing a message both before hand and
		afterwards so the sequence of execution is evident from the output. */
        sprintf(usr_msg, "Periodic task - Pending the interrupt.\r\n" );
 8004e14:	4908      	ldr	r1, [pc, #32]	; (8004e38 <vPeriodicTask+0x34>)
 8004e16:	4809      	ldr	r0, [pc, #36]	; (8004e3c <vPeriodicTask+0x38>)
 8004e18:	f007 f9fe 	bl	800c218 <siprintf>
        USART_Send(usr_msg);
 8004e1c:	4807      	ldr	r0, [pc, #28]	; (8004e3c <vPeriodicTask+0x38>)
 8004e1e:	f000 f811 	bl	8004e44 <USART_Send>

        //pend the interrupt
        NVIC_SetPendingIRQ(EXTI15_10_IRQn);
 8004e22:	2028      	movs	r0, #40	; 0x28
 8004e24:	f7ff fd4e 	bl	80048c4 <__NVIC_SetPendingIRQ>

        sprintf(usr_msg, "Periodic task - Resuming.\r\n" );
 8004e28:	4905      	ldr	r1, [pc, #20]	; (8004e40 <vPeriodicTask+0x3c>)
 8004e2a:	4804      	ldr	r0, [pc, #16]	; (8004e3c <vPeriodicTask+0x38>)
 8004e2c:	f007 f9f4 	bl	800c218 <siprintf>
        USART_Send(usr_msg);
 8004e30:	4802      	ldr	r0, [pc, #8]	; (8004e3c <vPeriodicTask+0x38>)
 8004e32:	f000 f807 	bl	8004e44 <USART_Send>
		vTaskDelay( pdMS_TO_TICKS(500) );
 8004e36:	e7e9      	b.n	8004e0c <vPeriodicTask+0x8>
 8004e38:	0800cc24 	.word	0x0800cc24
 8004e3c:	2407f0ac 	.word	0x2407f0ac
 8004e40:	0800cc50 	.word	0x0800cc50

08004e44 <USART_Send>:
//
// }


void USART_Send(char* user_data)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Transmit(&huart3,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY) != HAL_OK)
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7fb fa91 	bl	8000374 <strlen>
 8004e52:	4603      	mov	r3, r0
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	4805      	ldr	r0, [pc, #20]	; (8004e74 <USART_Send+0x30>)
 8004e5e:	f005 fa2b 	bl	800a2b8 <HAL_UART_Transmit>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <USART_Send+0x28>
	{
		// Error occurred
		Error_Handler();
 8004e68:	f000 f818 	bl	8004e9c <Error_Handler>
	}
}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	2407ed14 	.word	0x2407ed14

08004e78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d101      	bne.n	8004e8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004e8a:	f000 fbc7 	bl	800561c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40001000 	.word	0x40001000

08004e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea0:	b672      	cpsid	i
}
 8004ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	4807      	ldr	r0, [pc, #28]	; (8004ec4 <Error_Handler+0x28>)
 8004ea8:	f002 fa8d 	bl	80073c6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004eac:	2064      	movs	r0, #100	; 0x64
 8004eae:	f000 fbd5 	bl	800565c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4803      	ldr	r0, [pc, #12]	; (8004ec4 <Error_Handler+0x28>)
 8004eb6:	f002 fa86 	bl	80073c6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004eba:	2064      	movs	r0, #100	; 0x64
 8004ebc:	f000 fbce 	bl	800565c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004ec0:	e7f0      	b.n	8004ea4 <Error_Handler+0x8>
 8004ec2:	bf00      	nop
 8004ec4:	58020800 	.word	0x58020800

08004ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_MspInit+0x30>)
 8004ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <HAL_MspInit+0x30>)
 8004ed6:	f043 0302 	orr.w	r3, r3, #2
 8004eda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ede:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_MspInit+0x30>)
 8004ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	607b      	str	r3, [r7, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	58024400 	.word	0x58024400

08004efc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b0b8      	sub	sp, #224	; 0xe0
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f14:	f107 0310 	add.w	r3, r7, #16
 8004f18:	22bc      	movs	r2, #188	; 0xbc
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f007 f973 	bl	800c208 <memset>
  if(hfdcan->Instance==FDCAN2)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2d      	ldr	r2, [pc, #180]	; (8004fdc <HAL_FDCAN_MspInit+0xe0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d153      	bne.n	8004fd4 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004f32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f36:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f38:	f107 0310 	add.w	r3, r7, #16
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f003 fb29 	bl	8008594 <HAL_RCCEx_PeriphCLKConfig>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004f48:	f7ff ffa8 	bl	8004e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004f4c:	4b24      	ldr	r3, [pc, #144]	; (8004fe0 <HAL_FDCAN_MspInit+0xe4>)
 8004f4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004f52:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <HAL_FDCAN_MspInit+0xe4>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f58:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004f5c:	4b20      	ldr	r3, [pc, #128]	; (8004fe0 <HAL_FDCAN_MspInit+0xe4>)
 8004f5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <HAL_FDCAN_MspInit+0xe4>)
 8004f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f70:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <HAL_FDCAN_MspInit+0xe4>)
 8004f72:	f043 0302 	orr.w	r3, r3, #2
 8004f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f7a:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <HAL_FDCAN_MspInit+0xe4>)
 8004f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004f88:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f90:	2302      	movs	r3, #2
 8004f92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8004fa2:	2309      	movs	r3, #9
 8004fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004fac:	4619      	mov	r1, r3
 8004fae:	480d      	ldr	r0, [pc, #52]	; (8004fe4 <HAL_FDCAN_MspInit+0xe8>)
 8004fb0:	f002 f840 	bl	8007034 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	2014      	movs	r0, #20
 8004fba:	f000 fc37 	bl	800582c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8004fbe:	2014      	movs	r0, #20
 8004fc0:	f000 fc4e 	bl	8005860 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	2016      	movs	r0, #22
 8004fca:	f000 fc2f 	bl	800582c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8004fce:	2016      	movs	r0, #22
 8004fd0:	f000 fc46 	bl	8005860 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8004fd4:	bf00      	nop
 8004fd6:	37e0      	adds	r7, #224	; 0xe0
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	4000a400 	.word	0x4000a400
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	58020400 	.word	0x58020400

08004fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b0b8      	sub	sp, #224	; 0xe0
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	609a      	str	r2, [r3, #8]
 8004ffc:	60da      	str	r2, [r3, #12]
 8004ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005000:	f107 0310 	add.w	r3, r7, #16
 8005004:	22bc      	movs	r2, #188	; 0xbc
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f007 f8fd 	bl	800c208 <memset>
  if(huart->Instance==USART3)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a29      	ldr	r2, [pc, #164]	; (80050b8 <HAL_UART_MspInit+0xd0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d14a      	bne.n	80050ae <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005018:	2302      	movs	r3, #2
 800501a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800501c:	2300      	movs	r3, #0
 800501e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005022:	f107 0310 	add.w	r3, r7, #16
 8005026:	4618      	mov	r0, r3
 8005028:	f003 fab4 	bl	8008594 <HAL_RCCEx_PeriphCLKConfig>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005032:	f7ff ff33 	bl	8004e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005036:	4b21      	ldr	r3, [pc, #132]	; (80050bc <HAL_UART_MspInit+0xd4>)
 8005038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <HAL_UART_MspInit+0xd4>)
 800503e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005042:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005046:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <HAL_UART_MspInit+0xd4>)
 8005048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800504c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005054:	4b19      	ldr	r3, [pc, #100]	; (80050bc <HAL_UART_MspInit+0xd4>)
 8005056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800505a:	4a18      	ldr	r2, [pc, #96]	; (80050bc <HAL_UART_MspInit+0xd4>)
 800505c:	f043 0302 	orr.w	r3, r3, #2
 8005060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <HAL_UART_MspInit+0xd4>)
 8005066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	60bb      	str	r3, [r7, #8]
 8005070:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005072:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005076:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507a:	2302      	movs	r3, #2
 800507c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005080:	2300      	movs	r3, #0
 8005082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005086:	2300      	movs	r3, #0
 8005088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800508c:	2307      	movs	r3, #7
 800508e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005092:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005096:	4619      	mov	r1, r3
 8005098:	4809      	ldr	r0, [pc, #36]	; (80050c0 <HAL_UART_MspInit+0xd8>)
 800509a:	f001 ffcb 	bl	8007034 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800509e:	2200      	movs	r2, #0
 80050a0:	2100      	movs	r1, #0
 80050a2:	2027      	movs	r0, #39	; 0x27
 80050a4:	f000 fbc2 	bl	800582c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80050a8:	2027      	movs	r0, #39	; 0x27
 80050aa:	f000 fbd9 	bl	8005860 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80050ae:	bf00      	nop
 80050b0:	37e0      	adds	r7, #224	; 0xe0
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40004800 	.word	0x40004800
 80050bc:	58024400 	.word	0x58024400
 80050c0:	58020400 	.word	0x58020400

080050c4 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b0b8      	sub	sp, #224	; 0xe0
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	60da      	str	r2, [r3, #12]
 80050da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050dc:	f107 0310 	add.w	r3, r7, #16
 80050e0:	22bc      	movs	r2, #188	; 0xbc
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f007 f88f 	bl	800c208 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a27      	ldr	r2, [pc, #156]	; (800518c <HAL_HCD_MspInit+0xc8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d146      	bne.n	8005182 <HAL_HCD_MspInit+0xbe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80050f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80050fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005102:	f107 0310 	add.w	r3, r7, #16
 8005106:	4618      	mov	r0, r3
 8005108:	f003 fa44 	bl	8008594 <HAL_RCCEx_PeriphCLKConfig>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8005112:	f7ff fec3 	bl	8004e9c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8005116:	f002 fa31 	bl	800757c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800511a:	4b1d      	ldr	r3, [pc, #116]	; (8005190 <HAL_HCD_MspInit+0xcc>)
 800511c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005120:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <HAL_HCD_MspInit+0xcc>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800512a:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_HCD_MspInit+0xcc>)
 800512c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005138:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800513c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005140:	2302      	movs	r3, #2
 8005142:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005146:	2300      	movs	r3, #0
 8005148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8005152:	230a      	movs	r3, #10
 8005154:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005158:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800515c:	4619      	mov	r1, r3
 800515e:	480d      	ldr	r0, [pc, #52]	; (8005194 <HAL_HCD_MspInit+0xd0>)
 8005160:	f001 ff68 	bl	8007034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005164:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <HAL_HCD_MspInit+0xcc>)
 8005166:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800516a:	4a09      	ldr	r2, [pc, #36]	; (8005190 <HAL_HCD_MspInit+0xcc>)
 800516c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005170:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005174:	4b06      	ldr	r3, [pc, #24]	; (8005190 <HAL_HCD_MspInit+0xcc>)
 8005176:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800517a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005182:	bf00      	nop
 8005184:	37e0      	adds	r7, #224	; 0xe0
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40080000 	.word	0x40080000
 8005190:	58024400 	.word	0x58024400
 8005194:	58020000 	.word	0x58020000

08005198 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b090      	sub	sp, #64	; 0x40
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	d827      	bhi.n	80051f6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80051a6:	2200      	movs	r2, #0
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	2036      	movs	r0, #54	; 0x36
 80051ac:	f000 fb3e 	bl	800582c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80051b0:	2036      	movs	r0, #54	; 0x36
 80051b2:	f000 fb55 	bl	8005860 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80051b6:	4a29      	ldr	r2, [pc, #164]	; (800525c <HAL_InitTick+0xc4>)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80051bc:	4b28      	ldr	r3, [pc, #160]	; (8005260 <HAL_InitTick+0xc8>)
 80051be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051c2:	4a27      	ldr	r2, [pc, #156]	; (8005260 <HAL_InitTick+0xc8>)
 80051c4:	f043 0310 	orr.w	r3, r3, #16
 80051c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051cc:	4b24      	ldr	r3, [pc, #144]	; (8005260 <HAL_InitTick+0xc8>)
 80051ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80051da:	f107 0210 	add.w	r2, r7, #16
 80051de:	f107 0314 	add.w	r3, r7, #20
 80051e2:	4611      	mov	r1, r2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f003 f993 	bl	8008510 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <HAL_InitTick+0x6a>
 80051f4:	e001      	b.n	80051fa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e02b      	b.n	8005252 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80051fa:	f003 f95d 	bl	80084b8 <HAL_RCC_GetPCLK1Freq>
 80051fe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8005200:	e004      	b.n	800520c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005202:	f003 f959 	bl	80084b8 <HAL_RCC_GetPCLK1Freq>
 8005206:	4603      	mov	r3, r0
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800520c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520e:	4a15      	ldr	r2, [pc, #84]	; (8005264 <HAL_InitTick+0xcc>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	0c9b      	lsrs	r3, r3, #18
 8005216:	3b01      	subs	r3, #1
 8005218:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800521a:	4b13      	ldr	r3, [pc, #76]	; (8005268 <HAL_InitTick+0xd0>)
 800521c:	4a13      	ldr	r2, [pc, #76]	; (800526c <HAL_InitTick+0xd4>)
 800521e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <HAL_InitTick+0xd0>)
 8005222:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005226:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005228:	4a0f      	ldr	r2, [pc, #60]	; (8005268 <HAL_InitTick+0xd0>)
 800522a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800522e:	4b0e      	ldr	r3, [pc, #56]	; (8005268 <HAL_InitTick+0xd0>)
 8005230:	2200      	movs	r2, #0
 8005232:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005234:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <HAL_InitTick+0xd0>)
 8005236:	2200      	movs	r2, #0
 8005238:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800523a:	480b      	ldr	r0, [pc, #44]	; (8005268 <HAL_InitTick+0xd0>)
 800523c:	f004 fd12 	bl	8009c64 <HAL_TIM_Base_Init>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005246:	4808      	ldr	r0, [pc, #32]	; (8005268 <HAL_InitTick+0xd0>)
 8005248:	f004 fd6e 	bl	8009d28 <HAL_TIM_Base_Start_IT>
 800524c:	4603      	mov	r3, r0
 800524e:	e000      	b.n	8005252 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
}
 8005252:	4618      	mov	r0, r3
 8005254:	3740      	adds	r7, #64	; 0x40
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	24000018 	.word	0x24000018
 8005260:	58024400 	.word	0x58024400
 8005264:	431bde83 	.word	0x431bde83
 8005268:	2407f1a8 	.word	0x2407f1a8
 800526c:	40001000 	.word	0x40001000

08005270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005274:	2102      	movs	r1, #2
 8005276:	4807      	ldr	r0, [pc, #28]	; (8005294 <NMI_Handler+0x24>)
 8005278:	f002 f8a5 	bl	80073c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800527c:	2064      	movs	r0, #100	; 0x64
 800527e:	f000 f9ed 	bl	800565c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005282:	2102      	movs	r1, #2
 8005284:	4803      	ldr	r0, [pc, #12]	; (8005294 <NMI_Handler+0x24>)
 8005286:	f002 f89e 	bl	80073c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800528a:	2064      	movs	r0, #100	; 0x64
 800528c:	f000 f9e6 	bl	800565c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005290:	e7f0      	b.n	8005274 <NMI_Handler+0x4>
 8005292:	bf00      	nop
 8005294:	58020800 	.word	0x58020800

08005298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 800529c:	2102      	movs	r1, #2
 800529e:	4807      	ldr	r0, [pc, #28]	; (80052bc <HardFault_Handler+0x24>)
 80052a0:	f002 f891 	bl	80073c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80052a4:	2064      	movs	r0, #100	; 0x64
 80052a6:	f000 f9d9 	bl	800565c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80052aa:	2102      	movs	r1, #2
 80052ac:	4803      	ldr	r0, [pc, #12]	; (80052bc <HardFault_Handler+0x24>)
 80052ae:	f002 f88a 	bl	80073c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80052b2:	2064      	movs	r0, #100	; 0x64
 80052b4:	f000 f9d2 	bl	800565c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80052b8:	e7f0      	b.n	800529c <HardFault_Handler+0x4>
 80052ba:	bf00      	nop
 80052bc:	58020800 	.word	0x58020800

080052c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80052c4:	2102      	movs	r1, #2
 80052c6:	4807      	ldr	r0, [pc, #28]	; (80052e4 <MemManage_Handler+0x24>)
 80052c8:	f002 f87d 	bl	80073c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80052cc:	2064      	movs	r0, #100	; 0x64
 80052ce:	f000 f9c5 	bl	800565c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80052d2:	2102      	movs	r1, #2
 80052d4:	4803      	ldr	r0, [pc, #12]	; (80052e4 <MemManage_Handler+0x24>)
 80052d6:	f002 f876 	bl	80073c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80052da:	2064      	movs	r0, #100	; 0x64
 80052dc:	f000 f9be 	bl	800565c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80052e0:	e7f0      	b.n	80052c4 <MemManage_Handler+0x4>
 80052e2:	bf00      	nop
 80052e4:	58020800 	.word	0x58020800

080052e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80052ec:	2102      	movs	r1, #2
 80052ee:	4807      	ldr	r0, [pc, #28]	; (800530c <BusFault_Handler+0x24>)
 80052f0:	f002 f869 	bl	80073c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80052f4:	2064      	movs	r0, #100	; 0x64
 80052f6:	f000 f9b1 	bl	800565c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80052fa:	2102      	movs	r1, #2
 80052fc:	4803      	ldr	r0, [pc, #12]	; (800530c <BusFault_Handler+0x24>)
 80052fe:	f002 f862 	bl	80073c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005302:	2064      	movs	r0, #100	; 0x64
 8005304:	f000 f9aa 	bl	800565c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005308:	e7f0      	b.n	80052ec <BusFault_Handler+0x4>
 800530a:	bf00      	nop
 800530c:	58020800 	.word	0x58020800

08005310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005314:	2102      	movs	r1, #2
 8005316:	4807      	ldr	r0, [pc, #28]	; (8005334 <UsageFault_Handler+0x24>)
 8005318:	f002 f855 	bl	80073c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800531c:	2064      	movs	r0, #100	; 0x64
 800531e:	f000 f99d 	bl	800565c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005322:	2102      	movs	r1, #2
 8005324:	4803      	ldr	r0, [pc, #12]	; (8005334 <UsageFault_Handler+0x24>)
 8005326:	f002 f84e 	bl	80073c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800532a:	2064      	movs	r0, #100	; 0x64
 800532c:	f000 f996 	bl	800565c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005330:	e7f0      	b.n	8005314 <UsageFault_Handler+0x4>
 8005332:	bf00      	nop
 8005334:	58020800 	.word	0x58020800

08005338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800534c:	4802      	ldr	r0, [pc, #8]	; (8005358 <FDCAN2_IT0_IRQHandler+0x10>)
 800534e:	f001 f9d7 	bl	8006700 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8005352:	bf00      	nop
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	2407ec74 	.word	0x2407ec74

0800535c <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8005360:	4802      	ldr	r0, [pc, #8]	; (800536c <FDCAN2_IT1_IRQHandler+0x10>)
 8005362:	f001 f9cd 	bl	8006700 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	2407ec74 	.word	0x2407ec74

08005370 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005374:	4802      	ldr	r0, [pc, #8]	; (8005380 <USART3_IRQHandler+0x10>)
 8005376:	f005 f835 	bl	800a3e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800537a:	bf00      	nop
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	2407ed14 	.word	0x2407ed14

08005384 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800538a:	2300      	movs	r3, #0
 800538c:	607b      	str	r3, [r7, #4]
	task, the following 'gives' are to demonstrate that the semaphore latches
	the events to allow the handler task to process them in turn without any
	events getting lost.  This simulates multiple interrupts being taken by the
	processor, even though in this case the events are simulated within a single
	interrupt occurrence.*/
	sprintf(usr_msg,"==>Button_Handler\r\n");
 800538e:	4921      	ldr	r1, [pc, #132]	; (8005414 <EXTI15_10_IRQHandler+0x90>)
 8005390:	4821      	ldr	r0, [pc, #132]	; (8005418 <EXTI15_10_IRQHandler+0x94>)
 8005392:	f006 ff41 	bl	800c218 <siprintf>
	USART_Send(usr_msg);
 8005396:	4820      	ldr	r0, [pc, #128]	; (8005418 <EXTI15_10_IRQHandler+0x94>)
 8005398:	f7ff fd54 	bl	8004e44 <USART_Send>

	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 800539c:	4b1f      	ldr	r3, [pc, #124]	; (800541c <EXTI15_10_IRQHandler+0x98>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	1d3a      	adds	r2, r7, #4
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fb fb9b 	bl	8000ae0 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80053aa:	4b1c      	ldr	r3, [pc, #112]	; (800541c <EXTI15_10_IRQHandler+0x98>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	1d3a      	adds	r2, r7, #4
 80053b0:	4611      	mov	r1, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fb fb94 	bl	8000ae0 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80053b8:	4b18      	ldr	r3, [pc, #96]	; (800541c <EXTI15_10_IRQHandler+0x98>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	1d3a      	adds	r2, r7, #4
 80053be:	4611      	mov	r1, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fb fb8d 	bl	8000ae0 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80053c6:	4b15      	ldr	r3, [pc, #84]	; (800541c <EXTI15_10_IRQHandler+0x98>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	1d3a      	adds	r2, r7, #4
 80053cc:	4611      	mov	r1, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fb fb86 	bl	8000ae0 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80053d4:	4b11      	ldr	r3, [pc, #68]	; (800541c <EXTI15_10_IRQHandler+0x98>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	1d3a      	adds	r2, r7, #4
 80053da:	4611      	mov	r1, r2
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fb fb7f 	bl	8000ae0 <xQueueGiveFromISR>

    NOTE: The syntax for forcing a context switch within an ISR varies between
    FreeRTOS ports.  The portEND_SWITCHING_ISR() macro is provided as part of
    the Cortex M3 port layer for this purpose.  taskYIELD() must never be called
    from an ISR! */
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <EXTI15_10_IRQHandler+0x7a>
 80053e8:	f7fe ff98 	bl	800431c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80053ec:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <EXTI15_10_IRQHandler+0x9c>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	e001      	b.n	8005402 <EXTI15_10_IRQHandler+0x7e>
 80053fe:	f7fe ff71 	bl	80042e4 <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005402:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005406:	f001 fff8 	bl	80073fa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	0800cc6c 	.word	0x0800cc6c
 8005418:	2407f0ac 	.word	0x2407f0ac
 800541c:	2407f0a8 	.word	0x2407f0a8
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005428:	4802      	ldr	r0, [pc, #8]	; (8005434 <TIM6_DAC_IRQHandler+0x10>)
 800542a:	f004 fcf5 	bl	8009e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	2407f1a8 	.word	0x2407f1a8

08005438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800543c:	4b39      	ldr	r3, [pc, #228]	; (8005524 <SystemInit+0xec>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	4a38      	ldr	r2, [pc, #224]	; (8005524 <SystemInit+0xec>)
 8005444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800544c:	4b36      	ldr	r3, [pc, #216]	; (8005528 <SystemInit+0xf0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	2b06      	cmp	r3, #6
 8005456:	d807      	bhi.n	8005468 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005458:	4b33      	ldr	r3, [pc, #204]	; (8005528 <SystemInit+0xf0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f023 030f 	bic.w	r3, r3, #15
 8005460:	4a31      	ldr	r2, [pc, #196]	; (8005528 <SystemInit+0xf0>)
 8005462:	f043 0307 	orr.w	r3, r3, #7
 8005466:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005468:	4b30      	ldr	r3, [pc, #192]	; (800552c <SystemInit+0xf4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a2f      	ldr	r2, [pc, #188]	; (800552c <SystemInit+0xf4>)
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005474:	4b2d      	ldr	r3, [pc, #180]	; (800552c <SystemInit+0xf4>)
 8005476:	2200      	movs	r2, #0
 8005478:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800547a:	4b2c      	ldr	r3, [pc, #176]	; (800552c <SystemInit+0xf4>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	492b      	ldr	r1, [pc, #172]	; (800552c <SystemInit+0xf4>)
 8005480:	4b2b      	ldr	r3, [pc, #172]	; (8005530 <SystemInit+0xf8>)
 8005482:	4013      	ands	r3, r2
 8005484:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005486:	4b28      	ldr	r3, [pc, #160]	; (8005528 <SystemInit+0xf0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005492:	4b25      	ldr	r3, [pc, #148]	; (8005528 <SystemInit+0xf0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f023 030f 	bic.w	r3, r3, #15
 800549a:	4a23      	ldr	r2, [pc, #140]	; (8005528 <SystemInit+0xf0>)
 800549c:	f043 0307 	orr.w	r3, r3, #7
 80054a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80054a2:	4b22      	ldr	r3, [pc, #136]	; (800552c <SystemInit+0xf4>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80054a8:	4b20      	ldr	r3, [pc, #128]	; (800552c <SystemInit+0xf4>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80054ae:	4b1f      	ldr	r3, [pc, #124]	; (800552c <SystemInit+0xf4>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <SystemInit+0xf4>)
 80054b6:	4a1f      	ldr	r2, [pc, #124]	; (8005534 <SystemInit+0xfc>)
 80054b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80054ba:	4b1c      	ldr	r3, [pc, #112]	; (800552c <SystemInit+0xf4>)
 80054bc:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <SystemInit+0x100>)
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80054c0:	4b1a      	ldr	r3, [pc, #104]	; (800552c <SystemInit+0xf4>)
 80054c2:	4a1e      	ldr	r2, [pc, #120]	; (800553c <SystemInit+0x104>)
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <SystemInit+0xf4>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80054cc:	4b17      	ldr	r3, [pc, #92]	; (800552c <SystemInit+0xf4>)
 80054ce:	4a1b      	ldr	r2, [pc, #108]	; (800553c <SystemInit+0x104>)
 80054d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80054d2:	4b16      	ldr	r3, [pc, #88]	; (800552c <SystemInit+0xf4>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80054d8:	4b14      	ldr	r3, [pc, #80]	; (800552c <SystemInit+0xf4>)
 80054da:	4a18      	ldr	r2, [pc, #96]	; (800553c <SystemInit+0x104>)
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80054de:	4b13      	ldr	r3, [pc, #76]	; (800552c <SystemInit+0xf4>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80054e4:	4b11      	ldr	r3, [pc, #68]	; (800552c <SystemInit+0xf4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a10      	ldr	r2, [pc, #64]	; (800552c <SystemInit+0xf4>)
 80054ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <SystemInit+0xf4>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80054f6:	4b12      	ldr	r3, [pc, #72]	; (8005540 <SystemInit+0x108>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <SystemInit+0x10c>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005502:	d202      	bcs.n	800550a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005504:	4b10      	ldr	r3, [pc, #64]	; (8005548 <SystemInit+0x110>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800550a:	4b10      	ldr	r3, [pc, #64]	; (800554c <SystemInit+0x114>)
 800550c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005510:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005512:	4b04      	ldr	r3, [pc, #16]	; (8005524 <SystemInit+0xec>)
 8005514:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005518:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800551a:	bf00      	nop
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	e000ed00 	.word	0xe000ed00
 8005528:	52002000 	.word	0x52002000
 800552c:	58024400 	.word	0x58024400
 8005530:	eaf6ed7f 	.word	0xeaf6ed7f
 8005534:	02020200 	.word	0x02020200
 8005538:	01ff0000 	.word	0x01ff0000
 800553c:	01010280 	.word	0x01010280
 8005540:	5c001000 	.word	0x5c001000
 8005544:	ffff0000 	.word	0xffff0000
 8005548:	51008108 	.word	0x51008108
 800554c:	52004000 	.word	0x52004000

08005550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005588 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005554:	f7ff ff70 	bl	8005438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005558:	480c      	ldr	r0, [pc, #48]	; (800558c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800555a:	490d      	ldr	r1, [pc, #52]	; (8005590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800555c:	4a0d      	ldr	r2, [pc, #52]	; (8005594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800555e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005560:	e002      	b.n	8005568 <LoopCopyDataInit>

08005562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005566:	3304      	adds	r3, #4

08005568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800556a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800556c:	d3f9      	bcc.n	8005562 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800556e:	4a0a      	ldr	r2, [pc, #40]	; (8005598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005570:	4c0a      	ldr	r4, [pc, #40]	; (800559c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005574:	e001      	b.n	800557a <LoopFillZerobss>

08005576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005578:	3204      	adds	r2, #4

0800557a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800557a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800557c:	d3fb      	bcc.n	8005576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800557e:	f006 fe01 	bl	800c184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005582:	f7ff f9bd 	bl	8004900 <main>
  bx  lr
 8005586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005588:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800558c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005590:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8005594:	0800cd74 	.word	0x0800cd74
  ldr r2, =_sbss
 8005598:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 800559c:	2407f20c 	.word	0x2407f20c

080055a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055a0:	e7fe      	b.n	80055a0 <ADC3_IRQHandler>
	...

080055a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055aa:	2003      	movs	r0, #3
 80055ac:	f000 f933 	bl	8005816 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055b0:	f002 fdd8 	bl	8008164 <HAL_RCC_GetSysClockFreq>
 80055b4:	4602      	mov	r2, r0
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <HAL_Init+0x68>)
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	4913      	ldr	r1, [pc, #76]	; (8005610 <HAL_Init+0x6c>)
 80055c2:	5ccb      	ldrb	r3, [r1, r3]
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
 80055cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055ce:	4b0f      	ldr	r3, [pc, #60]	; (800560c <HAL_Init+0x68>)
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	4a0e      	ldr	r2, [pc, #56]	; (8005610 <HAL_Init+0x6c>)
 80055d8:	5cd3      	ldrb	r3, [r2, r3]
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
 80055e4:	4a0b      	ldr	r2, [pc, #44]	; (8005614 <HAL_Init+0x70>)
 80055e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055e8:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <HAL_Init+0x74>)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055ee:	200f      	movs	r0, #15
 80055f0:	f7ff fdd2 	bl	8005198 <HAL_InitTick>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e002      	b.n	8005604 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80055fe:	f7ff fc63 	bl	8004ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	58024400 	.word	0x58024400
 8005610:	0800ccf8 	.word	0x0800ccf8
 8005614:	24000014 	.word	0x24000014
 8005618:	24000010 	.word	0x24000010

0800561c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005620:	4b06      	ldr	r3, [pc, #24]	; (800563c <HAL_IncTick+0x20>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	4b06      	ldr	r3, [pc, #24]	; (8005640 <HAL_IncTick+0x24>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4413      	add	r3, r2
 800562c:	4a04      	ldr	r2, [pc, #16]	; (8005640 <HAL_IncTick+0x24>)
 800562e:	6013      	str	r3, [r2, #0]
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	2400001c 	.word	0x2400001c
 8005640:	2407f1f4 	.word	0x2407f1f4

08005644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return uwTick;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <HAL_GetTick+0x14>)
 800564a:	681b      	ldr	r3, [r3, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	2407f1f4 	.word	0x2407f1f4

0800565c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005664:	f7ff ffee 	bl	8005644 <HAL_GetTick>
 8005668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005674:	d005      	beq.n	8005682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005676:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <HAL_Delay+0x44>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005682:	bf00      	nop
 8005684:	f7ff ffde 	bl	8005644 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	429a      	cmp	r2, r3
 8005692:	d8f7      	bhi.n	8005684 <HAL_Delay+0x28>
  {
  }
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	2400001c 	.word	0x2400001c

080056a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80056a8:	4b03      	ldr	r3, [pc, #12]	; (80056b8 <HAL_GetREVID+0x14>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	0c1b      	lsrs	r3, r3, #16
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	5c001000 	.word	0x5c001000

080056bc <__NVIC_SetPriorityGrouping>:
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <__NVIC_SetPriorityGrouping+0x40>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056d8:	4013      	ands	r3, r2
 80056da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056e4:	4b06      	ldr	r3, [pc, #24]	; (8005700 <__NVIC_SetPriorityGrouping+0x44>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056ea:	4a04      	ldr	r2, [pc, #16]	; (80056fc <__NVIC_SetPriorityGrouping+0x40>)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	60d3      	str	r3, [r2, #12]
}
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	e000ed00 	.word	0xe000ed00
 8005700:	05fa0000 	.word	0x05fa0000

08005704 <__NVIC_GetPriorityGrouping>:
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005708:	4b04      	ldr	r3, [pc, #16]	; (800571c <__NVIC_GetPriorityGrouping+0x18>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	f003 0307 	and.w	r3, r3, #7
}
 8005712:	4618      	mov	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	e000ed00 	.word	0xe000ed00

08005720 <__NVIC_EnableIRQ>:
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800572a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800572e:	2b00      	cmp	r3, #0
 8005730:	db0b      	blt.n	800574a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	f003 021f 	and.w	r2, r3, #31
 8005738:	4907      	ldr	r1, [pc, #28]	; (8005758 <__NVIC_EnableIRQ+0x38>)
 800573a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2001      	movs	r0, #1
 8005742:	fa00 f202 	lsl.w	r2, r0, r2
 8005746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	e000e100 	.word	0xe000e100

0800575c <__NVIC_SetPriority>:
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	6039      	str	r1, [r7, #0]
 8005766:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800576c:	2b00      	cmp	r3, #0
 800576e:	db0a      	blt.n	8005786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	b2da      	uxtb	r2, r3
 8005774:	490c      	ldr	r1, [pc, #48]	; (80057a8 <__NVIC_SetPriority+0x4c>)
 8005776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800577a:	0112      	lsls	r2, r2, #4
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	440b      	add	r3, r1
 8005780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005784:	e00a      	b.n	800579c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	4908      	ldr	r1, [pc, #32]	; (80057ac <__NVIC_SetPriority+0x50>)
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	3b04      	subs	r3, #4
 8005794:	0112      	lsls	r2, r2, #4
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	440b      	add	r3, r1
 800579a:	761a      	strb	r2, [r3, #24]
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	e000e100 	.word	0xe000e100
 80057ac:	e000ed00 	.word	0xe000ed00

080057b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b089      	sub	sp, #36	; 0x24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f1c3 0307 	rsb	r3, r3, #7
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	bf28      	it	cs
 80057ce:	2304      	movcs	r3, #4
 80057d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	3304      	adds	r3, #4
 80057d6:	2b06      	cmp	r3, #6
 80057d8:	d902      	bls.n	80057e0 <NVIC_EncodePriority+0x30>
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3b03      	subs	r3, #3
 80057de:	e000      	b.n	80057e2 <NVIC_EncodePriority+0x32>
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e4:	f04f 32ff 	mov.w	r2, #4294967295
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	43da      	mvns	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	401a      	ands	r2, r3
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057f8:	f04f 31ff 	mov.w	r1, #4294967295
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005802:	43d9      	mvns	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005808:	4313      	orrs	r3, r2
         );
}
 800580a:	4618      	mov	r0, r3
 800580c:	3724      	adds	r7, #36	; 0x24
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff ff4c 	bl	80056bc <__NVIC_SetPriorityGrouping>
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800583a:	f7ff ff63 	bl	8005704 <__NVIC_GetPriorityGrouping>
 800583e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	6978      	ldr	r0, [r7, #20]
 8005846:	f7ff ffb3 	bl	80057b0 <NVIC_EncodePriority>
 800584a:	4602      	mov	r2, r0
 800584c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff ff82 	bl	800575c <__NVIC_SetPriority>
}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800586a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff ff56 	bl	8005720 <__NVIC_EnableIRQ>
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005884:	f7ff fede 	bl	8005644 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e2dc      	b.n	8005e4e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d008      	beq.n	80058b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2280      	movs	r2, #128	; 0x80
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e2cd      	b.n	8005e4e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a76      	ldr	r2, [pc, #472]	; (8005a90 <HAL_DMA_Abort+0x214>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d04a      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a74      	ldr	r2, [pc, #464]	; (8005a94 <HAL_DMA_Abort+0x218>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d045      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a73      	ldr	r2, [pc, #460]	; (8005a98 <HAL_DMA_Abort+0x21c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d040      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a71      	ldr	r2, [pc, #452]	; (8005a9c <HAL_DMA_Abort+0x220>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d03b      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a70      	ldr	r2, [pc, #448]	; (8005aa0 <HAL_DMA_Abort+0x224>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d036      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a6e      	ldr	r2, [pc, #440]	; (8005aa4 <HAL_DMA_Abort+0x228>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d031      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a6d      	ldr	r2, [pc, #436]	; (8005aa8 <HAL_DMA_Abort+0x22c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d02c      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a6b      	ldr	r2, [pc, #428]	; (8005aac <HAL_DMA_Abort+0x230>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d027      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a6a      	ldr	r2, [pc, #424]	; (8005ab0 <HAL_DMA_Abort+0x234>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d022      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a68      	ldr	r2, [pc, #416]	; (8005ab4 <HAL_DMA_Abort+0x238>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01d      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a67      	ldr	r2, [pc, #412]	; (8005ab8 <HAL_DMA_Abort+0x23c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d018      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a65      	ldr	r2, [pc, #404]	; (8005abc <HAL_DMA_Abort+0x240>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a64      	ldr	r2, [pc, #400]	; (8005ac0 <HAL_DMA_Abort+0x244>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00e      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a62      	ldr	r2, [pc, #392]	; (8005ac4 <HAL_DMA_Abort+0x248>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a61      	ldr	r2, [pc, #388]	; (8005ac8 <HAL_DMA_Abort+0x24c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d004      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a5f      	ldr	r2, [pc, #380]	; (8005acc <HAL_DMA_Abort+0x250>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d101      	bne.n	8005956 <HAL_DMA_Abort+0xda>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <HAL_DMA_Abort+0xdc>
 8005956:	2300      	movs	r3, #0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d013      	beq.n	8005984 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 021e 	bic.w	r2, r2, #30
 800596a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695a      	ldr	r2, [r3, #20]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800597a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	e00a      	b.n	800599a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 020e 	bic.w	r2, r2, #14
 8005992:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a3c      	ldr	r2, [pc, #240]	; (8005a90 <HAL_DMA_Abort+0x214>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d072      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a3a      	ldr	r2, [pc, #232]	; (8005a94 <HAL_DMA_Abort+0x218>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d06d      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a39      	ldr	r2, [pc, #228]	; (8005a98 <HAL_DMA_Abort+0x21c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d068      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a37      	ldr	r2, [pc, #220]	; (8005a9c <HAL_DMA_Abort+0x220>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d063      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a36      	ldr	r2, [pc, #216]	; (8005aa0 <HAL_DMA_Abort+0x224>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d05e      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a34      	ldr	r2, [pc, #208]	; (8005aa4 <HAL_DMA_Abort+0x228>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d059      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a33      	ldr	r2, [pc, #204]	; (8005aa8 <HAL_DMA_Abort+0x22c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d054      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a31      	ldr	r2, [pc, #196]	; (8005aac <HAL_DMA_Abort+0x230>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d04f      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a30      	ldr	r2, [pc, #192]	; (8005ab0 <HAL_DMA_Abort+0x234>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d04a      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2e      	ldr	r2, [pc, #184]	; (8005ab4 <HAL_DMA_Abort+0x238>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d045      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2d      	ldr	r2, [pc, #180]	; (8005ab8 <HAL_DMA_Abort+0x23c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d040      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2b      	ldr	r2, [pc, #172]	; (8005abc <HAL_DMA_Abort+0x240>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d03b      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2a      	ldr	r2, [pc, #168]	; (8005ac0 <HAL_DMA_Abort+0x244>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d036      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a28      	ldr	r2, [pc, #160]	; (8005ac4 <HAL_DMA_Abort+0x248>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d031      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a27      	ldr	r2, [pc, #156]	; (8005ac8 <HAL_DMA_Abort+0x24c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d02c      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a25      	ldr	r2, [pc, #148]	; (8005acc <HAL_DMA_Abort+0x250>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d027      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a24      	ldr	r2, [pc, #144]	; (8005ad0 <HAL_DMA_Abort+0x254>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d022      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a22      	ldr	r2, [pc, #136]	; (8005ad4 <HAL_DMA_Abort+0x258>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01d      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <HAL_DMA_Abort+0x25c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d018      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <HAL_DMA_Abort+0x260>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <HAL_DMA_Abort+0x264>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00e      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1c      	ldr	r2, [pc, #112]	; (8005ae4 <HAL_DMA_Abort+0x268>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <HAL_DMA_Abort+0x26c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a19      	ldr	r2, [pc, #100]	; (8005aec <HAL_DMA_Abort+0x270>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d132      	bne.n	8005af0 <HAL_DMA_Abort+0x274>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e031      	b.n	8005af2 <HAL_DMA_Abort+0x276>
 8005a8e:	bf00      	nop
 8005a90:	40020010 	.word	0x40020010
 8005a94:	40020028 	.word	0x40020028
 8005a98:	40020040 	.word	0x40020040
 8005a9c:	40020058 	.word	0x40020058
 8005aa0:	40020070 	.word	0x40020070
 8005aa4:	40020088 	.word	0x40020088
 8005aa8:	400200a0 	.word	0x400200a0
 8005aac:	400200b8 	.word	0x400200b8
 8005ab0:	40020410 	.word	0x40020410
 8005ab4:	40020428 	.word	0x40020428
 8005ab8:	40020440 	.word	0x40020440
 8005abc:	40020458 	.word	0x40020458
 8005ac0:	40020470 	.word	0x40020470
 8005ac4:	40020488 	.word	0x40020488
 8005ac8:	400204a0 	.word	0x400204a0
 8005acc:	400204b8 	.word	0x400204b8
 8005ad0:	58025408 	.word	0x58025408
 8005ad4:	5802541c 	.word	0x5802541c
 8005ad8:	58025430 	.word	0x58025430
 8005adc:	58025444 	.word	0x58025444
 8005ae0:	58025458 	.word	0x58025458
 8005ae4:	5802546c 	.word	0x5802546c
 8005ae8:	58025480 	.word	0x58025480
 8005aec:	58025494 	.word	0x58025494
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b04:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a6d      	ldr	r2, [pc, #436]	; (8005cc0 <HAL_DMA_Abort+0x444>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d04a      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a6b      	ldr	r2, [pc, #428]	; (8005cc4 <HAL_DMA_Abort+0x448>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d045      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a6a      	ldr	r2, [pc, #424]	; (8005cc8 <HAL_DMA_Abort+0x44c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d040      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a68      	ldr	r2, [pc, #416]	; (8005ccc <HAL_DMA_Abort+0x450>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d03b      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a67      	ldr	r2, [pc, #412]	; (8005cd0 <HAL_DMA_Abort+0x454>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d036      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a65      	ldr	r2, [pc, #404]	; (8005cd4 <HAL_DMA_Abort+0x458>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d031      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a64      	ldr	r2, [pc, #400]	; (8005cd8 <HAL_DMA_Abort+0x45c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d02c      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a62      	ldr	r2, [pc, #392]	; (8005cdc <HAL_DMA_Abort+0x460>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d027      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a61      	ldr	r2, [pc, #388]	; (8005ce0 <HAL_DMA_Abort+0x464>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d022      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a5f      	ldr	r2, [pc, #380]	; (8005ce4 <HAL_DMA_Abort+0x468>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01d      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a5e      	ldr	r2, [pc, #376]	; (8005ce8 <HAL_DMA_Abort+0x46c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d018      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a5c      	ldr	r2, [pc, #368]	; (8005cec <HAL_DMA_Abort+0x470>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a5b      	ldr	r2, [pc, #364]	; (8005cf0 <HAL_DMA_Abort+0x474>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00e      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a59      	ldr	r2, [pc, #356]	; (8005cf4 <HAL_DMA_Abort+0x478>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d009      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a58      	ldr	r2, [pc, #352]	; (8005cf8 <HAL_DMA_Abort+0x47c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d004      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a56      	ldr	r2, [pc, #344]	; (8005cfc <HAL_DMA_Abort+0x480>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d108      	bne.n	8005bb8 <HAL_DMA_Abort+0x33c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	e007      	b.n	8005bc8 <HAL_DMA_Abort+0x34c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bc8:	e013      	b.n	8005bf2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bca:	f7ff fd3b 	bl	8005644 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	d90c      	bls.n	8005bf2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2203      	movs	r2, #3
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e12d      	b.n	8005e4e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2f      	ldr	r2, [pc, #188]	; (8005cc0 <HAL_DMA_Abort+0x444>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d04a      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2d      	ldr	r2, [pc, #180]	; (8005cc4 <HAL_DMA_Abort+0x448>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d045      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a2c      	ldr	r2, [pc, #176]	; (8005cc8 <HAL_DMA_Abort+0x44c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d040      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a2a      	ldr	r2, [pc, #168]	; (8005ccc <HAL_DMA_Abort+0x450>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d03b      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a29      	ldr	r2, [pc, #164]	; (8005cd0 <HAL_DMA_Abort+0x454>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d036      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a27      	ldr	r2, [pc, #156]	; (8005cd4 <HAL_DMA_Abort+0x458>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d031      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a26      	ldr	r2, [pc, #152]	; (8005cd8 <HAL_DMA_Abort+0x45c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d02c      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a24      	ldr	r2, [pc, #144]	; (8005cdc <HAL_DMA_Abort+0x460>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d027      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a23      	ldr	r2, [pc, #140]	; (8005ce0 <HAL_DMA_Abort+0x464>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d022      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a21      	ldr	r2, [pc, #132]	; (8005ce4 <HAL_DMA_Abort+0x468>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01d      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a20      	ldr	r2, [pc, #128]	; (8005ce8 <HAL_DMA_Abort+0x46c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d018      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1e      	ldr	r2, [pc, #120]	; (8005cec <HAL_DMA_Abort+0x470>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <HAL_DMA_Abort+0x474>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <HAL_DMA_Abort+0x478>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1a      	ldr	r2, [pc, #104]	; (8005cf8 <HAL_DMA_Abort+0x47c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <HAL_DMA_Abort+0x480>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d101      	bne.n	8005ca2 <HAL_DMA_Abort+0x426>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <HAL_DMA_Abort+0x428>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d02b      	beq.n	8005d00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	223f      	movs	r2, #63	; 0x3f
 8005cb8:	409a      	lsls	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	609a      	str	r2, [r3, #8]
 8005cbe:	e02a      	b.n	8005d16 <HAL_DMA_Abort+0x49a>
 8005cc0:	40020010 	.word	0x40020010
 8005cc4:	40020028 	.word	0x40020028
 8005cc8:	40020040 	.word	0x40020040
 8005ccc:	40020058 	.word	0x40020058
 8005cd0:	40020070 	.word	0x40020070
 8005cd4:	40020088 	.word	0x40020088
 8005cd8:	400200a0 	.word	0x400200a0
 8005cdc:	400200b8 	.word	0x400200b8
 8005ce0:	40020410 	.word	0x40020410
 8005ce4:	40020428 	.word	0x40020428
 8005ce8:	40020440 	.word	0x40020440
 8005cec:	40020458 	.word	0x40020458
 8005cf0:	40020470 	.word	0x40020470
 8005cf4:	40020488 	.word	0x40020488
 8005cf8:	400204a0 	.word	0x400204a0
 8005cfc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2201      	movs	r2, #1
 8005d10:	409a      	lsls	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a4f      	ldr	r2, [pc, #316]	; (8005e58 <HAL_DMA_Abort+0x5dc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d072      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a4d      	ldr	r2, [pc, #308]	; (8005e5c <HAL_DMA_Abort+0x5e0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d06d      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a4c      	ldr	r2, [pc, #304]	; (8005e60 <HAL_DMA_Abort+0x5e4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d068      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a4a      	ldr	r2, [pc, #296]	; (8005e64 <HAL_DMA_Abort+0x5e8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d063      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a49      	ldr	r2, [pc, #292]	; (8005e68 <HAL_DMA_Abort+0x5ec>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d05e      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a47      	ldr	r2, [pc, #284]	; (8005e6c <HAL_DMA_Abort+0x5f0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d059      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a46      	ldr	r2, [pc, #280]	; (8005e70 <HAL_DMA_Abort+0x5f4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d054      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a44      	ldr	r2, [pc, #272]	; (8005e74 <HAL_DMA_Abort+0x5f8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d04f      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a43      	ldr	r2, [pc, #268]	; (8005e78 <HAL_DMA_Abort+0x5fc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d04a      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a41      	ldr	r2, [pc, #260]	; (8005e7c <HAL_DMA_Abort+0x600>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d045      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a40      	ldr	r2, [pc, #256]	; (8005e80 <HAL_DMA_Abort+0x604>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d040      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a3e      	ldr	r2, [pc, #248]	; (8005e84 <HAL_DMA_Abort+0x608>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d03b      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a3d      	ldr	r2, [pc, #244]	; (8005e88 <HAL_DMA_Abort+0x60c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d036      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a3b      	ldr	r2, [pc, #236]	; (8005e8c <HAL_DMA_Abort+0x610>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d031      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a3a      	ldr	r2, [pc, #232]	; (8005e90 <HAL_DMA_Abort+0x614>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d02c      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a38      	ldr	r2, [pc, #224]	; (8005e94 <HAL_DMA_Abort+0x618>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d027      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a37      	ldr	r2, [pc, #220]	; (8005e98 <HAL_DMA_Abort+0x61c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d022      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a35      	ldr	r2, [pc, #212]	; (8005e9c <HAL_DMA_Abort+0x620>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d01d      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a34      	ldr	r2, [pc, #208]	; (8005ea0 <HAL_DMA_Abort+0x624>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d018      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a32      	ldr	r2, [pc, #200]	; (8005ea4 <HAL_DMA_Abort+0x628>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a31      	ldr	r2, [pc, #196]	; (8005ea8 <HAL_DMA_Abort+0x62c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00e      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a2f      	ldr	r2, [pc, #188]	; (8005eac <HAL_DMA_Abort+0x630>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d009      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2e      	ldr	r2, [pc, #184]	; (8005eb0 <HAL_DMA_Abort+0x634>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d004      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a2c      	ldr	r2, [pc, #176]	; (8005eb4 <HAL_DMA_Abort+0x638>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d101      	bne.n	8005e0a <HAL_DMA_Abort+0x58e>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <HAL_DMA_Abort+0x590>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d015      	beq.n	8005e3c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e18:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00c      	beq.n	8005e3c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e30:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e3a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40020010 	.word	0x40020010
 8005e5c:	40020028 	.word	0x40020028
 8005e60:	40020040 	.word	0x40020040
 8005e64:	40020058 	.word	0x40020058
 8005e68:	40020070 	.word	0x40020070
 8005e6c:	40020088 	.word	0x40020088
 8005e70:	400200a0 	.word	0x400200a0
 8005e74:	400200b8 	.word	0x400200b8
 8005e78:	40020410 	.word	0x40020410
 8005e7c:	40020428 	.word	0x40020428
 8005e80:	40020440 	.word	0x40020440
 8005e84:	40020458 	.word	0x40020458
 8005e88:	40020470 	.word	0x40020470
 8005e8c:	40020488 	.word	0x40020488
 8005e90:	400204a0 	.word	0x400204a0
 8005e94:	400204b8 	.word	0x400204b8
 8005e98:	58025408 	.word	0x58025408
 8005e9c:	5802541c 	.word	0x5802541c
 8005ea0:	58025430 	.word	0x58025430
 8005ea4:	58025444 	.word	0x58025444
 8005ea8:	58025458 	.word	0x58025458
 8005eac:	5802546c 	.word	0x5802546c
 8005eb0:	58025480 	.word	0x58025480
 8005eb4:	58025494 	.word	0x58025494

08005eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e237      	b.n	800633a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d004      	beq.n	8005ee0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2280      	movs	r2, #128	; 0x80
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e22c      	b.n	800633a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a5c      	ldr	r2, [pc, #368]	; (8006058 <HAL_DMA_Abort_IT+0x1a0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d04a      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a5b      	ldr	r2, [pc, #364]	; (800605c <HAL_DMA_Abort_IT+0x1a4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d045      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a59      	ldr	r2, [pc, #356]	; (8006060 <HAL_DMA_Abort_IT+0x1a8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d040      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a58      	ldr	r2, [pc, #352]	; (8006064 <HAL_DMA_Abort_IT+0x1ac>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d03b      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a56      	ldr	r2, [pc, #344]	; (8006068 <HAL_DMA_Abort_IT+0x1b0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d036      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a55      	ldr	r2, [pc, #340]	; (800606c <HAL_DMA_Abort_IT+0x1b4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d031      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a53      	ldr	r2, [pc, #332]	; (8006070 <HAL_DMA_Abort_IT+0x1b8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d02c      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a52      	ldr	r2, [pc, #328]	; (8006074 <HAL_DMA_Abort_IT+0x1bc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d027      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a50      	ldr	r2, [pc, #320]	; (8006078 <HAL_DMA_Abort_IT+0x1c0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d022      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a4f      	ldr	r2, [pc, #316]	; (800607c <HAL_DMA_Abort_IT+0x1c4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d01d      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a4d      	ldr	r2, [pc, #308]	; (8006080 <HAL_DMA_Abort_IT+0x1c8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d018      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a4c      	ldr	r2, [pc, #304]	; (8006084 <HAL_DMA_Abort_IT+0x1cc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a4a      	ldr	r2, [pc, #296]	; (8006088 <HAL_DMA_Abort_IT+0x1d0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00e      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a49      	ldr	r2, [pc, #292]	; (800608c <HAL_DMA_Abort_IT+0x1d4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a47      	ldr	r2, [pc, #284]	; (8006090 <HAL_DMA_Abort_IT+0x1d8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a46      	ldr	r2, [pc, #280]	; (8006094 <HAL_DMA_Abort_IT+0x1dc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d101      	bne.n	8005f84 <HAL_DMA_Abort_IT+0xcc>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <HAL_DMA_Abort_IT+0xce>
 8005f84:	2300      	movs	r3, #0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8086 	beq.w	8006098 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2204      	movs	r2, #4
 8005f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a2f      	ldr	r2, [pc, #188]	; (8006058 <HAL_DMA_Abort_IT+0x1a0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d04a      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2e      	ldr	r2, [pc, #184]	; (800605c <HAL_DMA_Abort_IT+0x1a4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d045      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <HAL_DMA_Abort_IT+0x1a8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d040      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a2b      	ldr	r2, [pc, #172]	; (8006064 <HAL_DMA_Abort_IT+0x1ac>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d03b      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a29      	ldr	r2, [pc, #164]	; (8006068 <HAL_DMA_Abort_IT+0x1b0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d036      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a28      	ldr	r2, [pc, #160]	; (800606c <HAL_DMA_Abort_IT+0x1b4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d031      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a26      	ldr	r2, [pc, #152]	; (8006070 <HAL_DMA_Abort_IT+0x1b8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d02c      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a25      	ldr	r2, [pc, #148]	; (8006074 <HAL_DMA_Abort_IT+0x1bc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d027      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a23      	ldr	r2, [pc, #140]	; (8006078 <HAL_DMA_Abort_IT+0x1c0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d022      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a22      	ldr	r2, [pc, #136]	; (800607c <HAL_DMA_Abort_IT+0x1c4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d01d      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a20      	ldr	r2, [pc, #128]	; (8006080 <HAL_DMA_Abort_IT+0x1c8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1f      	ldr	r2, [pc, #124]	; (8006084 <HAL_DMA_Abort_IT+0x1cc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1d      	ldr	r2, [pc, #116]	; (8006088 <HAL_DMA_Abort_IT+0x1d0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1c      	ldr	r2, [pc, #112]	; (800608c <HAL_DMA_Abort_IT+0x1d4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1a      	ldr	r2, [pc, #104]	; (8006090 <HAL_DMA_Abort_IT+0x1d8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a19      	ldr	r2, [pc, #100]	; (8006094 <HAL_DMA_Abort_IT+0x1dc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d108      	bne.n	8006046 <HAL_DMA_Abort_IT+0x18e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0201 	bic.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e178      	b.n	8006338 <HAL_DMA_Abort_IT+0x480>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e16f      	b.n	8006338 <HAL_DMA_Abort_IT+0x480>
 8006058:	40020010 	.word	0x40020010
 800605c:	40020028 	.word	0x40020028
 8006060:	40020040 	.word	0x40020040
 8006064:	40020058 	.word	0x40020058
 8006068:	40020070 	.word	0x40020070
 800606c:	40020088 	.word	0x40020088
 8006070:	400200a0 	.word	0x400200a0
 8006074:	400200b8 	.word	0x400200b8
 8006078:	40020410 	.word	0x40020410
 800607c:	40020428 	.word	0x40020428
 8006080:	40020440 	.word	0x40020440
 8006084:	40020458 	.word	0x40020458
 8006088:	40020470 	.word	0x40020470
 800608c:	40020488 	.word	0x40020488
 8006090:	400204a0 	.word	0x400204a0
 8006094:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 020e 	bic.w	r2, r2, #14
 80060a6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a6c      	ldr	r2, [pc, #432]	; (8006260 <HAL_DMA_Abort_IT+0x3a8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d04a      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a6b      	ldr	r2, [pc, #428]	; (8006264 <HAL_DMA_Abort_IT+0x3ac>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d045      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a69      	ldr	r2, [pc, #420]	; (8006268 <HAL_DMA_Abort_IT+0x3b0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d040      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a68      	ldr	r2, [pc, #416]	; (800626c <HAL_DMA_Abort_IT+0x3b4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d03b      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a66      	ldr	r2, [pc, #408]	; (8006270 <HAL_DMA_Abort_IT+0x3b8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d036      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a65      	ldr	r2, [pc, #404]	; (8006274 <HAL_DMA_Abort_IT+0x3bc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d031      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a63      	ldr	r2, [pc, #396]	; (8006278 <HAL_DMA_Abort_IT+0x3c0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d02c      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a62      	ldr	r2, [pc, #392]	; (800627c <HAL_DMA_Abort_IT+0x3c4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d027      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a60      	ldr	r2, [pc, #384]	; (8006280 <HAL_DMA_Abort_IT+0x3c8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a5f      	ldr	r2, [pc, #380]	; (8006284 <HAL_DMA_Abort_IT+0x3cc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d01d      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a5d      	ldr	r2, [pc, #372]	; (8006288 <HAL_DMA_Abort_IT+0x3d0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a5c      	ldr	r2, [pc, #368]	; (800628c <HAL_DMA_Abort_IT+0x3d4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a5a      	ldr	r2, [pc, #360]	; (8006290 <HAL_DMA_Abort_IT+0x3d8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a59      	ldr	r2, [pc, #356]	; (8006294 <HAL_DMA_Abort_IT+0x3dc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a57      	ldr	r2, [pc, #348]	; (8006298 <HAL_DMA_Abort_IT+0x3e0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a56      	ldr	r2, [pc, #344]	; (800629c <HAL_DMA_Abort_IT+0x3e4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d108      	bne.n	800615a <HAL_DMA_Abort_IT+0x2a2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0201 	bic.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	e007      	b.n	800616a <HAL_DMA_Abort_IT+0x2b2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a3c      	ldr	r2, [pc, #240]	; (8006260 <HAL_DMA_Abort_IT+0x3a8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d072      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a3a      	ldr	r2, [pc, #232]	; (8006264 <HAL_DMA_Abort_IT+0x3ac>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d06d      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a39      	ldr	r2, [pc, #228]	; (8006268 <HAL_DMA_Abort_IT+0x3b0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d068      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a37      	ldr	r2, [pc, #220]	; (800626c <HAL_DMA_Abort_IT+0x3b4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d063      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a36      	ldr	r2, [pc, #216]	; (8006270 <HAL_DMA_Abort_IT+0x3b8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d05e      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a34      	ldr	r2, [pc, #208]	; (8006274 <HAL_DMA_Abort_IT+0x3bc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d059      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a33      	ldr	r2, [pc, #204]	; (8006278 <HAL_DMA_Abort_IT+0x3c0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d054      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a31      	ldr	r2, [pc, #196]	; (800627c <HAL_DMA_Abort_IT+0x3c4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d04f      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a30      	ldr	r2, [pc, #192]	; (8006280 <HAL_DMA_Abort_IT+0x3c8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d04a      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2e      	ldr	r2, [pc, #184]	; (8006284 <HAL_DMA_Abort_IT+0x3cc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d045      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2d      	ldr	r2, [pc, #180]	; (8006288 <HAL_DMA_Abort_IT+0x3d0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d040      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2b      	ldr	r2, [pc, #172]	; (800628c <HAL_DMA_Abort_IT+0x3d4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d03b      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2a      	ldr	r2, [pc, #168]	; (8006290 <HAL_DMA_Abort_IT+0x3d8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d036      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a28      	ldr	r2, [pc, #160]	; (8006294 <HAL_DMA_Abort_IT+0x3dc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d031      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a27      	ldr	r2, [pc, #156]	; (8006298 <HAL_DMA_Abort_IT+0x3e0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d02c      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a25      	ldr	r2, [pc, #148]	; (800629c <HAL_DMA_Abort_IT+0x3e4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d027      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a24      	ldr	r2, [pc, #144]	; (80062a0 <HAL_DMA_Abort_IT+0x3e8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d022      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a22      	ldr	r2, [pc, #136]	; (80062a4 <HAL_DMA_Abort_IT+0x3ec>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d01d      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <HAL_DMA_Abort_IT+0x3f0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1f      	ldr	r2, [pc, #124]	; (80062ac <HAL_DMA_Abort_IT+0x3f4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1e      	ldr	r2, [pc, #120]	; (80062b0 <HAL_DMA_Abort_IT+0x3f8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <HAL_DMA_Abort_IT+0x3fc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <HAL_DMA_Abort_IT+0x400>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a19      	ldr	r2, [pc, #100]	; (80062bc <HAL_DMA_Abort_IT+0x404>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d132      	bne.n	80062c0 <HAL_DMA_Abort_IT+0x408>
 800625a:	2301      	movs	r3, #1
 800625c:	e031      	b.n	80062c2 <HAL_DMA_Abort_IT+0x40a>
 800625e:	bf00      	nop
 8006260:	40020010 	.word	0x40020010
 8006264:	40020028 	.word	0x40020028
 8006268:	40020040 	.word	0x40020040
 800626c:	40020058 	.word	0x40020058
 8006270:	40020070 	.word	0x40020070
 8006274:	40020088 	.word	0x40020088
 8006278:	400200a0 	.word	0x400200a0
 800627c:	400200b8 	.word	0x400200b8
 8006280:	40020410 	.word	0x40020410
 8006284:	40020428 	.word	0x40020428
 8006288:	40020440 	.word	0x40020440
 800628c:	40020458 	.word	0x40020458
 8006290:	40020470 	.word	0x40020470
 8006294:	40020488 	.word	0x40020488
 8006298:	400204a0 	.word	0x400204a0
 800629c:	400204b8 	.word	0x400204b8
 80062a0:	58025408 	.word	0x58025408
 80062a4:	5802541c 	.word	0x5802541c
 80062a8:	58025430 	.word	0x58025430
 80062ac:	58025444 	.word	0x58025444
 80062b0:	58025458 	.word	0x58025458
 80062b4:	5802546c 	.word	0x5802546c
 80062b8:	58025480 	.word	0x58025480
 80062bc:	58025494 	.word	0x58025494
 80062c0:	2300      	movs	r3, #0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d028      	beq.n	8006318 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	2201      	movs	r2, #1
 80062e6:	409a      	lsls	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00c      	beq.n	8006318 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800630c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006316:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop

08006344 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b098      	sub	sp, #96	; 0x60
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800634c:	4a84      	ldr	r2, [pc, #528]	; (8006560 <HAL_FDCAN_Init+0x21c>)
 800634e:	f107 030c 	add.w	r3, r7, #12
 8006352:	4611      	mov	r1, r2
 8006354:	224c      	movs	r2, #76	; 0x4c
 8006356:	4618      	mov	r0, r3
 8006358:	f005 ff48 	bl	800c1ec <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e1c6      	b.n	80066f4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a7e      	ldr	r2, [pc, #504]	; (8006564 <HAL_FDCAN_Init+0x220>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d106      	bne.n	800637e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006378:	461a      	mov	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fe fdb2 	bl	8004efc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0210 	bic.w	r2, r2, #16
 80063a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063a8:	f7ff f94c 	bl	8005644 <HAL_GetTick>
 80063ac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80063ae:	e014      	b.n	80063da <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80063b0:	f7ff f948 	bl	8005644 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b0a      	cmp	r3, #10
 80063bc:	d90d      	bls.n	80063da <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063c4:	f043 0201 	orr.w	r2, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2203      	movs	r2, #3
 80063d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e18c      	b.n	80066f4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d0e3      	beq.n	80063b0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063f8:	f7ff f924 	bl	8005644 <HAL_GetTick>
 80063fc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80063fe:	e014      	b.n	800642a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006400:	f7ff f920 	bl	8005644 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b0a      	cmp	r3, #10
 800640c:	d90d      	bls.n	800642a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006414:	f043 0201 	orr.w	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2203      	movs	r2, #3
 8006422:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e164      	b.n	80066f4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0e3      	beq.n	8006400 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0202 	orr.w	r2, r2, #2
 8006446:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	7c1b      	ldrb	r3, [r3, #16]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d108      	bne.n	8006462 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800645e:	619a      	str	r2, [r3, #24]
 8006460:	e007      	b.n	8006472 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699a      	ldr	r2, [r3, #24]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006470:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	7c5b      	ldrb	r3, [r3, #17]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d108      	bne.n	800648c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006488:	619a      	str	r2, [r3, #24]
 800648a:	e007      	b.n	800649c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800649a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	7c9b      	ldrb	r3, [r3, #18]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d108      	bne.n	80064b6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064b2:	619a      	str	r2, [r3, #24]
 80064b4:	e007      	b.n	80064c6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	699a      	ldr	r2, [r3, #24]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064c4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80064ea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0210 	bic.w	r2, r2, #16
 80064fa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d108      	bne.n	8006516 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0204 	orr.w	r2, r2, #4
 8006512:	619a      	str	r2, [r3, #24]
 8006514:	e030      	b.n	8006578 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d02c      	beq.n	8006578 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d020      	beq.n	8006568 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	699a      	ldr	r2, [r3, #24]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006534:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0210 	orr.w	r2, r2, #16
 8006544:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	2b03      	cmp	r3, #3
 800654c:	d114      	bne.n	8006578 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699a      	ldr	r2, [r3, #24]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0220 	orr.w	r2, r2, #32
 800655c:	619a      	str	r2, [r3, #24]
 800655e:	e00b      	b.n	8006578 <HAL_FDCAN_Init+0x234>
 8006560:	0800cc80 	.word	0x0800cc80
 8006564:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699a      	ldr	r2, [r3, #24]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0220 	orr.w	r2, r2, #32
 8006576:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	3b01      	subs	r3, #1
 800657e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	3b01      	subs	r3, #1
 8006586:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006588:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006590:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	3b01      	subs	r3, #1
 800659a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80065a0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80065a2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ac:	d115      	bne.n	80065da <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	3b01      	subs	r3, #1
 80065ba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80065bc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	3b01      	subs	r3, #1
 80065c4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80065c6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	3b01      	subs	r3, #1
 80065d0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80065d6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80065d8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006600:	4413      	add	r3, r2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d011      	beq.n	800662a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800660e:	f023 0107 	bic.w	r1, r3, #7
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	3360      	adds	r3, #96	; 0x60
 800661a:	443b      	add	r3, r7
 800661c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	d011      	beq.n	8006656 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800663a:	f023 0107 	bic.w	r1, r3, #7
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	3360      	adds	r3, #96	; 0x60
 8006646:	443b      	add	r3, r7
 8006648:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665a:	2b00      	cmp	r3, #0
 800665c:	d012      	beq.n	8006684 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006666:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	3360      	adds	r3, #96	; 0x60
 8006672:	443b      	add	r3, r7
 8006674:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006678:	011a      	lsls	r2, r3, #4
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006688:	2b00      	cmp	r3, #0
 800668a:	d012      	beq.n	80066b2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006694:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	3360      	adds	r3, #96	; 0x60
 80066a0:	443b      	add	r3, r7
 80066a2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80066a6:	021a      	lsls	r2, r3, #8
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a11      	ldr	r2, [pc, #68]	; (80066fc <HAL_FDCAN_Init+0x3b8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d107      	bne.n	80066cc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f022 0203 	bic.w	r2, r2, #3
 80066ca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fb1f 	bl	8006d28 <FDCAN_CalcultateRamBlockAddresses>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80066f0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3760      	adds	r7, #96	; 0x60
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	4000a000 	.word	0x4000a000

08006700 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b096      	sub	sp, #88	; 0x58
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006708:	4b9a      	ldr	r3, [pc, #616]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	079b      	lsls	r3, r3, #30
 800670e:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006710:	4b98      	ldr	r3, [pc, #608]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	079b      	lsls	r3, r3, #30
 8006716:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006718:	4013      	ands	r3, r2
 800671a:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006722:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006726:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006730:	4013      	ands	r3, r2
 8006732:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006746:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006748:	4013      	ands	r3, r2
 800674a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006756:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006760:	4013      	ands	r3, r2
 8006762:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800676e:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006778:	4013      	ands	r3, r2
 800677a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006782:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8006786:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006790:	4013      	ands	r3, r2
 8006792:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80067a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a6:	0a1b      	lsrs	r3, r3, #8
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d010      	beq.n	80067d2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80067b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067c4:	651a      	str	r2, [r3, #80]	; 0x50
 80067c6:	4b6b      	ldr	r3, [pc, #428]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fa5f 	bl	8006c90 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80067d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d4:	0a9b      	lsrs	r3, r3, #10
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01d      	beq.n	800681a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	0a9b      	lsrs	r3, r3, #10
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d017      	beq.n	800681a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067fe:	4013      	ands	r3, r2
 8006800:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800680a:	651a      	str	r2, [r3, #80]	; 0x50
 800680c:	4b59      	ldr	r3, [pc, #356]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 800680e:	2200      	movs	r2, #0
 8006810:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006812:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fa12 	bl	8006c3e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800681a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006826:	4b54      	ldr	r3, [pc, #336]	; (8006978 <HAL_FDCAN_IRQHandler+0x278>)
 8006828:	400b      	ands	r3, r1
 800682a:	6513      	str	r3, [r2, #80]	; 0x50
 800682c:	4a51      	ldr	r2, [pc, #324]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 800682e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006830:	0f9b      	lsrs	r3, r3, #30
 8006832:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f9c0 	bl	8006bbc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800683c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00d      	beq.n	800685e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006848:	4b4b      	ldr	r3, [pc, #300]	; (8006978 <HAL_FDCAN_IRQHandler+0x278>)
 800684a:	400b      	ands	r3, r1
 800684c:	6513      	str	r3, [r2, #80]	; 0x50
 800684e:	4a49      	ldr	r2, [pc, #292]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 8006850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006852:	0f9b      	lsrs	r3, r3, #30
 8006854:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006856:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f9ba 	bl	8006bd2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00d      	beq.n	8006880 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800686a:	4b43      	ldr	r3, [pc, #268]	; (8006978 <HAL_FDCAN_IRQHandler+0x278>)
 800686c:	400b      	ands	r3, r1
 800686e:	6513      	str	r3, [r2, #80]	; 0x50
 8006870:	4a40      	ldr	r2, [pc, #256]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 8006872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006874:	0f9b      	lsrs	r3, r3, #30
 8006876:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006878:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f9b4 	bl	8006be8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00d      	beq.n	80068a2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800688c:	4b3a      	ldr	r3, [pc, #232]	; (8006978 <HAL_FDCAN_IRQHandler+0x278>)
 800688e:	400b      	ands	r3, r1
 8006890:	6513      	str	r3, [r2, #80]	; 0x50
 8006892:	4a38      	ldr	r2, [pc, #224]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 8006894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006896:	0f9b      	lsrs	r3, r3, #30
 8006898:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800689a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f9ae 	bl	8006bfe <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80068a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a4:	0adb      	lsrs	r3, r3, #11
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d010      	beq.n	80068d0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	0adb      	lsrs	r3, r3, #11
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c2:	651a      	str	r2, [r3, #80]	; 0x50
 80068c4:	4b2b      	ldr	r3, [pc, #172]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9a2 	bl	8006c14 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80068d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d2:	0a5b      	lsrs	r3, r3, #9
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01d      	beq.n	8006918 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	0a5b      	lsrs	r3, r3, #9
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d017      	beq.n	8006918 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80068f0:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fc:	4013      	ands	r3, r2
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006908:	651a      	str	r2, [r3, #80]	; 0x50
 800690a:	4b1a      	ldr	r3, [pc, #104]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 800690c:	2200      	movs	r2, #0
 800690e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f988 	bl	8006c28 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691a:	0cdb      	lsrs	r3, r3, #19
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d010      	beq.n	8006946 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	0cdb      	lsrs	r3, r3, #19
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006938:	651a      	str	r2, [r3, #80]	; 0x50
 800693a:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 800693c:	2200      	movs	r2, #0
 800693e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f987 	bl	8006c54 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006948:	0c1b      	lsrs	r3, r3, #16
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d016      	beq.n	8006980 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d010      	beq.n	8006980 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006966:	651a      	str	r2, [r3, #80]	; 0x50
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <HAL_FDCAN_IRQHandler+0x274>)
 800696a:	2200      	movs	r2, #0
 800696c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	e004      	b.n	800697c <HAL_FDCAN_IRQHandler+0x27c>
 8006972:	bf00      	nop
 8006974:	4000a800 	.word	0x4000a800
 8006978:	3fcfffff 	.word	0x3fcfffff
 800697c:	f000 f974 	bl	8006c68 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006982:	0c9b      	lsrs	r3, r3, #18
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d010      	beq.n	80069ae <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	0c9b      	lsrs	r3, r3, #18
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00a      	beq.n	80069ae <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80069a0:	651a      	str	r2, [r3, #80]	; 0x50
 80069a2:	4b83      	ldr	r3, [pc, #524]	; (8006bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f967 	bl	8006c7c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80069ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b0:	0c5b      	lsrs	r3, r3, #17
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d015      	beq.n	80069e6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	0c5b      	lsrs	r3, r3, #17
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00f      	beq.n	80069e6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069ce:	651a      	str	r2, [r3, #80]	; 0x50
 80069d0:	4b77      	ldr	r3, [pc, #476]	; (8006bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80069e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00d      	beq.n	8006a08 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069f2:	4b70      	ldr	r3, [pc, #448]	; (8006bb4 <HAL_FDCAN_IRQHandler+0x4b4>)
 80069f4:	400b      	ands	r3, r1
 80069f6:	6513      	str	r3, [r2, #80]	; 0x50
 80069f8:	4a6d      	ldr	r2, [pc, #436]	; (8006bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80069fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069fc:	0f9b      	lsrs	r3, r3, #30
 80069fe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006a00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f958 	bl	8006cb8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d011      	beq.n	8006a32 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a14:	4b67      	ldr	r3, [pc, #412]	; (8006bb4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006a16:	400b      	ands	r3, r1
 8006a18:	6513      	str	r3, [r2, #80]	; 0x50
 8006a1a:	4a65      	ldr	r2, [pc, #404]	; (8006bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a1e:	0f9b      	lsrs	r3, r3, #30
 8006a20:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a60      	ldr	r2, [pc, #384]	; (8006bb8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	f040 80ac 	bne.w	8006b96 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 0303 	and.w	r3, r3, #3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 80a4 	beq.w	8006b96 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a62:	4013      	ands	r3, r2
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a92:	4013      	ands	r3, r2
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006aa0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	6a3a      	ldr	r2, [r7, #32]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006ab8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006ae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f8f1 	bl	8006cce <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f8f1 	bl	8006ce4 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	099b      	lsrs	r3, r3, #6
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01a      	beq.n	8006b44 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	099b      	lsrs	r3, r3, #6
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d014      	beq.n	8006b44 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b20:	0c1b      	lsrs	r3, r3, #16
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b30:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2240      	movs	r2, #64	; 0x40
 8006b38:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	6939      	ldr	r1, [r7, #16]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f8db 	bl	8006cfa <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b50:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006b52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f8dc 	bl	8006d12 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	6a3a      	ldr	r2, [r7, #32]
 8006b66:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f87f 	bl	8006ca4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006ba6:	bf00      	nop
 8006ba8:	3758      	adds	r7, #88	; 0x58
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	4000a800 	.word	0x4000a800
 8006bb4:	3fcfffff 	.word	0x3fcfffff
 8006bb8:	4000a000 	.word	0x4000a000

08006bbc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b085      	sub	sp, #20
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d34:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006d3e:	4ba7      	ldr	r3, [pc, #668]	; (8006fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	0091      	lsls	r1, r2, #2
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6812      	ldr	r2, [r2, #0]
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d58:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	041a      	lsls	r2, r3, #16
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	4413      	add	r3, r2
 8006d74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d7e:	4b97      	ldr	r3, [pc, #604]	; (8006fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	0091      	lsls	r1, r2, #2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6812      	ldr	r2, [r2, #0]
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d98:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da0:	041a      	lsls	r2, r3, #16
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	4413      	add	r3, r2
 8006db6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006dc0:	4b86      	ldr	r3, [pc, #536]	; (8006fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	0091      	lsls	r1, r2, #2
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6812      	ldr	r2, [r2, #0]
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dda:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	041a      	lsls	r2, r3, #16
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006df6:	fb02 f303 	mul.w	r3, r2, r3
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006e08:	4b74      	ldr	r3, [pc, #464]	; (8006fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	0091      	lsls	r1, r2, #2
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	430b      	orrs	r3, r1
 8006e16:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2a:	041a      	lsls	r2, r3, #16
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006e3e:	fb02 f303 	mul.w	r3, r2, r3
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	4413      	add	r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006e50:	4b62      	ldr	r3, [pc, #392]	; (8006fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	0091      	lsls	r1, r2, #2
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6812      	ldr	r2, [r2, #0]
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	4413      	add	r3, r2
 8006e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006e7c:	4b57      	ldr	r3, [pc, #348]	; (8006fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e7e:	4013      	ands	r3, r2
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	0091      	lsls	r1, r2, #2
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e96:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9e:	041a      	lsls	r2, r3, #16
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006ebe:	4b47      	ldr	r3, [pc, #284]	; (8006fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	0091      	lsls	r1, r2, #2
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6812      	ldr	r2, [r2, #0]
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ed8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee0:	041a      	lsls	r2, r3, #16
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ef4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efc:	061a      	lsls	r2, r3, #24
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f0c:	4b34      	ldr	r3, [pc, #208]	; (8006fe0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006f0e:	4413      	add	r3, r2
 8006f10:	009a      	lsls	r2, r3, #2
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	441a      	add	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	441a      	add	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006f42:	fb01 f303 	mul.w	r3, r1, r3
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	441a      	add	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006f5a:	fb01 f303 	mul.w	r3, r1, r3
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	441a      	add	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	441a      	add	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006fa2:	fb01 f303 	mul.w	r3, r1, r3
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	441a      	add	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	441a      	add	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	4a04      	ldr	r2, [pc, #16]	; (8006fe4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d915      	bls.n	8007004 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006fd8:	e006      	b.n	8006fe8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006fda:	bf00      	nop
 8006fdc:	ffff0003 	.word	0xffff0003
 8006fe0:	10002b00 	.word	0x10002b00
 8006fe4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fee:	f043 0220 	orr.w	r2, r3, #32
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e010      	b.n	8007026 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e005      	b.n	8007018 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3304      	adds	r3, #4
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	429a      	cmp	r2, r3
 8007022:	d3f3      	bcc.n	800700c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop

08007034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007034:	b480      	push	{r7}
 8007036:	b089      	sub	sp, #36	; 0x24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800703e:	2300      	movs	r3, #0
 8007040:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007042:	4b89      	ldr	r3, [pc, #548]	; (8007268 <HAL_GPIO_Init+0x234>)
 8007044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007046:	e194      	b.n	8007372 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	2101      	movs	r1, #1
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	fa01 f303 	lsl.w	r3, r1, r3
 8007054:	4013      	ands	r3, r2
 8007056:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 8186 	beq.w	800736c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	2b01      	cmp	r3, #1
 800706a:	d005      	beq.n	8007078 <HAL_GPIO_Init+0x44>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d130      	bne.n	80070da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	2203      	movs	r2, #3
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	43db      	mvns	r3, r3
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	4013      	ands	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	fa02 f303 	lsl.w	r3, r2, r3
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	4313      	orrs	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070ae:	2201      	movs	r2, #1
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	fa02 f303 	lsl.w	r3, r2, r3
 80070b6:	43db      	mvns	r3, r3
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	4013      	ands	r3, r2
 80070bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	091b      	lsrs	r3, r3, #4
 80070c4:	f003 0201 	and.w	r2, r3, #1
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d017      	beq.n	8007116 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	2203      	movs	r2, #3
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	43db      	mvns	r3, r3
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	4013      	ands	r3, r2
 80070fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	fa02 f303 	lsl.w	r3, r2, r3
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	4313      	orrs	r3, r2
 800710e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d123      	bne.n	800716a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	08da      	lsrs	r2, r3, #3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3208      	adds	r2, #8
 800712a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	220f      	movs	r2, #15
 800713a:	fa02 f303 	lsl.w	r3, r2, r3
 800713e:	43db      	mvns	r3, r3
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	4013      	ands	r3, r2
 8007144:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	691a      	ldr	r2, [r3, #16]
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	4313      	orrs	r3, r2
 800715a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	08da      	lsrs	r2, r3, #3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3208      	adds	r2, #8
 8007164:	69b9      	ldr	r1, [r7, #24]
 8007166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	2203      	movs	r2, #3
 8007176:	fa02 f303 	lsl.w	r3, r2, r3
 800717a:	43db      	mvns	r3, r3
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	4013      	ands	r3, r2
 8007180:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f003 0203 	and.w	r2, r3, #3
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	fa02 f303 	lsl.w	r3, r2, r3
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	4313      	orrs	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 80e0 	beq.w	800736c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ac:	4b2f      	ldr	r3, [pc, #188]	; (800726c <HAL_GPIO_Init+0x238>)
 80071ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071b2:	4a2e      	ldr	r2, [pc, #184]	; (800726c <HAL_GPIO_Init+0x238>)
 80071b4:	f043 0302 	orr.w	r3, r3, #2
 80071b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80071bc:	4b2b      	ldr	r3, [pc, #172]	; (800726c <HAL_GPIO_Init+0x238>)
 80071be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071ca:	4a29      	ldr	r2, [pc, #164]	; (8007270 <HAL_GPIO_Init+0x23c>)
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	089b      	lsrs	r3, r3, #2
 80071d0:	3302      	adds	r3, #2
 80071d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	220f      	movs	r2, #15
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	43db      	mvns	r3, r3
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	4013      	ands	r3, r2
 80071ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a20      	ldr	r2, [pc, #128]	; (8007274 <HAL_GPIO_Init+0x240>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d052      	beq.n	800729c <HAL_GPIO_Init+0x268>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a1f      	ldr	r2, [pc, #124]	; (8007278 <HAL_GPIO_Init+0x244>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d031      	beq.n	8007262 <HAL_GPIO_Init+0x22e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a1e      	ldr	r2, [pc, #120]	; (800727c <HAL_GPIO_Init+0x248>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d02b      	beq.n	800725e <HAL_GPIO_Init+0x22a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <HAL_GPIO_Init+0x24c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d025      	beq.n	800725a <HAL_GPIO_Init+0x226>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a1c      	ldr	r2, [pc, #112]	; (8007284 <HAL_GPIO_Init+0x250>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d01f      	beq.n	8007256 <HAL_GPIO_Init+0x222>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <HAL_GPIO_Init+0x254>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d019      	beq.n	8007252 <HAL_GPIO_Init+0x21e>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a1a      	ldr	r2, [pc, #104]	; (800728c <HAL_GPIO_Init+0x258>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <HAL_GPIO_Init+0x21a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a19      	ldr	r2, [pc, #100]	; (8007290 <HAL_GPIO_Init+0x25c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d00d      	beq.n	800724a <HAL_GPIO_Init+0x216>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a18      	ldr	r2, [pc, #96]	; (8007294 <HAL_GPIO_Init+0x260>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d007      	beq.n	8007246 <HAL_GPIO_Init+0x212>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a17      	ldr	r2, [pc, #92]	; (8007298 <HAL_GPIO_Init+0x264>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d101      	bne.n	8007242 <HAL_GPIO_Init+0x20e>
 800723e:	2309      	movs	r3, #9
 8007240:	e02d      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007242:	230a      	movs	r3, #10
 8007244:	e02b      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007246:	2308      	movs	r3, #8
 8007248:	e029      	b.n	800729e <HAL_GPIO_Init+0x26a>
 800724a:	2307      	movs	r3, #7
 800724c:	e027      	b.n	800729e <HAL_GPIO_Init+0x26a>
 800724e:	2306      	movs	r3, #6
 8007250:	e025      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007252:	2305      	movs	r3, #5
 8007254:	e023      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007256:	2304      	movs	r3, #4
 8007258:	e021      	b.n	800729e <HAL_GPIO_Init+0x26a>
 800725a:	2303      	movs	r3, #3
 800725c:	e01f      	b.n	800729e <HAL_GPIO_Init+0x26a>
 800725e:	2302      	movs	r3, #2
 8007260:	e01d      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007262:	2301      	movs	r3, #1
 8007264:	e01b      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007266:	bf00      	nop
 8007268:	58000080 	.word	0x58000080
 800726c:	58024400 	.word	0x58024400
 8007270:	58000400 	.word	0x58000400
 8007274:	58020000 	.word	0x58020000
 8007278:	58020400 	.word	0x58020400
 800727c:	58020800 	.word	0x58020800
 8007280:	58020c00 	.word	0x58020c00
 8007284:	58021000 	.word	0x58021000
 8007288:	58021400 	.word	0x58021400
 800728c:	58021800 	.word	0x58021800
 8007290:	58021c00 	.word	0x58021c00
 8007294:	58022000 	.word	0x58022000
 8007298:	58022400 	.word	0x58022400
 800729c:	2300      	movs	r3, #0
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	f002 0203 	and.w	r2, r2, #3
 80072a4:	0092      	lsls	r2, r2, #2
 80072a6:	4093      	lsls	r3, r2
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072ae:	4938      	ldr	r1, [pc, #224]	; (8007390 <HAL_GPIO_Init+0x35c>)
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	089b      	lsrs	r3, r3, #2
 80072b4:	3302      	adds	r3, #2
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	43db      	mvns	r3, r3
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	4013      	ands	r3, r2
 80072cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80072e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80072ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	43db      	mvns	r3, r3
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	4013      	ands	r3, r2
 80072fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	43db      	mvns	r3, r3
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	4013      	ands	r3, r2
 8007326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	43db      	mvns	r3, r3
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	4013      	ands	r3, r2
 8007350:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	3301      	adds	r3, #1
 8007370:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	f47f ae63 	bne.w	8007048 <HAL_GPIO_Init+0x14>
  }
}
 8007382:	bf00      	nop
 8007384:	bf00      	nop
 8007386:	3724      	adds	r7, #36	; 0x24
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	58000400 	.word	0x58000400

08007394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	807b      	strh	r3, [r7, #2]
 80073a0:	4613      	mov	r3, r2
 80073a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073a4:	787b      	ldrb	r3, [r7, #1]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073aa:	887a      	ldrh	r2, [r7, #2]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80073b0:	e003      	b.n	80073ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80073b2:	887b      	ldrh	r3, [r7, #2]
 80073b4:	041a      	lsls	r2, r3, #16
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	619a      	str	r2, [r3, #24]
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b085      	sub	sp, #20
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80073d8:	887a      	ldrh	r2, [r7, #2]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4013      	ands	r3, r2
 80073de:	041a      	lsls	r2, r3, #16
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	43d9      	mvns	r1, r3
 80073e4:	887b      	ldrh	r3, [r7, #2]
 80073e6:	400b      	ands	r3, r1
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	619a      	str	r2, [r3, #24]
}
 80073ee:	bf00      	nop
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	4603      	mov	r3, r0
 8007402:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007408:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	4013      	ands	r3, r2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800741e:	88fb      	ldrh	r3, [r7, #6]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f804 	bl	800742e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	4603      	mov	r3, r0
 8007436:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007446:	b08f      	sub	sp, #60	; 0x3c
 8007448:	af0a      	add	r7, sp, #40	; 0x28
 800744a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e054      	b.n	8007500 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7fd fe27 	bl	80050c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2203      	movs	r2, #3
 800747a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d102      	bne.n	8007490 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f004 fcb7 	bl	800be08 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	687e      	ldr	r6, [r7, #4]
 80074a2:	466d      	mov	r5, sp
 80074a4:	f106 0410 	add.w	r4, r6, #16
 80074a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80074b8:	1d33      	adds	r3, r6, #4
 80074ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074bc:	6838      	ldr	r0, [r7, #0]
 80074be:	f004 fc35 	bl	800bd2c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2101      	movs	r1, #1
 80074c8:	4618      	mov	r0, r3
 80074ca:	f004 fcae 	bl	800be2a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	687e      	ldr	r6, [r7, #4]
 80074d6:	466d      	mov	r5, sp
 80074d8:	f106 0410 	add.w	r4, r6, #16
 80074dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80074ec:	1d33      	adds	r3, r6, #4
 80074ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074f0:	6838      	ldr	r0, [r7, #0]
 80074f2:	f004 fd8d 	bl	800c010 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007508 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007510:	4b19      	ldr	r3, [pc, #100]	; (8007578 <HAL_PWREx_ConfigSupply+0x70>)
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b04      	cmp	r3, #4
 800751a:	d00a      	beq.n	8007532 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800751c:	4b16      	ldr	r3, [pc, #88]	; (8007578 <HAL_PWREx_ConfigSupply+0x70>)
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0307 	and.w	r3, r3, #7
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	429a      	cmp	r2, r3
 8007528:	d001      	beq.n	800752e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e01f      	b.n	800756e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	e01d      	b.n	800756e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007532:	4b11      	ldr	r3, [pc, #68]	; (8007578 <HAL_PWREx_ConfigSupply+0x70>)
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f023 0207 	bic.w	r2, r3, #7
 800753a:	490f      	ldr	r1, [pc, #60]	; (8007578 <HAL_PWREx_ConfigSupply+0x70>)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4313      	orrs	r3, r2
 8007540:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007542:	f7fe f87f 	bl	8005644 <HAL_GetTick>
 8007546:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007548:	e009      	b.n	800755e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800754a:	f7fe f87b 	bl	8005644 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007558:	d901      	bls.n	800755e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e007      	b.n	800756e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800755e:	4b06      	ldr	r3, [pc, #24]	; (8007578 <HAL_PWREx_ConfigSupply+0x70>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800756a:	d1ee      	bne.n	800754a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	58024800 	.word	0x58024800

0800757c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	4a04      	ldr	r2, [pc, #16]	; (8007598 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800758a:	60d3      	str	r3, [r2, #12]
}
 800758c:	bf00      	nop
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	58024800 	.word	0x58024800

0800759c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b08c      	sub	sp, #48	; 0x30
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d102      	bne.n	80075b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	f000 bc1d 	b.w	8007dea <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8087 	beq.w	80076cc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075be:	4b99      	ldr	r3, [pc, #612]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075c8:	4b96      	ldr	r3, [pc, #600]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d007      	beq.n	80075e4 <HAL_RCC_OscConfig+0x48>
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	2b18      	cmp	r3, #24
 80075d8:	d110      	bne.n	80075fc <HAL_RCC_OscConfig+0x60>
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d10b      	bne.n	80075fc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e4:	4b8f      	ldr	r3, [pc, #572]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d06c      	beq.n	80076ca <HAL_RCC_OscConfig+0x12e>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d168      	bne.n	80076ca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e3f6      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007604:	d106      	bne.n	8007614 <HAL_RCC_OscConfig+0x78>
 8007606:	4b87      	ldr	r3, [pc, #540]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a86      	ldr	r2, [pc, #536]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800760c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	e02e      	b.n	8007672 <HAL_RCC_OscConfig+0xd6>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10c      	bne.n	8007636 <HAL_RCC_OscConfig+0x9a>
 800761c:	4b81      	ldr	r3, [pc, #516]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a80      	ldr	r2, [pc, #512]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	4b7e      	ldr	r3, [pc, #504]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a7d      	ldr	r2, [pc, #500]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800762e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	e01d      	b.n	8007672 <HAL_RCC_OscConfig+0xd6>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800763e:	d10c      	bne.n	800765a <HAL_RCC_OscConfig+0xbe>
 8007640:	4b78      	ldr	r3, [pc, #480]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a77      	ldr	r2, [pc, #476]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	4b75      	ldr	r3, [pc, #468]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a74      	ldr	r2, [pc, #464]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	e00b      	b.n	8007672 <HAL_RCC_OscConfig+0xd6>
 800765a:	4b72      	ldr	r3, [pc, #456]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a71      	ldr	r2, [pc, #452]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	4b6f      	ldr	r3, [pc, #444]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a6e      	ldr	r2, [pc, #440]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800766c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007670:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d013      	beq.n	80076a2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767a:	f7fd ffe3 	bl	8005644 <HAL_GetTick>
 800767e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007680:	e008      	b.n	8007694 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007682:	f7fd ffdf 	bl	8005644 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	2b64      	cmp	r3, #100	; 0x64
 800768e:	d901      	bls.n	8007694 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e3aa      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007694:	4b63      	ldr	r3, [pc, #396]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0f0      	beq.n	8007682 <HAL_RCC_OscConfig+0xe6>
 80076a0:	e014      	b.n	80076cc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a2:	f7fd ffcf 	bl	8005644 <HAL_GetTick>
 80076a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076a8:	e008      	b.n	80076bc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076aa:	f7fd ffcb 	bl	8005644 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b64      	cmp	r3, #100	; 0x64
 80076b6:	d901      	bls.n	80076bc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e396      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076bc:	4b59      	ldr	r3, [pc, #356]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1f0      	bne.n	80076aa <HAL_RCC_OscConfig+0x10e>
 80076c8:	e000      	b.n	80076cc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 80cb 	beq.w	8007870 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076da:	4b52      	ldr	r3, [pc, #328]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076e2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076e4:	4b4f      	ldr	r3, [pc, #316]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d007      	beq.n	8007700 <HAL_RCC_OscConfig+0x164>
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	2b18      	cmp	r3, #24
 80076f4:	d156      	bne.n	80077a4 <HAL_RCC_OscConfig+0x208>
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d151      	bne.n	80077a4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007700:	4b48      	ldr	r3, [pc, #288]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <HAL_RCC_OscConfig+0x17c>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e368      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007718:	4b42      	ldr	r3, [pc, #264]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f023 0219 	bic.w	r2, r3, #25
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	493f      	ldr	r1, [pc, #252]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007726:	4313      	orrs	r3, r2
 8007728:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800772a:	f7fd ff8b 	bl	8005644 <HAL_GetTick>
 800772e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007730:	e008      	b.n	8007744 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007732:	f7fd ff87 	bl	8005644 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d901      	bls.n	8007744 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e352      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007744:	4b37      	ldr	r3, [pc, #220]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d0f0      	beq.n	8007732 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007750:	f7fd ffa8 	bl	80056a4 <HAL_GetREVID>
 8007754:	4603      	mov	r3, r0
 8007756:	f241 0203 	movw	r2, #4099	; 0x1003
 800775a:	4293      	cmp	r3, r2
 800775c:	d817      	bhi.n	800778e <HAL_RCC_OscConfig+0x1f2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d108      	bne.n	8007778 <HAL_RCC_OscConfig+0x1dc>
 8007766:	4b2f      	ldr	r3, [pc, #188]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800776e:	4a2d      	ldr	r2, [pc, #180]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007774:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007776:	e07b      	b.n	8007870 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007778:	4b2a      	ldr	r3, [pc, #168]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	031b      	lsls	r3, r3, #12
 8007786:	4927      	ldr	r1, [pc, #156]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007788:	4313      	orrs	r3, r2
 800778a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800778c:	e070      	b.n	8007870 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800778e:	4b25      	ldr	r3, [pc, #148]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	061b      	lsls	r3, r3, #24
 800779c:	4921      	ldr	r1, [pc, #132]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077a2:	e065      	b.n	8007870 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d048      	beq.n	800783e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80077ac:	4b1d      	ldr	r3, [pc, #116]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f023 0219 	bic.w	r2, r3, #25
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	491a      	ldr	r1, [pc, #104]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077be:	f7fd ff41 	bl	8005644 <HAL_GetTick>
 80077c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077c4:	e008      	b.n	80077d8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077c6:	f7fd ff3d 	bl	8005644 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d901      	bls.n	80077d8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e308      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077d8:	4b12      	ldr	r3, [pc, #72]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0f0      	beq.n	80077c6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077e4:	f7fd ff5e 	bl	80056a4 <HAL_GetREVID>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d81a      	bhi.n	8007828 <HAL_RCC_OscConfig+0x28c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d108      	bne.n	800780c <HAL_RCC_OscConfig+0x270>
 80077fa:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007802:	4a08      	ldr	r2, [pc, #32]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 8007804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007808:	6053      	str	r3, [r2, #4]
 800780a:	e031      	b.n	8007870 <HAL_RCC_OscConfig+0x2d4>
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	031b      	lsls	r3, r3, #12
 800781a:	4902      	ldr	r1, [pc, #8]	; (8007824 <HAL_RCC_OscConfig+0x288>)
 800781c:	4313      	orrs	r3, r2
 800781e:	604b      	str	r3, [r1, #4]
 8007820:	e026      	b.n	8007870 <HAL_RCC_OscConfig+0x2d4>
 8007822:	bf00      	nop
 8007824:	58024400 	.word	0x58024400
 8007828:	4b9a      	ldr	r3, [pc, #616]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	061b      	lsls	r3, r3, #24
 8007836:	4997      	ldr	r1, [pc, #604]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007838:	4313      	orrs	r3, r2
 800783a:	604b      	str	r3, [r1, #4]
 800783c:	e018      	b.n	8007870 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800783e:	4b95      	ldr	r3, [pc, #596]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a94      	ldr	r2, [pc, #592]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007844:	f023 0301 	bic.w	r3, r3, #1
 8007848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784a:	f7fd fefb 	bl	8005644 <HAL_GetTick>
 800784e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007850:	e008      	b.n	8007864 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007852:	f7fd fef7 	bl	8005644 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d901      	bls.n	8007864 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e2c2      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007864:	4b8b      	ldr	r3, [pc, #556]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1f0      	bne.n	8007852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 80a9 	beq.w	80079d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800787e:	4b85      	ldr	r3, [pc, #532]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007886:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007888:	4b82      	ldr	r3, [pc, #520]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2b08      	cmp	r3, #8
 8007892:	d007      	beq.n	80078a4 <HAL_RCC_OscConfig+0x308>
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b18      	cmp	r3, #24
 8007898:	d13a      	bne.n	8007910 <HAL_RCC_OscConfig+0x374>
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d135      	bne.n	8007910 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078a4:	4b7b      	ldr	r3, [pc, #492]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <HAL_RCC_OscConfig+0x320>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	2b80      	cmp	r3, #128	; 0x80
 80078b6:	d001      	beq.n	80078bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e296      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078bc:	f7fd fef2 	bl	80056a4 <HAL_GetREVID>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d817      	bhi.n	80078fa <HAL_RCC_OscConfig+0x35e>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	d108      	bne.n	80078e4 <HAL_RCC_OscConfig+0x348>
 80078d2:	4b70      	ldr	r3, [pc, #448]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80078da:	4a6e      	ldr	r2, [pc, #440]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 80078dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078e2:	e075      	b.n	80079d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078e4:	4b6b      	ldr	r3, [pc, #428]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	069b      	lsls	r3, r3, #26
 80078f2:	4968      	ldr	r1, [pc, #416]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078f8:	e06a      	b.n	80079d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078fa:	4b66      	ldr	r3, [pc, #408]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	061b      	lsls	r3, r3, #24
 8007908:	4962      	ldr	r1, [pc, #392]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 800790a:	4313      	orrs	r3, r2
 800790c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800790e:	e05f      	b.n	80079d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d042      	beq.n	800799e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007918:	4b5e      	ldr	r3, [pc, #376]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a5d      	ldr	r2, [pc, #372]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 800791e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007924:	f7fd fe8e 	bl	8005644 <HAL_GetTick>
 8007928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800792a:	e008      	b.n	800793e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800792c:	f7fd fe8a 	bl	8005644 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b02      	cmp	r3, #2
 8007938:	d901      	bls.n	800793e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e255      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800793e:	4b55      	ldr	r3, [pc, #340]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f0      	beq.n	800792c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800794a:	f7fd feab 	bl	80056a4 <HAL_GetREVID>
 800794e:	4603      	mov	r3, r0
 8007950:	f241 0203 	movw	r2, #4099	; 0x1003
 8007954:	4293      	cmp	r3, r2
 8007956:	d817      	bhi.n	8007988 <HAL_RCC_OscConfig+0x3ec>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	2b20      	cmp	r3, #32
 800795e:	d108      	bne.n	8007972 <HAL_RCC_OscConfig+0x3d6>
 8007960:	4b4c      	ldr	r3, [pc, #304]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007968:	4a4a      	ldr	r2, [pc, #296]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 800796a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800796e:	6053      	str	r3, [r2, #4]
 8007970:	e02e      	b.n	80079d0 <HAL_RCC_OscConfig+0x434>
 8007972:	4b48      	ldr	r3, [pc, #288]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	069b      	lsls	r3, r3, #26
 8007980:	4944      	ldr	r1, [pc, #272]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007982:	4313      	orrs	r3, r2
 8007984:	604b      	str	r3, [r1, #4]
 8007986:	e023      	b.n	80079d0 <HAL_RCC_OscConfig+0x434>
 8007988:	4b42      	ldr	r3, [pc, #264]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	061b      	lsls	r3, r3, #24
 8007996:	493f      	ldr	r1, [pc, #252]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007998:	4313      	orrs	r3, r2
 800799a:	60cb      	str	r3, [r1, #12]
 800799c:	e018      	b.n	80079d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800799e:	4b3d      	ldr	r3, [pc, #244]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a3c      	ldr	r2, [pc, #240]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 80079a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079aa:	f7fd fe4b 	bl	8005644 <HAL_GetTick>
 80079ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079b0:	e008      	b.n	80079c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80079b2:	f7fd fe47 	bl	8005644 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e212      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079c4:	4b33      	ldr	r3, [pc, #204]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1f0      	bne.n	80079b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0308 	and.w	r3, r3, #8
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d036      	beq.n	8007a4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d019      	beq.n	8007a18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079e4:	4b2b      	ldr	r3, [pc, #172]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 80079e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e8:	4a2a      	ldr	r2, [pc, #168]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f0:	f7fd fe28 	bl	8005644 <HAL_GetTick>
 80079f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079f8:	f7fd fe24 	bl	8005644 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e1ef      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a0a:	4b22      	ldr	r3, [pc, #136]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f0      	beq.n	80079f8 <HAL_RCC_OscConfig+0x45c>
 8007a16:	e018      	b.n	8007a4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a18:	4b1e      	ldr	r3, [pc, #120]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a1c:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007a1e:	f023 0301 	bic.w	r3, r3, #1
 8007a22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a24:	f7fd fe0e 	bl	8005644 <HAL_GetTick>
 8007a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a2c:	f7fd fe0a 	bl	8005644 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e1d5      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a3e:	4b15      	ldr	r3, [pc, #84]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1f0      	bne.n	8007a2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d039      	beq.n	8007aca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01c      	beq.n	8007a98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a0c      	ldr	r2, [pc, #48]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a6a:	f7fd fdeb 	bl	8005644 <HAL_GetTick>
 8007a6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a70:	e008      	b.n	8007a84 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007a72:	f7fd fde7 	bl	8005644 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e1b2      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a84:	4b03      	ldr	r3, [pc, #12]	; (8007a94 <HAL_RCC_OscConfig+0x4f8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0f0      	beq.n	8007a72 <HAL_RCC_OscConfig+0x4d6>
 8007a90:	e01b      	b.n	8007aca <HAL_RCC_OscConfig+0x52e>
 8007a92:	bf00      	nop
 8007a94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a98:	4b9b      	ldr	r3, [pc, #620]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a9a      	ldr	r2, [pc, #616]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aa2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007aa4:	f7fd fdce 	bl	8005644 <HAL_GetTick>
 8007aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007aaa:	e008      	b.n	8007abe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007aac:	f7fd fdca 	bl	8005644 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e195      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007abe:	4b92      	ldr	r3, [pc, #584]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1f0      	bne.n	8007aac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 8081 	beq.w	8007bda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ad8:	4b8c      	ldr	r3, [pc, #560]	; (8007d0c <HAL_RCC_OscConfig+0x770>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a8b      	ldr	r2, [pc, #556]	; (8007d0c <HAL_RCC_OscConfig+0x770>)
 8007ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ae4:	f7fd fdae 	bl	8005644 <HAL_GetTick>
 8007ae8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aea:	e008      	b.n	8007afe <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007aec:	f7fd fdaa 	bl	8005644 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b64      	cmp	r3, #100	; 0x64
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e175      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007afe:	4b83      	ldr	r3, [pc, #524]	; (8007d0c <HAL_RCC_OscConfig+0x770>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0f0      	beq.n	8007aec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d106      	bne.n	8007b20 <HAL_RCC_OscConfig+0x584>
 8007b12:	4b7d      	ldr	r3, [pc, #500]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b16:	4a7c      	ldr	r2, [pc, #496]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b18:	f043 0301 	orr.w	r3, r3, #1
 8007b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b1e:	e02d      	b.n	8007b7c <HAL_RCC_OscConfig+0x5e0>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10c      	bne.n	8007b42 <HAL_RCC_OscConfig+0x5a6>
 8007b28:	4b77      	ldr	r3, [pc, #476]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2c:	4a76      	ldr	r2, [pc, #472]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b2e:	f023 0301 	bic.w	r3, r3, #1
 8007b32:	6713      	str	r3, [r2, #112]	; 0x70
 8007b34:	4b74      	ldr	r3, [pc, #464]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b38:	4a73      	ldr	r2, [pc, #460]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b3a:	f023 0304 	bic.w	r3, r3, #4
 8007b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b40:	e01c      	b.n	8007b7c <HAL_RCC_OscConfig+0x5e0>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2b05      	cmp	r3, #5
 8007b48:	d10c      	bne.n	8007b64 <HAL_RCC_OscConfig+0x5c8>
 8007b4a:	4b6f      	ldr	r3, [pc, #444]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4e:	4a6e      	ldr	r2, [pc, #440]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b50:	f043 0304 	orr.w	r3, r3, #4
 8007b54:	6713      	str	r3, [r2, #112]	; 0x70
 8007b56:	4b6c      	ldr	r3, [pc, #432]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5a:	4a6b      	ldr	r2, [pc, #428]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b5c:	f043 0301 	orr.w	r3, r3, #1
 8007b60:	6713      	str	r3, [r2, #112]	; 0x70
 8007b62:	e00b      	b.n	8007b7c <HAL_RCC_OscConfig+0x5e0>
 8007b64:	4b68      	ldr	r3, [pc, #416]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b68:	4a67      	ldr	r2, [pc, #412]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b6a:	f023 0301 	bic.w	r3, r3, #1
 8007b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b70:	4b65      	ldr	r3, [pc, #404]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b74:	4a64      	ldr	r2, [pc, #400]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007b76:	f023 0304 	bic.w	r3, r3, #4
 8007b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d015      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b84:	f7fd fd5e 	bl	8005644 <HAL_GetTick>
 8007b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b8a:	e00a      	b.n	8007ba2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b8c:	f7fd fd5a 	bl	8005644 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e123      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ba2:	4b59      	ldr	r3, [pc, #356]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0ee      	beq.n	8007b8c <HAL_RCC_OscConfig+0x5f0>
 8007bae:	e014      	b.n	8007bda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb0:	f7fd fd48 	bl	8005644 <HAL_GetTick>
 8007bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bb6:	e00a      	b.n	8007bce <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bb8:	f7fd fd44 	bl	8005644 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d901      	bls.n	8007bce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e10d      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bce:	4b4e      	ldr	r3, [pc, #312]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1ee      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8102 	beq.w	8007de8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007be4:	4b48      	ldr	r3, [pc, #288]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bec:	2b18      	cmp	r3, #24
 8007bee:	f000 80bd 	beq.w	8007d6c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	f040 809e 	bne.w	8007d38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bfc:	4b42      	ldr	r3, [pc, #264]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a41      	ldr	r2, [pc, #260]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c08:	f7fd fd1c 	bl	8005644 <HAL_GetTick>
 8007c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c10:	f7fd fd18 	bl	8005644 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e0e3      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c22:	4b39      	ldr	r3, [pc, #228]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1f0      	bne.n	8007c10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c2e:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c32:	4b37      	ldr	r3, [pc, #220]	; (8007d10 <HAL_RCC_OscConfig+0x774>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007c3e:	0112      	lsls	r2, r2, #4
 8007c40:	430a      	orrs	r2, r1
 8007c42:	4931      	ldr	r1, [pc, #196]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	628b      	str	r3, [r1, #40]	; 0x28
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c56:	3b01      	subs	r3, #1
 8007c58:	025b      	lsls	r3, r3, #9
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	3b01      	subs	r3, #1
 8007c64:	041b      	lsls	r3, r3, #16
 8007c66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c70:	3b01      	subs	r3, #1
 8007c72:	061b      	lsls	r3, r3, #24
 8007c74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c78:	4923      	ldr	r1, [pc, #140]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007c7e:	4b22      	ldr	r3, [pc, #136]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	4a21      	ldr	r2, [pc, #132]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007c84:	f023 0301 	bic.w	r3, r3, #1
 8007c88:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c8a:	4b1f      	ldr	r3, [pc, #124]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c8e:	4b21      	ldr	r3, [pc, #132]	; (8007d14 <HAL_RCC_OscConfig+0x778>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007c96:	00d2      	lsls	r2, r2, #3
 8007c98:	491b      	ldr	r1, [pc, #108]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c9e:	4b1a      	ldr	r3, [pc, #104]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca2:	f023 020c 	bic.w	r2, r3, #12
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	4917      	ldr	r1, [pc, #92]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007cb0:	4b15      	ldr	r3, [pc, #84]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	f023 0202 	bic.w	r2, r3, #2
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cbc:	4912      	ldr	r1, [pc, #72]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007cc2:	4b11      	ldr	r3, [pc, #68]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	4a10      	ldr	r2, [pc, #64]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cce:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	4a0d      	ldr	r2, [pc, #52]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007cda:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	4a0a      	ldr	r2, [pc, #40]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007ce6:	4b08      	ldr	r3, [pc, #32]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	4a07      	ldr	r2, [pc, #28]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007cec:	f043 0301 	orr.w	r3, r3, #1
 8007cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cf2:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a04      	ldr	r2, [pc, #16]	; (8007d08 <HAL_RCC_OscConfig+0x76c>)
 8007cf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfe:	f7fd fca1 	bl	8005644 <HAL_GetTick>
 8007d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d04:	e011      	b.n	8007d2a <HAL_RCC_OscConfig+0x78e>
 8007d06:	bf00      	nop
 8007d08:	58024400 	.word	0x58024400
 8007d0c:	58024800 	.word	0x58024800
 8007d10:	fffffc0c 	.word	0xfffffc0c
 8007d14:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d18:	f7fd fc94 	bl	8005644 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d901      	bls.n	8007d2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e05f      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d2a:	4b32      	ldr	r3, [pc, #200]	; (8007df4 <HAL_RCC_OscConfig+0x858>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0f0      	beq.n	8007d18 <HAL_RCC_OscConfig+0x77c>
 8007d36:	e057      	b.n	8007de8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d38:	4b2e      	ldr	r3, [pc, #184]	; (8007df4 <HAL_RCC_OscConfig+0x858>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a2d      	ldr	r2, [pc, #180]	; (8007df4 <HAL_RCC_OscConfig+0x858>)
 8007d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d44:	f7fd fc7e 	bl	8005644 <HAL_GetTick>
 8007d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d4c:	f7fd fc7a 	bl	8005644 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e045      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d5e:	4b25      	ldr	r3, [pc, #148]	; (8007df4 <HAL_RCC_OscConfig+0x858>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f0      	bne.n	8007d4c <HAL_RCC_OscConfig+0x7b0>
 8007d6a:	e03d      	b.n	8007de8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007d6c:	4b21      	ldr	r3, [pc, #132]	; (8007df4 <HAL_RCC_OscConfig+0x858>)
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007d72:	4b20      	ldr	r3, [pc, #128]	; (8007df4 <HAL_RCC_OscConfig+0x858>)
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d031      	beq.n	8007de4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f003 0203 	and.w	r2, r3, #3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d12a      	bne.n	8007de4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	091b      	lsrs	r3, r3, #4
 8007d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d122      	bne.n	8007de4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d11a      	bne.n	8007de4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	0a5b      	lsrs	r3, r3, #9
 8007db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d111      	bne.n	8007de4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d108      	bne.n	8007de4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	0e1b      	lsrs	r3, r3, #24
 8007dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dde:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d001      	beq.n	8007de8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e000      	b.n	8007dea <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3730      	adds	r7, #48	; 0x30
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	58024400 	.word	0x58024400

08007df8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e19c      	b.n	8008146 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e0c:	4b8a      	ldr	r3, [pc, #552]	; (8008038 <HAL_RCC_ClockConfig+0x240>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 030f 	and.w	r3, r3, #15
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d910      	bls.n	8007e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e1a:	4b87      	ldr	r3, [pc, #540]	; (8008038 <HAL_RCC_ClockConfig+0x240>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f023 020f 	bic.w	r2, r3, #15
 8007e22:	4985      	ldr	r1, [pc, #532]	; (8008038 <HAL_RCC_ClockConfig+0x240>)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e2a:	4b83      	ldr	r3, [pc, #524]	; (8008038 <HAL_RCC_ClockConfig+0x240>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d001      	beq.n	8007e3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e184      	b.n	8008146 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d010      	beq.n	8007e6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691a      	ldr	r2, [r3, #16]
 8007e4c:	4b7b      	ldr	r3, [pc, #492]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d908      	bls.n	8007e6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e58:	4b78      	ldr	r3, [pc, #480]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	4975      	ldr	r1, [pc, #468]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0308 	and.w	r3, r3, #8
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d010      	beq.n	8007e98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	695a      	ldr	r2, [r3, #20]
 8007e7a:	4b70      	ldr	r3, [pc, #448]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d908      	bls.n	8007e98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e86:	4b6d      	ldr	r3, [pc, #436]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	496a      	ldr	r1, [pc, #424]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0310 	and.w	r3, r3, #16
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d010      	beq.n	8007ec6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	699a      	ldr	r2, [r3, #24]
 8007ea8:	4b64      	ldr	r3, [pc, #400]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d908      	bls.n	8007ec6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007eb4:	4b61      	ldr	r3, [pc, #388]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	495e      	ldr	r1, [pc, #376]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d010      	beq.n	8007ef4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	69da      	ldr	r2, [r3, #28]
 8007ed6:	4b59      	ldr	r3, [pc, #356]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d908      	bls.n	8007ef4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ee2:	4b56      	ldr	r3, [pc, #344]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	4953      	ldr	r1, [pc, #332]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d010      	beq.n	8007f22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	4b4d      	ldr	r3, [pc, #308]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	f003 030f 	and.w	r3, r3, #15
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d908      	bls.n	8007f22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f10:	4b4a      	ldr	r3, [pc, #296]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	f023 020f 	bic.w	r2, r3, #15
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	4947      	ldr	r1, [pc, #284]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d055      	beq.n	8007fda <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007f2e:	4b43      	ldr	r3, [pc, #268]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	4940      	ldr	r1, [pc, #256]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d107      	bne.n	8007f58 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f48:	4b3c      	ldr	r3, [pc, #240]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d121      	bne.n	8007f98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e0f6      	b.n	8008146 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d107      	bne.n	8007f70 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f60:	4b36      	ldr	r3, [pc, #216]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d115      	bne.n	8007f98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e0ea      	b.n	8008146 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d107      	bne.n	8007f88 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f78:	4b30      	ldr	r3, [pc, #192]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d109      	bne.n	8007f98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e0de      	b.n	8008146 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f88:	4b2c      	ldr	r3, [pc, #176]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e0d6      	b.n	8008146 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f98:	4b28      	ldr	r3, [pc, #160]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f023 0207 	bic.w	r2, r3, #7
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	4925      	ldr	r1, [pc, #148]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007faa:	f7fd fb4b 	bl	8005644 <HAL_GetTick>
 8007fae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fb0:	e00a      	b.n	8007fc8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fb2:	f7fd fb47 	bl	8005644 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e0be      	b.n	8008146 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fc8:	4b1c      	ldr	r3, [pc, #112]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d1eb      	bne.n	8007fb2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d010      	beq.n	8008008 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	4b14      	ldr	r3, [pc, #80]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d208      	bcs.n	8008008 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ff6:	4b11      	ldr	r3, [pc, #68]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f023 020f 	bic.w	r2, r3, #15
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	490e      	ldr	r1, [pc, #56]	; (800803c <HAL_RCC_ClockConfig+0x244>)
 8008004:	4313      	orrs	r3, r2
 8008006:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008008:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <HAL_RCC_ClockConfig+0x240>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d214      	bcs.n	8008040 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008016:	4b08      	ldr	r3, [pc, #32]	; (8008038 <HAL_RCC_ClockConfig+0x240>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f023 020f 	bic.w	r2, r3, #15
 800801e:	4906      	ldr	r1, [pc, #24]	; (8008038 <HAL_RCC_ClockConfig+0x240>)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	4313      	orrs	r3, r2
 8008024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008026:	4b04      	ldr	r3, [pc, #16]	; (8008038 <HAL_RCC_ClockConfig+0x240>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d005      	beq.n	8008040 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e086      	b.n	8008146 <HAL_RCC_ClockConfig+0x34e>
 8008038:	52002000 	.word	0x52002000
 800803c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d010      	beq.n	800806e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	4b3f      	ldr	r3, [pc, #252]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008058:	429a      	cmp	r2, r3
 800805a:	d208      	bcs.n	800806e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800805c:	4b3c      	ldr	r3, [pc, #240]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	4939      	ldr	r1, [pc, #228]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 800806a:	4313      	orrs	r3, r2
 800806c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d010      	beq.n	800809c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	4b34      	ldr	r3, [pc, #208]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008086:	429a      	cmp	r2, r3
 8008088:	d208      	bcs.n	800809c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800808a:	4b31      	ldr	r3, [pc, #196]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	492e      	ldr	r1, [pc, #184]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 8008098:	4313      	orrs	r3, r2
 800809a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d010      	beq.n	80080ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699a      	ldr	r2, [r3, #24]
 80080ac:	4b28      	ldr	r3, [pc, #160]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d208      	bcs.n	80080ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080b8:	4b25      	ldr	r3, [pc, #148]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	4922      	ldr	r1, [pc, #136]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d010      	beq.n	80080f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69da      	ldr	r2, [r3, #28]
 80080da:	4b1d      	ldr	r3, [pc, #116]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d208      	bcs.n	80080f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80080e6:	4b1a      	ldr	r3, [pc, #104]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	4917      	ldr	r1, [pc, #92]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80080f8:	f000 f834 	bl	8008164 <HAL_RCC_GetSysClockFreq>
 80080fc:	4602      	mov	r2, r0
 80080fe:	4b14      	ldr	r3, [pc, #80]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	0a1b      	lsrs	r3, r3, #8
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	4912      	ldr	r1, [pc, #72]	; (8008154 <HAL_RCC_ClockConfig+0x35c>)
 800810a:	5ccb      	ldrb	r3, [r1, r3]
 800810c:	f003 031f 	and.w	r3, r3, #31
 8008110:	fa22 f303 	lsr.w	r3, r2, r3
 8008114:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008116:	4b0e      	ldr	r3, [pc, #56]	; (8008150 <HAL_RCC_ClockConfig+0x358>)
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f003 030f 	and.w	r3, r3, #15
 800811e:	4a0d      	ldr	r2, [pc, #52]	; (8008154 <HAL_RCC_ClockConfig+0x35c>)
 8008120:	5cd3      	ldrb	r3, [r2, r3]
 8008122:	f003 031f 	and.w	r3, r3, #31
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	fa22 f303 	lsr.w	r3, r2, r3
 800812c:	4a0a      	ldr	r2, [pc, #40]	; (8008158 <HAL_RCC_ClockConfig+0x360>)
 800812e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008130:	4a0a      	ldr	r2, [pc, #40]	; (800815c <HAL_RCC_ClockConfig+0x364>)
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008136:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <HAL_RCC_ClockConfig+0x368>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4618      	mov	r0, r3
 800813c:	f7fd f82c 	bl	8005198 <HAL_InitTick>
 8008140:	4603      	mov	r3, r0
 8008142:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008144:	7bfb      	ldrb	r3, [r7, #15]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	58024400 	.word	0x58024400
 8008154:	0800ccf8 	.word	0x0800ccf8
 8008158:	24000014 	.word	0x24000014
 800815c:	24000010 	.word	0x24000010
 8008160:	24000018 	.word	0x24000018

08008164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008164:	b480      	push	{r7}
 8008166:	b089      	sub	sp, #36	; 0x24
 8008168:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800816a:	4bb3      	ldr	r3, [pc, #716]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008172:	2b18      	cmp	r3, #24
 8008174:	f200 8155 	bhi.w	8008422 <HAL_RCC_GetSysClockFreq+0x2be>
 8008178:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <HAL_RCC_GetSysClockFreq+0x1c>)
 800817a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817e:	bf00      	nop
 8008180:	080081e5 	.word	0x080081e5
 8008184:	08008423 	.word	0x08008423
 8008188:	08008423 	.word	0x08008423
 800818c:	08008423 	.word	0x08008423
 8008190:	08008423 	.word	0x08008423
 8008194:	08008423 	.word	0x08008423
 8008198:	08008423 	.word	0x08008423
 800819c:	08008423 	.word	0x08008423
 80081a0:	0800820b 	.word	0x0800820b
 80081a4:	08008423 	.word	0x08008423
 80081a8:	08008423 	.word	0x08008423
 80081ac:	08008423 	.word	0x08008423
 80081b0:	08008423 	.word	0x08008423
 80081b4:	08008423 	.word	0x08008423
 80081b8:	08008423 	.word	0x08008423
 80081bc:	08008423 	.word	0x08008423
 80081c0:	08008211 	.word	0x08008211
 80081c4:	08008423 	.word	0x08008423
 80081c8:	08008423 	.word	0x08008423
 80081cc:	08008423 	.word	0x08008423
 80081d0:	08008423 	.word	0x08008423
 80081d4:	08008423 	.word	0x08008423
 80081d8:	08008423 	.word	0x08008423
 80081dc:	08008423 	.word	0x08008423
 80081e0:	08008217 	.word	0x08008217
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081e4:	4b94      	ldr	r3, [pc, #592]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d009      	beq.n	8008204 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081f0:	4b91      	ldr	r3, [pc, #580]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	08db      	lsrs	r3, r3, #3
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	4a90      	ldr	r2, [pc, #576]	; (800843c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008200:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008202:	e111      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008204:	4b8d      	ldr	r3, [pc, #564]	; (800843c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008206:	61bb      	str	r3, [r7, #24]
    break;
 8008208:	e10e      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800820a:	4b8d      	ldr	r3, [pc, #564]	; (8008440 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800820c:	61bb      	str	r3, [r7, #24]
    break;
 800820e:	e10b      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008210:	4b8c      	ldr	r3, [pc, #560]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008212:	61bb      	str	r3, [r7, #24]
    break;
 8008214:	e108      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008216:	4b88      	ldr	r3, [pc, #544]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008220:	4b85      	ldr	r3, [pc, #532]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008224:	091b      	lsrs	r3, r3, #4
 8008226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800822a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800822c:	4b82      	ldr	r3, [pc, #520]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008236:	4b80      	ldr	r3, [pc, #512]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823a:	08db      	lsrs	r3, r3, #3
 800823c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	fb02 f303 	mul.w	r3, r2, r3
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 80e1 	beq.w	800841c <HAL_RCC_GetSysClockFreq+0x2b8>
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b02      	cmp	r3, #2
 800825e:	f000 8083 	beq.w	8008368 <HAL_RCC_GetSysClockFreq+0x204>
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b02      	cmp	r3, #2
 8008266:	f200 80a1 	bhi.w	80083ac <HAL_RCC_GetSysClockFreq+0x248>
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <HAL_RCC_GetSysClockFreq+0x114>
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d056      	beq.n	8008324 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008276:	e099      	b.n	80083ac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008278:	4b6f      	ldr	r3, [pc, #444]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	d02d      	beq.n	80082e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008284:	4b6c      	ldr	r3, [pc, #432]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	08db      	lsrs	r3, r3, #3
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	4a6b      	ldr	r2, [pc, #428]	; (800843c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008290:	fa22 f303 	lsr.w	r3, r2, r3
 8008294:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	ee07 3a90 	vmov	s15, r3
 800829c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	ee07 3a90 	vmov	s15, r3
 80082a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ae:	4b62      	ldr	r3, [pc, #392]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082be:	ed97 6a02 	vldr	s12, [r7, #8]
 80082c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008448 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80082de:	e087      	b.n	80083f0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800844c <HAL_RCC_GetSysClockFreq+0x2e8>
 80082ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f2:	4b51      	ldr	r3, [pc, #324]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008302:	ed97 6a02 	vldr	s12, [r7, #8]
 8008306:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008448 <HAL_RCC_GetSysClockFreq+0x2e4>
 800830a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800830e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008322:	e065      	b.n	80083f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008450 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008336:	4b40      	ldr	r3, [pc, #256]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008346:	ed97 6a02 	vldr	s12, [r7, #8]
 800834a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008448 <HAL_RCC_GetSysClockFreq+0x2e4>
 800834e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800835a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008366:	e043      	b.n	80083f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008372:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008454 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837a:	4b2f      	ldr	r3, [pc, #188]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800837c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838a:	ed97 6a02 	vldr	s12, [r7, #8]
 800838e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008448 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800839e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083aa:	e021      	b.n	80083f0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008450 <HAL_RCC_GetSysClockFreq+0x2ec>
 80083ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083be:	4b1e      	ldr	r3, [pc, #120]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80083d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008448 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80083f0:	4b11      	ldr	r3, [pc, #68]	; (8008438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f4:	0a5b      	lsrs	r3, r3, #9
 80083f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083fa:	3301      	adds	r3, #1
 80083fc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	ee07 3a90 	vmov	s15, r3
 8008404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008408:	edd7 6a07 	vldr	s13, [r7, #28]
 800840c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008414:	ee17 3a90 	vmov	r3, s15
 8008418:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800841a:	e005      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	61bb      	str	r3, [r7, #24]
    break;
 8008420:	e002      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008422:	4b07      	ldr	r3, [pc, #28]	; (8008440 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008424:	61bb      	str	r3, [r7, #24]
    break;
 8008426:	bf00      	nop
  }

  return sysclockfreq;
 8008428:	69bb      	ldr	r3, [r7, #24]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3724      	adds	r7, #36	; 0x24
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	58024400 	.word	0x58024400
 800843c:	03d09000 	.word	0x03d09000
 8008440:	003d0900 	.word	0x003d0900
 8008444:	007a1200 	.word	0x007a1200
 8008448:	46000000 	.word	0x46000000
 800844c:	4c742400 	.word	0x4c742400
 8008450:	4a742400 	.word	0x4a742400
 8008454:	4af42400 	.word	0x4af42400

08008458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800845e:	f7ff fe81 	bl	8008164 <HAL_RCC_GetSysClockFreq>
 8008462:	4602      	mov	r2, r0
 8008464:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	0a1b      	lsrs	r3, r3, #8
 800846a:	f003 030f 	and.w	r3, r3, #15
 800846e:	490f      	ldr	r1, [pc, #60]	; (80084ac <HAL_RCC_GetHCLKFreq+0x54>)
 8008470:	5ccb      	ldrb	r3, [r1, r3]
 8008472:	f003 031f 	and.w	r3, r3, #31
 8008476:	fa22 f303 	lsr.w	r3, r2, r3
 800847a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800847c:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	4a09      	ldr	r2, [pc, #36]	; (80084ac <HAL_RCC_GetHCLKFreq+0x54>)
 8008486:	5cd3      	ldrb	r3, [r2, r3]
 8008488:	f003 031f 	and.w	r3, r3, #31
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	fa22 f303 	lsr.w	r3, r2, r3
 8008492:	4a07      	ldr	r2, [pc, #28]	; (80084b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008494:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008496:	4a07      	ldr	r2, [pc, #28]	; (80084b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800849c:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800849e:	681b      	ldr	r3, [r3, #0]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	58024400 	.word	0x58024400
 80084ac:	0800ccf8 	.word	0x0800ccf8
 80084b0:	24000014 	.word	0x24000014
 80084b4:	24000010 	.word	0x24000010

080084b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80084bc:	f7ff ffcc 	bl	8008458 <HAL_RCC_GetHCLKFreq>
 80084c0:	4602      	mov	r2, r0
 80084c2:	4b06      	ldr	r3, [pc, #24]	; (80084dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	091b      	lsrs	r3, r3, #4
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	4904      	ldr	r1, [pc, #16]	; (80084e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80084ce:	5ccb      	ldrb	r3, [r1, r3]
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80084d8:	4618      	mov	r0, r3
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	58024400 	.word	0x58024400
 80084e0:	0800ccf8 	.word	0x0800ccf8

080084e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80084e8:	f7ff ffb6 	bl	8008458 <HAL_RCC_GetHCLKFreq>
 80084ec:	4602      	mov	r2, r0
 80084ee:	4b06      	ldr	r3, [pc, #24]	; (8008508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	0a1b      	lsrs	r3, r3, #8
 80084f4:	f003 0307 	and.w	r3, r3, #7
 80084f8:	4904      	ldr	r1, [pc, #16]	; (800850c <HAL_RCC_GetPCLK2Freq+0x28>)
 80084fa:	5ccb      	ldrb	r3, [r1, r3]
 80084fc:	f003 031f 	and.w	r3, r3, #31
 8008500:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008504:	4618      	mov	r0, r3
 8008506:	bd80      	pop	{r7, pc}
 8008508:	58024400 	.word	0x58024400
 800850c:	0800ccf8 	.word	0x0800ccf8

08008510 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	223f      	movs	r2, #63	; 0x3f
 800851e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008520:	4b1a      	ldr	r3, [pc, #104]	; (800858c <HAL_RCC_GetClockConfig+0x7c>)
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f003 0207 	and.w	r2, r3, #7
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800852c:	4b17      	ldr	r3, [pc, #92]	; (800858c <HAL_RCC_GetClockConfig+0x7c>)
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008538:	4b14      	ldr	r3, [pc, #80]	; (800858c <HAL_RCC_GetClockConfig+0x7c>)
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	f003 020f 	and.w	r2, r3, #15
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008544:	4b11      	ldr	r3, [pc, #68]	; (800858c <HAL_RCC_GetClockConfig+0x7c>)
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008550:	4b0e      	ldr	r3, [pc, #56]	; (800858c <HAL_RCC_GetClockConfig+0x7c>)
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800855c:	4b0b      	ldr	r3, [pc, #44]	; (800858c <HAL_RCC_GetClockConfig+0x7c>)
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008568:	4b08      	ldr	r3, [pc, #32]	; (800858c <HAL_RCC_GetClockConfig+0x7c>)
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008574:	4b06      	ldr	r3, [pc, #24]	; (8008590 <HAL_RCC_GetClockConfig+0x80>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 020f 	and.w	r2, r3, #15
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	601a      	str	r2, [r3, #0]
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	58024400 	.word	0x58024400
 8008590:	52002000 	.word	0x52002000

08008594 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800859c:	2300      	movs	r3, #0
 800859e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085a0:	2300      	movs	r3, #0
 80085a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d03f      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085b8:	d02a      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80085ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085be:	d824      	bhi.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80085c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085c4:	d018      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80085c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085ca:	d81e      	bhi.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80085d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085d4:	d007      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80085d6:	e018      	b.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085d8:	4ba3      	ldr	r3, [pc, #652]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	4aa2      	ldr	r2, [pc, #648]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80085e4:	e015      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3304      	adds	r3, #4
 80085ea:	2102      	movs	r1, #2
 80085ec:	4618      	mov	r0, r3
 80085ee:	f001 f9d5 	bl	800999c <RCCEx_PLL2_Config>
 80085f2:	4603      	mov	r3, r0
 80085f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80085f6:	e00c      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3324      	adds	r3, #36	; 0x24
 80085fc:	2102      	movs	r1, #2
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 fa7e 	bl	8009b00 <RCCEx_PLL3_Config>
 8008604:	4603      	mov	r3, r0
 8008606:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008608:	e003      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	75fb      	strb	r3, [r7, #23]
      break;
 800860e:	e000      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008612:	7dfb      	ldrb	r3, [r7, #23]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d109      	bne.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008618:	4b93      	ldr	r3, [pc, #588]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800861a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008624:	4990      	ldr	r1, [pc, #576]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008626:	4313      	orrs	r3, r2
 8008628:	650b      	str	r3, [r1, #80]	; 0x50
 800862a:	e001      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008638:	2b00      	cmp	r3, #0
 800863a:	d03d      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008640:	2b04      	cmp	r3, #4
 8008642:	d826      	bhi.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008644:	a201      	add	r2, pc, #4	; (adr r2, 800864c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864a:	bf00      	nop
 800864c:	08008661 	.word	0x08008661
 8008650:	0800866f 	.word	0x0800866f
 8008654:	08008681 	.word	0x08008681
 8008658:	08008699 	.word	0x08008699
 800865c:	08008699 	.word	0x08008699
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008660:	4b81      	ldr	r3, [pc, #516]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	4a80      	ldr	r2, [pc, #512]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800866a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800866c:	e015      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3304      	adds	r3, #4
 8008672:	2100      	movs	r1, #0
 8008674:	4618      	mov	r0, r3
 8008676:	f001 f991 	bl	800999c <RCCEx_PLL2_Config>
 800867a:	4603      	mov	r3, r0
 800867c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800867e:	e00c      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3324      	adds	r3, #36	; 0x24
 8008684:	2100      	movs	r1, #0
 8008686:	4618      	mov	r0, r3
 8008688:	f001 fa3a 	bl	8009b00 <RCCEx_PLL3_Config>
 800868c:	4603      	mov	r3, r0
 800868e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008690:	e003      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	75fb      	strb	r3, [r7, #23]
      break;
 8008696:	e000      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d109      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086a0:	4b71      	ldr	r3, [pc, #452]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a4:	f023 0207 	bic.w	r2, r3, #7
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ac:	496e      	ldr	r1, [pc, #440]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	650b      	str	r3, [r1, #80]	; 0x50
 80086b2:	e001      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d042      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086cc:	d02b      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80086ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d2:	d825      	bhi.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80086d4:	2bc0      	cmp	r3, #192	; 0xc0
 80086d6:	d028      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80086d8:	2bc0      	cmp	r3, #192	; 0xc0
 80086da:	d821      	bhi.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80086dc:	2b80      	cmp	r3, #128	; 0x80
 80086de:	d016      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80086e0:	2b80      	cmp	r3, #128	; 0x80
 80086e2:	d81d      	bhi.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80086e8:	2b40      	cmp	r3, #64	; 0x40
 80086ea:	d007      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80086ec:	e018      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086ee:	4b5e      	ldr	r3, [pc, #376]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	4a5d      	ldr	r2, [pc, #372]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80086fa:	e017      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	3304      	adds	r3, #4
 8008700:	2100      	movs	r1, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f001 f94a 	bl	800999c <RCCEx_PLL2_Config>
 8008708:	4603      	mov	r3, r0
 800870a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800870c:	e00e      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3324      	adds	r3, #36	; 0x24
 8008712:	2100      	movs	r1, #0
 8008714:	4618      	mov	r0, r3
 8008716:	f001 f9f3 	bl	8009b00 <RCCEx_PLL3_Config>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800871e:	e005      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	75fb      	strb	r3, [r7, #23]
      break;
 8008724:	e002      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008726:	bf00      	nop
 8008728:	e000      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800872a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008732:	4b4d      	ldr	r3, [pc, #308]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008736:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873e:	494a      	ldr	r1, [pc, #296]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008740:	4313      	orrs	r3, r2
 8008742:	650b      	str	r3, [r1, #80]	; 0x50
 8008744:	e001      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008752:	2b00      	cmp	r3, #0
 8008754:	d049      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800875c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008760:	d030      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008762:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008766:	d82a      	bhi.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008768:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800876c:	d02c      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800876e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008772:	d824      	bhi.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008778:	d018      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800877a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800877e:	d81e      	bhi.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008784:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008788:	d007      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800878a:	e018      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878c:	4b36      	ldr	r3, [pc, #216]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	4a35      	ldr	r2, [pc, #212]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008798:	e017      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3304      	adds	r3, #4
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 f8fb 	bl	800999c <RCCEx_PLL2_Config>
 80087a6:	4603      	mov	r3, r0
 80087a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80087aa:	e00e      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3324      	adds	r3, #36	; 0x24
 80087b0:	2100      	movs	r1, #0
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 f9a4 	bl	8009b00 <RCCEx_PLL3_Config>
 80087b8:	4603      	mov	r3, r0
 80087ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087bc:	e005      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	75fb      	strb	r3, [r7, #23]
      break;
 80087c2:	e002      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80087c4:	bf00      	nop
 80087c6:	e000      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80087c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10a      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80087d0:	4b25      	ldr	r3, [pc, #148]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087de:	4922      	ldr	r1, [pc, #136]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	658b      	str	r3, [r1, #88]	; 0x58
 80087e4:	e001      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d04b      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80087fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008800:	d030      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008806:	d82a      	bhi.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008808:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800880c:	d02e      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800880e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008812:	d824      	bhi.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008818:	d018      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800881a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800881e:	d81e      	bhi.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008828:	d007      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800882a:	e018      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800882c:	4b0e      	ldr	r3, [pc, #56]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	4a0d      	ldr	r2, [pc, #52]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008838:	e019      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	3304      	adds	r3, #4
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f001 f8ab 	bl	800999c <RCCEx_PLL2_Config>
 8008846:	4603      	mov	r3, r0
 8008848:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800884a:	e010      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3324      	adds	r3, #36	; 0x24
 8008850:	2100      	movs	r1, #0
 8008852:	4618      	mov	r0, r3
 8008854:	f001 f954 	bl	8009b00 <RCCEx_PLL3_Config>
 8008858:	4603      	mov	r3, r0
 800885a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800885c:	e007      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	75fb      	strb	r3, [r7, #23]
      break;
 8008862:	e004      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008864:	bf00      	nop
 8008866:	e002      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008868:	58024400 	.word	0x58024400
      break;
 800886c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10a      	bne.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008874:	4b99      	ldr	r3, [pc, #612]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008878:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008882:	4996      	ldr	r1, [pc, #600]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008884:	4313      	orrs	r3, r2
 8008886:	658b      	str	r3, [r1, #88]	; 0x58
 8008888:	e001      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800888a:	7dfb      	ldrb	r3, [r7, #23]
 800888c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d032      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800889e:	2b30      	cmp	r3, #48	; 0x30
 80088a0:	d01c      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80088a2:	2b30      	cmp	r3, #48	; 0x30
 80088a4:	d817      	bhi.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	d00c      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d813      	bhi.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d016      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80088b2:	2b10      	cmp	r3, #16
 80088b4:	d10f      	bne.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b6:	4b89      	ldr	r3, [pc, #548]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	4a88      	ldr	r2, [pc, #544]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80088c2:	e00e      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3304      	adds	r3, #4
 80088c8:	2102      	movs	r1, #2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f001 f866 	bl	800999c <RCCEx_PLL2_Config>
 80088d0:	4603      	mov	r3, r0
 80088d2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80088d4:	e005      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	75fb      	strb	r3, [r7, #23]
      break;
 80088da:	e002      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80088dc:	bf00      	nop
 80088de:	e000      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80088e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d109      	bne.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80088e8:	4b7c      	ldr	r3, [pc, #496]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088f4:	4979      	ldr	r1, [pc, #484]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80088fa:	e001      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
 80088fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d047      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008914:	d030      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800891a:	d82a      	bhi.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800891c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008920:	d02c      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008926:	d824      	bhi.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800892c:	d018      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800892e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008932:	d81e      	bhi.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800893c:	d007      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800893e:	e018      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008940:	4b66      	ldr	r3, [pc, #408]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	4a65      	ldr	r2, [pc, #404]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800894a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800894c:	e017      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	3304      	adds	r3, #4
 8008952:	2100      	movs	r1, #0
 8008954:	4618      	mov	r0, r3
 8008956:	f001 f821 	bl	800999c <RCCEx_PLL2_Config>
 800895a:	4603      	mov	r3, r0
 800895c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800895e:	e00e      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3324      	adds	r3, #36	; 0x24
 8008964:	2100      	movs	r1, #0
 8008966:	4618      	mov	r0, r3
 8008968:	f001 f8ca 	bl	8009b00 <RCCEx_PLL3_Config>
 800896c:	4603      	mov	r3, r0
 800896e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008970:	e005      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	75fb      	strb	r3, [r7, #23]
      break;
 8008976:	e002      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008978:	bf00      	nop
 800897a:	e000      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800897c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d109      	bne.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008984:	4b55      	ldr	r3, [pc, #340]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008988:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008990:	4952      	ldr	r1, [pc, #328]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008992:	4313      	orrs	r3, r2
 8008994:	650b      	str	r3, [r1, #80]	; 0x50
 8008996:	e001      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d049      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089b0:	d02e      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80089b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089b6:	d828      	bhi.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80089b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089bc:	d02a      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80089be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089c2:	d822      	bhi.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80089c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80089c8:	d026      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80089ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80089ce:	d81c      	bhi.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80089d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089d4:	d010      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80089d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089da:	d816      	bhi.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01d      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x488>
 80089e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e4:	d111      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3304      	adds	r3, #4
 80089ea:	2101      	movs	r1, #1
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 ffd5 	bl	800999c <RCCEx_PLL2_Config>
 80089f2:	4603      	mov	r3, r0
 80089f4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80089f6:	e012      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3324      	adds	r3, #36	; 0x24
 80089fc:	2101      	movs	r1, #1
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 f87e 	bl	8009b00 <RCCEx_PLL3_Config>
 8008a04:	4603      	mov	r3, r0
 8008a06:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008a08:	e009      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a0e:	e006      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008a10:	bf00      	nop
 8008a12:	e004      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008a14:	bf00      	nop
 8008a16:	e002      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008a18:	bf00      	nop
 8008a1a:	e000      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d109      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008a24:	4b2d      	ldr	r3, [pc, #180]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a28:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a30:	492a      	ldr	r1, [pc, #168]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	650b      	str	r3, [r1, #80]	; 0x50
 8008a36:	e001      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d04d      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a52:	d02e      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a58:	d828      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5e:	d02a      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a64:	d822      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008a66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a6a:	d026      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008a6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a70:	d81c      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a76:	d010      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a7c:	d816      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d01d      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a86:	d111      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 ff84 	bl	800999c <RCCEx_PLL2_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008a98:	e012      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3324      	adds	r3, #36	; 0x24
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f001 f82d 	bl	8009b00 <RCCEx_PLL3_Config>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008aaa:	e009      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	75fb      	strb	r3, [r7, #23]
      break;
 8008ab0:	e006      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008ab2:	bf00      	nop
 8008ab4:	e004      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008ab6:	bf00      	nop
 8008ab8:	e002      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008aba:	bf00      	nop
 8008abc:	e000      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10c      	bne.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008ac6:	4b05      	ldr	r3, [pc, #20]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ad4:	4901      	ldr	r1, [pc, #4]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	658b      	str	r3, [r1, #88]	; 0x58
 8008ada:	e003      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d02f      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af8:	d00e      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008afe:	d814      	bhi.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d015      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b08:	d10f      	bne.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b0a:	4baf      	ldr	r3, [pc, #700]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	4aae      	ldr	r2, [pc, #696]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008b16:	e00c      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 ff3c 	bl	800999c <RCCEx_PLL2_Config>
 8008b24:	4603      	mov	r3, r0
 8008b26:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008b28:	e003      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b2e:	e000      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b32:	7dfb      	ldrb	r3, [r7, #23]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d109      	bne.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008b38:	4ba3      	ldr	r3, [pc, #652]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b44:	49a0      	ldr	r1, [pc, #640]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	650b      	str	r3, [r1, #80]	; 0x50
 8008b4a:	e001      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
 8008b4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d032      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d81b      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008b64:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008ba3 	.word	0x08008ba3
 8008b70:	08008b7d 	.word	0x08008b7d
 8008b74:	08008b8b 	.word	0x08008b8b
 8008b78:	08008ba3 	.word	0x08008ba3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b7c:	4b92      	ldr	r3, [pc, #584]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	4a91      	ldr	r2, [pc, #580]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008b88:	e00c      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	2102      	movs	r1, #2
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 ff03 	bl	800999c <RCCEx_PLL2_Config>
 8008b96:	4603      	mov	r3, r0
 8008b98:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008b9a:	e003      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba0:	e000      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d109      	bne.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008baa:	4b87      	ldr	r3, [pc, #540]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bae:	f023 0203 	bic.w	r2, r3, #3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb6:	4984      	ldr	r1, [pc, #528]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008bbc:	e001      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 8086 	beq.w	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bd0:	4b7e      	ldr	r3, [pc, #504]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a7d      	ldr	r2, [pc, #500]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008bdc:	f7fc fd32 	bl	8005644 <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008be2:	e009      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008be4:	f7fc fd2e 	bl	8005644 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b64      	cmp	r3, #100	; 0x64
 8008bf0:	d902      	bls.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	75fb      	strb	r3, [r7, #23]
        break;
 8008bf6:	e005      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bf8:	4b74      	ldr	r3, [pc, #464]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0ef      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d166      	bne.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008c0a:	4b6f      	ldr	r3, [pc, #444]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c14:	4053      	eors	r3, r2
 8008c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d013      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c1e:	4b6a      	ldr	r3, [pc, #424]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c26:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c28:	4b67      	ldr	r3, [pc, #412]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2c:	4a66      	ldr	r2, [pc, #408]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c32:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c34:	4b64      	ldr	r3, [pc, #400]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c38:	4a63      	ldr	r2, [pc, #396]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c3e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008c40:	4a61      	ldr	r2, [pc, #388]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c50:	d115      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c52:	f7fc fcf7 	bl	8005644 <HAL_GetTick>
 8008c56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c58:	e00b      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c5a:	f7fc fcf3 	bl	8005644 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d902      	bls.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	75fb      	strb	r3, [r7, #23]
            break;
 8008c70:	e005      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c72:	4b55      	ldr	r3, [pc, #340]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0ed      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d126      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c92:	d10d      	bne.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008c94:	4b4c      	ldr	r3, [pc, #304]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ca2:	0919      	lsrs	r1, r3, #4
 8008ca4:	4b4a      	ldr	r3, [pc, #296]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008ca6:	400b      	ands	r3, r1
 8008ca8:	4947      	ldr	r1, [pc, #284]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	610b      	str	r3, [r1, #16]
 8008cae:	e005      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008cb0:	4b45      	ldr	r3, [pc, #276]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	4a44      	ldr	r2, [pc, #272]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008cba:	6113      	str	r3, [r2, #16]
 8008cbc:	4b42      	ldr	r3, [pc, #264]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cca:	493f      	ldr	r1, [pc, #252]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	670b      	str	r3, [r1, #112]	; 0x70
 8008cd0:	e004      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	75bb      	strb	r3, [r7, #22]
 8008cd6:	e001      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 8085 	beq.w	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cee:	2b28      	cmp	r3, #40	; 0x28
 8008cf0:	d866      	bhi.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008cf2:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008dd5 	.word	0x08008dd5
 8008cfc:	08008dc1 	.word	0x08008dc1
 8008d00:	08008dc1 	.word	0x08008dc1
 8008d04:	08008dc1 	.word	0x08008dc1
 8008d08:	08008dc1 	.word	0x08008dc1
 8008d0c:	08008dc1 	.word	0x08008dc1
 8008d10:	08008dc1 	.word	0x08008dc1
 8008d14:	08008dc1 	.word	0x08008dc1
 8008d18:	08008d9d 	.word	0x08008d9d
 8008d1c:	08008dc1 	.word	0x08008dc1
 8008d20:	08008dc1 	.word	0x08008dc1
 8008d24:	08008dc1 	.word	0x08008dc1
 8008d28:	08008dc1 	.word	0x08008dc1
 8008d2c:	08008dc1 	.word	0x08008dc1
 8008d30:	08008dc1 	.word	0x08008dc1
 8008d34:	08008dc1 	.word	0x08008dc1
 8008d38:	08008daf 	.word	0x08008daf
 8008d3c:	08008dc1 	.word	0x08008dc1
 8008d40:	08008dc1 	.word	0x08008dc1
 8008d44:	08008dc1 	.word	0x08008dc1
 8008d48:	08008dc1 	.word	0x08008dc1
 8008d4c:	08008dc1 	.word	0x08008dc1
 8008d50:	08008dc1 	.word	0x08008dc1
 8008d54:	08008dc1 	.word	0x08008dc1
 8008d58:	08008dd5 	.word	0x08008dd5
 8008d5c:	08008dc1 	.word	0x08008dc1
 8008d60:	08008dc1 	.word	0x08008dc1
 8008d64:	08008dc1 	.word	0x08008dc1
 8008d68:	08008dc1 	.word	0x08008dc1
 8008d6c:	08008dc1 	.word	0x08008dc1
 8008d70:	08008dc1 	.word	0x08008dc1
 8008d74:	08008dc1 	.word	0x08008dc1
 8008d78:	08008dd5 	.word	0x08008dd5
 8008d7c:	08008dc1 	.word	0x08008dc1
 8008d80:	08008dc1 	.word	0x08008dc1
 8008d84:	08008dc1 	.word	0x08008dc1
 8008d88:	08008dc1 	.word	0x08008dc1
 8008d8c:	08008dc1 	.word	0x08008dc1
 8008d90:	08008dc1 	.word	0x08008dc1
 8008d94:	08008dc1 	.word	0x08008dc1
 8008d98:	08008dd5 	.word	0x08008dd5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	2101      	movs	r1, #1
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 fdfa 	bl	800999c <RCCEx_PLL2_Config>
 8008da8:	4603      	mov	r3, r0
 8008daa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008dac:	e013      	b.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3324      	adds	r3, #36	; 0x24
 8008db2:	2101      	movs	r1, #1
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 fea3 	bl	8009b00 <RCCEx_PLL3_Config>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008dbe:	e00a      	b.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc4:	e007      	b.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008dc6:	bf00      	nop
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	58024800 	.word	0x58024800
 8008dd0:	00ffffcf 	.word	0x00ffffcf
      break;
 8008dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d109      	bne.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ddc:	4b96      	ldr	r3, [pc, #600]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008de8:	4993      	ldr	r1, [pc, #588]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	654b      	str	r3, [r1, #84]	; 0x54
 8008dee:	e001      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
 8008df2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0302 	and.w	r3, r3, #2
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d038      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e04:	2b05      	cmp	r3, #5
 8008e06:	d821      	bhi.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008e08:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e53 	.word	0x08008e53
 8008e14:	08008e29 	.word	0x08008e29
 8008e18:	08008e3b 	.word	0x08008e3b
 8008e1c:	08008e53 	.word	0x08008e53
 8008e20:	08008e53 	.word	0x08008e53
 8008e24:	08008e53 	.word	0x08008e53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fdb4 	bl	800999c <RCCEx_PLL2_Config>
 8008e34:	4603      	mov	r3, r0
 8008e36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008e38:	e00c      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	3324      	adds	r3, #36	; 0x24
 8008e3e:	2101      	movs	r1, #1
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 fe5d 	bl	8009b00 <RCCEx_PLL3_Config>
 8008e46:	4603      	mov	r3, r0
 8008e48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008e4a:	e003      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e50:	e000      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008e5a:	4b77      	ldr	r3, [pc, #476]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e5e:	f023 0207 	bic.w	r2, r3, #7
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e66:	4974      	ldr	r1, [pc, #464]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	654b      	str	r3, [r1, #84]	; 0x54
 8008e6c:	e001      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0304 	and.w	r3, r3, #4
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d03a      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e84:	2b05      	cmp	r3, #5
 8008e86:	d821      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008e88:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8e:	bf00      	nop
 8008e90:	08008ed3 	.word	0x08008ed3
 8008e94:	08008ea9 	.word	0x08008ea9
 8008e98:	08008ebb 	.word	0x08008ebb
 8008e9c:	08008ed3 	.word	0x08008ed3
 8008ea0:	08008ed3 	.word	0x08008ed3
 8008ea4:	08008ed3 	.word	0x08008ed3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	2101      	movs	r1, #1
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 fd74 	bl	800999c <RCCEx_PLL2_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008eb8:	e00c      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3324      	adds	r3, #36	; 0x24
 8008ebe:	2101      	movs	r1, #1
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fe1d 	bl	8009b00 <RCCEx_PLL3_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008eca:	e003      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed0:	e000      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10a      	bne.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008eda:	4b57      	ldr	r3, [pc, #348]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ede:	f023 0207 	bic.w	r2, r3, #7
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee8:	4953      	ldr	r1, [pc, #332]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	658b      	str	r3, [r1, #88]	; 0x58
 8008eee:	e001      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0320 	and.w	r3, r3, #32
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d04b      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f0a:	d02e      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f10:	d828      	bhi.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f16:	d02a      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f1c:	d822      	bhi.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008f1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f22:	d026      	beq.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008f24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f28:	d81c      	bhi.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f2e:	d010      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f34:	d816      	bhi.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d01d      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f3e:	d111      	bne.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3304      	adds	r3, #4
 8008f44:	2100      	movs	r1, #0
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 fd28 	bl	800999c <RCCEx_PLL2_Config>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008f50:	e012      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3324      	adds	r3, #36	; 0x24
 8008f56:	2102      	movs	r1, #2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fdd1 	bl	8009b00 <RCCEx_PLL3_Config>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008f62:	e009      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	75fb      	strb	r3, [r7, #23]
      break;
 8008f68:	e006      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008f6a:	bf00      	nop
 8008f6c:	e004      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008f6e:	bf00      	nop
 8008f70:	e002      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008f72:	bf00      	nop
 8008f74:	e000      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f7e:	4b2e      	ldr	r3, [pc, #184]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f82:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f8c:	492a      	ldr	r1, [pc, #168]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	654b      	str	r3, [r1, #84]	; 0x54
 8008f92:	e001      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
 8008f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d04d      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008faa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008fae:	d02e      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008fb0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008fb4:	d828      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fba:	d02a      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc0:	d822      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008fc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fc6:	d026      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008fc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fcc:	d81c      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fd2:	d010      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fd8:	d816      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d01d      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fe2:	d111      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 fcd6 	bl	800999c <RCCEx_PLL2_Config>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008ff4:	e012      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3324      	adds	r3, #36	; 0x24
 8008ffa:	2102      	movs	r1, #2
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f000 fd7f 	bl	8009b00 <RCCEx_PLL3_Config>
 8009002:	4603      	mov	r3, r0
 8009004:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009006:	e009      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	75fb      	strb	r3, [r7, #23]
      break;
 800900c:	e006      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800900e:	bf00      	nop
 8009010:	e004      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009012:	bf00      	nop
 8009014:	e002      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009016:	bf00      	nop
 8009018:	e000      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800901a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10c      	bne.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009022:	4b05      	ldr	r3, [pc, #20]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009026:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009030:	4901      	ldr	r1, [pc, #4]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009032:	4313      	orrs	r3, r2
 8009034:	658b      	str	r3, [r1, #88]	; 0x58
 8009036:	e003      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903c:	7dfb      	ldrb	r3, [r7, #23]
 800903e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009048:	2b00      	cmp	r3, #0
 800904a:	d04b      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009052:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009056:	d02e      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009058:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800905c:	d828      	bhi.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800905e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009062:	d02a      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009068:	d822      	bhi.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800906a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800906e:	d026      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009070:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009074:	d81c      	bhi.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800907a:	d010      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800907c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009080:	d816      	bhi.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009082:	2b00      	cmp	r3, #0
 8009084:	d01d      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800908a:	d111      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3304      	adds	r3, #4
 8009090:	2100      	movs	r1, #0
 8009092:	4618      	mov	r0, r3
 8009094:	f000 fc82 	bl	800999c <RCCEx_PLL2_Config>
 8009098:	4603      	mov	r3, r0
 800909a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800909c:	e012      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	3324      	adds	r3, #36	; 0x24
 80090a2:	2102      	movs	r1, #2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 fd2b 	bl	8009b00 <RCCEx_PLL3_Config>
 80090aa:	4603      	mov	r3, r0
 80090ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80090ae:	e009      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	75fb      	strb	r3, [r7, #23]
      break;
 80090b4:	e006      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80090b6:	bf00      	nop
 80090b8:	e004      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80090ba:	bf00      	nop
 80090bc:	e002      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80090be:	bf00      	nop
 80090c0:	e000      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80090c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10a      	bne.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80090ca:	4b9d      	ldr	r3, [pc, #628]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090d8:	4999      	ldr	r1, [pc, #612]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	658b      	str	r3, [r1, #88]	; 0x58
 80090de:	e001      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
 80090e2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0308 	and.w	r3, r3, #8
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d01a      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090fa:	d10a      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3324      	adds	r3, #36	; 0x24
 8009100:	2102      	movs	r1, #2
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fcfc 	bl	8009b00 <RCCEx_PLL3_Config>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009112:	4b8b      	ldr	r3, [pc, #556]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009116:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009120:	4987      	ldr	r1, [pc, #540]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009122:	4313      	orrs	r3, r2
 8009124:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0310 	and.w	r3, r3, #16
 800912e:	2b00      	cmp	r3, #0
 8009130:	d01a      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800913c:	d10a      	bne.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3324      	adds	r3, #36	; 0x24
 8009142:	2102      	movs	r1, #2
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fcdb 	bl	8009b00 <RCCEx_PLL3_Config>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009154:	4b7a      	ldr	r3, [pc, #488]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009162:	4977      	ldr	r1, [pc, #476]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009164:	4313      	orrs	r3, r2
 8009166:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d034      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800917a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800917e:	d01d      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009184:	d817      	bhi.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800918a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800918e:	d009      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009190:	e011      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3304      	adds	r3, #4
 8009196:	2100      	movs	r1, #0
 8009198:	4618      	mov	r0, r3
 800919a:	f000 fbff 	bl	800999c <RCCEx_PLL2_Config>
 800919e:	4603      	mov	r3, r0
 80091a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80091a2:	e00c      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3324      	adds	r3, #36	; 0x24
 80091a8:	2102      	movs	r1, #2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fca8 	bl	8009b00 <RCCEx_PLL3_Config>
 80091b0:	4603      	mov	r3, r0
 80091b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80091b4:	e003      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	75fb      	strb	r3, [r7, #23]
      break;
 80091ba:	e000      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80091bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091be:	7dfb      	ldrb	r3, [r7, #23]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10a      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80091c4:	4b5e      	ldr	r3, [pc, #376]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091d2:	495b      	ldr	r1, [pc, #364]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	658b      	str	r3, [r1, #88]	; 0x58
 80091d8:	e001      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d033      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091f4:	d01c      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80091f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091fa:	d816      	bhi.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80091fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009200:	d003      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009206:	d007      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009208:	e00f      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800920a:	4b4d      	ldr	r3, [pc, #308]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920e:	4a4c      	ldr	r2, [pc, #304]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009214:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009216:	e00c      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3324      	adds	r3, #36	; 0x24
 800921c:	2101      	movs	r1, #1
 800921e:	4618      	mov	r0, r3
 8009220:	f000 fc6e 	bl	8009b00 <RCCEx_PLL3_Config>
 8009224:	4603      	mov	r3, r0
 8009226:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009228:	e003      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	75fb      	strb	r3, [r7, #23]
      break;
 800922e:	e000      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10a      	bne.n	800924e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009238:	4b41      	ldr	r3, [pc, #260]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800923a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009246:	493e      	ldr	r1, [pc, #248]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009248:	4313      	orrs	r3, r2
 800924a:	654b      	str	r3, [r1, #84]	; 0x54
 800924c:	e001      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800925a:	2b00      	cmp	r3, #0
 800925c:	d029      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009262:	2b00      	cmp	r3, #0
 8009264:	d003      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800926a:	d007      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800926c:	e00f      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800926e:	4b34      	ldr	r3, [pc, #208]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009272:	4a33      	ldr	r2, [pc, #204]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009278:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800927a:	e00b      	b.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3304      	adds	r3, #4
 8009280:	2102      	movs	r1, #2
 8009282:	4618      	mov	r0, r3
 8009284:	f000 fb8a 	bl	800999c <RCCEx_PLL2_Config>
 8009288:	4603      	mov	r3, r0
 800928a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800928c:	e002      	b.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	75fb      	strb	r3, [r7, #23]
      break;
 8009292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009294:	7dfb      	ldrb	r3, [r7, #23]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d109      	bne.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800929a:	4b29      	ldr	r3, [pc, #164]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800929c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800929e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092a6:	4926      	ldr	r1, [pc, #152]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80092ac:	e001      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
 80092b0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3324      	adds	r3, #36	; 0x24
 80092c2:	2102      	movs	r1, #2
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 fc1b 	bl	8009b00 <RCCEx_PLL3_Config>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d033      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092e8:	d017      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80092ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092ee:	d811      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80092f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092f4:	d013      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80092f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092fa:	d80b      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d010      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009304:	d106      	bne.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009306:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	4a0d      	ldr	r2, [pc, #52]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800930c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009310:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009312:	e007      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	75fb      	strb	r3, [r7, #23]
      break;
 8009318:	e004      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800931a:	bf00      	nop
 800931c:	e002      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800931e:	bf00      	nop
 8009320:	e000      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10c      	bne.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800932a:	4b05      	ldr	r3, [pc, #20]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800932c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009336:	4902      	ldr	r1, [pc, #8]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009338:	4313      	orrs	r3, r2
 800933a:	654b      	str	r3, [r1, #84]	; 0x54
 800933c:	e004      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800933e:	bf00      	nop
 8009340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009344:	7dfb      	ldrb	r3, [r7, #23]
 8009346:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d008      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009354:	4b31      	ldr	r3, [pc, #196]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009358:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009360:	492e      	ldr	r1, [pc, #184]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009362:	4313      	orrs	r3, r2
 8009364:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d009      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009372:	4b2a      	ldr	r3, [pc, #168]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009380:	4926      	ldr	r1, [pc, #152]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009382:	4313      	orrs	r3, r2
 8009384:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d008      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009392:	4b22      	ldr	r3, [pc, #136]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009396:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800939e:	491f      	ldr	r1, [pc, #124]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00d      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80093b0:	4b1a      	ldr	r3, [pc, #104]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	4a19      	ldr	r2, [pc, #100]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093ba:	6113      	str	r3, [r2, #16]
 80093bc:	4b17      	ldr	r3, [pc, #92]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093be:	691a      	ldr	r2, [r3, #16]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80093c6:	4915      	ldr	r1, [pc, #84]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	da08      	bge.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80093d4:	4b11      	ldr	r3, [pc, #68]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e0:	490e      	ldr	r1, [pc, #56]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d009      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093f2:	4b0a      	ldr	r3, [pc, #40]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009400:	4906      	ldr	r1, [pc, #24]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009402:	4313      	orrs	r3, r2
 8009404:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009406:	7dbb      	ldrb	r3, [r7, #22]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	e000      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	58024400 	.word	0x58024400

08009420 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009424:	f7ff f818 	bl	8008458 <HAL_RCC_GetHCLKFreq>
 8009428:	4602      	mov	r2, r0
 800942a:	4b06      	ldr	r3, [pc, #24]	; (8009444 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	091b      	lsrs	r3, r3, #4
 8009430:	f003 0307 	and.w	r3, r3, #7
 8009434:	4904      	ldr	r1, [pc, #16]	; (8009448 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009436:	5ccb      	ldrb	r3, [r1, r3]
 8009438:	f003 031f 	and.w	r3, r3, #31
 800943c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009440:	4618      	mov	r0, r3
 8009442:	bd80      	pop	{r7, pc}
 8009444:	58024400 	.word	0x58024400
 8009448:	0800ccf8 	.word	0x0800ccf8

0800944c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800944c:	b480      	push	{r7}
 800944e:	b089      	sub	sp, #36	; 0x24
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009454:	4ba1      	ldr	r3, [pc, #644]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009458:	f003 0303 	and.w	r3, r3, #3
 800945c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800945e:	4b9f      	ldr	r3, [pc, #636]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009462:	0b1b      	lsrs	r3, r3, #12
 8009464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009468:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800946a:	4b9c      	ldr	r3, [pc, #624]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	091b      	lsrs	r3, r3, #4
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009476:	4b99      	ldr	r3, [pc, #612]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947a:	08db      	lsrs	r3, r3, #3
 800947c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	fb02 f303 	mul.w	r3, r2, r3
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 8111 	beq.w	80096bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	2b02      	cmp	r3, #2
 800949e:	f000 8083 	beq.w	80095a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	f200 80a1 	bhi.w	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d056      	beq.n	8009564 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80094b6:	e099      	b.n	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094b8:	4b88      	ldr	r3, [pc, #544]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0320 	and.w	r3, r3, #32
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d02d      	beq.n	8009520 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094c4:	4b85      	ldr	r3, [pc, #532]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	08db      	lsrs	r3, r3, #3
 80094ca:	f003 0303 	and.w	r3, r3, #3
 80094ce:	4a84      	ldr	r2, [pc, #528]	; (80096e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80094d0:	fa22 f303 	lsr.w	r3, r2, r3
 80094d4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	ee07 3a90 	vmov	s15, r3
 80094dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ee:	4b7b      	ldr	r3, [pc, #492]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009502:	eddf 5a78 	vldr	s11, [pc, #480]	; 80096e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800950e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800951e:	e087      	b.n	8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80096e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800952e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009532:	4b6a      	ldr	r3, [pc, #424]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953a:	ee07 3a90 	vmov	s15, r3
 800953e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009542:	ed97 6a03 	vldr	s12, [r7, #12]
 8009546:	eddf 5a67 	vldr	s11, [pc, #412]	; 80096e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800954a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800954e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800955a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800955e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009562:	e065      	b.n	8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80096ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009576:	4b59      	ldr	r3, [pc, #356]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009586:	ed97 6a03 	vldr	s12, [r7, #12]
 800958a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80096e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800958e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800959e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095a6:	e043      	b.n	8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	ee07 3a90 	vmov	s15, r3
 80095ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80096f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80095b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ba:	4b48      	ldr	r3, [pc, #288]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80096e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095ea:	e021      	b.n	8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	ee07 3a90 	vmov	s15, r3
 80095f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80096ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80095fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095fe:	4b37      	ldr	r3, [pc, #220]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800960e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009612:	eddf 5a34 	vldr	s11, [pc, #208]	; 80096e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800961e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800962e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009630:	4b2a      	ldr	r3, [pc, #168]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009634:	0a5b      	lsrs	r3, r3, #9
 8009636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800963a:	ee07 3a90 	vmov	s15, r3
 800963e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009646:	ee37 7a87 	vadd.f32	s14, s15, s14
 800964a:	edd7 6a07 	vldr	s13, [r7, #28]
 800964e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009656:	ee17 2a90 	vmov	r2, s15
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800965e:	4b1f      	ldr	r3, [pc, #124]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009662:	0c1b      	lsrs	r3, r3, #16
 8009664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009668:	ee07 3a90 	vmov	s15, r3
 800966c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009674:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009678:	edd7 6a07 	vldr	s13, [r7, #28]
 800967c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009684:	ee17 2a90 	vmov	r2, s15
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800968c:	4b13      	ldr	r3, [pc, #76]	; (80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	0e1b      	lsrs	r3, r3, #24
 8009692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80096aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096b2:	ee17 2a90 	vmov	r2, s15
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80096ba:	e008      	b.n	80096ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	609a      	str	r2, [r3, #8]
}
 80096ce:	bf00      	nop
 80096d0:	3724      	adds	r7, #36	; 0x24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	58024400 	.word	0x58024400
 80096e0:	03d09000 	.word	0x03d09000
 80096e4:	46000000 	.word	0x46000000
 80096e8:	4c742400 	.word	0x4c742400
 80096ec:	4a742400 	.word	0x4a742400
 80096f0:	4af42400 	.word	0x4af42400

080096f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b089      	sub	sp, #36	; 0x24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096fc:	4ba1      	ldr	r3, [pc, #644]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009700:	f003 0303 	and.w	r3, r3, #3
 8009704:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009706:	4b9f      	ldr	r3, [pc, #636]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970a:	0d1b      	lsrs	r3, r3, #20
 800970c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009710:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009712:	4b9c      	ldr	r3, [pc, #624]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	0a1b      	lsrs	r3, r3, #8
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800971e:	4b99      	ldr	r3, [pc, #612]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009722:	08db      	lsrs	r3, r3, #3
 8009724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	fb02 f303 	mul.w	r3, r2, r3
 800972e:	ee07 3a90 	vmov	s15, r3
 8009732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009736:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8111 	beq.w	8009964 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b02      	cmp	r3, #2
 8009746:	f000 8083 	beq.w	8009850 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	2b02      	cmp	r3, #2
 800974e:	f200 80a1 	bhi.w	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d003      	beq.n	8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d056      	beq.n	800980c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800975e:	e099      	b.n	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009760:	4b88      	ldr	r3, [pc, #544]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0320 	and.w	r3, r3, #32
 8009768:	2b00      	cmp	r3, #0
 800976a:	d02d      	beq.n	80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800976c:	4b85      	ldr	r3, [pc, #532]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	08db      	lsrs	r3, r3, #3
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	4a84      	ldr	r2, [pc, #528]	; (8009988 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009778:	fa22 f303 	lsr.w	r3, r2, r3
 800977c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	ee07 3a90 	vmov	s15, r3
 8009784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	ee07 3a90 	vmov	s15, r3
 800978e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009796:	4b7b      	ldr	r3, [pc, #492]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800979e:	ee07 3a90 	vmov	s15, r3
 80097a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800998c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80097c6:	e087      	b.n	80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	ee07 3a90 	vmov	s15, r3
 80097ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009990 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80097d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097da:	4b6a      	ldr	r3, [pc, #424]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e2:	ee07 3a90 	vmov	s15, r3
 80097e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800998c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800980a:	e065      	b.n	80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009816:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009994 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800981a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800981e:	4b59      	ldr	r3, [pc, #356]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800982e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009832:	eddf 5a56 	vldr	s11, [pc, #344]	; 800998c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800983e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800984e:	e043      	b.n	80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	ee07 3a90 	vmov	s15, r3
 8009856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009998 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800985e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009862:	4b48      	ldr	r3, [pc, #288]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009872:	ed97 6a03 	vldr	s12, [r7, #12]
 8009876:	eddf 5a45 	vldr	s11, [pc, #276]	; 800998c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800987a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800987e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800988e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009892:	e021      	b.n	80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009994 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a6:	4b37      	ldr	r3, [pc, #220]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800998c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80098d8:	4b2a      	ldr	r3, [pc, #168]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098dc:	0a5b      	lsrs	r3, r3, #9
 80098de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80098f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098fe:	ee17 2a90 	vmov	r2, s15
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009906:	4b1f      	ldr	r3, [pc, #124]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990a:	0c1b      	lsrs	r3, r3, #16
 800990c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009910:	ee07 3a90 	vmov	s15, r3
 8009914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800991c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009920:	edd7 6a07 	vldr	s13, [r7, #28]
 8009924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800992c:	ee17 2a90 	vmov	r2, s15
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009934:	4b13      	ldr	r3, [pc, #76]	; (8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	0e1b      	lsrs	r3, r3, #24
 800993a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800993e:	ee07 3a90 	vmov	s15, r3
 8009942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800994a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800994e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800995a:	ee17 2a90 	vmov	r2, s15
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009962:	e008      	b.n	8009976 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	609a      	str	r2, [r3, #8]
}
 8009976:	bf00      	nop
 8009978:	3724      	adds	r7, #36	; 0x24
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	58024400 	.word	0x58024400
 8009988:	03d09000 	.word	0x03d09000
 800998c:	46000000 	.word	0x46000000
 8009990:	4c742400 	.word	0x4c742400
 8009994:	4a742400 	.word	0x4a742400
 8009998:	4af42400 	.word	0x4af42400

0800999c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099aa:	4b53      	ldr	r3, [pc, #332]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 80099ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ae:	f003 0303 	and.w	r3, r3, #3
 80099b2:	2b03      	cmp	r3, #3
 80099b4:	d101      	bne.n	80099ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e099      	b.n	8009aee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80099ba:	4b4f      	ldr	r3, [pc, #316]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a4e      	ldr	r2, [pc, #312]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 80099c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099c6:	f7fb fe3d 	bl	8005644 <HAL_GetTick>
 80099ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099cc:	e008      	b.n	80099e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80099ce:	f7fb fe39 	bl	8005644 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d901      	bls.n	80099e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e086      	b.n	8009aee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099e0:	4b45      	ldr	r3, [pc, #276]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1f0      	bne.n	80099ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80099ec:	4b42      	ldr	r3, [pc, #264]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 80099ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	031b      	lsls	r3, r3, #12
 80099fa:	493f      	ldr	r1, [pc, #252]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	628b      	str	r3, [r1, #40]	; 0x28
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	025b      	lsls	r3, r3, #9
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	431a      	orrs	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	041b      	lsls	r3, r3, #16
 8009a1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a22:	431a      	orrs	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	061b      	lsls	r3, r3, #24
 8009a2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a30:	4931      	ldr	r1, [pc, #196]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a36:	4b30      	ldr	r3, [pc, #192]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	492d      	ldr	r1, [pc, #180]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a48:	4b2b      	ldr	r3, [pc, #172]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	f023 0220 	bic.w	r2, r3, #32
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	4928      	ldr	r1, [pc, #160]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a5a:	4b27      	ldr	r3, [pc, #156]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5e:	4a26      	ldr	r2, [pc, #152]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a60:	f023 0310 	bic.w	r3, r3, #16
 8009a64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a66:	4b24      	ldr	r3, [pc, #144]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a6a:	4b24      	ldr	r3, [pc, #144]	; (8009afc <RCCEx_PLL2_Config+0x160>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	69d2      	ldr	r2, [r2, #28]
 8009a72:	00d2      	lsls	r2, r2, #3
 8009a74:	4920      	ldr	r1, [pc, #128]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a7a:	4b1f      	ldr	r3, [pc, #124]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7e:	4a1e      	ldr	r2, [pc, #120]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a80:	f043 0310 	orr.w	r3, r3, #16
 8009a84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d106      	bne.n	8009a9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a8c:	4b1a      	ldr	r3, [pc, #104]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	4a19      	ldr	r2, [pc, #100]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009a92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a98:	e00f      	b.n	8009aba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d106      	bne.n	8009aae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009aa0:	4b15      	ldr	r3, [pc, #84]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	4a14      	ldr	r2, [pc, #80]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009aac:	e005      	b.n	8009aba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009aae:	4b12      	ldr	r3, [pc, #72]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab2:	4a11      	ldr	r2, [pc, #68]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ab8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009aba:	4b0f      	ldr	r3, [pc, #60]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a0e      	ldr	r2, [pc, #56]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ac6:	f7fb fdbd 	bl	8005644 <HAL_GetTick>
 8009aca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009acc:	e008      	b.n	8009ae0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ace:	f7fb fdb9 	bl	8005644 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d901      	bls.n	8009ae0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e006      	b.n	8009aee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ae0:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <RCCEx_PLL2_Config+0x15c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0f0      	beq.n	8009ace <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	58024400 	.word	0x58024400
 8009afc:	ffff0007 	.word	0xffff0007

08009b00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b0e:	4b53      	ldr	r3, [pc, #332]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b12:	f003 0303 	and.w	r3, r3, #3
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d101      	bne.n	8009b1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e099      	b.n	8009c52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b1e:	4b4f      	ldr	r3, [pc, #316]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a4e      	ldr	r2, [pc, #312]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b2a:	f7fb fd8b 	bl	8005644 <HAL_GetTick>
 8009b2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b30:	e008      	b.n	8009b44 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b32:	f7fb fd87 	bl	8005644 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d901      	bls.n	8009b44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e086      	b.n	8009c52 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b44:	4b45      	ldr	r3, [pc, #276]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1f0      	bne.n	8009b32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009b50:	4b42      	ldr	r3, [pc, #264]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	051b      	lsls	r3, r3, #20
 8009b5e:	493f      	ldr	r1, [pc, #252]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009b60:	4313      	orrs	r3, r2
 8009b62:	628b      	str	r3, [r1, #40]	; 0x28
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	025b      	lsls	r3, r3, #9
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	431a      	orrs	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	041b      	lsls	r3, r3, #16
 8009b82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b86:	431a      	orrs	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	061b      	lsls	r3, r3, #24
 8009b90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b94:	4931      	ldr	r1, [pc, #196]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009b96:	4313      	orrs	r3, r2
 8009b98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b9a:	4b30      	ldr	r3, [pc, #192]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	492d      	ldr	r1, [pc, #180]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009bac:	4b2b      	ldr	r3, [pc, #172]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	4928      	ldr	r1, [pc, #160]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009bbe:	4b27      	ldr	r3, [pc, #156]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc2:	4a26      	ldr	r2, [pc, #152]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009bca:	4b24      	ldr	r3, [pc, #144]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bce:	4b24      	ldr	r3, [pc, #144]	; (8009c60 <RCCEx_PLL3_Config+0x160>)
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	69d2      	ldr	r2, [r2, #28]
 8009bd6:	00d2      	lsls	r2, r2, #3
 8009bd8:	4920      	ldr	r1, [pc, #128]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009bde:	4b1f      	ldr	r3, [pc, #124]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	4a1e      	ldr	r2, [pc, #120]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009be8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d106      	bne.n	8009bfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009bf0:	4b1a      	ldr	r3, [pc, #104]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf4:	4a19      	ldr	r2, [pc, #100]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009bf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bfc:	e00f      	b.n	8009c1e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d106      	bne.n	8009c12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c04:	4b15      	ldr	r3, [pc, #84]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c08:	4a14      	ldr	r2, [pc, #80]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009c0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c10:	e005      	b.n	8009c1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c12:	4b12      	ldr	r3, [pc, #72]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	4a11      	ldr	r2, [pc, #68]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009c18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c1e:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a0e      	ldr	r2, [pc, #56]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c2a:	f7fb fd0b 	bl	8005644 <HAL_GetTick>
 8009c2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c30:	e008      	b.n	8009c44 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c32:	f7fb fd07 	bl	8005644 <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d901      	bls.n	8009c44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e006      	b.n	8009c52 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c44:	4b05      	ldr	r3, [pc, #20]	; (8009c5c <RCCEx_PLL3_Config+0x15c>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d0f0      	beq.n	8009c32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	58024400 	.word	0x58024400
 8009c60:	ffff0007 	.word	0xffff0007

08009c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e049      	b.n	8009d0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d106      	bne.n	8009c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f841 	bl	8009d12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2202      	movs	r2, #2
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	f000 fa00 	bl	800a0a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b083      	sub	sp, #12
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009d1a:	bf00      	nop
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
	...

08009d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d001      	beq.n	8009d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e054      	b.n	8009dea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2202      	movs	r2, #2
 8009d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68da      	ldr	r2, [r3, #12]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f042 0201 	orr.w	r2, r2, #1
 8009d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a26      	ldr	r2, [pc, #152]	; (8009df8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d022      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x80>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6a:	d01d      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x80>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a22      	ldr	r2, [pc, #136]	; (8009dfc <HAL_TIM_Base_Start_IT+0xd4>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d018      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x80>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a21      	ldr	r2, [pc, #132]	; (8009e00 <HAL_TIM_Base_Start_IT+0xd8>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d013      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x80>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a1f      	ldr	r2, [pc, #124]	; (8009e04 <HAL_TIM_Base_Start_IT+0xdc>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d00e      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x80>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a1e      	ldr	r2, [pc, #120]	; (8009e08 <HAL_TIM_Base_Start_IT+0xe0>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d009      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x80>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a1c      	ldr	r2, [pc, #112]	; (8009e0c <HAL_TIM_Base_Start_IT+0xe4>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d004      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x80>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a1b      	ldr	r2, [pc, #108]	; (8009e10 <HAL_TIM_Base_Start_IT+0xe8>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d115      	bne.n	8009dd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	689a      	ldr	r2, [r3, #8]
 8009dae:	4b19      	ldr	r3, [pc, #100]	; (8009e14 <HAL_TIM_Base_Start_IT+0xec>)
 8009db0:	4013      	ands	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b06      	cmp	r3, #6
 8009db8:	d015      	beq.n	8009de6 <HAL_TIM_Base_Start_IT+0xbe>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc0:	d011      	beq.n	8009de6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f042 0201 	orr.w	r2, r2, #1
 8009dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd2:	e008      	b.n	8009de6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0201 	orr.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	e000      	b.n	8009de8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	40010000 	.word	0x40010000
 8009dfc:	40000400 	.word	0x40000400
 8009e00:	40000800 	.word	0x40000800
 8009e04:	40000c00 	.word	0x40000c00
 8009e08:	40010400 	.word	0x40010400
 8009e0c:	40001800 	.word	0x40001800
 8009e10:	40014000 	.word	0x40014000
 8009e14:	00010007 	.word	0x00010007

08009e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	f003 0302 	and.w	r3, r3, #2
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d122      	bne.n	8009e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f003 0302 	and.w	r3, r3, #2
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d11b      	bne.n	8009e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f06f 0202 	mvn.w	r2, #2
 8009e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f905 	bl	800a06a <HAL_TIM_IC_CaptureCallback>
 8009e60:	e005      	b.n	8009e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f8f7 	bl	800a056 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f908 	bl	800a07e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	f003 0304 	and.w	r3, r3, #4
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	d122      	bne.n	8009ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d11b      	bne.n	8009ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f06f 0204 	mvn.w	r2, #4
 8009e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f8db 	bl	800a06a <HAL_TIM_IC_CaptureCallback>
 8009eb4:	e005      	b.n	8009ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f8cd 	bl	800a056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f8de 	bl	800a07e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b08      	cmp	r3, #8
 8009ed4:	d122      	bne.n	8009f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	f003 0308 	and.w	r3, r3, #8
 8009ee0:	2b08      	cmp	r3, #8
 8009ee2:	d11b      	bne.n	8009f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f06f 0208 	mvn.w	r2, #8
 8009eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2204      	movs	r2, #4
 8009ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	69db      	ldr	r3, [r3, #28]
 8009efa:	f003 0303 	and.w	r3, r3, #3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d003      	beq.n	8009f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f8b1 	bl	800a06a <HAL_TIM_IC_CaptureCallback>
 8009f08:	e005      	b.n	8009f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f8a3 	bl	800a056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f8b4 	bl	800a07e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	f003 0310 	and.w	r3, r3, #16
 8009f26:	2b10      	cmp	r3, #16
 8009f28:	d122      	bne.n	8009f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	f003 0310 	and.w	r3, r3, #16
 8009f34:	2b10      	cmp	r3, #16
 8009f36:	d11b      	bne.n	8009f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f06f 0210 	mvn.w	r2, #16
 8009f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2208      	movs	r2, #8
 8009f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f887 	bl	800a06a <HAL_TIM_IC_CaptureCallback>
 8009f5c:	e005      	b.n	8009f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f879 	bl	800a056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f88a 	bl	800a07e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d10e      	bne.n	8009f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d107      	bne.n	8009f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f06f 0201 	mvn.w	r2, #1
 8009f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7fa ff6e 	bl	8004e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa6:	2b80      	cmp	r3, #128	; 0x80
 8009fa8:	d10e      	bne.n	8009fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb4:	2b80      	cmp	r3, #128	; 0x80
 8009fb6:	d107      	bne.n	8009fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f914 	bl	800a1f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd6:	d10e      	bne.n	8009ff6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fe2:	2b80      	cmp	r3, #128	; 0x80
 8009fe4:	d107      	bne.n	8009ff6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f907 	bl	800a204 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a000:	2b40      	cmp	r3, #64	; 0x40
 800a002:	d10e      	bne.n	800a022 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a00e:	2b40      	cmp	r3, #64	; 0x40
 800a010:	d107      	bne.n	800a022 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a01a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f838 	bl	800a092 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	f003 0320 	and.w	r3, r3, #32
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	d10e      	bne.n	800a04e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b20      	cmp	r3, #32
 800a03c:	d107      	bne.n	800a04e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f06f 0220 	mvn.w	r2, #32
 800a046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f8c7 	bl	800a1dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a04e:	bf00      	nop
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a05e:	bf00      	nop
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b083      	sub	sp, #12
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a072:	bf00      	nop
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a07e:	b480      	push	{r7}
 800a080:	b083      	sub	sp, #12
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a092:	b480      	push	{r7}
 800a094:	b083      	sub	sp, #12
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a09a:	bf00      	nop
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
	...

0800a0a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a40      	ldr	r2, [pc, #256]	; (800a1bc <TIM_Base_SetConfig+0x114>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d013      	beq.n	800a0e8 <TIM_Base_SetConfig+0x40>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0c6:	d00f      	beq.n	800a0e8 <TIM_Base_SetConfig+0x40>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a3d      	ldr	r2, [pc, #244]	; (800a1c0 <TIM_Base_SetConfig+0x118>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d00b      	beq.n	800a0e8 <TIM_Base_SetConfig+0x40>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a3c      	ldr	r2, [pc, #240]	; (800a1c4 <TIM_Base_SetConfig+0x11c>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d007      	beq.n	800a0e8 <TIM_Base_SetConfig+0x40>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a3b      	ldr	r2, [pc, #236]	; (800a1c8 <TIM_Base_SetConfig+0x120>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d003      	beq.n	800a0e8 <TIM_Base_SetConfig+0x40>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a3a      	ldr	r2, [pc, #232]	; (800a1cc <TIM_Base_SetConfig+0x124>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d108      	bne.n	800a0fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a2f      	ldr	r2, [pc, #188]	; (800a1bc <TIM_Base_SetConfig+0x114>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d01f      	beq.n	800a142 <TIM_Base_SetConfig+0x9a>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a108:	d01b      	beq.n	800a142 <TIM_Base_SetConfig+0x9a>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a2c      	ldr	r2, [pc, #176]	; (800a1c0 <TIM_Base_SetConfig+0x118>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d017      	beq.n	800a142 <TIM_Base_SetConfig+0x9a>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a2b      	ldr	r2, [pc, #172]	; (800a1c4 <TIM_Base_SetConfig+0x11c>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d013      	beq.n	800a142 <TIM_Base_SetConfig+0x9a>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a2a      	ldr	r2, [pc, #168]	; (800a1c8 <TIM_Base_SetConfig+0x120>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d00f      	beq.n	800a142 <TIM_Base_SetConfig+0x9a>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a29      	ldr	r2, [pc, #164]	; (800a1cc <TIM_Base_SetConfig+0x124>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d00b      	beq.n	800a142 <TIM_Base_SetConfig+0x9a>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a28      	ldr	r2, [pc, #160]	; (800a1d0 <TIM_Base_SetConfig+0x128>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d007      	beq.n	800a142 <TIM_Base_SetConfig+0x9a>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a27      	ldr	r2, [pc, #156]	; (800a1d4 <TIM_Base_SetConfig+0x12c>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d003      	beq.n	800a142 <TIM_Base_SetConfig+0x9a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a26      	ldr	r2, [pc, #152]	; (800a1d8 <TIM_Base_SetConfig+0x130>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d108      	bne.n	800a154 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	4313      	orrs	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	4313      	orrs	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	689a      	ldr	r2, [r3, #8]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a10      	ldr	r2, [pc, #64]	; (800a1bc <TIM_Base_SetConfig+0x114>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00f      	beq.n	800a1a0 <TIM_Base_SetConfig+0xf8>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a12      	ldr	r2, [pc, #72]	; (800a1cc <TIM_Base_SetConfig+0x124>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d00b      	beq.n	800a1a0 <TIM_Base_SetConfig+0xf8>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a11      	ldr	r2, [pc, #68]	; (800a1d0 <TIM_Base_SetConfig+0x128>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d007      	beq.n	800a1a0 <TIM_Base_SetConfig+0xf8>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a10      	ldr	r2, [pc, #64]	; (800a1d4 <TIM_Base_SetConfig+0x12c>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d003      	beq.n	800a1a0 <TIM_Base_SetConfig+0xf8>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a0f      	ldr	r2, [pc, #60]	; (800a1d8 <TIM_Base_SetConfig+0x130>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d103      	bne.n	800a1a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	615a      	str	r2, [r3, #20]
}
 800a1ae:	bf00      	nop
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	40010000 	.word	0x40010000
 800a1c0:	40000400 	.word	0x40000400
 800a1c4:	40000800 	.word	0x40000800
 800a1c8:	40000c00 	.word	0x40000c00
 800a1cc:	40010400 	.word	0x40010400
 800a1d0:	40014000 	.word	0x40014000
 800a1d4:	40014400 	.word	0x40014400
 800a1d8:	40014800 	.word	0x40014800

0800a1dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e042      	b.n	800a2b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a230:	2b00      	cmp	r3, #0
 800a232:	d106      	bne.n	800a242 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7fa fed3 	bl	8004fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2224      	movs	r2, #36	; 0x24
 800a246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f022 0201 	bic.w	r2, r2, #1
 800a258:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fc80 	bl	800ab60 <UART_SetConfig>
 800a260:	4603      	mov	r3, r0
 800a262:	2b01      	cmp	r3, #1
 800a264:	d101      	bne.n	800a26a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e022      	b.n	800a2b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d002      	beq.n	800a278 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 f9dc 	bl	800b630 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	689a      	ldr	r2, [r3, #8]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a296:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0201 	orr.w	r2, r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 fa63 	bl	800b774 <UART_CheckIdleState>
 800a2ae:	4603      	mov	r3, r0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08a      	sub	sp, #40	; 0x28
 800a2bc:	af02      	add	r7, sp, #8
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2ce:	2b20      	cmp	r3, #32
 800a2d0:	f040 8083 	bne.w	800a3da <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <HAL_UART_Transmit+0x28>
 800a2da:	88fb      	ldrh	r3, [r7, #6]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d101      	bne.n	800a2e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e07b      	b.n	800a3dc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d101      	bne.n	800a2f2 <HAL_UART_Transmit+0x3a>
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	e074      	b.n	800a3dc <HAL_UART_Transmit+0x124>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2221      	movs	r2, #33	; 0x21
 800a306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a30a:	f7fb f99b 	bl	8005644 <HAL_GetTick>
 800a30e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	88fa      	ldrh	r2, [r7, #6]
 800a314:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	88fa      	ldrh	r2, [r7, #6]
 800a31c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a328:	d108      	bne.n	800a33c <HAL_UART_Transmit+0x84>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d104      	bne.n	800a33c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a332:	2300      	movs	r3, #0
 800a334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	61bb      	str	r3, [r7, #24]
 800a33a:	e003      	b.n	800a344 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a340:	2300      	movs	r3, #0
 800a342:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a34c:	e02c      	b.n	800a3a8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2200      	movs	r2, #0
 800a356:	2180      	movs	r1, #128	; 0x80
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f001 fa56 	bl	800b80a <UART_WaitOnFlagUntilTimeout>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e039      	b.n	800a3dc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10b      	bne.n	800a386 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	881b      	ldrh	r3, [r3, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a37c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	3302      	adds	r3, #2
 800a382:	61bb      	str	r3, [r7, #24]
 800a384:	e007      	b.n	800a396 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	781a      	ldrb	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	3301      	adds	r3, #1
 800a394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1cc      	bne.n	800a34e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	2140      	movs	r1, #64	; 0x40
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f001 fa23 	bl	800b80a <UART_WaitOnFlagUntilTimeout>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e006      	b.n	800a3dc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2220      	movs	r2, #32
 800a3d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e000      	b.n	800a3dc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a3da:	2302      	movs	r3, #2
  }
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3720      	adds	r7, #32
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b0ba      	sub	sp, #232	; 0xe8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	69db      	ldr	r3, [r3, #28]
 800a3f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a40a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a40e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a412:	4013      	ands	r3, r2
 800a414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a418:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d11b      	bne.n	800a458 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a424:	f003 0320 	and.w	r3, r3, #32
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d015      	beq.n	800a458 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a430:	f003 0320 	and.w	r3, r3, #32
 800a434:	2b00      	cmp	r3, #0
 800a436:	d105      	bne.n	800a444 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a43c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d009      	beq.n	800a458 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 835a 	beq.w	800ab02 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	4798      	blx	r3
      }
      return;
 800a456:	e354      	b.n	800ab02 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a458:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 811f 	beq.w	800a6a0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a462:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a466:	4b8b      	ldr	r3, [pc, #556]	; (800a694 <HAL_UART_IRQHandler+0x2b0>)
 800a468:	4013      	ands	r3, r2
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d106      	bne.n	800a47c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a46e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a472:	4b89      	ldr	r3, [pc, #548]	; (800a698 <HAL_UART_IRQHandler+0x2b4>)
 800a474:	4013      	ands	r3, r2
 800a476:	2b00      	cmp	r3, #0
 800a478:	f000 8112 	beq.w	800a6a0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	2b00      	cmp	r3, #0
 800a486:	d011      	beq.n	800a4ac <HAL_UART_IRQHandler+0xc8>
 800a488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a48c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00b      	beq.n	800a4ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2201      	movs	r2, #1
 800a49a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4a2:	f043 0201 	orr.w	r2, r3, #1
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4b0:	f003 0302 	and.w	r3, r3, #2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d011      	beq.n	800a4dc <HAL_UART_IRQHandler+0xf8>
 800a4b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00b      	beq.n	800a4dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4d2:	f043 0204 	orr.w	r2, r3, #4
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4e0:	f003 0304 	and.w	r3, r3, #4
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d011      	beq.n	800a50c <HAL_UART_IRQHandler+0x128>
 800a4e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00b      	beq.n	800a50c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2204      	movs	r2, #4
 800a4fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a502:	f043 0202 	orr.w	r2, r3, #2
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a510:	f003 0308 	and.w	r3, r3, #8
 800a514:	2b00      	cmp	r3, #0
 800a516:	d017      	beq.n	800a548 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a51c:	f003 0320 	and.w	r3, r3, #32
 800a520:	2b00      	cmp	r3, #0
 800a522:	d105      	bne.n	800a530 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a524:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a528:	4b5a      	ldr	r3, [pc, #360]	; (800a694 <HAL_UART_IRQHandler+0x2b0>)
 800a52a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00b      	beq.n	800a548 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2208      	movs	r2, #8
 800a536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a53e:	f043 0208 	orr.w	r2, r3, #8
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a54c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a550:	2b00      	cmp	r3, #0
 800a552:	d012      	beq.n	800a57a <HAL_UART_IRQHandler+0x196>
 800a554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a558:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00c      	beq.n	800a57a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a568:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a570:	f043 0220 	orr.w	r2, r3, #32
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 82c0 	beq.w	800ab06 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a58a:	f003 0320 	and.w	r3, r3, #32
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d013      	beq.n	800a5ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a596:	f003 0320 	and.w	r3, r3, #32
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d105      	bne.n	800a5aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a59e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d007      	beq.n	800a5ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ce:	2b40      	cmp	r3, #64	; 0x40
 800a5d0:	d005      	beq.n	800a5de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d04f      	beq.n	800a67e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 f9dc 	bl	800b99c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ee:	2b40      	cmp	r3, #64	; 0x40
 800a5f0:	d141      	bne.n	800a676 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a600:	e853 3f00 	ldrex	r3, [r3]
 800a604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a60c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3308      	adds	r3, #8
 800a61a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a61e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a62a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a62e:	e841 2300 	strex	r3, r2, [r1]
 800a632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1d9      	bne.n	800a5f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a642:	2b00      	cmp	r3, #0
 800a644:	d013      	beq.n	800a66e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a64a:	4a14      	ldr	r2, [pc, #80]	; (800a69c <HAL_UART_IRQHandler+0x2b8>)
 800a64c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a652:	4618      	mov	r0, r3
 800a654:	f7fb fc30 	bl	8005eb8 <HAL_DMA_Abort_IT>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d017      	beq.n	800a68e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a668:	4610      	mov	r0, r2
 800a66a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a66c:	e00f      	b.n	800a68e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fa60 	bl	800ab34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a674:	e00b      	b.n	800a68e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fa5c 	bl	800ab34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a67c:	e007      	b.n	800a68e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fa58 	bl	800ab34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a68c:	e23b      	b.n	800ab06 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a68e:	bf00      	nop
    return;
 800a690:	e239      	b.n	800ab06 <HAL_UART_IRQHandler+0x722>
 800a692:	bf00      	nop
 800a694:	10000001 	.word	0x10000001
 800a698:	04000120 	.word	0x04000120
 800a69c:	0800ba69 	.word	0x0800ba69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	f040 81ce 	bne.w	800aa46 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ae:	f003 0310 	and.w	r3, r3, #16
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 81c7 	beq.w	800aa46 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6bc:	f003 0310 	and.w	r3, r3, #16
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f000 81c0 	beq.w	800aa46 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2210      	movs	r2, #16
 800a6cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d8:	2b40      	cmp	r3, #64	; 0x40
 800a6da:	f040 813b 	bne.w	800a954 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a8b      	ldr	r2, [pc, #556]	; (800a914 <HAL_UART_IRQHandler+0x530>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d059      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a89      	ldr	r2, [pc, #548]	; (800a918 <HAL_UART_IRQHandler+0x534>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d053      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a87      	ldr	r2, [pc, #540]	; (800a91c <HAL_UART_IRQHandler+0x538>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d04d      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a85      	ldr	r2, [pc, #532]	; (800a920 <HAL_UART_IRQHandler+0x53c>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d047      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a83      	ldr	r2, [pc, #524]	; (800a924 <HAL_UART_IRQHandler+0x540>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d041      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a81      	ldr	r2, [pc, #516]	; (800a928 <HAL_UART_IRQHandler+0x544>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d03b      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a7f      	ldr	r2, [pc, #508]	; (800a92c <HAL_UART_IRQHandler+0x548>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d035      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a7d      	ldr	r2, [pc, #500]	; (800a930 <HAL_UART_IRQHandler+0x54c>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d02f      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a7b      	ldr	r2, [pc, #492]	; (800a934 <HAL_UART_IRQHandler+0x550>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d029      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a79      	ldr	r2, [pc, #484]	; (800a938 <HAL_UART_IRQHandler+0x554>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d023      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a77      	ldr	r2, [pc, #476]	; (800a93c <HAL_UART_IRQHandler+0x558>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d01d      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a75      	ldr	r2, [pc, #468]	; (800a940 <HAL_UART_IRQHandler+0x55c>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d017      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a73      	ldr	r2, [pc, #460]	; (800a944 <HAL_UART_IRQHandler+0x560>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d011      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a71      	ldr	r2, [pc, #452]	; (800a948 <HAL_UART_IRQHandler+0x564>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d00b      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a6f      	ldr	r2, [pc, #444]	; (800a94c <HAL_UART_IRQHandler+0x568>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d005      	beq.n	800a79e <HAL_UART_IRQHandler+0x3ba>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a6d      	ldr	r2, [pc, #436]	; (800a950 <HAL_UART_IRQHandler+0x56c>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d105      	bne.n	800a7aa <HAL_UART_IRQHandler+0x3c6>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	e004      	b.n	800a7b4 <HAL_UART_IRQHandler+0x3d0>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a7b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 81a4 	beq.w	800ab0a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	f080 819c 	bcs.w	800ab0a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7e6:	f000 8086 	beq.w	800a8f6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7f6:	e853 3f00 	ldrex	r3, [r3]
 800a7fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a7fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a814:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a818:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a820:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a824:	e841 2300 	strex	r3, r2, [r1]
 800a828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a82c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1da      	bne.n	800a7ea <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3308      	adds	r3, #8
 800a83a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a83e:	e853 3f00 	ldrex	r3, [r3]
 800a842:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a846:	f023 0301 	bic.w	r3, r3, #1
 800a84a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3308      	adds	r3, #8
 800a854:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a858:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a85c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a860:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a86a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e1      	bne.n	800a834 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3308      	adds	r3, #8
 800a876:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a87a:	e853 3f00 	ldrex	r3, [r3]
 800a87e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3308      	adds	r3, #8
 800a890:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a894:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a896:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a898:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a89a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a89c:	e841 2300 	strex	r3, r2, [r1]
 800a8a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a8a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1e3      	bne.n	800a870 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8be:	e853 3f00 	ldrex	r3, [r3]
 800a8c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8c6:	f023 0310 	bic.w	r3, r3, #16
 800a8ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8e0:	e841 2300 	strex	r3, r2, [r1]
 800a8e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e4      	bne.n	800a8b6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7fa ffc3 	bl	800587c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a902:	b29b      	uxth	r3, r3
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	b29b      	uxth	r3, r3
 800a908:	4619      	mov	r1, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f91c 	bl	800ab48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a910:	e0fb      	b.n	800ab0a <HAL_UART_IRQHandler+0x726>
 800a912:	bf00      	nop
 800a914:	40020010 	.word	0x40020010
 800a918:	40020028 	.word	0x40020028
 800a91c:	40020040 	.word	0x40020040
 800a920:	40020058 	.word	0x40020058
 800a924:	40020070 	.word	0x40020070
 800a928:	40020088 	.word	0x40020088
 800a92c:	400200a0 	.word	0x400200a0
 800a930:	400200b8 	.word	0x400200b8
 800a934:	40020410 	.word	0x40020410
 800a938:	40020428 	.word	0x40020428
 800a93c:	40020440 	.word	0x40020440
 800a940:	40020458 	.word	0x40020458
 800a944:	40020470 	.word	0x40020470
 800a948:	40020488 	.word	0x40020488
 800a94c:	400204a0 	.word	0x400204a0
 800a950:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a960:	b29b      	uxth	r3, r3
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a96e:	b29b      	uxth	r3, r3
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 80cc 	beq.w	800ab0e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800a976:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 80c7 	beq.w	800ab0e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a994:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	461a      	mov	r2, r3
 800a99e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a9a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9aa:	e841 2300 	strex	r3, r2, [r1]
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1e4      	bne.n	800a980 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3308      	adds	r3, #8
 800a9bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	e853 3f00 	ldrex	r3, [r3]
 800a9c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a9c6:	6a3a      	ldr	r2, [r7, #32]
 800a9c8:	4b54      	ldr	r3, [pc, #336]	; (800ab1c <HAL_UART_IRQHandler+0x738>)
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	3308      	adds	r3, #8
 800a9d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a9da:	633a      	str	r2, [r7, #48]	; 0x30
 800a9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9e2:	e841 2300 	strex	r3, r2, [r1]
 800a9e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1e3      	bne.n	800a9b6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	e853 3f00 	ldrex	r3, [r3]
 800aa0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f023 0310 	bic.w	r3, r3, #16
 800aa16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa24:	61fb      	str	r3, [r7, #28]
 800aa26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa28:	69b9      	ldr	r1, [r7, #24]
 800aa2a:	69fa      	ldr	r2, [r7, #28]
 800aa2c:	e841 2300 	strex	r3, r2, [r1]
 800aa30:	617b      	str	r3, [r7, #20]
   return(result);
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e4      	bne.n	800aa02 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f882 	bl	800ab48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa44:	e063      	b.n	800ab0e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aa46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00e      	beq.n	800aa70 <HAL_UART_IRQHandler+0x68c>
 800aa52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d008      	beq.n	800aa70 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aa66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f001 f83e 	bl	800baea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa6e:	e051      	b.n	800ab14 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aa70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d014      	beq.n	800aaa6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aa7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d105      	bne.n	800aa94 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aa88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d008      	beq.n	800aaa6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d03a      	beq.n	800ab12 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	4798      	blx	r3
    }
    return;
 800aaa4:	e035      	b.n	800ab12 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aaa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d009      	beq.n	800aac6 <HAL_UART_IRQHandler+0x6e2>
 800aab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 ffe8 	bl	800ba94 <UART_EndTransmit_IT>
    return;
 800aac4:	e026      	b.n	800ab14 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d009      	beq.n	800aae6 <HAL_UART_IRQHandler+0x702>
 800aad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aad6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 f817 	bl	800bb12 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aae4:	e016      	b.n	800ab14 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d010      	beq.n	800ab14 <HAL_UART_IRQHandler+0x730>
 800aaf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	da0c      	bge.n	800ab14 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 ffff 	bl	800bafe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab00:	e008      	b.n	800ab14 <HAL_UART_IRQHandler+0x730>
      return;
 800ab02:	bf00      	nop
 800ab04:	e006      	b.n	800ab14 <HAL_UART_IRQHandler+0x730>
    return;
 800ab06:	bf00      	nop
 800ab08:	e004      	b.n	800ab14 <HAL_UART_IRQHandler+0x730>
      return;
 800ab0a:	bf00      	nop
 800ab0c:	e002      	b.n	800ab14 <HAL_UART_IRQHandler+0x730>
      return;
 800ab0e:	bf00      	nop
 800ab10:	e000      	b.n	800ab14 <HAL_UART_IRQHandler+0x730>
    return;
 800ab12:	bf00      	nop
  }
}
 800ab14:	37e8      	adds	r7, #232	; 0xe8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	effffffe 	.word	0xeffffffe

0800ab20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab64:	b092      	sub	sp, #72	; 0x48
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	689a      	ldr	r2, [r3, #8]
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	431a      	orrs	r2, r3
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	69db      	ldr	r3, [r3, #28]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	4bbe      	ldr	r3, [pc, #760]	; (800ae88 <UART_SetConfig+0x328>)
 800ab90:	4013      	ands	r3, r2
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	6812      	ldr	r2, [r2, #0]
 800ab96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab98:	430b      	orrs	r3, r1
 800ab9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	68da      	ldr	r2, [r3, #12]
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	430a      	orrs	r2, r1
 800abb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4ab3      	ldr	r2, [pc, #716]	; (800ae8c <UART_SetConfig+0x32c>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d004      	beq.n	800abcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abc8:	4313      	orrs	r3, r2
 800abca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689a      	ldr	r2, [r3, #8]
 800abd2:	4baf      	ldr	r3, [pc, #700]	; (800ae90 <UART_SetConfig+0x330>)
 800abd4:	4013      	ands	r3, r2
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	6812      	ldr	r2, [r2, #0]
 800abda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abdc:	430b      	orrs	r3, r1
 800abde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe6:	f023 010f 	bic.w	r1, r3, #15
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	430a      	orrs	r2, r1
 800abf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4aa6      	ldr	r2, [pc, #664]	; (800ae94 <UART_SetConfig+0x334>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d177      	bne.n	800acf0 <UART_SetConfig+0x190>
 800ac00:	4ba5      	ldr	r3, [pc, #660]	; (800ae98 <UART_SetConfig+0x338>)
 800ac02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac08:	2b28      	cmp	r3, #40	; 0x28
 800ac0a:	d86d      	bhi.n	800ace8 <UART_SetConfig+0x188>
 800ac0c:	a201      	add	r2, pc, #4	; (adr r2, 800ac14 <UART_SetConfig+0xb4>)
 800ac0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac12:	bf00      	nop
 800ac14:	0800acb9 	.word	0x0800acb9
 800ac18:	0800ace9 	.word	0x0800ace9
 800ac1c:	0800ace9 	.word	0x0800ace9
 800ac20:	0800ace9 	.word	0x0800ace9
 800ac24:	0800ace9 	.word	0x0800ace9
 800ac28:	0800ace9 	.word	0x0800ace9
 800ac2c:	0800ace9 	.word	0x0800ace9
 800ac30:	0800ace9 	.word	0x0800ace9
 800ac34:	0800acc1 	.word	0x0800acc1
 800ac38:	0800ace9 	.word	0x0800ace9
 800ac3c:	0800ace9 	.word	0x0800ace9
 800ac40:	0800ace9 	.word	0x0800ace9
 800ac44:	0800ace9 	.word	0x0800ace9
 800ac48:	0800ace9 	.word	0x0800ace9
 800ac4c:	0800ace9 	.word	0x0800ace9
 800ac50:	0800ace9 	.word	0x0800ace9
 800ac54:	0800acc9 	.word	0x0800acc9
 800ac58:	0800ace9 	.word	0x0800ace9
 800ac5c:	0800ace9 	.word	0x0800ace9
 800ac60:	0800ace9 	.word	0x0800ace9
 800ac64:	0800ace9 	.word	0x0800ace9
 800ac68:	0800ace9 	.word	0x0800ace9
 800ac6c:	0800ace9 	.word	0x0800ace9
 800ac70:	0800ace9 	.word	0x0800ace9
 800ac74:	0800acd1 	.word	0x0800acd1
 800ac78:	0800ace9 	.word	0x0800ace9
 800ac7c:	0800ace9 	.word	0x0800ace9
 800ac80:	0800ace9 	.word	0x0800ace9
 800ac84:	0800ace9 	.word	0x0800ace9
 800ac88:	0800ace9 	.word	0x0800ace9
 800ac8c:	0800ace9 	.word	0x0800ace9
 800ac90:	0800ace9 	.word	0x0800ace9
 800ac94:	0800acd9 	.word	0x0800acd9
 800ac98:	0800ace9 	.word	0x0800ace9
 800ac9c:	0800ace9 	.word	0x0800ace9
 800aca0:	0800ace9 	.word	0x0800ace9
 800aca4:	0800ace9 	.word	0x0800ace9
 800aca8:	0800ace9 	.word	0x0800ace9
 800acac:	0800ace9 	.word	0x0800ace9
 800acb0:	0800ace9 	.word	0x0800ace9
 800acb4:	0800ace1 	.word	0x0800ace1
 800acb8:	2301      	movs	r3, #1
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acbe:	e222      	b.n	800b106 <UART_SetConfig+0x5a6>
 800acc0:	2304      	movs	r3, #4
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acc6:	e21e      	b.n	800b106 <UART_SetConfig+0x5a6>
 800acc8:	2308      	movs	r3, #8
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acce:	e21a      	b.n	800b106 <UART_SetConfig+0x5a6>
 800acd0:	2310      	movs	r3, #16
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acd6:	e216      	b.n	800b106 <UART_SetConfig+0x5a6>
 800acd8:	2320      	movs	r3, #32
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acde:	e212      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ace0:	2340      	movs	r3, #64	; 0x40
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ace6:	e20e      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ace8:	2380      	movs	r3, #128	; 0x80
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acee:	e20a      	b.n	800b106 <UART_SetConfig+0x5a6>
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a69      	ldr	r2, [pc, #420]	; (800ae9c <UART_SetConfig+0x33c>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d130      	bne.n	800ad5c <UART_SetConfig+0x1fc>
 800acfa:	4b67      	ldr	r3, [pc, #412]	; (800ae98 <UART_SetConfig+0x338>)
 800acfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acfe:	f003 0307 	and.w	r3, r3, #7
 800ad02:	2b05      	cmp	r3, #5
 800ad04:	d826      	bhi.n	800ad54 <UART_SetConfig+0x1f4>
 800ad06:	a201      	add	r2, pc, #4	; (adr r2, 800ad0c <UART_SetConfig+0x1ac>)
 800ad08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0c:	0800ad25 	.word	0x0800ad25
 800ad10:	0800ad2d 	.word	0x0800ad2d
 800ad14:	0800ad35 	.word	0x0800ad35
 800ad18:	0800ad3d 	.word	0x0800ad3d
 800ad1c:	0800ad45 	.word	0x0800ad45
 800ad20:	0800ad4d 	.word	0x0800ad4d
 800ad24:	2300      	movs	r3, #0
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad2a:	e1ec      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ad2c:	2304      	movs	r3, #4
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad32:	e1e8      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ad34:	2308      	movs	r3, #8
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad3a:	e1e4      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ad3c:	2310      	movs	r3, #16
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad42:	e1e0      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ad44:	2320      	movs	r3, #32
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad4a:	e1dc      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ad4c:	2340      	movs	r3, #64	; 0x40
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad52:	e1d8      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ad54:	2380      	movs	r3, #128	; 0x80
 800ad56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad5a:	e1d4      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a4f      	ldr	r2, [pc, #316]	; (800aea0 <UART_SetConfig+0x340>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d130      	bne.n	800adc8 <UART_SetConfig+0x268>
 800ad66:	4b4c      	ldr	r3, [pc, #304]	; (800ae98 <UART_SetConfig+0x338>)
 800ad68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad6a:	f003 0307 	and.w	r3, r3, #7
 800ad6e:	2b05      	cmp	r3, #5
 800ad70:	d826      	bhi.n	800adc0 <UART_SetConfig+0x260>
 800ad72:	a201      	add	r2, pc, #4	; (adr r2, 800ad78 <UART_SetConfig+0x218>)
 800ad74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad78:	0800ad91 	.word	0x0800ad91
 800ad7c:	0800ad99 	.word	0x0800ad99
 800ad80:	0800ada1 	.word	0x0800ada1
 800ad84:	0800ada9 	.word	0x0800ada9
 800ad88:	0800adb1 	.word	0x0800adb1
 800ad8c:	0800adb9 	.word	0x0800adb9
 800ad90:	2300      	movs	r3, #0
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad96:	e1b6      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ad98:	2304      	movs	r3, #4
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad9e:	e1b2      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ada0:	2308      	movs	r3, #8
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ada6:	e1ae      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ada8:	2310      	movs	r3, #16
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adae:	e1aa      	b.n	800b106 <UART_SetConfig+0x5a6>
 800adb0:	2320      	movs	r3, #32
 800adb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adb6:	e1a6      	b.n	800b106 <UART_SetConfig+0x5a6>
 800adb8:	2340      	movs	r3, #64	; 0x40
 800adba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adbe:	e1a2      	b.n	800b106 <UART_SetConfig+0x5a6>
 800adc0:	2380      	movs	r3, #128	; 0x80
 800adc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adc6:	e19e      	b.n	800b106 <UART_SetConfig+0x5a6>
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a35      	ldr	r2, [pc, #212]	; (800aea4 <UART_SetConfig+0x344>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d130      	bne.n	800ae34 <UART_SetConfig+0x2d4>
 800add2:	4b31      	ldr	r3, [pc, #196]	; (800ae98 <UART_SetConfig+0x338>)
 800add4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800add6:	f003 0307 	and.w	r3, r3, #7
 800adda:	2b05      	cmp	r3, #5
 800addc:	d826      	bhi.n	800ae2c <UART_SetConfig+0x2cc>
 800adde:	a201      	add	r2, pc, #4	; (adr r2, 800ade4 <UART_SetConfig+0x284>)
 800ade0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade4:	0800adfd 	.word	0x0800adfd
 800ade8:	0800ae05 	.word	0x0800ae05
 800adec:	0800ae0d 	.word	0x0800ae0d
 800adf0:	0800ae15 	.word	0x0800ae15
 800adf4:	0800ae1d 	.word	0x0800ae1d
 800adf8:	0800ae25 	.word	0x0800ae25
 800adfc:	2300      	movs	r3, #0
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae02:	e180      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ae04:	2304      	movs	r3, #4
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae0a:	e17c      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ae0c:	2308      	movs	r3, #8
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae12:	e178      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ae14:	2310      	movs	r3, #16
 800ae16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae1a:	e174      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ae1c:	2320      	movs	r3, #32
 800ae1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae22:	e170      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ae24:	2340      	movs	r3, #64	; 0x40
 800ae26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae2a:	e16c      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ae2c:	2380      	movs	r3, #128	; 0x80
 800ae2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae32:	e168      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a1b      	ldr	r2, [pc, #108]	; (800aea8 <UART_SetConfig+0x348>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d142      	bne.n	800aec4 <UART_SetConfig+0x364>
 800ae3e:	4b16      	ldr	r3, [pc, #88]	; (800ae98 <UART_SetConfig+0x338>)
 800ae40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae42:	f003 0307 	and.w	r3, r3, #7
 800ae46:	2b05      	cmp	r3, #5
 800ae48:	d838      	bhi.n	800aebc <UART_SetConfig+0x35c>
 800ae4a:	a201      	add	r2, pc, #4	; (adr r2, 800ae50 <UART_SetConfig+0x2f0>)
 800ae4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae50:	0800ae69 	.word	0x0800ae69
 800ae54:	0800ae71 	.word	0x0800ae71
 800ae58:	0800ae79 	.word	0x0800ae79
 800ae5c:	0800ae81 	.word	0x0800ae81
 800ae60:	0800aead 	.word	0x0800aead
 800ae64:	0800aeb5 	.word	0x0800aeb5
 800ae68:	2300      	movs	r3, #0
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae6e:	e14a      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ae70:	2304      	movs	r3, #4
 800ae72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae76:	e146      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ae78:	2308      	movs	r3, #8
 800ae7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae7e:	e142      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ae80:	2310      	movs	r3, #16
 800ae82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae86:	e13e      	b.n	800b106 <UART_SetConfig+0x5a6>
 800ae88:	cfff69f3 	.word	0xcfff69f3
 800ae8c:	58000c00 	.word	0x58000c00
 800ae90:	11fff4ff 	.word	0x11fff4ff
 800ae94:	40011000 	.word	0x40011000
 800ae98:	58024400 	.word	0x58024400
 800ae9c:	40004400 	.word	0x40004400
 800aea0:	40004800 	.word	0x40004800
 800aea4:	40004c00 	.word	0x40004c00
 800aea8:	40005000 	.word	0x40005000
 800aeac:	2320      	movs	r3, #32
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeb2:	e128      	b.n	800b106 <UART_SetConfig+0x5a6>
 800aeb4:	2340      	movs	r3, #64	; 0x40
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeba:	e124      	b.n	800b106 <UART_SetConfig+0x5a6>
 800aebc:	2380      	movs	r3, #128	; 0x80
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aec2:	e120      	b.n	800b106 <UART_SetConfig+0x5a6>
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4acb      	ldr	r2, [pc, #812]	; (800b1f8 <UART_SetConfig+0x698>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d176      	bne.n	800afbc <UART_SetConfig+0x45c>
 800aece:	4bcb      	ldr	r3, [pc, #812]	; (800b1fc <UART_SetConfig+0x69c>)
 800aed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aed6:	2b28      	cmp	r3, #40	; 0x28
 800aed8:	d86c      	bhi.n	800afb4 <UART_SetConfig+0x454>
 800aeda:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <UART_SetConfig+0x380>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800af85 	.word	0x0800af85
 800aee4:	0800afb5 	.word	0x0800afb5
 800aee8:	0800afb5 	.word	0x0800afb5
 800aeec:	0800afb5 	.word	0x0800afb5
 800aef0:	0800afb5 	.word	0x0800afb5
 800aef4:	0800afb5 	.word	0x0800afb5
 800aef8:	0800afb5 	.word	0x0800afb5
 800aefc:	0800afb5 	.word	0x0800afb5
 800af00:	0800af8d 	.word	0x0800af8d
 800af04:	0800afb5 	.word	0x0800afb5
 800af08:	0800afb5 	.word	0x0800afb5
 800af0c:	0800afb5 	.word	0x0800afb5
 800af10:	0800afb5 	.word	0x0800afb5
 800af14:	0800afb5 	.word	0x0800afb5
 800af18:	0800afb5 	.word	0x0800afb5
 800af1c:	0800afb5 	.word	0x0800afb5
 800af20:	0800af95 	.word	0x0800af95
 800af24:	0800afb5 	.word	0x0800afb5
 800af28:	0800afb5 	.word	0x0800afb5
 800af2c:	0800afb5 	.word	0x0800afb5
 800af30:	0800afb5 	.word	0x0800afb5
 800af34:	0800afb5 	.word	0x0800afb5
 800af38:	0800afb5 	.word	0x0800afb5
 800af3c:	0800afb5 	.word	0x0800afb5
 800af40:	0800af9d 	.word	0x0800af9d
 800af44:	0800afb5 	.word	0x0800afb5
 800af48:	0800afb5 	.word	0x0800afb5
 800af4c:	0800afb5 	.word	0x0800afb5
 800af50:	0800afb5 	.word	0x0800afb5
 800af54:	0800afb5 	.word	0x0800afb5
 800af58:	0800afb5 	.word	0x0800afb5
 800af5c:	0800afb5 	.word	0x0800afb5
 800af60:	0800afa5 	.word	0x0800afa5
 800af64:	0800afb5 	.word	0x0800afb5
 800af68:	0800afb5 	.word	0x0800afb5
 800af6c:	0800afb5 	.word	0x0800afb5
 800af70:	0800afb5 	.word	0x0800afb5
 800af74:	0800afb5 	.word	0x0800afb5
 800af78:	0800afb5 	.word	0x0800afb5
 800af7c:	0800afb5 	.word	0x0800afb5
 800af80:	0800afad 	.word	0x0800afad
 800af84:	2301      	movs	r3, #1
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af8a:	e0bc      	b.n	800b106 <UART_SetConfig+0x5a6>
 800af8c:	2304      	movs	r3, #4
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af92:	e0b8      	b.n	800b106 <UART_SetConfig+0x5a6>
 800af94:	2308      	movs	r3, #8
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af9a:	e0b4      	b.n	800b106 <UART_SetConfig+0x5a6>
 800af9c:	2310      	movs	r3, #16
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afa2:	e0b0      	b.n	800b106 <UART_SetConfig+0x5a6>
 800afa4:	2320      	movs	r3, #32
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afaa:	e0ac      	b.n	800b106 <UART_SetConfig+0x5a6>
 800afac:	2340      	movs	r3, #64	; 0x40
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afb2:	e0a8      	b.n	800b106 <UART_SetConfig+0x5a6>
 800afb4:	2380      	movs	r3, #128	; 0x80
 800afb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afba:	e0a4      	b.n	800b106 <UART_SetConfig+0x5a6>
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a8f      	ldr	r2, [pc, #572]	; (800b200 <UART_SetConfig+0x6a0>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d130      	bne.n	800b028 <UART_SetConfig+0x4c8>
 800afc6:	4b8d      	ldr	r3, [pc, #564]	; (800b1fc <UART_SetConfig+0x69c>)
 800afc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afca:	f003 0307 	and.w	r3, r3, #7
 800afce:	2b05      	cmp	r3, #5
 800afd0:	d826      	bhi.n	800b020 <UART_SetConfig+0x4c0>
 800afd2:	a201      	add	r2, pc, #4	; (adr r2, 800afd8 <UART_SetConfig+0x478>)
 800afd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd8:	0800aff1 	.word	0x0800aff1
 800afdc:	0800aff9 	.word	0x0800aff9
 800afe0:	0800b001 	.word	0x0800b001
 800afe4:	0800b009 	.word	0x0800b009
 800afe8:	0800b011 	.word	0x0800b011
 800afec:	0800b019 	.word	0x0800b019
 800aff0:	2300      	movs	r3, #0
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aff6:	e086      	b.n	800b106 <UART_SetConfig+0x5a6>
 800aff8:	2304      	movs	r3, #4
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800affe:	e082      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b000:	2308      	movs	r3, #8
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b006:	e07e      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b008:	2310      	movs	r3, #16
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b00e:	e07a      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b010:	2320      	movs	r3, #32
 800b012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b016:	e076      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b018:	2340      	movs	r3, #64	; 0x40
 800b01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b01e:	e072      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b020:	2380      	movs	r3, #128	; 0x80
 800b022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b026:	e06e      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a75      	ldr	r2, [pc, #468]	; (800b204 <UART_SetConfig+0x6a4>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d130      	bne.n	800b094 <UART_SetConfig+0x534>
 800b032:	4b72      	ldr	r3, [pc, #456]	; (800b1fc <UART_SetConfig+0x69c>)
 800b034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	2b05      	cmp	r3, #5
 800b03c:	d826      	bhi.n	800b08c <UART_SetConfig+0x52c>
 800b03e:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <UART_SetConfig+0x4e4>)
 800b040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b044:	0800b05d 	.word	0x0800b05d
 800b048:	0800b065 	.word	0x0800b065
 800b04c:	0800b06d 	.word	0x0800b06d
 800b050:	0800b075 	.word	0x0800b075
 800b054:	0800b07d 	.word	0x0800b07d
 800b058:	0800b085 	.word	0x0800b085
 800b05c:	2300      	movs	r3, #0
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b062:	e050      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b064:	2304      	movs	r3, #4
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06a:	e04c      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b06c:	2308      	movs	r3, #8
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b072:	e048      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b074:	2310      	movs	r3, #16
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b07a:	e044      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b07c:	2320      	movs	r3, #32
 800b07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b082:	e040      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b084:	2340      	movs	r3, #64	; 0x40
 800b086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b08a:	e03c      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b08c:	2380      	movs	r3, #128	; 0x80
 800b08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b092:	e038      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a5b      	ldr	r2, [pc, #364]	; (800b208 <UART_SetConfig+0x6a8>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d130      	bne.n	800b100 <UART_SetConfig+0x5a0>
 800b09e:	4b57      	ldr	r3, [pc, #348]	; (800b1fc <UART_SetConfig+0x69c>)
 800b0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0a2:	f003 0307 	and.w	r3, r3, #7
 800b0a6:	2b05      	cmp	r3, #5
 800b0a8:	d826      	bhi.n	800b0f8 <UART_SetConfig+0x598>
 800b0aa:	a201      	add	r2, pc, #4	; (adr r2, 800b0b0 <UART_SetConfig+0x550>)
 800b0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b0:	0800b0c9 	.word	0x0800b0c9
 800b0b4:	0800b0d1 	.word	0x0800b0d1
 800b0b8:	0800b0d9 	.word	0x0800b0d9
 800b0bc:	0800b0e1 	.word	0x0800b0e1
 800b0c0:	0800b0e9 	.word	0x0800b0e9
 800b0c4:	0800b0f1 	.word	0x0800b0f1
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ce:	e01a      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b0d0:	2304      	movs	r3, #4
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0d6:	e016      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b0d8:	2308      	movs	r3, #8
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0de:	e012      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b0e0:	2310      	movs	r3, #16
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0e6:	e00e      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b0e8:	2320      	movs	r3, #32
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ee:	e00a      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b0f0:	2340      	movs	r3, #64	; 0x40
 800b0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0f6:	e006      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b0f8:	2380      	movs	r3, #128	; 0x80
 800b0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0fe:	e002      	b.n	800b106 <UART_SetConfig+0x5a6>
 800b100:	2380      	movs	r3, #128	; 0x80
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a3f      	ldr	r2, [pc, #252]	; (800b208 <UART_SetConfig+0x6a8>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	f040 80f8 	bne.w	800b302 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b112:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b116:	2b20      	cmp	r3, #32
 800b118:	dc46      	bgt.n	800b1a8 <UART_SetConfig+0x648>
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	f2c0 8082 	blt.w	800b224 <UART_SetConfig+0x6c4>
 800b120:	3b02      	subs	r3, #2
 800b122:	2b1e      	cmp	r3, #30
 800b124:	d87e      	bhi.n	800b224 <UART_SetConfig+0x6c4>
 800b126:	a201      	add	r2, pc, #4	; (adr r2, 800b12c <UART_SetConfig+0x5cc>)
 800b128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12c:	0800b1af 	.word	0x0800b1af
 800b130:	0800b225 	.word	0x0800b225
 800b134:	0800b1b7 	.word	0x0800b1b7
 800b138:	0800b225 	.word	0x0800b225
 800b13c:	0800b225 	.word	0x0800b225
 800b140:	0800b225 	.word	0x0800b225
 800b144:	0800b1c7 	.word	0x0800b1c7
 800b148:	0800b225 	.word	0x0800b225
 800b14c:	0800b225 	.word	0x0800b225
 800b150:	0800b225 	.word	0x0800b225
 800b154:	0800b225 	.word	0x0800b225
 800b158:	0800b225 	.word	0x0800b225
 800b15c:	0800b225 	.word	0x0800b225
 800b160:	0800b225 	.word	0x0800b225
 800b164:	0800b1d7 	.word	0x0800b1d7
 800b168:	0800b225 	.word	0x0800b225
 800b16c:	0800b225 	.word	0x0800b225
 800b170:	0800b225 	.word	0x0800b225
 800b174:	0800b225 	.word	0x0800b225
 800b178:	0800b225 	.word	0x0800b225
 800b17c:	0800b225 	.word	0x0800b225
 800b180:	0800b225 	.word	0x0800b225
 800b184:	0800b225 	.word	0x0800b225
 800b188:	0800b225 	.word	0x0800b225
 800b18c:	0800b225 	.word	0x0800b225
 800b190:	0800b225 	.word	0x0800b225
 800b194:	0800b225 	.word	0x0800b225
 800b198:	0800b225 	.word	0x0800b225
 800b19c:	0800b225 	.word	0x0800b225
 800b1a0:	0800b225 	.word	0x0800b225
 800b1a4:	0800b217 	.word	0x0800b217
 800b1a8:	2b40      	cmp	r3, #64	; 0x40
 800b1aa:	d037      	beq.n	800b21c <UART_SetConfig+0x6bc>
 800b1ac:	e03a      	b.n	800b224 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b1ae:	f7fe f937 	bl	8009420 <HAL_RCCEx_GetD3PCLK1Freq>
 800b1b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1b4:	e03c      	b.n	800b230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fe f946 	bl	800944c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1c4:	e034      	b.n	800b230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1c6:	f107 0318 	add.w	r3, r7, #24
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fe fa92 	bl	80096f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1d4:	e02c      	b.n	800b230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1d6:	4b09      	ldr	r3, [pc, #36]	; (800b1fc <UART_SetConfig+0x69c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 0320 	and.w	r3, r3, #32
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d016      	beq.n	800b210 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1e2:	4b06      	ldr	r3, [pc, #24]	; (800b1fc <UART_SetConfig+0x69c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	08db      	lsrs	r3, r3, #3
 800b1e8:	f003 0303 	and.w	r3, r3, #3
 800b1ec:	4a07      	ldr	r2, [pc, #28]	; (800b20c <UART_SetConfig+0x6ac>)
 800b1ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1f4:	e01c      	b.n	800b230 <UART_SetConfig+0x6d0>
 800b1f6:	bf00      	nop
 800b1f8:	40011400 	.word	0x40011400
 800b1fc:	58024400 	.word	0x58024400
 800b200:	40007800 	.word	0x40007800
 800b204:	40007c00 	.word	0x40007c00
 800b208:	58000c00 	.word	0x58000c00
 800b20c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b210:	4b9d      	ldr	r3, [pc, #628]	; (800b488 <UART_SetConfig+0x928>)
 800b212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b214:	e00c      	b.n	800b230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b216:	4b9d      	ldr	r3, [pc, #628]	; (800b48c <UART_SetConfig+0x92c>)
 800b218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b21a:	e009      	b.n	800b230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b21c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b222:	e005      	b.n	800b230 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b224:	2300      	movs	r3, #0
 800b226:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b22e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b232:	2b00      	cmp	r3, #0
 800b234:	f000 81de 	beq.w	800b5f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23c:	4a94      	ldr	r2, [pc, #592]	; (800b490 <UART_SetConfig+0x930>)
 800b23e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b242:	461a      	mov	r2, r3
 800b244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b246:	fbb3 f3f2 	udiv	r3, r3, r2
 800b24a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	4613      	mov	r3, r2
 800b252:	005b      	lsls	r3, r3, #1
 800b254:	4413      	add	r3, r2
 800b256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b258:	429a      	cmp	r2, r3
 800b25a:	d305      	bcc.n	800b268 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b264:	429a      	cmp	r2, r3
 800b266:	d903      	bls.n	800b270 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b26e:	e1c1      	b.n	800b5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b272:	2200      	movs	r2, #0
 800b274:	60bb      	str	r3, [r7, #8]
 800b276:	60fa      	str	r2, [r7, #12]
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27c:	4a84      	ldr	r2, [pc, #528]	; (800b490 <UART_SetConfig+0x930>)
 800b27e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b282:	b29b      	uxth	r3, r3
 800b284:	2200      	movs	r2, #0
 800b286:	603b      	str	r3, [r7, #0]
 800b288:	607a      	str	r2, [r7, #4]
 800b28a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b28e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b292:	f7f5 f8cd 	bl	8000430 <__aeabi_uldivmod>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4610      	mov	r0, r2
 800b29c:	4619      	mov	r1, r3
 800b29e:	f04f 0200 	mov.w	r2, #0
 800b2a2:	f04f 0300 	mov.w	r3, #0
 800b2a6:	020b      	lsls	r3, r1, #8
 800b2a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2ac:	0202      	lsls	r2, r0, #8
 800b2ae:	6979      	ldr	r1, [r7, #20]
 800b2b0:	6849      	ldr	r1, [r1, #4]
 800b2b2:	0849      	lsrs	r1, r1, #1
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	eb12 0804 	adds.w	r8, r2, r4
 800b2be:	eb43 0905 	adc.w	r9, r3, r5
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	469a      	mov	sl, r3
 800b2ca:	4693      	mov	fp, r2
 800b2cc:	4652      	mov	r2, sl
 800b2ce:	465b      	mov	r3, fp
 800b2d0:	4640      	mov	r0, r8
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	f7f5 f8ac 	bl	8000430 <__aeabi_uldivmod>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4613      	mov	r3, r2
 800b2de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2e6:	d308      	bcc.n	800b2fa <UART_SetConfig+0x79a>
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2ee:	d204      	bcs.n	800b2fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2f6:	60da      	str	r2, [r3, #12]
 800b2f8:	e17c      	b.n	800b5f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b300:	e178      	b.n	800b5f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b30a:	f040 80c5 	bne.w	800b498 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b30e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b312:	2b20      	cmp	r3, #32
 800b314:	dc48      	bgt.n	800b3a8 <UART_SetConfig+0x848>
 800b316:	2b00      	cmp	r3, #0
 800b318:	db7b      	blt.n	800b412 <UART_SetConfig+0x8b2>
 800b31a:	2b20      	cmp	r3, #32
 800b31c:	d879      	bhi.n	800b412 <UART_SetConfig+0x8b2>
 800b31e:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <UART_SetConfig+0x7c4>)
 800b320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b324:	0800b3af 	.word	0x0800b3af
 800b328:	0800b3b7 	.word	0x0800b3b7
 800b32c:	0800b413 	.word	0x0800b413
 800b330:	0800b413 	.word	0x0800b413
 800b334:	0800b3bf 	.word	0x0800b3bf
 800b338:	0800b413 	.word	0x0800b413
 800b33c:	0800b413 	.word	0x0800b413
 800b340:	0800b413 	.word	0x0800b413
 800b344:	0800b3cf 	.word	0x0800b3cf
 800b348:	0800b413 	.word	0x0800b413
 800b34c:	0800b413 	.word	0x0800b413
 800b350:	0800b413 	.word	0x0800b413
 800b354:	0800b413 	.word	0x0800b413
 800b358:	0800b413 	.word	0x0800b413
 800b35c:	0800b413 	.word	0x0800b413
 800b360:	0800b413 	.word	0x0800b413
 800b364:	0800b3df 	.word	0x0800b3df
 800b368:	0800b413 	.word	0x0800b413
 800b36c:	0800b413 	.word	0x0800b413
 800b370:	0800b413 	.word	0x0800b413
 800b374:	0800b413 	.word	0x0800b413
 800b378:	0800b413 	.word	0x0800b413
 800b37c:	0800b413 	.word	0x0800b413
 800b380:	0800b413 	.word	0x0800b413
 800b384:	0800b413 	.word	0x0800b413
 800b388:	0800b413 	.word	0x0800b413
 800b38c:	0800b413 	.word	0x0800b413
 800b390:	0800b413 	.word	0x0800b413
 800b394:	0800b413 	.word	0x0800b413
 800b398:	0800b413 	.word	0x0800b413
 800b39c:	0800b413 	.word	0x0800b413
 800b3a0:	0800b413 	.word	0x0800b413
 800b3a4:	0800b405 	.word	0x0800b405
 800b3a8:	2b40      	cmp	r3, #64	; 0x40
 800b3aa:	d02e      	beq.n	800b40a <UART_SetConfig+0x8aa>
 800b3ac:	e031      	b.n	800b412 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3ae:	f7fd f883 	bl	80084b8 <HAL_RCC_GetPCLK1Freq>
 800b3b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3b4:	e033      	b.n	800b41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3b6:	f7fd f895 	bl	80084e4 <HAL_RCC_GetPCLK2Freq>
 800b3ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3bc:	e02f      	b.n	800b41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fe f842 	bl	800944c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3cc:	e027      	b.n	800b41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3ce:	f107 0318 	add.w	r3, r7, #24
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fe f98e 	bl	80096f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3dc:	e01f      	b.n	800b41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3de:	4b2d      	ldr	r3, [pc, #180]	; (800b494 <UART_SetConfig+0x934>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 0320 	and.w	r3, r3, #32
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d009      	beq.n	800b3fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3ea:	4b2a      	ldr	r3, [pc, #168]	; (800b494 <UART_SetConfig+0x934>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	08db      	lsrs	r3, r3, #3
 800b3f0:	f003 0303 	and.w	r3, r3, #3
 800b3f4:	4a24      	ldr	r2, [pc, #144]	; (800b488 <UART_SetConfig+0x928>)
 800b3f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3fc:	e00f      	b.n	800b41e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b3fe:	4b22      	ldr	r3, [pc, #136]	; (800b488 <UART_SetConfig+0x928>)
 800b400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b402:	e00c      	b.n	800b41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b404:	4b21      	ldr	r3, [pc, #132]	; (800b48c <UART_SetConfig+0x92c>)
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b408:	e009      	b.n	800b41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b40a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b410:	e005      	b.n	800b41e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b412:	2300      	movs	r3, #0
 800b414:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b41c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b420:	2b00      	cmp	r3, #0
 800b422:	f000 80e7 	beq.w	800b5f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42a:	4a19      	ldr	r2, [pc, #100]	; (800b490 <UART_SetConfig+0x930>)
 800b42c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b430:	461a      	mov	r2, r3
 800b432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b434:	fbb3 f3f2 	udiv	r3, r3, r2
 800b438:	005a      	lsls	r2, r3, #1
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	085b      	lsrs	r3, r3, #1
 800b440:	441a      	add	r2, r3
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	fbb2 f3f3 	udiv	r3, r2, r3
 800b44a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	2b0f      	cmp	r3, #15
 800b450:	d916      	bls.n	800b480 <UART_SetConfig+0x920>
 800b452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b458:	d212      	bcs.n	800b480 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	f023 030f 	bic.w	r3, r3, #15
 800b462:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	085b      	lsrs	r3, r3, #1
 800b468:	b29b      	uxth	r3, r3
 800b46a:	f003 0307 	and.w	r3, r3, #7
 800b46e:	b29a      	uxth	r2, r3
 800b470:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b472:	4313      	orrs	r3, r2
 800b474:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b47c:	60da      	str	r2, [r3, #12]
 800b47e:	e0b9      	b.n	800b5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b486:	e0b5      	b.n	800b5f4 <UART_SetConfig+0xa94>
 800b488:	03d09000 	.word	0x03d09000
 800b48c:	003d0900 	.word	0x003d0900
 800b490:	0800cd08 	.word	0x0800cd08
 800b494:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b498:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b49c:	2b20      	cmp	r3, #32
 800b49e:	dc49      	bgt.n	800b534 <UART_SetConfig+0x9d4>
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	db7c      	blt.n	800b59e <UART_SetConfig+0xa3e>
 800b4a4:	2b20      	cmp	r3, #32
 800b4a6:	d87a      	bhi.n	800b59e <UART_SetConfig+0xa3e>
 800b4a8:	a201      	add	r2, pc, #4	; (adr r2, 800b4b0 <UART_SetConfig+0x950>)
 800b4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ae:	bf00      	nop
 800b4b0:	0800b53b 	.word	0x0800b53b
 800b4b4:	0800b543 	.word	0x0800b543
 800b4b8:	0800b59f 	.word	0x0800b59f
 800b4bc:	0800b59f 	.word	0x0800b59f
 800b4c0:	0800b54b 	.word	0x0800b54b
 800b4c4:	0800b59f 	.word	0x0800b59f
 800b4c8:	0800b59f 	.word	0x0800b59f
 800b4cc:	0800b59f 	.word	0x0800b59f
 800b4d0:	0800b55b 	.word	0x0800b55b
 800b4d4:	0800b59f 	.word	0x0800b59f
 800b4d8:	0800b59f 	.word	0x0800b59f
 800b4dc:	0800b59f 	.word	0x0800b59f
 800b4e0:	0800b59f 	.word	0x0800b59f
 800b4e4:	0800b59f 	.word	0x0800b59f
 800b4e8:	0800b59f 	.word	0x0800b59f
 800b4ec:	0800b59f 	.word	0x0800b59f
 800b4f0:	0800b56b 	.word	0x0800b56b
 800b4f4:	0800b59f 	.word	0x0800b59f
 800b4f8:	0800b59f 	.word	0x0800b59f
 800b4fc:	0800b59f 	.word	0x0800b59f
 800b500:	0800b59f 	.word	0x0800b59f
 800b504:	0800b59f 	.word	0x0800b59f
 800b508:	0800b59f 	.word	0x0800b59f
 800b50c:	0800b59f 	.word	0x0800b59f
 800b510:	0800b59f 	.word	0x0800b59f
 800b514:	0800b59f 	.word	0x0800b59f
 800b518:	0800b59f 	.word	0x0800b59f
 800b51c:	0800b59f 	.word	0x0800b59f
 800b520:	0800b59f 	.word	0x0800b59f
 800b524:	0800b59f 	.word	0x0800b59f
 800b528:	0800b59f 	.word	0x0800b59f
 800b52c:	0800b59f 	.word	0x0800b59f
 800b530:	0800b591 	.word	0x0800b591
 800b534:	2b40      	cmp	r3, #64	; 0x40
 800b536:	d02e      	beq.n	800b596 <UART_SetConfig+0xa36>
 800b538:	e031      	b.n	800b59e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b53a:	f7fc ffbd 	bl	80084b8 <HAL_RCC_GetPCLK1Freq>
 800b53e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b540:	e033      	b.n	800b5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b542:	f7fc ffcf 	bl	80084e4 <HAL_RCC_GetPCLK2Freq>
 800b546:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b548:	e02f      	b.n	800b5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b54a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fd ff7c 	bl	800944c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b558:	e027      	b.n	800b5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b55a:	f107 0318 	add.w	r3, r7, #24
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe f8c8 	bl	80096f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b568:	e01f      	b.n	800b5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b56a:	4b2d      	ldr	r3, [pc, #180]	; (800b620 <UART_SetConfig+0xac0>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 0320 	and.w	r3, r3, #32
 800b572:	2b00      	cmp	r3, #0
 800b574:	d009      	beq.n	800b58a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b576:	4b2a      	ldr	r3, [pc, #168]	; (800b620 <UART_SetConfig+0xac0>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	08db      	lsrs	r3, r3, #3
 800b57c:	f003 0303 	and.w	r3, r3, #3
 800b580:	4a28      	ldr	r2, [pc, #160]	; (800b624 <UART_SetConfig+0xac4>)
 800b582:	fa22 f303 	lsr.w	r3, r2, r3
 800b586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b588:	e00f      	b.n	800b5aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b58a:	4b26      	ldr	r3, [pc, #152]	; (800b624 <UART_SetConfig+0xac4>)
 800b58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b58e:	e00c      	b.n	800b5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b590:	4b25      	ldr	r3, [pc, #148]	; (800b628 <UART_SetConfig+0xac8>)
 800b592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b594:	e009      	b.n	800b5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b59c:	e005      	b.n	800b5aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b5a8:	bf00      	nop
    }

    if (pclk != 0U)
 800b5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d021      	beq.n	800b5f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b4:	4a1d      	ldr	r2, [pc, #116]	; (800b62c <UART_SetConfig+0xacc>)
 800b5b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5be:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	085b      	lsrs	r3, r3, #1
 800b5c8:	441a      	add	r2, r3
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	2b0f      	cmp	r3, #15
 800b5d8:	d909      	bls.n	800b5ee <UART_SetConfig+0xa8e>
 800b5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5e0:	d205      	bcs.n	800b5ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	60da      	str	r2, [r3, #12]
 800b5ec:	e002      	b.n	800b5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	2200      	movs	r2, #0
 800b608:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2200      	movs	r2, #0
 800b60e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b610:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b614:	4618      	mov	r0, r3
 800b616:	3748      	adds	r7, #72	; 0x48
 800b618:	46bd      	mov	sp, r7
 800b61a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b61e:	bf00      	nop
 800b620:	58024400 	.word	0x58024400
 800b624:	03d09000 	.word	0x03d09000
 800b628:	003d0900 	.word	0x003d0900
 800b62c:	0800cd08 	.word	0x0800cd08

0800b630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00a      	beq.n	800b65a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	430a      	orrs	r2, r1
 800b658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b65e:	f003 0302 	and.w	r3, r3, #2
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00a      	beq.n	800b67c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	430a      	orrs	r2, r1
 800b67a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b680:	f003 0304 	and.w	r3, r3, #4
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00a      	beq.n	800b69e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	430a      	orrs	r2, r1
 800b69c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a2:	f003 0308 	and.w	r3, r3, #8
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	430a      	orrs	r2, r1
 800b6be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c4:	f003 0310 	and.w	r3, r3, #16
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00a      	beq.n	800b6e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	430a      	orrs	r2, r1
 800b6e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e6:	f003 0320 	and.w	r3, r3, #32
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00a      	beq.n	800b704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	430a      	orrs	r2, r1
 800b702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d01a      	beq.n	800b746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	430a      	orrs	r2, r1
 800b724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b72a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b72e:	d10a      	bne.n	800b746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	430a      	orrs	r2, r1
 800b744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b74a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00a      	beq.n	800b768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	430a      	orrs	r2, r1
 800b766:	605a      	str	r2, [r3, #4]
  }
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af02      	add	r7, sp, #8
 800b77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b784:	f7f9 ff5e 	bl	8005644 <HAL_GetTick>
 800b788:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 0308 	and.w	r3, r3, #8
 800b794:	2b08      	cmp	r3, #8
 800b796:	d10e      	bne.n	800b7b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f82f 	bl	800b80a <UART_WaitOnFlagUntilTimeout>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d001      	beq.n	800b7b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e025      	b.n	800b802 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0304 	and.w	r3, r3, #4
 800b7c0:	2b04      	cmp	r3, #4
 800b7c2:	d10e      	bne.n	800b7e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f819 	bl	800b80a <UART_WaitOnFlagUntilTimeout>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7de:	2303      	movs	r3, #3
 800b7e0:	e00f      	b.n	800b802 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2220      	movs	r2, #32
 800b7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b09c      	sub	sp, #112	; 0x70
 800b80e:	af00      	add	r7, sp, #0
 800b810:	60f8      	str	r0, [r7, #12]
 800b812:	60b9      	str	r1, [r7, #8]
 800b814:	603b      	str	r3, [r7, #0]
 800b816:	4613      	mov	r3, r2
 800b818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b81a:	e0a9      	b.n	800b970 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b81c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b822:	f000 80a5 	beq.w	800b970 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b826:	f7f9 ff0d 	bl	8005644 <HAL_GetTick>
 800b82a:	4602      	mov	r2, r0
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b832:	429a      	cmp	r2, r3
 800b834:	d302      	bcc.n	800b83c <UART_WaitOnFlagUntilTimeout+0x32>
 800b836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d140      	bne.n	800b8be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b844:	e853 3f00 	ldrex	r3, [r3]
 800b848:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b84c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b850:	667b      	str	r3, [r7, #100]	; 0x64
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	461a      	mov	r2, r3
 800b858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b85a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b85c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b862:	e841 2300 	strex	r3, r2, [r1]
 800b866:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1e6      	bne.n	800b83c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3308      	adds	r3, #8
 800b874:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b878:	e853 3f00 	ldrex	r3, [r3]
 800b87c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b880:	f023 0301 	bic.w	r3, r3, #1
 800b884:	663b      	str	r3, [r7, #96]	; 0x60
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3308      	adds	r3, #8
 800b88c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b88e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b890:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b892:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b896:	e841 2300 	strex	r3, r2, [r1]
 800b89a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1e5      	bne.n	800b86e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2220      	movs	r2, #32
 800b8ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	e069      	b.n	800b992 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 0304 	and.w	r3, r3, #4
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d051      	beq.n	800b970 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8da:	d149      	bne.n	800b970 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ee:	e853 3f00 	ldrex	r3, [r3]
 800b8f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b8fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	461a      	mov	r2, r3
 800b902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b904:	637b      	str	r3, [r7, #52]	; 0x34
 800b906:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b90a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b90c:	e841 2300 	strex	r3, r2, [r1]
 800b910:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1e6      	bne.n	800b8e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3308      	adds	r3, #8
 800b91e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	e853 3f00 	ldrex	r3, [r3]
 800b926:	613b      	str	r3, [r7, #16]
   return(result);
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	f023 0301 	bic.w	r3, r3, #1
 800b92e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3308      	adds	r3, #8
 800b936:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b938:	623a      	str	r2, [r7, #32]
 800b93a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93c:	69f9      	ldr	r1, [r7, #28]
 800b93e:	6a3a      	ldr	r2, [r7, #32]
 800b940:	e841 2300 	strex	r3, r2, [r1]
 800b944:	61bb      	str	r3, [r7, #24]
   return(result);
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1e5      	bne.n	800b918 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2220      	movs	r2, #32
 800b950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2220      	movs	r2, #32
 800b958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2220      	movs	r2, #32
 800b960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2200      	movs	r2, #0
 800b968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e010      	b.n	800b992 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	69da      	ldr	r2, [r3, #28]
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	4013      	ands	r3, r2
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	bf0c      	ite	eq
 800b980:	2301      	moveq	r3, #1
 800b982:	2300      	movne	r3, #0
 800b984:	b2db      	uxtb	r3, r3
 800b986:	461a      	mov	r2, r3
 800b988:	79fb      	ldrb	r3, [r7, #7]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	f43f af46 	beq.w	800b81c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3770      	adds	r7, #112	; 0x70
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
	...

0800b99c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b095      	sub	sp, #84	; 0x54
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ac:	e853 3f00 	ldrex	r3, [r3]
 800b9b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9c2:	643b      	str	r3, [r7, #64]	; 0x40
 800b9c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9ca:	e841 2300 	strex	r3, r2, [r1]
 800b9ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1e6      	bne.n	800b9a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3308      	adds	r3, #8
 800b9dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9de:	6a3b      	ldr	r3, [r7, #32]
 800b9e0:	e853 3f00 	ldrex	r3, [r3]
 800b9e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9e6:	69fa      	ldr	r2, [r7, #28]
 800b9e8:	4b1e      	ldr	r3, [pc, #120]	; (800ba64 <UART_EndRxTransfer+0xc8>)
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9fe:	e841 2300 	strex	r3, r2, [r1]
 800ba02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1e5      	bne.n	800b9d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d118      	bne.n	800ba44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	e853 3f00 	ldrex	r3, [r3]
 800ba1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	f023 0310 	bic.w	r3, r3, #16
 800ba26:	647b      	str	r3, [r7, #68]	; 0x44
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba30:	61bb      	str	r3, [r7, #24]
 800ba32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba34:	6979      	ldr	r1, [r7, #20]
 800ba36:	69ba      	ldr	r2, [r7, #24]
 800ba38:	e841 2300 	strex	r3, r2, [r1]
 800ba3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1e6      	bne.n	800ba12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2220      	movs	r2, #32
 800ba48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ba58:	bf00      	nop
 800ba5a:	3754      	adds	r7, #84	; 0x54
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	effffffe 	.word	0xeffffffe

0800ba68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f7ff f854 	bl	800ab34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba8c:	bf00      	nop
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b088      	sub	sp, #32
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	e853 3f00 	ldrex	r3, [r3]
 800baa8:	60bb      	str	r3, [r7, #8]
   return(result);
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bab0:	61fb      	str	r3, [r7, #28]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	61bb      	str	r3, [r7, #24]
 800babc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800babe:	6979      	ldr	r1, [r7, #20]
 800bac0:	69ba      	ldr	r2, [r7, #24]
 800bac2:	e841 2300 	strex	r3, r2, [r1]
 800bac6:	613b      	str	r3, [r7, #16]
   return(result);
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1e6      	bne.n	800ba9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2220      	movs	r2, #32
 800bad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7ff f81f 	bl	800ab20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bae2:	bf00      	nop
 800bae4:	3720      	adds	r7, #32
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800baea:	b480      	push	{r7}
 800baec:	b083      	sub	sp, #12
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800baf2:	bf00      	nop
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bafe:	b480      	push	{r7}
 800bb00:	b083      	sub	sp, #12
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bb06:	bf00      	nop
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b083      	sub	sp, #12
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb1a:	bf00      	nop
 800bb1c:	370c      	adds	r7, #12
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b085      	sub	sp, #20
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d101      	bne.n	800bb3c <HAL_UARTEx_DisableFifoMode+0x16>
 800bb38:	2302      	movs	r3, #2
 800bb3a:	e027      	b.n	800bb8c <HAL_UARTEx_DisableFifoMode+0x66>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2224      	movs	r2, #36	; 0x24
 800bb48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f022 0201 	bic.w	r2, r2, #1
 800bb62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bb6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2220      	movs	r2, #32
 800bb7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d101      	bne.n	800bbb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bbac:	2302      	movs	r3, #2
 800bbae:	e02d      	b.n	800bc0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2224      	movs	r2, #36	; 0x24
 800bbbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f022 0201 	bic.w	r2, r2, #1
 800bbd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 f84f 	bl	800bc90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2220      	movs	r2, #32
 800bbfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d101      	bne.n	800bc2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc28:	2302      	movs	r3, #2
 800bc2a:	e02d      	b.n	800bc88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2224      	movs	r2, #36	; 0x24
 800bc38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f022 0201 	bic.w	r2, r2, #1
 800bc52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	430a      	orrs	r2, r1
 800bc66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f811 	bl	800bc90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2220      	movs	r2, #32
 800bc7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d108      	bne.n	800bcb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bcb0:	e031      	b.n	800bd16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bcb2:	2310      	movs	r3, #16
 800bcb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bcb6:	2310      	movs	r3, #16
 800bcb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	0e5b      	lsrs	r3, r3, #25
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	f003 0307 	and.w	r3, r3, #7
 800bcc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	0f5b      	lsrs	r3, r3, #29
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	f003 0307 	and.w	r3, r3, #7
 800bcd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcda:	7bbb      	ldrb	r3, [r7, #14]
 800bcdc:	7b3a      	ldrb	r2, [r7, #12]
 800bcde:	4911      	ldr	r1, [pc, #68]	; (800bd24 <UARTEx_SetNbDataToProcess+0x94>)
 800bce0:	5c8a      	ldrb	r2, [r1, r2]
 800bce2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bce6:	7b3a      	ldrb	r2, [r7, #12]
 800bce8:	490f      	ldr	r1, [pc, #60]	; (800bd28 <UARTEx_SetNbDataToProcess+0x98>)
 800bcea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcec:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
 800bcfa:	7b7a      	ldrb	r2, [r7, #13]
 800bcfc:	4909      	ldr	r1, [pc, #36]	; (800bd24 <UARTEx_SetNbDataToProcess+0x94>)
 800bcfe:	5c8a      	ldrb	r2, [r1, r2]
 800bd00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd04:	7b7a      	ldrb	r2, [r7, #13]
 800bd06:	4908      	ldr	r1, [pc, #32]	; (800bd28 <UARTEx_SetNbDataToProcess+0x98>)
 800bd08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bd16:	bf00      	nop
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	0800cd20 	.word	0x0800cd20
 800bd28:	0800cd28 	.word	0x0800cd28

0800bd2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd2c:	b084      	sub	sp, #16
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	f107 001c 	add.w	r0, r7, #28
 800bd3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d120      	bne.n	800bd86 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	68da      	ldr	r2, [r3, #12]
 800bd54:	4b2a      	ldr	r3, [pc, #168]	; (800be00 <USB_CoreInit+0xd4>)
 800bd56:	4013      	ands	r3, r2
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bd68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d105      	bne.n	800bd7a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 f914 	bl	800bfa8 <USB_CoreReset>
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]
 800bd84:	e01a      	b.n	800bdbc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f908 	bl	800bfa8 <USB_CoreReset>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bd9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d106      	bne.n	800bdb0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	639a      	str	r2, [r3, #56]	; 0x38
 800bdae:	e005      	b.n	800bdbc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d116      	bne.n	800bdf0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bdd0:	4b0c      	ldr	r3, [pc, #48]	; (800be04 <USB_CoreInit+0xd8>)
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	f043 0206 	orr.w	r2, r3, #6
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	f043 0220 	orr.w	r2, r3, #32
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bdf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdfc:	b004      	add	sp, #16
 800bdfe:	4770      	bx	lr
 800be00:	ffbdffbf 	.word	0xffbdffbf
 800be04:	03ee0000 	.word	0x03ee0000

0800be08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	f023 0201 	bic.w	r2, r3, #1
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	460b      	mov	r3, r1
 800be34:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800be36:	2300      	movs	r3, #0
 800be38:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800be46:	78fb      	ldrb	r3, [r7, #3]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d115      	bne.n	800be78 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800be58:	2001      	movs	r0, #1
 800be5a:	f7f9 fbff 	bl	800565c <HAL_Delay>
      ms++;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3301      	adds	r3, #1
 800be62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f891 	bl	800bf8c <USB_GetMode>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d01e      	beq.n	800beae <USB_SetCurrentMode+0x84>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b31      	cmp	r3, #49	; 0x31
 800be74:	d9f0      	bls.n	800be58 <USB_SetCurrentMode+0x2e>
 800be76:	e01a      	b.n	800beae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800be78:	78fb      	ldrb	r3, [r7, #3]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d115      	bne.n	800beaa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800be8a:	2001      	movs	r0, #1
 800be8c:	f7f9 fbe6 	bl	800565c <HAL_Delay>
      ms++;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3301      	adds	r3, #1
 800be94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f878 	bl	800bf8c <USB_GetMode>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d005      	beq.n	800beae <USB_SetCurrentMode+0x84>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2b31      	cmp	r3, #49	; 0x31
 800bea6:	d9f0      	bls.n	800be8a <USB_SetCurrentMode+0x60>
 800bea8:	e001      	b.n	800beae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	e005      	b.n	800beba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2b32      	cmp	r3, #50	; 0x32
 800beb2:	d101      	bne.n	800beb8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	e000      	b.n	800beba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
	...

0800bec4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bece:	2300      	movs	r3, #0
 800bed0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3301      	adds	r3, #1
 800bed6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	4a13      	ldr	r2, [pc, #76]	; (800bf28 <USB_FlushTxFifo+0x64>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d901      	bls.n	800bee4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bee0:	2303      	movs	r3, #3
 800bee2:	e01b      	b.n	800bf1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	daf2      	bge.n	800bed2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	019b      	lsls	r3, r3, #6
 800bef4:	f043 0220 	orr.w	r2, r3, #32
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3301      	adds	r3, #1
 800bf00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	4a08      	ldr	r2, [pc, #32]	; (800bf28 <USB_FlushTxFifo+0x64>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d901      	bls.n	800bf0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	e006      	b.n	800bf1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	f003 0320 	and.w	r3, r3, #32
 800bf16:	2b20      	cmp	r3, #32
 800bf18:	d0f0      	beq.n	800befc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3714      	adds	r7, #20
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	00030d40 	.word	0x00030d40

0800bf2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf34:	2300      	movs	r3, #0
 800bf36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	4a11      	ldr	r2, [pc, #68]	; (800bf88 <USB_FlushRxFifo+0x5c>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d901      	bls.n	800bf4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bf46:	2303      	movs	r3, #3
 800bf48:	e018      	b.n	800bf7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	daf2      	bge.n	800bf38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bf52:	2300      	movs	r3, #0
 800bf54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2210      	movs	r2, #16
 800bf5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	4a08      	ldr	r2, [pc, #32]	; (800bf88 <USB_FlushRxFifo+0x5c>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d901      	bls.n	800bf6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	e006      	b.n	800bf7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	f003 0310 	and.w	r3, r3, #16
 800bf76:	2b10      	cmp	r3, #16
 800bf78:	d0f0      	beq.n	800bf5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr
 800bf88:	00030d40 	.word	0x00030d40

0800bf8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	695b      	ldr	r3, [r3, #20]
 800bf98:	f003 0301 	and.w	r3, r3, #1
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	4a13      	ldr	r2, [pc, #76]	; (800c00c <USB_CoreReset+0x64>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d901      	bls.n	800bfc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bfc2:	2303      	movs	r3, #3
 800bfc4:	e01b      	b.n	800bffe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	daf2      	bge.n	800bfb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	f043 0201 	orr.w	r2, r3, #1
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	4a09      	ldr	r2, [pc, #36]	; (800c00c <USB_CoreReset+0x64>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d901      	bls.n	800bff0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bfec:	2303      	movs	r3, #3
 800bfee:	e006      	b.n	800bffe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	f003 0301 	and.w	r3, r3, #1
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d0f0      	beq.n	800bfde <USB_CoreReset+0x36>

  return HAL_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3714      	adds	r7, #20
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	00030d40 	.word	0x00030d40

0800c010 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c010:	b084      	sub	sp, #16
 800c012:	b580      	push	{r7, lr}
 800c014:	b086      	sub	sp, #24
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c01e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c022:	2300      	movs	r3, #0
 800c024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c030:	461a      	mov	r2, r3
 800c032:	2300      	movs	r3, #0
 800c034:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c046:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c056:	2b00      	cmp	r3, #0
 800c058:	d018      	beq.n	800c08c <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d10a      	bne.n	800c076 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c06e:	f043 0304 	orr.w	r3, r3, #4
 800c072:	6013      	str	r3, [r2, #0]
 800c074:	e014      	b.n	800c0a0 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c084:	f023 0304 	bic.w	r3, r3, #4
 800c088:	6013      	str	r3, [r2, #0]
 800c08a:	e009      	b.n	800c0a0 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c09a:	f023 0304 	bic.w	r3, r3, #4
 800c09e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0a0:	2110      	movs	r1, #16
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7ff ff0e 	bl	800bec4 <USB_FlushTxFifo>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7ff ff3a 	bl	800bf2c <USB_FlushRxFifo>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	613b      	str	r3, [r7, #16]
 800c0c6:	e015      	b.n	800c0f4 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	015a      	lsls	r2, r3, #5
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0da:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	015a      	lsls	r2, r3, #5
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	613b      	str	r3, [r7, #16]
 800c0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d3e5      	bcc.n	800c0c8 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f04f 32ff 	mov.w	r2, #4294967295
 800c108:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c10e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00b      	beq.n	800c12e <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c11c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a13      	ldr	r2, [pc, #76]	; (800c170 <USB_HostInit+0x160>)
 800c122:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a13      	ldr	r2, [pc, #76]	; (800c174 <USB_HostInit+0x164>)
 800c128:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c12c:	e009      	b.n	800c142 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2280      	movs	r2, #128	; 0x80
 800c132:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a10      	ldr	r2, [pc, #64]	; (800c178 <USB_HostInit+0x168>)
 800c138:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a0f      	ldr	r2, [pc, #60]	; (800c17c <USB_HostInit+0x16c>)
 800c13e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	2b00      	cmp	r3, #0
 800c146:	d105      	bne.n	800c154 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	699b      	ldr	r3, [r3, #24]
 800c14c:	f043 0210 	orr.w	r2, r3, #16
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	699a      	ldr	r2, [r3, #24]
 800c158:	4b09      	ldr	r3, [pc, #36]	; (800c180 <USB_HostInit+0x170>)
 800c15a:	4313      	orrs	r3, r2
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c160:	7dfb      	ldrb	r3, [r7, #23]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c16c:	b004      	add	sp, #16
 800c16e:	4770      	bx	lr
 800c170:	01000200 	.word	0x01000200
 800c174:	00e00300 	.word	0x00e00300
 800c178:	00600080 	.word	0x00600080
 800c17c:	004000e0 	.word	0x004000e0
 800c180:	a3200008 	.word	0xa3200008

0800c184 <__libc_init_array>:
 800c184:	b570      	push	{r4, r5, r6, lr}
 800c186:	4d0d      	ldr	r5, [pc, #52]	; (800c1bc <__libc_init_array+0x38>)
 800c188:	4c0d      	ldr	r4, [pc, #52]	; (800c1c0 <__libc_init_array+0x3c>)
 800c18a:	1b64      	subs	r4, r4, r5
 800c18c:	10a4      	asrs	r4, r4, #2
 800c18e:	2600      	movs	r6, #0
 800c190:	42a6      	cmp	r6, r4
 800c192:	d109      	bne.n	800c1a8 <__libc_init_array+0x24>
 800c194:	4d0b      	ldr	r5, [pc, #44]	; (800c1c4 <__libc_init_array+0x40>)
 800c196:	4c0c      	ldr	r4, [pc, #48]	; (800c1c8 <__libc_init_array+0x44>)
 800c198:	f000 fcac 	bl	800caf4 <_init>
 800c19c:	1b64      	subs	r4, r4, r5
 800c19e:	10a4      	asrs	r4, r4, #2
 800c1a0:	2600      	movs	r6, #0
 800c1a2:	42a6      	cmp	r6, r4
 800c1a4:	d105      	bne.n	800c1b2 <__libc_init_array+0x2e>
 800c1a6:	bd70      	pop	{r4, r5, r6, pc}
 800c1a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ac:	4798      	blx	r3
 800c1ae:	3601      	adds	r6, #1
 800c1b0:	e7ee      	b.n	800c190 <__libc_init_array+0xc>
 800c1b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1b6:	4798      	blx	r3
 800c1b8:	3601      	adds	r6, #1
 800c1ba:	e7f2      	b.n	800c1a2 <__libc_init_array+0x1e>
 800c1bc:	0800cd6c 	.word	0x0800cd6c
 800c1c0:	0800cd6c 	.word	0x0800cd6c
 800c1c4:	0800cd6c 	.word	0x0800cd6c
 800c1c8:	0800cd70 	.word	0x0800cd70

0800c1cc <memcmp>:
 800c1cc:	b510      	push	{r4, lr}
 800c1ce:	3901      	subs	r1, #1
 800c1d0:	4402      	add	r2, r0
 800c1d2:	4290      	cmp	r0, r2
 800c1d4:	d101      	bne.n	800c1da <memcmp+0xe>
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	e005      	b.n	800c1e6 <memcmp+0x1a>
 800c1da:	7803      	ldrb	r3, [r0, #0]
 800c1dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	d001      	beq.n	800c1e8 <memcmp+0x1c>
 800c1e4:	1b18      	subs	r0, r3, r4
 800c1e6:	bd10      	pop	{r4, pc}
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	e7f2      	b.n	800c1d2 <memcmp+0x6>

0800c1ec <memcpy>:
 800c1ec:	440a      	add	r2, r1
 800c1ee:	4291      	cmp	r1, r2
 800c1f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1f4:	d100      	bne.n	800c1f8 <memcpy+0xc>
 800c1f6:	4770      	bx	lr
 800c1f8:	b510      	push	{r4, lr}
 800c1fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c202:	4291      	cmp	r1, r2
 800c204:	d1f9      	bne.n	800c1fa <memcpy+0xe>
 800c206:	bd10      	pop	{r4, pc}

0800c208 <memset>:
 800c208:	4402      	add	r2, r0
 800c20a:	4603      	mov	r3, r0
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d100      	bne.n	800c212 <memset+0xa>
 800c210:	4770      	bx	lr
 800c212:	f803 1b01 	strb.w	r1, [r3], #1
 800c216:	e7f9      	b.n	800c20c <memset+0x4>

0800c218 <siprintf>:
 800c218:	b40e      	push	{r1, r2, r3}
 800c21a:	b500      	push	{lr}
 800c21c:	b09c      	sub	sp, #112	; 0x70
 800c21e:	ab1d      	add	r3, sp, #116	; 0x74
 800c220:	9002      	str	r0, [sp, #8]
 800c222:	9006      	str	r0, [sp, #24]
 800c224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c228:	4809      	ldr	r0, [pc, #36]	; (800c250 <siprintf+0x38>)
 800c22a:	9107      	str	r1, [sp, #28]
 800c22c:	9104      	str	r1, [sp, #16]
 800c22e:	4909      	ldr	r1, [pc, #36]	; (800c254 <siprintf+0x3c>)
 800c230:	f853 2b04 	ldr.w	r2, [r3], #4
 800c234:	9105      	str	r1, [sp, #20]
 800c236:	6800      	ldr	r0, [r0, #0]
 800c238:	9301      	str	r3, [sp, #4]
 800c23a:	a902      	add	r1, sp, #8
 800c23c:	f000 f868 	bl	800c310 <_svfiprintf_r>
 800c240:	9b02      	ldr	r3, [sp, #8]
 800c242:	2200      	movs	r2, #0
 800c244:	701a      	strb	r2, [r3, #0]
 800c246:	b01c      	add	sp, #112	; 0x70
 800c248:	f85d eb04 	ldr.w	lr, [sp], #4
 800c24c:	b003      	add	sp, #12
 800c24e:	4770      	bx	lr
 800c250:	24000020 	.word	0x24000020
 800c254:	ffff0208 	.word	0xffff0208

0800c258 <__ssputs_r>:
 800c258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c25c:	688e      	ldr	r6, [r1, #8]
 800c25e:	429e      	cmp	r6, r3
 800c260:	4682      	mov	sl, r0
 800c262:	460c      	mov	r4, r1
 800c264:	4690      	mov	r8, r2
 800c266:	461f      	mov	r7, r3
 800c268:	d838      	bhi.n	800c2dc <__ssputs_r+0x84>
 800c26a:	898a      	ldrh	r2, [r1, #12]
 800c26c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c270:	d032      	beq.n	800c2d8 <__ssputs_r+0x80>
 800c272:	6825      	ldr	r5, [r4, #0]
 800c274:	6909      	ldr	r1, [r1, #16]
 800c276:	eba5 0901 	sub.w	r9, r5, r1
 800c27a:	6965      	ldr	r5, [r4, #20]
 800c27c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c284:	3301      	adds	r3, #1
 800c286:	444b      	add	r3, r9
 800c288:	106d      	asrs	r5, r5, #1
 800c28a:	429d      	cmp	r5, r3
 800c28c:	bf38      	it	cc
 800c28e:	461d      	movcc	r5, r3
 800c290:	0553      	lsls	r3, r2, #21
 800c292:	d531      	bpl.n	800c2f8 <__ssputs_r+0xa0>
 800c294:	4629      	mov	r1, r5
 800c296:	f000 fb55 	bl	800c944 <_malloc_r>
 800c29a:	4606      	mov	r6, r0
 800c29c:	b950      	cbnz	r0, 800c2b4 <__ssputs_r+0x5c>
 800c29e:	230c      	movs	r3, #12
 800c2a0:	f8ca 3000 	str.w	r3, [sl]
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2aa:	81a3      	strh	r3, [r4, #12]
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b4:	6921      	ldr	r1, [r4, #16]
 800c2b6:	464a      	mov	r2, r9
 800c2b8:	f7ff ff98 	bl	800c1ec <memcpy>
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2c6:	81a3      	strh	r3, [r4, #12]
 800c2c8:	6126      	str	r6, [r4, #16]
 800c2ca:	6165      	str	r5, [r4, #20]
 800c2cc:	444e      	add	r6, r9
 800c2ce:	eba5 0509 	sub.w	r5, r5, r9
 800c2d2:	6026      	str	r6, [r4, #0]
 800c2d4:	60a5      	str	r5, [r4, #8]
 800c2d6:	463e      	mov	r6, r7
 800c2d8:	42be      	cmp	r6, r7
 800c2da:	d900      	bls.n	800c2de <__ssputs_r+0x86>
 800c2dc:	463e      	mov	r6, r7
 800c2de:	6820      	ldr	r0, [r4, #0]
 800c2e0:	4632      	mov	r2, r6
 800c2e2:	4641      	mov	r1, r8
 800c2e4:	f000 faa8 	bl	800c838 <memmove>
 800c2e8:	68a3      	ldr	r3, [r4, #8]
 800c2ea:	1b9b      	subs	r3, r3, r6
 800c2ec:	60a3      	str	r3, [r4, #8]
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	4433      	add	r3, r6
 800c2f2:	6023      	str	r3, [r4, #0]
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	e7db      	b.n	800c2b0 <__ssputs_r+0x58>
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	f000 fb97 	bl	800ca2c <_realloc_r>
 800c2fe:	4606      	mov	r6, r0
 800c300:	2800      	cmp	r0, #0
 800c302:	d1e1      	bne.n	800c2c8 <__ssputs_r+0x70>
 800c304:	6921      	ldr	r1, [r4, #16]
 800c306:	4650      	mov	r0, sl
 800c308:	f000 fab0 	bl	800c86c <_free_r>
 800c30c:	e7c7      	b.n	800c29e <__ssputs_r+0x46>
	...

0800c310 <_svfiprintf_r>:
 800c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	4698      	mov	r8, r3
 800c316:	898b      	ldrh	r3, [r1, #12]
 800c318:	061b      	lsls	r3, r3, #24
 800c31a:	b09d      	sub	sp, #116	; 0x74
 800c31c:	4607      	mov	r7, r0
 800c31e:	460d      	mov	r5, r1
 800c320:	4614      	mov	r4, r2
 800c322:	d50e      	bpl.n	800c342 <_svfiprintf_r+0x32>
 800c324:	690b      	ldr	r3, [r1, #16]
 800c326:	b963      	cbnz	r3, 800c342 <_svfiprintf_r+0x32>
 800c328:	2140      	movs	r1, #64	; 0x40
 800c32a:	f000 fb0b 	bl	800c944 <_malloc_r>
 800c32e:	6028      	str	r0, [r5, #0]
 800c330:	6128      	str	r0, [r5, #16]
 800c332:	b920      	cbnz	r0, 800c33e <_svfiprintf_r+0x2e>
 800c334:	230c      	movs	r3, #12
 800c336:	603b      	str	r3, [r7, #0]
 800c338:	f04f 30ff 	mov.w	r0, #4294967295
 800c33c:	e0d1      	b.n	800c4e2 <_svfiprintf_r+0x1d2>
 800c33e:	2340      	movs	r3, #64	; 0x40
 800c340:	616b      	str	r3, [r5, #20]
 800c342:	2300      	movs	r3, #0
 800c344:	9309      	str	r3, [sp, #36]	; 0x24
 800c346:	2320      	movs	r3, #32
 800c348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c34c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c350:	2330      	movs	r3, #48	; 0x30
 800c352:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c4fc <_svfiprintf_r+0x1ec>
 800c356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c35a:	f04f 0901 	mov.w	r9, #1
 800c35e:	4623      	mov	r3, r4
 800c360:	469a      	mov	sl, r3
 800c362:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c366:	b10a      	cbz	r2, 800c36c <_svfiprintf_r+0x5c>
 800c368:	2a25      	cmp	r2, #37	; 0x25
 800c36a:	d1f9      	bne.n	800c360 <_svfiprintf_r+0x50>
 800c36c:	ebba 0b04 	subs.w	fp, sl, r4
 800c370:	d00b      	beq.n	800c38a <_svfiprintf_r+0x7a>
 800c372:	465b      	mov	r3, fp
 800c374:	4622      	mov	r2, r4
 800c376:	4629      	mov	r1, r5
 800c378:	4638      	mov	r0, r7
 800c37a:	f7ff ff6d 	bl	800c258 <__ssputs_r>
 800c37e:	3001      	adds	r0, #1
 800c380:	f000 80aa 	beq.w	800c4d8 <_svfiprintf_r+0x1c8>
 800c384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c386:	445a      	add	r2, fp
 800c388:	9209      	str	r2, [sp, #36]	; 0x24
 800c38a:	f89a 3000 	ldrb.w	r3, [sl]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f000 80a2 	beq.w	800c4d8 <_svfiprintf_r+0x1c8>
 800c394:	2300      	movs	r3, #0
 800c396:	f04f 32ff 	mov.w	r2, #4294967295
 800c39a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c39e:	f10a 0a01 	add.w	sl, sl, #1
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	9307      	str	r3, [sp, #28]
 800c3a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c3ac:	4654      	mov	r4, sl
 800c3ae:	2205      	movs	r2, #5
 800c3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3b4:	4851      	ldr	r0, [pc, #324]	; (800c4fc <_svfiprintf_r+0x1ec>)
 800c3b6:	f7f3 ffeb 	bl	8000390 <memchr>
 800c3ba:	9a04      	ldr	r2, [sp, #16]
 800c3bc:	b9d8      	cbnz	r0, 800c3f6 <_svfiprintf_r+0xe6>
 800c3be:	06d0      	lsls	r0, r2, #27
 800c3c0:	bf44      	itt	mi
 800c3c2:	2320      	movmi	r3, #32
 800c3c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3c8:	0711      	lsls	r1, r2, #28
 800c3ca:	bf44      	itt	mi
 800c3cc:	232b      	movmi	r3, #43	; 0x2b
 800c3ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c3d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3d8:	d015      	beq.n	800c406 <_svfiprintf_r+0xf6>
 800c3da:	9a07      	ldr	r2, [sp, #28]
 800c3dc:	4654      	mov	r4, sl
 800c3de:	2000      	movs	r0, #0
 800c3e0:	f04f 0c0a 	mov.w	ip, #10
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3ea:	3b30      	subs	r3, #48	; 0x30
 800c3ec:	2b09      	cmp	r3, #9
 800c3ee:	d94e      	bls.n	800c48e <_svfiprintf_r+0x17e>
 800c3f0:	b1b0      	cbz	r0, 800c420 <_svfiprintf_r+0x110>
 800c3f2:	9207      	str	r2, [sp, #28]
 800c3f4:	e014      	b.n	800c420 <_svfiprintf_r+0x110>
 800c3f6:	eba0 0308 	sub.w	r3, r0, r8
 800c3fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c3fe:	4313      	orrs	r3, r2
 800c400:	9304      	str	r3, [sp, #16]
 800c402:	46a2      	mov	sl, r4
 800c404:	e7d2      	b.n	800c3ac <_svfiprintf_r+0x9c>
 800c406:	9b03      	ldr	r3, [sp, #12]
 800c408:	1d19      	adds	r1, r3, #4
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	9103      	str	r1, [sp, #12]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	bfbb      	ittet	lt
 800c412:	425b      	neglt	r3, r3
 800c414:	f042 0202 	orrlt.w	r2, r2, #2
 800c418:	9307      	strge	r3, [sp, #28]
 800c41a:	9307      	strlt	r3, [sp, #28]
 800c41c:	bfb8      	it	lt
 800c41e:	9204      	strlt	r2, [sp, #16]
 800c420:	7823      	ldrb	r3, [r4, #0]
 800c422:	2b2e      	cmp	r3, #46	; 0x2e
 800c424:	d10c      	bne.n	800c440 <_svfiprintf_r+0x130>
 800c426:	7863      	ldrb	r3, [r4, #1]
 800c428:	2b2a      	cmp	r3, #42	; 0x2a
 800c42a:	d135      	bne.n	800c498 <_svfiprintf_r+0x188>
 800c42c:	9b03      	ldr	r3, [sp, #12]
 800c42e:	1d1a      	adds	r2, r3, #4
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	9203      	str	r2, [sp, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	bfb8      	it	lt
 800c438:	f04f 33ff 	movlt.w	r3, #4294967295
 800c43c:	3402      	adds	r4, #2
 800c43e:	9305      	str	r3, [sp, #20]
 800c440:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c50c <_svfiprintf_r+0x1fc>
 800c444:	7821      	ldrb	r1, [r4, #0]
 800c446:	2203      	movs	r2, #3
 800c448:	4650      	mov	r0, sl
 800c44a:	f7f3 ffa1 	bl	8000390 <memchr>
 800c44e:	b140      	cbz	r0, 800c462 <_svfiprintf_r+0x152>
 800c450:	2340      	movs	r3, #64	; 0x40
 800c452:	eba0 000a 	sub.w	r0, r0, sl
 800c456:	fa03 f000 	lsl.w	r0, r3, r0
 800c45a:	9b04      	ldr	r3, [sp, #16]
 800c45c:	4303      	orrs	r3, r0
 800c45e:	3401      	adds	r4, #1
 800c460:	9304      	str	r3, [sp, #16]
 800c462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c466:	4826      	ldr	r0, [pc, #152]	; (800c500 <_svfiprintf_r+0x1f0>)
 800c468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c46c:	2206      	movs	r2, #6
 800c46e:	f7f3 ff8f 	bl	8000390 <memchr>
 800c472:	2800      	cmp	r0, #0
 800c474:	d038      	beq.n	800c4e8 <_svfiprintf_r+0x1d8>
 800c476:	4b23      	ldr	r3, [pc, #140]	; (800c504 <_svfiprintf_r+0x1f4>)
 800c478:	bb1b      	cbnz	r3, 800c4c2 <_svfiprintf_r+0x1b2>
 800c47a:	9b03      	ldr	r3, [sp, #12]
 800c47c:	3307      	adds	r3, #7
 800c47e:	f023 0307 	bic.w	r3, r3, #7
 800c482:	3308      	adds	r3, #8
 800c484:	9303      	str	r3, [sp, #12]
 800c486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c488:	4433      	add	r3, r6
 800c48a:	9309      	str	r3, [sp, #36]	; 0x24
 800c48c:	e767      	b.n	800c35e <_svfiprintf_r+0x4e>
 800c48e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c492:	460c      	mov	r4, r1
 800c494:	2001      	movs	r0, #1
 800c496:	e7a5      	b.n	800c3e4 <_svfiprintf_r+0xd4>
 800c498:	2300      	movs	r3, #0
 800c49a:	3401      	adds	r4, #1
 800c49c:	9305      	str	r3, [sp, #20]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	f04f 0c0a 	mov.w	ip, #10
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4aa:	3a30      	subs	r2, #48	; 0x30
 800c4ac:	2a09      	cmp	r2, #9
 800c4ae:	d903      	bls.n	800c4b8 <_svfiprintf_r+0x1a8>
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d0c5      	beq.n	800c440 <_svfiprintf_r+0x130>
 800c4b4:	9105      	str	r1, [sp, #20]
 800c4b6:	e7c3      	b.n	800c440 <_svfiprintf_r+0x130>
 800c4b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4bc:	4604      	mov	r4, r0
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e7f0      	b.n	800c4a4 <_svfiprintf_r+0x194>
 800c4c2:	ab03      	add	r3, sp, #12
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	462a      	mov	r2, r5
 800c4c8:	4b0f      	ldr	r3, [pc, #60]	; (800c508 <_svfiprintf_r+0x1f8>)
 800c4ca:	a904      	add	r1, sp, #16
 800c4cc:	4638      	mov	r0, r7
 800c4ce:	f3af 8000 	nop.w
 800c4d2:	1c42      	adds	r2, r0, #1
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	d1d6      	bne.n	800c486 <_svfiprintf_r+0x176>
 800c4d8:	89ab      	ldrh	r3, [r5, #12]
 800c4da:	065b      	lsls	r3, r3, #25
 800c4dc:	f53f af2c 	bmi.w	800c338 <_svfiprintf_r+0x28>
 800c4e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4e2:	b01d      	add	sp, #116	; 0x74
 800c4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e8:	ab03      	add	r3, sp, #12
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	462a      	mov	r2, r5
 800c4ee:	4b06      	ldr	r3, [pc, #24]	; (800c508 <_svfiprintf_r+0x1f8>)
 800c4f0:	a904      	add	r1, sp, #16
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	f000 f87a 	bl	800c5ec <_printf_i>
 800c4f8:	e7eb      	b.n	800c4d2 <_svfiprintf_r+0x1c2>
 800c4fa:	bf00      	nop
 800c4fc:	0800cd30 	.word	0x0800cd30
 800c500:	0800cd3a 	.word	0x0800cd3a
 800c504:	00000000 	.word	0x00000000
 800c508:	0800c259 	.word	0x0800c259
 800c50c:	0800cd36 	.word	0x0800cd36

0800c510 <_printf_common>:
 800c510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c514:	4616      	mov	r6, r2
 800c516:	4699      	mov	r9, r3
 800c518:	688a      	ldr	r2, [r1, #8]
 800c51a:	690b      	ldr	r3, [r1, #16]
 800c51c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c520:	4293      	cmp	r3, r2
 800c522:	bfb8      	it	lt
 800c524:	4613      	movlt	r3, r2
 800c526:	6033      	str	r3, [r6, #0]
 800c528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c52c:	4607      	mov	r7, r0
 800c52e:	460c      	mov	r4, r1
 800c530:	b10a      	cbz	r2, 800c536 <_printf_common+0x26>
 800c532:	3301      	adds	r3, #1
 800c534:	6033      	str	r3, [r6, #0]
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	0699      	lsls	r1, r3, #26
 800c53a:	bf42      	ittt	mi
 800c53c:	6833      	ldrmi	r3, [r6, #0]
 800c53e:	3302      	addmi	r3, #2
 800c540:	6033      	strmi	r3, [r6, #0]
 800c542:	6825      	ldr	r5, [r4, #0]
 800c544:	f015 0506 	ands.w	r5, r5, #6
 800c548:	d106      	bne.n	800c558 <_printf_common+0x48>
 800c54a:	f104 0a19 	add.w	sl, r4, #25
 800c54e:	68e3      	ldr	r3, [r4, #12]
 800c550:	6832      	ldr	r2, [r6, #0]
 800c552:	1a9b      	subs	r3, r3, r2
 800c554:	42ab      	cmp	r3, r5
 800c556:	dc26      	bgt.n	800c5a6 <_printf_common+0x96>
 800c558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c55c:	1e13      	subs	r3, r2, #0
 800c55e:	6822      	ldr	r2, [r4, #0]
 800c560:	bf18      	it	ne
 800c562:	2301      	movne	r3, #1
 800c564:	0692      	lsls	r2, r2, #26
 800c566:	d42b      	bmi.n	800c5c0 <_printf_common+0xb0>
 800c568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c56c:	4649      	mov	r1, r9
 800c56e:	4638      	mov	r0, r7
 800c570:	47c0      	blx	r8
 800c572:	3001      	adds	r0, #1
 800c574:	d01e      	beq.n	800c5b4 <_printf_common+0xa4>
 800c576:	6823      	ldr	r3, [r4, #0]
 800c578:	68e5      	ldr	r5, [r4, #12]
 800c57a:	6832      	ldr	r2, [r6, #0]
 800c57c:	f003 0306 	and.w	r3, r3, #6
 800c580:	2b04      	cmp	r3, #4
 800c582:	bf08      	it	eq
 800c584:	1aad      	subeq	r5, r5, r2
 800c586:	68a3      	ldr	r3, [r4, #8]
 800c588:	6922      	ldr	r2, [r4, #16]
 800c58a:	bf0c      	ite	eq
 800c58c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c590:	2500      	movne	r5, #0
 800c592:	4293      	cmp	r3, r2
 800c594:	bfc4      	itt	gt
 800c596:	1a9b      	subgt	r3, r3, r2
 800c598:	18ed      	addgt	r5, r5, r3
 800c59a:	2600      	movs	r6, #0
 800c59c:	341a      	adds	r4, #26
 800c59e:	42b5      	cmp	r5, r6
 800c5a0:	d11a      	bne.n	800c5d8 <_printf_common+0xc8>
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	e008      	b.n	800c5b8 <_printf_common+0xa8>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	4652      	mov	r2, sl
 800c5aa:	4649      	mov	r1, r9
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	47c0      	blx	r8
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	d103      	bne.n	800c5bc <_printf_common+0xac>
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5bc:	3501      	adds	r5, #1
 800c5be:	e7c6      	b.n	800c54e <_printf_common+0x3e>
 800c5c0:	18e1      	adds	r1, r4, r3
 800c5c2:	1c5a      	adds	r2, r3, #1
 800c5c4:	2030      	movs	r0, #48	; 0x30
 800c5c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c5ca:	4422      	add	r2, r4
 800c5cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5d4:	3302      	adds	r3, #2
 800c5d6:	e7c7      	b.n	800c568 <_printf_common+0x58>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	4622      	mov	r2, r4
 800c5dc:	4649      	mov	r1, r9
 800c5de:	4638      	mov	r0, r7
 800c5e0:	47c0      	blx	r8
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	d0e6      	beq.n	800c5b4 <_printf_common+0xa4>
 800c5e6:	3601      	adds	r6, #1
 800c5e8:	e7d9      	b.n	800c59e <_printf_common+0x8e>
	...

0800c5ec <_printf_i>:
 800c5ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f0:	7e0f      	ldrb	r7, [r1, #24]
 800c5f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5f4:	2f78      	cmp	r7, #120	; 0x78
 800c5f6:	4691      	mov	r9, r2
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	469a      	mov	sl, r3
 800c5fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c602:	d807      	bhi.n	800c614 <_printf_i+0x28>
 800c604:	2f62      	cmp	r7, #98	; 0x62
 800c606:	d80a      	bhi.n	800c61e <_printf_i+0x32>
 800c608:	2f00      	cmp	r7, #0
 800c60a:	f000 80d8 	beq.w	800c7be <_printf_i+0x1d2>
 800c60e:	2f58      	cmp	r7, #88	; 0x58
 800c610:	f000 80a3 	beq.w	800c75a <_printf_i+0x16e>
 800c614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c61c:	e03a      	b.n	800c694 <_printf_i+0xa8>
 800c61e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c622:	2b15      	cmp	r3, #21
 800c624:	d8f6      	bhi.n	800c614 <_printf_i+0x28>
 800c626:	a101      	add	r1, pc, #4	; (adr r1, 800c62c <_printf_i+0x40>)
 800c628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c62c:	0800c685 	.word	0x0800c685
 800c630:	0800c699 	.word	0x0800c699
 800c634:	0800c615 	.word	0x0800c615
 800c638:	0800c615 	.word	0x0800c615
 800c63c:	0800c615 	.word	0x0800c615
 800c640:	0800c615 	.word	0x0800c615
 800c644:	0800c699 	.word	0x0800c699
 800c648:	0800c615 	.word	0x0800c615
 800c64c:	0800c615 	.word	0x0800c615
 800c650:	0800c615 	.word	0x0800c615
 800c654:	0800c615 	.word	0x0800c615
 800c658:	0800c7a5 	.word	0x0800c7a5
 800c65c:	0800c6c9 	.word	0x0800c6c9
 800c660:	0800c787 	.word	0x0800c787
 800c664:	0800c615 	.word	0x0800c615
 800c668:	0800c615 	.word	0x0800c615
 800c66c:	0800c7c7 	.word	0x0800c7c7
 800c670:	0800c615 	.word	0x0800c615
 800c674:	0800c6c9 	.word	0x0800c6c9
 800c678:	0800c615 	.word	0x0800c615
 800c67c:	0800c615 	.word	0x0800c615
 800c680:	0800c78f 	.word	0x0800c78f
 800c684:	682b      	ldr	r3, [r5, #0]
 800c686:	1d1a      	adds	r2, r3, #4
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	602a      	str	r2, [r5, #0]
 800c68c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c694:	2301      	movs	r3, #1
 800c696:	e0a3      	b.n	800c7e0 <_printf_i+0x1f4>
 800c698:	6820      	ldr	r0, [r4, #0]
 800c69a:	6829      	ldr	r1, [r5, #0]
 800c69c:	0606      	lsls	r6, r0, #24
 800c69e:	f101 0304 	add.w	r3, r1, #4
 800c6a2:	d50a      	bpl.n	800c6ba <_printf_i+0xce>
 800c6a4:	680e      	ldr	r6, [r1, #0]
 800c6a6:	602b      	str	r3, [r5, #0]
 800c6a8:	2e00      	cmp	r6, #0
 800c6aa:	da03      	bge.n	800c6b4 <_printf_i+0xc8>
 800c6ac:	232d      	movs	r3, #45	; 0x2d
 800c6ae:	4276      	negs	r6, r6
 800c6b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6b4:	485e      	ldr	r0, [pc, #376]	; (800c830 <_printf_i+0x244>)
 800c6b6:	230a      	movs	r3, #10
 800c6b8:	e019      	b.n	800c6ee <_printf_i+0x102>
 800c6ba:	680e      	ldr	r6, [r1, #0]
 800c6bc:	602b      	str	r3, [r5, #0]
 800c6be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c6c2:	bf18      	it	ne
 800c6c4:	b236      	sxthne	r6, r6
 800c6c6:	e7ef      	b.n	800c6a8 <_printf_i+0xbc>
 800c6c8:	682b      	ldr	r3, [r5, #0]
 800c6ca:	6820      	ldr	r0, [r4, #0]
 800c6cc:	1d19      	adds	r1, r3, #4
 800c6ce:	6029      	str	r1, [r5, #0]
 800c6d0:	0601      	lsls	r1, r0, #24
 800c6d2:	d501      	bpl.n	800c6d8 <_printf_i+0xec>
 800c6d4:	681e      	ldr	r6, [r3, #0]
 800c6d6:	e002      	b.n	800c6de <_printf_i+0xf2>
 800c6d8:	0646      	lsls	r6, r0, #25
 800c6da:	d5fb      	bpl.n	800c6d4 <_printf_i+0xe8>
 800c6dc:	881e      	ldrh	r6, [r3, #0]
 800c6de:	4854      	ldr	r0, [pc, #336]	; (800c830 <_printf_i+0x244>)
 800c6e0:	2f6f      	cmp	r7, #111	; 0x6f
 800c6e2:	bf0c      	ite	eq
 800c6e4:	2308      	moveq	r3, #8
 800c6e6:	230a      	movne	r3, #10
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6ee:	6865      	ldr	r5, [r4, #4]
 800c6f0:	60a5      	str	r5, [r4, #8]
 800c6f2:	2d00      	cmp	r5, #0
 800c6f4:	bfa2      	ittt	ge
 800c6f6:	6821      	ldrge	r1, [r4, #0]
 800c6f8:	f021 0104 	bicge.w	r1, r1, #4
 800c6fc:	6021      	strge	r1, [r4, #0]
 800c6fe:	b90e      	cbnz	r6, 800c704 <_printf_i+0x118>
 800c700:	2d00      	cmp	r5, #0
 800c702:	d04d      	beq.n	800c7a0 <_printf_i+0x1b4>
 800c704:	4615      	mov	r5, r2
 800c706:	fbb6 f1f3 	udiv	r1, r6, r3
 800c70a:	fb03 6711 	mls	r7, r3, r1, r6
 800c70e:	5dc7      	ldrb	r7, [r0, r7]
 800c710:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c714:	4637      	mov	r7, r6
 800c716:	42bb      	cmp	r3, r7
 800c718:	460e      	mov	r6, r1
 800c71a:	d9f4      	bls.n	800c706 <_printf_i+0x11a>
 800c71c:	2b08      	cmp	r3, #8
 800c71e:	d10b      	bne.n	800c738 <_printf_i+0x14c>
 800c720:	6823      	ldr	r3, [r4, #0]
 800c722:	07de      	lsls	r6, r3, #31
 800c724:	d508      	bpl.n	800c738 <_printf_i+0x14c>
 800c726:	6923      	ldr	r3, [r4, #16]
 800c728:	6861      	ldr	r1, [r4, #4]
 800c72a:	4299      	cmp	r1, r3
 800c72c:	bfde      	ittt	le
 800c72e:	2330      	movle	r3, #48	; 0x30
 800c730:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c734:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c738:	1b52      	subs	r2, r2, r5
 800c73a:	6122      	str	r2, [r4, #16]
 800c73c:	f8cd a000 	str.w	sl, [sp]
 800c740:	464b      	mov	r3, r9
 800c742:	aa03      	add	r2, sp, #12
 800c744:	4621      	mov	r1, r4
 800c746:	4640      	mov	r0, r8
 800c748:	f7ff fee2 	bl	800c510 <_printf_common>
 800c74c:	3001      	adds	r0, #1
 800c74e:	d14c      	bne.n	800c7ea <_printf_i+0x1fe>
 800c750:	f04f 30ff 	mov.w	r0, #4294967295
 800c754:	b004      	add	sp, #16
 800c756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c75a:	4835      	ldr	r0, [pc, #212]	; (800c830 <_printf_i+0x244>)
 800c75c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c760:	6829      	ldr	r1, [r5, #0]
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	f851 6b04 	ldr.w	r6, [r1], #4
 800c768:	6029      	str	r1, [r5, #0]
 800c76a:	061d      	lsls	r5, r3, #24
 800c76c:	d514      	bpl.n	800c798 <_printf_i+0x1ac>
 800c76e:	07df      	lsls	r7, r3, #31
 800c770:	bf44      	itt	mi
 800c772:	f043 0320 	orrmi.w	r3, r3, #32
 800c776:	6023      	strmi	r3, [r4, #0]
 800c778:	b91e      	cbnz	r6, 800c782 <_printf_i+0x196>
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	f023 0320 	bic.w	r3, r3, #32
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	2310      	movs	r3, #16
 800c784:	e7b0      	b.n	800c6e8 <_printf_i+0xfc>
 800c786:	6823      	ldr	r3, [r4, #0]
 800c788:	f043 0320 	orr.w	r3, r3, #32
 800c78c:	6023      	str	r3, [r4, #0]
 800c78e:	2378      	movs	r3, #120	; 0x78
 800c790:	4828      	ldr	r0, [pc, #160]	; (800c834 <_printf_i+0x248>)
 800c792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c796:	e7e3      	b.n	800c760 <_printf_i+0x174>
 800c798:	0659      	lsls	r1, r3, #25
 800c79a:	bf48      	it	mi
 800c79c:	b2b6      	uxthmi	r6, r6
 800c79e:	e7e6      	b.n	800c76e <_printf_i+0x182>
 800c7a0:	4615      	mov	r5, r2
 800c7a2:	e7bb      	b.n	800c71c <_printf_i+0x130>
 800c7a4:	682b      	ldr	r3, [r5, #0]
 800c7a6:	6826      	ldr	r6, [r4, #0]
 800c7a8:	6961      	ldr	r1, [r4, #20]
 800c7aa:	1d18      	adds	r0, r3, #4
 800c7ac:	6028      	str	r0, [r5, #0]
 800c7ae:	0635      	lsls	r5, r6, #24
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	d501      	bpl.n	800c7b8 <_printf_i+0x1cc>
 800c7b4:	6019      	str	r1, [r3, #0]
 800c7b6:	e002      	b.n	800c7be <_printf_i+0x1d2>
 800c7b8:	0670      	lsls	r0, r6, #25
 800c7ba:	d5fb      	bpl.n	800c7b4 <_printf_i+0x1c8>
 800c7bc:	8019      	strh	r1, [r3, #0]
 800c7be:	2300      	movs	r3, #0
 800c7c0:	6123      	str	r3, [r4, #16]
 800c7c2:	4615      	mov	r5, r2
 800c7c4:	e7ba      	b.n	800c73c <_printf_i+0x150>
 800c7c6:	682b      	ldr	r3, [r5, #0]
 800c7c8:	1d1a      	adds	r2, r3, #4
 800c7ca:	602a      	str	r2, [r5, #0]
 800c7cc:	681d      	ldr	r5, [r3, #0]
 800c7ce:	6862      	ldr	r2, [r4, #4]
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	f7f3 fddc 	bl	8000390 <memchr>
 800c7d8:	b108      	cbz	r0, 800c7de <_printf_i+0x1f2>
 800c7da:	1b40      	subs	r0, r0, r5
 800c7dc:	6060      	str	r0, [r4, #4]
 800c7de:	6863      	ldr	r3, [r4, #4]
 800c7e0:	6123      	str	r3, [r4, #16]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7e8:	e7a8      	b.n	800c73c <_printf_i+0x150>
 800c7ea:	6923      	ldr	r3, [r4, #16]
 800c7ec:	462a      	mov	r2, r5
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	4640      	mov	r0, r8
 800c7f2:	47d0      	blx	sl
 800c7f4:	3001      	adds	r0, #1
 800c7f6:	d0ab      	beq.n	800c750 <_printf_i+0x164>
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	079b      	lsls	r3, r3, #30
 800c7fc:	d413      	bmi.n	800c826 <_printf_i+0x23a>
 800c7fe:	68e0      	ldr	r0, [r4, #12]
 800c800:	9b03      	ldr	r3, [sp, #12]
 800c802:	4298      	cmp	r0, r3
 800c804:	bfb8      	it	lt
 800c806:	4618      	movlt	r0, r3
 800c808:	e7a4      	b.n	800c754 <_printf_i+0x168>
 800c80a:	2301      	movs	r3, #1
 800c80c:	4632      	mov	r2, r6
 800c80e:	4649      	mov	r1, r9
 800c810:	4640      	mov	r0, r8
 800c812:	47d0      	blx	sl
 800c814:	3001      	adds	r0, #1
 800c816:	d09b      	beq.n	800c750 <_printf_i+0x164>
 800c818:	3501      	adds	r5, #1
 800c81a:	68e3      	ldr	r3, [r4, #12]
 800c81c:	9903      	ldr	r1, [sp, #12]
 800c81e:	1a5b      	subs	r3, r3, r1
 800c820:	42ab      	cmp	r3, r5
 800c822:	dcf2      	bgt.n	800c80a <_printf_i+0x21e>
 800c824:	e7eb      	b.n	800c7fe <_printf_i+0x212>
 800c826:	2500      	movs	r5, #0
 800c828:	f104 0619 	add.w	r6, r4, #25
 800c82c:	e7f5      	b.n	800c81a <_printf_i+0x22e>
 800c82e:	bf00      	nop
 800c830:	0800cd41 	.word	0x0800cd41
 800c834:	0800cd52 	.word	0x0800cd52

0800c838 <memmove>:
 800c838:	4288      	cmp	r0, r1
 800c83a:	b510      	push	{r4, lr}
 800c83c:	eb01 0402 	add.w	r4, r1, r2
 800c840:	d902      	bls.n	800c848 <memmove+0x10>
 800c842:	4284      	cmp	r4, r0
 800c844:	4623      	mov	r3, r4
 800c846:	d807      	bhi.n	800c858 <memmove+0x20>
 800c848:	1e43      	subs	r3, r0, #1
 800c84a:	42a1      	cmp	r1, r4
 800c84c:	d008      	beq.n	800c860 <memmove+0x28>
 800c84e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c852:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c856:	e7f8      	b.n	800c84a <memmove+0x12>
 800c858:	4402      	add	r2, r0
 800c85a:	4601      	mov	r1, r0
 800c85c:	428a      	cmp	r2, r1
 800c85e:	d100      	bne.n	800c862 <memmove+0x2a>
 800c860:	bd10      	pop	{r4, pc}
 800c862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c86a:	e7f7      	b.n	800c85c <memmove+0x24>

0800c86c <_free_r>:
 800c86c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c86e:	2900      	cmp	r1, #0
 800c870:	d044      	beq.n	800c8fc <_free_r+0x90>
 800c872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c876:	9001      	str	r0, [sp, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f1a1 0404 	sub.w	r4, r1, #4
 800c87e:	bfb8      	it	lt
 800c880:	18e4      	addlt	r4, r4, r3
 800c882:	f000 f913 	bl	800caac <__malloc_lock>
 800c886:	4a1e      	ldr	r2, [pc, #120]	; (800c900 <_free_r+0x94>)
 800c888:	9801      	ldr	r0, [sp, #4]
 800c88a:	6813      	ldr	r3, [r2, #0]
 800c88c:	b933      	cbnz	r3, 800c89c <_free_r+0x30>
 800c88e:	6063      	str	r3, [r4, #4]
 800c890:	6014      	str	r4, [r2, #0]
 800c892:	b003      	add	sp, #12
 800c894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c898:	f000 b90e 	b.w	800cab8 <__malloc_unlock>
 800c89c:	42a3      	cmp	r3, r4
 800c89e:	d908      	bls.n	800c8b2 <_free_r+0x46>
 800c8a0:	6825      	ldr	r5, [r4, #0]
 800c8a2:	1961      	adds	r1, r4, r5
 800c8a4:	428b      	cmp	r3, r1
 800c8a6:	bf01      	itttt	eq
 800c8a8:	6819      	ldreq	r1, [r3, #0]
 800c8aa:	685b      	ldreq	r3, [r3, #4]
 800c8ac:	1949      	addeq	r1, r1, r5
 800c8ae:	6021      	streq	r1, [r4, #0]
 800c8b0:	e7ed      	b.n	800c88e <_free_r+0x22>
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	b10b      	cbz	r3, 800c8bc <_free_r+0x50>
 800c8b8:	42a3      	cmp	r3, r4
 800c8ba:	d9fa      	bls.n	800c8b2 <_free_r+0x46>
 800c8bc:	6811      	ldr	r1, [r2, #0]
 800c8be:	1855      	adds	r5, r2, r1
 800c8c0:	42a5      	cmp	r5, r4
 800c8c2:	d10b      	bne.n	800c8dc <_free_r+0x70>
 800c8c4:	6824      	ldr	r4, [r4, #0]
 800c8c6:	4421      	add	r1, r4
 800c8c8:	1854      	adds	r4, r2, r1
 800c8ca:	42a3      	cmp	r3, r4
 800c8cc:	6011      	str	r1, [r2, #0]
 800c8ce:	d1e0      	bne.n	800c892 <_free_r+0x26>
 800c8d0:	681c      	ldr	r4, [r3, #0]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	6053      	str	r3, [r2, #4]
 800c8d6:	4421      	add	r1, r4
 800c8d8:	6011      	str	r1, [r2, #0]
 800c8da:	e7da      	b.n	800c892 <_free_r+0x26>
 800c8dc:	d902      	bls.n	800c8e4 <_free_r+0x78>
 800c8de:	230c      	movs	r3, #12
 800c8e0:	6003      	str	r3, [r0, #0]
 800c8e2:	e7d6      	b.n	800c892 <_free_r+0x26>
 800c8e4:	6825      	ldr	r5, [r4, #0]
 800c8e6:	1961      	adds	r1, r4, r5
 800c8e8:	428b      	cmp	r3, r1
 800c8ea:	bf04      	itt	eq
 800c8ec:	6819      	ldreq	r1, [r3, #0]
 800c8ee:	685b      	ldreq	r3, [r3, #4]
 800c8f0:	6063      	str	r3, [r4, #4]
 800c8f2:	bf04      	itt	eq
 800c8f4:	1949      	addeq	r1, r1, r5
 800c8f6:	6021      	streq	r1, [r4, #0]
 800c8f8:	6054      	str	r4, [r2, #4]
 800c8fa:	e7ca      	b.n	800c892 <_free_r+0x26>
 800c8fc:	b003      	add	sp, #12
 800c8fe:	bd30      	pop	{r4, r5, pc}
 800c900:	2407f1f8 	.word	0x2407f1f8

0800c904 <sbrk_aligned>:
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	4e0e      	ldr	r6, [pc, #56]	; (800c940 <sbrk_aligned+0x3c>)
 800c908:	460c      	mov	r4, r1
 800c90a:	6831      	ldr	r1, [r6, #0]
 800c90c:	4605      	mov	r5, r0
 800c90e:	b911      	cbnz	r1, 800c916 <sbrk_aligned+0x12>
 800c910:	f000 f8bc 	bl	800ca8c <_sbrk_r>
 800c914:	6030      	str	r0, [r6, #0]
 800c916:	4621      	mov	r1, r4
 800c918:	4628      	mov	r0, r5
 800c91a:	f000 f8b7 	bl	800ca8c <_sbrk_r>
 800c91e:	1c43      	adds	r3, r0, #1
 800c920:	d00a      	beq.n	800c938 <sbrk_aligned+0x34>
 800c922:	1cc4      	adds	r4, r0, #3
 800c924:	f024 0403 	bic.w	r4, r4, #3
 800c928:	42a0      	cmp	r0, r4
 800c92a:	d007      	beq.n	800c93c <sbrk_aligned+0x38>
 800c92c:	1a21      	subs	r1, r4, r0
 800c92e:	4628      	mov	r0, r5
 800c930:	f000 f8ac 	bl	800ca8c <_sbrk_r>
 800c934:	3001      	adds	r0, #1
 800c936:	d101      	bne.n	800c93c <sbrk_aligned+0x38>
 800c938:	f04f 34ff 	mov.w	r4, #4294967295
 800c93c:	4620      	mov	r0, r4
 800c93e:	bd70      	pop	{r4, r5, r6, pc}
 800c940:	2407f1fc 	.word	0x2407f1fc

0800c944 <_malloc_r>:
 800c944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c948:	1ccd      	adds	r5, r1, #3
 800c94a:	f025 0503 	bic.w	r5, r5, #3
 800c94e:	3508      	adds	r5, #8
 800c950:	2d0c      	cmp	r5, #12
 800c952:	bf38      	it	cc
 800c954:	250c      	movcc	r5, #12
 800c956:	2d00      	cmp	r5, #0
 800c958:	4607      	mov	r7, r0
 800c95a:	db01      	blt.n	800c960 <_malloc_r+0x1c>
 800c95c:	42a9      	cmp	r1, r5
 800c95e:	d905      	bls.n	800c96c <_malloc_r+0x28>
 800c960:	230c      	movs	r3, #12
 800c962:	603b      	str	r3, [r7, #0]
 800c964:	2600      	movs	r6, #0
 800c966:	4630      	mov	r0, r6
 800c968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c96c:	4e2e      	ldr	r6, [pc, #184]	; (800ca28 <_malloc_r+0xe4>)
 800c96e:	f000 f89d 	bl	800caac <__malloc_lock>
 800c972:	6833      	ldr	r3, [r6, #0]
 800c974:	461c      	mov	r4, r3
 800c976:	bb34      	cbnz	r4, 800c9c6 <_malloc_r+0x82>
 800c978:	4629      	mov	r1, r5
 800c97a:	4638      	mov	r0, r7
 800c97c:	f7ff ffc2 	bl	800c904 <sbrk_aligned>
 800c980:	1c43      	adds	r3, r0, #1
 800c982:	4604      	mov	r4, r0
 800c984:	d14d      	bne.n	800ca22 <_malloc_r+0xde>
 800c986:	6834      	ldr	r4, [r6, #0]
 800c988:	4626      	mov	r6, r4
 800c98a:	2e00      	cmp	r6, #0
 800c98c:	d140      	bne.n	800ca10 <_malloc_r+0xcc>
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	4631      	mov	r1, r6
 800c992:	4638      	mov	r0, r7
 800c994:	eb04 0803 	add.w	r8, r4, r3
 800c998:	f000 f878 	bl	800ca8c <_sbrk_r>
 800c99c:	4580      	cmp	r8, r0
 800c99e:	d13a      	bne.n	800ca16 <_malloc_r+0xd2>
 800c9a0:	6821      	ldr	r1, [r4, #0]
 800c9a2:	3503      	adds	r5, #3
 800c9a4:	1a6d      	subs	r5, r5, r1
 800c9a6:	f025 0503 	bic.w	r5, r5, #3
 800c9aa:	3508      	adds	r5, #8
 800c9ac:	2d0c      	cmp	r5, #12
 800c9ae:	bf38      	it	cc
 800c9b0:	250c      	movcc	r5, #12
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	4638      	mov	r0, r7
 800c9b6:	f7ff ffa5 	bl	800c904 <sbrk_aligned>
 800c9ba:	3001      	adds	r0, #1
 800c9bc:	d02b      	beq.n	800ca16 <_malloc_r+0xd2>
 800c9be:	6823      	ldr	r3, [r4, #0]
 800c9c0:	442b      	add	r3, r5
 800c9c2:	6023      	str	r3, [r4, #0]
 800c9c4:	e00e      	b.n	800c9e4 <_malloc_r+0xa0>
 800c9c6:	6822      	ldr	r2, [r4, #0]
 800c9c8:	1b52      	subs	r2, r2, r5
 800c9ca:	d41e      	bmi.n	800ca0a <_malloc_r+0xc6>
 800c9cc:	2a0b      	cmp	r2, #11
 800c9ce:	d916      	bls.n	800c9fe <_malloc_r+0xba>
 800c9d0:	1961      	adds	r1, r4, r5
 800c9d2:	42a3      	cmp	r3, r4
 800c9d4:	6025      	str	r5, [r4, #0]
 800c9d6:	bf18      	it	ne
 800c9d8:	6059      	strne	r1, [r3, #4]
 800c9da:	6863      	ldr	r3, [r4, #4]
 800c9dc:	bf08      	it	eq
 800c9de:	6031      	streq	r1, [r6, #0]
 800c9e0:	5162      	str	r2, [r4, r5]
 800c9e2:	604b      	str	r3, [r1, #4]
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	f104 060b 	add.w	r6, r4, #11
 800c9ea:	f000 f865 	bl	800cab8 <__malloc_unlock>
 800c9ee:	f026 0607 	bic.w	r6, r6, #7
 800c9f2:	1d23      	adds	r3, r4, #4
 800c9f4:	1af2      	subs	r2, r6, r3
 800c9f6:	d0b6      	beq.n	800c966 <_malloc_r+0x22>
 800c9f8:	1b9b      	subs	r3, r3, r6
 800c9fa:	50a3      	str	r3, [r4, r2]
 800c9fc:	e7b3      	b.n	800c966 <_malloc_r+0x22>
 800c9fe:	6862      	ldr	r2, [r4, #4]
 800ca00:	42a3      	cmp	r3, r4
 800ca02:	bf0c      	ite	eq
 800ca04:	6032      	streq	r2, [r6, #0]
 800ca06:	605a      	strne	r2, [r3, #4]
 800ca08:	e7ec      	b.n	800c9e4 <_malloc_r+0xa0>
 800ca0a:	4623      	mov	r3, r4
 800ca0c:	6864      	ldr	r4, [r4, #4]
 800ca0e:	e7b2      	b.n	800c976 <_malloc_r+0x32>
 800ca10:	4634      	mov	r4, r6
 800ca12:	6876      	ldr	r6, [r6, #4]
 800ca14:	e7b9      	b.n	800c98a <_malloc_r+0x46>
 800ca16:	230c      	movs	r3, #12
 800ca18:	603b      	str	r3, [r7, #0]
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	f000 f84c 	bl	800cab8 <__malloc_unlock>
 800ca20:	e7a1      	b.n	800c966 <_malloc_r+0x22>
 800ca22:	6025      	str	r5, [r4, #0]
 800ca24:	e7de      	b.n	800c9e4 <_malloc_r+0xa0>
 800ca26:	bf00      	nop
 800ca28:	2407f1f8 	.word	0x2407f1f8

0800ca2c <_realloc_r>:
 800ca2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca30:	4680      	mov	r8, r0
 800ca32:	4614      	mov	r4, r2
 800ca34:	460e      	mov	r6, r1
 800ca36:	b921      	cbnz	r1, 800ca42 <_realloc_r+0x16>
 800ca38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3c:	4611      	mov	r1, r2
 800ca3e:	f7ff bf81 	b.w	800c944 <_malloc_r>
 800ca42:	b92a      	cbnz	r2, 800ca50 <_realloc_r+0x24>
 800ca44:	f7ff ff12 	bl	800c86c <_free_r>
 800ca48:	4625      	mov	r5, r4
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca50:	f000 f838 	bl	800cac4 <_malloc_usable_size_r>
 800ca54:	4284      	cmp	r4, r0
 800ca56:	4607      	mov	r7, r0
 800ca58:	d802      	bhi.n	800ca60 <_realloc_r+0x34>
 800ca5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca5e:	d812      	bhi.n	800ca86 <_realloc_r+0x5a>
 800ca60:	4621      	mov	r1, r4
 800ca62:	4640      	mov	r0, r8
 800ca64:	f7ff ff6e 	bl	800c944 <_malloc_r>
 800ca68:	4605      	mov	r5, r0
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	d0ed      	beq.n	800ca4a <_realloc_r+0x1e>
 800ca6e:	42bc      	cmp	r4, r7
 800ca70:	4622      	mov	r2, r4
 800ca72:	4631      	mov	r1, r6
 800ca74:	bf28      	it	cs
 800ca76:	463a      	movcs	r2, r7
 800ca78:	f7ff fbb8 	bl	800c1ec <memcpy>
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	4640      	mov	r0, r8
 800ca80:	f7ff fef4 	bl	800c86c <_free_r>
 800ca84:	e7e1      	b.n	800ca4a <_realloc_r+0x1e>
 800ca86:	4635      	mov	r5, r6
 800ca88:	e7df      	b.n	800ca4a <_realloc_r+0x1e>
	...

0800ca8c <_sbrk_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4d06      	ldr	r5, [pc, #24]	; (800caa8 <_sbrk_r+0x1c>)
 800ca90:	2300      	movs	r3, #0
 800ca92:	4604      	mov	r4, r0
 800ca94:	4608      	mov	r0, r1
 800ca96:	602b      	str	r3, [r5, #0]
 800ca98:	f000 f81e 	bl	800cad8 <_sbrk>
 800ca9c:	1c43      	adds	r3, r0, #1
 800ca9e:	d102      	bne.n	800caa6 <_sbrk_r+0x1a>
 800caa0:	682b      	ldr	r3, [r5, #0]
 800caa2:	b103      	cbz	r3, 800caa6 <_sbrk_r+0x1a>
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	2407f200 	.word	0x2407f200

0800caac <__malloc_lock>:
 800caac:	4801      	ldr	r0, [pc, #4]	; (800cab4 <__malloc_lock+0x8>)
 800caae:	f000 b811 	b.w	800cad4 <__retarget_lock_acquire_recursive>
 800cab2:	bf00      	nop
 800cab4:	2407f204 	.word	0x2407f204

0800cab8 <__malloc_unlock>:
 800cab8:	4801      	ldr	r0, [pc, #4]	; (800cac0 <__malloc_unlock+0x8>)
 800caba:	f000 b80c 	b.w	800cad6 <__retarget_lock_release_recursive>
 800cabe:	bf00      	nop
 800cac0:	2407f204 	.word	0x2407f204

0800cac4 <_malloc_usable_size_r>:
 800cac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cac8:	1f18      	subs	r0, r3, #4
 800caca:	2b00      	cmp	r3, #0
 800cacc:	bfbc      	itt	lt
 800cace:	580b      	ldrlt	r3, [r1, r0]
 800cad0:	18c0      	addlt	r0, r0, r3
 800cad2:	4770      	bx	lr

0800cad4 <__retarget_lock_acquire_recursive>:
 800cad4:	4770      	bx	lr

0800cad6 <__retarget_lock_release_recursive>:
 800cad6:	4770      	bx	lr

0800cad8 <_sbrk>:
 800cad8:	4a04      	ldr	r2, [pc, #16]	; (800caec <_sbrk+0x14>)
 800cada:	6811      	ldr	r1, [r2, #0]
 800cadc:	4603      	mov	r3, r0
 800cade:	b909      	cbnz	r1, 800cae4 <_sbrk+0xc>
 800cae0:	4903      	ldr	r1, [pc, #12]	; (800caf0 <_sbrk+0x18>)
 800cae2:	6011      	str	r1, [r2, #0]
 800cae4:	6810      	ldr	r0, [r2, #0]
 800cae6:	4403      	add	r3, r0
 800cae8:	6013      	str	r3, [r2, #0]
 800caea:	4770      	bx	lr
 800caec:	2407f208 	.word	0x2407f208
 800caf0:	2407f210 	.word	0x2407f210

0800caf4 <_init>:
 800caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf6:	bf00      	nop
 800caf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cafa:	bc08      	pop	{r3}
 800cafc:	469e      	mov	lr, r3
 800cafe:	4770      	bx	lr

0800cb00 <_fini>:
 800cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb02:	bf00      	nop
 800cb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb06:	bc08      	pop	{r3}
 800cb08:	469e      	mov	lr, r3
 800cb0a:	4770      	bx	lr
