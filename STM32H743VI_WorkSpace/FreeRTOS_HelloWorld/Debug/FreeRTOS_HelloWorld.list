
FreeRTOS_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08008c64  08008c64  00018c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e40  08008e40  00018e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e48  08008e48  00018e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008e4c  08008e4c  00018e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  08008e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0007f584  24000084  08008ed4  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2407f608  08008ed4  0002f608  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c421  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000037a5  00000000  00000000  0003c4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001780  00000000  00000000  0003fc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015f8  00000000  00000000  000413f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037182  00000000  00000000  000429f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c1ee  00000000  00000000  00079b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016e93c  00000000  00000000  00095d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020469c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006cd0  00000000  00000000  002046ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008c4c 	.word	0x08008c4c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	08008c4c 	.word	0x08008c4c

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	240072a0 	.word	0x240072a0

08000374 <strlen>:
 8000374:	4603      	mov	r3, r0
 8000376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800037a:	2a00      	cmp	r2, #0
 800037c:	d1fb      	bne.n	8000376 <strlen+0x2>
 800037e:	1a18      	subs	r0, r3, r0
 8000380:	3801      	subs	r0, #1
 8000382:	4770      	bx	lr

08000384 <__aeabi_uldivmod>:
 8000384:	b953      	cbnz	r3, 800039c <__aeabi_uldivmod+0x18>
 8000386:	b94a      	cbnz	r2, 800039c <__aeabi_uldivmod+0x18>
 8000388:	2900      	cmp	r1, #0
 800038a:	bf08      	it	eq
 800038c:	2800      	cmpeq	r0, #0
 800038e:	bf1c      	itt	ne
 8000390:	f04f 31ff 	movne.w	r1, #4294967295
 8000394:	f04f 30ff 	movne.w	r0, #4294967295
 8000398:	f000 b974 	b.w	8000684 <__aeabi_idiv0>
 800039c:	f1ad 0c08 	sub.w	ip, sp, #8
 80003a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a4:	f000 f806 	bl	80003b4 <__udivmoddi4>
 80003a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003b0:	b004      	add	sp, #16
 80003b2:	4770      	bx	lr

080003b4 <__udivmoddi4>:
 80003b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b8:	9d08      	ldr	r5, [sp, #32]
 80003ba:	4604      	mov	r4, r0
 80003bc:	468e      	mov	lr, r1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d14d      	bne.n	800045e <__udivmoddi4+0xaa>
 80003c2:	428a      	cmp	r2, r1
 80003c4:	4694      	mov	ip, r2
 80003c6:	d969      	bls.n	800049c <__udivmoddi4+0xe8>
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	b152      	cbz	r2, 80003e4 <__udivmoddi4+0x30>
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	f1c2 0120 	rsb	r1, r2, #32
 80003d6:	fa20 f101 	lsr.w	r1, r0, r1
 80003da:	fa0c fc02 	lsl.w	ip, ip, r2
 80003de:	ea41 0e03 	orr.w	lr, r1, r3
 80003e2:	4094      	lsls	r4, r2
 80003e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e8:	0c21      	lsrs	r1, r4, #16
 80003ea:	fbbe f6f8 	udiv	r6, lr, r8
 80003ee:	fa1f f78c 	uxth.w	r7, ip
 80003f2:	fb08 e316 	mls	r3, r8, r6, lr
 80003f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003fa:	fb06 f107 	mul.w	r1, r6, r7
 80003fe:	4299      	cmp	r1, r3
 8000400:	d90a      	bls.n	8000418 <__udivmoddi4+0x64>
 8000402:	eb1c 0303 	adds.w	r3, ip, r3
 8000406:	f106 30ff 	add.w	r0, r6, #4294967295
 800040a:	f080 811f 	bcs.w	800064c <__udivmoddi4+0x298>
 800040e:	4299      	cmp	r1, r3
 8000410:	f240 811c 	bls.w	800064c <__udivmoddi4+0x298>
 8000414:	3e02      	subs	r6, #2
 8000416:	4463      	add	r3, ip
 8000418:	1a5b      	subs	r3, r3, r1
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000428:	fb00 f707 	mul.w	r7, r0, r7
 800042c:	42a7      	cmp	r7, r4
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x92>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	f080 810a 	bcs.w	8000650 <__udivmoddi4+0x29c>
 800043c:	42a7      	cmp	r7, r4
 800043e:	f240 8107 	bls.w	8000650 <__udivmoddi4+0x29c>
 8000442:	4464      	add	r4, ip
 8000444:	3802      	subs	r0, #2
 8000446:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044a:	1be4      	subs	r4, r4, r7
 800044c:	2600      	movs	r6, #0
 800044e:	b11d      	cbz	r5, 8000458 <__udivmoddi4+0xa4>
 8000450:	40d4      	lsrs	r4, r2
 8000452:	2300      	movs	r3, #0
 8000454:	e9c5 4300 	strd	r4, r3, [r5]
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	428b      	cmp	r3, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0xc2>
 8000462:	2d00      	cmp	r5, #0
 8000464:	f000 80ef 	beq.w	8000646 <__udivmoddi4+0x292>
 8000468:	2600      	movs	r6, #0
 800046a:	e9c5 0100 	strd	r0, r1, [r5]
 800046e:	4630      	mov	r0, r6
 8000470:	4631      	mov	r1, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	fab3 f683 	clz	r6, r3
 800047a:	2e00      	cmp	r6, #0
 800047c:	d14a      	bne.n	8000514 <__udivmoddi4+0x160>
 800047e:	428b      	cmp	r3, r1
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xd4>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 80f9 	bhi.w	800067a <__udivmoddi4+0x2c6>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb61 0303 	sbc.w	r3, r1, r3
 800048e:	2001      	movs	r0, #1
 8000490:	469e      	mov	lr, r3
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e0      	beq.n	8000458 <__udivmoddi4+0xa4>
 8000496:	e9c5 4e00 	strd	r4, lr, [r5]
 800049a:	e7dd      	b.n	8000458 <__udivmoddi4+0xa4>
 800049c:	b902      	cbnz	r2, 80004a0 <__udivmoddi4+0xec>
 800049e:	deff      	udf	#255	; 0xff
 80004a0:	fab2 f282 	clz	r2, r2
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	f040 8092 	bne.w	80005ce <__udivmoddi4+0x21a>
 80004aa:	eba1 010c 	sub.w	r1, r1, ip
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f fe8c 	uxth.w	lr, ip
 80004b6:	2601      	movs	r6, #1
 80004b8:	0c20      	lsrs	r0, r4, #16
 80004ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80004be:	fb07 1113 	mls	r1, r7, r3, r1
 80004c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c6:	fb0e f003 	mul.w	r0, lr, r3
 80004ca:	4288      	cmp	r0, r1
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x12c>
 80004ce:	eb1c 0101 	adds.w	r1, ip, r1
 80004d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d6:	d202      	bcs.n	80004de <__udivmoddi4+0x12a>
 80004d8:	4288      	cmp	r0, r1
 80004da:	f200 80cb 	bhi.w	8000674 <__udivmoddi4+0x2c0>
 80004de:	4643      	mov	r3, r8
 80004e0:	1a09      	subs	r1, r1, r0
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e8:	fb07 1110 	mls	r1, r7, r0, r1
 80004ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004f0:	fb0e fe00 	mul.w	lr, lr, r0
 80004f4:	45a6      	cmp	lr, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x156>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d202      	bcs.n	8000508 <__udivmoddi4+0x154>
 8000502:	45a6      	cmp	lr, r4
 8000504:	f200 80bb 	bhi.w	800067e <__udivmoddi4+0x2ca>
 8000508:	4608      	mov	r0, r1
 800050a:	eba4 040e 	sub.w	r4, r4, lr
 800050e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x9a>
 8000514:	f1c6 0720 	rsb	r7, r6, #32
 8000518:	40b3      	lsls	r3, r6
 800051a:	fa22 fc07 	lsr.w	ip, r2, r7
 800051e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000522:	fa20 f407 	lsr.w	r4, r0, r7
 8000526:	fa01 f306 	lsl.w	r3, r1, r6
 800052a:	431c      	orrs	r4, r3
 800052c:	40f9      	lsrs	r1, r7
 800052e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000532:	fa00 f306 	lsl.w	r3, r0, r6
 8000536:	fbb1 f8f9 	udiv	r8, r1, r9
 800053a:	0c20      	lsrs	r0, r4, #16
 800053c:	fa1f fe8c 	uxth.w	lr, ip
 8000540:	fb09 1118 	mls	r1, r9, r8, r1
 8000544:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000548:	fb08 f00e 	mul.w	r0, r8, lr
 800054c:	4288      	cmp	r0, r1
 800054e:	fa02 f206 	lsl.w	r2, r2, r6
 8000552:	d90b      	bls.n	800056c <__udivmoddi4+0x1b8>
 8000554:	eb1c 0101 	adds.w	r1, ip, r1
 8000558:	f108 3aff 	add.w	sl, r8, #4294967295
 800055c:	f080 8088 	bcs.w	8000670 <__udivmoddi4+0x2bc>
 8000560:	4288      	cmp	r0, r1
 8000562:	f240 8085 	bls.w	8000670 <__udivmoddi4+0x2bc>
 8000566:	f1a8 0802 	sub.w	r8, r8, #2
 800056a:	4461      	add	r1, ip
 800056c:	1a09      	subs	r1, r1, r0
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb1 f0f9 	udiv	r0, r1, r9
 8000574:	fb09 1110 	mls	r1, r9, r0, r1
 8000578:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800057c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000580:	458e      	cmp	lr, r1
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x1e2>
 8000584:	eb1c 0101 	adds.w	r1, ip, r1
 8000588:	f100 34ff 	add.w	r4, r0, #4294967295
 800058c:	d26c      	bcs.n	8000668 <__udivmoddi4+0x2b4>
 800058e:	458e      	cmp	lr, r1
 8000590:	d96a      	bls.n	8000668 <__udivmoddi4+0x2b4>
 8000592:	3802      	subs	r0, #2
 8000594:	4461      	add	r1, ip
 8000596:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800059a:	fba0 9402 	umull	r9, r4, r0, r2
 800059e:	eba1 010e 	sub.w	r1, r1, lr
 80005a2:	42a1      	cmp	r1, r4
 80005a4:	46c8      	mov	r8, r9
 80005a6:	46a6      	mov	lr, r4
 80005a8:	d356      	bcc.n	8000658 <__udivmoddi4+0x2a4>
 80005aa:	d053      	beq.n	8000654 <__udivmoddi4+0x2a0>
 80005ac:	b15d      	cbz	r5, 80005c6 <__udivmoddi4+0x212>
 80005ae:	ebb3 0208 	subs.w	r2, r3, r8
 80005b2:	eb61 010e 	sbc.w	r1, r1, lr
 80005b6:	fa01 f707 	lsl.w	r7, r1, r7
 80005ba:	fa22 f306 	lsr.w	r3, r2, r6
 80005be:	40f1      	lsrs	r1, r6
 80005c0:	431f      	orrs	r7, r3
 80005c2:	e9c5 7100 	strd	r7, r1, [r5]
 80005c6:	2600      	movs	r6, #0
 80005c8:	4631      	mov	r1, r6
 80005ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	40d8      	lsrs	r0, r3
 80005d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d8:	fa21 f303 	lsr.w	r3, r1, r3
 80005dc:	4091      	lsls	r1, r2
 80005de:	4301      	orrs	r1, r0
 80005e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e4:	fa1f fe8c 	uxth.w	lr, ip
 80005e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80005ec:	fb07 3610 	mls	r6, r7, r0, r3
 80005f0:	0c0b      	lsrs	r3, r1, #16
 80005f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f6:	fb00 f60e 	mul.w	r6, r0, lr
 80005fa:	429e      	cmp	r6, r3
 80005fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000600:	d908      	bls.n	8000614 <__udivmoddi4+0x260>
 8000602:	eb1c 0303 	adds.w	r3, ip, r3
 8000606:	f100 38ff 	add.w	r8, r0, #4294967295
 800060a:	d22f      	bcs.n	800066c <__udivmoddi4+0x2b8>
 800060c:	429e      	cmp	r6, r3
 800060e:	d92d      	bls.n	800066c <__udivmoddi4+0x2b8>
 8000610:	3802      	subs	r0, #2
 8000612:	4463      	add	r3, ip
 8000614:	1b9b      	subs	r3, r3, r6
 8000616:	b289      	uxth	r1, r1
 8000618:	fbb3 f6f7 	udiv	r6, r3, r7
 800061c:	fb07 3316 	mls	r3, r7, r6, r3
 8000620:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000624:	fb06 f30e 	mul.w	r3, r6, lr
 8000628:	428b      	cmp	r3, r1
 800062a:	d908      	bls.n	800063e <__udivmoddi4+0x28a>
 800062c:	eb1c 0101 	adds.w	r1, ip, r1
 8000630:	f106 38ff 	add.w	r8, r6, #4294967295
 8000634:	d216      	bcs.n	8000664 <__udivmoddi4+0x2b0>
 8000636:	428b      	cmp	r3, r1
 8000638:	d914      	bls.n	8000664 <__udivmoddi4+0x2b0>
 800063a:	3e02      	subs	r6, #2
 800063c:	4461      	add	r1, ip
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000644:	e738      	b.n	80004b8 <__udivmoddi4+0x104>
 8000646:	462e      	mov	r6, r5
 8000648:	4628      	mov	r0, r5
 800064a:	e705      	b.n	8000458 <__udivmoddi4+0xa4>
 800064c:	4606      	mov	r6, r0
 800064e:	e6e3      	b.n	8000418 <__udivmoddi4+0x64>
 8000650:	4618      	mov	r0, r3
 8000652:	e6f8      	b.n	8000446 <__udivmoddi4+0x92>
 8000654:	454b      	cmp	r3, r9
 8000656:	d2a9      	bcs.n	80005ac <__udivmoddi4+0x1f8>
 8000658:	ebb9 0802 	subs.w	r8, r9, r2
 800065c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000660:	3801      	subs	r0, #1
 8000662:	e7a3      	b.n	80005ac <__udivmoddi4+0x1f8>
 8000664:	4646      	mov	r6, r8
 8000666:	e7ea      	b.n	800063e <__udivmoddi4+0x28a>
 8000668:	4620      	mov	r0, r4
 800066a:	e794      	b.n	8000596 <__udivmoddi4+0x1e2>
 800066c:	4640      	mov	r0, r8
 800066e:	e7d1      	b.n	8000614 <__udivmoddi4+0x260>
 8000670:	46d0      	mov	r8, sl
 8000672:	e77b      	b.n	800056c <__udivmoddi4+0x1b8>
 8000674:	3b02      	subs	r3, #2
 8000676:	4461      	add	r1, ip
 8000678:	e732      	b.n	80004e0 <__udivmoddi4+0x12c>
 800067a:	4630      	mov	r0, r6
 800067c:	e709      	b.n	8000492 <__udivmoddi4+0xde>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	e742      	b.n	800050a <__udivmoddi4+0x156>

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f103 0208 	add.w	r2, r3, #8
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f103 0208 	add.w	r2, r3, #8
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f103 0208 	add.w	r2, r3, #8
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80006e2:	b480      	push	{r7}
 80006e4:	b085      	sub	sp, #20
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	689a      	ldr	r2, [r3, #8]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800072a:	b480      	push	{r7}
 800072c:	b085      	sub	sp, #20
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	691b      	ldr	r3, [r3, #16]
 8000736:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	6892      	ldr	r2, [r2, #8]
 8000740:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	6852      	ldr	r2, [r2, #4]
 800074a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	429a      	cmp	r2, r3
 8000754:	d103      	bne.n	800075e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	1e5a      	subs	r2, r3, #1
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800077e:	b580      	push	{r7, lr}
 8000780:	b08c      	sub	sp, #48	; 0x30
 8000782:	af04      	add	r7, sp, #16
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4613      	mov	r3, r2
 800078c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fe58 	bl	8001448 <pvPortMalloc>
 8000798:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00e      	beq.n	80007be <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80007a0:	205c      	movs	r0, #92	; 0x5c
 80007a2:	f000 fe51 	bl	8001448 <pvPortMalloc>
 80007a6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d003      	beq.n	80007b6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
 80007b4:	e005      	b.n	80007c2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f000 ff2c 	bl	8001614 <vPortFree>
 80007bc:	e001      	b.n	80007c2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d013      	beq.n	80007f0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80007c8:	88fa      	ldrh	r2, [r7, #6]
 80007ca:	2300      	movs	r3, #0
 80007cc:	9303      	str	r3, [sp, #12]
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	9302      	str	r3, [sp, #8]
 80007d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f000 f80e 	bl	8000800 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80007e4:	69f8      	ldr	r0, [r7, #28]
 80007e6:	f000 f8a3 	bl	8000930 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	e002      	b.n	80007f6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
 80007f4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80007f6:	69bb      	ldr	r3, [r7, #24]
    }
 80007f8:	4618      	mov	r0, r3
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000810:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	461a      	mov	r2, r3
 8000818:	21a5      	movs	r1, #165	; 0xa5
 800081a:	f007 fbe3 	bl	8007fe4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800081e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000828:	440b      	add	r3, r1
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4413      	add	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	f023 0307 	bic.w	r3, r3, #7
 8000836:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	2b00      	cmp	r3, #0
 8000840:	d00c      	beq.n	800085c <prvInitialiseNewTask+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000846:	b672      	cpsid	i
 8000848:	f383 8811 	msr	BASEPRI, r3
 800084c:	f3bf 8f6f 	isb	sy
 8000850:	f3bf 8f4f 	dsb	sy
 8000854:	b662      	cpsie	i
 8000856:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000858:	bf00      	nop
 800085a:	e7fe      	b.n	800085a <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d01f      	beq.n	80008a2 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
 8000866:	e012      	b.n	800088e <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	4413      	add	r3, r2
 800086e:	7819      	ldrb	r1, [r3, #0]
 8000870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	4413      	add	r3, r2
 8000876:	3334      	adds	r3, #52	; 0x34
 8000878:	460a      	mov	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800087c:	68ba      	ldr	r2, [r7, #8]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d006      	beq.n	8000896 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	3301      	adds	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d9e9      	bls.n	8000868 <prvInitialiseNewTask+0x68>
 8000894:	e000      	b.n	8000898 <prvInitialiseNewTask+0x98>
            {
                break;
 8000896:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80008a0:	e003      	b.n	80008aa <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80008a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80008aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ac:	2b06      	cmp	r3, #6
 80008ae:	d901      	bls.n	80008b4 <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80008b0:	2306      	movs	r3, #6
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80008b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80008ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008be:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80008c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c2:	2200      	movs	r2, #0
 80008c4:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80008c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c8:	3304      	adds	r3, #4
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fefc 	bl	80006c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80008d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008d2:	3318      	adds	r3, #24
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fef7 	bl	80006c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80008da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008de:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e2:	f1c3 0207 	rsb	r2, r3, #7
 80008e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80008ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80008f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008f2:	3354      	adds	r3, #84	; 0x54
 80008f4:	2204      	movs	r2, #4
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f007 fb73 	bl	8007fe4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80008fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000900:	3358      	adds	r3, #88	; 0x58
 8000902:	2201      	movs	r2, #1
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fb6c 	bl	8007fe4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	68f9      	ldr	r1, [r7, #12]
 8000910:	69b8      	ldr	r0, [r7, #24]
 8000912:	f000 fb53 	bl	8000fbc <pxPortInitialiseStack>
 8000916:	4602      	mov	r2, r0
 8000918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800091a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000926:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af02      	add	r7, sp, #8
 8000936:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000938:	f000 fc52 	bl	80011e0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800093c:	4b35      	ldr	r3, [pc, #212]	; (8000a14 <prvAddNewTaskToReadyList+0xe4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	4a34      	ldr	r2, [pc, #208]	; (8000a14 <prvAddNewTaskToReadyList+0xe4>)
 8000944:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000946:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <prvAddNewTaskToReadyList+0xe8>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d109      	bne.n	8000962 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800094e:	4a32      	ldr	r2, [pc, #200]	; (8000a18 <prvAddNewTaskToReadyList+0xe8>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000954:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <prvAddNewTaskToReadyList+0xe4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d110      	bne.n	800097e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800095c:	f000 fa94 	bl	8000e88 <prvInitialiseTaskLists>
 8000960:	e00d      	b.n	800097e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <prvAddNewTaskToReadyList+0xec>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d109      	bne.n	800097e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800096a:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <prvAddNewTaskToReadyList+0xe8>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000974:	429a      	cmp	r2, r3
 8000976:	d802      	bhi.n	800097e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000978:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <prvAddNewTaskToReadyList+0xe8>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <prvAddNewTaskToReadyList+0xf0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	4a26      	ldr	r2, [pc, #152]	; (8000a20 <prvAddNewTaskToReadyList+0xf0>)
 8000986:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <prvAddNewTaskToReadyList+0xf0>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d016      	beq.n	80009c4 <prvAddNewTaskToReadyList+0x94>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fafb 	bl	8002f94 <SEGGER_SYSVIEW_OnTaskCreate>
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	461d      	mov	r5, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	461c      	mov	r4, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	1ae3      	subs	r3, r4, r3
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	462b      	mov	r3, r5
 80009c0:	f000 fffa 	bl	80019b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fb68 	bl	800309c <SEGGER_SYSVIEW_OnTaskStartReady>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d0:	2201      	movs	r2, #1
 80009d2:	409a      	lsls	r2, r3
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <prvAddNewTaskToReadyList+0xf4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4313      	orrs	r3, r2
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <prvAddNewTaskToReadyList+0xf4>)
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e2:	4613      	mov	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <prvAddNewTaskToReadyList+0xf8>)
 80009ec:	441a      	add	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3304      	adds	r3, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4610      	mov	r0, r2
 80009f6:	f7ff fe74 	bl	80006e2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80009fa:	f000 fc25 	bl	8001248 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <prvAddNewTaskToReadyList+0xec>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <prvAddNewTaskToReadyList+0xe8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bdb0      	pop	{r4, r5, r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240001a0 	.word	0x240001a0
 8000a18:	240000a0 	.word	0x240000a0
 8000a1c:	240001ac 	.word	0x240001ac
 8000a20:	240001bc 	.word	0x240001bc
 8000a24:	240001a8 	.word	0x240001a8
 8000a28:	240000a4 	.word	0x240000a4

08000a2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <vTaskStartScheduler+0xa0>)
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	2300      	movs	r3, #0
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	4924      	ldr	r1, [pc, #144]	; (8000ad0 <vTaskStartScheduler+0xa4>)
 8000a40:	4824      	ldr	r0, [pc, #144]	; (8000ad4 <vTaskStartScheduler+0xa8>)
 8000a42:	f7ff fe9c 	bl	800077e <xTaskCreate>
 8000a46:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d126      	bne.n	8000a9c <vTaskStartScheduler+0x70>
        __asm volatile
 8000a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a52:	b672      	cpsid	i
 8000a54:	f383 8811 	msr	BASEPRI, r3
 8000a58:	f3bf 8f6f 	isb	sy
 8000a5c:	f3bf 8f4f 	dsb	sy
 8000a60:	b662      	cpsie	i
 8000a62:	60bb      	str	r3, [r7, #8]
    }
 8000a64:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <vTaskStartScheduler+0xac>)
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <vTaskStartScheduler+0xb0>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <vTaskStartScheduler+0xb4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <vTaskStartScheduler+0xb8>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <vTaskStartScheduler+0xa0>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d102      	bne.n	8000a8c <vTaskStartScheduler+0x60>
 8000a86:	f002 fa69 	bl	8002f5c <SEGGER_SYSVIEW_OnIdle>
 8000a8a:	e004      	b.n	8000a96 <vTaskStartScheduler+0x6a>
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <vTaskStartScheduler+0xb8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fac1 	bl	8003018 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000a96:	f000 fb25 	bl	80010e4 <xPortStartScheduler>
 8000a9a:	e010      	b.n	8000abe <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa2:	d10c      	bne.n	8000abe <vTaskStartScheduler+0x92>
        __asm volatile
 8000aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa8:	b672      	cpsid	i
 8000aaa:	f383 8811 	msr	BASEPRI, r3
 8000aae:	f3bf 8f6f 	isb	sy
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	b662      	cpsie	i
 8000ab8:	607b      	str	r3, [r7, #4]
    }
 8000aba:	bf00      	nop
 8000abc:	e7fe      	b.n	8000abc <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <vTaskStartScheduler+0xbc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	240001c4 	.word	0x240001c4
 8000ad0:	08008c64 	.word	0x08008c64
 8000ad4:	08000e65 	.word	0x08000e65
 8000ad8:	240001c0 	.word	0x240001c0
 8000adc:	240001ac 	.word	0x240001ac
 8000ae0:	240001a4 	.word	0x240001a4
 8000ae4:	240000a0 	.word	0x240000a0
 8000ae8:	24000000 	.word	0x24000000

08000aec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <vTaskSuspendAll+0x18>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <vTaskSuspendAll+0x18>)
 8000af8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	240001c8 	.word	0x240001c8

08000b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000b16:	4b3e      	ldr	r3, [pc, #248]	; (8000c10 <xTaskResumeAll+0x108>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d10c      	bne.n	8000b38 <xTaskResumeAll+0x30>
        __asm volatile
 8000b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b22:	b672      	cpsid	i
 8000b24:	f383 8811 	msr	BASEPRI, r3
 8000b28:	f3bf 8f6f 	isb	sy
 8000b2c:	f3bf 8f4f 	dsb	sy
 8000b30:	b662      	cpsie	i
 8000b32:	603b      	str	r3, [r7, #0]
    }
 8000b34:	bf00      	nop
 8000b36:	e7fe      	b.n	8000b36 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000b38:	f000 fb52 	bl	80011e0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000b3c:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <xTaskResumeAll+0x108>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	4a33      	ldr	r2, [pc, #204]	; (8000c10 <xTaskResumeAll+0x108>)
 8000b44:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b46:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <xTaskResumeAll+0x108>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d159      	bne.n	8000c02 <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000b4e:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <xTaskResumeAll+0x10c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d055      	beq.n	8000c02 <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000b56:	e032      	b.n	8000bbe <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <xTaskResumeAll+0x110>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3318      	adds	r3, #24
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fde0 	bl	800072a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fddb 	bl	800072a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fa90 	bl	800309c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b80:	2201      	movs	r2, #1
 8000b82:	409a      	lsls	r2, r3
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <xTaskResumeAll+0x114>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	4a24      	ldr	r2, [pc, #144]	; (8000c1c <xTaskResumeAll+0x114>)
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4a21      	ldr	r2, [pc, #132]	; (8000c20 <xTaskResumeAll+0x118>)
 8000b9c:	441a      	add	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	f7ff fd9c 	bl	80006e2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <xTaskResumeAll+0x11c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d302      	bcc.n	8000bbe <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <xTaskResumeAll+0x120>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <xTaskResumeAll+0x110>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1c8      	bne.n	8000b58 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000bcc:	f000 f9da 	bl	8000f84 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <xTaskResumeAll+0x124>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d010      	beq.n	8000bfe <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000bdc:	f000 f83a 	bl	8000c54 <xTaskIncrementTick>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <xTaskResumeAll+0x120>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f1      	bne.n	8000bdc <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <xTaskResumeAll+0x124>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <xTaskResumeAll+0x120>)
 8000c00:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000c02:	f000 fb21 	bl	8001248 <vPortExitCritical>

    return xAlreadyYielded;
 8000c06:	687b      	ldr	r3, [r7, #4]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	240001c8 	.word	0x240001c8
 8000c14:	240001a0 	.word	0x240001a0
 8000c18:	24000160 	.word	0x24000160
 8000c1c:	240001a8 	.word	0x240001a8
 8000c20:	240000a4 	.word	0x240000a4
 8000c24:	240000a0 	.word	0x240000a0
 8000c28:	240001b4 	.word	0x240001b4
 8000c2c:	240001b0 	.word	0x240001b0

08000c30 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c36:	f000 fbc3 	bl	80013c0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <xTaskGetTickCountFromISR+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c44:	683b      	ldr	r3, [r7, #0]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	240001a4 	.word	0x240001a4

08000c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c5e:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <xTaskIncrementTick+0x114>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d175      	bne.n	8000d52 <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000c66:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <xTaskIncrementTick+0x118>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000c6e:	4a3f      	ldr	r2, [pc, #252]	; (8000d6c <xTaskIncrementTick+0x118>)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d122      	bne.n	8000cc0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <xTaskIncrementTick+0x11c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00c      	beq.n	8000c9e <xTaskIncrementTick+0x4a>
        __asm volatile
 8000c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c88:	b672      	cpsid	i
 8000c8a:	f383 8811 	msr	BASEPRI, r3
 8000c8e:	f3bf 8f6f 	isb	sy
 8000c92:	f3bf 8f4f 	dsb	sy
 8000c96:	b662      	cpsie	i
 8000c98:	603b      	str	r3, [r7, #0]
    }
 8000c9a:	bf00      	nop
 8000c9c:	e7fe      	b.n	8000c9c <xTaskIncrementTick+0x48>
 8000c9e:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <xTaskIncrementTick+0x11c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <xTaskIncrementTick+0x120>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a31      	ldr	r2, [pc, #196]	; (8000d70 <xTaskIncrementTick+0x11c>)
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <xTaskIncrementTick+0x120>)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <xTaskIncrementTick+0x124>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <xTaskIncrementTick+0x124>)
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	f000 f962 	bl	8000f84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000cc0:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <xTaskIncrementTick+0x128>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d348      	bcc.n	8000d5c <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <xTaskIncrementTick+0x11c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d104      	bne.n	8000cde <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <xTaskIncrementTick+0x128>)
 8000cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cda:	601a      	str	r2, [r3, #0]
                    break;
 8000cdc:	e03e      	b.n	8000d5c <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cde:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <xTaskIncrementTick+0x11c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d203      	bcs.n	8000cfe <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000cf6:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <xTaskIncrementTick+0x128>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000cfc:	e02e      	b.n	8000d5c <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3304      	adds	r3, #4
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd11 	bl	800072a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d004      	beq.n	8000d1a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	3318      	adds	r3, #24
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fd08 	bl	800072a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 f9bd 	bl	800309c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	2201      	movs	r2, #1
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <xTaskIncrementTick+0x12c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <xTaskIncrementTick+0x12c>)
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <xTaskIncrementTick+0x130>)
 8000d42:	441a      	add	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	3304      	adds	r3, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	f7ff fcc9 	bl	80006e2 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d50:	e7bb      	b.n	8000cca <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <xTaskIncrementTick+0x134>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <xTaskIncrementTick+0x134>)
 8000d5a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000d5c:	697b      	ldr	r3, [r7, #20]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	240001c8 	.word	0x240001c8
 8000d6c:	240001a4 	.word	0x240001a4
 8000d70:	24000158 	.word	0x24000158
 8000d74:	2400015c 	.word	0x2400015c
 8000d78:	240001b8 	.word	0x240001b8
 8000d7c:	240001c0 	.word	0x240001c0
 8000d80:	240001a8 	.word	0x240001a8
 8000d84:	240000a4 	.word	0x240000a4
 8000d88:	240001b0 	.word	0x240001b0

08000d8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <vTaskSwitchContext+0xc0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <vTaskSwitchContext+0xc4>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000da0:	e04f      	b.n	8000e42 <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <vTaskSwitchContext+0xc4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000da8:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <vTaskSwitchContext+0xc8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	fab3 f383 	clz	r3, r3
 8000db4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000db6:	7afb      	ldrb	r3, [r7, #11]
 8000db8:	f1c3 031f 	rsb	r3, r3, #31
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	4926      	ldr	r1, [pc, #152]	; (8000e58 <vTaskSwitchContext+0xcc>)
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	440b      	add	r3, r1
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10c      	bne.n	8000dec <vTaskSwitchContext+0x60>
        __asm volatile
 8000dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd6:	b672      	cpsid	i
 8000dd8:	f383 8811 	msr	BASEPRI, r3
 8000ddc:	f3bf 8f6f 	isb	sy
 8000de0:	f3bf 8f4f 	dsb	sy
 8000de4:	b662      	cpsie	i
 8000de6:	607b      	str	r3, [r7, #4]
    }
 8000de8:	bf00      	nop
 8000dea:	e7fe      	b.n	8000dea <vTaskSwitchContext+0x5e>
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4a18      	ldr	r2, [pc, #96]	; (8000e58 <vTaskSwitchContext+0xcc>)
 8000df8:	4413      	add	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d104      	bne.n	8000e1c <vTaskSwitchContext+0x90>
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <vTaskSwitchContext+0xd0>)
 8000e24:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <vTaskSwitchContext+0xd0>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <vTaskSwitchContext+0xd4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d102      	bne.n	8000e38 <vTaskSwitchContext+0xac>
 8000e32:	f002 f893 	bl	8002f5c <SEGGER_SYSVIEW_OnIdle>
}
 8000e36:	e004      	b.n	8000e42 <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <vTaskSwitchContext+0xd0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 f8eb 	bl	8003018 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	240001c8 	.word	0x240001c8
 8000e50:	240001b4 	.word	0x240001b4
 8000e54:	240001a8 	.word	0x240001a8
 8000e58:	240000a4 	.word	0x240000a4
 8000e5c:	240000a0 	.word	0x240000a0
 8000e60:	240001c4 	.word	0x240001c4

08000e64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000e6c:	f000 f84c 	bl	8000f08 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <prvIdleTask+0x20>)
 8000e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	f3bf 8f4f 	dsb	sy
 8000e7c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000e80:	e7f4      	b.n	8000e6c <prvIdleTask+0x8>
 8000e82:	bf00      	nop
 8000e84:	e000ed04 	.word	0xe000ed04

08000e88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	e00c      	b.n	8000eae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <prvInitialiseTaskLists+0x60>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fbf0 	bl	8000688 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b06      	cmp	r3, #6
 8000eb2:	d9ef      	bls.n	8000e94 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <prvInitialiseTaskLists+0x64>)
 8000eb6:	f7ff fbe7 	bl	8000688 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <prvInitialiseTaskLists+0x68>)
 8000ebc:	f7ff fbe4 	bl	8000688 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <prvInitialiseTaskLists+0x6c>)
 8000ec2:	f7ff fbe1 	bl	8000688 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000ec6:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <prvInitialiseTaskLists+0x70>)
 8000ec8:	f7ff fbde 	bl	8000688 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <prvInitialiseTaskLists+0x74>)
 8000ece:	f7ff fbdb 	bl	8000688 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <prvInitialiseTaskLists+0x78>)
 8000ed4:	4a05      	ldr	r2, [pc, #20]	; (8000eec <prvInitialiseTaskLists+0x64>)
 8000ed6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <prvInitialiseTaskLists+0x7c>)
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <prvInitialiseTaskLists+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	240000a4 	.word	0x240000a4
 8000eec:	24000130 	.word	0x24000130
 8000ef0:	24000144 	.word	0x24000144
 8000ef4:	24000160 	.word	0x24000160
 8000ef8:	24000174 	.word	0x24000174
 8000efc:	2400018c 	.word	0x2400018c
 8000f00:	24000158 	.word	0x24000158
 8000f04:	2400015c 	.word	0x2400015c

08000f08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000f0e:	e019      	b.n	8000f44 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000f10:	f000 f966 	bl	80011e0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <prvCheckTasksWaitingTermination+0x50>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fc02 	bl	800072a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <prvCheckTasksWaitingTermination+0x54>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <prvCheckTasksWaitingTermination+0x54>)
 8000f2e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <prvCheckTasksWaitingTermination+0x58>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <prvCheckTasksWaitingTermination+0x58>)
 8000f38:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000f3a:	f000 f985 	bl	8001248 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f810 	bl	8000f64 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <prvCheckTasksWaitingTermination+0x58>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1e1      	bne.n	8000f10 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	24000174 	.word	0x24000174
 8000f5c:	240001a0 	.word	0x240001a0
 8000f60:	24000188 	.word	0x24000188

08000f64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fb4f 	bl	8001614 <vPortFree>
                vPortFree( pxTCB );
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fb4c 	bl	8001614 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <prvResetNextTaskUnblockTime+0x30>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d104      	bne.n	8000f9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <prvResetNextTaskUnblockTime+0x34>)
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000f9a:	e005      	b.n	8000fa8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <prvResetNextTaskUnblockTime+0x30>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <prvResetNextTaskUnblockTime+0x34>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	24000158 	.word	0x24000158
 8000fb8:	240001c0 	.word	0x240001c0

08000fbc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3b04      	subs	r3, #4
 8000fda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f023 0201 	bic.w	r2, r3, #1
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3b04      	subs	r3, #4
 8000fea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000fec:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <pxPortInitialiseStack+0x64>)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3b14      	subs	r3, #20
 8000ff6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3b04      	subs	r3, #4
 8001002:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f06f 0202 	mvn.w	r2, #2
 800100a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3b20      	subs	r3, #32
 8001010:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	08001025 	.word	0x08001025

08001024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <prvTaskExitError+0x5c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001036:	d00c      	beq.n	8001052 <prvTaskExitError+0x2e>
        __asm volatile
 8001038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800103c:	b672      	cpsid	i
 800103e:	f383 8811 	msr	BASEPRI, r3
 8001042:	f3bf 8f6f 	isb	sy
 8001046:	f3bf 8f4f 	dsb	sy
 800104a:	b662      	cpsie	i
 800104c:	60fb      	str	r3, [r7, #12]
    }
 800104e:	bf00      	nop
 8001050:	e7fe      	b.n	8001050 <prvTaskExitError+0x2c>
        __asm volatile
 8001052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001056:	b672      	cpsid	i
 8001058:	f383 8811 	msr	BASEPRI, r3
 800105c:	f3bf 8f6f 	isb	sy
 8001060:	f3bf 8f4f 	dsb	sy
 8001064:	b662      	cpsie	i
 8001066:	60bb      	str	r3, [r7, #8]
    }
 8001068:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800106a:	bf00      	nop
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0fc      	beq.n	800106c <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	24000004 	.word	0x24000004
	...

08001090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <pxCurrentTCBConst2>)
 8001092:	6819      	ldr	r1, [r3, #0]
 8001094:	6808      	ldr	r0, [r1, #0]
 8001096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109a:	f380 8809 	msr	PSP, r0
 800109e:	f3bf 8f6f 	isb	sy
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	f380 8811 	msr	BASEPRI, r0
 80010aa:	4770      	bx	lr
 80010ac:	f3af 8000 	nop.w

080010b0 <pxCurrentTCBConst2>:
 80010b0:	240000a0 	.word	0x240000a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop

080010b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <prvPortStartFirstTask+0x24>)
 80010ba:	6800      	ldr	r0, [r0, #0]
 80010bc:	6800      	ldr	r0, [r0, #0]
 80010be:	f380 8808 	msr	MSP, r0
 80010c2:	f04f 0000 	mov.w	r0, #0
 80010c6:	f380 8814 	msr	CONTROL, r0
 80010ca:	b662      	cpsie	i
 80010cc:	b661      	cpsie	f
 80010ce:	f3bf 8f4f 	dsb	sy
 80010d2:	f3bf 8f6f 	isb	sy
 80010d6:	df00      	svc	0
 80010d8:	bf00      	nop
 80010da:	0000      	.short	0x0000
 80010dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop

080010e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80010ea:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <xPortStartScheduler+0xe4>)
 80010ec:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	22ff      	movs	r2, #255	; 0xff
 80010fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <xPortStartScheduler+0xe8>)
 8001110:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <xPortStartScheduler+0xec>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001118:	e009      	b.n	800112e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <xPortStartScheduler+0xec>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3b01      	subs	r3, #1
 8001120:	4a2b      	ldr	r2, [pc, #172]	; (80011d0 <xPortStartScheduler+0xec>)
 8001122:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	2b80      	cmp	r3, #128	; 0x80
 8001138:	d0ef      	beq.n	800111a <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <xPortStartScheduler+0xec>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	d00c      	beq.n	8001160 <xPortStartScheduler+0x7c>
        __asm volatile
 8001146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114a:	b672      	cpsid	i
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	b662      	cpsie	i
 800115a:	60bb      	str	r3, [r7, #8]
    }
 800115c:	bf00      	nop
 800115e:	e7fe      	b.n	800115e <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <xPortStartScheduler+0xec>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <xPortStartScheduler+0xec>)
 8001168:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <xPortStartScheduler+0xec>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001172:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <xPortStartScheduler+0xec>)
 8001174:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <xPortStartScheduler+0xf0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <xPortStartScheduler+0xf0>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <xPortStartScheduler+0xf0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <xPortStartScheduler+0xf0>)
 8001190:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001194:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001196:	f000 f8e3 	bl	8001360 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <xPortStartScheduler+0xf4>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80011a0:	f000 f902 	bl	80013a8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <xPortStartScheduler+0xf8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <xPortStartScheduler+0xf8>)
 80011aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80011ae:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80011b0:	f7ff ff82 	bl	80010b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80011b4:	f7ff fdea 	bl	8000d8c <vTaskSwitchContext>
    prvTaskExitError();
 80011b8:	f7ff ff34 	bl	8001024 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e400 	.word	0xe000e400
 80011cc:	240001cc 	.word	0x240001cc
 80011d0:	240001d0 	.word	0x240001d0
 80011d4:	e000ed20 	.word	0xe000ed20
 80011d8:	24000004 	.word	0x24000004
 80011dc:	e000ef34 	.word	0xe000ef34

080011e0 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
        __asm volatile
 80011e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ea:	b672      	cpsid	i
 80011ec:	f383 8811 	msr	BASEPRI, r3
 80011f0:	f3bf 8f6f 	isb	sy
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	b662      	cpsie	i
 80011fa:	607b      	str	r3, [r7, #4]
    }
 80011fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <vPortEnterCritical+0x60>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <vPortEnterCritical+0x60>)
 8001206:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <vPortEnterCritical+0x60>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d111      	bne.n	8001234 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <vPortEnterCritical+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00c      	beq.n	8001234 <vPortEnterCritical+0x54>
        __asm volatile
 800121a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800121e:	b672      	cpsid	i
 8001220:	f383 8811 	msr	BASEPRI, r3
 8001224:	f3bf 8f6f 	isb	sy
 8001228:	f3bf 8f4f 	dsb	sy
 800122c:	b662      	cpsie	i
 800122e:	603b      	str	r3, [r7, #0]
    }
 8001230:	bf00      	nop
 8001232:	e7fe      	b.n	8001232 <vPortEnterCritical+0x52>
    }
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	24000004 	.word	0x24000004
 8001244:	e000ed04 	.word	0xe000ed04

08001248 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <vPortExitCritical+0x54>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10c      	bne.n	8001270 <vPortExitCritical+0x28>
        __asm volatile
 8001256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125a:	b672      	cpsid	i
 800125c:	f383 8811 	msr	BASEPRI, r3
 8001260:	f3bf 8f6f 	isb	sy
 8001264:	f3bf 8f4f 	dsb	sy
 8001268:	b662      	cpsie	i
 800126a:	607b      	str	r3, [r7, #4]
    }
 800126c:	bf00      	nop
 800126e:	e7fe      	b.n	800126e <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <vPortExitCritical+0x54>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <vPortExitCritical+0x54>)
 8001278:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <vPortExitCritical+0x54>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d105      	bne.n	800128e <vPortExitCritical+0x46>
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800128c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	24000004 	.word	0x24000004

080012a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80012a0:	f3ef 8009 	mrs	r0, PSP
 80012a4:	f3bf 8f6f 	isb	sy
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <pxCurrentTCBConst>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	f01e 0f10 	tst.w	lr, #16
 80012b0:	bf08      	it	eq
 80012b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80012b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ba:	6010      	str	r0, [r2, #0]
 80012bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80012c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80012c4:	b672      	cpsid	i
 80012c6:	f380 8811 	msr	BASEPRI, r0
 80012ca:	f3bf 8f4f 	dsb	sy
 80012ce:	f3bf 8f6f 	isb	sy
 80012d2:	b662      	cpsie	i
 80012d4:	f7ff fd5a 	bl	8000d8c <vTaskSwitchContext>
 80012d8:	f04f 0000 	mov.w	r0, #0
 80012dc:	f380 8811 	msr	BASEPRI, r0
 80012e0:	bc09      	pop	{r0, r3}
 80012e2:	6819      	ldr	r1, [r3, #0]
 80012e4:	6808      	ldr	r0, [r1, #0]
 80012e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ea:	f01e 0f10 	tst.w	lr, #16
 80012ee:	bf08      	it	eq
 80012f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80012f4:	f380 8809 	msr	PSP, r0
 80012f8:	f3bf 8f6f 	isb	sy
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop

08001300 <pxCurrentTCBConst>:
 8001300:	240000a0 	.word	0x240000a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop

08001308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
        __asm volatile
 800130e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001312:	b672      	cpsid	i
 8001314:	f383 8811 	msr	BASEPRI, r3
 8001318:	f3bf 8f6f 	isb	sy
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	b662      	cpsie	i
 8001322:	607b      	str	r3, [r7, #4]
    }
 8001324:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001326:	f001 fd9f 	bl	8002e68 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800132a:	f7ff fc93 	bl	8000c54 <xTaskIncrementTick>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001334:	f001 fdf6 	bl	8002f24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <SysTick_Handler+0x54>)
 800133a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e001      	b.n	8001346 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8001342:	f001 fdd3 	bl	8002eec <SEGGER_SYSVIEW_RecordExitISR>
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
        __asm volatile
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f383 8811 	msr	BASEPRI, r3
    }
 8001350:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000ed04 	.word	0xe000ed04

08001360 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <vPortSetupTimerInterrupt+0x34>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <vPortSetupTimerInterrupt+0x38>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <vPortSetupTimerInterrupt+0x3c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <vPortSetupTimerInterrupt+0x40>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	099b      	lsrs	r3, r3, #6
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <vPortSetupTimerInterrupt+0x44>)
 800137e:	3b01      	subs	r3, #1
 8001380:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <vPortSetupTimerInterrupt+0x34>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010
 8001398:	e000e018 	.word	0xe000e018
 800139c:	2400000c 	.word	0x2400000c
 80013a0:	10624dd3 	.word	0x10624dd3
 80013a4:	e000e014 	.word	0xe000e014

080013a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80013a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80013b8 <vPortEnableVFP+0x10>
 80013ac:	6801      	ldr	r1, [r0, #0]
 80013ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80013b2:	6001      	str	r1, [r0, #0]
 80013b4:	4770      	bx	lr
 80013b6:	0000      	.short	0x0000
 80013b8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop

080013c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80013c6:	f3ef 8305 	mrs	r3, IPSR
 80013ca:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b0f      	cmp	r3, #15
 80013d0:	d916      	bls.n	8001400 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80013d2:	4a19      	ldr	r2, [pc, #100]	; (8001438 <vPortValidateInterruptPriority+0x78>)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <vPortValidateInterruptPriority+0x7c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	7afa      	ldrb	r2, [r7, #11]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d20c      	bcs.n	8001400 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 80013e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ea:	b672      	cpsid	i
 80013ec:	f383 8811 	msr	BASEPRI, r3
 80013f0:	f3bf 8f6f 	isb	sy
 80013f4:	f3bf 8f4f 	dsb	sy
 80013f8:	b662      	cpsie	i
 80013fa:	607b      	str	r3, [r7, #4]
    }
 80013fc:	bf00      	nop
 80013fe:	e7fe      	b.n	80013fe <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <vPortValidateInterruptPriority+0x80>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <vPortValidateInterruptPriority+0x84>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d90c      	bls.n	800142a <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8001410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001414:	b672      	cpsid	i
 8001416:	f383 8811 	msr	BASEPRI, r3
 800141a:	f3bf 8f6f 	isb	sy
 800141e:	f3bf 8f4f 	dsb	sy
 8001422:	b662      	cpsie	i
 8001424:	603b      	str	r3, [r7, #0]
    }
 8001426:	bf00      	nop
 8001428:	e7fe      	b.n	8001428 <vPortValidateInterruptPriority+0x68>
    }
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e3f0 	.word	0xe000e3f0
 800143c:	240001cc 	.word	0x240001cc
 8001440:	e000ed0c 	.word	0xe000ed0c
 8001444:	240001d0 	.word	0x240001d0

08001448 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001454:	f7ff fb4a 	bl	8000aec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001458:	4b68      	ldr	r3, [pc, #416]	; (80015fc <pvPortMalloc+0x1b4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001460:	f000 f93e 	bl	80016e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001464:	4b66      	ldr	r3, [pc, #408]	; (8001600 <pvPortMalloc+0x1b8>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	f040 80ab 	bne.w	80015c8 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d02f      	beq.n	80014d8 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001478:	2208      	movs	r2, #8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	d229      	bcs.n	80014d8 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 8001484:	2208      	movs	r2, #8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	2b00      	cmp	r3, #0
 8001494:	d023      	beq.n	80014de <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f023 0307 	bic.w	r3, r3, #7
 800149c:	3308      	adds	r3, #8
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d216      	bcs.n	80014d2 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f023 0307 	bic.w	r3, r3, #7
 80014aa:	3308      	adds	r3, #8
 80014ac:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d012      	beq.n	80014de <pvPortMalloc+0x96>
        __asm volatile
 80014b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014bc:	b672      	cpsid	i
 80014be:	f383 8811 	msr	BASEPRI, r3
 80014c2:	f3bf 8f6f 	isb	sy
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	b662      	cpsie	i
 80014cc:	617b      	str	r3, [r7, #20]
    }
 80014ce:	bf00      	nop
 80014d0:	e7fe      	b.n	80014d0 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80014d6:	e002      	b.n	80014de <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	e000      	b.n	80014e0 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80014de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d070      	beq.n	80015c8 <pvPortMalloc+0x180>
 80014e6:	4b47      	ldr	r3, [pc, #284]	; (8001604 <pvPortMalloc+0x1bc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d86b      	bhi.n	80015c8 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80014f0:	4b45      	ldr	r3, [pc, #276]	; (8001608 <pvPortMalloc+0x1c0>)
 80014f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80014f4:	4b44      	ldr	r3, [pc, #272]	; (8001608 <pvPortMalloc+0x1c0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014fa:	e004      	b.n	8001506 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	d903      	bls.n	8001518 <pvPortMalloc+0xd0>
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f1      	bne.n	80014fc <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <pvPortMalloc+0x1b4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151e:	429a      	cmp	r2, r3
 8001520:	d052      	beq.n	80015c8 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2208      	movs	r2, #8
 8001528:	4413      	add	r3, r2
 800152a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1ad2      	subs	r2, r2, r3
 800153c:	2308      	movs	r3, #8
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	429a      	cmp	r2, r3
 8001542:	d921      	bls.n	8001588 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00c      	beq.n	8001570 <pvPortMalloc+0x128>
        __asm volatile
 8001556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155a:	b672      	cpsid	i
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	b662      	cpsie	i
 800156a:	613b      	str	r3, [r7, #16]
    }
 800156c:	bf00      	nop
 800156e:	e7fe      	b.n	800156e <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001582:	69b8      	ldr	r0, [r7, #24]
 8001584:	f000 f90e 	bl	80017a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <pvPortMalloc+0x1bc>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <pvPortMalloc+0x1bc>)
 8001594:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <pvPortMalloc+0x1bc>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <pvPortMalloc+0x1c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d203      	bcs.n	80015aa <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <pvPortMalloc+0x1bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a19      	ldr	r2, [pc, #100]	; (800160c <pvPortMalloc+0x1c4>)
 80015a8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <pvPortMalloc+0x1b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <pvPortMalloc+0x1c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a12      	ldr	r2, [pc, #72]	; (8001610 <pvPortMalloc+0x1c8>)
 80015c6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80015c8:	f7ff fa9e 	bl	8000b08 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00c      	beq.n	80015f0 <pvPortMalloc+0x1a8>
        __asm volatile
 80015d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015da:	b672      	cpsid	i
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	b662      	cpsie	i
 80015ea:	60fb      	str	r3, [r7, #12]
    }
 80015ec:	bf00      	nop
 80015ee:	e7fe      	b.n	80015ee <pvPortMalloc+0x1a6>
    return pvReturn;
 80015f0:	69fb      	ldr	r3, [r7, #28]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	240071dc 	.word	0x240071dc
 8001600:	240071f0 	.word	0x240071f0
 8001604:	240071e0 	.word	0x240071e0
 8001608:	240071d4 	.word	0x240071d4
 800160c:	240071e4 	.word	0x240071e4
 8001610:	240071e8 	.word	0x240071e8

08001614 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d051      	beq.n	80016ca <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001626:	2308      	movs	r3, #8
 8001628:	425b      	negs	r3, r3
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4413      	add	r3, r2
 800162e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <vPortFree+0xc0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4013      	ands	r3, r2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <vPortFree+0x48>
        __asm volatile
 8001642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001646:	b672      	cpsid	i
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	b662      	cpsie	i
 8001656:	60fb      	str	r3, [r7, #12]
    }
 8001658:	bf00      	nop
 800165a:	e7fe      	b.n	800165a <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00c      	beq.n	800167e <vPortFree+0x6a>
        __asm volatile
 8001664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001668:	b672      	cpsid	i
 800166a:	f383 8811 	msr	BASEPRI, r3
 800166e:	f3bf 8f6f 	isb	sy
 8001672:	f3bf 8f4f 	dsb	sy
 8001676:	b662      	cpsie	i
 8001678:	60bb      	str	r3, [r7, #8]
    }
 800167a:	bf00      	nop
 800167c:	e7fe      	b.n	800167c <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <vPortFree+0xc0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01e      	beq.n	80016ca <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d11a      	bne.n	80016ca <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <vPortFree+0xc0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80016a4:	f7ff fa22 	bl	8000aec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <vPortFree+0xc4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <vPortFree+0xc4>)
 80016b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016b6:	6938      	ldr	r0, [r7, #16]
 80016b8:	f000 f874 	bl	80017a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <vPortFree+0xc8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a06      	ldr	r2, [pc, #24]	; (80016dc <vPortFree+0xc8>)
 80016c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80016c6:	f7ff fa1f 	bl	8000b08 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	240071f0 	.word	0x240071f0
 80016d8:	240071e0 	.word	0x240071e0
 80016dc:	240071ec 	.word	0x240071ec

080016e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80016e6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80016ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <prvHeapInit+0xac>)
 80016ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00c      	beq.n	8001714 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3307      	adds	r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f023 0307 	bic.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	4a1f      	ldr	r2, [pc, #124]	; (800178c <prvHeapInit+0xac>)
 8001710:	4413      	add	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001718:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <prvHeapInit+0xb0>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <prvHeapInit+0xb0>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800172c:	2208      	movs	r2, #8
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1a9b      	subs	r3, r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f023 0307 	bic.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <prvHeapInit+0xb4>)
 8001740:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <prvHeapInit+0xb4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <prvHeapInit+0xb4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	1ad2      	subs	r2, r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <prvHeapInit+0xb4>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <prvHeapInit+0xb8>)
 800176e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a09      	ldr	r2, [pc, #36]	; (800179c <prvHeapInit+0xbc>)
 8001776:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <prvHeapInit+0xc0>)
 800177a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	240001d4 	.word	0x240001d4
 8001790:	240071d4 	.word	0x240071d4
 8001794:	240071dc 	.word	0x240071dc
 8001798:	240071e4 	.word	0x240071e4
 800179c:	240071e0 	.word	0x240071e0
 80017a0:	240071f0 	.word	0x240071f0

080017a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <prvInsertBlockIntoFreeList+0xac>)
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e002      	b.n	80017b8 <prvInsertBlockIntoFreeList+0x14>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d8f7      	bhi.n	80017b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4413      	add	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d108      	bne.n	80017e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	441a      	add	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	441a      	add	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d118      	bne.n	800182c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <prvInsertBlockIntoFreeList+0xb0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d00d      	beq.n	8001822 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	441a      	add	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e008      	b.n	8001834 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <prvInsertBlockIntoFreeList+0xb0>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e003      	b.n	8001834 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	d002      	beq.n	8001842 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	240071d4 	.word	0x240071d4
 8001854:	240071dc 	.word	0x240071dc

08001858 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <_cbSendSystemDesc+0x14>)
 800185e:	f001 faad 	bl	8002dbc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001862:	4803      	ldr	r0, [pc, #12]	; (8001870 <_cbSendSystemDesc+0x18>)
 8001864:	f001 faaa 	bl	8002dbc <SEGGER_SYSVIEW_SendSysDesc>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	08008c6c 	.word	0x08008c6c
 8001870:	08008c9c 	.word	0x08008c9c

08001874 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <SEGGER_SYSVIEW_Conf+0x20>)
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SEGGER_SYSVIEW_Conf+0x20>)
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <SEGGER_SYSVIEW_Conf+0x24>)
 8001882:	4a06      	ldr	r2, [pc, #24]	; (800189c <SEGGER_SYSVIEW_Conf+0x28>)
 8001884:	f000 ff1c 	bl	80026c0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001888:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 800188c:	f000 ff5e 	bl	800274c <SEGGER_SYSVIEW_SetRAMBase>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2400000c 	.word	0x2400000c
 8001898:	08001859 	.word	0x08001859
 800189c:	08008d7c 	.word	0x08008d7c

080018a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e033      	b.n	8001914 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80018ac:	491e      	ldr	r1, [pc, #120]	; (8001928 <_cbSendTaskList+0x88>)
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	491a      	ldr	r1, [pc, #104]	; (8001928 <_cbSendTaskList+0x88>)
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3304      	adds	r3, #4
 80018cc:	6819      	ldr	r1, [r3, #0]
 80018ce:	4c16      	ldr	r4, [pc, #88]	; (8001928 <_cbSendTaskList+0x88>)
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4423      	add	r3, r4
 80018dc:	3308      	adds	r3, #8
 80018de:	681c      	ldr	r4, [r3, #0]
 80018e0:	4d11      	ldr	r5, [pc, #68]	; (8001928 <_cbSendTaskList+0x88>)
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	442b      	add	r3, r5
 80018ee:	330c      	adds	r3, #12
 80018f0:	681d      	ldr	r5, [r3, #0]
 80018f2:	4e0d      	ldr	r6, [pc, #52]	; (8001928 <_cbSendTaskList+0x88>)
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4433      	add	r3, r6
 8001900:	3310      	adds	r3, #16
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	462b      	mov	r3, r5
 8001908:	4622      	mov	r2, r4
 800190a:	f000 f8bd 	bl	8001a88 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3301      	adds	r3, #1
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <_cbSendTaskList+0x8c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3c6      	bcc.n	80018ac <_cbSendTaskList+0xc>
  }
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001928:	240071f4 	.word	0x240071f4
 800192c:	24007294 	.word	0x24007294

08001930 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001938:	f7ff f97a 	bl	8000c30 <xTaskGetTickCountFromISR>
 800193c:	4603      	mov	r3, r0
 800193e:	2200      	movs	r2, #0
 8001940:	469a      	mov	sl, r3
 8001942:	4693      	mov	fp, r2
 8001944:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	f04f 0a00 	mov.w	sl, #0
 8001954:	f04f 0b00 	mov.w	fp, #0
 8001958:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800195c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001960:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001964:	4652      	mov	r2, sl
 8001966:	465b      	mov	r3, fp
 8001968:	1a14      	subs	r4, r2, r0
 800196a:	eb63 0501 	sbc.w	r5, r3, r1
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	00ab      	lsls	r3, r5, #2
 8001978:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800197c:	00a2      	lsls	r2, r4, #2
 800197e:	4614      	mov	r4, r2
 8001980:	461d      	mov	r5, r3
 8001982:	eb14 0800 	adds.w	r8, r4, r0
 8001986:	eb45 0901 	adc.w	r9, r5, r1
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800199a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800199e:	4690      	mov	r8, r2
 80019a0:	4699      	mov	r9, r3
 80019a2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80019a6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080019b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80019c6:	2205      	movs	r2, #5
 80019c8:	492b      	ldr	r1, [pc, #172]	; (8001a78 <SYSVIEW_AddTask+0xc0>)
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	f006 faec 	bl	8007fa8 <memcmp>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04b      	beq.n	8001a6e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80019d6:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b07      	cmp	r3, #7
 80019dc:	d903      	bls.n	80019e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80019de:	4828      	ldr	r0, [pc, #160]	; (8001a80 <SYSVIEW_AddTask+0xc8>)
 80019e0:	f001 fc7a 	bl	80032d8 <SEGGER_SYSVIEW_Warn>
    return;
 80019e4:	e044      	b.n	8001a70 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4926      	ldr	r1, [pc, #152]	; (8001a84 <SYSVIEW_AddTask+0xcc>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4921      	ldr	r1, [pc, #132]	; (8001a84 <SYSVIEW_AddTask+0xcc>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	491b      	ldr	r1, [pc, #108]	; (8001a84 <SYSVIEW_AddTask+0xcc>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	3308      	adds	r3, #8
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4916      	ldr	r1, [pc, #88]	; (8001a84 <SYSVIEW_AddTask+0xcc>)
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	330c      	adds	r3, #12
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4910      	ldr	r1, [pc, #64]	; (8001a84 <SYSVIEW_AddTask+0xcc>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3310      	adds	r3, #16
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 8001a5a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f80e 	bl	8001a88 <SYSVIEW_SendTaskInfo>
 8001a6c:	e000      	b.n	8001a70 <SYSVIEW_AddTask+0xb8>
    return;
 8001a6e:	bf00      	nop

}
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	08008cac 	.word	0x08008cac
 8001a7c:	24007294 	.word	0x24007294
 8001a80:	08008cb4 	.word	0x08008cb4
 8001a84:	240071f4 	.word	0x240071f4

08001a88 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	2214      	movs	r2, #20
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f006 faa0 	bl	8007fe4 <memset>
  TaskInfo.TaskID     = TaskID;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 f885 	bl	8002bcc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <USART2_IRQHandler+0x80>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d011      	beq.n	8001b06 <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <USART2_IRQHandler+0x84>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 030b 	and.w	r3, r3, #11
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d108      	bne.n	8001b06 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <USART2_IRQHandler+0x88>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <USART2_IRQHandler+0x88>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	79fa      	ldrb	r2, [r7, #7]
 8001b02:	4610      	mov	r0, r2
 8001b04:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01a      	beq.n	8001b46 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <USART2_IRQHandler+0x8c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d015      	beq.n	8001b44 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <USART2_IRQHandler+0x8c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	1dfa      	adds	r2, r7, #7
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4798      	blx	r3
 8001b22:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <USART2_IRQHandler+0x90>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <USART2_IRQHandler+0x90>)
 8001b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e006      	b.n	8001b46 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <USART2_IRQHandler+0x80>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8001b3c:	79fa      	ldrb	r2, [r7, #7]
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <USART2_IRQHandler+0x94>)
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e000      	b.n	8001b46 <USART2_IRQHandler+0x7a>
      return;
 8001b44:	bf00      	nop
    }
  }
}
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	4000441c 	.word	0x4000441c
 8001b50:	40004424 	.word	0x40004424
 8001b54:	24007298 	.word	0x24007298
 8001b58:	2400729c 	.word	0x2400729c
 8001b5c:	40004400 	.word	0x40004400
 8001b60:	40004428 	.word	0x40004428

08001b64 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40004400 	.word	0x40004400

08001b84 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <_DoInit+0xa0>)
 8001b8c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8001b8e:	22a8      	movs	r2, #168	; 0xa8
 8001b90:	2100      	movs	r1, #0
 8001b92:	6838      	ldr	r0, [r7, #0]
 8001b94:	f006 fa26 	bl	8007fe4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4a20      	ldr	r2, [pc, #128]	; (8001c28 <_DoInit+0xa4>)
 8001ba8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <_DoInit+0xa8>)
 8001bae:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <_DoInit+0xa4>)
 8001bce:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <_DoInit+0xac>)
 8001bd4:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2200      	movs	r2, #0
 8001be6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2200      	movs	r2, #0
 8001bec:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001bee:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	e00c      	b.n	8001c12 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f1c3 030f 	rsb	r3, r3, #15
 8001bfe:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <_DoInit+0xb0>)
 8001c00:	5cd1      	ldrb	r1, [r2, r3]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	460a      	mov	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d9ef      	bls.n	8001bf8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001c18:	f3bf 8f5f 	dmb	sy
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	240072a0 	.word	0x240072a0
 8001c28:	08008d04 	.word	0x08008d04
 8001c2c:	24007348 	.word	0x24007348
 8001c30:	24007748 	.word	0x24007748
 8001c34:	08008d84 	.word	0x08008d84

08001c38 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d905      	bls.n	8001c68 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	3b01      	subs	r3, #1
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	e007      	b.n	8001c78 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	69b9      	ldr	r1, [r7, #24]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	1acb      	subs	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3b01      	subs	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c82:	4293      	cmp	r3, r2
 8001c84:	bf28      	it	cs
 8001c86:	4613      	movcs	r3, r2
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	bf28      	it	cs
 8001c92:	4613      	movcs	r3, r2
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8001ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	6978      	ldr	r0, [r7, #20]
 8001ca6:	f006 f98f 	bl	8007fc8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001caa:	6a3a      	ldr	r2, [r7, #32]
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	4413      	add	r3, r2
 8001cb0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	4413      	add	r3, r2
 8001cc8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d101      	bne.n	8001cd8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001cd8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1b2      	bne.n	8001c4e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b088      	sub	sp, #32
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d911      	bls.n	8001d3a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	6938      	ldr	r0, [r7, #16]
 8001d26:	f006 f94f 	bl	8007fc8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001d2a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	441a      	add	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001d38:	e01f      	b.n	8001d7a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	4413      	add	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	68b9      	ldr	r1, [r7, #8]
 8001d4c:	6938      	ldr	r0, [r7, #16]
 8001d4e:	f006 f93b 	bl	8007fc8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4413      	add	r3, r2
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6938      	ldr	r0, [r7, #16]
 8001d6c:	f006 f92c 	bl	8007fc8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001d70:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	60da      	str	r2, [r3, #12]
}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8001d82:	b480      	push	{r7}
 8001d84:	b087      	sub	sp, #28
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d808      	bhi.n	8001db0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad2      	subs	r2, r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	3b01      	subs	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e004      	b.n	8001dba <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001dba:	697b      	ldr	r3, [r7, #20]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8001dd4:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <SEGGER_RTT_ReadNoLock+0x108>)
 8001dd6:	623b      	str	r3, [r7, #32]
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <SEGGER_RTT_ReadNoLock+0x1e>
 8001de2:	f7ff fecf 	bl	8001b84 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	3360      	adds	r3, #96	; 0x60
 8001df2:	4a37      	ldr	r2, [pc, #220]	; (8001ed0 <SEGGER_RTT_ReadNoLock+0x108>)
 8001df4:	4413      	add	r3, r2
 8001df6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d92b      	bls.n	8001e6c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4293      	cmp	r3, r2
 8001e24:	bf28      	it	cs
 8001e26:	4613      	movcs	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e30:	4413      	add	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	6939      	ldr	r1, [r7, #16]
 8001e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e3a:	f006 f8c5 	bl	8007fc8 <memcpy>
    NumBytesRead += NumBytesRem;
 8001e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	4413      	add	r3, r2
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8001e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d101      	bne.n	8001e6c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	bf28      	it	cs
 8001e7c:	4613      	movcs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d019      	beq.n	8001eba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8c:	4413      	add	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	6939      	ldr	r1, [r7, #16]
 8001e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e96:	f006 f897 	bl	8007fc8 <memcpy>
    NumBytesRead += NumBytesRem;
 8001e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8001ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3730      	adds	r7, #48	; 0x30
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	240072a0 	.word	0x240072a0

08001ed4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <SEGGER_RTT_WriteNoLock+0x9c>)
 8001ef2:	4413      	add	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d029      	beq.n	8001f52 <SEGGER_RTT_WriteNoLock+0x7e>
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d82e      	bhi.n	8001f60 <SEGGER_RTT_WriteNoLock+0x8c>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <SEGGER_RTT_WriteNoLock+0x38>
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d013      	beq.n	8001f32 <SEGGER_RTT_WriteNoLock+0x5e>
 8001f0a:	e029      	b.n	8001f60 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001f0c:	6978      	ldr	r0, [r7, #20]
 8001f0e:	f7ff ff38 	bl	8001d82 <_GetAvailWriteSpace>
 8001f12:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d202      	bcs.n	8001f22 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8001f20:	e021      	b.n	8001f66 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	69b9      	ldr	r1, [r7, #24]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff fee1 	bl	8001cf2 <_WriteNoCheck>
    break;
 8001f30:	e019      	b.n	8001f66 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff ff25 	bl	8001d82 <_GetAvailWriteSpace>
 8001f38:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	bf28      	it	cs
 8001f42:	4613      	movcs	r3, r2
 8001f44:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	69b9      	ldr	r1, [r7, #24]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff fed1 	bl	8001cf2 <_WriteNoCheck>
    break;
 8001f50:	e009      	b.n	8001f66 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	69b9      	ldr	r1, [r7, #24]
 8001f56:	6978      	ldr	r0, [r7, #20]
 8001f58:	f7ff fe6e 	bl	8001c38 <_WriteBlocking>
 8001f5c:	61f8      	str	r0, [r7, #28]
    break;
 8001f5e:	e002      	b.n	8001f66 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
    break;
 8001f64:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8001f66:	69fb      	ldr	r3, [r7, #28]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	240072a0 	.word	0x240072a0

08001f74 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <SEGGER_RTT_Write+0x48>)
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <SEGGER_RTT_Write+0x1e>
 8001f8e:	f7ff fdf9 	bl	8001b84 <_DoInit>
  SEGGER_RTT_LOCK();
 8001f92:	f3ef 8311 	mrs	r3, BASEPRI
 8001f96:	f04f 0120 	mov.w	r1, #32
 8001f9a:	f381 8811 	msr	BASEPRI, r1
 8001f9e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f7ff ff95 	bl	8001ed4 <SEGGER_RTT_WriteNoLock>
 8001faa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8001fb2:	697b      	ldr	r3, [r7, #20]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	240072a0 	.word	0x240072a0

08001fc0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8001fdc:	f7ff fdd2 	bl	8001b84 <_DoInit>
  SEGGER_RTT_LOCK();
 8001fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8001fe4:	f04f 0120 	mov.w	r1, #32
 8001fe8:	f381 8811 	msr	BASEPRI, r1
 8001fec:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001fee:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8001ff0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8001ff6:	6939      	ldr	r1, [r7, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	3304      	adds	r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3301      	adds	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	429a      	cmp	r2, r3
 800201c:	dbeb      	blt.n	8001ff6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800201e:	e000      	b.n	8002022 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002020:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	429a      	cmp	r2, r3
 800202a:	da3f      	bge.n	80020ac <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800202c:	6939      	ldr	r1, [r7, #16]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002040:	6939      	ldr	r1, [r7, #16]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	3304      	adds	r3, #4
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002056:	6939      	ldr	r1, [r7, #16]
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	3320      	adds	r3, #32
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800206a:	6939      	ldr	r1, [r7, #16]
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	3328      	adds	r3, #40	; 0x28
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800207e:	6939      	ldr	r1, [r7, #16]
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	3324      	adds	r3, #36	; 0x24
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002092:	6939      	ldr	r1, [r7, #16]
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	332c      	adds	r3, #44	; 0x2c
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80020a6:	f3bf 8f5f 	dmb	sy
 80020aa:	e002      	b.n	80020b2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
 80020b0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80020b8:	69fb      	ldr	r3, [r7, #28]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3720      	adds	r7, #32
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	240072a0 	.word	0x240072a0

080020c8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80020e4:	f7ff fd4e 	bl	8001b84 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80020ea:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d82c      	bhi.n	800214c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80020f2:	f3ef 8311 	mrs	r3, BASEPRI
 80020f6:	f04f 0120 	mov.w	r1, #32
 80020fa:	f381 8811 	msr	BASEPRI, r1
 80020fe:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	3360      	adds	r3, #96	; 0x60
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	4413      	add	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800213a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800213c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
 800214a:	e002      	b.n	8002152 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002154:	4618      	mov	r0, r3
 8002156:	3728      	adds	r7, #40	; 0x28
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	240072a0 	.word	0x240072a0

08002160 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00f      	beq.n	8002196 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002176:	e002      	b.n	800217e <_EncodeStr+0x1e>
      Len++;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	3301      	adds	r3, #1
 800217c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f6      	bne.n	8002178 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	429a      	cmp	r2, r3
 8002190:	d901      	bls.n	8002196 <_EncodeStr+0x36>
      Len = Limit;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2bfe      	cmp	r3, #254	; 0xfe
 800219a:	d806      	bhi.n	80021aa <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	60fa      	str	r2, [r7, #12]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e011      	b.n	80021ce <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	60fa      	str	r2, [r7, #12]
 80021b0:	22ff      	movs	r2, #255	; 0xff
 80021b2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	60fa      	str	r2, [r7, #12]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	0a19      	lsrs	r1, r3, #8
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60fa      	str	r2, [r7, #12]
 80021ca:	b2ca      	uxtb	r2, r1
 80021cc:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80021d2:	e00a      	b.n	80021ea <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	1c53      	adds	r3, r2, #1
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1c59      	adds	r1, r3, #1
 80021de:	60f9      	str	r1, [r7, #12]
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	701a      	strb	r2, [r3, #0]
    n++;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3301      	adds	r3, #1
 80021e8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3f0      	bcc.n	80021d4 <_EncodeStr+0x74>
  }
  return pPayload;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	371c      	adds	r7, #28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3307      	adds	r3, #7
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800221e:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <_HandleIncomingPacket+0xdc>)
 8002220:	7e1b      	ldrb	r3, [r3, #24]
 8002222:	4618      	mov	r0, r3
 8002224:	1cfb      	adds	r3, r7, #3
 8002226:	2201      	movs	r2, #1
 8002228:	4619      	mov	r1, r3
 800222a:	f7ff fdcd 	bl	8001dc8 <SEGGER_RTT_ReadNoLock>
 800222e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d052      	beq.n	80022dc <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	2b80      	cmp	r3, #128	; 0x80
 800223a:	d031      	beq.n	80022a0 <_HandleIncomingPacket+0x88>
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	dc40      	bgt.n	80022c2 <_HandleIncomingPacket+0xaa>
 8002240:	2b07      	cmp	r3, #7
 8002242:	dc15      	bgt.n	8002270 <_HandleIncomingPacket+0x58>
 8002244:	2b00      	cmp	r3, #0
 8002246:	dd3c      	ble.n	80022c2 <_HandleIncomingPacket+0xaa>
 8002248:	3b01      	subs	r3, #1
 800224a:	2b06      	cmp	r3, #6
 800224c:	d839      	bhi.n	80022c2 <_HandleIncomingPacket+0xaa>
 800224e:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <_HandleIncomingPacket+0x3c>)
 8002250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002254:	08002277 	.word	0x08002277
 8002258:	0800227d 	.word	0x0800227d
 800225c:	08002283 	.word	0x08002283
 8002260:	08002289 	.word	0x08002289
 8002264:	0800228f 	.word	0x0800228f
 8002268:	08002295 	.word	0x08002295
 800226c:	0800229b 	.word	0x0800229b
 8002270:	2b7f      	cmp	r3, #127	; 0x7f
 8002272:	d035      	beq.n	80022e0 <_HandleIncomingPacket+0xc8>
 8002274:	e025      	b.n	80022c2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002276:	f000 fb2d 	bl	80028d4 <SEGGER_SYSVIEW_Start>
      break;
 800227a:	e036      	b.n	80022ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800227c:	f000 fbe6 	bl	8002a4c <SEGGER_SYSVIEW_Stop>
      break;
 8002280:	e033      	b.n	80022ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002282:	f000 fdbf 	bl	8002e04 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002286:	e030      	b.n	80022ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002288:	f000 fd84 	bl	8002d94 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800228c:	e02d      	b.n	80022ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800228e:	f000 fc03 	bl	8002a98 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002292:	e02a      	b.n	80022ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002294:	f000 ffe2 	bl	800325c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002298:	e027      	b.n	80022ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800229a:	f000 ffc1 	bl	8003220 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800229e:	e024      	b.n	80022ea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <_HandleIncomingPacket+0xdc>)
 80022a2:	7e1b      	ldrb	r3, [r3, #24]
 80022a4:	4618      	mov	r0, r3
 80022a6:	1cfb      	adds	r3, r7, #3
 80022a8:	2201      	movs	r2, #1
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7ff fd8c 	bl	8001dc8 <SEGGER_RTT_ReadNoLock>
 80022b0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 ff30 	bl	8003120 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80022c0:	e010      	b.n	80022e4 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	da0e      	bge.n	80022e8 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <_HandleIncomingPacket+0xdc>)
 80022cc:	7e1b      	ldrb	r3, [r3, #24]
 80022ce:	4618      	mov	r0, r3
 80022d0:	1cfb      	adds	r3, r7, #3
 80022d2:	2201      	movs	r2, #1
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7ff fd77 	bl	8001dc8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80022da:	e005      	b.n	80022e8 <_HandleIncomingPacket+0xd0>
    }
  }
 80022dc:	bf00      	nop
 80022de:	e004      	b.n	80022ea <_HandleIncomingPacket+0xd2>
      break;
 80022e0:	bf00      	nop
 80022e2:	e002      	b.n	80022ea <_HandleIncomingPacket+0xd2>
      break;
 80022e4:	bf00      	nop
 80022e6:	e000      	b.n	80022ea <_HandleIncomingPacket+0xd2>
      break;
 80022e8:	bf00      	nop
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2407f360 	.word	0x2407f360

080022f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	; 0x30
 80022fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80022fe:	2301      	movs	r3, #1
 8002300:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	3301      	adds	r3, #1
 8002306:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800230c:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <_TrySendOverflowPacket+0xe0>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
 8002312:	e00b      	b.n	800232c <_TrySendOverflowPacket+0x34>
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	b2da      	uxtb	r2, r3
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	1c59      	adds	r1, r3, #1
 800231c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800231e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	09db      	lsrs	r3, r3, #7
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
 800232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232e:	2b7f      	cmp	r3, #127	; 0x7f
 8002330:	d8f0      	bhi.n	8002314 <_TrySendOverflowPacket+0x1c>
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <_TrySendOverflowPacket+0xe4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002348:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <_TrySendOverflowPacket+0xe0>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	623b      	str	r3, [r7, #32]
 800235a:	e00b      	b.n	8002374 <_TrySendOverflowPacket+0x7c>
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	1c59      	adds	r1, r3, #1
 8002364:	6279      	str	r1, [r7, #36]	; 0x24
 8002366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	09db      	lsrs	r3, r3, #7
 8002372:	623b      	str	r3, [r7, #32]
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	2b7f      	cmp	r3, #127	; 0x7f
 8002378:	d8f0      	bhi.n	800235c <_TrySendOverflowPacket+0x64>
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	627a      	str	r2, [r7, #36]	; 0x24
 8002380:	6a3a      	ldr	r2, [r7, #32]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <_TrySendOverflowPacket+0xe0>)
 800238c:	785b      	ldrb	r3, [r3, #1]
 800238e:	4618      	mov	r0, r3
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	461a      	mov	r2, r3
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	4619      	mov	r1, r3
 800239c:	f7fd ffa0 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80023a0:	4603      	mov	r3, r0
 80023a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80023a4:	f7ff fbde 	bl	8001b64 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <_TrySendOverflowPacket+0xe0>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <_TrySendOverflowPacket+0xe0>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <_TrySendOverflowPacket+0xe0>)
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e004      	b.n	80023cc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <_TrySendOverflowPacket+0xe0>)
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	4a03      	ldr	r2, [pc, #12]	; (80023d8 <_TrySendOverflowPacket+0xe0>)
 80023ca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80023cc:	693b      	ldr	r3, [r7, #16]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3730      	adds	r7, #48	; 0x30
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2407f360 	.word	0x2407f360
 80023dc:	e0001004 	.word	0xe0001004

080023e0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	; 0x28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80023ec:	4b96      	ldr	r3, [pc, #600]	; (8002648 <_SendPacket+0x268>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d010      	beq.n	8002416 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80023f4:	4b94      	ldr	r3, [pc, #592]	; (8002648 <_SendPacket+0x268>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8130 	beq.w	800265e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80023fe:	4b92      	ldr	r3, [pc, #584]	; (8002648 <_SendPacket+0x268>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d109      	bne.n	800241a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002406:	f7ff ff77 	bl	80022f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800240a:	4b8f      	ldr	r3, [pc, #572]	; (8002648 <_SendPacket+0x268>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	f040 8127 	bne.w	8002662 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8002414:	e001      	b.n	800241a <_SendPacket+0x3a>
    goto Send;
 8002416:	bf00      	nop
 8002418:	e000      	b.n	800241c <_SendPacket+0x3c>
Send:
 800241a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b1f      	cmp	r3, #31
 8002420:	d809      	bhi.n	8002436 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002422:	4b89      	ldr	r3, [pc, #548]	; (8002648 <_SendPacket+0x268>)
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 8118 	bne.w	8002666 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b17      	cmp	r3, #23
 800243a:	d807      	bhi.n	800244c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3b01      	subs	r3, #1
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	e0c4      	b.n	80025d6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b7f      	cmp	r3, #127	; 0x7f
 8002458:	d912      	bls.n	8002480 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	09da      	lsrs	r2, r3, #7
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3b01      	subs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	3a01      	subs	r2, #1
 8002472:	60fa      	str	r2, [r7, #12]
 8002474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002478:	b2da      	uxtb	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	e006      	b.n	800248e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3b01      	subs	r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b7e      	cmp	r3, #126	; 0x7e
 8002492:	d807      	bhi.n	80024a4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3b01      	subs	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	e098      	b.n	80025d6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024aa:	d212      	bcs.n	80024d2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	09da      	lsrs	r2, r3, #7
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	3a01      	subs	r2, #1
 80024c4:	60fa      	str	r2, [r7, #12]
 80024c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	e081      	b.n	80025d6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024d8:	d21d      	bcs.n	8002516 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0b9a      	lsrs	r2, r3, #14
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	09db      	lsrs	r3, r3, #7
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	3a01      	subs	r2, #1
 80024f4:	60fa      	str	r2, [r7, #12]
 80024f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	3a01      	subs	r2, #1
 8002508:	60fa      	str	r2, [r7, #12]
 800250a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e05f      	b.n	80025d6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800251c:	d228      	bcs.n	8002570 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0d5a      	lsrs	r2, r3, #21
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3b01      	subs	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0b9b      	lsrs	r3, r3, #14
 8002532:	b2db      	uxtb	r3, r3
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	3a01      	subs	r2, #1
 8002538:	60fa      	str	r2, [r7, #12]
 800253a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800253e:	b2da      	uxtb	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	09db      	lsrs	r3, r3, #7
 8002548:	b2db      	uxtb	r3, r3
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	3a01      	subs	r2, #1
 800254e:	60fa      	str	r2, [r7, #12]
 8002550:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	3a01      	subs	r2, #1
 8002562:	60fa      	str	r2, [r7, #12]
 8002564:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002568:	b2da      	uxtb	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e032      	b.n	80025d6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	0f1a      	lsrs	r2, r3, #28
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3b01      	subs	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	0d5b      	lsrs	r3, r3, #21
 8002584:	b2db      	uxtb	r3, r3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	3a01      	subs	r2, #1
 800258a:	60fa      	str	r2, [r7, #12]
 800258c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002590:	b2da      	uxtb	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	0b9b      	lsrs	r3, r3, #14
 800259a:	b2db      	uxtb	r3, r3
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	3a01      	subs	r2, #1
 80025a0:	60fa      	str	r2, [r7, #12]
 80025a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	09db      	lsrs	r3, r3, #7
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	3a01      	subs	r2, #1
 80025b6:	60fa      	str	r2, [r7, #12]
 80025b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	3a01      	subs	r2, #1
 80025ca:	60fa      	str	r2, [r7, #12]
 80025cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <_SendPacket+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <_SendPacket+0x268>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	623b      	str	r3, [r7, #32]
 80025ee:	e00b      	b.n	8002608 <_SendPacket+0x228>
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	1c59      	adds	r1, r3, #1
 80025f8:	6279      	str	r1, [r7, #36]	; 0x24
 80025fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	09db      	lsrs	r3, r3, #7
 8002606:	623b      	str	r3, [r7, #32]
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	2b7f      	cmp	r3, #127	; 0x7f
 800260c:	d8f0      	bhi.n	80025f0 <_SendPacket+0x210>
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	627a      	str	r2, [r7, #36]	; 0x24
 8002614:	6a3a      	ldr	r2, [r7, #32]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <_SendPacket+0x268>)
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	4618      	mov	r0, r3
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	461a      	mov	r2, r3
 800262c:	68f9      	ldr	r1, [r7, #12]
 800262e:	f7fd fe57 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002632:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8002634:	f7ff fa96 	bl	8001b64 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800263e:	4a02      	ldr	r2, [pc, #8]	; (8002648 <_SendPacket+0x268>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	60d3      	str	r3, [r2, #12]
 8002644:	e010      	b.n	8002668 <_SendPacket+0x288>
 8002646:	bf00      	nop
 8002648:	2407f360 	.word	0x2407f360
 800264c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <_SendPacket+0x2d8>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <_SendPacket+0x2d8>)
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e004      	b.n	8002668 <_SendPacket+0x288>
    goto SendDone;
 800265e:	bf00      	nop
 8002660:	e002      	b.n	8002668 <_SendPacket+0x288>
      goto SendDone;
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <_SendPacket+0x288>
      goto SendDone;
 8002666:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <_SendPacket+0x2d8>)
 800266a:	7e1b      	ldrb	r3, [r3, #24]
 800266c:	4619      	mov	r1, r3
 800266e:	4a13      	ldr	r2, [pc, #76]	; (80026bc <_SendPacket+0x2dc>)
 8002670:	460b      	mov	r3, r1
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	440b      	add	r3, r1
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	336c      	adds	r3, #108	; 0x6c
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <_SendPacket+0x2d8>)
 8002680:	7e1b      	ldrb	r3, [r3, #24]
 8002682:	4618      	mov	r0, r3
 8002684:	490d      	ldr	r1, [pc, #52]	; (80026bc <_SendPacket+0x2dc>)
 8002686:	4603      	mov	r3, r0
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4403      	add	r3, r0
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	440b      	add	r3, r1
 8002690:	3370      	adds	r3, #112	; 0x70
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d00b      	beq.n	80026b0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <_SendPacket+0x2d8>)
 800269a:	789b      	ldrb	r3, [r3, #2]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <_SendPacket+0x2d8>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80026a6:	f7ff fdb7 	bl	8002218 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80026aa:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <_SendPacket+0x2d8>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80026b0:	bf00      	nop
 80026b2:	3728      	adds	r7, #40	; 0x28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	2407f360 	.word	0x2407f360
 80026bc:	240072a0 	.word	0x240072a0

080026c0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80026ce:	2300      	movs	r3, #0
 80026d0:	4a18      	ldr	r2, [pc, #96]	; (8002734 <SEGGER_SYSVIEW_Init+0x74>)
 80026d2:	4919      	ldr	r1, [pc, #100]	; (8002738 <SEGGER_SYSVIEW_Init+0x78>)
 80026d4:	4819      	ldr	r0, [pc, #100]	; (800273c <SEGGER_SYSVIEW_Init+0x7c>)
 80026d6:	f7ff fc73 	bl	8001fc0 <SEGGER_RTT_AllocUpBuffer>
 80026da:	4603      	mov	r3, r0
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <SEGGER_SYSVIEW_Init+0x80>)
 80026e0:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <SEGGER_SYSVIEW_Init+0x80>)
 80026e4:	785a      	ldrb	r2, [r3, #1]
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <SEGGER_SYSVIEW_Init+0x80>)
 80026e8:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <SEGGER_SYSVIEW_Init+0x80>)
 80026ec:	7e1b      	ldrb	r3, [r3, #24]
 80026ee:	4618      	mov	r0, r3
 80026f0:	2300      	movs	r3, #0
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2308      	movs	r3, #8
 80026f6:	4a13      	ldr	r2, [pc, #76]	; (8002744 <SEGGER_SYSVIEW_Init+0x84>)
 80026f8:	4910      	ldr	r1, [pc, #64]	; (800273c <SEGGER_SYSVIEW_Init+0x7c>)
 80026fa:	f7ff fce5 	bl	80020c8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <SEGGER_SYSVIEW_Init+0x80>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <SEGGER_SYSVIEW_Init+0x88>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <SEGGER_SYSVIEW_Init+0x80>)
 800270a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800270c:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <SEGGER_SYSVIEW_Init+0x80>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002712:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <SEGGER_SYSVIEW_Init+0x80>)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002718:	4a09      	ldr	r2, [pc, #36]	; (8002740 <SEGGER_SYSVIEW_Init+0x80>)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <SEGGER_SYSVIEW_Init+0x80>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <SEGGER_SYSVIEW_Init+0x80>)
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	00077c00 	.word	0x00077c00
 8002738:	24007758 	.word	0x24007758
 800273c:	08008d10 	.word	0x08008d10
 8002740:	2407f360 	.word	0x2407f360
 8002744:	2407f358 	.word	0x2407f358
 8002748:	e0001004 	.word	0xe0001004

0800274c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6113      	str	r3, [r2, #16]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	2407f360 	.word	0x2407f360

0800276c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002774:	f3ef 8311 	mrs	r3, BASEPRI
 8002778:	f04f 0120 	mov.w	r1, #32
 800277c:	f381 8811 	msr	BASEPRI, r1
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4808      	ldr	r0, [pc, #32]	; (80027a4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002784:	f7ff fd3c 	bl	8002200 <_PreparePacket>
 8002788:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	68b8      	ldr	r0, [r7, #8]
 8002790:	f7ff fe26 	bl	80023e0 <_SendPacket>
  RECORD_END();
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f383 8811 	msr	BASEPRI, r3
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2407f390 	.word	0x2407f390

080027a8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80027b2:	f3ef 8311 	mrs	r3, BASEPRI
 80027b6:	f04f 0120 	mov.w	r1, #32
 80027ba:	f381 8811 	msr	BASEPRI, r1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	4816      	ldr	r0, [pc, #88]	; (800281c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80027c2:	f7ff fd1d 	bl	8002200 <_PreparePacket>
 80027c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	e00b      	b.n	80027ee <SEGGER_SYSVIEW_RecordU32+0x46>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	1c59      	adds	r1, r3, #1
 80027de:	61f9      	str	r1, [r7, #28]
 80027e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	09db      	lsrs	r3, r3, #7
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2b7f      	cmp	r3, #127	; 0x7f
 80027f2:	d8f0      	bhi.n	80027d6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	61fa      	str	r2, [r7, #28]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68f9      	ldr	r1, [r7, #12]
 8002808:	6938      	ldr	r0, [r7, #16]
 800280a:	f7ff fde9 	bl	80023e0 <_SendPacket>
  RECORD_END();
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f383 8811 	msr	BASEPRI, r3
}
 8002814:	bf00      	nop
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2407f390 	.word	0x2407f390

08002820 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b08c      	sub	sp, #48	; 0x30
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800282c:	f3ef 8311 	mrs	r3, BASEPRI
 8002830:	f04f 0120 	mov.w	r1, #32
 8002834:	f381 8811 	msr	BASEPRI, r1
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	4825      	ldr	r0, [pc, #148]	; (80028d0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800283c:	f7ff fce0 	bl	8002200 <_PreparePacket>
 8002840:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
 800284e:	e00b      	b.n	8002868 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	b2da      	uxtb	r2, r3
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	1c59      	adds	r1, r3, #1
 8002858:	62f9      	str	r1, [r7, #44]	; 0x2c
 800285a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	09db      	lsrs	r3, r3, #7
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	2b7f      	cmp	r3, #127	; 0x7f
 800286c:	d8f0      	bhi.n	8002850 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	623b      	str	r3, [r7, #32]
 8002886:	e00b      	b.n	80028a0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	1c59      	adds	r1, r3, #1
 8002890:	6279      	str	r1, [r7, #36]	; 0x24
 8002892:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	09db      	lsrs	r3, r3, #7
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2b7f      	cmp	r3, #127	; 0x7f
 80028a4:	d8f0      	bhi.n	8002888 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	627a      	str	r2, [r7, #36]	; 0x24
 80028ac:	6a3a      	ldr	r2, [r7, #32]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	6979      	ldr	r1, [r7, #20]
 80028ba:	69b8      	ldr	r0, [r7, #24]
 80028bc:	f7ff fd90 	bl	80023e0 <_SendPacket>
  RECORD_END();
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f383 8811 	msr	BASEPRI, r3
}
 80028c6:	bf00      	nop
 80028c8:	3730      	adds	r7, #48	; 0x30
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2407f390 	.word	0x2407f390

080028d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	; 0x30
 80028d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80028da:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <SEGGER_SYSVIEW_Start+0x16c>)
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80028e0:	f3ef 8311 	mrs	r3, BASEPRI
 80028e4:	f04f 0120 	mov.w	r1, #32
 80028e8:	f381 8811 	msr	BASEPRI, r1
 80028ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80028ee:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <SEGGER_SYSVIEW_Start+0x16c>)
 80028f0:	785b      	ldrb	r3, [r3, #1]
 80028f2:	220a      	movs	r2, #10
 80028f4:	4953      	ldr	r1, [pc, #332]	; (8002a44 <SEGGER_SYSVIEW_Start+0x170>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fcf2 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8002902:	f7ff f92f 	bl	8001b64 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002906:	200a      	movs	r0, #10
 8002908:	f7ff ff30 	bl	800276c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800290c:	f3ef 8311 	mrs	r3, BASEPRI
 8002910:	f04f 0120 	mov.w	r1, #32
 8002914:	f381 8811 	msr	BASEPRI, r1
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	484b      	ldr	r0, [pc, #300]	; (8002a48 <SEGGER_SYSVIEW_Start+0x174>)
 800291c:	f7ff fc70 	bl	8002200 <_PreparePacket>
 8002920:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292a:	4b45      	ldr	r3, [pc, #276]	; (8002a40 <SEGGER_SYSVIEW_Start+0x16c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002930:	e00b      	b.n	800294a <SEGGER_SYSVIEW_Start+0x76>
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	b2da      	uxtb	r2, r3
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	1c59      	adds	r1, r3, #1
 800293a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800293c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	09db      	lsrs	r3, r3, #7
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	2b7f      	cmp	r3, #127	; 0x7f
 800294e:	d8f0      	bhi.n	8002932 <SEGGER_SYSVIEW_Start+0x5e>
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
 8002964:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <SEGGER_SYSVIEW_Start+0x16c>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	623b      	str	r3, [r7, #32]
 800296a:	e00b      	b.n	8002984 <SEGGER_SYSVIEW_Start+0xb0>
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	1c59      	adds	r1, r3, #1
 8002974:	6279      	str	r1, [r7, #36]	; 0x24
 8002976:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	09db      	lsrs	r3, r3, #7
 8002982:	623b      	str	r3, [r7, #32]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	2b7f      	cmp	r3, #127	; 0x7f
 8002988:	d8f0      	bhi.n	800296c <SEGGER_SYSVIEW_Start+0x98>
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	627a      	str	r2, [r7, #36]	; 0x24
 8002990:	6a3a      	ldr	r2, [r7, #32]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <SEGGER_SYSVIEW_Start+0x16c>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	e00b      	b.n	80029be <SEGGER_SYSVIEW_Start+0xea>
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	1c59      	adds	r1, r3, #1
 80029ae:	61f9      	str	r1, [r7, #28]
 80029b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	09db      	lsrs	r3, r3, #7
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b7f      	cmp	r3, #127	; 0x7f
 80029c2:	d8f0      	bhi.n	80029a6 <SEGGER_SYSVIEW_Start+0xd2>
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	61fa      	str	r2, [r7, #28]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	e00b      	b.n	80029f6 <SEGGER_SYSVIEW_Start+0x122>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	1c59      	adds	r1, r3, #1
 80029e6:	6179      	str	r1, [r7, #20]
 80029e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	09db      	lsrs	r3, r3, #7
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b7f      	cmp	r3, #127	; 0x7f
 80029fa:	d8f0      	bhi.n	80029de <SEGGER_SYSVIEW_Start+0x10a>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	617a      	str	r2, [r7, #20]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002a0c:	2218      	movs	r2, #24
 8002a0e:	6839      	ldr	r1, [r7, #0]
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fce5 	bl	80023e0 <_SendPacket>
      RECORD_END();
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <SEGGER_SYSVIEW_Start+0x16c>)
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <SEGGER_SYSVIEW_Start+0x16c>)
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002a2a:	f000 f9eb 	bl	8002e04 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002a2e:	f000 f9b1 	bl	8002d94 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002a32:	f000 fc13 	bl	800325c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8002a36:	bf00      	nop
 8002a38:	3730      	adds	r7, #48	; 0x30
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2407f360 	.word	0x2407f360
 8002a44:	08008d98 	.word	0x08008d98
 8002a48:	2407f390 	.word	0x2407f390

08002a4c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002a52:	f3ef 8311 	mrs	r3, BASEPRI
 8002a56:	f04f 0120 	mov.w	r1, #32
 8002a5a:	f381 8811 	msr	BASEPRI, r1
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	480b      	ldr	r0, [pc, #44]	; (8002a90 <SEGGER_SYSVIEW_Stop+0x44>)
 8002a62:	f7ff fbcd 	bl	8002200 <_PreparePacket>
 8002a66:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <SEGGER_SYSVIEW_Stop+0x48>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002a70:	220b      	movs	r2, #11
 8002a72:	6839      	ldr	r1, [r7, #0]
 8002a74:	6838      	ldr	r0, [r7, #0]
 8002a76:	f7ff fcb3 	bl	80023e0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <SEGGER_SYSVIEW_Stop+0x48>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f383 8811 	msr	BASEPRI, r3
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2407f390 	.word	0x2407f390
 8002a94:	2407f360 	.word	0x2407f360

08002a98 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08c      	sub	sp, #48	; 0x30
 8002a9c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8002aa2:	f04f 0120 	mov.w	r1, #32
 8002aa6:	f381 8811 	msr	BASEPRI, r1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	4845      	ldr	r0, [pc, #276]	; (8002bc4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002aae:	f7ff fba7 	bl	8002200 <_PreparePacket>
 8002ab2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002abc:	4b42      	ldr	r3, [pc, #264]	; (8002bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac2:	e00b      	b.n	8002adc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aca:	1c59      	adds	r1, r3, #1
 8002acc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002ace:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	09db      	lsrs	r3, r3, #7
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	2b7f      	cmp	r3, #127	; 0x7f
 8002ae0:	d8f0      	bhi.n	8002ac4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
 8002af6:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	e00b      	b.n	8002b16 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	1c59      	adds	r1, r3, #1
 8002b06:	6279      	str	r1, [r7, #36]	; 0x24
 8002b08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	09db      	lsrs	r3, r3, #7
 8002b14:	623b      	str	r3, [r7, #32]
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	2b7f      	cmp	r3, #127	; 0x7f
 8002b1a:	d8f0      	bhi.n	8002afe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	627a      	str	r2, [r7, #36]	; 0x24
 8002b22:	6a3a      	ldr	r2, [r7, #32]
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	e00b      	b.n	8002b50 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	1c59      	adds	r1, r3, #1
 8002b40:	61f9      	str	r1, [r7, #28]
 8002b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	09db      	lsrs	r3, r3, #7
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2b7f      	cmp	r3, #127	; 0x7f
 8002b54:	d8f0      	bhi.n	8002b38 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	61fa      	str	r2, [r7, #28]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	e00b      	b.n	8002b88 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	1c59      	adds	r1, r3, #1
 8002b78:	6179      	str	r1, [r7, #20]
 8002b7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	09db      	lsrs	r3, r3, #7
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b8c:	d8f0      	bhi.n	8002b70 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	617a      	str	r2, [r7, #20]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002b9e:	2218      	movs	r2, #24
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	68b8      	ldr	r0, [r7, #8]
 8002ba4:	f7ff fc1c 	bl	80023e0 <_SendPacket>
  RECORD_END();
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	4798      	blx	r3
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3730      	adds	r7, #48	; 0x30
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	2407f390 	.word	0x2407f390
 8002bc8:	2407f360 	.word	0x2407f360

08002bcc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b092      	sub	sp, #72	; 0x48
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8002bd8:	f04f 0120 	mov.w	r1, #32
 8002bdc:	f381 8811 	msr	BASEPRI, r1
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	486a      	ldr	r0, [pc, #424]	; (8002d8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8002be4:	f7ff fb0c 	bl	8002200 <_PreparePacket>
 8002be8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4b66      	ldr	r3, [pc, #408]	; (8002d90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002bfe:	e00b      	b.n	8002c18 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8002c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c06:	1c59      	adds	r1, r3, #1
 8002c08:	6479      	str	r1, [r7, #68]	; 0x44
 8002c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c14:	09db      	lsrs	r3, r3, #7
 8002c16:	643b      	str	r3, [r7, #64]	; 0x40
 8002c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c1c:	d8f0      	bhi.n	8002c00 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8002c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	647a      	str	r2, [r7, #68]	; 0x44
 8002c24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c38:	e00b      	b.n	8002c52 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c40:	1c59      	adds	r1, r3, #1
 8002c42:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002c44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4e:	09db      	lsrs	r3, r3, #7
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	2b7f      	cmp	r3, #127	; 0x7f
 8002c56:	d8f0      	bhi.n	8002c3a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8002c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c66:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	4619      	mov	r1, r3
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7ff fa75 	bl	8002160 <_EncodeStr>
 8002c76:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002c78:	2209      	movs	r2, #9
 8002c7a:	68f9      	ldr	r1, [r7, #12]
 8002c7c:	6938      	ldr	r0, [r7, #16]
 8002c7e:	f7ff fbaf 	bl	80023e0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
 8002c96:	e00b      	b.n	8002cb0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9e:	1c59      	adds	r1, r3, #1
 8002ca0:	6379      	str	r1, [r7, #52]	; 0x34
 8002ca2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	09db      	lsrs	r3, r3, #7
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8002cb4:	d8f0      	bhi.n	8002c98 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	637a      	str	r2, [r7, #52]	; 0x34
 8002cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd0:	e00b      	b.n	8002cea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	1c59      	adds	r1, r3, #1
 8002cda:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002cdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	09db      	lsrs	r3, r3, #7
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	2b7f      	cmp	r3, #127	; 0x7f
 8002cee:	d8f0      	bhi.n	8002cd2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	623b      	str	r3, [r7, #32]
 8002d0a:	e00b      	b.n	8002d24 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	1c59      	adds	r1, r3, #1
 8002d14:	6279      	str	r1, [r7, #36]	; 0x24
 8002d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	09db      	lsrs	r3, r3, #7
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2b7f      	cmp	r3, #127	; 0x7f
 8002d28:	d8f0      	bhi.n	8002d0c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	627a      	str	r2, [r7, #36]	; 0x24
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	e00b      	b.n	8002d5c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	1c59      	adds	r1, r3, #1
 8002d4c:	61f9      	str	r1, [r7, #28]
 8002d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	09db      	lsrs	r3, r3, #7
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8002d60:	d8f0      	bhi.n	8002d44 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	61fa      	str	r2, [r7, #28]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002d72:	2215      	movs	r2, #21
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	6938      	ldr	r0, [r7, #16]
 8002d78:	f7ff fb32 	bl	80023e0 <_SendPacket>
  RECORD_END();
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f383 8811 	msr	BASEPRI, r3
}
 8002d82:	bf00      	nop
 8002d84:	3748      	adds	r7, #72	; 0x48
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2407f390 	.word	0x2407f390
 8002d90:	2407f360 	.word	0x2407f360

08002d94 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002daa:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4798      	blx	r3
  }
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	2407f360 	.word	0x2407f360

08002dbc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8002dc8:	f04f 0120 	mov.w	r1, #32
 8002dcc:	f381 8811 	msr	BASEPRI, r1
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	480b      	ldr	r0, [pc, #44]	; (8002e00 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002dd4:	f7ff fa14 	bl	8002200 <_PreparePacket>
 8002dd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	6938      	ldr	r0, [r7, #16]
 8002de0:	f7ff f9be 	bl	8002160 <_EncodeStr>
 8002de4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002de6:	220e      	movs	r2, #14
 8002de8:	68f9      	ldr	r1, [r7, #12]
 8002dea:	6938      	ldr	r0, [r7, #16]
 8002dec:	f7ff faf8 	bl	80023e0 <_SendPacket>
  RECORD_END();
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f383 8811 	msr	BASEPRI, r3
}
 8002df6:	bf00      	nop
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	2407f390 	.word	0x2407f390

08002e04 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01a      	beq.n	8002e48 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d015      	beq.n	8002e48 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4798      	blx	r3
 8002e24:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002e28:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	000a      	movs	r2, r1
 8002e38:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4621      	mov	r1, r4
 8002e40:	200d      	movs	r0, #13
 8002e42:	f7ff fced 	bl	8002820 <SEGGER_SYSVIEW_RecordU32x2>
 8002e46:	e006      	b.n	8002e56 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	200c      	movs	r0, #12
 8002e50:	f7ff fcaa 	bl	80027a8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd90      	pop	{r4, r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	2407f360 	.word	0x2407f360
 8002e64:	e0001004 	.word	0xe0001004

08002e68 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8002e72:	f04f 0120 	mov.w	r1, #32
 8002e76:	f381 8811 	msr	BASEPRI, r1
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	4819      	ldr	r0, [pc, #100]	; (8002ee4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002e7e:	f7ff f9bf 	bl	8002200 <_PreparePacket>
 8002e82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e90:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	e00b      	b.n	8002eb4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	1c59      	adds	r1, r3, #1
 8002ea4:	6179      	str	r1, [r7, #20]
 8002ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	09db      	lsrs	r3, r3, #7
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8002eb8:	d8f0      	bhi.n	8002e9c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	617a      	str	r2, [r7, #20]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002eca:	2202      	movs	r2, #2
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	68b8      	ldr	r0, [r7, #8]
 8002ed0:	f7ff fa86 	bl	80023e0 <_SendPacket>
  RECORD_END();
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f383 8811 	msr	BASEPRI, r3
}
 8002eda:	bf00      	nop
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2407f390 	.word	0x2407f390
 8002ee8:	e000ed04 	.word	0xe000ed04

08002eec <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002ef2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ef6:	f04f 0120 	mov.w	r1, #32
 8002efa:	f381 8811 	msr	BASEPRI, r1
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	4807      	ldr	r0, [pc, #28]	; (8002f20 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002f02:	f7ff f97d 	bl	8002200 <_PreparePacket>
 8002f06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002f08:	2203      	movs	r2, #3
 8002f0a:	6839      	ldr	r1, [r7, #0]
 8002f0c:	6838      	ldr	r0, [r7, #0]
 8002f0e:	f7ff fa67 	bl	80023e0 <_SendPacket>
  RECORD_END();
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f383 8811 	msr	BASEPRI, r3
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	2407f390 	.word	0x2407f390

08002f24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f2e:	f04f 0120 	mov.w	r1, #32
 8002f32:	f381 8811 	msr	BASEPRI, r1
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	4807      	ldr	r0, [pc, #28]	; (8002f58 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002f3a:	f7ff f961 	bl	8002200 <_PreparePacket>
 8002f3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002f40:	2212      	movs	r2, #18
 8002f42:	6839      	ldr	r1, [r7, #0]
 8002f44:	6838      	ldr	r0, [r7, #0]
 8002f46:	f7ff fa4b 	bl	80023e0 <_SendPacket>
  RECORD_END();
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f383 8811 	msr	BASEPRI, r3
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	2407f390 	.word	0x2407f390

08002f5c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002f62:	f3ef 8311 	mrs	r3, BASEPRI
 8002f66:	f04f 0120 	mov.w	r1, #32
 8002f6a:	f381 8811 	msr	BASEPRI, r1
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	4807      	ldr	r0, [pc, #28]	; (8002f90 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002f72:	f7ff f945 	bl	8002200 <_PreparePacket>
 8002f76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002f78:	2211      	movs	r2, #17
 8002f7a:	6839      	ldr	r1, [r7, #0]
 8002f7c:	6838      	ldr	r0, [r7, #0]
 8002f7e:	f7ff fa2f 	bl	80023e0 <_SendPacket>
  RECORD_END();
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f383 8811 	msr	BASEPRI, r3
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	2407f390 	.word	0x2407f390

08002f94 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8002fa0:	f04f 0120 	mov.w	r1, #32
 8002fa4:	f381 8811 	msr	BASEPRI, r1
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	4819      	ldr	r0, [pc, #100]	; (8003010 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8002fac:	f7ff f928 	bl	8002200 <_PreparePacket>
 8002fb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e00b      	b.n	8002fe2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	1c59      	adds	r1, r3, #1
 8002fd2:	61f9      	str	r1, [r7, #28]
 8002fd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	09db      	lsrs	r3, r3, #7
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8002fe6:	d8f0      	bhi.n	8002fca <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	61fa      	str	r2, [r7, #28]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	6938      	ldr	r0, [r7, #16]
 8002ffe:	f7ff f9ef 	bl	80023e0 <_SendPacket>
  RECORD_END();
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f383 8811 	msr	BASEPRI, r3
}
 8003008:	bf00      	nop
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	2407f390 	.word	0x2407f390
 8003014:	2407f360 	.word	0x2407f360

08003018 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003020:	f3ef 8311 	mrs	r3, BASEPRI
 8003024:	f04f 0120 	mov.w	r1, #32
 8003028:	f381 8811 	msr	BASEPRI, r1
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	4819      	ldr	r0, [pc, #100]	; (8003094 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003030:	f7ff f8e6 	bl	8002200 <_PreparePacket>
 8003034:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	e00b      	b.n	8003066 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	1c59      	adds	r1, r3, #1
 8003056:	61f9      	str	r1, [r7, #28]
 8003058:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	09db      	lsrs	r3, r3, #7
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b7f      	cmp	r3, #127	; 0x7f
 800306a:	d8f0      	bhi.n	800304e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	61fa      	str	r2, [r7, #28]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800307c:	2204      	movs	r2, #4
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	6938      	ldr	r0, [r7, #16]
 8003082:	f7ff f9ad 	bl	80023e0 <_SendPacket>
  RECORD_END();
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f383 8811 	msr	BASEPRI, r3
}
 800308c:	bf00      	nop
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	2407f390 	.word	0x2407f390
 8003098:	2407f360 	.word	0x2407f360

0800309c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80030a4:	f3ef 8311 	mrs	r3, BASEPRI
 80030a8:	f04f 0120 	mov.w	r1, #32
 80030ac:	f381 8811 	msr	BASEPRI, r1
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	4819      	ldr	r0, [pc, #100]	; (8003118 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80030b4:	f7ff f8a4 	bl	8002200 <_PreparePacket>
 80030b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	e00b      	b.n	80030ea <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	1c59      	adds	r1, r3, #1
 80030da:	61f9      	str	r1, [r7, #28]
 80030dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	09db      	lsrs	r3, r3, #7
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b7f      	cmp	r3, #127	; 0x7f
 80030ee:	d8f0      	bhi.n	80030d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	61fa      	str	r2, [r7, #28]
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003100:	2206      	movs	r2, #6
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	6938      	ldr	r0, [r7, #16]
 8003106:	f7ff f96b 	bl	80023e0 <_SendPacket>
  RECORD_END();
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f383 8811 	msr	BASEPRI, r3
}
 8003110:	bf00      	nop
 8003112:	3720      	adds	r7, #32
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	2407f390 	.word	0x2407f390
 800311c:	2407f360 	.word	0x2407f360

08003120 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	; 0x30
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800312a:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d06d      	beq.n	800320e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003132:	4b39      	ldr	r3, [pc, #228]	; (8003218 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
 800313c:	e008      	b.n	8003150 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	3301      	adds	r3, #1
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003154:	429a      	cmp	r2, r3
 8003156:	d3f2      	bcc.n	800313e <SEGGER_SYSVIEW_SendModule+0x1e>
 8003158:	e000      	b.n	800315c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800315a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d055      	beq.n	800320e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003162:	f3ef 8311 	mrs	r3, BASEPRI
 8003166:	f04f 0120 	mov.w	r1, #32
 800316a:	f381 8811 	msr	BASEPRI, r1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	482a      	ldr	r0, [pc, #168]	; (800321c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003172:	f7ff f845 	bl	8002200 <_PreparePacket>
 8003176:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	e00b      	b.n	800319e <SEGGER_SYSVIEW_SendModule+0x7e>
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	1c59      	adds	r1, r3, #1
 800318e:	6279      	str	r1, [r7, #36]	; 0x24
 8003190:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	09db      	lsrs	r3, r3, #7
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	2b7f      	cmp	r3, #127	; 0x7f
 80031a2:	d8f0      	bhi.n	8003186 <SEGGER_SYSVIEW_SendModule+0x66>
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	627a      	str	r2, [r7, #36]	; 0x24
 80031aa:	6a3a      	ldr	r2, [r7, #32]
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	e00b      	b.n	80031d8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	1c59      	adds	r1, r3, #1
 80031c8:	61f9      	str	r1, [r7, #28]
 80031ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	09db      	lsrs	r3, r3, #7
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b7f      	cmp	r3, #127	; 0x7f
 80031dc:	d8f0      	bhi.n	80031c0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	61fa      	str	r2, [r7, #28]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	4619      	mov	r1, r3
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7fe ffb2 	bl	8002160 <_EncodeStr>
 80031fc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80031fe:	2216      	movs	r2, #22
 8003200:	68f9      	ldr	r1, [r7, #12]
 8003202:	6938      	ldr	r0, [r7, #16]
 8003204:	f7ff f8ec 	bl	80023e0 <_SendPacket>
      RECORD_END();
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800320e:	bf00      	nop
 8003210:	3730      	adds	r7, #48	; 0x30
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	2407f388 	.word	0x2407f388
 800321c:	2407f390 	.word	0x2407f390

08003220 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00f      	beq.n	800324e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f2      	bne.n	8003234 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	2407f388 	.word	0x2407f388

0800325c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003262:	f3ef 8311 	mrs	r3, BASEPRI
 8003266:	f04f 0120 	mov.w	r1, #32
 800326a:	f381 8811 	msr	BASEPRI, r1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	4817      	ldr	r0, [pc, #92]	; (80032d0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003272:	f7fe ffc5 	bl	8002200 <_PreparePacket>
 8003276:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	e00b      	b.n	80032a0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	1c59      	adds	r1, r3, #1
 8003290:	6179      	str	r1, [r7, #20]
 8003292:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	09db      	lsrs	r3, r3, #7
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b7f      	cmp	r3, #127	; 0x7f
 80032a4:	d8f0      	bhi.n	8003288 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	617a      	str	r2, [r7, #20]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80032b6:	221b      	movs	r2, #27
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	68b8      	ldr	r0, [r7, #8]
 80032bc:	f7ff f890 	bl	80023e0 <_SendPacket>
  RECORD_END();
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f383 8811 	msr	BASEPRI, r3
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	2407f390 	.word	0x2407f390
 80032d4:	2407f38c 	.word	0x2407f38c

080032d8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80032e0:	f3ef 8311 	mrs	r3, BASEPRI
 80032e4:	f04f 0120 	mov.w	r1, #32
 80032e8:	f381 8811 	msr	BASEPRI, r1
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	4827      	ldr	r0, [pc, #156]	; (800338c <SEGGER_SYSVIEW_Warn+0xb4>)
 80032f0:	f7fe ff86 	bl	8002200 <_PreparePacket>
 80032f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	6938      	ldr	r0, [r7, #16]
 80032fc:	f7fe ff30 	bl	8002160 <_EncodeStr>
 8003300:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	2301      	movs	r3, #1
 8003308:	623b      	str	r3, [r7, #32]
 800330a:	e00b      	b.n	8003324 <SEGGER_SYSVIEW_Warn+0x4c>
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	1c59      	adds	r1, r3, #1
 8003314:	6279      	str	r1, [r7, #36]	; 0x24
 8003316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	09db      	lsrs	r3, r3, #7
 8003322:	623b      	str	r3, [r7, #32]
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	2b7f      	cmp	r3, #127	; 0x7f
 8003328:	d8f0      	bhi.n	800330c <SEGGER_SYSVIEW_Warn+0x34>
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	627a      	str	r2, [r7, #36]	; 0x24
 8003330:	6a3a      	ldr	r2, [r7, #32]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	e00b      	b.n	800335c <SEGGER_SYSVIEW_Warn+0x84>
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	61f9      	str	r1, [r7, #28]
 800334e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	09db      	lsrs	r3, r3, #7
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b7f      	cmp	r3, #127	; 0x7f
 8003360:	d8f0      	bhi.n	8003344 <SEGGER_SYSVIEW_Warn+0x6c>
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	61fa      	str	r2, [r7, #28]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003372:	221a      	movs	r2, #26
 8003374:	68f9      	ldr	r1, [r7, #12]
 8003376:	6938      	ldr	r0, [r7, #16]
 8003378:	f7ff f832 	bl	80023e0 <_SendPacket>
  RECORD_END();
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f383 8811 	msr	BASEPRI, r3
}
 8003382:	bf00      	nop
 8003384:	3728      	adds	r7, #40	; 0x28
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	2407f390 	.word	0x2407f390

08003390 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	2000      	movs	r0, #0
 80033a4:	f7fe fde6 	bl	8001f74 <SEGGER_RTT_Write>
  return len;
 80033a8:	683b      	ldr	r3, [r7, #0]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033ba:	f000 fbaf 	bl	8003b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033be:	f000 f86f 	bl	80034a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033c2:	f000 f923 	bl	800360c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80033c6:	f000 f8d5 	bl	8003574 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	user_data = "Start of program\r\n";
 80033ca:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <main+0xc4>)
 80033cc:	4a2b      	ldr	r2, [pc, #172]	; (800347c <main+0xc8>)
 80033ce:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
 80033d0:	4b29      	ldr	r3, [pc, #164]	; (8003478 <main+0xc4>)
 80033d2:	681c      	ldr	r4, [r3, #0]
 80033d4:	4b28      	ldr	r3, [pc, #160]	; (8003478 <main+0xc4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fc ffcb 	bl	8000374 <strlen>
 80033de:	4603      	mov	r3, r0
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
 80033e6:	4621      	mov	r1, r4
 80033e8:	4825      	ldr	r0, [pc, #148]	; (8003480 <main+0xcc>)
 80033ea:	f003 fd49 	bl	8006e80 <HAL_UART_Transmit>

	// Enable CCYCCNT Counter
	DWT->CTRL |= (1 << 0);
 80033ee:	4b25      	ldr	r3, [pc, #148]	; (8003484 <main+0xd0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a24      	ldr	r2, [pc, #144]	; (8003484 <main+0xd0>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6013      	str	r3, [r2, #0]


	//Starting SEGGER SYSVIEW
	  SEGGER_SYSVIEW_Conf();
 80033fa:	f7fe fa3b 	bl	8001874 <SEGGER_SYSVIEW_Conf>
	  SEGGER_SYSVIEW_Start();
 80033fe:	f7ff fa69 	bl	80028d4 <SEGGER_SYSVIEW_Start>


  TaskStatus = xTaskCreate(Task_Hello_Handler, "Hello", 100, "Hello TASK", 1, &Task_Hello_Handle);
 8003402:	f107 0308 	add.w	r3, r7, #8
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	2301      	movs	r3, #1
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <main+0xd4>)
 800340e:	2264      	movs	r2, #100	; 0x64
 8003410:	491e      	ldr	r1, [pc, #120]	; (800348c <main+0xd8>)
 8003412:	481f      	ldr	r0, [pc, #124]	; (8003490 <main+0xdc>)
 8003414:	f7fd f9b3 	bl	800077e <xTaskCreate>
 8003418:	6178      	str	r0, [r7, #20]
  configASSERT(TaskStatus == pdPASS);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d00c      	beq.n	800343a <main+0x86>
        __asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	b672      	cpsid	i
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	b662      	cpsie	i
 8003434:	613b      	str	r3, [r7, #16]
    }
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <main+0x84>

  TaskStatus = xTaskCreate(Task_World_Handler, "World", 100, "World TASK", 1, &Task_World_Handle);
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	2301      	movs	r3, #1
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	4b14      	ldr	r3, [pc, #80]	; (8003494 <main+0xe0>)
 8003444:	2264      	movs	r2, #100	; 0x64
 8003446:	4914      	ldr	r1, [pc, #80]	; (8003498 <main+0xe4>)
 8003448:	4814      	ldr	r0, [pc, #80]	; (800349c <main+0xe8>)
 800344a:	f7fd f998 	bl	800077e <xTaskCreate>
 800344e:	6178      	str	r0, [r7, #20]
  configASSERT(TaskStatus == pdPASS);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d00c      	beq.n	8003470 <main+0xbc>
        __asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	b672      	cpsid	i
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	b662      	cpsie	i
 800346a:	60fb      	str	r3, [r7, #12]
    }
 800346c:	bf00      	nop
 800346e:	e7fe      	b.n	800346e <main+0xba>

  // Start FreeRTOS scheduler
  vTaskStartScheduler();
 8003470:	f7fd fadc 	bl	8000a2c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003474:	e7fe      	b.n	8003474 <main+0xc0>
 8003476:	bf00      	nop
 8003478:	24000008 	.word	0x24000008
 800347c:	08008d28 	.word	0x08008d28
 8003480:	2407f474 	.word	0x2407f474
 8003484:	e0001000 	.word	0xe0001000
 8003488:	08008d3c 	.word	0x08008d3c
 800348c:	08008d48 	.word	0x08008d48
 8003490:	080036ed 	.word	0x080036ed
 8003494:	08008d50 	.word	0x08008d50
 8003498:	08008d5c 	.word	0x08008d5c
 800349c:	0800372d 	.word	0x0800372d

080034a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b09c      	sub	sp, #112	; 0x70
 80034a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034aa:	224c      	movs	r2, #76	; 0x4c
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f004 fd98 	bl	8007fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	2220      	movs	r2, #32
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f004 fd92 	bl	8007fe4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80034c0:	2002      	movs	r0, #2
 80034c2:	f000 fe3d 	bl	8004140 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80034c6:	2300      	movs	r3, #0
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	4b28      	ldr	r3, [pc, #160]	; (800356c <SystemClock_Config+0xcc>)
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	4a27      	ldr	r2, [pc, #156]	; (800356c <SystemClock_Config+0xcc>)
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034d6:	4b25      	ldr	r3, [pc, #148]	; (800356c <SystemClock_Config+0xcc>)
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4b23      	ldr	r3, [pc, #140]	; (8003570 <SystemClock_Config+0xd0>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80034e8:	4a21      	ldr	r2, [pc, #132]	; (8003570 <SystemClock_Config+0xd0>)
 80034ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ee:	6193      	str	r3, [r2, #24]
 80034f0:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <SystemClock_Config+0xd0>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80034fc:	bf00      	nop
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <SystemClock_Config+0xd0>)
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350a:	d1f8      	bne.n	80034fe <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800350c:	2301      	movs	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003516:	2300      	movs	r3, #0
 8003518:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800351a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fe48 	bl	80041b4 <HAL_RCC_OscConfig>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800352a:	f000 f931 	bl	8003790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800352e:	233f      	movs	r3, #63	; 0x3f
 8003530:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003532:	2302      	movs	r3, #2
 8003534:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003542:	2340      	movs	r3, #64	; 0x40
 8003544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800354a:	2300      	movs	r3, #0
 800354c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fa3c 	bl	80049d0 <HAL_RCC_ClockConfig>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800355e:	f000 f917 	bl	8003790 <Error_Handler>
  }
}
 8003562:	bf00      	nop
 8003564:	3770      	adds	r7, #112	; 0x70
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	58000400 	.word	0x58000400
 8003570:	58024800 	.word	0x58024800

08003574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <MX_USART2_UART_Init+0x90>)
 800357a:	4a23      	ldr	r2, [pc, #140]	; (8003608 <MX_USART2_UART_Init+0x94>)
 800357c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800357e:	4b21      	ldr	r3, [pc, #132]	; (8003604 <MX_USART2_UART_Init+0x90>)
 8003580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003586:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <MX_USART2_UART_Init+0x90>)
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800358c:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <MX_USART2_UART_Init+0x90>)
 800358e:	2200      	movs	r2, #0
 8003590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <MX_USART2_UART_Init+0x90>)
 8003594:	2200      	movs	r2, #0
 8003596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003598:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <MX_USART2_UART_Init+0x90>)
 800359a:	220c      	movs	r2, #12
 800359c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800359e:	4b19      	ldr	r3, [pc, #100]	; (8003604 <MX_USART2_UART_Init+0x90>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035a4:	4b17      	ldr	r3, [pc, #92]	; (8003604 <MX_USART2_UART_Init+0x90>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <MX_USART2_UART_Init+0x90>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <MX_USART2_UART_Init+0x90>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <MX_USART2_UART_Init+0x90>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035bc:	4811      	ldr	r0, [pc, #68]	; (8003604 <MX_USART2_UART_Init+0x90>)
 80035be:	f003 fc0f 	bl	8006de0 <HAL_UART_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80035c8:	f000 f8e2 	bl	8003790 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035cc:	2100      	movs	r1, #0
 80035ce:	480d      	ldr	r0, [pc, #52]	; (8003604 <MX_USART2_UART_Init+0x90>)
 80035d0:	f004 fbfc 	bl	8007dcc <HAL_UARTEx_SetTxFifoThreshold>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80035da:	f000 f8d9 	bl	8003790 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035de:	2100      	movs	r1, #0
 80035e0:	4808      	ldr	r0, [pc, #32]	; (8003604 <MX_USART2_UART_Init+0x90>)
 80035e2:	f004 fc31 	bl	8007e48 <HAL_UARTEx_SetRxFifoThreshold>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80035ec:	f000 f8d0 	bl	8003790 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80035f0:	4804      	ldr	r0, [pc, #16]	; (8003604 <MX_USART2_UART_Init+0x90>)
 80035f2:	f004 fbb2 	bl	8007d5a <HAL_UARTEx_DisableFifoMode>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80035fc:	f000 f8c8 	bl	8003790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003600:	bf00      	nop
 8003602:	bd80      	pop	{r7, pc}
 8003604:	2407f474 	.word	0x2407f474
 8003608:	40004400 	.word	0x40004400

0800360c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	605a      	str	r2, [r3, #4]
 800361c:	609a      	str	r2, [r3, #8]
 800361e:	60da      	str	r2, [r3, #12]
 8003620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <MX_GPIO_Init+0xd8>)
 8003624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003628:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <MX_GPIO_Init+0xd8>)
 800362a:	f043 0304 	orr.w	r3, r3, #4
 800362e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003632:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <MX_GPIO_Init+0xd8>)
 8003634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003640:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <MX_GPIO_Init+0xd8>)
 8003642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003646:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <MX_GPIO_Init+0xd8>)
 8003648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800364c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003650:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <MX_GPIO_Init+0xd8>)
 8003652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800365e:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <MX_GPIO_Init+0xd8>)
 8003660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003664:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <MX_GPIO_Init+0xd8>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <MX_GPIO_Init+0xd8>)
 8003670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <MX_GPIO_Init+0xd8>)
 800367e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003682:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <MX_GPIO_Init+0xd8>)
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800368c:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <MX_GPIO_Init+0xd8>)
 800368e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800369a:	2200      	movs	r2, #0
 800369c:	2101      	movs	r1, #1
 800369e:	4812      	ldr	r0, [pc, #72]	; (80036e8 <MX_GPIO_Init+0xdc>)
 80036a0:	f000 fd34 	bl	800410c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80036a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036b2:	f107 0314 	add.w	r3, r7, #20
 80036b6:	4619      	mov	r1, r3
 80036b8:	480b      	ldr	r0, [pc, #44]	; (80036e8 <MX_GPIO_Init+0xdc>)
 80036ba:	f000 fb77 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036be:	2301      	movs	r3, #1
 80036c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	4619      	mov	r1, r3
 80036d4:	4804      	ldr	r0, [pc, #16]	; (80036e8 <MX_GPIO_Init+0xdc>)
 80036d6:	f000 fb69 	bl	8003dac <HAL_GPIO_Init>

}
 80036da:	bf00      	nop
 80036dc:	3728      	adds	r7, #40	; 0x28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	58024400 	.word	0x58024400
 80036e8:	58020800 	.word	0x58020800

080036ec <Task_Hello_Handler>:

/* USER CODE BEGIN 4 */
static void Task_Hello_Handler(void* parameters)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		user_data = "Hello -\r\n";
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <Task_Hello_Handler+0x34>)
 80036f6:	4a0b      	ldr	r2, [pc, #44]	; (8003724 <Task_Hello_Handler+0x38>)
 80036f8:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <Task_Hello_Handler+0x34>)
 80036fc:	681c      	ldr	r4, [r3, #0]
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <Task_Hello_Handler+0x34>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc fe36 	bl	8000374 <strlen>
 8003708:	4603      	mov	r3, r0
 800370a:	b29a      	uxth	r2, r3
 800370c:	f04f 33ff 	mov.w	r3, #4294967295
 8003710:	4621      	mov	r1, r4
 8003712:	4805      	ldr	r0, [pc, #20]	; (8003728 <Task_Hello_Handler+0x3c>)
 8003714:	f003 fbb4 	bl	8006e80 <HAL_UART_Transmit>
		printf("%s\n", (char*)parameters);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f004 fcd9 	bl	80080d0 <puts>
		user_data = "Hello -\r\n";
 800371e:	e7e9      	b.n	80036f4 <Task_Hello_Handler+0x8>
 8003720:	24000008 	.word	0x24000008
 8003724:	08008d64 	.word	0x08008d64
 8003728:	2407f474 	.word	0x2407f474

0800372c <Task_World_Handler>:
		//taskYIELD();
	}
}

static void Task_World_Handler(void* parameters)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	while(1)
	{
		user_data = "World **\r\n";
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <Task_World_Handler+0x34>)
 8003736:	4a0b      	ldr	r2, [pc, #44]	; (8003764 <Task_World_Handler+0x38>)
 8003738:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <Task_World_Handler+0x34>)
 800373c:	681c      	ldr	r4, [r3, #0]
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <Task_World_Handler+0x34>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fc fe16 	bl	8000374 <strlen>
 8003748:	4603      	mov	r3, r0
 800374a:	b29a      	uxth	r2, r3
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
 8003750:	4621      	mov	r1, r4
 8003752:	4805      	ldr	r0, [pc, #20]	; (8003768 <Task_World_Handler+0x3c>)
 8003754:	f003 fb94 	bl	8006e80 <HAL_UART_Transmit>
		printf("%s\n", (char*)parameters);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f004 fcb9 	bl	80080d0 <puts>
		user_data = "World **\r\n";
 800375e:	e7e9      	b.n	8003734 <Task_World_Handler+0x8>
 8003760:	24000008 	.word	0x24000008
 8003764:	08008d70 	.word	0x08008d70
 8003768:	2407f474 	.word	0x2407f474

0800376c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a04      	ldr	r2, [pc, #16]	; (800378c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800377e:	f000 fa09 	bl	8003b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40001000 	.word	0x40001000

08003790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003794:	b672      	cpsid	i
}
 8003796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003798:	e7fe      	b.n	8003798 <Error_Handler+0x8>
	...

0800379c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_MspInit+0x30>)
 80037a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037a8:	4a08      	ldr	r2, [pc, #32]	; (80037cc <HAL_MspInit+0x30>)
 80037aa:	f043 0302 	orr.w	r3, r3, #2
 80037ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_MspInit+0x30>)
 80037b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	58024400 	.word	0x58024400

080037d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b0b8      	sub	sp, #224	; 0xe0
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037e8:	f107 0310 	add.w	r3, r7, #16
 80037ec:	22bc      	movs	r2, #188	; 0xbc
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f004 fbf7 	bl	8007fe4 <memset>
  if(huart->Instance==USART2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a24      	ldr	r2, [pc, #144]	; (800388c <HAL_UART_MspInit+0xbc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d141      	bne.n	8003884 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003800:	2302      	movs	r3, #2
 8003802:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800380a:	f107 0310 	add.w	r3, r7, #16
 800380e:	4618      	mov	r0, r3
 8003810:	f001 fcac 	bl	800516c <HAL_RCCEx_PeriphCLKConfig>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800381a:	f7ff ffb9 	bl	8003790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800381e:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <HAL_UART_MspInit+0xc0>)
 8003820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003824:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <HAL_UART_MspInit+0xc0>)
 8003826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800382e:	4b18      	ldr	r3, [pc, #96]	; (8003890 <HAL_UART_MspInit+0xc0>)
 8003830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_UART_MspInit+0xc0>)
 800383e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <HAL_UART_MspInit+0xc0>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800384c:	4b10      	ldr	r3, [pc, #64]	; (8003890 <HAL_UART_MspInit+0xc0>)
 800384e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800385a:	230c      	movs	r3, #12
 800385c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003872:	2307      	movs	r3, #7
 8003874:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800387c:	4619      	mov	r1, r3
 800387e:	4805      	ldr	r0, [pc, #20]	; (8003894 <HAL_UART_MspInit+0xc4>)
 8003880:	f000 fa94 	bl	8003dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003884:	bf00      	nop
 8003886:	37e0      	adds	r7, #224	; 0xe0
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40004400 	.word	0x40004400
 8003890:	58024400 	.word	0x58024400
 8003894:	58020000 	.word	0x58020000

08003898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b090      	sub	sp, #64	; 0x40
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	d827      	bhi.n	80038f6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80038a6:	2200      	movs	r2, #0
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	2036      	movs	r0, #54	; 0x36
 80038ac:	f000 fa56 	bl	8003d5c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038b0:	2036      	movs	r0, #54	; 0x36
 80038b2:	f000 fa6d 	bl	8003d90 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80038b6:	4a29      	ldr	r2, [pc, #164]	; (800395c <HAL_InitTick+0xc4>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <HAL_InitTick+0xc8>)
 80038be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c2:	4a27      	ldr	r2, [pc, #156]	; (8003960 <HAL_InitTick+0xc8>)
 80038c4:	f043 0310 	orr.w	r3, r3, #16
 80038c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038cc:	4b24      	ldr	r3, [pc, #144]	; (8003960 <HAL_InitTick+0xc8>)
 80038ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038da:	f107 0210 	add.w	r2, r7, #16
 80038de:	f107 0314 	add.w	r3, r7, #20
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 fbff 	bl	80050e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80038ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <HAL_InitTick+0x6a>
 80038f4:	e001      	b.n	80038fa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e02b      	b.n	8003952 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038fa:	f001 fbc9 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 80038fe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003900:	e004      	b.n	800390c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003902:	f001 fbc5 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 8003906:	4603      	mov	r3, r0
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800390c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390e:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_InitTick+0xcc>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	0c9b      	lsrs	r3, r3, #18
 8003916:	3b01      	subs	r3, #1
 8003918:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800391a:	4b13      	ldr	r3, [pc, #76]	; (8003968 <HAL_InitTick+0xd0>)
 800391c:	4a13      	ldr	r2, [pc, #76]	; (800396c <HAL_InitTick+0xd4>)
 800391e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_InitTick+0xd0>)
 8003922:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003926:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003928:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <HAL_InitTick+0xd0>)
 800392a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_InitTick+0xd0>)
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_InitTick+0xd0>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800393a:	480b      	ldr	r0, [pc, #44]	; (8003968 <HAL_InitTick+0xd0>)
 800393c:	f002 ff7e 	bl	800683c <HAL_TIM_Base_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003946:	4808      	ldr	r0, [pc, #32]	; (8003968 <HAL_InitTick+0xd0>)
 8003948:	f002 ffda 	bl	8006900 <HAL_TIM_Base_Start_IT>
 800394c:	4603      	mov	r3, r0
 800394e:	e000      	b.n	8003952 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
}
 8003952:	4618      	mov	r0, r3
 8003954:	3740      	adds	r7, #64	; 0x40
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	24000014 	.word	0x24000014
 8003960:	58024400 	.word	0x58024400
 8003964:	431bde83 	.word	0x431bde83
 8003968:	2407f504 	.word	0x2407f504
 800396c:	40001000 	.word	0x40001000

08003970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003974:	e7fe      	b.n	8003974 <NMI_Handler+0x4>

08003976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800397a:	e7fe      	b.n	800397a <HardFault_Handler+0x4>

0800397c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003980:	e7fe      	b.n	8003980 <MemManage_Handler+0x4>

08003982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003986:	e7fe      	b.n	8003986 <BusFault_Handler+0x4>

08003988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800398c:	e7fe      	b.n	800398c <UsageFault_Handler+0x4>

0800398e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039a0:	4802      	ldr	r0, [pc, #8]	; (80039ac <TIM6_DAC_IRQHandler+0x10>)
 80039a2:	f003 f81d 	bl	80069e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	2407f504 	.word	0x2407f504

080039b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039b4:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <SystemInit+0xec>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	4a38      	ldr	r2, [pc, #224]	; (8003a9c <SystemInit+0xec>)
 80039bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039c4:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <SystemInit+0xf0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	2b06      	cmp	r3, #6
 80039ce:	d807      	bhi.n	80039e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039d0:	4b33      	ldr	r3, [pc, #204]	; (8003aa0 <SystemInit+0xf0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 030f 	bic.w	r3, r3, #15
 80039d8:	4a31      	ldr	r2, [pc, #196]	; (8003aa0 <SystemInit+0xf0>)
 80039da:	f043 0307 	orr.w	r3, r3, #7
 80039de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80039e0:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <SystemInit+0xf4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <SystemInit+0xf4>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <SystemInit+0xf4>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <SystemInit+0xf4>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	492b      	ldr	r1, [pc, #172]	; (8003aa4 <SystemInit+0xf4>)
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <SystemInit+0xf8>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039fe:	4b28      	ldr	r3, [pc, #160]	; (8003aa0 <SystemInit+0xf0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003a0a:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <SystemInit+0xf0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 030f 	bic.w	r3, r3, #15
 8003a12:	4a23      	ldr	r2, [pc, #140]	; (8003aa0 <SystemInit+0xf0>)
 8003a14:	f043 0307 	orr.w	r3, r3, #7
 8003a18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003a1a:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <SystemInit+0xf4>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003a20:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <SystemInit+0xf4>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003a26:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <SystemInit+0xf4>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <SystemInit+0xf4>)
 8003a2e:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <SystemInit+0xfc>)
 8003a30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003a32:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <SystemInit+0xf4>)
 8003a34:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <SystemInit+0x100>)
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <SystemInit+0xf4>)
 8003a3a:	4a1e      	ldr	r2, [pc, #120]	; (8003ab4 <SystemInit+0x104>)
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003a3e:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <SystemInit+0xf4>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003a44:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <SystemInit+0xf4>)
 8003a46:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <SystemInit+0x104>)
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003a4a:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <SystemInit+0xf4>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003a50:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <SystemInit+0xf4>)
 8003a52:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <SystemInit+0x104>)
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <SystemInit+0xf4>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <SystemInit+0xf4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a10      	ldr	r2, [pc, #64]	; (8003aa4 <SystemInit+0xf4>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <SystemInit+0xf4>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <SystemInit+0x108>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b12      	ldr	r3, [pc, #72]	; (8003abc <SystemInit+0x10c>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7a:	d202      	bcs.n	8003a82 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003a7c:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <SystemInit+0x110>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <SystemInit+0x114>)
 8003a84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003a88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a8a:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <SystemInit+0xec>)
 8003a8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a90:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003a92:	bf00      	nop
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000ed00 	.word	0xe000ed00
 8003aa0:	52002000 	.word	0x52002000
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003aac:	02020200 	.word	0x02020200
 8003ab0:	01ff0000 	.word	0x01ff0000
 8003ab4:	01010280 	.word	0x01010280
 8003ab8:	5c001000 	.word	0x5c001000
 8003abc:	ffff0000 	.word	0xffff0000
 8003ac0:	51008108 	.word	0x51008108
 8003ac4:	52004000 	.word	0x52004000

08003ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003acc:	f7ff ff70 	bl	80039b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ad0:	480c      	ldr	r0, [pc, #48]	; (8003b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ad2:	490d      	ldr	r1, [pc, #52]	; (8003b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad8:	e002      	b.n	8003ae0 <LoopCopyDataInit>

08003ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ade:	3304      	adds	r3, #4

08003ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ae4:	d3f9      	bcc.n	8003ada <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ae8:	4c0a      	ldr	r4, [pc, #40]	; (8003b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aec:	e001      	b.n	8003af2 <LoopFillZerobss>

08003aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af0:	3204      	adds	r2, #4

08003af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003af4:	d3fb      	bcc.n	8003aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003af6:	f004 fa33 	bl	8007f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003afa:	f7ff fc5b 	bl	80033b4 <main>
  bx  lr
 8003afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003b04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003b08:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8003b0c:	08008e50 	.word	0x08008e50
  ldr r2, =_sbss
 8003b10:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8003b14:	2407f608 	.word	0x2407f608

08003b18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b18:	e7fe      	b.n	8003b18 <ADC3_IRQHandler>
	...

08003b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b22:	2003      	movs	r0, #3
 8003b24:	f000 f90f 	bl	8003d46 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b28:	f001 f908 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <HAL_Init+0x68>)
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	4913      	ldr	r1, [pc, #76]	; (8003b88 <HAL_Init+0x6c>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
 8003b44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <HAL_Init+0x68>)
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <HAL_Init+0x6c>)
 8003b50:	5cd3      	ldrb	r3, [r2, r3]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5c:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <HAL_Init+0x70>)
 8003b5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <HAL_Init+0x74>)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b66:	200f      	movs	r0, #15
 8003b68:	f7ff fe96 	bl	8003898 <HAL_InitTick>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e002      	b.n	8003b7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b76:	f7ff fe11 	bl	800379c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	58024400 	.word	0x58024400
 8003b88:	08008da4 	.word	0x08008da4
 8003b8c:	24000010 	.word	0x24000010
 8003b90:	2400000c 	.word	0x2400000c

08003b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_IncTick+0x20>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	24000018 	.word	0x24000018
 8003bb8:	2407f550 	.word	0x2407f550

08003bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_GetTick+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	2407f550 	.word	0x2407f550

08003bd4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_GetREVID+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	5c001000 	.word	0x5c001000

08003bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <__NVIC_SetPriorityGrouping+0x40>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1a:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <__NVIC_SetPriorityGrouping+0x40>)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	60d3      	str	r3, [r2, #12]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	e000ed00 	.word	0xe000ed00
 8003c30:	05fa0000 	.word	0x05fa0000

08003c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <__NVIC_GetPriorityGrouping+0x18>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 0307 	and.w	r3, r3, #7
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	db0b      	blt.n	8003c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	f003 021f 	and.w	r2, r3, #31
 8003c68:	4907      	ldr	r1, [pc, #28]	; (8003c88 <__NVIC_EnableIRQ+0x38>)
 8003c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2001      	movs	r0, #1
 8003c72:	fa00 f202 	lsl.w	r2, r0, r2
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	e000e100 	.word	0xe000e100

08003c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	db0a      	blt.n	8003cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	490c      	ldr	r1, [pc, #48]	; (8003cd8 <__NVIC_SetPriority+0x4c>)
 8003ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	440b      	add	r3, r1
 8003cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb4:	e00a      	b.n	8003ccc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4908      	ldr	r1, [pc, #32]	; (8003cdc <__NVIC_SetPriority+0x50>)
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	3b04      	subs	r3, #4
 8003cc4:	0112      	lsls	r2, r2, #4
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	440b      	add	r3, r1
 8003cca:	761a      	strb	r2, [r3, #24]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000e100 	.word	0xe000e100
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f1c3 0307 	rsb	r3, r3, #7
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	bf28      	it	cs
 8003cfe:	2304      	movcs	r3, #4
 8003d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3304      	adds	r3, #4
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d902      	bls.n	8003d10 <NVIC_EncodePriority+0x30>
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3b03      	subs	r3, #3
 8003d0e:	e000      	b.n	8003d12 <NVIC_EncodePriority+0x32>
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d14:	f04f 32ff 	mov.w	r2, #4294967295
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	401a      	ands	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d28:	f04f 31ff 	mov.w	r1, #4294967295
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d32:	43d9      	mvns	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d38:	4313      	orrs	r3, r2
         );
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3724      	adds	r7, #36	; 0x24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff ff4c 	bl	8003bec <__NVIC_SetPriorityGrouping>
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d6a:	f7ff ff63 	bl	8003c34 <__NVIC_GetPriorityGrouping>
 8003d6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	6978      	ldr	r0, [r7, #20]
 8003d76:	f7ff ffb3 	bl	8003ce0 <NVIC_EncodePriority>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff ff82 	bl	8003c8c <__NVIC_SetPriority>
}
 8003d88:	bf00      	nop
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff56 	bl	8003c50 <__NVIC_EnableIRQ>
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003dba:	4b89      	ldr	r3, [pc, #548]	; (8003fe0 <HAL_GPIO_Init+0x234>)
 8003dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dbe:	e194      	b.n	80040ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8186 	beq.w	80040e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d00b      	beq.n	8003df8 <HAL_GPIO_Init+0x4c>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d007      	beq.n	8003df8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dec:	2b11      	cmp	r3, #17
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b12      	cmp	r3, #18
 8003df6:	d130      	bne.n	8003e5a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2203      	movs	r2, #3
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e2e:	2201      	movs	r2, #1
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 0201 	and.w	r2, r3, #1
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	2203      	movs	r2, #3
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0xee>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b12      	cmp	r3, #18
 8003e98:	d123      	bne.n	8003ee2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	08da      	lsrs	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3208      	adds	r2, #8
 8003ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	220f      	movs	r2, #15
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	08da      	lsrs	r2, r3, #3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3208      	adds	r2, #8
 8003edc:	69b9      	ldr	r1, [r7, #24]
 8003ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	2203      	movs	r2, #3
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0203 	and.w	r2, r3, #3
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80e0 	beq.w	80040e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f24:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_GPIO_Init+0x238>)
 8003f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f2a:	4a2e      	ldr	r2, [pc, #184]	; (8003fe4 <HAL_GPIO_Init+0x238>)
 8003f2c:	f043 0302 	orr.w	r3, r3, #2
 8003f30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f34:	4b2b      	ldr	r3, [pc, #172]	; (8003fe4 <HAL_GPIO_Init+0x238>)
 8003f36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f42:	4a29      	ldr	r2, [pc, #164]	; (8003fe8 <HAL_GPIO_Init+0x23c>)
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	3302      	adds	r3, #2
 8003f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	220f      	movs	r2, #15
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a20      	ldr	r2, [pc, #128]	; (8003fec <HAL_GPIO_Init+0x240>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d052      	beq.n	8004014 <HAL_GPIO_Init+0x268>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <HAL_GPIO_Init+0x244>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d031      	beq.n	8003fda <HAL_GPIO_Init+0x22e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <HAL_GPIO_Init+0x248>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d02b      	beq.n	8003fd6 <HAL_GPIO_Init+0x22a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <HAL_GPIO_Init+0x24c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d025      	beq.n	8003fd2 <HAL_GPIO_Init+0x226>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <HAL_GPIO_Init+0x250>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01f      	beq.n	8003fce <HAL_GPIO_Init+0x222>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <HAL_GPIO_Init+0x254>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d019      	beq.n	8003fca <HAL_GPIO_Init+0x21e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <HAL_GPIO_Init+0x258>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d013      	beq.n	8003fc6 <HAL_GPIO_Init+0x21a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <HAL_GPIO_Init+0x25c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00d      	beq.n	8003fc2 <HAL_GPIO_Init+0x216>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a18      	ldr	r2, [pc, #96]	; (800400c <HAL_GPIO_Init+0x260>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <HAL_GPIO_Init+0x212>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a17      	ldr	r2, [pc, #92]	; (8004010 <HAL_GPIO_Init+0x264>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <HAL_GPIO_Init+0x20e>
 8003fb6:	2309      	movs	r3, #9
 8003fb8:	e02d      	b.n	8004016 <HAL_GPIO_Init+0x26a>
 8003fba:	230a      	movs	r3, #10
 8003fbc:	e02b      	b.n	8004016 <HAL_GPIO_Init+0x26a>
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	e029      	b.n	8004016 <HAL_GPIO_Init+0x26a>
 8003fc2:	2307      	movs	r3, #7
 8003fc4:	e027      	b.n	8004016 <HAL_GPIO_Init+0x26a>
 8003fc6:	2306      	movs	r3, #6
 8003fc8:	e025      	b.n	8004016 <HAL_GPIO_Init+0x26a>
 8003fca:	2305      	movs	r3, #5
 8003fcc:	e023      	b.n	8004016 <HAL_GPIO_Init+0x26a>
 8003fce:	2304      	movs	r3, #4
 8003fd0:	e021      	b.n	8004016 <HAL_GPIO_Init+0x26a>
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e01f      	b.n	8004016 <HAL_GPIO_Init+0x26a>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e01d      	b.n	8004016 <HAL_GPIO_Init+0x26a>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e01b      	b.n	8004016 <HAL_GPIO_Init+0x26a>
 8003fde:	bf00      	nop
 8003fe0:	58000080 	.word	0x58000080
 8003fe4:	58024400 	.word	0x58024400
 8003fe8:	58000400 	.word	0x58000400
 8003fec:	58020000 	.word	0x58020000
 8003ff0:	58020400 	.word	0x58020400
 8003ff4:	58020800 	.word	0x58020800
 8003ff8:	58020c00 	.word	0x58020c00
 8003ffc:	58021000 	.word	0x58021000
 8004000:	58021400 	.word	0x58021400
 8004004:	58021800 	.word	0x58021800
 8004008:	58021c00 	.word	0x58021c00
 800400c:	58022000 	.word	0x58022000
 8004010:	58022400 	.word	0x58022400
 8004014:	2300      	movs	r3, #0
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	f002 0203 	and.w	r2, r2, #3
 800401c:	0092      	lsls	r2, r2, #2
 800401e:	4093      	lsls	r3, r2
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004026:	4938      	ldr	r1, [pc, #224]	; (8004108 <HAL_GPIO_Init+0x35c>)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3302      	adds	r3, #2
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80040ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80040dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	3301      	adds	r3, #1
 80040e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f47f ae63 	bne.w	8003dc0 <HAL_GPIO_Init+0x14>
  }
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	3724      	adds	r7, #36	; 0x24
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	58000400 	.word	0x58000400

0800410c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
 8004118:	4613      	mov	r3, r2
 800411a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800411c:	787b      	ldrb	r3, [r7, #1]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004122:	887a      	ldrh	r2, [r7, #2]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004128:	e003      	b.n	8004132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800412a:	887b      	ldrh	r3, [r7, #2]
 800412c:	041a      	lsls	r2, r3, #16
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	619a      	str	r2, [r3, #24]
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_PWREx_ConfigSupply+0x70>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b04      	cmp	r3, #4
 8004152:	d00a      	beq.n	800416a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004154:	4b16      	ldr	r3, [pc, #88]	; (80041b0 <HAL_PWREx_ConfigSupply+0x70>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	429a      	cmp	r2, r3
 8004160:	d001      	beq.n	8004166 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e01f      	b.n	80041a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	e01d      	b.n	80041a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <HAL_PWREx_ConfigSupply+0x70>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f023 0207 	bic.w	r2, r3, #7
 8004172:	490f      	ldr	r1, [pc, #60]	; (80041b0 <HAL_PWREx_ConfigSupply+0x70>)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4313      	orrs	r3, r2
 8004178:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800417a:	f7ff fd1f 	bl	8003bbc <HAL_GetTick>
 800417e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004180:	e009      	b.n	8004196 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004182:	f7ff fd1b 	bl	8003bbc <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004190:	d901      	bls.n	8004196 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e007      	b.n	80041a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_PWREx_ConfigSupply+0x70>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a2:	d1ee      	bne.n	8004182 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	58024800 	.word	0x58024800

080041b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08c      	sub	sp, #48	; 0x30
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e3fd      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 8087 	beq.w	80042e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d4:	4b99      	ldr	r3, [pc, #612]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041de:	4b97      	ldr	r3, [pc, #604]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d007      	beq.n	80041fa <HAL_RCC_OscConfig+0x46>
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	2b18      	cmp	r3, #24
 80041ee:	d110      	bne.n	8004212 <HAL_RCC_OscConfig+0x5e>
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d10b      	bne.n	8004212 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fa:	4b90      	ldr	r3, [pc, #576]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d06c      	beq.n	80042e0 <HAL_RCC_OscConfig+0x12c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d168      	bne.n	80042e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e3d7      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421a:	d106      	bne.n	800422a <HAL_RCC_OscConfig+0x76>
 800421c:	4b87      	ldr	r3, [pc, #540]	; (800443c <HAL_RCC_OscConfig+0x288>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a86      	ldr	r2, [pc, #536]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	e02e      	b.n	8004288 <HAL_RCC_OscConfig+0xd4>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0x98>
 8004232:	4b82      	ldr	r3, [pc, #520]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a81      	ldr	r2, [pc, #516]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b7f      	ldr	r3, [pc, #508]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a7e      	ldr	r2, [pc, #504]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e01d      	b.n	8004288 <HAL_RCC_OscConfig+0xd4>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0xbc>
 8004256:	4b79      	ldr	r3, [pc, #484]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a78      	ldr	r2, [pc, #480]	; (800443c <HAL_RCC_OscConfig+0x288>)
 800425c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b76      	ldr	r3, [pc, #472]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a75      	ldr	r2, [pc, #468]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0xd4>
 8004270:	4b72      	ldr	r3, [pc, #456]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a71      	ldr	r2, [pc, #452]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b6f      	ldr	r3, [pc, #444]	; (800443c <HAL_RCC_OscConfig+0x288>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a6e      	ldr	r2, [pc, #440]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d013      	beq.n	80042b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7ff fc94 	bl	8003bbc <HAL_GetTick>
 8004294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004298:	f7ff fc90 	bl	8003bbc <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e38b      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042aa:	4b64      	ldr	r3, [pc, #400]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0xe4>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7ff fc80 	bl	8003bbc <HAL_GetTick>
 80042bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c0:	f7ff fc7c 	bl	8003bbc <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e377      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042d2:	4b5a      	ldr	r3, [pc, #360]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x10c>
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80ae 	beq.w	800444c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f0:	4b52      	ldr	r3, [pc, #328]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042fa:	4b50      	ldr	r3, [pc, #320]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d007      	beq.n	8004316 <HAL_RCC_OscConfig+0x162>
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	2b18      	cmp	r3, #24
 800430a:	d13a      	bne.n	8004382 <HAL_RCC_OscConfig+0x1ce>
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d135      	bne.n	8004382 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004316:	4b49      	ldr	r3, [pc, #292]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_RCC_OscConfig+0x17a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e349      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432e:	f7ff fc51 	bl	8003bd4 <HAL_GetREVID>
 8004332:	4603      	mov	r3, r0
 8004334:	f241 0203 	movw	r2, #4099	; 0x1003
 8004338:	4293      	cmp	r3, r2
 800433a:	d817      	bhi.n	800436c <HAL_RCC_OscConfig+0x1b8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d108      	bne.n	8004356 <HAL_RCC_OscConfig+0x1a2>
 8004344:	4b3d      	ldr	r3, [pc, #244]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800434c:	4a3b      	ldr	r2, [pc, #236]	; (800443c <HAL_RCC_OscConfig+0x288>)
 800434e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004352:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004354:	e07a      	b.n	800444c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004356:	4b39      	ldr	r3, [pc, #228]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	031b      	lsls	r3, r3, #12
 8004364:	4935      	ldr	r1, [pc, #212]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800436a:	e06f      	b.n	800444c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436c:	4b33      	ldr	r3, [pc, #204]	; (800443c <HAL_RCC_OscConfig+0x288>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	4930      	ldr	r1, [pc, #192]	; (800443c <HAL_RCC_OscConfig+0x288>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004380:	e064      	b.n	800444c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d045      	beq.n	8004416 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800438a:	4b2c      	ldr	r3, [pc, #176]	; (800443c <HAL_RCC_OscConfig+0x288>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 0219 	bic.w	r2, r3, #25
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4929      	ldr	r1, [pc, #164]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7ff fc0e 	bl	8003bbc <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a4:	f7ff fc0a 	bl	8003bbc <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e305      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043b6:	4b21      	ldr	r3, [pc, #132]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c2:	f7ff fc07 	bl	8003bd4 <HAL_GetREVID>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d817      	bhi.n	8004400 <HAL_RCC_OscConfig+0x24c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	d108      	bne.n	80043ea <HAL_RCC_OscConfig+0x236>
 80043d8:	4b18      	ldr	r3, [pc, #96]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043e0:	4a16      	ldr	r2, [pc, #88]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80043e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e6:	6053      	str	r3, [r2, #4]
 80043e8:	e030      	b.n	800444c <HAL_RCC_OscConfig+0x298>
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	031b      	lsls	r3, r3, #12
 80043f8:	4910      	ldr	r1, [pc, #64]	; (800443c <HAL_RCC_OscConfig+0x288>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
 80043fe:	e025      	b.n	800444c <HAL_RCC_OscConfig+0x298>
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	490b      	ldr	r1, [pc, #44]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
 8004414:	e01a      	b.n	800444c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <HAL_RCC_OscConfig+0x288>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <HAL_RCC_OscConfig+0x288>)
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7ff fbcb 	bl	8003bbc <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004428:	e00a      	b.n	8004440 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800442a:	f7ff fbc7 	bl	8003bbc <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d903      	bls.n	8004440 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e2c2      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
 800443c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004440:	4b94      	ldr	r3, [pc, #592]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ee      	bne.n	800442a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80a9 	beq.w	80045ac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445a:	4b8e      	ldr	r3, [pc, #568]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004462:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004464:	4b8b      	ldr	r3, [pc, #556]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d007      	beq.n	8004480 <HAL_RCC_OscConfig+0x2cc>
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b18      	cmp	r3, #24
 8004474:	d13a      	bne.n	80044ec <HAL_RCC_OscConfig+0x338>
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d135      	bne.n	80044ec <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004480:	4b84      	ldr	r3, [pc, #528]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x2e4>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d001      	beq.n	8004498 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e294      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004498:	f7ff fb9c 	bl	8003bd4 <HAL_GetREVID>
 800449c:	4603      	mov	r3, r0
 800449e:	f241 0203 	movw	r2, #4099	; 0x1003
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d817      	bhi.n	80044d6 <HAL_RCC_OscConfig+0x322>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d108      	bne.n	80044c0 <HAL_RCC_OscConfig+0x30c>
 80044ae:	4b79      	ldr	r3, [pc, #484]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044b6:	4a77      	ldr	r2, [pc, #476]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80044b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044be:	e075      	b.n	80045ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044c0:	4b74      	ldr	r3, [pc, #464]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	069b      	lsls	r3, r3, #26
 80044ce:	4971      	ldr	r1, [pc, #452]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044d4:	e06a      	b.n	80045ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044d6:	4b6f      	ldr	r3, [pc, #444]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	496b      	ldr	r1, [pc, #428]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044ea:	e05f      	b.n	80045ac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d042      	beq.n	800457a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044f4:	4b67      	ldr	r3, [pc, #412]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a66      	ldr	r2, [pc, #408]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80044fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7ff fb5c 	bl	8003bbc <HAL_GetTick>
 8004504:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004508:	f7ff fb58 	bl	8003bbc <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e253      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800451a:	4b5e      	ldr	r3, [pc, #376]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004526:	f7ff fb55 	bl	8003bd4 <HAL_GetREVID>
 800452a:	4603      	mov	r3, r0
 800452c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004530:	4293      	cmp	r3, r2
 8004532:	d817      	bhi.n	8004564 <HAL_RCC_OscConfig+0x3b0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	2b20      	cmp	r3, #32
 800453a:	d108      	bne.n	800454e <HAL_RCC_OscConfig+0x39a>
 800453c:	4b55      	ldr	r3, [pc, #340]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004544:	4a53      	ldr	r2, [pc, #332]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800454a:	6053      	str	r3, [r2, #4]
 800454c:	e02e      	b.n	80045ac <HAL_RCC_OscConfig+0x3f8>
 800454e:	4b51      	ldr	r3, [pc, #324]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	069b      	lsls	r3, r3, #26
 800455c:	494d      	ldr	r1, [pc, #308]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
 8004562:	e023      	b.n	80045ac <HAL_RCC_OscConfig+0x3f8>
 8004564:	4b4b      	ldr	r3, [pc, #300]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	4948      	ldr	r1, [pc, #288]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004574:	4313      	orrs	r3, r2
 8004576:	60cb      	str	r3, [r1, #12]
 8004578:	e018      	b.n	80045ac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800457a:	4b46      	ldr	r3, [pc, #280]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a45      	ldr	r2, [pc, #276]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7ff fb19 	bl	8003bbc <HAL_GetTick>
 800458a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800458e:	f7ff fb15 	bl	8003bbc <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e210      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045a0:	4b3c      	ldr	r3, [pc, #240]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f0      	bne.n	800458e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d036      	beq.n	8004626 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d019      	beq.n	80045f4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045c0:	4b34      	ldr	r3, [pc, #208]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80045c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c4:	4a33      	ldr	r2, [pc, #204]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7ff faf6 	bl	8003bbc <HAL_GetTick>
 80045d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d4:	f7ff faf2 	bl	8003bbc <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e1ed      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045e6:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80045e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x420>
 80045f2:	e018      	b.n	8004626 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045f4:	4b27      	ldr	r3, [pc, #156]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80045f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f8:	4a26      	ldr	r2, [pc, #152]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 80045fa:	f023 0301 	bic.w	r3, r3, #1
 80045fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004600:	f7ff fadc 	bl	8003bbc <HAL_GetTick>
 8004604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004608:	f7ff fad8 	bl	8003bbc <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e1d3      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800461a:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 800461c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d038      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d019      	beq.n	800466e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800463a:	4b16      	ldr	r3, [pc, #88]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a15      	ldr	r2, [pc, #84]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004644:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004646:	f7ff fab9 	bl	8003bbc <HAL_GetTick>
 800464a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800464e:	f7ff fab5 	bl	8003bbc <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e1b0      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x49a>
 800466c:	e01a      	b.n	80046a4 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a08      	ldr	r2, [pc, #32]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004678:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800467a:	f7ff fa9f 	bl	8003bbc <HAL_GetTick>
 800467e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004682:	f7ff fa9b 	bl	8003bbc <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d903      	bls.n	8004698 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e196      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
 8004694:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004698:	4b99      	ldr	r3, [pc, #612]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1ee      	bne.n	8004682 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8081 	beq.w	80047b4 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046b2:	4b94      	ldr	r3, [pc, #592]	; (8004904 <HAL_RCC_OscConfig+0x750>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a93      	ldr	r2, [pc, #588]	; (8004904 <HAL_RCC_OscConfig+0x750>)
 80046b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046be:	f7ff fa7d 	bl	8003bbc <HAL_GetTick>
 80046c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046c6:	f7ff fa79 	bl	8003bbc <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b64      	cmp	r3, #100	; 0x64
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e174      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046d8:	4b8a      	ldr	r3, [pc, #552]	; (8004904 <HAL_RCC_OscConfig+0x750>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_OscConfig+0x546>
 80046ec:	4b84      	ldr	r3, [pc, #528]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	4a83      	ldr	r2, [pc, #524]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6713      	str	r3, [r2, #112]	; 0x70
 80046f8:	e02d      	b.n	8004756 <HAL_RCC_OscConfig+0x5a2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10c      	bne.n	800471c <HAL_RCC_OscConfig+0x568>
 8004702:	4b7f      	ldr	r3, [pc, #508]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	4a7e      	ldr	r2, [pc, #504]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	6713      	str	r3, [r2, #112]	; 0x70
 800470e:	4b7c      	ldr	r3, [pc, #496]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a7b      	ldr	r2, [pc, #492]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004714:	f023 0304 	bic.w	r3, r3, #4
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	e01c      	b.n	8004756 <HAL_RCC_OscConfig+0x5a2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b05      	cmp	r3, #5
 8004722:	d10c      	bne.n	800473e <HAL_RCC_OscConfig+0x58a>
 8004724:	4b76      	ldr	r3, [pc, #472]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	4a75      	ldr	r2, [pc, #468]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	6713      	str	r3, [r2, #112]	; 0x70
 8004730:	4b73      	ldr	r3, [pc, #460]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a72      	ldr	r2, [pc, #456]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
 800473c:	e00b      	b.n	8004756 <HAL_RCC_OscConfig+0x5a2>
 800473e:	4b70      	ldr	r3, [pc, #448]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	4a6f      	ldr	r2, [pc, #444]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	6713      	str	r3, [r2, #112]	; 0x70
 800474a:	4b6d      	ldr	r3, [pc, #436]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	4a6c      	ldr	r2, [pc, #432]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004750:	f023 0304 	bic.w	r3, r3, #4
 8004754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d015      	beq.n	800478a <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475e:	f7ff fa2d 	bl	8003bbc <HAL_GetTick>
 8004762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004764:	e00a      	b.n	800477c <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7ff fa29 	bl	8003bbc <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e122      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800477c:	4b60      	ldr	r3, [pc, #384]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ee      	beq.n	8004766 <HAL_RCC_OscConfig+0x5b2>
 8004788:	e014      	b.n	80047b4 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478a:	f7ff fa17 	bl	8003bbc <HAL_GetTick>
 800478e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004790:	e00a      	b.n	80047a8 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004792:	f7ff fa13 	bl	8003bbc <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e10c      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047a8:	4b55      	ldr	r3, [pc, #340]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ee      	bne.n	8004792 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8101 	beq.w	80049c0 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047be:	4b50      	ldr	r3, [pc, #320]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047c6:	2b18      	cmp	r3, #24
 80047c8:	f000 80bc 	beq.w	8004944 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	f040 809d 	bne.w	8004910 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a49      	ldr	r2, [pc, #292]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80047dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7ff f9eb 	bl	8003bbc <HAL_GetTick>
 80047e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ea:	f7ff f9e7 	bl	8003bbc <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0e2      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047fc:	4b40      	ldr	r3, [pc, #256]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f0      	bne.n	80047ea <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004808:	4b3d      	ldr	r3, [pc, #244]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 800480a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800480c:	4b3e      	ldr	r3, [pc, #248]	; (8004908 <HAL_RCC_OscConfig+0x754>)
 800480e:	4013      	ands	r3, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004818:	0112      	lsls	r2, r2, #4
 800481a:	430a      	orrs	r2, r1
 800481c:	4938      	ldr	r1, [pc, #224]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 800481e:	4313      	orrs	r3, r2
 8004820:	628b      	str	r3, [r1, #40]	; 0x28
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	3b01      	subs	r3, #1
 8004828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004830:	3b01      	subs	r3, #1
 8004832:	025b      	lsls	r3, r3, #9
 8004834:	b29b      	uxth	r3, r3
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	3b01      	subs	r3, #1
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	3b01      	subs	r3, #1
 800484c:	061b      	lsls	r3, r3, #24
 800484e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004852:	492b      	ldr	r1, [pc, #172]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004858:	4b29      	ldr	r3, [pc, #164]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	4a28      	ldr	r2, [pc, #160]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004864:	4b26      	ldr	r3, [pc, #152]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004868:	4b28      	ldr	r3, [pc, #160]	; (800490c <HAL_RCC_OscConfig+0x758>)
 800486a:	4013      	ands	r3, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004870:	00d2      	lsls	r2, r2, #3
 8004872:	4923      	ldr	r1, [pc, #140]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004874:	4313      	orrs	r3, r2
 8004876:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004878:	4b21      	ldr	r3, [pc, #132]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	f023 020c 	bic.w	r2, r3, #12
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	491e      	ldr	r1, [pc, #120]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004886:	4313      	orrs	r3, r2
 8004888:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	f023 0202 	bic.w	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	491a      	ldr	r1, [pc, #104]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 8004898:	4313      	orrs	r3, r2
 800489a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800489c:	4b18      	ldr	r3, [pc, #96]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	4a17      	ldr	r2, [pc, #92]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80048a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a8:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	4a14      	ldr	r2, [pc, #80]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80048ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048b4:	4b12      	ldr	r3, [pc, #72]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4a11      	ldr	r2, [pc, #68]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80048ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	4a0e      	ldr	r2, [pc, #56]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0b      	ldr	r2, [pc, #44]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80048d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d8:	f7ff f970 	bl	8003bbc <HAL_GetTick>
 80048dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e0:	f7ff f96c 	bl	8003bbc <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e067      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048f2:	4b03      	ldr	r3, [pc, #12]	; (8004900 <HAL_RCC_OscConfig+0x74c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCC_OscConfig+0x72c>
 80048fe:	e05f      	b.n	80049c0 <HAL_RCC_OscConfig+0x80c>
 8004900:	58024400 	.word	0x58024400
 8004904:	58024800 	.word	0x58024800
 8004908:	fffffc0c 	.word	0xfffffc0c
 800490c:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004910:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <HAL_RCC_OscConfig+0x818>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2d      	ldr	r2, [pc, #180]	; (80049cc <HAL_RCC_OscConfig+0x818>)
 8004916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800491a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7ff f94e 	bl	8003bbc <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004924:	f7ff f94a 	bl	8003bbc <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e045      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004936:	4b25      	ldr	r3, [pc, #148]	; (80049cc <HAL_RCC_OscConfig+0x818>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x770>
 8004942:	e03d      	b.n	80049c0 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004944:	4b21      	ldr	r3, [pc, #132]	; (80049cc <HAL_RCC_OscConfig+0x818>)
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_RCC_OscConfig+0x818>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	2b01      	cmp	r3, #1
 8004956:	d031      	beq.n	80049bc <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f003 0203 	and.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d12a      	bne.n	80049bc <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d122      	bne.n	80049bc <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d11a      	bne.n	80049bc <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	0a5b      	lsrs	r3, r3, #9
 800498a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004992:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d111      	bne.n	80049bc <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	0c1b      	lsrs	r3, r3, #16
 800499c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d108      	bne.n	80049bc <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	0e1b      	lsrs	r3, r3, #24
 80049ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3730      	adds	r7, #48	; 0x30
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	58024400 	.word	0x58024400

080049d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e19c      	b.n	8004d1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049e4:	4b8a      	ldr	r3, [pc, #552]	; (8004c10 <HAL_RCC_ClockConfig+0x240>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d910      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b87      	ldr	r3, [pc, #540]	; (8004c10 <HAL_RCC_ClockConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 020f 	bic.w	r2, r3, #15
 80049fa:	4985      	ldr	r1, [pc, #532]	; (8004c10 <HAL_RCC_ClockConfig+0x240>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b83      	ldr	r3, [pc, #524]	; (8004c10 <HAL_RCC_ClockConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e184      	b.n	8004d1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d010      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	4b7b      	ldr	r3, [pc, #492]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d908      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a30:	4b78      	ldr	r3, [pc, #480]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	4975      	ldr	r1, [pc, #468]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d010      	beq.n	8004a70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	4b70      	ldr	r3, [pc, #448]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d908      	bls.n	8004a70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a5e:	4b6d      	ldr	r3, [pc, #436]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	496a      	ldr	r1, [pc, #424]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d010      	beq.n	8004a9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	4b64      	ldr	r3, [pc, #400]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d908      	bls.n	8004a9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a8c:	4b61      	ldr	r3, [pc, #388]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	495e      	ldr	r1, [pc, #376]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d010      	beq.n	8004acc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69da      	ldr	r2, [r3, #28]
 8004aae:	4b59      	ldr	r3, [pc, #356]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d908      	bls.n	8004acc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004aba:	4b56      	ldr	r3, [pc, #344]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	4953      	ldr	r1, [pc, #332]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d010      	beq.n	8004afa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	4b4d      	ldr	r3, [pc, #308]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d908      	bls.n	8004afa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae8:	4b4a      	ldr	r3, [pc, #296]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f023 020f 	bic.w	r2, r3, #15
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4947      	ldr	r1, [pc, #284]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d055      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b06:	4b43      	ldr	r3, [pc, #268]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	4940      	ldr	r1, [pc, #256]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d107      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b20:	4b3c      	ldr	r3, [pc, #240]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d121      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0f6      	b.n	8004d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b38:	4b36      	ldr	r3, [pc, #216]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d115      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0ea      	b.n	8004d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d107      	bne.n	8004b60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b50:	4b30      	ldr	r3, [pc, #192]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0de      	b.n	8004d1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b60:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0d6      	b.n	8004d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b70:	4b28      	ldr	r3, [pc, #160]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f023 0207 	bic.w	r2, r3, #7
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4925      	ldr	r1, [pc, #148]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b82:	f7ff f81b 	bl	8003bbc <HAL_GetTick>
 8004b86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8a:	f7ff f817 	bl	8003bbc <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0be      	b.n	8004d1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba0:	4b1c      	ldr	r3, [pc, #112]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d1eb      	bne.n	8004b8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d010      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d208      	bcs.n	8004be0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bce:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f023 020f 	bic.w	r2, r3, #15
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	490e      	ldr	r1, [pc, #56]	; (8004c14 <HAL_RCC_ClockConfig+0x244>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCC_ClockConfig+0x240>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d214      	bcs.n	8004c18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <HAL_RCC_ClockConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 020f 	bic.w	r2, r3, #15
 8004bf6:	4906      	ldr	r1, [pc, #24]	; (8004c10 <HAL_RCC_ClockConfig+0x240>)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <HAL_RCC_ClockConfig+0x240>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e086      	b.n	8004d1e <HAL_RCC_ClockConfig+0x34e>
 8004c10:	52002000 	.word	0x52002000
 8004c14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d010      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	4b3f      	ldr	r3, [pc, #252]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d208      	bcs.n	8004c46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c34:	4b3c      	ldr	r3, [pc, #240]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	4939      	ldr	r1, [pc, #228]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d010      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	4b34      	ldr	r3, [pc, #208]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d208      	bcs.n	8004c74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c62:	4b31      	ldr	r3, [pc, #196]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	492e      	ldr	r1, [pc, #184]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d010      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699a      	ldr	r2, [r3, #24]
 8004c84:	4b28      	ldr	r3, [pc, #160]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d208      	bcs.n	8004ca2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c90:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	4922      	ldr	r1, [pc, #136]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d010      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69da      	ldr	r2, [r3, #28]
 8004cb2:	4b1d      	ldr	r3, [pc, #116]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d208      	bcs.n	8004cd0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	4917      	ldr	r1, [pc, #92]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004cd0:	f000 f834 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	4912      	ldr	r1, [pc, #72]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004ce2:	5ccb      	ldrb	r3, [r1, r3]
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cee:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <HAL_RCC_ClockConfig+0x358>)
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	4a0d      	ldr	r2, [pc, #52]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004cf8:	5cd3      	ldrb	r3, [r2, r3]
 8004cfa:	f003 031f 	and.w	r3, r3, #31
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	fa22 f303 	lsr.w	r3, r2, r3
 8004d04:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <HAL_RCC_ClockConfig+0x360>)
 8004d06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d08:	4a0a      	ldr	r2, [pc, #40]	; (8004d34 <HAL_RCC_ClockConfig+0x364>)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <HAL_RCC_ClockConfig+0x368>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe fdc0 	bl	8003898 <HAL_InitTick>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	58024400 	.word	0x58024400
 8004d2c:	08008da4 	.word	0x08008da4
 8004d30:	24000010 	.word	0x24000010
 8004d34:	2400000c 	.word	0x2400000c
 8004d38:	24000014 	.word	0x24000014

08004d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b089      	sub	sp, #36	; 0x24
 8004d40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d42:	4bb3      	ldr	r3, [pc, #716]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d4a:	2b18      	cmp	r3, #24
 8004d4c:	f200 8155 	bhi.w	8004ffa <HAL_RCC_GetSysClockFreq+0x2be>
 8004d50:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004dbd 	.word	0x08004dbd
 8004d5c:	08004ffb 	.word	0x08004ffb
 8004d60:	08004ffb 	.word	0x08004ffb
 8004d64:	08004ffb 	.word	0x08004ffb
 8004d68:	08004ffb 	.word	0x08004ffb
 8004d6c:	08004ffb 	.word	0x08004ffb
 8004d70:	08004ffb 	.word	0x08004ffb
 8004d74:	08004ffb 	.word	0x08004ffb
 8004d78:	08004de3 	.word	0x08004de3
 8004d7c:	08004ffb 	.word	0x08004ffb
 8004d80:	08004ffb 	.word	0x08004ffb
 8004d84:	08004ffb 	.word	0x08004ffb
 8004d88:	08004ffb 	.word	0x08004ffb
 8004d8c:	08004ffb 	.word	0x08004ffb
 8004d90:	08004ffb 	.word	0x08004ffb
 8004d94:	08004ffb 	.word	0x08004ffb
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004ffb 	.word	0x08004ffb
 8004da0:	08004ffb 	.word	0x08004ffb
 8004da4:	08004ffb 	.word	0x08004ffb
 8004da8:	08004ffb 	.word	0x08004ffb
 8004dac:	08004ffb 	.word	0x08004ffb
 8004db0:	08004ffb 	.word	0x08004ffb
 8004db4:	08004ffb 	.word	0x08004ffb
 8004db8:	08004def 	.word	0x08004def
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dbc:	4b94      	ldr	r3, [pc, #592]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d009      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dc8:	4b91      	ldr	r3, [pc, #580]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	08db      	lsrs	r3, r3, #3
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	4a90      	ldr	r2, [pc, #576]	; (8005014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004dda:	e111      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ddc:	4b8d      	ldr	r3, [pc, #564]	; (8005014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dde:	61bb      	str	r3, [r7, #24]
    break;
 8004de0:	e10e      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004de2:	4b8d      	ldr	r3, [pc, #564]	; (8005018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004de4:	61bb      	str	r3, [r7, #24]
    break;
 8004de6:	e10b      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004de8:	4b8c      	ldr	r3, [pc, #560]	; (800501c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004dea:	61bb      	str	r3, [r7, #24]
    break;
 8004dec:	e108      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dee:	4b88      	ldr	r3, [pc, #544]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004df8:	4b85      	ldr	r3, [pc, #532]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e04:	4b82      	ldr	r3, [pc, #520]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004e0e:	4b80      	ldr	r3, [pc, #512]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	08db      	lsrs	r3, r3, #3
 8004e14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80e1 	beq.w	8004ff4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	f000 8083 	beq.w	8004f40 <HAL_RCC_GetSysClockFreq+0x204>
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	f200 80a1 	bhi.w	8004f84 <HAL_RCC_GetSysClockFreq+0x248>
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0x114>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d056      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e4e:	e099      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e50:	4b6f      	ldr	r3, [pc, #444]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d02d      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e5c:	4b6c      	ldr	r3, [pc, #432]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	08db      	lsrs	r3, r3, #3
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	4a6b      	ldr	r2, [pc, #428]	; (8005014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	ee07 3a90 	vmov	s15, r3
 8004e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e86:	4b62      	ldr	r3, [pc, #392]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004eb6:	e087      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005024 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eca:	4b51      	ldr	r3, [pc, #324]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ede:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004efa:	e065      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005028 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0e:	4b40      	ldr	r3, [pc, #256]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f3e:	e043      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800502c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f52:	4b2f      	ldr	r3, [pc, #188]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f82:	e021      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005028 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f96:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004faa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	0a5b      	lsrs	r3, r3, #9
 8004fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	ee07 3a90 	vmov	s15, r3
 8004fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fec:	ee17 3a90 	vmov	r3, s15
 8004ff0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004ff2:	e005      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61bb      	str	r3, [r7, #24]
    break;
 8004ff8:	e002      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004ffa:	4b07      	ldr	r3, [pc, #28]	; (8005018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ffc:	61bb      	str	r3, [r7, #24]
    break;
 8004ffe:	bf00      	nop
  }

  return sysclockfreq;
 8005000:	69bb      	ldr	r3, [r7, #24]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3724      	adds	r7, #36	; 0x24
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	58024400 	.word	0x58024400
 8005014:	03d09000 	.word	0x03d09000
 8005018:	003d0900 	.word	0x003d0900
 800501c:	007a1200 	.word	0x007a1200
 8005020:	46000000 	.word	0x46000000
 8005024:	4c742400 	.word	0x4c742400
 8005028:	4a742400 	.word	0x4a742400
 800502c:	4af42400 	.word	0x4af42400

08005030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005036:	f7ff fe81 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 800503a:	4602      	mov	r2, r0
 800503c:	4b10      	ldr	r3, [pc, #64]	; (8005080 <HAL_RCC_GetHCLKFreq+0x50>)
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	0a1b      	lsrs	r3, r3, #8
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	490f      	ldr	r1, [pc, #60]	; (8005084 <HAL_RCC_GetHCLKFreq+0x54>)
 8005048:	5ccb      	ldrb	r3, [r1, r3]
 800504a:	f003 031f 	and.w	r3, r3, #31
 800504e:	fa22 f303 	lsr.w	r3, r2, r3
 8005052:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005054:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <HAL_RCC_GetHCLKFreq+0x50>)
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	4a09      	ldr	r2, [pc, #36]	; (8005084 <HAL_RCC_GetHCLKFreq+0x54>)
 800505e:	5cd3      	ldrb	r3, [r2, r3]
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	fa22 f303 	lsr.w	r3, r2, r3
 800506a:	4a07      	ldr	r2, [pc, #28]	; (8005088 <HAL_RCC_GetHCLKFreq+0x58>)
 800506c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800506e:	4a07      	ldr	r2, [pc, #28]	; (800508c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <HAL_RCC_GetHCLKFreq+0x58>)
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	58024400 	.word	0x58024400
 8005084:	08008da4 	.word	0x08008da4
 8005088:	24000010 	.word	0x24000010
 800508c:	2400000c 	.word	0x2400000c

08005090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005094:	f7ff ffcc 	bl	8005030 <HAL_RCC_GetHCLKFreq>
 8005098:	4602      	mov	r2, r0
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	091b      	lsrs	r3, r3, #4
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	4904      	ldr	r1, [pc, #16]	; (80050b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050a6:	5ccb      	ldrb	r3, [r1, r3]
 80050a8:	f003 031f 	and.w	r3, r3, #31
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	58024400 	.word	0x58024400
 80050b8:	08008da4 	.word	0x08008da4

080050bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80050c0:	f7ff ffb6 	bl	8005030 <HAL_RCC_GetHCLKFreq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	4904      	ldr	r1, [pc, #16]	; (80050e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050d2:	5ccb      	ldrb	r3, [r1, r3]
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80050dc:	4618      	mov	r0, r3
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	58024400 	.word	0x58024400
 80050e4:	08008da4 	.word	0x08008da4

080050e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	223f      	movs	r2, #63	; 0x3f
 80050f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050f8:	4b1a      	ldr	r3, [pc, #104]	; (8005164 <HAL_RCC_GetClockConfig+0x7c>)
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f003 0207 	and.w	r2, r3, #7
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005104:	4b17      	ldr	r3, [pc, #92]	; (8005164 <HAL_RCC_GetClockConfig+0x7c>)
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005110:	4b14      	ldr	r3, [pc, #80]	; (8005164 <HAL_RCC_GetClockConfig+0x7c>)
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f003 020f 	and.w	r2, r3, #15
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800511c:	4b11      	ldr	r3, [pc, #68]	; (8005164 <HAL_RCC_GetClockConfig+0x7c>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005128:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <HAL_RCC_GetClockConfig+0x7c>)
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_RCC_GetClockConfig+0x7c>)
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005140:	4b08      	ldr	r3, [pc, #32]	; (8005164 <HAL_RCC_GetClockConfig+0x7c>)
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_RCC_GetClockConfig+0x80>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 020f 	and.w	r2, r3, #15
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	601a      	str	r2, [r3, #0]
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	58024400 	.word	0x58024400
 8005168:	52002000 	.word	0x52002000

0800516c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005174:	2300      	movs	r3, #0
 8005176:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005178:	2300      	movs	r3, #0
 800517a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d03f      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800518c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005190:	d02a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005192:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005196:	d824      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800519c:	d018      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800519e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a2:	d81e      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ac:	d007      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051ae:	e018      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b0:	4ba3      	ldr	r3, [pc, #652]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	4aa2      	ldr	r2, [pc, #648]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051bc:	e015      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	2102      	movs	r1, #2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 f9d5 	bl	8006574 <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051ce:	e00c      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3324      	adds	r3, #36	; 0x24
 80051d4:	2102      	movs	r1, #2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 fa7e 	bl	80066d8 <RCCEx_PLL3_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051e0:	e003      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	75fb      	strb	r3, [r7, #23]
      break;
 80051e6:	e000      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d109      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051f0:	4b93      	ldr	r3, [pc, #588]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051fc:	4990      	ldr	r1, [pc, #576]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	650b      	str	r3, [r1, #80]	; 0x50
 8005202:	e001      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d03d      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	2b04      	cmp	r3, #4
 800521a:	d826      	bhi.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005239 	.word	0x08005239
 8005228:	08005247 	.word	0x08005247
 800522c:	08005259 	.word	0x08005259
 8005230:	08005271 	.word	0x08005271
 8005234:	08005271 	.word	0x08005271
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005238:	4b81      	ldr	r3, [pc, #516]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	4a80      	ldr	r2, [pc, #512]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800523e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005244:	e015      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3304      	adds	r3, #4
 800524a:	2100      	movs	r1, #0
 800524c:	4618      	mov	r0, r3
 800524e:	f001 f991 	bl	8006574 <RCCEx_PLL2_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005256:	e00c      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3324      	adds	r3, #36	; 0x24
 800525c:	2100      	movs	r1, #0
 800525e:	4618      	mov	r0, r3
 8005260:	f001 fa3a 	bl	80066d8 <RCCEx_PLL3_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005268:	e003      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	75fb      	strb	r3, [r7, #23]
      break;
 800526e:	e000      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d109      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005278:	4b71      	ldr	r3, [pc, #452]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800527a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527c:	f023 0207 	bic.w	r2, r3, #7
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005284:	496e      	ldr	r1, [pc, #440]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005286:	4313      	orrs	r3, r2
 8005288:	650b      	str	r3, [r1, #80]	; 0x50
 800528a:	e001      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005298:	2b00      	cmp	r3, #0
 800529a:	d042      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a4:	d02b      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 80052a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052aa:	d825      	bhi.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80052ac:	2bc0      	cmp	r3, #192	; 0xc0
 80052ae:	d028      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80052b0:	2bc0      	cmp	r3, #192	; 0xc0
 80052b2:	d821      	bhi.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80052b4:	2b80      	cmp	r3, #128	; 0x80
 80052b6:	d016      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d81d      	bhi.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80052c0:	2b40      	cmp	r3, #64	; 0x40
 80052c2:	d007      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80052c4:	e018      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c6:	4b5e      	ldr	r3, [pc, #376]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	4a5d      	ldr	r2, [pc, #372]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052d2:	e017      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	2100      	movs	r1, #0
 80052da:	4618      	mov	r0, r3
 80052dc:	f001 f94a 	bl	8006574 <RCCEx_PLL2_Config>
 80052e0:	4603      	mov	r3, r0
 80052e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052e4:	e00e      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3324      	adds	r3, #36	; 0x24
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 f9f3 	bl	80066d8 <RCCEx_PLL3_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052f6:	e005      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
      break;
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800530a:	4b4d      	ldr	r3, [pc, #308]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800530c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	494a      	ldr	r1, [pc, #296]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005318:	4313      	orrs	r3, r2
 800531a:	650b      	str	r3, [r1, #80]	; 0x50
 800531c:	e001      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532a:	2b00      	cmp	r3, #0
 800532c:	d049      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005334:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005338:	d030      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800533a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800533e:	d82a      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005340:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005344:	d02c      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005346:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800534a:	d824      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800534c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005350:	d018      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005356:	d81e      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800535c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005360:	d007      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005362:	e018      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005364:	4b36      	ldr	r3, [pc, #216]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	4a35      	ldr	r2, [pc, #212]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800536a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005370:	e017      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f001 f8fb 	bl	8006574 <RCCEx_PLL2_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005382:	e00e      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3324      	adds	r3, #36	; 0x24
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f001 f9a4 	bl	80066d8 <RCCEx_PLL3_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005394:	e005      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
      break;
 800539a:	e002      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800539c:	bf00      	nop
 800539e:	e000      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80053a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80053a8:	4b25      	ldr	r3, [pc, #148]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053b6:	4922      	ldr	r1, [pc, #136]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	658b      	str	r3, [r1, #88]	; 0x58
 80053bc:	e001      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d04b      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d8:	d030      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80053da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053de:	d82a      	bhi.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80053e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053e4:	d02e      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80053e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053ea:	d824      	bhi.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80053ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053f0:	d018      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80053f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053f6:	d81e      	bhi.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80053fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005400:	d007      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005402:	e018      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	4a0d      	ldr	r2, [pc, #52]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800540a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800540e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005410:	e019      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3304      	adds	r3, #4
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f001 f8ab 	bl	8006574 <RCCEx_PLL2_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005422:	e010      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3324      	adds	r3, #36	; 0x24
 8005428:	2100      	movs	r1, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f001 f954 	bl	80066d8 <RCCEx_PLL3_Config>
 8005430:	4603      	mov	r3, r0
 8005432:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005434:	e007      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	75fb      	strb	r3, [r7, #23]
      break;
 800543a:	e004      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800543c:	bf00      	nop
 800543e:	e002      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005440:	58024400 	.word	0x58024400
      break;
 8005444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800544c:	4b99      	ldr	r3, [pc, #612]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800544e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005450:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800545a:	4996      	ldr	r1, [pc, #600]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800545c:	4313      	orrs	r3, r2
 800545e:	658b      	str	r3, [r1, #88]	; 0x58
 8005460:	e001      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d032      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005476:	2b30      	cmp	r3, #48	; 0x30
 8005478:	d01c      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800547a:	2b30      	cmp	r3, #48	; 0x30
 800547c:	d817      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 800547e:	2b20      	cmp	r3, #32
 8005480:	d00c      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005482:	2b20      	cmp	r3, #32
 8005484:	d813      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800548a:	2b10      	cmp	r3, #16
 800548c:	d10f      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800548e:	4b89      	ldr	r3, [pc, #548]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	4a88      	ldr	r2, [pc, #544]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005498:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800549a:	e00e      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3304      	adds	r3, #4
 80054a0:	2102      	movs	r1, #2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 f866 	bl	8006574 <RCCEx_PLL2_Config>
 80054a8:	4603      	mov	r3, r0
 80054aa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80054ac:	e005      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	75fb      	strb	r3, [r7, #23]
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80054b4:	bf00      	nop
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80054b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d109      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80054c0:	4b7c      	ldr	r3, [pc, #496]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054cc:	4979      	ldr	r1, [pc, #484]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054d2:	e001      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
 80054d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d047      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ec:	d030      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80054ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f2:	d82a      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80054f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054f8:	d02c      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80054fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054fe:	d824      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005504:	d018      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550a:	d81e      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005514:	d007      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005516:	e018      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005518:	4b66      	ldr	r3, [pc, #408]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	4a65      	ldr	r2, [pc, #404]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800551e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005522:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005524:	e017      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3304      	adds	r3, #4
 800552a:	2100      	movs	r1, #0
 800552c:	4618      	mov	r0, r3
 800552e:	f001 f821 	bl	8006574 <RCCEx_PLL2_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005536:	e00e      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3324      	adds	r3, #36	; 0x24
 800553c:	2100      	movs	r1, #0
 800553e:	4618      	mov	r0, r3
 8005540:	f001 f8ca 	bl	80066d8 <RCCEx_PLL3_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005548:	e005      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	75fb      	strb	r3, [r7, #23]
      break;
 800554e:	e002      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005556:	7dfb      	ldrb	r3, [r7, #23]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d109      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800555c:	4b55      	ldr	r3, [pc, #340]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800555e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005560:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005568:	4952      	ldr	r1, [pc, #328]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800556a:	4313      	orrs	r3, r2
 800556c:	650b      	str	r3, [r1, #80]	; 0x50
 800556e:	e001      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	7dfb      	ldrb	r3, [r7, #23]
 8005572:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d049      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005588:	d02e      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800558a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800558e:	d828      	bhi.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005590:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005594:	d02a      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005596:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800559a:	d822      	bhi.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800559c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055a0:	d026      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80055a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055a6:	d81c      	bhi.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80055a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ac:	d010      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80055ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055b2:	d816      	bhi.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01d      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80055b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055bc:	d111      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	2101      	movs	r1, #1
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 ffd5 	bl	8006574 <RCCEx_PLL2_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80055ce:	e012      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3324      	adds	r3, #36	; 0x24
 80055d4:	2101      	movs	r1, #1
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 f87e 	bl	80066d8 <RCCEx_PLL3_Config>
 80055dc:	4603      	mov	r3, r0
 80055de:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80055e0:	e009      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]
      break;
 80055e6:	e006      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80055e8:	bf00      	nop
 80055ea:	e004      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80055ec:	bf00      	nop
 80055ee:	e002      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80055f0:	bf00      	nop
 80055f2:	e000      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80055f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055f6:	7dfb      	ldrb	r3, [r7, #23]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80055fc:	4b2d      	ldr	r3, [pc, #180]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005600:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005608:	492a      	ldr	r1, [pc, #168]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800560a:	4313      	orrs	r3, r2
 800560c:	650b      	str	r3, [r1, #80]	; 0x50
 800560e:	e001      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
 8005612:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d04d      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800562a:	d02e      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800562c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005630:	d828      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005636:	d02a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563c:	d822      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800563e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005642:	d026      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005644:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005648:	d81c      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800564a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800564e:	d010      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005654:	d816      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01d      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800565a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800565e:	d111      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	2101      	movs	r1, #1
 8005666:	4618      	mov	r0, r3
 8005668:	f000 ff84 	bl	8006574 <RCCEx_PLL2_Config>
 800566c:	4603      	mov	r3, r0
 800566e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005670:	e012      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3324      	adds	r3, #36	; 0x24
 8005676:	2101      	movs	r1, #1
 8005678:	4618      	mov	r0, r3
 800567a:	f001 f82d 	bl	80066d8 <RCCEx_PLL3_Config>
 800567e:	4603      	mov	r3, r0
 8005680:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005682:	e009      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	75fb      	strb	r3, [r7, #23]
      break;
 8005688:	e006      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800568a:	bf00      	nop
 800568c:	e004      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800568e:	bf00      	nop
 8005690:	e002      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005696:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005698:	7dfb      	ldrb	r3, [r7, #23]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10c      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800569e:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056ac:	4901      	ldr	r1, [pc, #4]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	658b      	str	r3, [r1, #88]	; 0x58
 80056b2:	e003      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80056b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b8:	7dfb      	ldrb	r3, [r7, #23]
 80056ba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d02f      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056d0:	d00e      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80056d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056d6:	d814      	bhi.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d015      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80056dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056e0:	d10f      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e2:	4baf      	ldr	r3, [pc, #700]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	4aae      	ldr	r2, [pc, #696]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80056ee:	e00c      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	2101      	movs	r1, #1
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 ff3c 	bl	8006574 <RCCEx_PLL2_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005700:	e003      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]
      break;
 8005706:	e000      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800570a:	7dfb      	ldrb	r3, [r7, #23]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d109      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005710:	4ba3      	ldr	r3, [pc, #652]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800571c:	49a0      	ldr	r1, [pc, #640]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800571e:	4313      	orrs	r3, r2
 8005720:	650b      	str	r3, [r1, #80]	; 0x50
 8005722:	e001      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
 8005726:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d032      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005738:	2b03      	cmp	r3, #3
 800573a:	d81b      	bhi.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800573c:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	0800577b 	.word	0x0800577b
 8005748:	08005755 	.word	0x08005755
 800574c:	08005763 	.word	0x08005763
 8005750:	0800577b 	.word	0x0800577b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005754:	4b92      	ldr	r3, [pc, #584]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	4a91      	ldr	r2, [pc, #580]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800575a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800575e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005760:	e00c      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3304      	adds	r3, #4
 8005766:	2102      	movs	r1, #2
 8005768:	4618      	mov	r0, r3
 800576a:	f000 ff03 	bl	8006574 <RCCEx_PLL2_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005772:	e003      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	75fb      	strb	r3, [r7, #23]
      break;
 8005778:	e000      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800577a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005782:	4b87      	ldr	r3, [pc, #540]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005786:	f023 0203 	bic.w	r2, r3, #3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	4984      	ldr	r1, [pc, #528]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005790:	4313      	orrs	r3, r2
 8005792:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005794:	e001      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005796:	7dfb      	ldrb	r3, [r7, #23]
 8005798:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 8086 	beq.w	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057a8:	4b7e      	ldr	r3, [pc, #504]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a7d      	ldr	r2, [pc, #500]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80057ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b4:	f7fe fa02 	bl	8003bbc <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ba:	e009      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057bc:	f7fe f9fe 	bl	8003bbc <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	; 0x64
 80057c8:	d902      	bls.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	75fb      	strb	r3, [r7, #23]
        break;
 80057ce:	e005      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d0:	4b74      	ldr	r3, [pc, #464]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ef      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d166      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057e2:	4b6f      	ldr	r3, [pc, #444]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057ec:	4053      	eors	r3, r2
 80057ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d013      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057f6:	4b6a      	ldr	r3, [pc, #424]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005800:	4b67      	ldr	r3, [pc, #412]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4a66      	ldr	r2, [pc, #408]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800580c:	4b64      	ldr	r3, [pc, #400]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4a63      	ldr	r2, [pc, #396]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005816:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005818:	4a61      	ldr	r2, [pc, #388]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005828:	d115      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582a:	f7fe f9c7 	bl	8003bbc <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005830:	e00b      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005832:	f7fe f9c3 	bl	8003bbc <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005840:	4293      	cmp	r3, r2
 8005842:	d902      	bls.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	75fb      	strb	r3, [r7, #23]
            break;
 8005848:	e005      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800584a:	4b55      	ldr	r3, [pc, #340]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0ed      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005856:	7dfb      	ldrb	r3, [r7, #23]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d126      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800586a:	d10d      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800586c:	4b4c      	ldr	r3, [pc, #304]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800587a:	0919      	lsrs	r1, r3, #4
 800587c:	4b4a      	ldr	r3, [pc, #296]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800587e:	400b      	ands	r3, r1
 8005880:	4947      	ldr	r1, [pc, #284]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005882:	4313      	orrs	r3, r2
 8005884:	610b      	str	r3, [r1, #16]
 8005886:	e005      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005888:	4b45      	ldr	r3, [pc, #276]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	4a44      	ldr	r2, [pc, #272]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800588e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005892:	6113      	str	r3, [r2, #16]
 8005894:	4b42      	ldr	r3, [pc, #264]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800589e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a2:	493f      	ldr	r1, [pc, #252]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	670b      	str	r3, [r1, #112]	; 0x70
 80058a8:	e004      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
 80058ac:	75bb      	strb	r3, [r7, #22]
 80058ae:	e001      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8085 	beq.w	80059cc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c6:	2b28      	cmp	r3, #40	; 0x28
 80058c8:	d866      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80058ca:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	080059ad 	.word	0x080059ad
 80058d4:	08005999 	.word	0x08005999
 80058d8:	08005999 	.word	0x08005999
 80058dc:	08005999 	.word	0x08005999
 80058e0:	08005999 	.word	0x08005999
 80058e4:	08005999 	.word	0x08005999
 80058e8:	08005999 	.word	0x08005999
 80058ec:	08005999 	.word	0x08005999
 80058f0:	08005975 	.word	0x08005975
 80058f4:	08005999 	.word	0x08005999
 80058f8:	08005999 	.word	0x08005999
 80058fc:	08005999 	.word	0x08005999
 8005900:	08005999 	.word	0x08005999
 8005904:	08005999 	.word	0x08005999
 8005908:	08005999 	.word	0x08005999
 800590c:	08005999 	.word	0x08005999
 8005910:	08005987 	.word	0x08005987
 8005914:	08005999 	.word	0x08005999
 8005918:	08005999 	.word	0x08005999
 800591c:	08005999 	.word	0x08005999
 8005920:	08005999 	.word	0x08005999
 8005924:	08005999 	.word	0x08005999
 8005928:	08005999 	.word	0x08005999
 800592c:	08005999 	.word	0x08005999
 8005930:	080059ad 	.word	0x080059ad
 8005934:	08005999 	.word	0x08005999
 8005938:	08005999 	.word	0x08005999
 800593c:	08005999 	.word	0x08005999
 8005940:	08005999 	.word	0x08005999
 8005944:	08005999 	.word	0x08005999
 8005948:	08005999 	.word	0x08005999
 800594c:	08005999 	.word	0x08005999
 8005950:	080059ad 	.word	0x080059ad
 8005954:	08005999 	.word	0x08005999
 8005958:	08005999 	.word	0x08005999
 800595c:	08005999 	.word	0x08005999
 8005960:	08005999 	.word	0x08005999
 8005964:	08005999 	.word	0x08005999
 8005968:	08005999 	.word	0x08005999
 800596c:	08005999 	.word	0x08005999
 8005970:	080059ad 	.word	0x080059ad
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3304      	adds	r3, #4
 8005978:	2101      	movs	r1, #1
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fdfa 	bl	8006574 <RCCEx_PLL2_Config>
 8005980:	4603      	mov	r3, r0
 8005982:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005984:	e013      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3324      	adds	r3, #36	; 0x24
 800598a:	2101      	movs	r1, #1
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fea3 	bl	80066d8 <RCCEx_PLL3_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005996:	e00a      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	75fb      	strb	r3, [r7, #23]
      break;
 800599c:	e007      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x842>
 800599e:	bf00      	nop
 80059a0:	58024400 	.word	0x58024400
 80059a4:	58024800 	.word	0x58024800
 80059a8:	00ffffcf 	.word	0x00ffffcf
      break;
 80059ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059b4:	4b96      	ldr	r3, [pc, #600]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059c0:	4993      	ldr	r1, [pc, #588]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	654b      	str	r3, [r1, #84]	; 0x54
 80059c6:	e001      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
 80059ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d038      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059dc:	2b05      	cmp	r3, #5
 80059de:	d821      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80059e0:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a2b 	.word	0x08005a2b
 80059ec:	08005a01 	.word	0x08005a01
 80059f0:	08005a13 	.word	0x08005a13
 80059f4:	08005a2b 	.word	0x08005a2b
 80059f8:	08005a2b 	.word	0x08005a2b
 80059fc:	08005a2b 	.word	0x08005a2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	2101      	movs	r1, #1
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fdb4 	bl	8006574 <RCCEx_PLL2_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a10:	e00c      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3324      	adds	r3, #36	; 0x24
 8005a16:	2101      	movs	r1, #1
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fe5d 	bl	80066d8 <RCCEx_PLL3_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a22:	e003      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	75fb      	strb	r3, [r7, #23]
      break;
 8005a28:	e000      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d109      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a32:	4b77      	ldr	r3, [pc, #476]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a36:	f023 0207 	bic.w	r2, r3, #7
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3e:	4974      	ldr	r1, [pc, #464]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	654b      	str	r3, [r1, #84]	; 0x54
 8005a44:	e001      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d03a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d821      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005aab 	.word	0x08005aab
 8005a6c:	08005a81 	.word	0x08005a81
 8005a70:	08005a93 	.word	0x08005a93
 8005a74:	08005aab 	.word	0x08005aab
 8005a78:	08005aab 	.word	0x08005aab
 8005a7c:	08005aab 	.word	0x08005aab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3304      	adds	r3, #4
 8005a84:	2101      	movs	r1, #1
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fd74 	bl	8006574 <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005a90:	e00c      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3324      	adds	r3, #36	; 0x24
 8005a96:	2101      	movs	r1, #1
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fe1d 	bl	80066d8 <RCCEx_PLL3_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005aa2:	e003      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa8:	e000      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ab2:	4b57      	ldr	r3, [pc, #348]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab6:	f023 0207 	bic.w	r2, r3, #7
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac0:	4953      	ldr	r1, [pc, #332]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	658b      	str	r3, [r1, #88]	; 0x58
 8005ac6:	e001      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
 8005aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d04b      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ae2:	d02e      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ae8:	d828      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aee:	d02a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af4:	d822      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005af6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005afa:	d026      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005afc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b00:	d81c      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b06:	d010      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b0c:	d816      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d01d      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b16:	d111      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fd28 	bl	8006574 <RCCEx_PLL2_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b28:	e012      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3324      	adds	r3, #36	; 0x24
 8005b2e:	2102      	movs	r1, #2
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fdd1 	bl	80066d8 <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b3a:	e009      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b40:	e006      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005b42:	bf00      	nop
 8005b44:	e004      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005b46:	bf00      	nop
 8005b48:	e002      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e000      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b56:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b64:	492a      	ldr	r1, [pc, #168]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	654b      	str	r3, [r1, #84]	; 0x54
 8005b6a:	e001      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d04d      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b86:	d02e      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005b88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b8c:	d828      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b92:	d02a      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b98:	d822      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005b9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b9e:	d026      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005ba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba4:	d81c      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005baa:	d010      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb0:	d816      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d111      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fcd6 	bl	8006574 <RCCEx_PLL2_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005bcc:	e012      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3324      	adds	r3, #36	; 0x24
 8005bd2:	2102      	movs	r1, #2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fd7f 	bl	80066d8 <RCCEx_PLL3_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005bde:	e009      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	75fb      	strb	r3, [r7, #23]
      break;
 8005be4:	e006      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005be6:	bf00      	nop
 8005be8:	e004      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005bea:	bf00      	nop
 8005bec:	e002      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005bee:	bf00      	nop
 8005bf0:	e000      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c08:	4901      	ldr	r1, [pc, #4]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	658b      	str	r3, [r1, #88]	; 0x58
 8005c0e:	e003      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005c10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d04b      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c2e:	d02e      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005c30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c34:	d828      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3a:	d02a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c40:	d822      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005c42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c46:	d026      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005c48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c4c:	d81c      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c52:	d010      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c58:	d816      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01d      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c62:	d111      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fc82 	bl	8006574 <RCCEx_PLL2_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c74:	e012      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3324      	adds	r3, #36	; 0x24
 8005c7a:	2102      	movs	r1, #2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fd2b 	bl	80066d8 <RCCEx_PLL3_Config>
 8005c82:	4603      	mov	r3, r0
 8005c84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c86:	e009      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c8c:	e006      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005c8e:	bf00      	nop
 8005c90:	e004      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005c92:	bf00      	nop
 8005c94:	e002      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005c96:	bf00      	nop
 8005c98:	e000      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005ca2:	4b9d      	ldr	r3, [pc, #628]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cb0:	4999      	ldr	r1, [pc, #612]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	658b      	str	r3, [r1, #88]	; 0x58
 8005cb6:	e001      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
 8005cba:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01a      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd2:	d10a      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3324      	adds	r3, #36	; 0x24
 8005cd8:	2102      	movs	r1, #2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fcfc 	bl	80066d8 <RCCEx_PLL3_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005cea:	4b8b      	ldr	r3, [pc, #556]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cf8:	4987      	ldr	r1, [pc, #540]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d14:	d10a      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3324      	adds	r3, #36	; 0x24
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fcdb 	bl	80066d8 <RCCEx_PLL3_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d2c:	4b7a      	ldr	r3, [pc, #488]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3a:	4977      	ldr	r1, [pc, #476]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d034      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d56:	d01d      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d5c:	d817      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d66:	d009      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005d68:	e011      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fbff 	bl	8006574 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005d7a:	e00c      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3324      	adds	r3, #36	; 0x24
 8005d80:	2102      	movs	r1, #2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fca8 	bl	80066d8 <RCCEx_PLL3_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005d8c:	e003      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	75fb      	strb	r3, [r7, #23]
      break;
 8005d92:	e000      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d9c:	4b5e      	ldr	r3, [pc, #376]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005daa:	495b      	ldr	r1, [pc, #364]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	658b      	str	r3, [r1, #88]	; 0x58
 8005db0:	e001      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d033      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dcc:	d01c      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005dce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dd2:	d816      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd8:	d003      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dde:	d007      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005de0:	e00f      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de2:	4b4d      	ldr	r3, [pc, #308]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	4a4c      	ldr	r2, [pc, #304]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005dee:	e00c      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3324      	adds	r3, #36	; 0x24
 8005df4:	2101      	movs	r1, #1
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fc6e 	bl	80066d8 <RCCEx_PLL3_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e00:	e003      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	75fb      	strb	r3, [r7, #23]
      break;
 8005e06:	e000      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e10:	4b41      	ldr	r3, [pc, #260]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e1e:	493e      	ldr	r1, [pc, #248]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	654b      	str	r3, [r1, #84]	; 0x54
 8005e24:	e001      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d029      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e42:	d007      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005e44:	e00f      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e46:	4b34      	ldr	r3, [pc, #208]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	4a33      	ldr	r2, [pc, #204]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e52:	e00b      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3304      	adds	r3, #4
 8005e58:	2102      	movs	r1, #2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fb8a 	bl	8006574 <RCCEx_PLL2_Config>
 8005e60:	4603      	mov	r3, r0
 8005e62:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e64:	e002      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	75fb      	strb	r3, [r7, #23]
      break;
 8005e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d109      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e72:	4b29      	ldr	r3, [pc, #164]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7e:	4926      	ldr	r1, [pc, #152]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e84:	e001      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3324      	adds	r3, #36	; 0x24
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fc1b 	bl	80066d8 <RCCEx_PLL3_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d033      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ec0:	d017      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ec6:	d811      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ecc:	d013      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed2:	d80b      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d010      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005edc:	d106      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ede:	4b0e      	ldr	r3, [pc, #56]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	4a0d      	ldr	r2, [pc, #52]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005eea:	e007      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef0:	e004      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005ef2:	bf00      	nop
 8005ef4:	e002      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005ef6:	bf00      	nop
 8005ef8:	e000      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10c      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f02:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f0e:	4902      	ldr	r1, [pc, #8]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	654b      	str	r3, [r1, #84]	; 0x54
 8005f14:	e004      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005f16:	bf00      	nop
 8005f18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f2c:	4b31      	ldr	r3, [pc, #196]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f38:	492e      	ldr	r1, [pc, #184]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f4a:	4b2a      	ldr	r3, [pc, #168]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f58:	4926      	ldr	r1, [pc, #152]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f6a:	4b22      	ldr	r3, [pc, #136]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f76:	491f      	ldr	r1, [pc, #124]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00d      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f88:	4b1a      	ldr	r3, [pc, #104]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	4a19      	ldr	r2, [pc, #100]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f92:	6113      	str	r3, [r2, #16]
 8005f94:	4b17      	ldr	r3, [pc, #92]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005f9e:	4915      	ldr	r1, [pc, #84]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	da08      	bge.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005fac:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb8:	490e      	ldr	r1, [pc, #56]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fca:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	4906      	ldr	r1, [pc, #24]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005fde:	7dbb      	ldrb	r3, [r7, #22]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e000      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	58024400 	.word	0x58024400

08005ff8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ffc:	f7ff f818 	bl	8005030 <HAL_RCC_GetHCLKFreq>
 8006000:	4602      	mov	r2, r0
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	091b      	lsrs	r3, r3, #4
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	4904      	ldr	r1, [pc, #16]	; (8006020 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800600e:	5ccb      	ldrb	r3, [r1, r3]
 8006010:	f003 031f 	and.w	r3, r3, #31
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006018:	4618      	mov	r0, r3
 800601a:	bd80      	pop	{r7, pc}
 800601c:	58024400 	.word	0x58024400
 8006020:	08008da4 	.word	0x08008da4

08006024 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006024:	b480      	push	{r7}
 8006026:	b089      	sub	sp, #36	; 0x24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800602c:	4ba1      	ldr	r3, [pc, #644]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006036:	4b9f      	ldr	r3, [pc, #636]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	0b1b      	lsrs	r3, r3, #12
 800603c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006040:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006042:	4b9c      	ldr	r3, [pc, #624]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	091b      	lsrs	r3, r3, #4
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800604e:	4b99      	ldr	r3, [pc, #612]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006052:	08db      	lsrs	r3, r3, #3
 8006054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006066:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8111 	beq.w	8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b02      	cmp	r3, #2
 8006076:	f000 8083 	beq.w	8006180 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b02      	cmp	r3, #2
 800607e:	f200 80a1 	bhi.w	80061c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d056      	beq.n	800613c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800608e:	e099      	b.n	80061c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006090:	4b88      	ldr	r3, [pc, #544]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d02d      	beq.n	80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800609c:	4b85      	ldr	r3, [pc, #532]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	08db      	lsrs	r3, r3, #3
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	4a84      	ldr	r2, [pc, #528]	; (80062b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
 80060ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c6:	4b7b      	ldr	r3, [pc, #492]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060f6:	e087      	b.n	8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006102:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80062c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610a:	4b6a      	ldr	r3, [pc, #424]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611a:	ed97 6a03 	vldr	s12, [r7, #12]
 800611e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800613a:	e065      	b.n	8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006146:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800614a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614e:	4b59      	ldr	r3, [pc, #356]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006162:	eddf 5a56 	vldr	s11, [pc, #344]	; 80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800616a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800617e:	e043      	b.n	8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80062c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800618e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006192:	4b48      	ldr	r3, [pc, #288]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061c2:	e021      	b.n	8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d6:	4b37      	ldr	r3, [pc, #220]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061de:	ee07 3a90 	vmov	s15, r3
 80061e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006202:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006206:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006208:	4b2a      	ldr	r3, [pc, #168]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	0a5b      	lsrs	r3, r3, #9
 800620e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800621e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006222:	edd7 6a07 	vldr	s13, [r7, #28]
 8006226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800622e:	ee17 2a90 	vmov	r2, s15
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006236:	4b1f      	ldr	r3, [pc, #124]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	0c1b      	lsrs	r3, r3, #16
 800623c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006240:	ee07 3a90 	vmov	s15, r3
 8006244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800624c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006250:	edd7 6a07 	vldr	s13, [r7, #28]
 8006254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625c:	ee17 2a90 	vmov	r2, s15
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006264:	4b13      	ldr	r3, [pc, #76]	; (80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	0e1b      	lsrs	r3, r3, #24
 800626a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800627a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800627e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800628a:	ee17 2a90 	vmov	r2, s15
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006292:	e008      	b.n	80062a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	609a      	str	r2, [r3, #8]
}
 80062a6:	bf00      	nop
 80062a8:	3724      	adds	r7, #36	; 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	58024400 	.word	0x58024400
 80062b8:	03d09000 	.word	0x03d09000
 80062bc:	46000000 	.word	0x46000000
 80062c0:	4c742400 	.word	0x4c742400
 80062c4:	4a742400 	.word	0x4a742400
 80062c8:	4af42400 	.word	0x4af42400

080062cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b089      	sub	sp, #36	; 0x24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062d4:	4ba1      	ldr	r3, [pc, #644]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80062de:	4b9f      	ldr	r3, [pc, #636]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	0d1b      	lsrs	r3, r3, #20
 80062e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062ea:	4b9c      	ldr	r3, [pc, #624]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80062f6:	4b99      	ldr	r3, [pc, #612]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	08db      	lsrs	r3, r3, #3
 80062fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	fb02 f303 	mul.w	r3, r2, r3
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8111 	beq.w	800653c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b02      	cmp	r3, #2
 800631e:	f000 8083 	beq.w	8006428 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b02      	cmp	r3, #2
 8006326:	f200 80a1 	bhi.w	800646c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d056      	beq.n	80063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006336:	e099      	b.n	800646c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006338:	4b88      	ldr	r3, [pc, #544]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d02d      	beq.n	80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006344:	4b85      	ldr	r3, [pc, #532]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	08db      	lsrs	r3, r3, #3
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	4a84      	ldr	r2, [pc, #528]	; (8006560 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
 8006354:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636e:	4b7b      	ldr	r3, [pc, #492]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006382:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800639e:	e087      	b.n	80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006568 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80063ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b2:	4b6a      	ldr	r3, [pc, #424]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063e2:	e065      	b.n	80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800656c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f6:	4b59      	ldr	r3, [pc, #356]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006406:	ed97 6a03 	vldr	s12, [r7, #12]
 800640a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800640e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800641a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006422:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006426:	e043      	b.n	80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006432:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800643a:	4b48      	ldr	r3, [pc, #288]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644a:	ed97 6a03 	vldr	s12, [r7, #12]
 800644e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800645a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800645e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006466:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800646a:	e021      	b.n	80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006476:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800656c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800647a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800647e:	4b37      	ldr	r3, [pc, #220]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006492:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80064b0:	4b2a      	ldr	r3, [pc, #168]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	0a5b      	lsrs	r3, r3, #9
 80064b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064d6:	ee17 2a90 	vmov	r2, s15
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80064de:	4b1f      	ldr	r3, [pc, #124]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	0c1b      	lsrs	r3, r3, #16
 80064e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e8:	ee07 3a90 	vmov	s15, r3
 80064ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80064fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006504:	ee17 2a90 	vmov	r2, s15
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800650c:	4b13      	ldr	r3, [pc, #76]	; (800655c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800650e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006510:	0e1b      	lsrs	r3, r3, #24
 8006512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006526:	edd7 6a07 	vldr	s13, [r7, #28]
 800652a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800652e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006532:	ee17 2a90 	vmov	r2, s15
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800653a:	e008      	b.n	800654e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	609a      	str	r2, [r3, #8]
}
 800654e:	bf00      	nop
 8006550:	3724      	adds	r7, #36	; 0x24
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	58024400 	.word	0x58024400
 8006560:	03d09000 	.word	0x03d09000
 8006564:	46000000 	.word	0x46000000
 8006568:	4c742400 	.word	0x4c742400
 800656c:	4a742400 	.word	0x4a742400
 8006570:	4af42400 	.word	0x4af42400

08006574 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006582:	4b53      	ldr	r3, [pc, #332]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	2b03      	cmp	r3, #3
 800658c:	d101      	bne.n	8006592 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e099      	b.n	80066c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006592:	4b4f      	ldr	r3, [pc, #316]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a4e      	ldr	r2, [pc, #312]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006598:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800659c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659e:	f7fd fb0d 	bl	8003bbc <HAL_GetTick>
 80065a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065a4:	e008      	b.n	80065b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065a6:	f7fd fb09 	bl	8003bbc <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e086      	b.n	80066c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065b8:	4b45      	ldr	r3, [pc, #276]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f0      	bne.n	80065a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80065c4:	4b42      	ldr	r3, [pc, #264]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	031b      	lsls	r3, r3, #12
 80065d2:	493f      	ldr	r1, [pc, #252]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	628b      	str	r3, [r1, #40]	; 0x28
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	3b01      	subs	r3, #1
 80065de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	025b      	lsls	r3, r3, #9
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	3b01      	subs	r3, #1
 8006602:	061b      	lsls	r3, r3, #24
 8006604:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006608:	4931      	ldr	r1, [pc, #196]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800660a:	4313      	orrs	r3, r2
 800660c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800660e:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	492d      	ldr	r1, [pc, #180]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800661c:	4313      	orrs	r3, r2
 800661e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	f023 0220 	bic.w	r2, r3, #32
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	4928      	ldr	r1, [pc, #160]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800662e:	4313      	orrs	r3, r2
 8006630:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006632:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	4a26      	ldr	r2, [pc, #152]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006638:	f023 0310 	bic.w	r3, r3, #16
 800663c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800663e:	4b24      	ldr	r3, [pc, #144]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006642:	4b24      	ldr	r3, [pc, #144]	; (80066d4 <RCCEx_PLL2_Config+0x160>)
 8006644:	4013      	ands	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	69d2      	ldr	r2, [r2, #28]
 800664a:	00d2      	lsls	r2, r2, #3
 800664c:	4920      	ldr	r1, [pc, #128]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006652:	4b1f      	ldr	r3, [pc, #124]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	4a1e      	ldr	r2, [pc, #120]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006658:	f043 0310 	orr.w	r3, r3, #16
 800665c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006664:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	4a19      	ldr	r2, [pc, #100]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800666a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800666e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006670:	e00f      	b.n	8006692 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d106      	bne.n	8006686 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4a14      	ldr	r2, [pc, #80]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800667e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006682:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006684:	e005      	b.n	8006692 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006686:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	4a11      	ldr	r2, [pc, #68]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800668c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006690:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006692:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a0e      	ldr	r2, [pc, #56]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006698:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800669c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800669e:	f7fd fa8d 	bl	8003bbc <HAL_GetTick>
 80066a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066a4:	e008      	b.n	80066b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80066a6:	f7fd fa89 	bl	8003bbc <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e006      	b.n	80066c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0f0      	beq.n	80066a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	58024400 	.word	0x58024400
 80066d4:	ffff0007 	.word	0xffff0007

080066d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066e6:	4b53      	ldr	r3, [pc, #332]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d101      	bne.n	80066f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e099      	b.n	800682a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80066f6:	4b4f      	ldr	r3, [pc, #316]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a4e      	ldr	r2, [pc, #312]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80066fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006702:	f7fd fa5b 	bl	8003bbc <HAL_GetTick>
 8006706:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006708:	e008      	b.n	800671c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800670a:	f7fd fa57 	bl	8003bbc <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e086      	b.n	800682a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800671c:	4b45      	ldr	r3, [pc, #276]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f0      	bne.n	800670a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006728:	4b42      	ldr	r3, [pc, #264]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	051b      	lsls	r3, r3, #20
 8006736:	493f      	ldr	r1, [pc, #252]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006738:	4313      	orrs	r3, r2
 800673a:	628b      	str	r3, [r1, #40]	; 0x28
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	3b01      	subs	r3, #1
 8006742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	3b01      	subs	r3, #1
 800674c:	025b      	lsls	r3, r3, #9
 800674e:	b29b      	uxth	r3, r3
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	3b01      	subs	r3, #1
 8006758:	041b      	lsls	r3, r3, #16
 800675a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	3b01      	subs	r3, #1
 8006766:	061b      	lsls	r3, r3, #24
 8006768:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800676c:	4931      	ldr	r1, [pc, #196]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 800676e:	4313      	orrs	r3, r2
 8006770:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006772:	4b30      	ldr	r3, [pc, #192]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	492d      	ldr	r1, [pc, #180]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006780:	4313      	orrs	r3, r2
 8006782:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006784:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	4928      	ldr	r1, [pc, #160]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006792:	4313      	orrs	r3, r2
 8006794:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006796:	4b27      	ldr	r3, [pc, #156]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	4a26      	ldr	r2, [pc, #152]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 800679c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80067a2:	4b24      	ldr	r3, [pc, #144]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a6:	4b24      	ldr	r3, [pc, #144]	; (8006838 <RCCEx_PLL3_Config+0x160>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	69d2      	ldr	r2, [r2, #28]
 80067ae:	00d2      	lsls	r2, r2, #3
 80067b0:	4920      	ldr	r1, [pc, #128]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80067b6:	4b1f      	ldr	r3, [pc, #124]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80067c8:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	4a19      	ldr	r2, [pc, #100]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067d4:	e00f      	b.n	80067f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d106      	bne.n	80067ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80067dc:	4b15      	ldr	r3, [pc, #84]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	4a14      	ldr	r2, [pc, #80]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067e8:	e005      	b.n	80067f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ee:	4a11      	ldr	r2, [pc, #68]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067f6:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a0e      	ldr	r2, [pc, #56]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006802:	f7fd f9db 	bl	8003bbc <HAL_GetTick>
 8006806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006808:	e008      	b.n	800681c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800680a:	f7fd f9d7 	bl	8003bbc <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d901      	bls.n	800681c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e006      	b.n	800682a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0f0      	beq.n	800680a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	58024400 	.word	0x58024400
 8006838:	ffff0007 	.word	0xffff0007

0800683c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e049      	b.n	80068e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f841 	bl	80068ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f000 f9f8 	bl	8006c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
	...

08006900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	d001      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e04f      	b.n	80069b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a23      	ldr	r2, [pc, #140]	; (80069c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d01d      	beq.n	8006976 <HAL_TIM_Base_Start_IT+0x76>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006942:	d018      	beq.n	8006976 <HAL_TIM_Base_Start_IT+0x76>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1f      	ldr	r2, [pc, #124]	; (80069c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <HAL_TIM_Base_Start_IT+0x76>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1e      	ldr	r2, [pc, #120]	; (80069cc <HAL_TIM_Base_Start_IT+0xcc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00e      	beq.n	8006976 <HAL_TIM_Base_Start_IT+0x76>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1c      	ldr	r2, [pc, #112]	; (80069d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d009      	beq.n	8006976 <HAL_TIM_Base_Start_IT+0x76>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_TIM_Base_Start_IT+0x76>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a19      	ldr	r2, [pc, #100]	; (80069d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d115      	bne.n	80069a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	4b17      	ldr	r3, [pc, #92]	; (80069dc <HAL_TIM_Base_Start_IT+0xdc>)
 800697e:	4013      	ands	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b06      	cmp	r3, #6
 8006986:	d015      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0xb4>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698e:	d011      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a0:	e008      	b.n	80069b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0201 	orr.w	r2, r2, #1
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	e000      	b.n	80069b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40001800 	.word	0x40001800
 80069dc:	00010007 	.word	0x00010007

080069e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d122      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d11b      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0202 	mvn.w	r2, #2
 8006a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f905 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 8006a28:	e005      	b.n	8006a36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f8f7 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f908 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d122      	bne.n	8006a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d11b      	bne.n	8006a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0204 	mvn.w	r2, #4
 8006a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f8db 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 8006a7c:	e005      	b.n	8006a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f8cd 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f8de 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d122      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d11b      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f06f 0208 	mvn.w	r2, #8
 8006ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2204      	movs	r2, #4
 8006aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f8b1 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 8006ad0:	e005      	b.n	8006ade <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f8a3 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f8b4 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f003 0310 	and.w	r3, r3, #16
 8006aee:	2b10      	cmp	r3, #16
 8006af0:	d122      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d11b      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0210 	mvn.w	r2, #16
 8006b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f887 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 8006b24:	e005      	b.n	8006b32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f879 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f88a 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d10e      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d107      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f06f 0201 	mvn.w	r2, #1
 8006b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fc fe04 	bl	800376c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6e:	2b80      	cmp	r3, #128	; 0x80
 8006b70:	d10e      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7c:	2b80      	cmp	r3, #128	; 0x80
 8006b7e:	d107      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f914 	bl	8006db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9e:	d10e      	bne.n	8006bbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006baa:	2b80      	cmp	r3, #128	; 0x80
 8006bac:	d107      	bne.n	8006bbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f907 	bl	8006dcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d10e      	bne.n	8006bea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd6:	2b40      	cmp	r3, #64	; 0x40
 8006bd8:	d107      	bne.n	8006bea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f838 	bl	8006c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d10e      	bne.n	8006c16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f003 0320 	and.w	r3, r3, #32
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d107      	bne.n	8006c16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f06f 0220 	mvn.w	r2, #32
 8006c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f8c7 	bl	8006da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
	...

08006c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a40      	ldr	r2, [pc, #256]	; (8006d84 <TIM_Base_SetConfig+0x114>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8e:	d00f      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a3d      	ldr	r2, [pc, #244]	; (8006d88 <TIM_Base_SetConfig+0x118>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3c      	ldr	r2, [pc, #240]	; (8006d8c <TIM_Base_SetConfig+0x11c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d007      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a3b      	ldr	r2, [pc, #236]	; (8006d90 <TIM_Base_SetConfig+0x120>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3a      	ldr	r2, [pc, #232]	; (8006d94 <TIM_Base_SetConfig+0x124>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d108      	bne.n	8006cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a2f      	ldr	r2, [pc, #188]	; (8006d84 <TIM_Base_SetConfig+0x114>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d01f      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd0:	d01b      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2c      	ldr	r2, [pc, #176]	; (8006d88 <TIM_Base_SetConfig+0x118>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d017      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2b      	ldr	r2, [pc, #172]	; (8006d8c <TIM_Base_SetConfig+0x11c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2a      	ldr	r2, [pc, #168]	; (8006d90 <TIM_Base_SetConfig+0x120>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00f      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a29      	ldr	r2, [pc, #164]	; (8006d94 <TIM_Base_SetConfig+0x124>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00b      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a28      	ldr	r2, [pc, #160]	; (8006d98 <TIM_Base_SetConfig+0x128>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d007      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a27      	ldr	r2, [pc, #156]	; (8006d9c <TIM_Base_SetConfig+0x12c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_Base_SetConfig+0x9a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a26      	ldr	r2, [pc, #152]	; (8006da0 <TIM_Base_SetConfig+0x130>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d108      	bne.n	8006d1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a10      	ldr	r2, [pc, #64]	; (8006d84 <TIM_Base_SetConfig+0x114>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00f      	beq.n	8006d68 <TIM_Base_SetConfig+0xf8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a12      	ldr	r2, [pc, #72]	; (8006d94 <TIM_Base_SetConfig+0x124>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00b      	beq.n	8006d68 <TIM_Base_SetConfig+0xf8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a11      	ldr	r2, [pc, #68]	; (8006d98 <TIM_Base_SetConfig+0x128>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d007      	beq.n	8006d68 <TIM_Base_SetConfig+0xf8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <TIM_Base_SetConfig+0x12c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_Base_SetConfig+0xf8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a0f      	ldr	r2, [pc, #60]	; (8006da0 <TIM_Base_SetConfig+0x130>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d103      	bne.n	8006d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	615a      	str	r2, [r3, #20]
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40000c00 	.word	0x40000c00
 8006d94:	40010400 	.word	0x40010400
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40014400 	.word	0x40014400
 8006da0:	40014800 	.word	0x40014800

08006da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e042      	b.n	8006e78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7fc fce3 	bl	80037d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2224      	movs	r2, #36	; 0x24
 8006e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0201 	bic.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f8c2 	bl	8006fac <UART_SetConfig>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e022      	b.n	8006e78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fe20 	bl	8007a80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0201 	orr.w	r2, r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fea7 	bl	8007bc4 <UART_CheckIdleState>
 8006e76:	4603      	mov	r3, r0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08a      	sub	sp, #40	; 0x28
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	f040 8083 	bne.w	8006fa2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_UART_Transmit+0x28>
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e07b      	b.n	8006fa4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d101      	bne.n	8006eba <HAL_UART_Transmit+0x3a>
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	e074      	b.n	8006fa4 <HAL_UART_Transmit+0x124>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2221      	movs	r2, #33	; 0x21
 8006ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ed2:	f7fc fe73 	bl	8003bbc <HAL_GetTick>
 8006ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	88fa      	ldrh	r2, [r7, #6]
 8006edc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef0:	d108      	bne.n	8006f04 <HAL_UART_Transmit+0x84>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d104      	bne.n	8006f04 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	e003      	b.n	8006f0c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006f14:	e02c      	b.n	8006f70 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2180      	movs	r1, #128	; 0x80
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fe9a 	bl	8007c5a <UART_WaitOnFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e039      	b.n	8006fa4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10b      	bne.n	8006f4e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	3302      	adds	r3, #2
 8006f4a:	61bb      	str	r3, [r7, #24]
 8006f4c:	e007      	b.n	8006f5e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1cc      	bne.n	8006f16 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2200      	movs	r2, #0
 8006f84:	2140      	movs	r1, #64	; 0x40
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 fe67 	bl	8007c5a <UART_WaitOnFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e006      	b.n	8006fa4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e000      	b.n	8006fa4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006fa2:	2302      	movs	r3, #2
  }
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fb0:	b092      	sub	sp, #72	; 0x48
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4bbe      	ldr	r3, [pc, #760]	; (80072d4 <UART_SetConfig+0x328>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	6812      	ldr	r2, [r2, #0]
 8006fe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4ab3      	ldr	r2, [pc, #716]	; (80072d8 <UART_SetConfig+0x32c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d004      	beq.n	8007018 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007014:	4313      	orrs	r3, r2
 8007016:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	4baf      	ldr	r3, [pc, #700]	; (80072dc <UART_SetConfig+0x330>)
 8007020:	4013      	ands	r3, r2
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	6812      	ldr	r2, [r2, #0]
 8007026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007028:	430b      	orrs	r3, r1
 800702a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	f023 010f 	bic.w	r1, r3, #15
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4aa6      	ldr	r2, [pc, #664]	; (80072e0 <UART_SetConfig+0x334>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d177      	bne.n	800713c <UART_SetConfig+0x190>
 800704c:	4ba5      	ldr	r3, [pc, #660]	; (80072e4 <UART_SetConfig+0x338>)
 800704e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007054:	2b28      	cmp	r3, #40	; 0x28
 8007056:	d86d      	bhi.n	8007134 <UART_SetConfig+0x188>
 8007058:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <UART_SetConfig+0xb4>)
 800705a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705e:	bf00      	nop
 8007060:	08007105 	.word	0x08007105
 8007064:	08007135 	.word	0x08007135
 8007068:	08007135 	.word	0x08007135
 800706c:	08007135 	.word	0x08007135
 8007070:	08007135 	.word	0x08007135
 8007074:	08007135 	.word	0x08007135
 8007078:	08007135 	.word	0x08007135
 800707c:	08007135 	.word	0x08007135
 8007080:	0800710d 	.word	0x0800710d
 8007084:	08007135 	.word	0x08007135
 8007088:	08007135 	.word	0x08007135
 800708c:	08007135 	.word	0x08007135
 8007090:	08007135 	.word	0x08007135
 8007094:	08007135 	.word	0x08007135
 8007098:	08007135 	.word	0x08007135
 800709c:	08007135 	.word	0x08007135
 80070a0:	08007115 	.word	0x08007115
 80070a4:	08007135 	.word	0x08007135
 80070a8:	08007135 	.word	0x08007135
 80070ac:	08007135 	.word	0x08007135
 80070b0:	08007135 	.word	0x08007135
 80070b4:	08007135 	.word	0x08007135
 80070b8:	08007135 	.word	0x08007135
 80070bc:	08007135 	.word	0x08007135
 80070c0:	0800711d 	.word	0x0800711d
 80070c4:	08007135 	.word	0x08007135
 80070c8:	08007135 	.word	0x08007135
 80070cc:	08007135 	.word	0x08007135
 80070d0:	08007135 	.word	0x08007135
 80070d4:	08007135 	.word	0x08007135
 80070d8:	08007135 	.word	0x08007135
 80070dc:	08007135 	.word	0x08007135
 80070e0:	08007125 	.word	0x08007125
 80070e4:	08007135 	.word	0x08007135
 80070e8:	08007135 	.word	0x08007135
 80070ec:	08007135 	.word	0x08007135
 80070f0:	08007135 	.word	0x08007135
 80070f4:	08007135 	.word	0x08007135
 80070f8:	08007135 	.word	0x08007135
 80070fc:	08007135 	.word	0x08007135
 8007100:	0800712d 	.word	0x0800712d
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710a:	e222      	b.n	8007552 <UART_SetConfig+0x5a6>
 800710c:	2304      	movs	r3, #4
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007112:	e21e      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007114:	2308      	movs	r3, #8
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711a:	e21a      	b.n	8007552 <UART_SetConfig+0x5a6>
 800711c:	2310      	movs	r3, #16
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007122:	e216      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007124:	2320      	movs	r3, #32
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712a:	e212      	b.n	8007552 <UART_SetConfig+0x5a6>
 800712c:	2340      	movs	r3, #64	; 0x40
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007132:	e20e      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007134:	2380      	movs	r3, #128	; 0x80
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713a:	e20a      	b.n	8007552 <UART_SetConfig+0x5a6>
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a69      	ldr	r2, [pc, #420]	; (80072e8 <UART_SetConfig+0x33c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d130      	bne.n	80071a8 <UART_SetConfig+0x1fc>
 8007146:	4b67      	ldr	r3, [pc, #412]	; (80072e4 <UART_SetConfig+0x338>)
 8007148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	2b05      	cmp	r3, #5
 8007150:	d826      	bhi.n	80071a0 <UART_SetConfig+0x1f4>
 8007152:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <UART_SetConfig+0x1ac>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	08007171 	.word	0x08007171
 800715c:	08007179 	.word	0x08007179
 8007160:	08007181 	.word	0x08007181
 8007164:	08007189 	.word	0x08007189
 8007168:	08007191 	.word	0x08007191
 800716c:	08007199 	.word	0x08007199
 8007170:	2300      	movs	r3, #0
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007176:	e1ec      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007178:	2304      	movs	r3, #4
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717e:	e1e8      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007180:	2308      	movs	r3, #8
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007186:	e1e4      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007188:	2310      	movs	r3, #16
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718e:	e1e0      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007190:	2320      	movs	r3, #32
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007196:	e1dc      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007198:	2340      	movs	r3, #64	; 0x40
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719e:	e1d8      	b.n	8007552 <UART_SetConfig+0x5a6>
 80071a0:	2380      	movs	r3, #128	; 0x80
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a6:	e1d4      	b.n	8007552 <UART_SetConfig+0x5a6>
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a4f      	ldr	r2, [pc, #316]	; (80072ec <UART_SetConfig+0x340>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d130      	bne.n	8007214 <UART_SetConfig+0x268>
 80071b2:	4b4c      	ldr	r3, [pc, #304]	; (80072e4 <UART_SetConfig+0x338>)
 80071b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b6:	f003 0307 	and.w	r3, r3, #7
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d826      	bhi.n	800720c <UART_SetConfig+0x260>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <UART_SetConfig+0x218>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071dd 	.word	0x080071dd
 80071c8:	080071e5 	.word	0x080071e5
 80071cc:	080071ed 	.word	0x080071ed
 80071d0:	080071f5 	.word	0x080071f5
 80071d4:	080071fd 	.word	0x080071fd
 80071d8:	08007205 	.word	0x08007205
 80071dc:	2300      	movs	r3, #0
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e2:	e1b6      	b.n	8007552 <UART_SetConfig+0x5a6>
 80071e4:	2304      	movs	r3, #4
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ea:	e1b2      	b.n	8007552 <UART_SetConfig+0x5a6>
 80071ec:	2308      	movs	r3, #8
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f2:	e1ae      	b.n	8007552 <UART_SetConfig+0x5a6>
 80071f4:	2310      	movs	r3, #16
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fa:	e1aa      	b.n	8007552 <UART_SetConfig+0x5a6>
 80071fc:	2320      	movs	r3, #32
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007202:	e1a6      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720a:	e1a2      	b.n	8007552 <UART_SetConfig+0x5a6>
 800720c:	2380      	movs	r3, #128	; 0x80
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007212:	e19e      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a35      	ldr	r2, [pc, #212]	; (80072f0 <UART_SetConfig+0x344>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d130      	bne.n	8007280 <UART_SetConfig+0x2d4>
 800721e:	4b31      	ldr	r3, [pc, #196]	; (80072e4 <UART_SetConfig+0x338>)
 8007220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	2b05      	cmp	r3, #5
 8007228:	d826      	bhi.n	8007278 <UART_SetConfig+0x2cc>
 800722a:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0x284>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007249 	.word	0x08007249
 8007234:	08007251 	.word	0x08007251
 8007238:	08007259 	.word	0x08007259
 800723c:	08007261 	.word	0x08007261
 8007240:	08007269 	.word	0x08007269
 8007244:	08007271 	.word	0x08007271
 8007248:	2300      	movs	r3, #0
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e180      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007250:	2304      	movs	r3, #4
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e17c      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007258:	2308      	movs	r3, #8
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e178      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007260:	2310      	movs	r3, #16
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007266:	e174      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007268:	2320      	movs	r3, #32
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726e:	e170      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007270:	2340      	movs	r3, #64	; 0x40
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007276:	e16c      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007278:	2380      	movs	r3, #128	; 0x80
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727e:	e168      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1b      	ldr	r2, [pc, #108]	; (80072f4 <UART_SetConfig+0x348>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d142      	bne.n	8007310 <UART_SetConfig+0x364>
 800728a:	4b16      	ldr	r3, [pc, #88]	; (80072e4 <UART_SetConfig+0x338>)
 800728c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	2b05      	cmp	r3, #5
 8007294:	d838      	bhi.n	8007308 <UART_SetConfig+0x35c>
 8007296:	a201      	add	r2, pc, #4	; (adr r2, 800729c <UART_SetConfig+0x2f0>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072b5 	.word	0x080072b5
 80072a0:	080072bd 	.word	0x080072bd
 80072a4:	080072c5 	.word	0x080072c5
 80072a8:	080072cd 	.word	0x080072cd
 80072ac:	080072f9 	.word	0x080072f9
 80072b0:	08007301 	.word	0x08007301
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e14a      	b.n	8007552 <UART_SetConfig+0x5a6>
 80072bc:	2304      	movs	r3, #4
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e146      	b.n	8007552 <UART_SetConfig+0x5a6>
 80072c4:	2308      	movs	r3, #8
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e142      	b.n	8007552 <UART_SetConfig+0x5a6>
 80072cc:	2310      	movs	r3, #16
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e13e      	b.n	8007552 <UART_SetConfig+0x5a6>
 80072d4:	cfff69f3 	.word	0xcfff69f3
 80072d8:	58000c00 	.word	0x58000c00
 80072dc:	11fff4ff 	.word	0x11fff4ff
 80072e0:	40011000 	.word	0x40011000
 80072e4:	58024400 	.word	0x58024400
 80072e8:	40004400 	.word	0x40004400
 80072ec:	40004800 	.word	0x40004800
 80072f0:	40004c00 	.word	0x40004c00
 80072f4:	40005000 	.word	0x40005000
 80072f8:	2320      	movs	r3, #32
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fe:	e128      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007300:	2340      	movs	r3, #64	; 0x40
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e124      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007308:	2380      	movs	r3, #128	; 0x80
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e120      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4acb      	ldr	r2, [pc, #812]	; (8007644 <UART_SetConfig+0x698>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d176      	bne.n	8007408 <UART_SetConfig+0x45c>
 800731a:	4bcb      	ldr	r3, [pc, #812]	; (8007648 <UART_SetConfig+0x69c>)
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007322:	2b28      	cmp	r3, #40	; 0x28
 8007324:	d86c      	bhi.n	8007400 <UART_SetConfig+0x454>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <UART_SetConfig+0x380>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	080073d1 	.word	0x080073d1
 8007330:	08007401 	.word	0x08007401
 8007334:	08007401 	.word	0x08007401
 8007338:	08007401 	.word	0x08007401
 800733c:	08007401 	.word	0x08007401
 8007340:	08007401 	.word	0x08007401
 8007344:	08007401 	.word	0x08007401
 8007348:	08007401 	.word	0x08007401
 800734c:	080073d9 	.word	0x080073d9
 8007350:	08007401 	.word	0x08007401
 8007354:	08007401 	.word	0x08007401
 8007358:	08007401 	.word	0x08007401
 800735c:	08007401 	.word	0x08007401
 8007360:	08007401 	.word	0x08007401
 8007364:	08007401 	.word	0x08007401
 8007368:	08007401 	.word	0x08007401
 800736c:	080073e1 	.word	0x080073e1
 8007370:	08007401 	.word	0x08007401
 8007374:	08007401 	.word	0x08007401
 8007378:	08007401 	.word	0x08007401
 800737c:	08007401 	.word	0x08007401
 8007380:	08007401 	.word	0x08007401
 8007384:	08007401 	.word	0x08007401
 8007388:	08007401 	.word	0x08007401
 800738c:	080073e9 	.word	0x080073e9
 8007390:	08007401 	.word	0x08007401
 8007394:	08007401 	.word	0x08007401
 8007398:	08007401 	.word	0x08007401
 800739c:	08007401 	.word	0x08007401
 80073a0:	08007401 	.word	0x08007401
 80073a4:	08007401 	.word	0x08007401
 80073a8:	08007401 	.word	0x08007401
 80073ac:	080073f1 	.word	0x080073f1
 80073b0:	08007401 	.word	0x08007401
 80073b4:	08007401 	.word	0x08007401
 80073b8:	08007401 	.word	0x08007401
 80073bc:	08007401 	.word	0x08007401
 80073c0:	08007401 	.word	0x08007401
 80073c4:	08007401 	.word	0x08007401
 80073c8:	08007401 	.word	0x08007401
 80073cc:	080073f9 	.word	0x080073f9
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073d6:	e0bc      	b.n	8007552 <UART_SetConfig+0x5a6>
 80073d8:	2304      	movs	r3, #4
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073de:	e0b8      	b.n	8007552 <UART_SetConfig+0x5a6>
 80073e0:	2308      	movs	r3, #8
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e6:	e0b4      	b.n	8007552 <UART_SetConfig+0x5a6>
 80073e8:	2310      	movs	r3, #16
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ee:	e0b0      	b.n	8007552 <UART_SetConfig+0x5a6>
 80073f0:	2320      	movs	r3, #32
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f6:	e0ac      	b.n	8007552 <UART_SetConfig+0x5a6>
 80073f8:	2340      	movs	r3, #64	; 0x40
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fe:	e0a8      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007400:	2380      	movs	r3, #128	; 0x80
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e0a4      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a8f      	ldr	r2, [pc, #572]	; (800764c <UART_SetConfig+0x6a0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d130      	bne.n	8007474 <UART_SetConfig+0x4c8>
 8007412:	4b8d      	ldr	r3, [pc, #564]	; (8007648 <UART_SetConfig+0x69c>)
 8007414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b05      	cmp	r3, #5
 800741c:	d826      	bhi.n	800746c <UART_SetConfig+0x4c0>
 800741e:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <UART_SetConfig+0x478>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	0800743d 	.word	0x0800743d
 8007428:	08007445 	.word	0x08007445
 800742c:	0800744d 	.word	0x0800744d
 8007430:	08007455 	.word	0x08007455
 8007434:	0800745d 	.word	0x0800745d
 8007438:	08007465 	.word	0x08007465
 800743c:	2300      	movs	r3, #0
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007442:	e086      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007444:	2304      	movs	r3, #4
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800744a:	e082      	b.n	8007552 <UART_SetConfig+0x5a6>
 800744c:	2308      	movs	r3, #8
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007452:	e07e      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007454:	2310      	movs	r3, #16
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745a:	e07a      	b.n	8007552 <UART_SetConfig+0x5a6>
 800745c:	2320      	movs	r3, #32
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007462:	e076      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007464:	2340      	movs	r3, #64	; 0x40
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746a:	e072      	b.n	8007552 <UART_SetConfig+0x5a6>
 800746c:	2380      	movs	r3, #128	; 0x80
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e06e      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a75      	ldr	r2, [pc, #468]	; (8007650 <UART_SetConfig+0x6a4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d130      	bne.n	80074e0 <UART_SetConfig+0x534>
 800747e:	4b72      	ldr	r3, [pc, #456]	; (8007648 <UART_SetConfig+0x69c>)
 8007480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	2b05      	cmp	r3, #5
 8007488:	d826      	bhi.n	80074d8 <UART_SetConfig+0x52c>
 800748a:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <UART_SetConfig+0x4e4>)
 800748c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007490:	080074a9 	.word	0x080074a9
 8007494:	080074b1 	.word	0x080074b1
 8007498:	080074b9 	.word	0x080074b9
 800749c:	080074c1 	.word	0x080074c1
 80074a0:	080074c9 	.word	0x080074c9
 80074a4:	080074d1 	.word	0x080074d1
 80074a8:	2300      	movs	r3, #0
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ae:	e050      	b.n	8007552 <UART_SetConfig+0x5a6>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b6:	e04c      	b.n	8007552 <UART_SetConfig+0x5a6>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074be:	e048      	b.n	8007552 <UART_SetConfig+0x5a6>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c6:	e044      	b.n	8007552 <UART_SetConfig+0x5a6>
 80074c8:	2320      	movs	r3, #32
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ce:	e040      	b.n	8007552 <UART_SetConfig+0x5a6>
 80074d0:	2340      	movs	r3, #64	; 0x40
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d6:	e03c      	b.n	8007552 <UART_SetConfig+0x5a6>
 80074d8:	2380      	movs	r3, #128	; 0x80
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074de:	e038      	b.n	8007552 <UART_SetConfig+0x5a6>
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a5b      	ldr	r2, [pc, #364]	; (8007654 <UART_SetConfig+0x6a8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d130      	bne.n	800754c <UART_SetConfig+0x5a0>
 80074ea:	4b57      	ldr	r3, [pc, #348]	; (8007648 <UART_SetConfig+0x69c>)
 80074ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	2b05      	cmp	r3, #5
 80074f4:	d826      	bhi.n	8007544 <UART_SetConfig+0x598>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0x550>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	08007515 	.word	0x08007515
 8007500:	0800751d 	.word	0x0800751d
 8007504:	08007525 	.word	0x08007525
 8007508:	0800752d 	.word	0x0800752d
 800750c:	08007535 	.word	0x08007535
 8007510:	0800753d 	.word	0x0800753d
 8007514:	2302      	movs	r3, #2
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751a:	e01a      	b.n	8007552 <UART_SetConfig+0x5a6>
 800751c:	2304      	movs	r3, #4
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007522:	e016      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007524:	2308      	movs	r3, #8
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752a:	e012      	b.n	8007552 <UART_SetConfig+0x5a6>
 800752c:	2310      	movs	r3, #16
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007532:	e00e      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007534:	2320      	movs	r3, #32
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753a:	e00a      	b.n	8007552 <UART_SetConfig+0x5a6>
 800753c:	2340      	movs	r3, #64	; 0x40
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007542:	e006      	b.n	8007552 <UART_SetConfig+0x5a6>
 8007544:	2380      	movs	r3, #128	; 0x80
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800754a:	e002      	b.n	8007552 <UART_SetConfig+0x5a6>
 800754c:	2380      	movs	r3, #128	; 0x80
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a3f      	ldr	r2, [pc, #252]	; (8007654 <UART_SetConfig+0x6a8>)
 8007558:	4293      	cmp	r3, r2
 800755a:	f040 80f8 	bne.w	800774e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800755e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007562:	2b20      	cmp	r3, #32
 8007564:	dc46      	bgt.n	80075f4 <UART_SetConfig+0x648>
 8007566:	2b02      	cmp	r3, #2
 8007568:	f2c0 8082 	blt.w	8007670 <UART_SetConfig+0x6c4>
 800756c:	3b02      	subs	r3, #2
 800756e:	2b1e      	cmp	r3, #30
 8007570:	d87e      	bhi.n	8007670 <UART_SetConfig+0x6c4>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <UART_SetConfig+0x5cc>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	080075fb 	.word	0x080075fb
 800757c:	08007671 	.word	0x08007671
 8007580:	08007603 	.word	0x08007603
 8007584:	08007671 	.word	0x08007671
 8007588:	08007671 	.word	0x08007671
 800758c:	08007671 	.word	0x08007671
 8007590:	08007613 	.word	0x08007613
 8007594:	08007671 	.word	0x08007671
 8007598:	08007671 	.word	0x08007671
 800759c:	08007671 	.word	0x08007671
 80075a0:	08007671 	.word	0x08007671
 80075a4:	08007671 	.word	0x08007671
 80075a8:	08007671 	.word	0x08007671
 80075ac:	08007671 	.word	0x08007671
 80075b0:	08007623 	.word	0x08007623
 80075b4:	08007671 	.word	0x08007671
 80075b8:	08007671 	.word	0x08007671
 80075bc:	08007671 	.word	0x08007671
 80075c0:	08007671 	.word	0x08007671
 80075c4:	08007671 	.word	0x08007671
 80075c8:	08007671 	.word	0x08007671
 80075cc:	08007671 	.word	0x08007671
 80075d0:	08007671 	.word	0x08007671
 80075d4:	08007671 	.word	0x08007671
 80075d8:	08007671 	.word	0x08007671
 80075dc:	08007671 	.word	0x08007671
 80075e0:	08007671 	.word	0x08007671
 80075e4:	08007671 	.word	0x08007671
 80075e8:	08007671 	.word	0x08007671
 80075ec:	08007671 	.word	0x08007671
 80075f0:	08007663 	.word	0x08007663
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d037      	beq.n	8007668 <UART_SetConfig+0x6bc>
 80075f8:	e03a      	b.n	8007670 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80075fa:	f7fe fcfd 	bl	8005ff8 <HAL_RCCEx_GetD3PCLK1Freq>
 80075fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007600:	e03c      	b.n	800767c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe fd0c 	bl	8006024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007610:	e034      	b.n	800767c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007612:	f107 0318 	add.w	r3, r7, #24
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe fe58 	bl	80062cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007620:	e02c      	b.n	800767c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <UART_SetConfig+0x69c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b00      	cmp	r3, #0
 800762c:	d016      	beq.n	800765c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800762e:	4b06      	ldr	r3, [pc, #24]	; (8007648 <UART_SetConfig+0x69c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	08db      	lsrs	r3, r3, #3
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	4a07      	ldr	r2, [pc, #28]	; (8007658 <UART_SetConfig+0x6ac>)
 800763a:	fa22 f303 	lsr.w	r3, r2, r3
 800763e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007640:	e01c      	b.n	800767c <UART_SetConfig+0x6d0>
 8007642:	bf00      	nop
 8007644:	40011400 	.word	0x40011400
 8007648:	58024400 	.word	0x58024400
 800764c:	40007800 	.word	0x40007800
 8007650:	40007c00 	.word	0x40007c00
 8007654:	58000c00 	.word	0x58000c00
 8007658:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800765c:	4b9e      	ldr	r3, [pc, #632]	; (80078d8 <UART_SetConfig+0x92c>)
 800765e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007660:	e00c      	b.n	800767c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007662:	4b9e      	ldr	r3, [pc, #632]	; (80078dc <UART_SetConfig+0x930>)
 8007664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007666:	e009      	b.n	800767c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800766e:	e005      	b.n	800767c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800767a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800767c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 81e0 	beq.w	8007a44 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	4a95      	ldr	r2, [pc, #596]	; (80078e0 <UART_SetConfig+0x934>)
 800768a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800768e:	461a      	mov	r2, r3
 8007690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007692:	fbb3 f3f2 	udiv	r3, r3, r2
 8007696:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	4613      	mov	r3, r2
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	4413      	add	r3, r2
 80076a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d305      	bcc.n	80076b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d903      	bls.n	80076bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076ba:	e1c3      	b.n	8007a44 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076be:	2200      	movs	r2, #0
 80076c0:	60bb      	str	r3, [r7, #8]
 80076c2:	60fa      	str	r2, [r7, #12]
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	4a85      	ldr	r2, [pc, #532]	; (80078e0 <UART_SetConfig+0x934>)
 80076ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2200      	movs	r2, #0
 80076d2:	603b      	str	r3, [r7, #0]
 80076d4:	607a      	str	r2, [r7, #4]
 80076d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076de:	f7f8 fe51 	bl	8000384 <__aeabi_uldivmod>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4610      	mov	r0, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	f04f 0300 	mov.w	r3, #0
 80076f2:	020b      	lsls	r3, r1, #8
 80076f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076f8:	0202      	lsls	r2, r0, #8
 80076fa:	6979      	ldr	r1, [r7, #20]
 80076fc:	6849      	ldr	r1, [r1, #4]
 80076fe:	0849      	lsrs	r1, r1, #1
 8007700:	2000      	movs	r0, #0
 8007702:	460c      	mov	r4, r1
 8007704:	4605      	mov	r5, r0
 8007706:	eb12 0804 	adds.w	r8, r2, r4
 800770a:	eb43 0905 	adc.w	r9, r3, r5
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	469a      	mov	sl, r3
 8007716:	4693      	mov	fp, r2
 8007718:	4652      	mov	r2, sl
 800771a:	465b      	mov	r3, fp
 800771c:	4640      	mov	r0, r8
 800771e:	4649      	mov	r1, r9
 8007720:	f7f8 fe30 	bl	8000384 <__aeabi_uldivmod>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4613      	mov	r3, r2
 800772a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007732:	d308      	bcc.n	8007746 <UART_SetConfig+0x79a>
 8007734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800773a:	d204      	bcs.n	8007746 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007742:	60da      	str	r2, [r3, #12]
 8007744:	e17e      	b.n	8007a44 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800774c:	e17a      	b.n	8007a44 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007756:	f040 80c7 	bne.w	80078e8 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 800775a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800775e:	2b20      	cmp	r3, #32
 8007760:	dc48      	bgt.n	80077f4 <UART_SetConfig+0x848>
 8007762:	2b00      	cmp	r3, #0
 8007764:	db7b      	blt.n	800785e <UART_SetConfig+0x8b2>
 8007766:	2b20      	cmp	r3, #32
 8007768:	d879      	bhi.n	800785e <UART_SetConfig+0x8b2>
 800776a:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <UART_SetConfig+0x7c4>)
 800776c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007770:	080077fb 	.word	0x080077fb
 8007774:	08007803 	.word	0x08007803
 8007778:	0800785f 	.word	0x0800785f
 800777c:	0800785f 	.word	0x0800785f
 8007780:	0800780b 	.word	0x0800780b
 8007784:	0800785f 	.word	0x0800785f
 8007788:	0800785f 	.word	0x0800785f
 800778c:	0800785f 	.word	0x0800785f
 8007790:	0800781b 	.word	0x0800781b
 8007794:	0800785f 	.word	0x0800785f
 8007798:	0800785f 	.word	0x0800785f
 800779c:	0800785f 	.word	0x0800785f
 80077a0:	0800785f 	.word	0x0800785f
 80077a4:	0800785f 	.word	0x0800785f
 80077a8:	0800785f 	.word	0x0800785f
 80077ac:	0800785f 	.word	0x0800785f
 80077b0:	0800782b 	.word	0x0800782b
 80077b4:	0800785f 	.word	0x0800785f
 80077b8:	0800785f 	.word	0x0800785f
 80077bc:	0800785f 	.word	0x0800785f
 80077c0:	0800785f 	.word	0x0800785f
 80077c4:	0800785f 	.word	0x0800785f
 80077c8:	0800785f 	.word	0x0800785f
 80077cc:	0800785f 	.word	0x0800785f
 80077d0:	0800785f 	.word	0x0800785f
 80077d4:	0800785f 	.word	0x0800785f
 80077d8:	0800785f 	.word	0x0800785f
 80077dc:	0800785f 	.word	0x0800785f
 80077e0:	0800785f 	.word	0x0800785f
 80077e4:	0800785f 	.word	0x0800785f
 80077e8:	0800785f 	.word	0x0800785f
 80077ec:	0800785f 	.word	0x0800785f
 80077f0:	08007851 	.word	0x08007851
 80077f4:	2b40      	cmp	r3, #64	; 0x40
 80077f6:	d02e      	beq.n	8007856 <UART_SetConfig+0x8aa>
 80077f8:	e031      	b.n	800785e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077fa:	f7fd fc49 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 80077fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007800:	e033      	b.n	800786a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007802:	f7fd fc5b 	bl	80050bc <HAL_RCC_GetPCLK2Freq>
 8007806:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007808:	e02f      	b.n	800786a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800780a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800780e:	4618      	mov	r0, r3
 8007810:	f7fe fc08 	bl	8006024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007818:	e027      	b.n	800786a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800781a:	f107 0318 	add.w	r3, r7, #24
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fd54 	bl	80062cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007828:	e01f      	b.n	800786a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800782a:	4b2e      	ldr	r3, [pc, #184]	; (80078e4 <UART_SetConfig+0x938>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d009      	beq.n	800784a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007836:	4b2b      	ldr	r3, [pc, #172]	; (80078e4 <UART_SetConfig+0x938>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	08db      	lsrs	r3, r3, #3
 800783c:	f003 0303 	and.w	r3, r3, #3
 8007840:	4a25      	ldr	r2, [pc, #148]	; (80078d8 <UART_SetConfig+0x92c>)
 8007842:	fa22 f303 	lsr.w	r3, r2, r3
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007848:	e00f      	b.n	800786a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800784a:	4b23      	ldr	r3, [pc, #140]	; (80078d8 <UART_SetConfig+0x92c>)
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800784e:	e00c      	b.n	800786a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007850:	4b22      	ldr	r3, [pc, #136]	; (80078dc <UART_SetConfig+0x930>)
 8007852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007854:	e009      	b.n	800786a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800785a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800785c:	e005      	b.n	800786a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800786a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 80e9 	beq.w	8007a44 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	4a1a      	ldr	r2, [pc, #104]	; (80078e0 <UART_SetConfig+0x934>)
 8007878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800787c:	461a      	mov	r2, r3
 800787e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007880:	fbb3 f3f2 	udiv	r3, r3, r2
 8007884:	005a      	lsls	r2, r3, #1
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	085b      	lsrs	r3, r3, #1
 800788c:	441a      	add	r2, r3
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	fbb2 f3f3 	udiv	r3, r2, r3
 8007896:	b29b      	uxth	r3, r3
 8007898:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	2b0f      	cmp	r3, #15
 800789e:	d916      	bls.n	80078ce <UART_SetConfig+0x922>
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a6:	d212      	bcs.n	80078ce <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	f023 030f 	bic.w	r3, r3, #15
 80078b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	085b      	lsrs	r3, r3, #1
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	b29a      	uxth	r2, r3
 80078be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80078c0:	4313      	orrs	r3, r2
 80078c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80078ca:	60da      	str	r2, [r3, #12]
 80078cc:	e0ba      	b.n	8007a44 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80078d4:	e0b6      	b.n	8007a44 <UART_SetConfig+0xa98>
 80078d6:	bf00      	nop
 80078d8:	03d09000 	.word	0x03d09000
 80078dc:	003d0900 	.word	0x003d0900
 80078e0:	08008db4 	.word	0x08008db4
 80078e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80078e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	dc49      	bgt.n	8007984 <UART_SetConfig+0x9d8>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	db7c      	blt.n	80079ee <UART_SetConfig+0xa42>
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d87a      	bhi.n	80079ee <UART_SetConfig+0xa42>
 80078f8:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <UART_SetConfig+0x954>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	0800798b 	.word	0x0800798b
 8007904:	08007993 	.word	0x08007993
 8007908:	080079ef 	.word	0x080079ef
 800790c:	080079ef 	.word	0x080079ef
 8007910:	0800799b 	.word	0x0800799b
 8007914:	080079ef 	.word	0x080079ef
 8007918:	080079ef 	.word	0x080079ef
 800791c:	080079ef 	.word	0x080079ef
 8007920:	080079ab 	.word	0x080079ab
 8007924:	080079ef 	.word	0x080079ef
 8007928:	080079ef 	.word	0x080079ef
 800792c:	080079ef 	.word	0x080079ef
 8007930:	080079ef 	.word	0x080079ef
 8007934:	080079ef 	.word	0x080079ef
 8007938:	080079ef 	.word	0x080079ef
 800793c:	080079ef 	.word	0x080079ef
 8007940:	080079bb 	.word	0x080079bb
 8007944:	080079ef 	.word	0x080079ef
 8007948:	080079ef 	.word	0x080079ef
 800794c:	080079ef 	.word	0x080079ef
 8007950:	080079ef 	.word	0x080079ef
 8007954:	080079ef 	.word	0x080079ef
 8007958:	080079ef 	.word	0x080079ef
 800795c:	080079ef 	.word	0x080079ef
 8007960:	080079ef 	.word	0x080079ef
 8007964:	080079ef 	.word	0x080079ef
 8007968:	080079ef 	.word	0x080079ef
 800796c:	080079ef 	.word	0x080079ef
 8007970:	080079ef 	.word	0x080079ef
 8007974:	080079ef 	.word	0x080079ef
 8007978:	080079ef 	.word	0x080079ef
 800797c:	080079ef 	.word	0x080079ef
 8007980:	080079e1 	.word	0x080079e1
 8007984:	2b40      	cmp	r3, #64	; 0x40
 8007986:	d02e      	beq.n	80079e6 <UART_SetConfig+0xa3a>
 8007988:	e031      	b.n	80079ee <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800798a:	f7fd fb81 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 800798e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007990:	e033      	b.n	80079fa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007992:	f7fd fb93 	bl	80050bc <HAL_RCC_GetPCLK2Freq>
 8007996:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007998:	e02f      	b.n	80079fa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800799a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe fb40 	bl	8006024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079a8:	e027      	b.n	80079fa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079aa:	f107 0318 	add.w	r3, r7, #24
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fc8c 	bl	80062cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079b8:	e01f      	b.n	80079fa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ba:	4b2d      	ldr	r3, [pc, #180]	; (8007a70 <UART_SetConfig+0xac4>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0320 	and.w	r3, r3, #32
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d009      	beq.n	80079da <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079c6:	4b2a      	ldr	r3, [pc, #168]	; (8007a70 <UART_SetConfig+0xac4>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	08db      	lsrs	r3, r3, #3
 80079cc:	f003 0303 	and.w	r3, r3, #3
 80079d0:	4a28      	ldr	r2, [pc, #160]	; (8007a74 <UART_SetConfig+0xac8>)
 80079d2:	fa22 f303 	lsr.w	r3, r2, r3
 80079d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079d8:	e00f      	b.n	80079fa <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 80079da:	4b26      	ldr	r3, [pc, #152]	; (8007a74 <UART_SetConfig+0xac8>)
 80079dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079de:	e00c      	b.n	80079fa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079e0:	4b25      	ldr	r3, [pc, #148]	; (8007a78 <UART_SetConfig+0xacc>)
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079e4:	e009      	b.n	80079fa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ec:	e005      	b.n	80079fa <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80079f8:	bf00      	nop
    }

    if (pclk != 0U)
 80079fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d021      	beq.n	8007a44 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	4a1d      	ldr	r2, [pc, #116]	; (8007a7c <UART_SetConfig+0xad0>)
 8007a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	085b      	lsrs	r3, r3, #1
 8007a18:	441a      	add	r2, r3
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	2b0f      	cmp	r3, #15
 8007a2a:	d908      	bls.n	8007a3e <UART_SetConfig+0xa92>
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a32:	d204      	bcs.n	8007a3e <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a3a:	60da      	str	r2, [r3, #12]
 8007a3c:	e002      	b.n	8007a44 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2200      	movs	r2, #0
 8007a58:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007a60:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3748      	adds	r7, #72	; 0x48
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a6e:	bf00      	nop
 8007a70:	58024400 	.word	0x58024400
 8007a74:	03d09000 	.word	0x03d09000
 8007a78:	003d0900 	.word	0x003d0900
 8007a7c:	08008db4 	.word	0x08008db4

08007a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b14:	f003 0310 	and.w	r3, r3, #16
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01a      	beq.n	8007b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b7e:	d10a      	bne.n	8007b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	605a      	str	r2, [r3, #4]
  }
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bd4:	f7fb fff2 	bl	8003bbc <HAL_GetTick>
 8007bd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d10e      	bne.n	8007c06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f82f 	bl	8007c5a <UART_WaitOnFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e025      	b.n	8007c52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d10e      	bne.n	8007c32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f819 	bl	8007c5a <UART_WaitOnFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e00f      	b.n	8007c52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	603b      	str	r3, [r7, #0]
 8007c66:	4613      	mov	r3, r2
 8007c68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c6a:	e062      	b.n	8007d32 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d05e      	beq.n	8007d32 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c74:	f7fb ffa2 	bl	8003bbc <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d302      	bcc.n	8007c8a <UART_WaitOnFlagUntilTimeout+0x30>
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d11d      	bne.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0201 	bic.w	r2, r2, #1
 8007ca8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e045      	b.n	8007d52 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d02e      	beq.n	8007d32 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ce2:	d126      	bne.n	8007d32 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007cfc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e00f      	b.n	8007d52 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69da      	ldr	r2, [r3, #28]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	bf0c      	ite	eq
 8007d42:	2301      	moveq	r3, #1
 8007d44:	2300      	movne	r3, #0
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d08d      	beq.n	8007c6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d101      	bne.n	8007d70 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e027      	b.n	8007dc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2224      	movs	r2, #36	; 0x24
 8007d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0201 	bic.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2220      	movs	r2, #32
 8007db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e02d      	b.n	8007e40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2224      	movs	r2, #36	; 0x24
 8007df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0201 	bic.w	r2, r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f84f 	bl	8007ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d101      	bne.n	8007e60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e02d      	b.n	8007ebc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2224      	movs	r2, #36	; 0x24
 8007e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0201 	bic.w	r2, r2, #1
 8007e86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f811 	bl	8007ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d108      	bne.n	8007ee6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ee4:	e031      	b.n	8007f4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ee6:	2310      	movs	r3, #16
 8007ee8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007eea:	2310      	movs	r3, #16
 8007eec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	0e5b      	lsrs	r3, r3, #25
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	0f5b      	lsrs	r3, r3, #29
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	7b3a      	ldrb	r2, [r7, #12]
 8007f12:	4911      	ldr	r1, [pc, #68]	; (8007f58 <UARTEx_SetNbDataToProcess+0x94>)
 8007f14:	5c8a      	ldrb	r2, [r1, r2]
 8007f16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f1a:	7b3a      	ldrb	r2, [r7, #12]
 8007f1c:	490f      	ldr	r1, [pc, #60]	; (8007f5c <UARTEx_SetNbDataToProcess+0x98>)
 8007f1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	7b7a      	ldrb	r2, [r7, #13]
 8007f30:	4909      	ldr	r1, [pc, #36]	; (8007f58 <UARTEx_SetNbDataToProcess+0x94>)
 8007f32:	5c8a      	ldrb	r2, [r1, r2]
 8007f34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f38:	7b7a      	ldrb	r2, [r7, #13]
 8007f3a:	4908      	ldr	r1, [pc, #32]	; (8007f5c <UARTEx_SetNbDataToProcess+0x98>)
 8007f3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f4a:	bf00      	nop
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	08008dcc 	.word	0x08008dcc
 8007f5c:	08008dd4 	.word	0x08008dd4

08007f60 <__libc_init_array>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	4d0d      	ldr	r5, [pc, #52]	; (8007f98 <__libc_init_array+0x38>)
 8007f64:	4c0d      	ldr	r4, [pc, #52]	; (8007f9c <__libc_init_array+0x3c>)
 8007f66:	1b64      	subs	r4, r4, r5
 8007f68:	10a4      	asrs	r4, r4, #2
 8007f6a:	2600      	movs	r6, #0
 8007f6c:	42a6      	cmp	r6, r4
 8007f6e:	d109      	bne.n	8007f84 <__libc_init_array+0x24>
 8007f70:	4d0b      	ldr	r5, [pc, #44]	; (8007fa0 <__libc_init_array+0x40>)
 8007f72:	4c0c      	ldr	r4, [pc, #48]	; (8007fa4 <__libc_init_array+0x44>)
 8007f74:	f000 fe6a 	bl	8008c4c <_init>
 8007f78:	1b64      	subs	r4, r4, r5
 8007f7a:	10a4      	asrs	r4, r4, #2
 8007f7c:	2600      	movs	r6, #0
 8007f7e:	42a6      	cmp	r6, r4
 8007f80:	d105      	bne.n	8007f8e <__libc_init_array+0x2e>
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f88:	4798      	blx	r3
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	e7ee      	b.n	8007f6c <__libc_init_array+0xc>
 8007f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f92:	4798      	blx	r3
 8007f94:	3601      	adds	r6, #1
 8007f96:	e7f2      	b.n	8007f7e <__libc_init_array+0x1e>
 8007f98:	08008e48 	.word	0x08008e48
 8007f9c:	08008e48 	.word	0x08008e48
 8007fa0:	08008e48 	.word	0x08008e48
 8007fa4:	08008e4c 	.word	0x08008e4c

08007fa8 <memcmp>:
 8007fa8:	b510      	push	{r4, lr}
 8007faa:	3901      	subs	r1, #1
 8007fac:	4402      	add	r2, r0
 8007fae:	4290      	cmp	r0, r2
 8007fb0:	d101      	bne.n	8007fb6 <memcmp+0xe>
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	e005      	b.n	8007fc2 <memcmp+0x1a>
 8007fb6:	7803      	ldrb	r3, [r0, #0]
 8007fb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	d001      	beq.n	8007fc4 <memcmp+0x1c>
 8007fc0:	1b18      	subs	r0, r3, r4
 8007fc2:	bd10      	pop	{r4, pc}
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	e7f2      	b.n	8007fae <memcmp+0x6>

08007fc8 <memcpy>:
 8007fc8:	440a      	add	r2, r1
 8007fca:	4291      	cmp	r1, r2
 8007fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fd0:	d100      	bne.n	8007fd4 <memcpy+0xc>
 8007fd2:	4770      	bx	lr
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fde:	4291      	cmp	r1, r2
 8007fe0:	d1f9      	bne.n	8007fd6 <memcpy+0xe>
 8007fe2:	bd10      	pop	{r4, pc}

08007fe4 <memset>:
 8007fe4:	4402      	add	r2, r0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d100      	bne.n	8007fee <memset+0xa>
 8007fec:	4770      	bx	lr
 8007fee:	f803 1b01 	strb.w	r1, [r3], #1
 8007ff2:	e7f9      	b.n	8007fe8 <memset+0x4>

08007ff4 <_puts_r>:
 8007ff4:	b570      	push	{r4, r5, r6, lr}
 8007ff6:	460e      	mov	r6, r1
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	b118      	cbz	r0, 8008004 <_puts_r+0x10>
 8007ffc:	6983      	ldr	r3, [r0, #24]
 8007ffe:	b90b      	cbnz	r3, 8008004 <_puts_r+0x10>
 8008000:	f000 fa48 	bl	8008494 <__sinit>
 8008004:	69ab      	ldr	r3, [r5, #24]
 8008006:	68ac      	ldr	r4, [r5, #8]
 8008008:	b913      	cbnz	r3, 8008010 <_puts_r+0x1c>
 800800a:	4628      	mov	r0, r5
 800800c:	f000 fa42 	bl	8008494 <__sinit>
 8008010:	4b2c      	ldr	r3, [pc, #176]	; (80080c4 <_puts_r+0xd0>)
 8008012:	429c      	cmp	r4, r3
 8008014:	d120      	bne.n	8008058 <_puts_r+0x64>
 8008016:	686c      	ldr	r4, [r5, #4]
 8008018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800801a:	07db      	lsls	r3, r3, #31
 800801c:	d405      	bmi.n	800802a <_puts_r+0x36>
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	0598      	lsls	r0, r3, #22
 8008022:	d402      	bmi.n	800802a <_puts_r+0x36>
 8008024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008026:	f000 fad3 	bl	80085d0 <__retarget_lock_acquire_recursive>
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	0719      	lsls	r1, r3, #28
 800802e:	d51d      	bpl.n	800806c <_puts_r+0x78>
 8008030:	6923      	ldr	r3, [r4, #16]
 8008032:	b1db      	cbz	r3, 800806c <_puts_r+0x78>
 8008034:	3e01      	subs	r6, #1
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800803c:	3b01      	subs	r3, #1
 800803e:	60a3      	str	r3, [r4, #8]
 8008040:	bb39      	cbnz	r1, 8008092 <_puts_r+0x9e>
 8008042:	2b00      	cmp	r3, #0
 8008044:	da38      	bge.n	80080b8 <_puts_r+0xc4>
 8008046:	4622      	mov	r2, r4
 8008048:	210a      	movs	r1, #10
 800804a:	4628      	mov	r0, r5
 800804c:	f000 f848 	bl	80080e0 <__swbuf_r>
 8008050:	3001      	adds	r0, #1
 8008052:	d011      	beq.n	8008078 <_puts_r+0x84>
 8008054:	250a      	movs	r5, #10
 8008056:	e011      	b.n	800807c <_puts_r+0x88>
 8008058:	4b1b      	ldr	r3, [pc, #108]	; (80080c8 <_puts_r+0xd4>)
 800805a:	429c      	cmp	r4, r3
 800805c:	d101      	bne.n	8008062 <_puts_r+0x6e>
 800805e:	68ac      	ldr	r4, [r5, #8]
 8008060:	e7da      	b.n	8008018 <_puts_r+0x24>
 8008062:	4b1a      	ldr	r3, [pc, #104]	; (80080cc <_puts_r+0xd8>)
 8008064:	429c      	cmp	r4, r3
 8008066:	bf08      	it	eq
 8008068:	68ec      	ldreq	r4, [r5, #12]
 800806a:	e7d5      	b.n	8008018 <_puts_r+0x24>
 800806c:	4621      	mov	r1, r4
 800806e:	4628      	mov	r0, r5
 8008070:	f000 f888 	bl	8008184 <__swsetup_r>
 8008074:	2800      	cmp	r0, #0
 8008076:	d0dd      	beq.n	8008034 <_puts_r+0x40>
 8008078:	f04f 35ff 	mov.w	r5, #4294967295
 800807c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800807e:	07da      	lsls	r2, r3, #31
 8008080:	d405      	bmi.n	800808e <_puts_r+0x9a>
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	059b      	lsls	r3, r3, #22
 8008086:	d402      	bmi.n	800808e <_puts_r+0x9a>
 8008088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800808a:	f000 faa2 	bl	80085d2 <__retarget_lock_release_recursive>
 800808e:	4628      	mov	r0, r5
 8008090:	bd70      	pop	{r4, r5, r6, pc}
 8008092:	2b00      	cmp	r3, #0
 8008094:	da04      	bge.n	80080a0 <_puts_r+0xac>
 8008096:	69a2      	ldr	r2, [r4, #24]
 8008098:	429a      	cmp	r2, r3
 800809a:	dc06      	bgt.n	80080aa <_puts_r+0xb6>
 800809c:	290a      	cmp	r1, #10
 800809e:	d004      	beq.n	80080aa <_puts_r+0xb6>
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	6022      	str	r2, [r4, #0]
 80080a6:	7019      	strb	r1, [r3, #0]
 80080a8:	e7c5      	b.n	8008036 <_puts_r+0x42>
 80080aa:	4622      	mov	r2, r4
 80080ac:	4628      	mov	r0, r5
 80080ae:	f000 f817 	bl	80080e0 <__swbuf_r>
 80080b2:	3001      	adds	r0, #1
 80080b4:	d1bf      	bne.n	8008036 <_puts_r+0x42>
 80080b6:	e7df      	b.n	8008078 <_puts_r+0x84>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	250a      	movs	r5, #10
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	6022      	str	r2, [r4, #0]
 80080c0:	701d      	strb	r5, [r3, #0]
 80080c2:	e7db      	b.n	800807c <_puts_r+0x88>
 80080c4:	08008e00 	.word	0x08008e00
 80080c8:	08008e20 	.word	0x08008e20
 80080cc:	08008de0 	.word	0x08008de0

080080d0 <puts>:
 80080d0:	4b02      	ldr	r3, [pc, #8]	; (80080dc <puts+0xc>)
 80080d2:	4601      	mov	r1, r0
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	f7ff bf8d 	b.w	8007ff4 <_puts_r>
 80080da:	bf00      	nop
 80080dc:	2400001c 	.word	0x2400001c

080080e0 <__swbuf_r>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	460e      	mov	r6, r1
 80080e4:	4614      	mov	r4, r2
 80080e6:	4605      	mov	r5, r0
 80080e8:	b118      	cbz	r0, 80080f2 <__swbuf_r+0x12>
 80080ea:	6983      	ldr	r3, [r0, #24]
 80080ec:	b90b      	cbnz	r3, 80080f2 <__swbuf_r+0x12>
 80080ee:	f000 f9d1 	bl	8008494 <__sinit>
 80080f2:	4b21      	ldr	r3, [pc, #132]	; (8008178 <__swbuf_r+0x98>)
 80080f4:	429c      	cmp	r4, r3
 80080f6:	d12b      	bne.n	8008150 <__swbuf_r+0x70>
 80080f8:	686c      	ldr	r4, [r5, #4]
 80080fa:	69a3      	ldr	r3, [r4, #24]
 80080fc:	60a3      	str	r3, [r4, #8]
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	071a      	lsls	r2, r3, #28
 8008102:	d52f      	bpl.n	8008164 <__swbuf_r+0x84>
 8008104:	6923      	ldr	r3, [r4, #16]
 8008106:	b36b      	cbz	r3, 8008164 <__swbuf_r+0x84>
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	6820      	ldr	r0, [r4, #0]
 800810c:	1ac0      	subs	r0, r0, r3
 800810e:	6963      	ldr	r3, [r4, #20]
 8008110:	b2f6      	uxtb	r6, r6
 8008112:	4283      	cmp	r3, r0
 8008114:	4637      	mov	r7, r6
 8008116:	dc04      	bgt.n	8008122 <__swbuf_r+0x42>
 8008118:	4621      	mov	r1, r4
 800811a:	4628      	mov	r0, r5
 800811c:	f000 f926 	bl	800836c <_fflush_r>
 8008120:	bb30      	cbnz	r0, 8008170 <__swbuf_r+0x90>
 8008122:	68a3      	ldr	r3, [r4, #8]
 8008124:	3b01      	subs	r3, #1
 8008126:	60a3      	str	r3, [r4, #8]
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	6022      	str	r2, [r4, #0]
 800812e:	701e      	strb	r6, [r3, #0]
 8008130:	6963      	ldr	r3, [r4, #20]
 8008132:	3001      	adds	r0, #1
 8008134:	4283      	cmp	r3, r0
 8008136:	d004      	beq.n	8008142 <__swbuf_r+0x62>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	07db      	lsls	r3, r3, #31
 800813c:	d506      	bpl.n	800814c <__swbuf_r+0x6c>
 800813e:	2e0a      	cmp	r6, #10
 8008140:	d104      	bne.n	800814c <__swbuf_r+0x6c>
 8008142:	4621      	mov	r1, r4
 8008144:	4628      	mov	r0, r5
 8008146:	f000 f911 	bl	800836c <_fflush_r>
 800814a:	b988      	cbnz	r0, 8008170 <__swbuf_r+0x90>
 800814c:	4638      	mov	r0, r7
 800814e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008150:	4b0a      	ldr	r3, [pc, #40]	; (800817c <__swbuf_r+0x9c>)
 8008152:	429c      	cmp	r4, r3
 8008154:	d101      	bne.n	800815a <__swbuf_r+0x7a>
 8008156:	68ac      	ldr	r4, [r5, #8]
 8008158:	e7cf      	b.n	80080fa <__swbuf_r+0x1a>
 800815a:	4b09      	ldr	r3, [pc, #36]	; (8008180 <__swbuf_r+0xa0>)
 800815c:	429c      	cmp	r4, r3
 800815e:	bf08      	it	eq
 8008160:	68ec      	ldreq	r4, [r5, #12]
 8008162:	e7ca      	b.n	80080fa <__swbuf_r+0x1a>
 8008164:	4621      	mov	r1, r4
 8008166:	4628      	mov	r0, r5
 8008168:	f000 f80c 	bl	8008184 <__swsetup_r>
 800816c:	2800      	cmp	r0, #0
 800816e:	d0cb      	beq.n	8008108 <__swbuf_r+0x28>
 8008170:	f04f 37ff 	mov.w	r7, #4294967295
 8008174:	e7ea      	b.n	800814c <__swbuf_r+0x6c>
 8008176:	bf00      	nop
 8008178:	08008e00 	.word	0x08008e00
 800817c:	08008e20 	.word	0x08008e20
 8008180:	08008de0 	.word	0x08008de0

08008184 <__swsetup_r>:
 8008184:	4b32      	ldr	r3, [pc, #200]	; (8008250 <__swsetup_r+0xcc>)
 8008186:	b570      	push	{r4, r5, r6, lr}
 8008188:	681d      	ldr	r5, [r3, #0]
 800818a:	4606      	mov	r6, r0
 800818c:	460c      	mov	r4, r1
 800818e:	b125      	cbz	r5, 800819a <__swsetup_r+0x16>
 8008190:	69ab      	ldr	r3, [r5, #24]
 8008192:	b913      	cbnz	r3, 800819a <__swsetup_r+0x16>
 8008194:	4628      	mov	r0, r5
 8008196:	f000 f97d 	bl	8008494 <__sinit>
 800819a:	4b2e      	ldr	r3, [pc, #184]	; (8008254 <__swsetup_r+0xd0>)
 800819c:	429c      	cmp	r4, r3
 800819e:	d10f      	bne.n	80081c0 <__swsetup_r+0x3c>
 80081a0:	686c      	ldr	r4, [r5, #4]
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081a8:	0719      	lsls	r1, r3, #28
 80081aa:	d42c      	bmi.n	8008206 <__swsetup_r+0x82>
 80081ac:	06dd      	lsls	r5, r3, #27
 80081ae:	d411      	bmi.n	80081d4 <__swsetup_r+0x50>
 80081b0:	2309      	movs	r3, #9
 80081b2:	6033      	str	r3, [r6, #0]
 80081b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081b8:	81a3      	strh	r3, [r4, #12]
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295
 80081be:	e03e      	b.n	800823e <__swsetup_r+0xba>
 80081c0:	4b25      	ldr	r3, [pc, #148]	; (8008258 <__swsetup_r+0xd4>)
 80081c2:	429c      	cmp	r4, r3
 80081c4:	d101      	bne.n	80081ca <__swsetup_r+0x46>
 80081c6:	68ac      	ldr	r4, [r5, #8]
 80081c8:	e7eb      	b.n	80081a2 <__swsetup_r+0x1e>
 80081ca:	4b24      	ldr	r3, [pc, #144]	; (800825c <__swsetup_r+0xd8>)
 80081cc:	429c      	cmp	r4, r3
 80081ce:	bf08      	it	eq
 80081d0:	68ec      	ldreq	r4, [r5, #12]
 80081d2:	e7e6      	b.n	80081a2 <__swsetup_r+0x1e>
 80081d4:	0758      	lsls	r0, r3, #29
 80081d6:	d512      	bpl.n	80081fe <__swsetup_r+0x7a>
 80081d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081da:	b141      	cbz	r1, 80081ee <__swsetup_r+0x6a>
 80081dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e0:	4299      	cmp	r1, r3
 80081e2:	d002      	beq.n	80081ea <__swsetup_r+0x66>
 80081e4:	4630      	mov	r0, r6
 80081e6:	f000 fa5b 	bl	80086a0 <_free_r>
 80081ea:	2300      	movs	r3, #0
 80081ec:	6363      	str	r3, [r4, #52]	; 0x34
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081f4:	81a3      	strh	r3, [r4, #12]
 80081f6:	2300      	movs	r3, #0
 80081f8:	6063      	str	r3, [r4, #4]
 80081fa:	6923      	ldr	r3, [r4, #16]
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	89a3      	ldrh	r3, [r4, #12]
 8008200:	f043 0308 	orr.w	r3, r3, #8
 8008204:	81a3      	strh	r3, [r4, #12]
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	b94b      	cbnz	r3, 800821e <__swsetup_r+0x9a>
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008214:	d003      	beq.n	800821e <__swsetup_r+0x9a>
 8008216:	4621      	mov	r1, r4
 8008218:	4630      	mov	r0, r6
 800821a:	f000 fa01 	bl	8008620 <__smakebuf_r>
 800821e:	89a0      	ldrh	r0, [r4, #12]
 8008220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008224:	f010 0301 	ands.w	r3, r0, #1
 8008228:	d00a      	beq.n	8008240 <__swsetup_r+0xbc>
 800822a:	2300      	movs	r3, #0
 800822c:	60a3      	str	r3, [r4, #8]
 800822e:	6963      	ldr	r3, [r4, #20]
 8008230:	425b      	negs	r3, r3
 8008232:	61a3      	str	r3, [r4, #24]
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	b943      	cbnz	r3, 800824a <__swsetup_r+0xc6>
 8008238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800823c:	d1ba      	bne.n	80081b4 <__swsetup_r+0x30>
 800823e:	bd70      	pop	{r4, r5, r6, pc}
 8008240:	0781      	lsls	r1, r0, #30
 8008242:	bf58      	it	pl
 8008244:	6963      	ldrpl	r3, [r4, #20]
 8008246:	60a3      	str	r3, [r4, #8]
 8008248:	e7f4      	b.n	8008234 <__swsetup_r+0xb0>
 800824a:	2000      	movs	r0, #0
 800824c:	e7f7      	b.n	800823e <__swsetup_r+0xba>
 800824e:	bf00      	nop
 8008250:	2400001c 	.word	0x2400001c
 8008254:	08008e00 	.word	0x08008e00
 8008258:	08008e20 	.word	0x08008e20
 800825c:	08008de0 	.word	0x08008de0

08008260 <__sflush_r>:
 8008260:	898a      	ldrh	r2, [r1, #12]
 8008262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008266:	4605      	mov	r5, r0
 8008268:	0710      	lsls	r0, r2, #28
 800826a:	460c      	mov	r4, r1
 800826c:	d458      	bmi.n	8008320 <__sflush_r+0xc0>
 800826e:	684b      	ldr	r3, [r1, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	dc05      	bgt.n	8008280 <__sflush_r+0x20>
 8008274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	dc02      	bgt.n	8008280 <__sflush_r+0x20>
 800827a:	2000      	movs	r0, #0
 800827c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008282:	2e00      	cmp	r6, #0
 8008284:	d0f9      	beq.n	800827a <__sflush_r+0x1a>
 8008286:	2300      	movs	r3, #0
 8008288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800828c:	682f      	ldr	r7, [r5, #0]
 800828e:	602b      	str	r3, [r5, #0]
 8008290:	d032      	beq.n	80082f8 <__sflush_r+0x98>
 8008292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	075a      	lsls	r2, r3, #29
 8008298:	d505      	bpl.n	80082a6 <__sflush_r+0x46>
 800829a:	6863      	ldr	r3, [r4, #4]
 800829c:	1ac0      	subs	r0, r0, r3
 800829e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082a0:	b10b      	cbz	r3, 80082a6 <__sflush_r+0x46>
 80082a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082a4:	1ac0      	subs	r0, r0, r3
 80082a6:	2300      	movs	r3, #0
 80082a8:	4602      	mov	r2, r0
 80082aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082ac:	6a21      	ldr	r1, [r4, #32]
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b0      	blx	r6
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	d106      	bne.n	80082c6 <__sflush_r+0x66>
 80082b8:	6829      	ldr	r1, [r5, #0]
 80082ba:	291d      	cmp	r1, #29
 80082bc:	d82c      	bhi.n	8008318 <__sflush_r+0xb8>
 80082be:	4a2a      	ldr	r2, [pc, #168]	; (8008368 <__sflush_r+0x108>)
 80082c0:	40ca      	lsrs	r2, r1
 80082c2:	07d6      	lsls	r6, r2, #31
 80082c4:	d528      	bpl.n	8008318 <__sflush_r+0xb8>
 80082c6:	2200      	movs	r2, #0
 80082c8:	6062      	str	r2, [r4, #4]
 80082ca:	04d9      	lsls	r1, r3, #19
 80082cc:	6922      	ldr	r2, [r4, #16]
 80082ce:	6022      	str	r2, [r4, #0]
 80082d0:	d504      	bpl.n	80082dc <__sflush_r+0x7c>
 80082d2:	1c42      	adds	r2, r0, #1
 80082d4:	d101      	bne.n	80082da <__sflush_r+0x7a>
 80082d6:	682b      	ldr	r3, [r5, #0]
 80082d8:	b903      	cbnz	r3, 80082dc <__sflush_r+0x7c>
 80082da:	6560      	str	r0, [r4, #84]	; 0x54
 80082dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082de:	602f      	str	r7, [r5, #0]
 80082e0:	2900      	cmp	r1, #0
 80082e2:	d0ca      	beq.n	800827a <__sflush_r+0x1a>
 80082e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082e8:	4299      	cmp	r1, r3
 80082ea:	d002      	beq.n	80082f2 <__sflush_r+0x92>
 80082ec:	4628      	mov	r0, r5
 80082ee:	f000 f9d7 	bl	80086a0 <_free_r>
 80082f2:	2000      	movs	r0, #0
 80082f4:	6360      	str	r0, [r4, #52]	; 0x34
 80082f6:	e7c1      	b.n	800827c <__sflush_r+0x1c>
 80082f8:	6a21      	ldr	r1, [r4, #32]
 80082fa:	2301      	movs	r3, #1
 80082fc:	4628      	mov	r0, r5
 80082fe:	47b0      	blx	r6
 8008300:	1c41      	adds	r1, r0, #1
 8008302:	d1c7      	bne.n	8008294 <__sflush_r+0x34>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0c4      	beq.n	8008294 <__sflush_r+0x34>
 800830a:	2b1d      	cmp	r3, #29
 800830c:	d001      	beq.n	8008312 <__sflush_r+0xb2>
 800830e:	2b16      	cmp	r3, #22
 8008310:	d101      	bne.n	8008316 <__sflush_r+0xb6>
 8008312:	602f      	str	r7, [r5, #0]
 8008314:	e7b1      	b.n	800827a <__sflush_r+0x1a>
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	e7ad      	b.n	800827c <__sflush_r+0x1c>
 8008320:	690f      	ldr	r7, [r1, #16]
 8008322:	2f00      	cmp	r7, #0
 8008324:	d0a9      	beq.n	800827a <__sflush_r+0x1a>
 8008326:	0793      	lsls	r3, r2, #30
 8008328:	680e      	ldr	r6, [r1, #0]
 800832a:	bf08      	it	eq
 800832c:	694b      	ldreq	r3, [r1, #20]
 800832e:	600f      	str	r7, [r1, #0]
 8008330:	bf18      	it	ne
 8008332:	2300      	movne	r3, #0
 8008334:	eba6 0807 	sub.w	r8, r6, r7
 8008338:	608b      	str	r3, [r1, #8]
 800833a:	f1b8 0f00 	cmp.w	r8, #0
 800833e:	dd9c      	ble.n	800827a <__sflush_r+0x1a>
 8008340:	6a21      	ldr	r1, [r4, #32]
 8008342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008344:	4643      	mov	r3, r8
 8008346:	463a      	mov	r2, r7
 8008348:	4628      	mov	r0, r5
 800834a:	47b0      	blx	r6
 800834c:	2800      	cmp	r0, #0
 800834e:	dc06      	bgt.n	800835e <__sflush_r+0xfe>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	f04f 30ff 	mov.w	r0, #4294967295
 800835c:	e78e      	b.n	800827c <__sflush_r+0x1c>
 800835e:	4407      	add	r7, r0
 8008360:	eba8 0800 	sub.w	r8, r8, r0
 8008364:	e7e9      	b.n	800833a <__sflush_r+0xda>
 8008366:	bf00      	nop
 8008368:	20400001 	.word	0x20400001

0800836c <_fflush_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	690b      	ldr	r3, [r1, #16]
 8008370:	4605      	mov	r5, r0
 8008372:	460c      	mov	r4, r1
 8008374:	b913      	cbnz	r3, 800837c <_fflush_r+0x10>
 8008376:	2500      	movs	r5, #0
 8008378:	4628      	mov	r0, r5
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	b118      	cbz	r0, 8008386 <_fflush_r+0x1a>
 800837e:	6983      	ldr	r3, [r0, #24]
 8008380:	b90b      	cbnz	r3, 8008386 <_fflush_r+0x1a>
 8008382:	f000 f887 	bl	8008494 <__sinit>
 8008386:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <_fflush_r+0x6c>)
 8008388:	429c      	cmp	r4, r3
 800838a:	d11b      	bne.n	80083c4 <_fflush_r+0x58>
 800838c:	686c      	ldr	r4, [r5, #4]
 800838e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0ef      	beq.n	8008376 <_fflush_r+0xa>
 8008396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008398:	07d0      	lsls	r0, r2, #31
 800839a:	d404      	bmi.n	80083a6 <_fflush_r+0x3a>
 800839c:	0599      	lsls	r1, r3, #22
 800839e:	d402      	bmi.n	80083a6 <_fflush_r+0x3a>
 80083a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083a2:	f000 f915 	bl	80085d0 <__retarget_lock_acquire_recursive>
 80083a6:	4628      	mov	r0, r5
 80083a8:	4621      	mov	r1, r4
 80083aa:	f7ff ff59 	bl	8008260 <__sflush_r>
 80083ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083b0:	07da      	lsls	r2, r3, #31
 80083b2:	4605      	mov	r5, r0
 80083b4:	d4e0      	bmi.n	8008378 <_fflush_r+0xc>
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	059b      	lsls	r3, r3, #22
 80083ba:	d4dd      	bmi.n	8008378 <_fflush_r+0xc>
 80083bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083be:	f000 f908 	bl	80085d2 <__retarget_lock_release_recursive>
 80083c2:	e7d9      	b.n	8008378 <_fflush_r+0xc>
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <_fflush_r+0x70>)
 80083c6:	429c      	cmp	r4, r3
 80083c8:	d101      	bne.n	80083ce <_fflush_r+0x62>
 80083ca:	68ac      	ldr	r4, [r5, #8]
 80083cc:	e7df      	b.n	800838e <_fflush_r+0x22>
 80083ce:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <_fflush_r+0x74>)
 80083d0:	429c      	cmp	r4, r3
 80083d2:	bf08      	it	eq
 80083d4:	68ec      	ldreq	r4, [r5, #12]
 80083d6:	e7da      	b.n	800838e <_fflush_r+0x22>
 80083d8:	08008e00 	.word	0x08008e00
 80083dc:	08008e20 	.word	0x08008e20
 80083e0:	08008de0 	.word	0x08008de0

080083e4 <std>:
 80083e4:	2300      	movs	r3, #0
 80083e6:	b510      	push	{r4, lr}
 80083e8:	4604      	mov	r4, r0
 80083ea:	e9c0 3300 	strd	r3, r3, [r0]
 80083ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083f2:	6083      	str	r3, [r0, #8]
 80083f4:	8181      	strh	r1, [r0, #12]
 80083f6:	6643      	str	r3, [r0, #100]	; 0x64
 80083f8:	81c2      	strh	r2, [r0, #14]
 80083fa:	6183      	str	r3, [r0, #24]
 80083fc:	4619      	mov	r1, r3
 80083fe:	2208      	movs	r2, #8
 8008400:	305c      	adds	r0, #92	; 0x5c
 8008402:	f7ff fdef 	bl	8007fe4 <memset>
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <std+0x38>)
 8008408:	6263      	str	r3, [r4, #36]	; 0x24
 800840a:	4b05      	ldr	r3, [pc, #20]	; (8008420 <std+0x3c>)
 800840c:	62a3      	str	r3, [r4, #40]	; 0x28
 800840e:	4b05      	ldr	r3, [pc, #20]	; (8008424 <std+0x40>)
 8008410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008412:	4b05      	ldr	r3, [pc, #20]	; (8008428 <std+0x44>)
 8008414:	6224      	str	r4, [r4, #32]
 8008416:	6323      	str	r3, [r4, #48]	; 0x30
 8008418:	bd10      	pop	{r4, pc}
 800841a:	bf00      	nop
 800841c:	08008881 	.word	0x08008881
 8008420:	080088a3 	.word	0x080088a3
 8008424:	080088db 	.word	0x080088db
 8008428:	080088ff 	.word	0x080088ff

0800842c <_cleanup_r>:
 800842c:	4901      	ldr	r1, [pc, #4]	; (8008434 <_cleanup_r+0x8>)
 800842e:	f000 b8af 	b.w	8008590 <_fwalk_reent>
 8008432:	bf00      	nop
 8008434:	0800836d 	.word	0x0800836d

08008438 <__sfmoreglue>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	2268      	movs	r2, #104	; 0x68
 800843c:	1e4d      	subs	r5, r1, #1
 800843e:	4355      	muls	r5, r2
 8008440:	460e      	mov	r6, r1
 8008442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008446:	f000 f997 	bl	8008778 <_malloc_r>
 800844a:	4604      	mov	r4, r0
 800844c:	b140      	cbz	r0, 8008460 <__sfmoreglue+0x28>
 800844e:	2100      	movs	r1, #0
 8008450:	e9c0 1600 	strd	r1, r6, [r0]
 8008454:	300c      	adds	r0, #12
 8008456:	60a0      	str	r0, [r4, #8]
 8008458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800845c:	f7ff fdc2 	bl	8007fe4 <memset>
 8008460:	4620      	mov	r0, r4
 8008462:	bd70      	pop	{r4, r5, r6, pc}

08008464 <__sfp_lock_acquire>:
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <__sfp_lock_acquire+0x8>)
 8008466:	f000 b8b3 	b.w	80085d0 <__retarget_lock_acquire_recursive>
 800846a:	bf00      	nop
 800846c:	2407f555 	.word	0x2407f555

08008470 <__sfp_lock_release>:
 8008470:	4801      	ldr	r0, [pc, #4]	; (8008478 <__sfp_lock_release+0x8>)
 8008472:	f000 b8ae 	b.w	80085d2 <__retarget_lock_release_recursive>
 8008476:	bf00      	nop
 8008478:	2407f555 	.word	0x2407f555

0800847c <__sinit_lock_acquire>:
 800847c:	4801      	ldr	r0, [pc, #4]	; (8008484 <__sinit_lock_acquire+0x8>)
 800847e:	f000 b8a7 	b.w	80085d0 <__retarget_lock_acquire_recursive>
 8008482:	bf00      	nop
 8008484:	2407f556 	.word	0x2407f556

08008488 <__sinit_lock_release>:
 8008488:	4801      	ldr	r0, [pc, #4]	; (8008490 <__sinit_lock_release+0x8>)
 800848a:	f000 b8a2 	b.w	80085d2 <__retarget_lock_release_recursive>
 800848e:	bf00      	nop
 8008490:	2407f556 	.word	0x2407f556

08008494 <__sinit>:
 8008494:	b510      	push	{r4, lr}
 8008496:	4604      	mov	r4, r0
 8008498:	f7ff fff0 	bl	800847c <__sinit_lock_acquire>
 800849c:	69a3      	ldr	r3, [r4, #24]
 800849e:	b11b      	cbz	r3, 80084a8 <__sinit+0x14>
 80084a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a4:	f7ff bff0 	b.w	8008488 <__sinit_lock_release>
 80084a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084ac:	6523      	str	r3, [r4, #80]	; 0x50
 80084ae:	4b13      	ldr	r3, [pc, #76]	; (80084fc <__sinit+0x68>)
 80084b0:	4a13      	ldr	r2, [pc, #76]	; (8008500 <__sinit+0x6c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80084b6:	42a3      	cmp	r3, r4
 80084b8:	bf04      	itt	eq
 80084ba:	2301      	moveq	r3, #1
 80084bc:	61a3      	streq	r3, [r4, #24]
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 f820 	bl	8008504 <__sfp>
 80084c4:	6060      	str	r0, [r4, #4]
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 f81c 	bl	8008504 <__sfp>
 80084cc:	60a0      	str	r0, [r4, #8]
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 f818 	bl	8008504 <__sfp>
 80084d4:	2200      	movs	r2, #0
 80084d6:	60e0      	str	r0, [r4, #12]
 80084d8:	2104      	movs	r1, #4
 80084da:	6860      	ldr	r0, [r4, #4]
 80084dc:	f7ff ff82 	bl	80083e4 <std>
 80084e0:	68a0      	ldr	r0, [r4, #8]
 80084e2:	2201      	movs	r2, #1
 80084e4:	2109      	movs	r1, #9
 80084e6:	f7ff ff7d 	bl	80083e4 <std>
 80084ea:	68e0      	ldr	r0, [r4, #12]
 80084ec:	2202      	movs	r2, #2
 80084ee:	2112      	movs	r1, #18
 80084f0:	f7ff ff78 	bl	80083e4 <std>
 80084f4:	2301      	movs	r3, #1
 80084f6:	61a3      	str	r3, [r4, #24]
 80084f8:	e7d2      	b.n	80084a0 <__sinit+0xc>
 80084fa:	bf00      	nop
 80084fc:	08008ddc 	.word	0x08008ddc
 8008500:	0800842d 	.word	0x0800842d

08008504 <__sfp>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	4607      	mov	r7, r0
 8008508:	f7ff ffac 	bl	8008464 <__sfp_lock_acquire>
 800850c:	4b1e      	ldr	r3, [pc, #120]	; (8008588 <__sfp+0x84>)
 800850e:	681e      	ldr	r6, [r3, #0]
 8008510:	69b3      	ldr	r3, [r6, #24]
 8008512:	b913      	cbnz	r3, 800851a <__sfp+0x16>
 8008514:	4630      	mov	r0, r6
 8008516:	f7ff ffbd 	bl	8008494 <__sinit>
 800851a:	3648      	adds	r6, #72	; 0x48
 800851c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008520:	3b01      	subs	r3, #1
 8008522:	d503      	bpl.n	800852c <__sfp+0x28>
 8008524:	6833      	ldr	r3, [r6, #0]
 8008526:	b30b      	cbz	r3, 800856c <__sfp+0x68>
 8008528:	6836      	ldr	r6, [r6, #0]
 800852a:	e7f7      	b.n	800851c <__sfp+0x18>
 800852c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008530:	b9d5      	cbnz	r5, 8008568 <__sfp+0x64>
 8008532:	4b16      	ldr	r3, [pc, #88]	; (800858c <__sfp+0x88>)
 8008534:	60e3      	str	r3, [r4, #12]
 8008536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800853a:	6665      	str	r5, [r4, #100]	; 0x64
 800853c:	f000 f847 	bl	80085ce <__retarget_lock_init_recursive>
 8008540:	f7ff ff96 	bl	8008470 <__sfp_lock_release>
 8008544:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008548:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800854c:	6025      	str	r5, [r4, #0]
 800854e:	61a5      	str	r5, [r4, #24]
 8008550:	2208      	movs	r2, #8
 8008552:	4629      	mov	r1, r5
 8008554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008558:	f7ff fd44 	bl	8007fe4 <memset>
 800855c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008564:	4620      	mov	r0, r4
 8008566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008568:	3468      	adds	r4, #104	; 0x68
 800856a:	e7d9      	b.n	8008520 <__sfp+0x1c>
 800856c:	2104      	movs	r1, #4
 800856e:	4638      	mov	r0, r7
 8008570:	f7ff ff62 	bl	8008438 <__sfmoreglue>
 8008574:	4604      	mov	r4, r0
 8008576:	6030      	str	r0, [r6, #0]
 8008578:	2800      	cmp	r0, #0
 800857a:	d1d5      	bne.n	8008528 <__sfp+0x24>
 800857c:	f7ff ff78 	bl	8008470 <__sfp_lock_release>
 8008580:	230c      	movs	r3, #12
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	e7ee      	b.n	8008564 <__sfp+0x60>
 8008586:	bf00      	nop
 8008588:	08008ddc 	.word	0x08008ddc
 800858c:	ffff0001 	.word	0xffff0001

08008590 <_fwalk_reent>:
 8008590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008594:	4606      	mov	r6, r0
 8008596:	4688      	mov	r8, r1
 8008598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800859c:	2700      	movs	r7, #0
 800859e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085a2:	f1b9 0901 	subs.w	r9, r9, #1
 80085a6:	d505      	bpl.n	80085b4 <_fwalk_reent+0x24>
 80085a8:	6824      	ldr	r4, [r4, #0]
 80085aa:	2c00      	cmp	r4, #0
 80085ac:	d1f7      	bne.n	800859e <_fwalk_reent+0xe>
 80085ae:	4638      	mov	r0, r7
 80085b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b4:	89ab      	ldrh	r3, [r5, #12]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d907      	bls.n	80085ca <_fwalk_reent+0x3a>
 80085ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085be:	3301      	adds	r3, #1
 80085c0:	d003      	beq.n	80085ca <_fwalk_reent+0x3a>
 80085c2:	4629      	mov	r1, r5
 80085c4:	4630      	mov	r0, r6
 80085c6:	47c0      	blx	r8
 80085c8:	4307      	orrs	r7, r0
 80085ca:	3568      	adds	r5, #104	; 0x68
 80085cc:	e7e9      	b.n	80085a2 <_fwalk_reent+0x12>

080085ce <__retarget_lock_init_recursive>:
 80085ce:	4770      	bx	lr

080085d0 <__retarget_lock_acquire_recursive>:
 80085d0:	4770      	bx	lr

080085d2 <__retarget_lock_release_recursive>:
 80085d2:	4770      	bx	lr

080085d4 <__swhatbuf_r>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	460e      	mov	r6, r1
 80085d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085dc:	2900      	cmp	r1, #0
 80085de:	b096      	sub	sp, #88	; 0x58
 80085e0:	4614      	mov	r4, r2
 80085e2:	461d      	mov	r5, r3
 80085e4:	da08      	bge.n	80085f8 <__swhatbuf_r+0x24>
 80085e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	602a      	str	r2, [r5, #0]
 80085ee:	061a      	lsls	r2, r3, #24
 80085f0:	d410      	bmi.n	8008614 <__swhatbuf_r+0x40>
 80085f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f6:	e00e      	b.n	8008616 <__swhatbuf_r+0x42>
 80085f8:	466a      	mov	r2, sp
 80085fa:	f000 f995 	bl	8008928 <_fstat_r>
 80085fe:	2800      	cmp	r0, #0
 8008600:	dbf1      	blt.n	80085e6 <__swhatbuf_r+0x12>
 8008602:	9a01      	ldr	r2, [sp, #4]
 8008604:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008608:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800860c:	425a      	negs	r2, r3
 800860e:	415a      	adcs	r2, r3
 8008610:	602a      	str	r2, [r5, #0]
 8008612:	e7ee      	b.n	80085f2 <__swhatbuf_r+0x1e>
 8008614:	2340      	movs	r3, #64	; 0x40
 8008616:	2000      	movs	r0, #0
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	b016      	add	sp, #88	; 0x58
 800861c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008620 <__smakebuf_r>:
 8008620:	898b      	ldrh	r3, [r1, #12]
 8008622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008624:	079d      	lsls	r5, r3, #30
 8008626:	4606      	mov	r6, r0
 8008628:	460c      	mov	r4, r1
 800862a:	d507      	bpl.n	800863c <__smakebuf_r+0x1c>
 800862c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	6123      	str	r3, [r4, #16]
 8008634:	2301      	movs	r3, #1
 8008636:	6163      	str	r3, [r4, #20]
 8008638:	b002      	add	sp, #8
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	ab01      	add	r3, sp, #4
 800863e:	466a      	mov	r2, sp
 8008640:	f7ff ffc8 	bl	80085d4 <__swhatbuf_r>
 8008644:	9900      	ldr	r1, [sp, #0]
 8008646:	4605      	mov	r5, r0
 8008648:	4630      	mov	r0, r6
 800864a:	f000 f895 	bl	8008778 <_malloc_r>
 800864e:	b948      	cbnz	r0, 8008664 <__smakebuf_r+0x44>
 8008650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008654:	059a      	lsls	r2, r3, #22
 8008656:	d4ef      	bmi.n	8008638 <__smakebuf_r+0x18>
 8008658:	f023 0303 	bic.w	r3, r3, #3
 800865c:	f043 0302 	orr.w	r3, r3, #2
 8008660:	81a3      	strh	r3, [r4, #12]
 8008662:	e7e3      	b.n	800862c <__smakebuf_r+0xc>
 8008664:	4b0d      	ldr	r3, [pc, #52]	; (800869c <__smakebuf_r+0x7c>)
 8008666:	62b3      	str	r3, [r6, #40]	; 0x28
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	6020      	str	r0, [r4, #0]
 800866c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	9b00      	ldr	r3, [sp, #0]
 8008674:	6163      	str	r3, [r4, #20]
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	6120      	str	r0, [r4, #16]
 800867a:	b15b      	cbz	r3, 8008694 <__smakebuf_r+0x74>
 800867c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008680:	4630      	mov	r0, r6
 8008682:	f000 f963 	bl	800894c <_isatty_r>
 8008686:	b128      	cbz	r0, 8008694 <__smakebuf_r+0x74>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	f023 0303 	bic.w	r3, r3, #3
 800868e:	f043 0301 	orr.w	r3, r3, #1
 8008692:	81a3      	strh	r3, [r4, #12]
 8008694:	89a0      	ldrh	r0, [r4, #12]
 8008696:	4305      	orrs	r5, r0
 8008698:	81a5      	strh	r5, [r4, #12]
 800869a:	e7cd      	b.n	8008638 <__smakebuf_r+0x18>
 800869c:	0800842d 	.word	0x0800842d

080086a0 <_free_r>:
 80086a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d044      	beq.n	8008730 <_free_r+0x90>
 80086a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086aa:	9001      	str	r0, [sp, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f1a1 0404 	sub.w	r4, r1, #4
 80086b2:	bfb8      	it	lt
 80086b4:	18e4      	addlt	r4, r4, r3
 80086b6:	f000 f96b 	bl	8008990 <__malloc_lock>
 80086ba:	4a1e      	ldr	r2, [pc, #120]	; (8008734 <_free_r+0x94>)
 80086bc:	9801      	ldr	r0, [sp, #4]
 80086be:	6813      	ldr	r3, [r2, #0]
 80086c0:	b933      	cbnz	r3, 80086d0 <_free_r+0x30>
 80086c2:	6063      	str	r3, [r4, #4]
 80086c4:	6014      	str	r4, [r2, #0]
 80086c6:	b003      	add	sp, #12
 80086c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086cc:	f000 b966 	b.w	800899c <__malloc_unlock>
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	d908      	bls.n	80086e6 <_free_r+0x46>
 80086d4:	6825      	ldr	r5, [r4, #0]
 80086d6:	1961      	adds	r1, r4, r5
 80086d8:	428b      	cmp	r3, r1
 80086da:	bf01      	itttt	eq
 80086dc:	6819      	ldreq	r1, [r3, #0]
 80086de:	685b      	ldreq	r3, [r3, #4]
 80086e0:	1949      	addeq	r1, r1, r5
 80086e2:	6021      	streq	r1, [r4, #0]
 80086e4:	e7ed      	b.n	80086c2 <_free_r+0x22>
 80086e6:	461a      	mov	r2, r3
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	b10b      	cbz	r3, 80086f0 <_free_r+0x50>
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d9fa      	bls.n	80086e6 <_free_r+0x46>
 80086f0:	6811      	ldr	r1, [r2, #0]
 80086f2:	1855      	adds	r5, r2, r1
 80086f4:	42a5      	cmp	r5, r4
 80086f6:	d10b      	bne.n	8008710 <_free_r+0x70>
 80086f8:	6824      	ldr	r4, [r4, #0]
 80086fa:	4421      	add	r1, r4
 80086fc:	1854      	adds	r4, r2, r1
 80086fe:	42a3      	cmp	r3, r4
 8008700:	6011      	str	r1, [r2, #0]
 8008702:	d1e0      	bne.n	80086c6 <_free_r+0x26>
 8008704:	681c      	ldr	r4, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	6053      	str	r3, [r2, #4]
 800870a:	4421      	add	r1, r4
 800870c:	6011      	str	r1, [r2, #0]
 800870e:	e7da      	b.n	80086c6 <_free_r+0x26>
 8008710:	d902      	bls.n	8008718 <_free_r+0x78>
 8008712:	230c      	movs	r3, #12
 8008714:	6003      	str	r3, [r0, #0]
 8008716:	e7d6      	b.n	80086c6 <_free_r+0x26>
 8008718:	6825      	ldr	r5, [r4, #0]
 800871a:	1961      	adds	r1, r4, r5
 800871c:	428b      	cmp	r3, r1
 800871e:	bf04      	itt	eq
 8008720:	6819      	ldreq	r1, [r3, #0]
 8008722:	685b      	ldreq	r3, [r3, #4]
 8008724:	6063      	str	r3, [r4, #4]
 8008726:	bf04      	itt	eq
 8008728:	1949      	addeq	r1, r1, r5
 800872a:	6021      	streq	r1, [r4, #0]
 800872c:	6054      	str	r4, [r2, #4]
 800872e:	e7ca      	b.n	80086c6 <_free_r+0x26>
 8008730:	b003      	add	sp, #12
 8008732:	bd30      	pop	{r4, r5, pc}
 8008734:	2407f558 	.word	0x2407f558

08008738 <sbrk_aligned>:
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	4e0e      	ldr	r6, [pc, #56]	; (8008774 <sbrk_aligned+0x3c>)
 800873c:	460c      	mov	r4, r1
 800873e:	6831      	ldr	r1, [r6, #0]
 8008740:	4605      	mov	r5, r0
 8008742:	b911      	cbnz	r1, 800874a <sbrk_aligned+0x12>
 8008744:	f000 f88c 	bl	8008860 <_sbrk_r>
 8008748:	6030      	str	r0, [r6, #0]
 800874a:	4621      	mov	r1, r4
 800874c:	4628      	mov	r0, r5
 800874e:	f000 f887 	bl	8008860 <_sbrk_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d00a      	beq.n	800876c <sbrk_aligned+0x34>
 8008756:	1cc4      	adds	r4, r0, #3
 8008758:	f024 0403 	bic.w	r4, r4, #3
 800875c:	42a0      	cmp	r0, r4
 800875e:	d007      	beq.n	8008770 <sbrk_aligned+0x38>
 8008760:	1a21      	subs	r1, r4, r0
 8008762:	4628      	mov	r0, r5
 8008764:	f000 f87c 	bl	8008860 <_sbrk_r>
 8008768:	3001      	adds	r0, #1
 800876a:	d101      	bne.n	8008770 <sbrk_aligned+0x38>
 800876c:	f04f 34ff 	mov.w	r4, #4294967295
 8008770:	4620      	mov	r0, r4
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	2407f55c 	.word	0x2407f55c

08008778 <_malloc_r>:
 8008778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800877c:	1ccd      	adds	r5, r1, #3
 800877e:	f025 0503 	bic.w	r5, r5, #3
 8008782:	3508      	adds	r5, #8
 8008784:	2d0c      	cmp	r5, #12
 8008786:	bf38      	it	cc
 8008788:	250c      	movcc	r5, #12
 800878a:	2d00      	cmp	r5, #0
 800878c:	4607      	mov	r7, r0
 800878e:	db01      	blt.n	8008794 <_malloc_r+0x1c>
 8008790:	42a9      	cmp	r1, r5
 8008792:	d905      	bls.n	80087a0 <_malloc_r+0x28>
 8008794:	230c      	movs	r3, #12
 8008796:	603b      	str	r3, [r7, #0]
 8008798:	2600      	movs	r6, #0
 800879a:	4630      	mov	r0, r6
 800879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a0:	4e2e      	ldr	r6, [pc, #184]	; (800885c <_malloc_r+0xe4>)
 80087a2:	f000 f8f5 	bl	8008990 <__malloc_lock>
 80087a6:	6833      	ldr	r3, [r6, #0]
 80087a8:	461c      	mov	r4, r3
 80087aa:	bb34      	cbnz	r4, 80087fa <_malloc_r+0x82>
 80087ac:	4629      	mov	r1, r5
 80087ae:	4638      	mov	r0, r7
 80087b0:	f7ff ffc2 	bl	8008738 <sbrk_aligned>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	4604      	mov	r4, r0
 80087b8:	d14d      	bne.n	8008856 <_malloc_r+0xde>
 80087ba:	6834      	ldr	r4, [r6, #0]
 80087bc:	4626      	mov	r6, r4
 80087be:	2e00      	cmp	r6, #0
 80087c0:	d140      	bne.n	8008844 <_malloc_r+0xcc>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	4631      	mov	r1, r6
 80087c6:	4638      	mov	r0, r7
 80087c8:	eb04 0803 	add.w	r8, r4, r3
 80087cc:	f000 f848 	bl	8008860 <_sbrk_r>
 80087d0:	4580      	cmp	r8, r0
 80087d2:	d13a      	bne.n	800884a <_malloc_r+0xd2>
 80087d4:	6821      	ldr	r1, [r4, #0]
 80087d6:	3503      	adds	r5, #3
 80087d8:	1a6d      	subs	r5, r5, r1
 80087da:	f025 0503 	bic.w	r5, r5, #3
 80087de:	3508      	adds	r5, #8
 80087e0:	2d0c      	cmp	r5, #12
 80087e2:	bf38      	it	cc
 80087e4:	250c      	movcc	r5, #12
 80087e6:	4629      	mov	r1, r5
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff ffa5 	bl	8008738 <sbrk_aligned>
 80087ee:	3001      	adds	r0, #1
 80087f0:	d02b      	beq.n	800884a <_malloc_r+0xd2>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	442b      	add	r3, r5
 80087f6:	6023      	str	r3, [r4, #0]
 80087f8:	e00e      	b.n	8008818 <_malloc_r+0xa0>
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	1b52      	subs	r2, r2, r5
 80087fe:	d41e      	bmi.n	800883e <_malloc_r+0xc6>
 8008800:	2a0b      	cmp	r2, #11
 8008802:	d916      	bls.n	8008832 <_malloc_r+0xba>
 8008804:	1961      	adds	r1, r4, r5
 8008806:	42a3      	cmp	r3, r4
 8008808:	6025      	str	r5, [r4, #0]
 800880a:	bf18      	it	ne
 800880c:	6059      	strne	r1, [r3, #4]
 800880e:	6863      	ldr	r3, [r4, #4]
 8008810:	bf08      	it	eq
 8008812:	6031      	streq	r1, [r6, #0]
 8008814:	5162      	str	r2, [r4, r5]
 8008816:	604b      	str	r3, [r1, #4]
 8008818:	4638      	mov	r0, r7
 800881a:	f104 060b 	add.w	r6, r4, #11
 800881e:	f000 f8bd 	bl	800899c <__malloc_unlock>
 8008822:	f026 0607 	bic.w	r6, r6, #7
 8008826:	1d23      	adds	r3, r4, #4
 8008828:	1af2      	subs	r2, r6, r3
 800882a:	d0b6      	beq.n	800879a <_malloc_r+0x22>
 800882c:	1b9b      	subs	r3, r3, r6
 800882e:	50a3      	str	r3, [r4, r2]
 8008830:	e7b3      	b.n	800879a <_malloc_r+0x22>
 8008832:	6862      	ldr	r2, [r4, #4]
 8008834:	42a3      	cmp	r3, r4
 8008836:	bf0c      	ite	eq
 8008838:	6032      	streq	r2, [r6, #0]
 800883a:	605a      	strne	r2, [r3, #4]
 800883c:	e7ec      	b.n	8008818 <_malloc_r+0xa0>
 800883e:	4623      	mov	r3, r4
 8008840:	6864      	ldr	r4, [r4, #4]
 8008842:	e7b2      	b.n	80087aa <_malloc_r+0x32>
 8008844:	4634      	mov	r4, r6
 8008846:	6876      	ldr	r6, [r6, #4]
 8008848:	e7b9      	b.n	80087be <_malloc_r+0x46>
 800884a:	230c      	movs	r3, #12
 800884c:	603b      	str	r3, [r7, #0]
 800884e:	4638      	mov	r0, r7
 8008850:	f000 f8a4 	bl	800899c <__malloc_unlock>
 8008854:	e7a1      	b.n	800879a <_malloc_r+0x22>
 8008856:	6025      	str	r5, [r4, #0]
 8008858:	e7de      	b.n	8008818 <_malloc_r+0xa0>
 800885a:	bf00      	nop
 800885c:	2407f558 	.word	0x2407f558

08008860 <_sbrk_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4d06      	ldr	r5, [pc, #24]	; (800887c <_sbrk_r+0x1c>)
 8008864:	2300      	movs	r3, #0
 8008866:	4604      	mov	r4, r0
 8008868:	4608      	mov	r0, r1
 800886a:	602b      	str	r3, [r5, #0]
 800886c:	f000 f978 	bl	8008b60 <_sbrk>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_sbrk_r+0x1a>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_sbrk_r+0x1a>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	2407f560 	.word	0x2407f560

08008880 <__sread>:
 8008880:	b510      	push	{r4, lr}
 8008882:	460c      	mov	r4, r1
 8008884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008888:	f000 f88e 	bl	80089a8 <_read_r>
 800888c:	2800      	cmp	r0, #0
 800888e:	bfab      	itete	ge
 8008890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008892:	89a3      	ldrhlt	r3, [r4, #12]
 8008894:	181b      	addge	r3, r3, r0
 8008896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800889a:	bfac      	ite	ge
 800889c:	6563      	strge	r3, [r4, #84]	; 0x54
 800889e:	81a3      	strhlt	r3, [r4, #12]
 80088a0:	bd10      	pop	{r4, pc}

080088a2 <__swrite>:
 80088a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a6:	461f      	mov	r7, r3
 80088a8:	898b      	ldrh	r3, [r1, #12]
 80088aa:	05db      	lsls	r3, r3, #23
 80088ac:	4605      	mov	r5, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	4616      	mov	r6, r2
 80088b2:	d505      	bpl.n	80088c0 <__swrite+0x1e>
 80088b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b8:	2302      	movs	r3, #2
 80088ba:	2200      	movs	r2, #0
 80088bc:	f000 f856 	bl	800896c <_lseek_r>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ca:	81a3      	strh	r3, [r4, #12]
 80088cc:	4632      	mov	r2, r6
 80088ce:	463b      	mov	r3, r7
 80088d0:	4628      	mov	r0, r5
 80088d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088d6:	f7fa bd5b 	b.w	8003390 <_write_r>

080088da <__sseek>:
 80088da:	b510      	push	{r4, lr}
 80088dc:	460c      	mov	r4, r1
 80088de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e2:	f000 f843 	bl	800896c <_lseek_r>
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	bf15      	itete	ne
 80088ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80088ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088f6:	81a3      	strheq	r3, [r4, #12]
 80088f8:	bf18      	it	ne
 80088fa:	81a3      	strhne	r3, [r4, #12]
 80088fc:	bd10      	pop	{r4, pc}

080088fe <__sclose>:
 80088fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008902:	f000 b801 	b.w	8008908 <_close_r>
	...

08008908 <_close_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4d06      	ldr	r5, [pc, #24]	; (8008924 <_close_r+0x1c>)
 800890c:	2300      	movs	r3, #0
 800890e:	4604      	mov	r4, r0
 8008910:	4608      	mov	r0, r1
 8008912:	602b      	str	r3, [r5, #0]
 8008914:	f000 f8fe 	bl	8008b14 <_close>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d102      	bne.n	8008922 <_close_r+0x1a>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	b103      	cbz	r3, 8008922 <_close_r+0x1a>
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	2407f560 	.word	0x2407f560

08008928 <_fstat_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4d07      	ldr	r5, [pc, #28]	; (8008948 <_fstat_r+0x20>)
 800892c:	2300      	movs	r3, #0
 800892e:	4604      	mov	r4, r0
 8008930:	4608      	mov	r0, r1
 8008932:	4611      	mov	r1, r2
 8008934:	602b      	str	r3, [r5, #0]
 8008936:	f000 f958 	bl	8008bea <_fstat>
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	d102      	bne.n	8008944 <_fstat_r+0x1c>
 800893e:	682b      	ldr	r3, [r5, #0]
 8008940:	b103      	cbz	r3, 8008944 <_fstat_r+0x1c>
 8008942:	6023      	str	r3, [r4, #0]
 8008944:	bd38      	pop	{r3, r4, r5, pc}
 8008946:	bf00      	nop
 8008948:	2407f560 	.word	0x2407f560

0800894c <_isatty_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4d06      	ldr	r5, [pc, #24]	; (8008968 <_isatty_r+0x1c>)
 8008950:	2300      	movs	r3, #0
 8008952:	4604      	mov	r4, r0
 8008954:	4608      	mov	r0, r1
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	f000 f955 	bl	8008c06 <_isatty>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_isatty_r+0x1a>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_isatty_r+0x1a>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	2407f560 	.word	0x2407f560

0800896c <_lseek_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4d07      	ldr	r5, [pc, #28]	; (800898c <_lseek_r+0x20>)
 8008970:	4604      	mov	r4, r0
 8008972:	4608      	mov	r0, r1
 8008974:	4611      	mov	r1, r2
 8008976:	2200      	movs	r2, #0
 8008978:	602a      	str	r2, [r5, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	f000 f8bb 	bl	8008af6 <_lseek>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	d102      	bne.n	800898a <_lseek_r+0x1e>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	b103      	cbz	r3, 800898a <_lseek_r+0x1e>
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	2407f560 	.word	0x2407f560

08008990 <__malloc_lock>:
 8008990:	4801      	ldr	r0, [pc, #4]	; (8008998 <__malloc_lock+0x8>)
 8008992:	f7ff be1d 	b.w	80085d0 <__retarget_lock_acquire_recursive>
 8008996:	bf00      	nop
 8008998:	2407f554 	.word	0x2407f554

0800899c <__malloc_unlock>:
 800899c:	4801      	ldr	r0, [pc, #4]	; (80089a4 <__malloc_unlock+0x8>)
 800899e:	f7ff be18 	b.w	80085d2 <__retarget_lock_release_recursive>
 80089a2:	bf00      	nop
 80089a4:	2407f554 	.word	0x2407f554

080089a8 <_read_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d07      	ldr	r5, [pc, #28]	; (80089c8 <_read_r+0x20>)
 80089ac:	4604      	mov	r4, r0
 80089ae:	4608      	mov	r0, r1
 80089b0:	4611      	mov	r1, r2
 80089b2:	2200      	movs	r2, #0
 80089b4:	602a      	str	r2, [r5, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	f000 f845 	bl	8008a46 <_read>
 80089bc:	1c43      	adds	r3, r0, #1
 80089be:	d102      	bne.n	80089c6 <_read_r+0x1e>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	b103      	cbz	r3, 80089c6 <_read_r+0x1e>
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	2407f560 	.word	0x2407f560

080089cc <findslot>:
 80089cc:	4b0a      	ldr	r3, [pc, #40]	; (80089f8 <findslot+0x2c>)
 80089ce:	b510      	push	{r4, lr}
 80089d0:	4604      	mov	r4, r0
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	b118      	cbz	r0, 80089de <findslot+0x12>
 80089d6:	6983      	ldr	r3, [r0, #24]
 80089d8:	b90b      	cbnz	r3, 80089de <findslot+0x12>
 80089da:	f7ff fd5b 	bl	8008494 <__sinit>
 80089de:	2c13      	cmp	r4, #19
 80089e0:	d807      	bhi.n	80089f2 <findslot+0x26>
 80089e2:	4806      	ldr	r0, [pc, #24]	; (80089fc <findslot+0x30>)
 80089e4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80089e8:	3201      	adds	r2, #1
 80089ea:	d002      	beq.n	80089f2 <findslot+0x26>
 80089ec:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80089f0:	bd10      	pop	{r4, pc}
 80089f2:	2000      	movs	r0, #0
 80089f4:	e7fc      	b.n	80089f0 <findslot+0x24>
 80089f6:	bf00      	nop
 80089f8:	2400001c 	.word	0x2400001c
 80089fc:	2407f568 	.word	0x2407f568

08008a00 <error>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	4604      	mov	r4, r0
 8008a04:	f000 f91c 	bl	8008c40 <__errno>
 8008a08:	2613      	movs	r6, #19
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	2700      	movs	r7, #0
 8008a0e:	4630      	mov	r0, r6
 8008a10:	4639      	mov	r1, r7
 8008a12:	beab      	bkpt	0x00ab
 8008a14:	4606      	mov	r6, r0
 8008a16:	602e      	str	r6, [r5, #0]
 8008a18:	4620      	mov	r0, r4
 8008a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a1c <checkerror>:
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d101      	bne.n	8008a24 <checkerror+0x8>
 8008a20:	f7ff bfee 	b.w	8008a00 <error>
 8008a24:	4770      	bx	lr

08008a26 <_swiread>:
 8008a26:	b530      	push	{r4, r5, lr}
 8008a28:	b085      	sub	sp, #20
 8008a2a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8008a2e:	9203      	str	r2, [sp, #12]
 8008a30:	2406      	movs	r4, #6
 8008a32:	ad01      	add	r5, sp, #4
 8008a34:	4620      	mov	r0, r4
 8008a36:	4629      	mov	r1, r5
 8008a38:	beab      	bkpt	0x00ab
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f7ff ffed 	bl	8008a1c <checkerror>
 8008a42:	b005      	add	sp, #20
 8008a44:	bd30      	pop	{r4, r5, pc}

08008a46 <_read>:
 8008a46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a48:	4615      	mov	r5, r2
 8008a4a:	9101      	str	r1, [sp, #4]
 8008a4c:	f7ff ffbe 	bl	80089cc <findslot>
 8008a50:	9901      	ldr	r1, [sp, #4]
 8008a52:	4604      	mov	r4, r0
 8008a54:	b938      	cbnz	r0, 8008a66 <_read+0x20>
 8008a56:	f000 f8f3 	bl	8008c40 <__errno>
 8008a5a:	2309      	movs	r3, #9
 8008a5c:	6003      	str	r3, [r0, #0]
 8008a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a62:	b003      	add	sp, #12
 8008a64:	bd30      	pop	{r4, r5, pc}
 8008a66:	6800      	ldr	r0, [r0, #0]
 8008a68:	462a      	mov	r2, r5
 8008a6a:	f7ff ffdc 	bl	8008a26 <_swiread>
 8008a6e:	1c43      	adds	r3, r0, #1
 8008a70:	d0f7      	beq.n	8008a62 <_read+0x1c>
 8008a72:	6863      	ldr	r3, [r4, #4]
 8008a74:	1a2a      	subs	r2, r5, r0
 8008a76:	4413      	add	r3, r2
 8008a78:	6063      	str	r3, [r4, #4]
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	e7f1      	b.n	8008a62 <_read+0x1c>

08008a7e <_swilseek>:
 8008a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a80:	460c      	mov	r4, r1
 8008a82:	4616      	mov	r6, r2
 8008a84:	f7ff ffa2 	bl	80089cc <findslot>
 8008a88:	4605      	mov	r5, r0
 8008a8a:	b940      	cbnz	r0, 8008a9e <_swilseek+0x20>
 8008a8c:	f000 f8d8 	bl	8008c40 <__errno>
 8008a90:	2309      	movs	r3, #9
 8008a92:	6003      	str	r3, [r0, #0]
 8008a94:	f04f 34ff 	mov.w	r4, #4294967295
 8008a98:	4620      	mov	r0, r4
 8008a9a:	b003      	add	sp, #12
 8008a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a9e:	2e02      	cmp	r6, #2
 8008aa0:	d903      	bls.n	8008aaa <_swilseek+0x2c>
 8008aa2:	f000 f8cd 	bl	8008c40 <__errno>
 8008aa6:	2316      	movs	r3, #22
 8008aa8:	e7f3      	b.n	8008a92 <_swilseek+0x14>
 8008aaa:	2e01      	cmp	r6, #1
 8008aac:	d112      	bne.n	8008ad4 <_swilseek+0x56>
 8008aae:	6843      	ldr	r3, [r0, #4]
 8008ab0:	18e4      	adds	r4, r4, r3
 8008ab2:	d4f6      	bmi.n	8008aa2 <_swilseek+0x24>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	260a      	movs	r6, #10
 8008ab8:	e9cd 3400 	strd	r3, r4, [sp]
 8008abc:	466f      	mov	r7, sp
 8008abe:	4630      	mov	r0, r6
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	beab      	bkpt	0x00ab
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f7ff ffa8 	bl	8008a1c <checkerror>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	dbe1      	blt.n	8008a94 <_swilseek+0x16>
 8008ad0:	606c      	str	r4, [r5, #4]
 8008ad2:	e7e1      	b.n	8008a98 <_swilseek+0x1a>
 8008ad4:	2e02      	cmp	r6, #2
 8008ad6:	d1ed      	bne.n	8008ab4 <_swilseek+0x36>
 8008ad8:	6803      	ldr	r3, [r0, #0]
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	260c      	movs	r6, #12
 8008ade:	466f      	mov	r7, sp
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	beab      	bkpt	0x00ab
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff ff97 	bl	8008a1c <checkerror>
 8008aee:	1c43      	adds	r3, r0, #1
 8008af0:	d0d0      	beq.n	8008a94 <_swilseek+0x16>
 8008af2:	4404      	add	r4, r0
 8008af4:	e7de      	b.n	8008ab4 <_swilseek+0x36>

08008af6 <_lseek>:
 8008af6:	f7ff bfc2 	b.w	8008a7e <_swilseek>

08008afa <_swiclose>:
 8008afa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008afc:	2402      	movs	r4, #2
 8008afe:	9001      	str	r0, [sp, #4]
 8008b00:	ad01      	add	r5, sp, #4
 8008b02:	4620      	mov	r0, r4
 8008b04:	4629      	mov	r1, r5
 8008b06:	beab      	bkpt	0x00ab
 8008b08:	4604      	mov	r4, r0
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7ff ff86 	bl	8008a1c <checkerror>
 8008b10:	b003      	add	sp, #12
 8008b12:	bd30      	pop	{r4, r5, pc}

08008b14 <_close>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4605      	mov	r5, r0
 8008b18:	f7ff ff58 	bl	80089cc <findslot>
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	b930      	cbnz	r0, 8008b2e <_close+0x1a>
 8008b20:	f000 f88e 	bl	8008c40 <__errno>
 8008b24:	2309      	movs	r3, #9
 8008b26:	6003      	str	r3, [r0, #0]
 8008b28:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2c:	bd38      	pop	{r3, r4, r5, pc}
 8008b2e:	3d01      	subs	r5, #1
 8008b30:	2d01      	cmp	r5, #1
 8008b32:	d809      	bhi.n	8008b48 <_close+0x34>
 8008b34:	4b09      	ldr	r3, [pc, #36]	; (8008b5c <_close+0x48>)
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d104      	bne.n	8008b48 <_close+0x34>
 8008b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b42:	6003      	str	r3, [r0, #0]
 8008b44:	2000      	movs	r0, #0
 8008b46:	e7f1      	b.n	8008b2c <_close+0x18>
 8008b48:	6820      	ldr	r0, [r4, #0]
 8008b4a:	f7ff ffd6 	bl	8008afa <_swiclose>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d1ec      	bne.n	8008b2c <_close+0x18>
 8008b52:	f04f 33ff 	mov.w	r3, #4294967295
 8008b56:	6023      	str	r3, [r4, #0]
 8008b58:	e7e8      	b.n	8008b2c <_close+0x18>
 8008b5a:	bf00      	nop
 8008b5c:	2407f568 	.word	0x2407f568

08008b60 <_sbrk>:
 8008b60:	4a0d      	ldr	r2, [pc, #52]	; (8008b98 <_sbrk+0x38>)
 8008b62:	6811      	ldr	r1, [r2, #0]
 8008b64:	b510      	push	{r4, lr}
 8008b66:	4603      	mov	r3, r0
 8008b68:	b909      	cbnz	r1, 8008b6e <_sbrk+0xe>
 8008b6a:	490c      	ldr	r1, [pc, #48]	; (8008b9c <_sbrk+0x3c>)
 8008b6c:	6011      	str	r1, [r2, #0]
 8008b6e:	6810      	ldr	r0, [r2, #0]
 8008b70:	4669      	mov	r1, sp
 8008b72:	4403      	add	r3, r0
 8008b74:	428b      	cmp	r3, r1
 8008b76:	d806      	bhi.n	8008b86 <_sbrk+0x26>
 8008b78:	4909      	ldr	r1, [pc, #36]	; (8008ba0 <_sbrk+0x40>)
 8008b7a:	4c0a      	ldr	r4, [pc, #40]	; (8008ba4 <_sbrk+0x44>)
 8008b7c:	6809      	ldr	r1, [r1, #0]
 8008b7e:	42a1      	cmp	r1, r4
 8008b80:	d008      	beq.n	8008b94 <_sbrk+0x34>
 8008b82:	428b      	cmp	r3, r1
 8008b84:	d906      	bls.n	8008b94 <_sbrk+0x34>
 8008b86:	f000 f85b 	bl	8008c40 <__errno>
 8008b8a:	230c      	movs	r3, #12
 8008b8c:	6003      	str	r3, [r0, #0]
 8008b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b92:	bd10      	pop	{r4, pc}
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	e7fc      	b.n	8008b92 <_sbrk+0x32>
 8008b98:	2407f564 	.word	0x2407f564
 8008b9c:	2407f608 	.word	0x2407f608
 8008ba0:	24000080 	.word	0x24000080
 8008ba4:	cafedead 	.word	0xcafedead

08008ba8 <_swistat>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	460c      	mov	r4, r1
 8008bac:	f7ff ff0e 	bl	80089cc <findslot>
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	b930      	cbnz	r0, 8008bc2 <_swistat+0x1a>
 8008bb4:	f000 f844 	bl	8008c40 <__errno>
 8008bb8:	2309      	movs	r3, #9
 8008bba:	6003      	str	r3, [r0, #0]
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	bd70      	pop	{r4, r5, r6, pc}
 8008bc2:	6863      	ldr	r3, [r4, #4]
 8008bc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008bc8:	6063      	str	r3, [r4, #4]
 8008bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bce:	64a3      	str	r3, [r4, #72]	; 0x48
 8008bd0:	260c      	movs	r6, #12
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	beab      	bkpt	0x00ab
 8008bd8:	4605      	mov	r5, r0
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f7ff ff1e 	bl	8008a1c <checkerror>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	bf1c      	itt	ne
 8008be4:	6120      	strne	r0, [r4, #16]
 8008be6:	2000      	movne	r0, #0
 8008be8:	e7ea      	b.n	8008bc0 <_swistat+0x18>

08008bea <_fstat>:
 8008bea:	460b      	mov	r3, r1
 8008bec:	b510      	push	{r4, lr}
 8008bee:	2100      	movs	r1, #0
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	2258      	movs	r2, #88	; 0x58
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff f9f5 	bl	8007fe4 <memset>
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c02:	f7ff bfd1 	b.w	8008ba8 <_swistat>

08008c06 <_isatty>:
 8008c06:	b570      	push	{r4, r5, r6, lr}
 8008c08:	f7ff fee0 	bl	80089cc <findslot>
 8008c0c:	2509      	movs	r5, #9
 8008c0e:	4604      	mov	r4, r0
 8008c10:	b920      	cbnz	r0, 8008c1c <_isatty+0x16>
 8008c12:	f000 f815 	bl	8008c40 <__errno>
 8008c16:	6005      	str	r5, [r0, #0]
 8008c18:	4620      	mov	r0, r4
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	4621      	mov	r1, r4
 8008c20:	beab      	bkpt	0x00ab
 8008c22:	4604      	mov	r4, r0
 8008c24:	2c01      	cmp	r4, #1
 8008c26:	d0f7      	beq.n	8008c18 <_isatty+0x12>
 8008c28:	f000 f80a 	bl	8008c40 <__errno>
 8008c2c:	2400      	movs	r4, #0
 8008c2e:	4605      	mov	r5, r0
 8008c30:	2613      	movs	r6, #19
 8008c32:	4630      	mov	r0, r6
 8008c34:	4621      	mov	r1, r4
 8008c36:	beab      	bkpt	0x00ab
 8008c38:	4606      	mov	r6, r0
 8008c3a:	602e      	str	r6, [r5, #0]
 8008c3c:	e7ec      	b.n	8008c18 <_isatty+0x12>
	...

08008c40 <__errno>:
 8008c40:	4b01      	ldr	r3, [pc, #4]	; (8008c48 <__errno+0x8>)
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	2400001c 	.word	0x2400001c

08008c4c <_init>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr

08008c58 <_fini>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr
