
FreeRTOS_3_LEDs_TickHook.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08008b7c  08008b7c  00018b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008d64  08008d64  00018d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  24000000  08008d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0007f7e4  24000020  08008d88  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2407f804  08008d88  0002f804  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   000215a1  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003ace  00000000  00000000  000415ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001b28  00000000  00000000  000450c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001960  00000000  00000000  00046be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003898b  00000000  00000000  00048548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f003  00000000  00000000  00080ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00175fda  00000000  00000000  0009fed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00215eb0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007414  00000000  00000000  00215f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000020 	.word	0x24000020
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008b64 	.word	0x08008b64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000024 	.word	0x24000024
 80002dc:	08008b64 	.word	0x08008b64

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	2400723c 	.word	0x2400723c

08000374 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f103 0208 	add.w	r2, r3, #8
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f103 0208 	add.w	r2, r3, #8
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f103 0208 	add.w	r2, r3, #8
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80003ce:	b480      	push	{r7}
 80003d0:	b085      	sub	sp, #20
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	683a      	ldr	r2, [r7, #0]
 80003f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	1c5a      	adds	r2, r3, #1
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	601a      	str	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000416:	b480      	push	{r7}
 8000418:	b085      	sub	sp, #20
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
 800041e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800042c:	d103      	bne.n	8000436 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	691b      	ldr	r3, [r3, #16]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	e00c      	b.n	8000450 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3308      	adds	r3, #8
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	e002      	b.n	8000444 <vListInsert+0x2e>
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	429a      	cmp	r2, r3
 800044e:	d2f6      	bcs.n	800043e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	685a      	ldr	r2, [r3, #4]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	683a      	ldr	r2, [r7, #0]
 800046a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	691b      	ldr	r3, [r3, #16]
 8000494:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	6892      	ldr	r2, [r2, #8]
 800049e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	6852      	ldr	r2, [r2, #4]
 80004a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d103      	bne.n	80004bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	689a      	ldr	r2, [r3, #8]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	1e5a      	subs	r2, r3, #1
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	4613      	mov	r3, r2
 80004ea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 ffa9 	bl	8001448 <pvPortMalloc>
 80004f6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00e      	beq.n	800051c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80004fe:	205c      	movs	r0, #92	; 0x5c
 8000500:	f000 ffa2 	bl	8001448 <pvPortMalloc>
 8000504:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	631a      	str	r2, [r3, #48]	; 0x30
 8000512:	e005      	b.n	8000520 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000514:	6978      	ldr	r0, [r7, #20]
 8000516:	f001 f87d 	bl	8001614 <vPortFree>
 800051a:	e001      	b.n	8000520 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d013      	beq.n	800054e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000526:	88fa      	ldrh	r2, [r7, #6]
 8000528:	2300      	movs	r3, #0
 800052a:	9303      	str	r3, [sp, #12]
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	9302      	str	r3, [sp, #8]
 8000530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	68b9      	ldr	r1, [r7, #8]
 800053c:	68f8      	ldr	r0, [r7, #12]
 800053e:	f000 f80e 	bl	800055e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000542:	69f8      	ldr	r0, [r7, #28]
 8000544:	f000 f8a4 	bl	8000690 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000548:	2301      	movs	r3, #1
 800054a:	61bb      	str	r3, [r7, #24]
 800054c:	e002      	b.n	8000554 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000554:	69bb      	ldr	r3, [r7, #24]
    }
 8000556:	4618      	mov	r0, r3
 8000558:	3720      	adds	r7, #32
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b088      	sub	sp, #32
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800056e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	461a      	mov	r2, r3
 8000576:	21a5      	movs	r1, #165	; 0xa5
 8000578:	f008 faec 	bl	8008b54 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000586:	440b      	add	r3, r1
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	f023 0307 	bic.w	r3, r3, #7
 8000594:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00c      	beq.n	80005ba <prvInitialiseNewTask+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	b672      	cpsid	i
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	b662      	cpsie	i
 80005b4:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b6:	bf00      	nop
 80005b8:	e7fe      	b.n	80005b8 <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d01f      	beq.n	8000600 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
 80005c4:	e012      	b.n	80005ec <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	4413      	add	r3, r2
 80005cc:	7819      	ldrb	r1, [r3, #0]
 80005ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	4413      	add	r3, r2
 80005d4:	3334      	adds	r3, #52	; 0x34
 80005d6:	460a      	mov	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3301      	adds	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d9e9      	bls.n	80005c6 <prvInitialiseNewTask+0x68>
 80005f2:	e000      	b.n	80005f6 <prvInitialiseNewTask+0x98>
            {
                break;
 80005f4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80005f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80005fe:	e003      	b.n	8000608 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800060a:	2b06      	cmp	r3, #6
 800060c:	d901      	bls.n	8000612 <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800060e:	2306      	movs	r3, #6
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800061c:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000620:	2200      	movs	r2, #0
 8000622:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000626:	3304      	adds	r3, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fec3 	bl	80003b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000630:	3318      	adds	r3, #24
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff febe 	bl	80003b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800063c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000640:	f1c3 0207 	rsb	r2, r3, #7
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800064a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800064e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000650:	3354      	adds	r3, #84	; 0x54
 8000652:	2204      	movs	r2, #4
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f008 fa7c 	bl	8008b54 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065e:	3358      	adds	r3, #88	; 0x58
 8000660:	2201      	movs	r2, #1
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f008 fa75 	bl	8008b54 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	69b8      	ldr	r0, [r7, #24]
 8000670:	f000 fcaa 	bl	8000fc8 <pxPortInitialiseStack>
 8000674:	4602      	mov	r2, r0
 8000676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000678:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000684:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000698:	f000 fda2 	bl	80011e0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <prvAddNewTaskToReadyList+0xfc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a3a      	ldr	r2, [pc, #232]	; (800078c <prvAddNewTaskToReadyList+0xfc>)
 80006a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <prvAddNewTaskToReadyList+0x100>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d109      	bne.n	80006c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80006ae:	4a38      	ldr	r2, [pc, #224]	; (8000790 <prvAddNewTaskToReadyList+0x100>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80006b4:	4b35      	ldr	r3, [pc, #212]	; (800078c <prvAddNewTaskToReadyList+0xfc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d110      	bne.n	80006de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80006bc:	f000 fb72 	bl	8000da4 <prvInitialiseTaskLists>
 80006c0:	e00d      	b.n	80006de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <prvAddNewTaskToReadyList+0x104>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <prvAddNewTaskToReadyList+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d802      	bhi.n	80006de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80006d8:	4a2d      	ldr	r2, [pc, #180]	; (8000790 <prvAddNewTaskToReadyList+0x100>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <prvAddNewTaskToReadyList+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a2c      	ldr	r2, [pc, #176]	; (8000798 <prvAddNewTaskToReadyList+0x108>)
 80006e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80006e8:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <prvAddNewTaskToReadyList+0x108>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d016      	beq.n	8000724 <prvAddNewTaskToReadyList+0x94>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 f9a1 	bl	8003a40 <SEGGER_SYSVIEW_OnTaskCreate>
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	461d      	mov	r5, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	461c      	mov	r4, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	1ae3      	subs	r3, r4, r3
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	462b      	mov	r3, r5
 8000720:	f001 f94a 	bl	80019b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fa0e 	bl	8003b48 <SEGGER_SYSVIEW_OnTaskStartReady>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000730:	2201      	movs	r2, #1
 8000732:	409a      	lsls	r2, r3
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <prvAddNewTaskToReadyList+0x10c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4313      	orrs	r3, r2
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <prvAddNewTaskToReadyList+0x10c>)
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <prvAddNewTaskToReadyList+0x110>)
 800074c:	441a      	add	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3304      	adds	r3, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4610      	mov	r0, r2
 8000756:	f7ff fe3a 	bl	80003ce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800075a:	f000 fd75 	bl	8001248 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <prvAddNewTaskToReadyList+0x104>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00e      	beq.n	8000784 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <prvAddNewTaskToReadyList+0x100>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000770:	429a      	cmp	r2, r3
 8000772:	d207      	bcs.n	8000784 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <prvAddNewTaskToReadyList+0x114>)
 8000776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	f3bf 8f4f 	dsb	sy
 8000780:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bdb0      	pop	{r4, r5, r7, pc}
 800078c:	2400013c 	.word	0x2400013c
 8000790:	2400003c 	.word	0x2400003c
 8000794:	24000148 	.word	0x24000148
 8000798:	24000158 	.word	0x24000158
 800079c:	24000144 	.word	0x24000144
 80007a0:	24000040 	.word	0x24000040
 80007a4:	e000ed04 	.word	0xe000ed04

080007a8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10c      	bne.n	80007d6 <xTaskDelayUntil+0x2e>
        __asm volatile
 80007bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c0:	b672      	cpsid	i
 80007c2:	f383 8811 	msr	BASEPRI, r3
 80007c6:	f3bf 8f6f 	isb	sy
 80007ca:	f3bf 8f4f 	dsb	sy
 80007ce:	b662      	cpsie	i
 80007d0:	617b      	str	r3, [r7, #20]
    }
 80007d2:	bf00      	nop
 80007d4:	e7fe      	b.n	80007d4 <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d10c      	bne.n	80007f6 <xTaskDelayUntil+0x4e>
        __asm volatile
 80007dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007e0:	b672      	cpsid	i
 80007e2:	f383 8811 	msr	BASEPRI, r3
 80007e6:	f3bf 8f6f 	isb	sy
 80007ea:	f3bf 8f4f 	dsb	sy
 80007ee:	b662      	cpsie	i
 80007f0:	613b      	str	r3, [r7, #16]
    }
 80007f2:	bf00      	nop
 80007f4:	e7fe      	b.n	80007f4 <xTaskDelayUntil+0x4c>
        configASSERT( uxSchedulerSuspended == 0 );
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <xTaskDelayUntil+0x104>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d00c      	beq.n	8000818 <xTaskDelayUntil+0x70>
        __asm volatile
 80007fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000802:	b672      	cpsid	i
 8000804:	f383 8811 	msr	BASEPRI, r3
 8000808:	f3bf 8f6f 	isb	sy
 800080c:	f3bf 8f4f 	dsb	sy
 8000810:	b662      	cpsie	i
 8000812:	60fb      	str	r3, [r7, #12]
    }
 8000814:	bf00      	nop
 8000816:	e7fe      	b.n	8000816 <xTaskDelayUntil+0x6e>

        vTaskSuspendAll();
 8000818:	f000 f8ae 	bl	8000978 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <xTaskDelayUntil+0x108>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	4413      	add	r3, r2
 800082a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6a3a      	ldr	r2, [r7, #32]
 8000832:	429a      	cmp	r2, r3
 8000834:	d20b      	bcs.n	800084e <xTaskDelayUntil+0xa6>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	69fa      	ldr	r2, [r7, #28]
 800083c:	429a      	cmp	r2, r3
 800083e:	d211      	bcs.n	8000864 <xTaskDelayUntil+0xbc>
 8000840:	69fa      	ldr	r2, [r7, #28]
 8000842:	6a3b      	ldr	r3, [r7, #32]
 8000844:	429a      	cmp	r2, r3
 8000846:	d90d      	bls.n	8000864 <xTaskDelayUntil+0xbc>
                {
                    xShouldDelay = pdTRUE;
 8000848:	2301      	movs	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	e00a      	b.n	8000864 <xTaskDelayUntil+0xbc>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	429a      	cmp	r2, r3
 8000856:	d303      	bcc.n	8000860 <xTaskDelayUntil+0xb8>
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	6a3b      	ldr	r3, [r7, #32]
 800085c:	429a      	cmp	r2, r3
 800085e:	d901      	bls.n	8000864 <xTaskDelayUntil+0xbc>
                {
                    xShouldDelay = pdTRUE;
 8000860:	2301      	movs	r3, #1
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69fa      	ldr	r2, [r7, #28]
 8000868:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	2b00      	cmp	r3, #0
 800086e:	d009      	beq.n	8000884 <xTaskDelayUntil+0xdc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8000870:	2024      	movs	r0, #36	; 0x24
 8000872:	f002 fcd1 	bl	8003218 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000876:	69fa      	ldr	r2, [r7, #28]
 8000878:	6a3b      	ldr	r3, [r7, #32]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fb2a 	bl	8000ed8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8000884:	f000 f886 	bl	8000994 <xTaskResumeAll>
 8000888:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d107      	bne.n	80008a0 <xTaskDelayUntil+0xf8>
        {
            portYIELD_WITHIN_API();
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <xTaskDelayUntil+0x10c>)
 8000892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	f3bf 8f4f 	dsb	sy
 800089c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80008a2:	4618      	mov	r0, r3
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	24000164 	.word	0x24000164
 80008b0:	24000140 	.word	0x24000140
 80008b4:	e000ed04 	.word	0xe000ed04

080008b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <vTaskStartScheduler+0xa0>)
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2300      	movs	r3, #0
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	4924      	ldr	r1, [pc, #144]	; (800095c <vTaskStartScheduler+0xa4>)
 80008cc:	4824      	ldr	r0, [pc, #144]	; (8000960 <vTaskStartScheduler+0xa8>)
 80008ce:	f7ff fe05 	bl	80004dc <xTaskCreate>
 80008d2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d126      	bne.n	8000928 <vTaskStartScheduler+0x70>
        __asm volatile
 80008da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008de:	b672      	cpsid	i
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	b662      	cpsie	i
 80008ee:	60bb      	str	r3, [r7, #8]
    }
 80008f0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <vTaskStartScheduler+0xac>)
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <vTaskStartScheduler+0xb0>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <vTaskStartScheduler+0xb4>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <vTaskStartScheduler+0xb8>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <vTaskStartScheduler+0xa0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	d102      	bne.n	8000918 <vTaskStartScheduler+0x60>
 8000912:	f003 f879 	bl	8003a08 <SEGGER_SYSVIEW_OnIdle>
 8000916:	e004      	b.n	8000922 <vTaskStartScheduler+0x6a>
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <vTaskStartScheduler+0xb8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f003 f8d1 	bl	8003ac4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000922:	f000 fbdf 	bl	80010e4 <xPortStartScheduler>
 8000926:	e010      	b.n	800094a <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092e:	d10c      	bne.n	800094a <vTaskStartScheduler+0x92>
        __asm volatile
 8000930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000934:	b672      	cpsid	i
 8000936:	f383 8811 	msr	BASEPRI, r3
 800093a:	f3bf 8f6f 	isb	sy
 800093e:	f3bf 8f4f 	dsb	sy
 8000942:	b662      	cpsie	i
 8000944:	607b      	str	r3, [r7, #4]
    }
 8000946:	bf00      	nop
 8000948:	e7fe      	b.n	8000948 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <vTaskStartScheduler+0xbc>)
 800094c:	681b      	ldr	r3, [r3, #0]
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	24000160 	.word	0x24000160
 800095c:	08008b7c 	.word	0x08008b7c
 8000960:	08000d71 	.word	0x08000d71
 8000964:	2400015c 	.word	0x2400015c
 8000968:	24000148 	.word	0x24000148
 800096c:	24000140 	.word	0x24000140
 8000970:	2400003c 	.word	0x2400003c
 8000974:	24000000 	.word	0x24000000

08000978 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <vTaskSuspendAll+0x18>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	4a03      	ldr	r2, [pc, #12]	; (8000990 <vTaskSuspendAll+0x18>)
 8000984:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	24000164 	.word	0x24000164

08000994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80009a2:	4b44      	ldr	r3, [pc, #272]	; (8000ab4 <xTaskResumeAll+0x120>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10c      	bne.n	80009c4 <xTaskResumeAll+0x30>
        __asm volatile
 80009aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ae:	b672      	cpsid	i
 80009b0:	f383 8811 	msr	BASEPRI, r3
 80009b4:	f3bf 8f6f 	isb	sy
 80009b8:	f3bf 8f4f 	dsb	sy
 80009bc:	b662      	cpsie	i
 80009be:	603b      	str	r3, [r7, #0]
    }
 80009c0:	bf00      	nop
 80009c2:	e7fe      	b.n	80009c2 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80009c4:	f000 fc0c 	bl	80011e0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80009c8:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <xTaskResumeAll+0x120>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	4a39      	ldr	r2, [pc, #228]	; (8000ab4 <xTaskResumeAll+0x120>)
 80009d0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80009d2:	4b38      	ldr	r3, [pc, #224]	; (8000ab4 <xTaskResumeAll+0x120>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d165      	bne.n	8000aa6 <xTaskResumeAll+0x112>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80009da:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <xTaskResumeAll+0x124>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d061      	beq.n	8000aa6 <xTaskResumeAll+0x112>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80009e2:	e032      	b.n	8000a4a <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80009e4:	4b35      	ldr	r3, [pc, #212]	; (8000abc <xTaskResumeAll+0x128>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3318      	adds	r3, #24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fd49 	bl	8000488 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3304      	adds	r3, #4
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fd44 	bl	8000488 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 f8a0 	bl	8003b48 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	409a      	lsls	r2, r3
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <xTaskResumeAll+0x12c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	4a2a      	ldr	r2, [pc, #168]	; (8000ac0 <xTaskResumeAll+0x12c>)
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1e:	4613      	mov	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4413      	add	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <xTaskResumeAll+0x130>)
 8000a28:	441a      	add	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4610      	mov	r0, r2
 8000a32:	f7ff fccc 	bl	80003ce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <xTaskResumeAll+0x134>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d302      	bcc.n	8000a4a <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <xTaskResumeAll+0x138>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <xTaskResumeAll+0x128>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1c8      	bne.n	80009e4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000a58:	f000 fa22 	bl	8000ea0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <xTaskResumeAll+0x13c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d010      	beq.n	8000a8a <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000a68:	f000 f858 	bl	8000b1c <xTaskIncrementTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <xTaskResumeAll+0x138>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f1      	bne.n	8000a68 <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <xTaskResumeAll+0x13c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <xTaskResumeAll+0x138>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d009      	beq.n	8000aa6 <xTaskResumeAll+0x112>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000a92:	2301      	movs	r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <xTaskResumeAll+0x140>)
 8000a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	f3bf 8f4f 	dsb	sy
 8000aa2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000aa6:	f000 fbcf 	bl	8001248 <vPortExitCritical>

    return xAlreadyYielded;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000164 	.word	0x24000164
 8000ab8:	2400013c 	.word	0x2400013c
 8000abc:	240000fc 	.word	0x240000fc
 8000ac0:	24000144 	.word	0x24000144
 8000ac4:	24000040 	.word	0x24000040
 8000ac8:	2400003c 	.word	0x2400003c
 8000acc:	24000150 	.word	0x24000150
 8000ad0:	2400014c 	.word	0x2400014c
 8000ad4:	e000ed04 	.word	0xe000ed04

08000ad8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <xTaskGetTickCount+0x1c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	24000140 	.word	0x24000140

08000af8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000afe:	f000 fc5f 	bl	80013c0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <xTaskGetTickCountFromISR+0x20>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000b0c:	683b      	ldr	r3, [r7, #0]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	24000140 	.word	0x24000140

08000b1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b26:	4b51      	ldr	r3, [pc, #324]	; (8000c6c <xTaskIncrementTick+0x150>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f040 8094 	bne.w	8000c58 <xTaskIncrementTick+0x13c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000b30:	4b4f      	ldr	r3, [pc, #316]	; (8000c70 <xTaskIncrementTick+0x154>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000b38:	4a4d      	ldr	r2, [pc, #308]	; (8000c70 <xTaskIncrementTick+0x154>)
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d122      	bne.n	8000b8a <xTaskIncrementTick+0x6e>
        {
            taskSWITCH_DELAYED_LISTS();
 8000b44:	4b4b      	ldr	r3, [pc, #300]	; (8000c74 <xTaskIncrementTick+0x158>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00c      	beq.n	8000b68 <xTaskIncrementTick+0x4c>
        __asm volatile
 8000b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b52:	b672      	cpsid	i
 8000b54:	f383 8811 	msr	BASEPRI, r3
 8000b58:	f3bf 8f6f 	isb	sy
 8000b5c:	f3bf 8f4f 	dsb	sy
 8000b60:	b662      	cpsie	i
 8000b62:	603b      	str	r3, [r7, #0]
    }
 8000b64:	bf00      	nop
 8000b66:	e7fe      	b.n	8000b66 <xTaskIncrementTick+0x4a>
 8000b68:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <xTaskIncrementTick+0x158>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <xTaskIncrementTick+0x15c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <xTaskIncrementTick+0x158>)
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	4a40      	ldr	r2, [pc, #256]	; (8000c78 <xTaskIncrementTick+0x15c>)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <xTaskIncrementTick+0x160>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a3e      	ldr	r2, [pc, #248]	; (8000c7c <xTaskIncrementTick+0x160>)
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	f000 f98b 	bl	8000ea0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <xTaskIncrementTick+0x164>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d34c      	bcc.n	8000c2e <xTaskIncrementTick+0x112>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b94:	4b37      	ldr	r3, [pc, #220]	; (8000c74 <xTaskIncrementTick+0x158>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d104      	bne.n	8000ba8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b9e:	4b38      	ldr	r3, [pc, #224]	; (8000c80 <xTaskIncrementTick+0x164>)
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	601a      	str	r2, [r3, #0]
                    break;
 8000ba6:	e042      	b.n	8000c2e <xTaskIncrementTick+0x112>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ba8:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <xTaskIncrementTick+0x158>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d203      	bcs.n	8000bc8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000bc0:	4a2f      	ldr	r2, [pc, #188]	; (8000c80 <xTaskIncrementTick+0x164>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000bc6:	e032      	b.n	8000c2e <xTaskIncrementTick+0x112>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	3304      	adds	r3, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc5b 	bl	8000488 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d004      	beq.n	8000be4 <xTaskIncrementTick+0xc8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	3318      	adds	r3, #24
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fc52 	bl	8000488 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 ffae 	bl	8003b48 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <xTaskIncrementTick+0x168>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <xTaskIncrementTick+0x168>)
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4a1f      	ldr	r2, [pc, #124]	; (8000c88 <xTaskIncrementTick+0x16c>)
 8000c0c:	441a      	add	r2, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	3304      	adds	r3, #4
 8000c12:	4619      	mov	r1, r3
 8000c14:	4610      	mov	r0, r2
 8000c16:	f7ff fbda 	bl	80003ce <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <xTaskIncrementTick+0x170>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3b5      	bcc.n	8000b94 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c2c:	e7b2      	b.n	8000b94 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <xTaskIncrementTick+0x170>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c34:	4914      	ldr	r1, [pc, #80]	; (8000c88 <xTaskIncrementTick+0x16c>)
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d901      	bls.n	8000c4a <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 8000c46:	2301      	movs	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <xTaskIncrementTick+0x174>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d007      	beq.n	8000c62 <xTaskIncrementTick+0x146>
                {
                    xSwitchRequired = pdTRUE;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e004      	b.n	8000c62 <xTaskIncrementTick+0x146>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <xTaskIncrementTick+0x178>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <xTaskIncrementTick+0x178>)
 8000c60:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000c62:	697b      	ldr	r3, [r7, #20]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	24000164 	.word	0x24000164
 8000c70:	24000140 	.word	0x24000140
 8000c74:	240000f4 	.word	0x240000f4
 8000c78:	240000f8 	.word	0x240000f8
 8000c7c:	24000154 	.word	0x24000154
 8000c80:	2400015c 	.word	0x2400015c
 8000c84:	24000144 	.word	0x24000144
 8000c88:	24000040 	.word	0x24000040
 8000c8c:	2400003c 	.word	0x2400003c
 8000c90:	24000150 	.word	0x24000150
 8000c94:	2400014c 	.word	0x2400014c

08000c98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <vTaskSwitchContext+0xc0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <vTaskSwitchContext+0xc4>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000cac:	e04f      	b.n	8000d4e <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8000cae:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <vTaskSwitchContext+0xc4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <vTaskSwitchContext+0xc8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	fab3 f383 	clz	r3, r3
 8000cc0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000cc2:	7afb      	ldrb	r3, [r7, #11]
 8000cc4:	f1c3 031f 	rsb	r3, r3, #31
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	4926      	ldr	r1, [pc, #152]	; (8000d64 <vTaskSwitchContext+0xcc>)
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10c      	bne.n	8000cf8 <vTaskSwitchContext+0x60>
        __asm volatile
 8000cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce2:	b672      	cpsid	i
 8000ce4:	f383 8811 	msr	BASEPRI, r3
 8000ce8:	f3bf 8f6f 	isb	sy
 8000cec:	f3bf 8f4f 	dsb	sy
 8000cf0:	b662      	cpsie	i
 8000cf2:	607b      	str	r3, [r7, #4]
    }
 8000cf4:	bf00      	nop
 8000cf6:	e7fe      	b.n	8000cf6 <vTaskSwitchContext+0x5e>
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <vTaskSwitchContext+0xcc>)
 8000d04:	4413      	add	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	3308      	adds	r3, #8
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d104      	bne.n	8000d28 <vTaskSwitchContext+0x90>
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <vTaskSwitchContext+0xd0>)
 8000d30:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <vTaskSwitchContext+0xd0>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <vTaskSwitchContext+0xd4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d102      	bne.n	8000d44 <vTaskSwitchContext+0xac>
 8000d3e:	f002 fe63 	bl	8003a08 <SEGGER_SYSVIEW_OnIdle>
}
 8000d42:	e004      	b.n	8000d4e <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <vTaskSwitchContext+0xd0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 febb 	bl	8003ac4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	24000164 	.word	0x24000164
 8000d5c:	24000150 	.word	0x24000150
 8000d60:	24000144 	.word	0x24000144
 8000d64:	24000040 	.word	0x24000040
 8000d68:	2400003c 	.word	0x2400003c
 8000d6c:	24000160 	.word	0x24000160

08000d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000d78:	f000 f854 	bl	8000e24 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <prvIdleTask+0x2c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d907      	bls.n	8000d94 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <prvIdleTask+0x30>)
 8000d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	f3bf 8f4f 	dsb	sy
 8000d90:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8000d94:	f003 fbcc 	bl	8004530 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8000d98:	e7ee      	b.n	8000d78 <prvIdleTask+0x8>
 8000d9a:	bf00      	nop
 8000d9c:	24000040 	.word	0x24000040
 8000da0:	e000ed04 	.word	0xe000ed04

08000da4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	e00c      	b.n	8000dca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <prvInitialiseTaskLists+0x60>)
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fad8 	bl	8000374 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b06      	cmp	r3, #6
 8000dce:	d9ef      	bls.n	8000db0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <prvInitialiseTaskLists+0x64>)
 8000dd2:	f7ff facf 	bl	8000374 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000dd6:	480d      	ldr	r0, [pc, #52]	; (8000e0c <prvInitialiseTaskLists+0x68>)
 8000dd8:	f7ff facc 	bl	8000374 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <prvInitialiseTaskLists+0x6c>)
 8000dde:	f7ff fac9 	bl	8000374 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000de2:	480c      	ldr	r0, [pc, #48]	; (8000e14 <prvInitialiseTaskLists+0x70>)
 8000de4:	f7ff fac6 	bl	8000374 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <prvInitialiseTaskLists+0x74>)
 8000dea:	f7ff fac3 	bl	8000374 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <prvInitialiseTaskLists+0x78>)
 8000df0:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <prvInitialiseTaskLists+0x64>)
 8000df2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <prvInitialiseTaskLists+0x7c>)
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <prvInitialiseTaskLists+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	24000040 	.word	0x24000040
 8000e08:	240000cc 	.word	0x240000cc
 8000e0c:	240000e0 	.word	0x240000e0
 8000e10:	240000fc 	.word	0x240000fc
 8000e14:	24000110 	.word	0x24000110
 8000e18:	24000128 	.word	0x24000128
 8000e1c:	240000f4 	.word	0x240000f4
 8000e20:	240000f8 	.word	0x240000f8

08000e24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e2a:	e019      	b.n	8000e60 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000e2c:	f000 f9d8 	bl	80011e0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <prvCheckTasksWaitingTermination+0x50>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fb23 	bl	8000488 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <prvCheckTasksWaitingTermination+0x54>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <prvCheckTasksWaitingTermination+0x54>)
 8000e4a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <prvCheckTasksWaitingTermination+0x58>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <prvCheckTasksWaitingTermination+0x58>)
 8000e54:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000e56:	f000 f9f7 	bl	8001248 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f810 	bl	8000e80 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <prvCheckTasksWaitingTermination+0x58>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e1      	bne.n	8000e2c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	24000110 	.word	0x24000110
 8000e78:	2400013c 	.word	0x2400013c
 8000e7c:	24000124 	.word	0x24000124

08000e80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fbc1 	bl	8001614 <vPortFree>
                vPortFree( pxTCB );
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 fbbe 	bl	8001614 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <prvResetNextTaskUnblockTime+0x30>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d104      	bne.n	8000eb8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <prvResetNextTaskUnblockTime+0x34>)
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000eb6:	e005      	b.n	8000ec4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <prvResetNextTaskUnblockTime+0x30>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <prvResetNextTaskUnblockTime+0x34>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	240000f4 	.word	0x240000f4
 8000ed4:	2400015c 	.word	0x2400015c

08000ed8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000ee2:	4b32      	ldr	r3, [pc, #200]	; (8000fac <prvAddCurrentTaskToDelayedList+0xd4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000ee8:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3304      	adds	r3, #4
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff faca 	bl	8000488 <uxListRemove>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10b      	bne.n	8000f12 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	2201      	movs	r2, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8000f10:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d110      	bne.n	8000f3c <prvAddCurrentTaskToDelayedList+0x64>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00d      	beq.n	8000f3c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	211b      	movs	r1, #27
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fe50 	bl	8003bcc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3304      	adds	r3, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8000f36:	f7ff fa4a 	bl	80003ce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000f3a:	e032      	b.n	8000fa2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d20f      	bcs.n	8000f74 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2104      	movs	r1, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fe36 	bl	8003bcc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <prvAddCurrentTaskToDelayedList+0xe4>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	f7ff fa52 	bl	8000416 <vListInsert>
}
 8000f72:	e016      	b.n	8000fa2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fe26 	bl	8003bcc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	f7ff fa42 	bl	8000416 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <prvAddCurrentTaskToDelayedList+0xec>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d202      	bcs.n	8000fa2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8000f9c:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <prvAddCurrentTaskToDelayedList+0xec>)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	24000140 	.word	0x24000140
 8000fb0:	2400003c 	.word	0x2400003c
 8000fb4:	24000144 	.word	0x24000144
 8000fb8:	24000128 	.word	0x24000128
 8000fbc:	240000f8 	.word	0x240000f8
 8000fc0:	240000f4 	.word	0x240000f4
 8000fc4:	2400015c 	.word	0x2400015c

08000fc8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fe0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3b04      	subs	r3, #4
 8000fe6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	f023 0201 	bic.w	r2, r3, #1
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3b04      	subs	r3, #4
 8000ff6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <pxPortInitialiseStack+0x64>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3b14      	subs	r3, #20
 8001002:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3b04      	subs	r3, #4
 800100e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f06f 0202 	mvn.w	r2, #2
 8001016:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3b20      	subs	r3, #32
 800101c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	08001031 	.word	0x08001031

08001030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <prvTaskExitError+0x5c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001042:	d00c      	beq.n	800105e <prvTaskExitError+0x2e>
        __asm volatile
 8001044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001048:	b672      	cpsid	i
 800104a:	f383 8811 	msr	BASEPRI, r3
 800104e:	f3bf 8f6f 	isb	sy
 8001052:	f3bf 8f4f 	dsb	sy
 8001056:	b662      	cpsie	i
 8001058:	60fb      	str	r3, [r7, #12]
    }
 800105a:	bf00      	nop
 800105c:	e7fe      	b.n	800105c <prvTaskExitError+0x2c>
        __asm volatile
 800105e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001062:	b672      	cpsid	i
 8001064:	f383 8811 	msr	BASEPRI, r3
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	b662      	cpsie	i
 8001072:	60bb      	str	r3, [r7, #8]
    }
 8001074:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001076:	bf00      	nop
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0fc      	beq.n	8001078 <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	24000004 	.word	0x24000004

08001090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <pxCurrentTCBConst2>)
 8001092:	6819      	ldr	r1, [r3, #0]
 8001094:	6808      	ldr	r0, [r1, #0]
 8001096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109a:	f380 8809 	msr	PSP, r0
 800109e:	f3bf 8f6f 	isb	sy
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	f380 8811 	msr	BASEPRI, r0
 80010aa:	4770      	bx	lr
 80010ac:	f3af 8000 	nop.w

080010b0 <pxCurrentTCBConst2>:
 80010b0:	2400003c 	.word	0x2400003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop

080010b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <prvPortStartFirstTask+0x24>)
 80010ba:	6800      	ldr	r0, [r0, #0]
 80010bc:	6800      	ldr	r0, [r0, #0]
 80010be:	f380 8808 	msr	MSP, r0
 80010c2:	f04f 0000 	mov.w	r0, #0
 80010c6:	f380 8814 	msr	CONTROL, r0
 80010ca:	b662      	cpsie	i
 80010cc:	b661      	cpsie	f
 80010ce:	f3bf 8f4f 	dsb	sy
 80010d2:	f3bf 8f6f 	isb	sy
 80010d6:	df00      	svc	0
 80010d8:	bf00      	nop
 80010da:	0000      	.short	0x0000
 80010dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop

080010e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80010ea:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <xPortStartScheduler+0xe4>)
 80010ec:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	22ff      	movs	r2, #255	; 0xff
 80010fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <xPortStartScheduler+0xe8>)
 8001110:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <xPortStartScheduler+0xec>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001118:	e009      	b.n	800112e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <xPortStartScheduler+0xec>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3b01      	subs	r3, #1
 8001120:	4a2b      	ldr	r2, [pc, #172]	; (80011d0 <xPortStartScheduler+0xec>)
 8001122:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	2b80      	cmp	r3, #128	; 0x80
 8001138:	d0ef      	beq.n	800111a <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <xPortStartScheduler+0xec>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	d00c      	beq.n	8001160 <xPortStartScheduler+0x7c>
        __asm volatile
 8001146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114a:	b672      	cpsid	i
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	b662      	cpsie	i
 800115a:	60bb      	str	r3, [r7, #8]
    }
 800115c:	bf00      	nop
 800115e:	e7fe      	b.n	800115e <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <xPortStartScheduler+0xec>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <xPortStartScheduler+0xec>)
 8001168:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <xPortStartScheduler+0xec>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001172:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <xPortStartScheduler+0xec>)
 8001174:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <xPortStartScheduler+0xf0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <xPortStartScheduler+0xf0>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <xPortStartScheduler+0xf0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <xPortStartScheduler+0xf0>)
 8001190:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001194:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001196:	f000 f8e3 	bl	8001360 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <xPortStartScheduler+0xf4>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80011a0:	f000 f902 	bl	80013a8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <xPortStartScheduler+0xf8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <xPortStartScheduler+0xf8>)
 80011aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80011ae:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80011b0:	f7ff ff82 	bl	80010b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80011b4:	f7ff fd70 	bl	8000c98 <vTaskSwitchContext>
    prvTaskExitError();
 80011b8:	f7ff ff3a 	bl	8001030 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e400 	.word	0xe000e400
 80011cc:	24000168 	.word	0x24000168
 80011d0:	2400016c 	.word	0x2400016c
 80011d4:	e000ed20 	.word	0xe000ed20
 80011d8:	24000004 	.word	0x24000004
 80011dc:	e000ef34 	.word	0xe000ef34

080011e0 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
        __asm volatile
 80011e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ea:	b672      	cpsid	i
 80011ec:	f383 8811 	msr	BASEPRI, r3
 80011f0:	f3bf 8f6f 	isb	sy
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	b662      	cpsie	i
 80011fa:	607b      	str	r3, [r7, #4]
    }
 80011fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <vPortEnterCritical+0x60>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <vPortEnterCritical+0x60>)
 8001206:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <vPortEnterCritical+0x60>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d111      	bne.n	8001234 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <vPortEnterCritical+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00c      	beq.n	8001234 <vPortEnterCritical+0x54>
        __asm volatile
 800121a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800121e:	b672      	cpsid	i
 8001220:	f383 8811 	msr	BASEPRI, r3
 8001224:	f3bf 8f6f 	isb	sy
 8001228:	f3bf 8f4f 	dsb	sy
 800122c:	b662      	cpsie	i
 800122e:	603b      	str	r3, [r7, #0]
    }
 8001230:	bf00      	nop
 8001232:	e7fe      	b.n	8001232 <vPortEnterCritical+0x52>
    }
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	24000004 	.word	0x24000004
 8001244:	e000ed04 	.word	0xe000ed04

08001248 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <vPortExitCritical+0x54>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10c      	bne.n	8001270 <vPortExitCritical+0x28>
        __asm volatile
 8001256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125a:	b672      	cpsid	i
 800125c:	f383 8811 	msr	BASEPRI, r3
 8001260:	f3bf 8f6f 	isb	sy
 8001264:	f3bf 8f4f 	dsb	sy
 8001268:	b662      	cpsie	i
 800126a:	607b      	str	r3, [r7, #4]
    }
 800126c:	bf00      	nop
 800126e:	e7fe      	b.n	800126e <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <vPortExitCritical+0x54>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <vPortExitCritical+0x54>)
 8001278:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <vPortExitCritical+0x54>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d105      	bne.n	800128e <vPortExitCritical+0x46>
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800128c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	24000004 	.word	0x24000004

080012a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80012a0:	f3ef 8009 	mrs	r0, PSP
 80012a4:	f3bf 8f6f 	isb	sy
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <pxCurrentTCBConst>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	f01e 0f10 	tst.w	lr, #16
 80012b0:	bf08      	it	eq
 80012b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80012b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ba:	6010      	str	r0, [r2, #0]
 80012bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80012c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80012c4:	b672      	cpsid	i
 80012c6:	f380 8811 	msr	BASEPRI, r0
 80012ca:	f3bf 8f4f 	dsb	sy
 80012ce:	f3bf 8f6f 	isb	sy
 80012d2:	b662      	cpsie	i
 80012d4:	f7ff fce0 	bl	8000c98 <vTaskSwitchContext>
 80012d8:	f04f 0000 	mov.w	r0, #0
 80012dc:	f380 8811 	msr	BASEPRI, r0
 80012e0:	bc09      	pop	{r0, r3}
 80012e2:	6819      	ldr	r1, [r3, #0]
 80012e4:	6808      	ldr	r0, [r1, #0]
 80012e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ea:	f01e 0f10 	tst.w	lr, #16
 80012ee:	bf08      	it	eq
 80012f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80012f4:	f380 8809 	msr	PSP, r0
 80012f8:	f3bf 8f6f 	isb	sy
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop

08001300 <pxCurrentTCBConst>:
 8001300:	2400003c 	.word	0x2400003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop

08001308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
        __asm volatile
 800130e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001312:	b672      	cpsid	i
 8001314:	f383 8811 	msr	BASEPRI, r3
 8001318:	f3bf 8f6f 	isb	sy
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	b662      	cpsie	i
 8001322:	607b      	str	r3, [r7, #4]
    }
 8001324:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001326:	f002 faf5 	bl	8003914 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800132a:	f7ff fbf7 	bl	8000b1c <xTaskIncrementTick>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001334:	f002 fb4c 	bl	80039d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <SysTick_Handler+0x54>)
 800133a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e001      	b.n	8001346 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8001342:	f002 fb29 	bl	8003998 <SEGGER_SYSVIEW_RecordExitISR>
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
        __asm volatile
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f383 8811 	msr	BASEPRI, r3
    }
 8001350:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000ed04 	.word	0xe000ed04

08001360 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <vPortSetupTimerInterrupt+0x34>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <vPortSetupTimerInterrupt+0x38>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <vPortSetupTimerInterrupt+0x3c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <vPortSetupTimerInterrupt+0x40>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	099b      	lsrs	r3, r3, #6
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <vPortSetupTimerInterrupt+0x44>)
 800137e:	3b01      	subs	r3, #1
 8001380:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <vPortSetupTimerInterrupt+0x34>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010
 8001398:	e000e018 	.word	0xe000e018
 800139c:	24000010 	.word	0x24000010
 80013a0:	10624dd3 	.word	0x10624dd3
 80013a4:	e000e014 	.word	0xe000e014

080013a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80013a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80013b8 <vPortEnableVFP+0x10>
 80013ac:	6801      	ldr	r1, [r0, #0]
 80013ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80013b2:	6001      	str	r1, [r0, #0]
 80013b4:	4770      	bx	lr
 80013b6:	0000      	.short	0x0000
 80013b8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop

080013c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80013c6:	f3ef 8305 	mrs	r3, IPSR
 80013ca:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b0f      	cmp	r3, #15
 80013d0:	d916      	bls.n	8001400 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80013d2:	4a19      	ldr	r2, [pc, #100]	; (8001438 <vPortValidateInterruptPriority+0x78>)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <vPortValidateInterruptPriority+0x7c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	7afa      	ldrb	r2, [r7, #11]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d20c      	bcs.n	8001400 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 80013e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ea:	b672      	cpsid	i
 80013ec:	f383 8811 	msr	BASEPRI, r3
 80013f0:	f3bf 8f6f 	isb	sy
 80013f4:	f3bf 8f4f 	dsb	sy
 80013f8:	b662      	cpsie	i
 80013fa:	607b      	str	r3, [r7, #4]
    }
 80013fc:	bf00      	nop
 80013fe:	e7fe      	b.n	80013fe <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <vPortValidateInterruptPriority+0x80>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <vPortValidateInterruptPriority+0x84>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d90c      	bls.n	800142a <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8001410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001414:	b672      	cpsid	i
 8001416:	f383 8811 	msr	BASEPRI, r3
 800141a:	f3bf 8f6f 	isb	sy
 800141e:	f3bf 8f4f 	dsb	sy
 8001422:	b662      	cpsie	i
 8001424:	603b      	str	r3, [r7, #0]
    }
 8001426:	bf00      	nop
 8001428:	e7fe      	b.n	8001428 <vPortValidateInterruptPriority+0x68>
    }
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e3f0 	.word	0xe000e3f0
 800143c:	24000168 	.word	0x24000168
 8001440:	e000ed0c 	.word	0xe000ed0c
 8001444:	2400016c 	.word	0x2400016c

08001448 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001454:	f7ff fa90 	bl	8000978 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001458:	4b68      	ldr	r3, [pc, #416]	; (80015fc <pvPortMalloc+0x1b4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001460:	f000 f93e 	bl	80016e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001464:	4b66      	ldr	r3, [pc, #408]	; (8001600 <pvPortMalloc+0x1b8>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	f040 80ab 	bne.w	80015c8 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d02f      	beq.n	80014d8 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001478:	2208      	movs	r2, #8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	d229      	bcs.n	80014d8 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 8001484:	2208      	movs	r2, #8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	2b00      	cmp	r3, #0
 8001494:	d023      	beq.n	80014de <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f023 0307 	bic.w	r3, r3, #7
 800149c:	3308      	adds	r3, #8
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d216      	bcs.n	80014d2 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f023 0307 	bic.w	r3, r3, #7
 80014aa:	3308      	adds	r3, #8
 80014ac:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d012      	beq.n	80014de <pvPortMalloc+0x96>
        __asm volatile
 80014b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014bc:	b672      	cpsid	i
 80014be:	f383 8811 	msr	BASEPRI, r3
 80014c2:	f3bf 8f6f 	isb	sy
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	b662      	cpsie	i
 80014cc:	617b      	str	r3, [r7, #20]
    }
 80014ce:	bf00      	nop
 80014d0:	e7fe      	b.n	80014d0 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80014d6:	e002      	b.n	80014de <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	e000      	b.n	80014e0 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80014de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d070      	beq.n	80015c8 <pvPortMalloc+0x180>
 80014e6:	4b47      	ldr	r3, [pc, #284]	; (8001604 <pvPortMalloc+0x1bc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d86b      	bhi.n	80015c8 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80014f0:	4b45      	ldr	r3, [pc, #276]	; (8001608 <pvPortMalloc+0x1c0>)
 80014f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80014f4:	4b44      	ldr	r3, [pc, #272]	; (8001608 <pvPortMalloc+0x1c0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014fa:	e004      	b.n	8001506 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	d903      	bls.n	8001518 <pvPortMalloc+0xd0>
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f1      	bne.n	80014fc <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <pvPortMalloc+0x1b4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151e:	429a      	cmp	r2, r3
 8001520:	d052      	beq.n	80015c8 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2208      	movs	r2, #8
 8001528:	4413      	add	r3, r2
 800152a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1ad2      	subs	r2, r2, r3
 800153c:	2308      	movs	r3, #8
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	429a      	cmp	r2, r3
 8001542:	d921      	bls.n	8001588 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00c      	beq.n	8001570 <pvPortMalloc+0x128>
        __asm volatile
 8001556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155a:	b672      	cpsid	i
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	b662      	cpsie	i
 800156a:	613b      	str	r3, [r7, #16]
    }
 800156c:	bf00      	nop
 800156e:	e7fe      	b.n	800156e <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001582:	69b8      	ldr	r0, [r7, #24]
 8001584:	f000 f90e 	bl	80017a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <pvPortMalloc+0x1bc>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <pvPortMalloc+0x1bc>)
 8001594:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <pvPortMalloc+0x1bc>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <pvPortMalloc+0x1c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d203      	bcs.n	80015aa <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <pvPortMalloc+0x1bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a19      	ldr	r2, [pc, #100]	; (800160c <pvPortMalloc+0x1c4>)
 80015a8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <pvPortMalloc+0x1b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <pvPortMalloc+0x1c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a12      	ldr	r2, [pc, #72]	; (8001610 <pvPortMalloc+0x1c8>)
 80015c6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80015c8:	f7ff f9e4 	bl	8000994 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00c      	beq.n	80015f0 <pvPortMalloc+0x1a8>
        __asm volatile
 80015d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015da:	b672      	cpsid	i
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	b662      	cpsie	i
 80015ea:	60fb      	str	r3, [r7, #12]
    }
 80015ec:	bf00      	nop
 80015ee:	e7fe      	b.n	80015ee <pvPortMalloc+0x1a6>
    return pvReturn;
 80015f0:	69fb      	ldr	r3, [r7, #28]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	24007178 	.word	0x24007178
 8001600:	2400718c 	.word	0x2400718c
 8001604:	2400717c 	.word	0x2400717c
 8001608:	24007170 	.word	0x24007170
 800160c:	24007180 	.word	0x24007180
 8001610:	24007184 	.word	0x24007184

08001614 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d051      	beq.n	80016ca <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001626:	2308      	movs	r3, #8
 8001628:	425b      	negs	r3, r3
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4413      	add	r3, r2
 800162e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <vPortFree+0xc0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4013      	ands	r3, r2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <vPortFree+0x48>
        __asm volatile
 8001642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001646:	b672      	cpsid	i
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	b662      	cpsie	i
 8001656:	60fb      	str	r3, [r7, #12]
    }
 8001658:	bf00      	nop
 800165a:	e7fe      	b.n	800165a <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00c      	beq.n	800167e <vPortFree+0x6a>
        __asm volatile
 8001664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001668:	b672      	cpsid	i
 800166a:	f383 8811 	msr	BASEPRI, r3
 800166e:	f3bf 8f6f 	isb	sy
 8001672:	f3bf 8f4f 	dsb	sy
 8001676:	b662      	cpsie	i
 8001678:	60bb      	str	r3, [r7, #8]
    }
 800167a:	bf00      	nop
 800167c:	e7fe      	b.n	800167c <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <vPortFree+0xc0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01e      	beq.n	80016ca <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d11a      	bne.n	80016ca <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <vPortFree+0xc0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80016a4:	f7ff f968 	bl	8000978 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <vPortFree+0xc4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <vPortFree+0xc4>)
 80016b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016b6:	6938      	ldr	r0, [r7, #16]
 80016b8:	f000 f874 	bl	80017a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <vPortFree+0xc8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a06      	ldr	r2, [pc, #24]	; (80016dc <vPortFree+0xc8>)
 80016c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80016c6:	f7ff f965 	bl	8000994 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2400718c 	.word	0x2400718c
 80016d8:	2400717c 	.word	0x2400717c
 80016dc:	24007188 	.word	0x24007188

080016e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80016e6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80016ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <prvHeapInit+0xac>)
 80016ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00c      	beq.n	8001714 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3307      	adds	r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f023 0307 	bic.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	4a1f      	ldr	r2, [pc, #124]	; (800178c <prvHeapInit+0xac>)
 8001710:	4413      	add	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001718:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <prvHeapInit+0xb0>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <prvHeapInit+0xb0>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800172c:	2208      	movs	r2, #8
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1a9b      	subs	r3, r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f023 0307 	bic.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <prvHeapInit+0xb4>)
 8001740:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <prvHeapInit+0xb4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <prvHeapInit+0xb4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	1ad2      	subs	r2, r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <prvHeapInit+0xb4>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <prvHeapInit+0xb8>)
 800176e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a09      	ldr	r2, [pc, #36]	; (800179c <prvHeapInit+0xbc>)
 8001776:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <prvHeapInit+0xc0>)
 800177a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	24000170 	.word	0x24000170
 8001790:	24007170 	.word	0x24007170
 8001794:	24007178 	.word	0x24007178
 8001798:	24007180 	.word	0x24007180
 800179c:	2400717c 	.word	0x2400717c
 80017a0:	2400718c 	.word	0x2400718c

080017a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <prvInsertBlockIntoFreeList+0xac>)
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e002      	b.n	80017b8 <prvInsertBlockIntoFreeList+0x14>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d8f7      	bhi.n	80017b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4413      	add	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d108      	bne.n	80017e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	441a      	add	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	441a      	add	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d118      	bne.n	800182c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <prvInsertBlockIntoFreeList+0xb0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d00d      	beq.n	8001822 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	441a      	add	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e008      	b.n	8001834 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <prvInsertBlockIntoFreeList+0xb0>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e003      	b.n	8001834 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	d002      	beq.n	8001842 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	24007170 	.word	0x24007170
 8001854:	24007178 	.word	0x24007178

08001858 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <_cbSendSystemDesc+0x14>)
 800185e:	f002 f803 	bl	8003868 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001862:	4803      	ldr	r0, [pc, #12]	; (8001870 <_cbSendSystemDesc+0x18>)
 8001864:	f002 f800 	bl	8003868 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	08008b84 	.word	0x08008b84
 8001870:	08008bb4 	.word	0x08008bb4

08001874 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <SEGGER_SYSVIEW_Conf+0x20>)
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SEGGER_SYSVIEW_Conf+0x20>)
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <SEGGER_SYSVIEW_Conf+0x24>)
 8001882:	4a06      	ldr	r2, [pc, #24]	; (800189c <SEGGER_SYSVIEW_Conf+0x28>)
 8001884:	f001 fc72 	bl	800316c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001888:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 800188c:	f001 fcb4 	bl	80031f8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	24000010 	.word	0x24000010
 8001898:	08001859 	.word	0x08001859
 800189c:	08008d14 	.word	0x08008d14

080018a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e033      	b.n	8001914 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80018ac:	491e      	ldr	r1, [pc, #120]	; (8001928 <_cbSendTaskList+0x88>)
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	491a      	ldr	r1, [pc, #104]	; (8001928 <_cbSendTaskList+0x88>)
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3304      	adds	r3, #4
 80018cc:	6819      	ldr	r1, [r3, #0]
 80018ce:	4c16      	ldr	r4, [pc, #88]	; (8001928 <_cbSendTaskList+0x88>)
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4423      	add	r3, r4
 80018dc:	3308      	adds	r3, #8
 80018de:	681c      	ldr	r4, [r3, #0]
 80018e0:	4d11      	ldr	r5, [pc, #68]	; (8001928 <_cbSendTaskList+0x88>)
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	442b      	add	r3, r5
 80018ee:	330c      	adds	r3, #12
 80018f0:	681d      	ldr	r5, [r3, #0]
 80018f2:	4e0d      	ldr	r6, [pc, #52]	; (8001928 <_cbSendTaskList+0x88>)
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4433      	add	r3, r6
 8001900:	3310      	adds	r3, #16
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	462b      	mov	r3, r5
 8001908:	4622      	mov	r2, r4
 800190a:	f000 f8bd 	bl	8001a88 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3301      	adds	r3, #1
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <_cbSendTaskList+0x8c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3c6      	bcc.n	80018ac <_cbSendTaskList+0xc>
  }
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001928:	24007190 	.word	0x24007190
 800192c:	24007230 	.word	0x24007230

08001930 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001938:	f7ff f8de 	bl	8000af8 <xTaskGetTickCountFromISR>
 800193c:	4603      	mov	r3, r0
 800193e:	2200      	movs	r2, #0
 8001940:	469a      	mov	sl, r3
 8001942:	4693      	mov	fp, r2
 8001944:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	f04f 0a00 	mov.w	sl, #0
 8001954:	f04f 0b00 	mov.w	fp, #0
 8001958:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800195c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001960:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001964:	4652      	mov	r2, sl
 8001966:	465b      	mov	r3, fp
 8001968:	1a14      	subs	r4, r2, r0
 800196a:	eb63 0501 	sbc.w	r5, r3, r1
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	00ab      	lsls	r3, r5, #2
 8001978:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800197c:	00a2      	lsls	r2, r4, #2
 800197e:	4614      	mov	r4, r2
 8001980:	461d      	mov	r5, r3
 8001982:	eb14 0800 	adds.w	r8, r4, r0
 8001986:	eb45 0901 	adc.w	r9, r5, r1
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800199a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800199e:	4690      	mov	r8, r2
 80019a0:	4699      	mov	r9, r3
 80019a2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80019a6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080019b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80019c6:	2205      	movs	r2, #5
 80019c8:	492b      	ldr	r1, [pc, #172]	; (8001a78 <SYSVIEW_AddTask+0xc0>)
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	f007 f8a4 	bl	8008b18 <memcmp>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04b      	beq.n	8001a6e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80019d6:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b07      	cmp	r3, #7
 80019dc:	d903      	bls.n	80019e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80019de:	4828      	ldr	r0, [pc, #160]	; (8001a80 <SYSVIEW_AddTask+0xc8>)
 80019e0:	f002 fa44 	bl	8003e6c <SEGGER_SYSVIEW_Warn>
    return;
 80019e4:	e044      	b.n	8001a70 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4926      	ldr	r1, [pc, #152]	; (8001a84 <SYSVIEW_AddTask+0xcc>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4921      	ldr	r1, [pc, #132]	; (8001a84 <SYSVIEW_AddTask+0xcc>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	491b      	ldr	r1, [pc, #108]	; (8001a84 <SYSVIEW_AddTask+0xcc>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	3308      	adds	r3, #8
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4916      	ldr	r1, [pc, #88]	; (8001a84 <SYSVIEW_AddTask+0xcc>)
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	330c      	adds	r3, #12
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4910      	ldr	r1, [pc, #64]	; (8001a84 <SYSVIEW_AddTask+0xcc>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3310      	adds	r3, #16
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <SYSVIEW_AddTask+0xc4>)
 8001a5a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f80e 	bl	8001a88 <SYSVIEW_SendTaskInfo>
 8001a6c:	e000      	b.n	8001a70 <SYSVIEW_AddTask+0xb8>
    return;
 8001a6e:	bf00      	nop

}
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	08008bc4 	.word	0x08008bc4
 8001a7c:	24007230 	.word	0x24007230
 8001a80:	08008bcc 	.word	0x08008bcc
 8001a84:	24007190 	.word	0x24007190

08001a88 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	2214      	movs	r2, #20
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f007 f858 	bl	8008b54 <memset>
  TaskInfo.TaskID     = TaskID;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fddb 	bl	8003678 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8001b62:	f002 f9df 	bl	8003f24 <SEGGER_SYSVIEW_IsStarted>
 8001b66:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8001b6e:	f001 fc07 	bl	8003380 <SEGGER_SYSVIEW_Start>
  }
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <_cbOnUARTRx+0x3c>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d806      	bhi.n	8001b9c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <_cbOnUARTRx+0x3c>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_cbOnUARTRx+0x3c>)
 8001b98:	701a      	strb	r2, [r3, #0]
    goto Done;
 8001b9a:	e009      	b.n	8001bb0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8001b9c:	f7ff ffde 	bl	8001b5c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <_cbOnUARTRx+0x3c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4619      	mov	r1, r3
 8001bac:	f000 fb9e 	bl	80022ec <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8001bb0:	bf00      	nop
}
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	24000008 	.word	0x24000008

08001bbc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <_cbOnUARTTx+0x5c>)
 8001bc6:	785b      	ldrb	r3, [r3, #1]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d80f      	bhi.n	8001bec <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <_cbOnUARTTx+0x5c>)
 8001bce:	785b      	ldrb	r3, [r3, #1]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <_cbOnUARTTx+0x60>)
 8001bd4:	5c9a      	ldrb	r2, [r3, r2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <_cbOnUARTTx+0x5c>)
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	3301      	adds	r3, #1
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <_cbOnUARTTx+0x5c>)
 8001be4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8001be6:	2301      	movs	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8001bea:	e00f      	b.n	8001c0c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <_cbOnUARTTx+0x5c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fa1d 	bl	8002034 <SEGGER_RTT_ReadUpBufferNoLock>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da02      	bge.n	8001c0a <_cbOnUARTTx+0x4e>
    r = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e000      	b.n	8001c0c <_cbOnUARTTx+0x50>
  }
Done:
 8001c0a:	bf00      	nop
  return r;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24000008 	.word	0x24000008
 8001c1c:	08008d1c 	.word	0x08008d1c

08001c20 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <SEGGER_UART_init+0x1c>)
 8001c2a:	4905      	ldr	r1, [pc, #20]	; (8001c40 <SEGGER_UART_init+0x20>)
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f865 	bl	8001cfc <HIF_UART_Init>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	08001b7d 	.word	0x08001b7d
 8001c40:	08001bbd 	.word	0x08001bbd

08001c44 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <USART2_IRQHandler+0x80>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d011      	beq.n	8001c7e <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <USART2_IRQHandler+0x84>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f003 030b 	and.w	r3, r3, #11
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d108      	bne.n	8001c7e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <USART2_IRQHandler+0x88>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <USART2_IRQHandler+0x88>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	79fa      	ldrb	r2, [r7, #7]
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01a      	beq.n	8001cbe <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <USART2_IRQHandler+0x8c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d015      	beq.n	8001cbc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <USART2_IRQHandler+0x8c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	1dfa      	adds	r2, r7, #7
 8001c96:	4610      	mov	r0, r2
 8001c98:	4798      	blx	r3
 8001c9a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <USART2_IRQHandler+0x90>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <USART2_IRQHandler+0x90>)
 8001ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e006      	b.n	8001cbe <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <USART2_IRQHandler+0x80>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8001cb4:	79fa      	ldrb	r2, [r7, #7]
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <USART2_IRQHandler+0x94>)
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	e000      	b.n	8001cbe <USART2_IRQHandler+0x7a>
      return;
 8001cbc:	bf00      	nop
    }
  }
}
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	4000441c 	.word	0x4000441c
 8001cc8:	40004424 	.word	0x40004424
 8001ccc:	24007234 	.word	0x24007234
 8001cd0:	24007238 	.word	0x24007238
 8001cd4:	40004400 	.word	0x40004400
 8001cd8:	40004428 	.word	0x40004428

08001cdc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40004400 	.word	0x40004400

08001cfc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HIF_UART_Init+0xc8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <HIF_UART_Init+0xc8>)
 8001d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d12:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 8001d14:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HIF_UART_Init+0xcc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <HIF_UART_Init+0xcc>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HIF_UART_Init+0xd0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d2c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001d34:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8001d36:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <HIF_UART_Init+0xd0>)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HIF_UART_Init+0xd4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d48:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001d50:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8001d52:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <HIF_UART_Init+0xd4>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <HIF_UART_Init+0xd8>)
 8001d5a:	f248 022d 	movw	r2, #32813	; 0x802d
 8001d5e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HIF_UART_Init+0xdc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HIF_UART_Init+0xe0>)
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8001d72:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <HIF_UART_Init+0xe4>)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d8a:	d302      	bcc.n	8001d92 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8001d8c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001d90:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d004      	beq.n	8001da2 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HIF_UART_Init+0xe8>)
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8001da2:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HIF_UART_Init+0xec>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8001da8:	4a10      	ldr	r2, [pc, #64]	; (8001dec <HIF_UART_Init+0xf0>)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8001dae:	2106      	movs	r1, #6
 8001db0:	2026      	movs	r0, #38	; 0x26
 8001db2:	f7ff fea9 	bl	8001b08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8001db6:	2026      	movs	r0, #38	; 0x26
 8001db8:	f7ff fe88 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001dbc:	bf00      	nop
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	580244e8 	.word	0x580244e8
 8001dc8:	580244e0 	.word	0x580244e0
 8001dcc:	58020020 	.word	0x58020020
 8001dd0:	58020000 	.word	0x58020000
 8001dd4:	40004400 	.word	0x40004400
 8001dd8:	40004404 	.word	0x40004404
 8001ddc:	40004408 	.word	0x40004408
 8001de0:	0e4e1c00 	.word	0x0e4e1c00
 8001de4:	4000440c 	.word	0x4000440c
 8001de8:	24007234 	.word	0x24007234
 8001dec:	24007238 	.word	0x24007238

08001df0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001df6:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <_DoInit+0xa0>)
 8001df8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8001dfa:	22a8      	movs	r2, #168	; 0xa8
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	6838      	ldr	r0, [r7, #0]
 8001e00:	f006 fea8 	bl	8008b54 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2203      	movs	r2, #3
 8001e08:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4a20      	ldr	r2, [pc, #128]	; (8001e94 <_DoInit+0xa4>)
 8001e14:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <_DoInit+0xa8>)
 8001e1a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e22:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	4a16      	ldr	r2, [pc, #88]	; (8001e94 <_DoInit+0xa4>)
 8001e3a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <_DoInit+0xac>)
 8001e40:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2210      	movs	r2, #16
 8001e46:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2200      	movs	r2, #0
 8001e52:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001e5a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	e00c      	b.n	8001e7e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f1c3 030f 	rsb	r3, r3, #15
 8001e6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <_DoInit+0xb0>)
 8001e6c:	5cd1      	ldrb	r1, [r2, r3]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	460a      	mov	r2, r1
 8001e76:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d9ef      	bls.n	8001e64 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001e84:	f3bf 8f5f 	dmb	sy
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	2400723c 	.word	0x2400723c
 8001e94:	08008c1c 	.word	0x08008c1c
 8001e98:	240072e4 	.word	0x240072e4
 8001e9c:	240076e4 	.word	0x240076e4
 8001ea0:	08008d20 	.word	0x08008d20

08001ea4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d905      	bls.n	8001ed4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed2:	e007      	b.n	8001ee4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	69b9      	ldr	r1, [r7, #24]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	1acb      	subs	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	bf28      	it	cs
 8001ef2:	4613      	movcs	r3, r2
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4293      	cmp	r3, r2
 8001efc:	bf28      	it	cs
 8001efe:	4613      	movcs	r3, r2
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4413      	add	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8001f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	6978      	ldr	r0, [r7, #20]
 8001f12:	f006 fe11 	bl	8008b38 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001f16:	6a3a      	ldr	r2, [r7, #32]
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	4413      	add	r3, r2
 8001f1c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	4413      	add	r3, r2
 8001f24:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	4413      	add	r3, r2
 8001f34:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d101      	bne.n	8001f44 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001f44:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1b2      	bne.n	8001eba <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001f54:	6a3b      	ldr	r3, [r7, #32]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3728      	adds	r7, #40	; 0x28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b088      	sub	sp, #32
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d911      	bls.n	8001fa6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	4413      	add	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	6938      	ldr	r0, [r7, #16]
 8001f92:	f006 fdd1 	bl	8008b38 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001f96:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	441a      	add	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001fa4:	e01f      	b.n	8001fe6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	6938      	ldr	r0, [r7, #16]
 8001fba:	f006 fdbd 	bl	8008b38 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6938      	ldr	r0, [r7, #16]
 8001fd8:	f006 fdae 	bl	8008b38 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001fdc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	60da      	str	r2, [r3, #12]
}
 8001fe6:	bf00      	nop
 8001fe8:	3720      	adds	r7, #32
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8001fee:	b480      	push	{r7}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	429a      	cmp	r2, r3
 8002008:	d808      	bhi.n	800201c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad2      	subs	r2, r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	3b01      	subs	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	e004      	b.n	8002026 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002026:	697b      	ldr	r3, [r7, #20]
}
 8002028:	4618      	mov	r0, r3
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b08c      	sub	sp, #48	; 0x30
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8002040:	4b3e      	ldr	r3, [pc, #248]	; (800213c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002042:	623b      	str	r3, [r7, #32]
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800204e:	f7ff fecf 	bl	8001df0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4a37      	ldr	r2, [pc, #220]	; (800213c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002060:	4413      	add	r3, r2
 8002062:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	429a      	cmp	r2, r3
 800207e:	d92b      	bls.n	80020d8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4293      	cmp	r3, r2
 8002090:	bf28      	it	cs
 8002092:	4613      	movcs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	4413      	add	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	6939      	ldr	r1, [r7, #16]
 80020a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020a6:	f006 fd47 	bl	8008b38 <memcpy>
    NumBytesRead += NumBytesRem;
 80020aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	4413      	add	r3, r2
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	4413      	add	r3, r2
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80020c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	4413      	add	r3, r2
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d101      	bne.n	80020d8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4293      	cmp	r3, r2
 80020e6:	bf28      	it	cs
 80020e8:	4613      	movcs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d019      	beq.n	8002126 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	4413      	add	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	6939      	ldr	r1, [r7, #16]
 8002100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002102:	f006 fd19 	bl	8008b38 <memcpy>
    NumBytesRead += NumBytesRem;
 8002106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	4413      	add	r3, r2
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800210e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	4413      	add	r3, r2
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800211e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	4413      	add	r3, r2
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002130:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002134:	4618      	mov	r0, r3
 8002136:	3730      	adds	r7, #48	; 0x30
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	2400723c 	.word	0x2400723c

08002140 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b08c      	sub	sp, #48	; 0x30
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800214c:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <SEGGER_RTT_ReadNoLock+0x108>)
 800214e:	623b      	str	r3, [r7, #32]
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <SEGGER_RTT_ReadNoLock+0x1e>
 800215a:	f7ff fe49 	bl	8001df0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	3360      	adds	r3, #96	; 0x60
 800216a:	4a37      	ldr	r2, [pc, #220]	; (8002248 <SEGGER_RTT_ReadNoLock+0x108>)
 800216c:	4413      	add	r3, r2
 800216e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	429a      	cmp	r2, r3
 800218a:	d92b      	bls.n	80021e4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4293      	cmp	r3, r2
 800219c:	bf28      	it	cs
 800219e:	4613      	movcs	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	4413      	add	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	6939      	ldr	r1, [r7, #16]
 80021b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021b2:	f006 fcc1 	bl	8008b38 <memcpy>
    NumBytesRead += NumBytesRem;
 80021b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	4413      	add	r3, r2
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80021be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	4413      	add	r3, r2
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80021ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4413      	add	r3, r2
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021dc:	429a      	cmp	r2, r3
 80021de:	d101      	bne.n	80021e4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4293      	cmp	r3, r2
 80021f2:	bf28      	it	cs
 80021f4:	4613      	movcs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d019      	beq.n	8002232 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	4413      	add	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	6939      	ldr	r1, [r7, #16]
 800220c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800220e:	f006 fc93 	bl	8008b38 <memcpy>
    NumBytesRead += NumBytesRem;
 8002212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	4413      	add	r3, r2
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	4413      	add	r3, r2
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800222a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	4413      	add	r3, r2
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800223c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002240:	4618      	mov	r0, r3
 8002242:	3730      	adds	r7, #48	; 0x30
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2400723c 	.word	0x2400723c

0800224c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	3360      	adds	r3, #96	; 0x60
 8002268:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800226a:	4413      	add	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d029      	beq.n	80022ca <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8002276:	2b02      	cmp	r3, #2
 8002278:	d82e      	bhi.n	80022d8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800227e:	2b01      	cmp	r3, #1
 8002280:	d013      	beq.n	80022aa <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8002282:	e029      	b.n	80022d8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002284:	6978      	ldr	r0, [r7, #20]
 8002286:	f7ff feb2 	bl	8001fee <_GetAvailWriteSpace>
 800228a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d202      	bcs.n	800229a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002298:	e021      	b.n	80022de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	69b9      	ldr	r1, [r7, #24]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff fe5b 	bl	8001f5e <_WriteNoCheck>
    break;
 80022a8:	e019      	b.n	80022de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff fe9f 	bl	8001fee <_GetAvailWriteSpace>
 80022b0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4293      	cmp	r3, r2
 80022b8:	bf28      	it	cs
 80022ba:	4613      	movcs	r3, r2
 80022bc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	69b9      	ldr	r1, [r7, #24]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff fe4b 	bl	8001f5e <_WriteNoCheck>
    break;
 80022c8:	e009      	b.n	80022de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	69b9      	ldr	r1, [r7, #24]
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f7ff fde8 	bl	8001ea4 <_WriteBlocking>
 80022d4:	61f8      	str	r0, [r7, #28]
    break;
 80022d6:	e002      	b.n	80022de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
    break;
 80022dc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80022de:	69fb      	ldr	r3, [r7, #28]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2400723c 	.word	0x2400723c

080022ec <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8002306:	f7ff fd73 	bl	8001df0 <_DoInit>
  SEGGER_RTT_LOCK();
 800230a:	f3ef 8311 	mrs	r3, BASEPRI
 800230e:	f04f 0120 	mov.w	r1, #32
 8002312:	f381 8811 	msr	BASEPRI, r1
 8002316:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7ff ff95 	bl	800224c <SEGGER_RTT_WriteDownBufferNoLock>
 8002322:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800232a:	697b      	ldr	r3, [r7, #20]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2400723c 	.word	0x2400723c

08002338 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <SEGGER_RTT_AllocUpBuffer+0x20>
 8002354:	f7ff fd4c 	bl	8001df0 <_DoInit>
  SEGGER_RTT_LOCK();
 8002358:	f3ef 8311 	mrs	r3, BASEPRI
 800235c:	f04f 0120 	mov.w	r1, #32
 8002360:	f381 8811 	msr	BASEPRI, r1
 8002364:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002366:	4b35      	ldr	r3, [pc, #212]	; (800243c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002368:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800236e:	6939      	ldr	r1, [r7, #16]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	3304      	adds	r3, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3301      	adds	r3, #1
 800238a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	429a      	cmp	r2, r3
 8002394:	dbeb      	blt.n	800236e <SEGGER_RTT_AllocUpBuffer+0x36>
 8002396:	e000      	b.n	800239a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002398:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	da3f      	bge.n	8002424 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80023a4:	6939      	ldr	r1, [r7, #16]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80023b8:	6939      	ldr	r1, [r7, #16]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	440b      	add	r3, r1
 80023c8:	3304      	adds	r3, #4
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80023ce:	6939      	ldr	r1, [r7, #16]
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	3320      	adds	r3, #32
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80023e2:	6939      	ldr	r1, [r7, #16]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	3328      	adds	r3, #40	; 0x28
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80023f6:	6939      	ldr	r1, [r7, #16]
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	3324      	adds	r3, #36	; 0x24
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800240a:	6939      	ldr	r1, [r7, #16]
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	332c      	adds	r3, #44	; 0x2c
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800241e:	f3bf 8f5f 	dmb	sy
 8002422:	e002      	b.n	800242a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
 8002428:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002430:	69fb      	ldr	r3, [r7, #28]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2400723c 	.word	0x2400723c

08002440 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002450:	623b      	str	r3, [r7, #32]
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800245c:	f7ff fcc8 	bl	8001df0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002462:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d82c      	bhi.n	80024c4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800246a:	f3ef 8311 	mrs	r3, BASEPRI
 800246e:	f04f 0120 	mov.w	r1, #32
 8002472:	f381 8811 	msr	BASEPRI, r1
 8002476:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	3360      	adds	r3, #96	; 0x60
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00e      	beq.n	80024ae <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80024b4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
 80024c2:	e002      	b.n	80024ca <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3728      	adds	r7, #40	; 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2400723c 	.word	0x2400723c

080024d8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00f      	beq.n	800250e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80024ee:	e002      	b.n	80024f6 <_EncodeStr+0x1e>
      Len++;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	3301      	adds	r3, #1
 80024f4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f6      	bne.n	80024f0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	d901      	bls.n	800250e <_EncodeStr+0x36>
      Len = Limit;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2bfe      	cmp	r3, #254	; 0xfe
 8002512:	d806      	bhi.n	8002522 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	60fa      	str	r2, [r7, #12]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	e011      	b.n	8002546 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	60fa      	str	r2, [r7, #12]
 8002528:	22ff      	movs	r2, #255	; 0xff
 800252a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	60fa      	str	r2, [r7, #12]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	0a19      	lsrs	r1, r3, #8
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60fa      	str	r2, [r7, #12]
 8002542:	b2ca      	uxtb	r2, r1
 8002544:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800254a:	e00a      	b.n	8002562 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	1c53      	adds	r3, r2, #1
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1c59      	adds	r1, r3, #1
 8002556:	60f9      	str	r1, [r7, #12]
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	701a      	strb	r2, [r3, #0]
    n++;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	429a      	cmp	r2, r3
 8002568:	d3f0      	bcc.n	800254c <_EncodeStr+0x74>
  }
  return pPayload;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3307      	adds	r3, #7
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002596:	4b35      	ldr	r3, [pc, #212]	; (800266c <_HandleIncomingPacket+0xdc>)
 8002598:	7e1b      	ldrb	r3, [r3, #24]
 800259a:	4618      	mov	r0, r3
 800259c:	1cfb      	adds	r3, r7, #3
 800259e:	2201      	movs	r2, #1
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7ff fdcd 	bl	8002140 <SEGGER_RTT_ReadNoLock>
 80025a6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d052      	beq.n	8002654 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d031      	beq.n	8002618 <_HandleIncomingPacket+0x88>
 80025b4:	2b80      	cmp	r3, #128	; 0x80
 80025b6:	dc40      	bgt.n	800263a <_HandleIncomingPacket+0xaa>
 80025b8:	2b07      	cmp	r3, #7
 80025ba:	dc15      	bgt.n	80025e8 <_HandleIncomingPacket+0x58>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	dd3c      	ble.n	800263a <_HandleIncomingPacket+0xaa>
 80025c0:	3b01      	subs	r3, #1
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d839      	bhi.n	800263a <_HandleIncomingPacket+0xaa>
 80025c6:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <_HandleIncomingPacket+0x3c>)
 80025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025cc:	080025ef 	.word	0x080025ef
 80025d0:	080025f5 	.word	0x080025f5
 80025d4:	080025fb 	.word	0x080025fb
 80025d8:	08002601 	.word	0x08002601
 80025dc:	08002607 	.word	0x08002607
 80025e0:	0800260d 	.word	0x0800260d
 80025e4:	08002613 	.word	0x08002613
 80025e8:	2b7f      	cmp	r3, #127	; 0x7f
 80025ea:	d035      	beq.n	8002658 <_HandleIncomingPacket+0xc8>
 80025ec:	e025      	b.n	800263a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80025ee:	f000 fec7 	bl	8003380 <SEGGER_SYSVIEW_Start>
      break;
 80025f2:	e036      	b.n	8002662 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80025f4:	f000 ff80 	bl	80034f8 <SEGGER_SYSVIEW_Stop>
      break;
 80025f8:	e033      	b.n	8002662 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80025fa:	f001 f959 	bl	80038b0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80025fe:	e030      	b.n	8002662 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002600:	f001 f91e 	bl	8003840 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002604:	e02d      	b.n	8002662 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002606:	f000 ff9d 	bl	8003544 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800260a:	e02a      	b.n	8002662 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800260c:	f001 fbdc 	bl	8003dc8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002610:	e027      	b.n	8002662 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002612:	f001 fbbb 	bl	8003d8c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002616:	e024      	b.n	8002662 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <_HandleIncomingPacket+0xdc>)
 800261a:	7e1b      	ldrb	r3, [r3, #24]
 800261c:	4618      	mov	r0, r3
 800261e:	1cfb      	adds	r3, r7, #3
 8002620:	2201      	movs	r2, #1
 8002622:	4619      	mov	r1, r3
 8002624:	f7ff fd8c 	bl	8002140 <SEGGER_RTT_ReadNoLock>
 8002628:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d015      	beq.n	800265c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	4618      	mov	r0, r3
 8002634:	f001 fb2a 	bl	8003c8c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002638:	e010      	b.n	800265c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	b25b      	sxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	da0e      	bge.n	8002660 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <_HandleIncomingPacket+0xdc>)
 8002644:	7e1b      	ldrb	r3, [r3, #24]
 8002646:	4618      	mov	r0, r3
 8002648:	1cfb      	adds	r3, r7, #3
 800264a:	2201      	movs	r2, #1
 800264c:	4619      	mov	r1, r3
 800264e:	f7ff fd77 	bl	8002140 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002652:	e005      	b.n	8002660 <_HandleIncomingPacket+0xd0>
    }
  }
 8002654:	bf00      	nop
 8002656:	e004      	b.n	8002662 <_HandleIncomingPacket+0xd2>
      break;
 8002658:	bf00      	nop
 800265a:	e002      	b.n	8002662 <_HandleIncomingPacket+0xd2>
      break;
 800265c:	bf00      	nop
 800265e:	e000      	b.n	8002662 <_HandleIncomingPacket+0xd2>
      break;
 8002660:	bf00      	nop
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2407f2fc 	.word	0x2407f2fc

08002670 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	; 0x30
 8002674:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002676:	2301      	movs	r3, #1
 8002678:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	3301      	adds	r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002684:	4b32      	ldr	r3, [pc, #200]	; (8002750 <_TrySendOverflowPacket+0xe0>)
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
 800268a:	e00b      	b.n	80026a4 <_TrySendOverflowPacket+0x34>
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	b2da      	uxtb	r2, r3
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	1c59      	adds	r1, r3, #1
 8002694:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	09db      	lsrs	r3, r3, #7
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	2b7f      	cmp	r3, #127	; 0x7f
 80026a8:	d8f0      	bhi.n	800268c <_TrySendOverflowPacket+0x1c>
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <_TrySendOverflowPacket+0xe4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80026c0:	4b23      	ldr	r3, [pc, #140]	; (8002750 <_TrySendOverflowPacket+0xe0>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	e00b      	b.n	80026ec <_TrySendOverflowPacket+0x7c>
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	1c59      	adds	r1, r3, #1
 80026dc:	6279      	str	r1, [r7, #36]	; 0x24
 80026de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	09db      	lsrs	r3, r3, #7
 80026ea:	623b      	str	r3, [r7, #32]
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	2b7f      	cmp	r3, #127	; 0x7f
 80026f0:	d8f0      	bhi.n	80026d4 <_TrySendOverflowPacket+0x64>
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	627a      	str	r2, [r7, #36]	; 0x24
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <_TrySendOverflowPacket+0xe0>)
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	4618      	mov	r0, r3
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	461a      	mov	r2, r3
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	f7fd fde4 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002718:	4603      	mov	r3, r0
 800271a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800271c:	f7ff fade 	bl	8001cdc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <_TrySendOverflowPacket+0xe0>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <_TrySendOverflowPacket+0xe0>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	3b01      	subs	r3, #1
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <_TrySendOverflowPacket+0xe0>)
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e004      	b.n	8002744 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <_TrySendOverflowPacket+0xe0>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	3301      	adds	r3, #1
 8002740:	4a03      	ldr	r2, [pc, #12]	; (8002750 <_TrySendOverflowPacket+0xe0>)
 8002742:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002744:	693b      	ldr	r3, [r7, #16]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3730      	adds	r7, #48	; 0x30
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2407f2fc 	.word	0x2407f2fc
 8002754:	e0001004 	.word	0xe0001004

08002758 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	; 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002764:	4b96      	ldr	r3, [pc, #600]	; (80029c0 <_SendPacket+0x268>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d010      	beq.n	800278e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800276c:	4b94      	ldr	r3, [pc, #592]	; (80029c0 <_SendPacket+0x268>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8130 	beq.w	80029d6 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002776:	4b92      	ldr	r3, [pc, #584]	; (80029c0 <_SendPacket+0x268>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d109      	bne.n	8002792 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800277e:	f7ff ff77 	bl	8002670 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002782:	4b8f      	ldr	r3, [pc, #572]	; (80029c0 <_SendPacket+0x268>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	f040 8127 	bne.w	80029da <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800278c:	e001      	b.n	8002792 <_SendPacket+0x3a>
    goto Send;
 800278e:	bf00      	nop
 8002790:	e000      	b.n	8002794 <_SendPacket+0x3c>
Send:
 8002792:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b1f      	cmp	r3, #31
 8002798:	d809      	bhi.n	80027ae <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800279a:	4b89      	ldr	r3, [pc, #548]	; (80029c0 <_SendPacket+0x268>)
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 8118 	bne.w	80029de <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b17      	cmp	r3, #23
 80027b2:	d807      	bhi.n	80027c4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e0c4      	b.n	800294e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2b7f      	cmp	r3, #127	; 0x7f
 80027d0:	d912      	bls.n	80027f8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	09da      	lsrs	r2, r3, #7
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3b01      	subs	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	3a01      	subs	r2, #1
 80027ea:	60fa      	str	r2, [r7, #12]
 80027ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	e006      	b.n	8002806 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b7e      	cmp	r3, #126	; 0x7e
 800280a:	d807      	bhi.n	800281c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3b01      	subs	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e098      	b.n	800294e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002822:	d212      	bcs.n	800284a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	09da      	lsrs	r2, r3, #7
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3b01      	subs	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	3a01      	subs	r2, #1
 800283c:	60fa      	str	r2, [r7, #12]
 800283e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e081      	b.n	800294e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002850:	d21d      	bcs.n	800288e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	0b9a      	lsrs	r2, r3, #14
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3b01      	subs	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	09db      	lsrs	r3, r3, #7
 8002866:	b2db      	uxtb	r3, r3
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	3a01      	subs	r2, #1
 800286c:	60fa      	str	r2, [r7, #12]
 800286e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	3a01      	subs	r2, #1
 8002880:	60fa      	str	r2, [r7, #12]
 8002882:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002886:	b2da      	uxtb	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e05f      	b.n	800294e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002894:	d228      	bcs.n	80028e8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0d5a      	lsrs	r2, r3, #21
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3b01      	subs	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0b9b      	lsrs	r3, r3, #14
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	3a01      	subs	r2, #1
 80028b0:	60fa      	str	r2, [r7, #12]
 80028b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	09db      	lsrs	r3, r3, #7
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	3a01      	subs	r2, #1
 80028c6:	60fa      	str	r2, [r7, #12]
 80028c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	3a01      	subs	r2, #1
 80028da:	60fa      	str	r2, [r7, #12]
 80028dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e032      	b.n	800294e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0f1a      	lsrs	r2, r3, #28
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0d5b      	lsrs	r3, r3, #21
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	3a01      	subs	r2, #1
 8002902:	60fa      	str	r2, [r7, #12]
 8002904:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0b9b      	lsrs	r3, r3, #14
 8002912:	b2db      	uxtb	r3, r3
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	3a01      	subs	r2, #1
 8002918:	60fa      	str	r2, [r7, #12]
 800291a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	09db      	lsrs	r3, r3, #7
 8002928:	b2db      	uxtb	r3, r3
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	3a01      	subs	r2, #1
 800292e:	60fa      	str	r2, [r7, #12]
 8002930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002934:	b2da      	uxtb	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	3a01      	subs	r2, #1
 8002942:	60fa      	str	r2, [r7, #12]
 8002944:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800294e:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <_SendPacket+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <_SendPacket+0x268>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	e00b      	b.n	8002980 <_SendPacket+0x228>
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	1c59      	adds	r1, r3, #1
 8002970:	6279      	str	r1, [r7, #36]	; 0x24
 8002972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	09db      	lsrs	r3, r3, #7
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	2b7f      	cmp	r3, #127	; 0x7f
 8002984:	d8f0      	bhi.n	8002968 <_SendPacket+0x210>
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	627a      	str	r2, [r7, #36]	; 0x24
 800298c:	6a3a      	ldr	r2, [r7, #32]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <_SendPacket+0x268>)
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	4618      	mov	r0, r3
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	68f9      	ldr	r1, [r7, #12]
 80029a6:	f7fd fc9b 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80029aa:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80029ac:	f7ff f996 	bl	8001cdc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80029b6:	4a02      	ldr	r2, [pc, #8]	; (80029c0 <_SendPacket+0x268>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	60d3      	str	r3, [r2, #12]
 80029bc:	e010      	b.n	80029e0 <_SendPacket+0x288>
 80029be:	bf00      	nop
 80029c0:	2407f2fc 	.word	0x2407f2fc
 80029c4:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <_SendPacket+0x2d8>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <_SendPacket+0x2d8>)
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	e004      	b.n	80029e0 <_SendPacket+0x288>
    goto SendDone;
 80029d6:	bf00      	nop
 80029d8:	e002      	b.n	80029e0 <_SendPacket+0x288>
      goto SendDone;
 80029da:	bf00      	nop
 80029dc:	e000      	b.n	80029e0 <_SendPacket+0x288>
      goto SendDone;
 80029de:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <_SendPacket+0x2d8>)
 80029e2:	7e1b      	ldrb	r3, [r3, #24]
 80029e4:	4619      	mov	r1, r3
 80029e6:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <_SendPacket+0x2dc>)
 80029e8:	460b      	mov	r3, r1
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	440b      	add	r3, r1
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	336c      	adds	r3, #108	; 0x6c
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <_SendPacket+0x2d8>)
 80029f8:	7e1b      	ldrb	r3, [r3, #24]
 80029fa:	4618      	mov	r0, r3
 80029fc:	490d      	ldr	r1, [pc, #52]	; (8002a34 <_SendPacket+0x2dc>)
 80029fe:	4603      	mov	r3, r0
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4403      	add	r3, r0
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	3370      	adds	r3, #112	; 0x70
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d00b      	beq.n	8002a28 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <_SendPacket+0x2d8>)
 8002a12:	789b      	ldrb	r3, [r3, #2]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d107      	bne.n	8002a28 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <_SendPacket+0x2d8>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002a1e:	f7ff fdb7 	bl	8002590 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002a22:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <_SendPacket+0x2d8>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002a28:	bf00      	nop
 8002a2a:	3728      	adds	r7, #40	; 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	2407f2fc 	.word	0x2407f2fc
 8002a34:	2400723c 	.word	0x2400723c

08002a38 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d80a      	bhi.n	8002a68 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	1c59      	adds	r1, r3, #1
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6051      	str	r1, [r2, #4]
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b80      	cmp	r3, #128	; 0x80
 8002a6e:	d15a      	bne.n	8002b26 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	623b      	str	r3, [r7, #32]
 8002a90:	e00b      	b.n	8002aaa <_StoreChar+0x72>
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	1c59      	adds	r1, r3, #1
 8002a9a:	6279      	str	r1, [r7, #36]	; 0x24
 8002a9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	09db      	lsrs	r3, r3, #7
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	2b7f      	cmp	r3, #127	; 0x7f
 8002aae:	d8f0      	bhi.n	8002a92 <_StoreChar+0x5a>
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	627a      	str	r2, [r7, #36]	; 0x24
 8002ab6:	6a3a      	ldr	r2, [r7, #32]
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	e00b      	b.n	8002ae2 <_StoreChar+0xaa>
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	1c59      	adds	r1, r3, #1
 8002ad2:	61f9      	str	r1, [r7, #28]
 8002ad4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	09db      	lsrs	r3, r3, #7
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ae6:	d8f0      	bhi.n	8002aca <_StoreChar+0x92>
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	61fa      	str	r2, [r7, #28]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	221a      	movs	r2, #26
 8002afe:	6939      	ldr	r1, [r7, #16]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fe29 	bl	8002758 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fd34 	bl	8002578 <_PreparePacket>
 8002b10:	4602      	mov	r2, r0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  }
}
 8002b26:	bf00      	nop
 8002b28:	3728      	adds	r7, #40	; 0x28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8002b42:	2301      	movs	r3, #1
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002b4a:	e007      	b.n	8002b5c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8002b4c:	6a3a      	ldr	r2, [r7, #32]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	623b      	str	r3, [r7, #32]
    Width++;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002b5c:	6a3a      	ldr	r2, [r7, #32]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d2f3      	bcs.n	8002b4c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d901      	bls.n	8002b70 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11f      	bne.n	8002bba <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01c      	beq.n	8002bba <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <_PrintUnsigned+0x66>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <_PrintUnsigned+0x66>
        c = '0';
 8002b90:	2330      	movs	r3, #48	; 0x30
 8002b92:	76fb      	strb	r3, [r7, #27]
 8002b94:	e001      	b.n	8002b9a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8002b96:	2320      	movs	r3, #32
 8002b98:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002b9a:	e007      	b.n	8002bac <_PrintUnsigned+0x7c>
        FieldWidth--;
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8002ba2:	7efb      	ldrb	r3, [r7, #27]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff ff46 	bl	8002a38 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <_PrintUnsigned+0x8a>
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d3f0      	bcc.n	8002b9c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d903      	bls.n	8002bc8 <_PrintUnsigned+0x98>
      NumDigits--;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	e009      	b.n	8002bdc <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d200      	bcs.n	8002bdc <_PrintUnsigned+0xac>
        break;
 8002bda:	e005      	b.n	8002be8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	fb02 f303 	mul.w	r3, r2, r3
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002be6:	e7e8      	b.n	8002bba <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8002c00:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <_PrintUnsigned+0x128>)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	4413      	add	r3, r2
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff ff14 	bl	8002a38 <_StoreChar>
    Digit /= Base;
 8002c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e3      	bne.n	8002be8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8002c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d011      	beq.n	8002c4e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c30:	e006      	b.n	8002c40 <_PrintUnsigned+0x110>
        FieldWidth--;
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	3b01      	subs	r3, #1
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8002c38:	2120      	movs	r1, #32
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7ff fefc 	bl	8002a38 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <_PrintUnsigned+0x11e>
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d3f1      	bcc.n	8002c32 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3728      	adds	r7, #40	; 0x28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	08008d40 	.word	0x08008d40

08002c5c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bfb8      	it	lt
 8002c70:	425b      	neglt	r3, r3
 8002c72:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8002c74:	2301      	movs	r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002c78:	e007      	b.n	8002c8a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c82:	613b      	str	r3, [r7, #16]
    Width++;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3301      	adds	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	daf3      	bge.n	8002c7a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d901      	bls.n	8002c9e <_PrintInt+0x42>
    Width = NumDigits;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <_PrintInt+0x5e>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db04      	blt.n	8002cb4 <_PrintInt+0x58>
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <_PrintInt+0x5e>
    FieldWidth--;
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <_PrintInt+0x6e>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <_PrintInt+0x9c>
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d111      	bne.n	8002cf8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00e      	beq.n	8002cf8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002cda:	e006      	b.n	8002cea <_PrintInt+0x8e>
        FieldWidth--;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8002ce2:	2120      	movs	r1, #32
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff fea7 	bl	8002a38 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <_PrintInt+0x9c>
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d3f1      	bcc.n	8002cdc <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	da07      	bge.n	8002d0e <_PrintInt+0xb2>
    v = -v;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	425b      	negs	r3, r3
 8002d02:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8002d04:	212d      	movs	r1, #45	; 0x2d
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff fe96 	bl	8002a38 <_StoreChar>
 8002d0c:	e008      	b.n	8002d20 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8002d18:	212b      	movs	r1, #43	; 0x2b
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7ff fe8c 	bl	8002a38 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d019      	beq.n	8002d5e <_PrintInt+0x102>
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d114      	bne.n	8002d5e <_PrintInt+0x102>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d111      	bne.n	8002d5e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d40:	e006      	b.n	8002d50 <_PrintInt+0xf4>
        FieldWidth--;
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8002d48:	2130      	movs	r1, #48	; 0x30
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f7ff fe74 	bl	8002a38 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <_PrintInt+0x102>
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d3f1      	bcc.n	8002d42 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7ff fedf 	bl	8002b30 <_PrintUnsigned>
}
 8002d72:	bf00      	nop
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b098      	sub	sp, #96	; 0x60
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002d88:	f3ef 8311 	mrs	r3, BASEPRI
 8002d8c:	f04f 0120 	mov.w	r1, #32
 8002d90:	f381 8811 	msr	BASEPRI, r1
 8002d94:	633b      	str	r3, [r7, #48]	; 0x30
 8002d96:	48b7      	ldr	r0, [pc, #732]	; (8003074 <_VPrintTarget+0x2f8>)
 8002d98:	f7ff fbee 	bl	8002578 <_PreparePacket>
 8002d9c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8002d9e:	4bb5      	ldr	r3, [pc, #724]	; (8003074 <_VPrintTarget+0x2f8>)
 8002da0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3301      	adds	r3, #1
 8002dae:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8002dc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8183 	beq.w	80030d2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8002dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dd0:	2b25      	cmp	r3, #37	; 0x25
 8002dd2:	f040 8170 	bne.w	80030b6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8002de6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dea:	3b23      	subs	r3, #35	; 0x23
 8002dec:	2b0d      	cmp	r3, #13
 8002dee:	d83f      	bhi.n	8002e70 <_VPrintTarget+0xf4>
 8002df0:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <_VPrintTarget+0x7c>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e61 	.word	0x08002e61
 8002dfc:	08002e71 	.word	0x08002e71
 8002e00:	08002e71 	.word	0x08002e71
 8002e04:	08002e71 	.word	0x08002e71
 8002e08:	08002e71 	.word	0x08002e71
 8002e0c:	08002e71 	.word	0x08002e71
 8002e10:	08002e71 	.word	0x08002e71
 8002e14:	08002e71 	.word	0x08002e71
 8002e18:	08002e51 	.word	0x08002e51
 8002e1c:	08002e71 	.word	0x08002e71
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e71 	.word	0x08002e71
 8002e28:	08002e71 	.word	0x08002e71
 8002e2c:	08002e41 	.word	0x08002e41
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8002e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	e01a      	b.n	8002e76 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8002e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e42:	f043 0302 	orr.w	r3, r3, #2
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	e012      	b.n	8002e76 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8002e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e00a      	b.n	8002e76 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8002e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	e002      	b.n	8002e76 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8002e70:	2300      	movs	r3, #0
 8002e72:	653b      	str	r3, [r7, #80]	; 0x50
 8002e74:	bf00      	nop
        }
      } while (v);
 8002e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1b0      	bne.n	8002dde <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8002e88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e8c:	2b2f      	cmp	r3, #47	; 0x2f
 8002e8e:	d912      	bls.n	8002eb6 <_VPrintTarget+0x13a>
 8002e90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e94:	2b39      	cmp	r3, #57	; 0x39
 8002e96:	d80e      	bhi.n	8002eb6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8002e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b30      	subs	r3, #48	; 0x30
 8002eb2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8002eb4:	e7e4      	b.n	8002e80 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8002ec2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ec8:	d11d      	bne.n	8002f06 <_VPrintTarget+0x18a>
        sFormat++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8002ed8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002edc:	2b2f      	cmp	r3, #47	; 0x2f
 8002ede:	d912      	bls.n	8002f06 <_VPrintTarget+0x18a>
 8002ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ee4:	2b39      	cmp	r3, #57	; 0x39
 8002ee6:	d80e      	bhi.n	8002f06 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3301      	adds	r3, #1
 8002eec:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8002eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002efe:	4413      	add	r3, r2
 8002f00:	3b30      	subs	r3, #48	; 0x30
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8002f04:	e7e4      	b.n	8002ed0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8002f0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f12:	2b6c      	cmp	r3, #108	; 0x6c
 8002f14:	d003      	beq.n	8002f1e <_VPrintTarget+0x1a2>
 8002f16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f1a:	2b68      	cmp	r3, #104	; 0x68
 8002f1c:	d107      	bne.n	8002f2e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8002f2c:	e7ef      	b.n	8002f0e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8002f2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f32:	2b25      	cmp	r3, #37	; 0x25
 8002f34:	f000 80b3 	beq.w	800309e <_VPrintTarget+0x322>
 8002f38:	2b25      	cmp	r3, #37	; 0x25
 8002f3a:	f2c0 80b7 	blt.w	80030ac <_VPrintTarget+0x330>
 8002f3e:	2b78      	cmp	r3, #120	; 0x78
 8002f40:	f300 80b4 	bgt.w	80030ac <_VPrintTarget+0x330>
 8002f44:	2b58      	cmp	r3, #88	; 0x58
 8002f46:	f2c0 80b1 	blt.w	80030ac <_VPrintTarget+0x330>
 8002f4a:	3b58      	subs	r3, #88	; 0x58
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	f200 80ad 	bhi.w	80030ac <_VPrintTarget+0x330>
 8002f52:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <_VPrintTarget+0x1dc>)
 8002f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f58:	0800304f 	.word	0x0800304f
 8002f5c:	080030ad 	.word	0x080030ad
 8002f60:	080030ad 	.word	0x080030ad
 8002f64:	080030ad 	.word	0x080030ad
 8002f68:	080030ad 	.word	0x080030ad
 8002f6c:	080030ad 	.word	0x080030ad
 8002f70:	080030ad 	.word	0x080030ad
 8002f74:	080030ad 	.word	0x080030ad
 8002f78:	080030ad 	.word	0x080030ad
 8002f7c:	080030ad 	.word	0x080030ad
 8002f80:	080030ad 	.word	0x080030ad
 8002f84:	08002fdd 	.word	0x08002fdd
 8002f88:	08003003 	.word	0x08003003
 8002f8c:	080030ad 	.word	0x080030ad
 8002f90:	080030ad 	.word	0x080030ad
 8002f94:	080030ad 	.word	0x080030ad
 8002f98:	080030ad 	.word	0x080030ad
 8002f9c:	080030ad 	.word	0x080030ad
 8002fa0:	080030ad 	.word	0x080030ad
 8002fa4:	080030ad 	.word	0x080030ad
 8002fa8:	080030ad 	.word	0x080030ad
 8002fac:	080030ad 	.word	0x080030ad
 8002fb0:	080030ad 	.word	0x080030ad
 8002fb4:	080030ad 	.word	0x080030ad
 8002fb8:	08003079 	.word	0x08003079
 8002fbc:	080030ad 	.word	0x080030ad
 8002fc0:	080030ad 	.word	0x080030ad
 8002fc4:	080030ad 	.word	0x080030ad
 8002fc8:	080030ad 	.word	0x080030ad
 8002fcc:	08003029 	.word	0x08003029
 8002fd0:	080030ad 	.word	0x080030ad
 8002fd4:	080030ad 	.word	0x080030ad
 8002fd8:	0800304f 	.word	0x0800304f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1d19      	adds	r1, r3, #4
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6011      	str	r1, [r2, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8002fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8002ff0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fd1c 	bl	8002a38 <_StoreChar>
        break;
 8003000:	e055      	b.n	80030ae <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	1d19      	adds	r1, r3, #4
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6011      	str	r1, [r2, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003010:	f107 0014 	add.w	r0, r7, #20
 8003014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301e:	220a      	movs	r2, #10
 8003020:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003022:	f7ff fe1b 	bl	8002c5c <_PrintInt>
        break;
 8003026:	e042      	b.n	80030ae <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	1d19      	adds	r1, r3, #4
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6011      	str	r1, [r2, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003036:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003038:	f107 0014 	add.w	r0, r7, #20
 800303c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003046:	220a      	movs	r2, #10
 8003048:	f7ff fd72 	bl	8002b30 <_PrintUnsigned>
        break;
 800304c:	e02f      	b.n	80030ae <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	1d19      	adds	r1, r3, #4
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6011      	str	r1, [r2, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800305c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800305e:	f107 0014 	add.w	r0, r7, #20
 8003062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306c:	2210      	movs	r2, #16
 800306e:	f7ff fd5f 	bl	8002b30 <_PrintUnsigned>
        break;
 8003072:	e01c      	b.n	80030ae <_VPrintTarget+0x332>
 8003074:	2407f32c 	.word	0x2407f32c
      case 'p':
        v = va_arg(*pParamList, int);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	1d19      	adds	r1, r3, #4
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6011      	str	r1, [r2, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8003086:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003088:	f107 0014 	add.w	r0, r7, #20
 800308c:	2300      	movs	r3, #0
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	2308      	movs	r3, #8
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2308      	movs	r3, #8
 8003096:	2210      	movs	r2, #16
 8003098:	f7ff fd4a 	bl	8002b30 <_PrintUnsigned>
        break;
 800309c:	e007      	b.n	80030ae <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	2125      	movs	r1, #37	; 0x25
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fcc7 	bl	8002a38 <_StoreChar>
        break;
 80030aa:	e000      	b.n	80030ae <_VPrintTarget+0x332>
      default:
        break;
 80030ac:	bf00      	nop
      }
      sFormat++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3301      	adds	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e007      	b.n	80030c6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80030b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80030ba:	f107 0314 	add.w	r3, r7, #20
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fcb9 	bl	8002a38 <_StoreChar>
    }
  } while (*sFormat);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f47f ae72 	bne.w	8002db4 <_VPrintTarget+0x38>
 80030d0:	e000      	b.n	80030d4 <_VPrintTarget+0x358>
      break;
 80030d2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d041      	beq.n	800315e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	643b      	str	r3, [r7, #64]	; 0x40
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ea:	e00b      	b.n	8003104 <_VPrintTarget+0x388>
 80030ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f2:	1c59      	adds	r1, r3, #1
 80030f4:	6439      	str	r1, [r7, #64]	; 0x40
 80030f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003100:	09db      	lsrs	r3, r3, #7
 8003102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003106:	2b7f      	cmp	r3, #127	; 0x7f
 8003108:	d8f0      	bhi.n	80030ec <_VPrintTarget+0x370>
 800310a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	643a      	str	r2, [r7, #64]	; 0x40
 8003110:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003118:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
 800311e:	2300      	movs	r3, #0
 8003120:	637b      	str	r3, [r7, #52]	; 0x34
 8003122:	e00b      	b.n	800313c <_VPrintTarget+0x3c0>
 8003124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003126:	b2da      	uxtb	r2, r3
 8003128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312a:	1c59      	adds	r1, r3, #1
 800312c:	63b9      	str	r1, [r7, #56]	; 0x38
 800312e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003138:	09db      	lsrs	r3, r3, #7
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
 800313c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313e:	2b7f      	cmp	r3, #127	; 0x7f
 8003140:	d8f0      	bhi.n	8003124 <_VPrintTarget+0x3a8>
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	63ba      	str	r2, [r7, #56]	; 0x38
 8003148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	69b9      	ldr	r1, [r7, #24]
 8003156:	221a      	movs	r2, #26
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fafd 	bl	8002758 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8003164:	bf00      	nop
 8003166:	3758      	adds	r7, #88	; 0x58
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800317a:	2300      	movs	r3, #0
 800317c:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <SEGGER_SYSVIEW_Init+0x74>)
 800317e:	4919      	ldr	r1, [pc, #100]	; (80031e4 <SEGGER_SYSVIEW_Init+0x78>)
 8003180:	4819      	ldr	r0, [pc, #100]	; (80031e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8003182:	f7ff f8d9 	bl	8002338 <SEGGER_RTT_AllocUpBuffer>
 8003186:	4603      	mov	r3, r0
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <SEGGER_SYSVIEW_Init+0x80>)
 800318c:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800318e:	4b17      	ldr	r3, [pc, #92]	; (80031ec <SEGGER_SYSVIEW_Init+0x80>)
 8003190:	785a      	ldrb	r2, [r3, #1]
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <SEGGER_SYSVIEW_Init+0x80>)
 8003194:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <SEGGER_SYSVIEW_Init+0x80>)
 8003198:	7e1b      	ldrb	r3, [r3, #24]
 800319a:	4618      	mov	r0, r3
 800319c:	2300      	movs	r3, #0
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2308      	movs	r3, #8
 80031a2:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <SEGGER_SYSVIEW_Init+0x84>)
 80031a4:	4910      	ldr	r1, [pc, #64]	; (80031e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80031a6:	f7ff f94b 	bl	8002440 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <SEGGER_SYSVIEW_Init+0x80>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <SEGGER_SYSVIEW_Init+0x88>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0d      	ldr	r2, [pc, #52]	; (80031ec <SEGGER_SYSVIEW_Init+0x80>)
 80031b6:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80031b8:	4a0c      	ldr	r2, [pc, #48]	; (80031ec <SEGGER_SYSVIEW_Init+0x80>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <SEGGER_SYSVIEW_Init+0x80>)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80031c4:	4a09      	ldr	r2, [pc, #36]	; (80031ec <SEGGER_SYSVIEW_Init+0x80>)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80031ca:	4a08      	ldr	r2, [pc, #32]	; (80031ec <SEGGER_SYSVIEW_Init+0x80>)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <SEGGER_SYSVIEW_Init+0x80>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	00077c00 	.word	0x00077c00
 80031e4:	240076f4 	.word	0x240076f4
 80031e8:	08008c28 	.word	0x08008c28
 80031ec:	2407f2fc 	.word	0x2407f2fc
 80031f0:	2407f2f4 	.word	0x2407f2f4
 80031f4:	e0001004 	.word	0xe0001004

080031f8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003200:	4a04      	ldr	r2, [pc, #16]	; (8003214 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6113      	str	r3, [r2, #16]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	2407f2fc 	.word	0x2407f2fc

08003218 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003220:	f3ef 8311 	mrs	r3, BASEPRI
 8003224:	f04f 0120 	mov.w	r1, #32
 8003228:	f381 8811 	msr	BASEPRI, r1
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4808      	ldr	r0, [pc, #32]	; (8003250 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003230:	f7ff f9a2 	bl	8002578 <_PreparePacket>
 8003234:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	68b8      	ldr	r0, [r7, #8]
 800323c:	f7ff fa8c 	bl	8002758 <_SendPacket>
  RECORD_END();
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f383 8811 	msr	BASEPRI, r3
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	2407f32c 	.word	0x2407f32c

08003254 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800325e:	f3ef 8311 	mrs	r3, BASEPRI
 8003262:	f04f 0120 	mov.w	r1, #32
 8003266:	f381 8811 	msr	BASEPRI, r1
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	4816      	ldr	r0, [pc, #88]	; (80032c8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800326e:	f7ff f983 	bl	8002578 <_PreparePacket>
 8003272:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	e00b      	b.n	800329a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	1c59      	adds	r1, r3, #1
 800328a:	61f9      	str	r1, [r7, #28]
 800328c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	09db      	lsrs	r3, r3, #7
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b7f      	cmp	r3, #127	; 0x7f
 800329e:	d8f0      	bhi.n	8003282 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	61fa      	str	r2, [r7, #28]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	6938      	ldr	r0, [r7, #16]
 80032b6:	f7ff fa4f 	bl	8002758 <_SendPacket>
  RECORD_END();
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f383 8811 	msr	BASEPRI, r3
}
 80032c0:	bf00      	nop
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	2407f32c 	.word	0x2407f32c

080032cc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08c      	sub	sp, #48	; 0x30
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80032d8:	f3ef 8311 	mrs	r3, BASEPRI
 80032dc:	f04f 0120 	mov.w	r1, #32
 80032e0:	f381 8811 	msr	BASEPRI, r1
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	4825      	ldr	r0, [pc, #148]	; (800337c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80032e8:	f7ff f946 	bl	8002578 <_PreparePacket>
 80032ec:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032fa:	e00b      	b.n	8003314 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003302:	1c59      	adds	r1, r3, #1
 8003304:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	09db      	lsrs	r3, r3, #7
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	2b7f      	cmp	r3, #127	; 0x7f
 8003318:	d8f0      	bhi.n	80032fc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	623b      	str	r3, [r7, #32]
 8003332:	e00b      	b.n	800334c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	1c59      	adds	r1, r3, #1
 800333c:	6279      	str	r1, [r7, #36]	; 0x24
 800333e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	09db      	lsrs	r3, r3, #7
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	2b7f      	cmp	r3, #127	; 0x7f
 8003350:	d8f0      	bhi.n	8003334 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	627a      	str	r2, [r7, #36]	; 0x24
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	6979      	ldr	r1, [r7, #20]
 8003366:	69b8      	ldr	r0, [r7, #24]
 8003368:	f7ff f9f6 	bl	8002758 <_SendPacket>
  RECORD_END();
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f383 8811 	msr	BASEPRI, r3
}
 8003372:	bf00      	nop
 8003374:	3730      	adds	r7, #48	; 0x30
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	2407f32c 	.word	0x2407f32c

08003380 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b08c      	sub	sp, #48	; 0x30
 8003384:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003386:	4b59      	ldr	r3, [pc, #356]	; (80034ec <SEGGER_SYSVIEW_Start+0x16c>)
 8003388:	2201      	movs	r2, #1
 800338a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800338c:	f3ef 8311 	mrs	r3, BASEPRI
 8003390:	f04f 0120 	mov.w	r1, #32
 8003394:	f381 8811 	msr	BASEPRI, r1
 8003398:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800339a:	4b54      	ldr	r3, [pc, #336]	; (80034ec <SEGGER_SYSVIEW_Start+0x16c>)
 800339c:	785b      	ldrb	r3, [r3, #1]
 800339e:	220a      	movs	r2, #10
 80033a0:	4953      	ldr	r1, [pc, #332]	; (80034f0 <SEGGER_SYSVIEW_Start+0x170>)
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fc ff9c 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80033ae:	f7fe fc95 	bl	8001cdc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80033b2:	200a      	movs	r0, #10
 80033b4:	f7ff ff30 	bl	8003218 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80033b8:	f3ef 8311 	mrs	r3, BASEPRI
 80033bc:	f04f 0120 	mov.w	r1, #32
 80033c0:	f381 8811 	msr	BASEPRI, r1
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	484b      	ldr	r0, [pc, #300]	; (80034f4 <SEGGER_SYSVIEW_Start+0x174>)
 80033c8:	f7ff f8d6 	bl	8002578 <_PreparePacket>
 80033cc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d6:	4b45      	ldr	r3, [pc, #276]	; (80034ec <SEGGER_SYSVIEW_Start+0x16c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
 80033dc:	e00b      	b.n	80033f6 <SEGGER_SYSVIEW_Start+0x76>
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	1c59      	adds	r1, r3, #1
 80033e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80033e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	09db      	lsrs	r3, r3, #7
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	2b7f      	cmp	r3, #127	; 0x7f
 80033fa:	d8f0      	bhi.n	80033de <SEGGER_SYSVIEW_Start+0x5e>
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	4b36      	ldr	r3, [pc, #216]	; (80034ec <SEGGER_SYSVIEW_Start+0x16c>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	e00b      	b.n	8003430 <SEGGER_SYSVIEW_Start+0xb0>
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	b2da      	uxtb	r2, r3
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	1c59      	adds	r1, r3, #1
 8003420:	6279      	str	r1, [r7, #36]	; 0x24
 8003422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	09db      	lsrs	r3, r3, #7
 800342e:	623b      	str	r3, [r7, #32]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2b7f      	cmp	r3, #127	; 0x7f
 8003434:	d8f0      	bhi.n	8003418 <SEGGER_SYSVIEW_Start+0x98>
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	627a      	str	r2, [r7, #36]	; 0x24
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	4b28      	ldr	r3, [pc, #160]	; (80034ec <SEGGER_SYSVIEW_Start+0x16c>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e00b      	b.n	800346a <SEGGER_SYSVIEW_Start+0xea>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	1c59      	adds	r1, r3, #1
 800345a:	61f9      	str	r1, [r7, #28]
 800345c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	09db      	lsrs	r3, r3, #7
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b7f      	cmp	r3, #127	; 0x7f
 800346e:	d8f0      	bhi.n	8003452 <SEGGER_SYSVIEW_Start+0xd2>
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	61fa      	str	r2, [r7, #28]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	e00b      	b.n	80034a2 <SEGGER_SYSVIEW_Start+0x122>
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	1c59      	adds	r1, r3, #1
 8003492:	6179      	str	r1, [r7, #20]
 8003494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	09db      	lsrs	r3, r3, #7
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b7f      	cmp	r3, #127	; 0x7f
 80034a6:	d8f0      	bhi.n	800348a <SEGGER_SYSVIEW_Start+0x10a>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	617a      	str	r2, [r7, #20]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80034b8:	2218      	movs	r2, #24
 80034ba:	6839      	ldr	r1, [r7, #0]
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff f94b 	bl	8002758 <_SendPacket>
      RECORD_END();
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <SEGGER_SYSVIEW_Start+0x16c>)
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <SEGGER_SYSVIEW_Start+0x16c>)
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80034d6:	f000 f9eb 	bl	80038b0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80034da:	f000 f9b1 	bl	8003840 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80034de:	f000 fc73 	bl	8003dc8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80034e2:	bf00      	nop
 80034e4:	3730      	adds	r7, #48	; 0x30
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2407f2fc 	.word	0x2407f2fc
 80034f0:	08008d34 	.word	0x08008d34
 80034f4:	2407f32c 	.word	0x2407f32c

080034f8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80034fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003502:	f04f 0120 	mov.w	r1, #32
 8003506:	f381 8811 	msr	BASEPRI, r1
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	480b      	ldr	r0, [pc, #44]	; (800353c <SEGGER_SYSVIEW_Stop+0x44>)
 800350e:	f7ff f833 	bl	8002578 <_PreparePacket>
 8003512:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <SEGGER_SYSVIEW_Stop+0x48>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d007      	beq.n	800352c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800351c:	220b      	movs	r2, #11
 800351e:	6839      	ldr	r1, [r7, #0]
 8003520:	6838      	ldr	r0, [r7, #0]
 8003522:	f7ff f919 	bl	8002758 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <SEGGER_SYSVIEW_Stop+0x48>)
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f383 8811 	msr	BASEPRI, r3
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	2407f32c 	.word	0x2407f32c
 8003540:	2407f2fc 	.word	0x2407f2fc

08003544 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b08c      	sub	sp, #48	; 0x30
 8003548:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800354a:	f3ef 8311 	mrs	r3, BASEPRI
 800354e:	f04f 0120 	mov.w	r1, #32
 8003552:	f381 8811 	msr	BASEPRI, r1
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	4845      	ldr	r0, [pc, #276]	; (8003670 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800355a:	f7ff f80d 	bl	8002578 <_PreparePacket>
 800355e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003568:	4b42      	ldr	r3, [pc, #264]	; (8003674 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
 800356e:	e00b      	b.n	8003588 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	b2da      	uxtb	r2, r3
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003576:	1c59      	adds	r1, r3, #1
 8003578:	62f9      	str	r1, [r7, #44]	; 0x2c
 800357a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	09db      	lsrs	r3, r3, #7
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	2b7f      	cmp	r3, #127	; 0x7f
 800358c:	d8f0      	bhi.n	8003570 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
 80035a2:	4b34      	ldr	r3, [pc, #208]	; (8003674 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	e00b      	b.n	80035c2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	1c59      	adds	r1, r3, #1
 80035b2:	6279      	str	r1, [r7, #36]	; 0x24
 80035b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	09db      	lsrs	r3, r3, #7
 80035c0:	623b      	str	r3, [r7, #32]
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	2b7f      	cmp	r3, #127	; 0x7f
 80035c6:	d8f0      	bhi.n	80035aa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	627a      	str	r2, [r7, #36]	; 0x24
 80035ce:	6a3a      	ldr	r2, [r7, #32]
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	e00b      	b.n	80035fc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	1c59      	adds	r1, r3, #1
 80035ec:	61f9      	str	r1, [r7, #28]
 80035ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	09db      	lsrs	r3, r3, #7
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003600:	d8f0      	bhi.n	80035e4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	61fa      	str	r2, [r7, #28]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	e00b      	b.n	8003634 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	1c59      	adds	r1, r3, #1
 8003624:	6179      	str	r1, [r7, #20]
 8003626:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	09db      	lsrs	r3, r3, #7
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b7f      	cmp	r3, #127	; 0x7f
 8003638:	d8f0      	bhi.n	800361c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	617a      	str	r2, [r7, #20]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800364a:	2218      	movs	r2, #24
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	68b8      	ldr	r0, [r7, #8]
 8003650:	f7ff f882 	bl	8002758 <_SendPacket>
  RECORD_END();
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003662:	4b04      	ldr	r3, [pc, #16]	; (8003674 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	4798      	blx	r3
  }
}
 8003668:	bf00      	nop
 800366a:	3730      	adds	r7, #48	; 0x30
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	2407f32c 	.word	0x2407f32c
 8003674:	2407f2fc 	.word	0x2407f2fc

08003678 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b092      	sub	sp, #72	; 0x48
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003680:	f3ef 8311 	mrs	r3, BASEPRI
 8003684:	f04f 0120 	mov.w	r1, #32
 8003688:	f381 8811 	msr	BASEPRI, r1
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	486a      	ldr	r0, [pc, #424]	; (8003838 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003690:	f7fe ff72 	bl	8002578 <_PreparePacket>
 8003694:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	647b      	str	r3, [r7, #68]	; 0x44
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b66      	ldr	r3, [pc, #408]	; (800383c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
 80036aa:	e00b      	b.n	80036c4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80036ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	6479      	str	r1, [r7, #68]	; 0x44
 80036b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c0:	09db      	lsrs	r3, r3, #7
 80036c2:	643b      	str	r3, [r7, #64]	; 0x40
 80036c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c6:	2b7f      	cmp	r3, #127	; 0x7f
 80036c8:	d8f0      	bhi.n	80036ac <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80036ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	647a      	str	r2, [r7, #68]	; 0x44
 80036d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e4:	e00b      	b.n	80036fe <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ec:	1c59      	adds	r1, r3, #1
 80036ee:	63f9      	str	r1, [r7, #60]	; 0x3c
 80036f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	09db      	lsrs	r3, r3, #7
 80036fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	2b7f      	cmp	r3, #127	; 0x7f
 8003702:	d8f0      	bhi.n	80036e6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	63fa      	str	r2, [r7, #60]	; 0x3c
 800370a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003712:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	4619      	mov	r1, r3
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f7fe fedb 	bl	80024d8 <_EncodeStr>
 8003722:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003724:	2209      	movs	r2, #9
 8003726:	68f9      	ldr	r1, [r7, #12]
 8003728:	6938      	ldr	r0, [r7, #16]
 800372a:	f7ff f815 	bl	8002758 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b40      	ldr	r3, [pc, #256]	; (800383c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
 8003742:	e00b      	b.n	800375c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	b2da      	uxtb	r2, r3
 8003748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374a:	1c59      	adds	r1, r3, #1
 800374c:	6379      	str	r1, [r7, #52]	; 0x34
 800374e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	09db      	lsrs	r3, r3, #7
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	2b7f      	cmp	r3, #127	; 0x7f
 8003760:	d8f0      	bhi.n	8003744 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	637a      	str	r2, [r7, #52]	; 0x34
 8003768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003770:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
 800377c:	e00b      	b.n	8003796 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	1c59      	adds	r1, r3, #1
 8003786:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003788:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	09db      	lsrs	r3, r3, #7
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	2b7f      	cmp	r3, #127	; 0x7f
 800379a:	d8f0      	bhi.n	800377e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	e00b      	b.n	80037d0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	1c59      	adds	r1, r3, #1
 80037c0:	6279      	str	r1, [r7, #36]	; 0x24
 80037c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	09db      	lsrs	r3, r3, #7
 80037ce:	623b      	str	r3, [r7, #32]
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	2b7f      	cmp	r3, #127	; 0x7f
 80037d4:	d8f0      	bhi.n	80037b8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	627a      	str	r2, [r7, #36]	; 0x24
 80037dc:	6a3a      	ldr	r2, [r7, #32]
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e00b      	b.n	8003808 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	1c59      	adds	r1, r3, #1
 80037f8:	61f9      	str	r1, [r7, #28]
 80037fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	09db      	lsrs	r3, r3, #7
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b7f      	cmp	r3, #127	; 0x7f
 800380c:	d8f0      	bhi.n	80037f0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	61fa      	str	r2, [r7, #28]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800381e:	2215      	movs	r2, #21
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	6938      	ldr	r0, [r7, #16]
 8003824:	f7fe ff98 	bl	8002758 <_SendPacket>
  RECORD_END();
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f383 8811 	msr	BASEPRI, r3
}
 800382e:	bf00      	nop
 8003830:	3748      	adds	r7, #72	; 0x48
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	2407f32c 	.word	0x2407f32c
 800383c:	2407f2fc 	.word	0x2407f2fc

08003840 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003856:	4b03      	ldr	r3, [pc, #12]	; (8003864 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4798      	blx	r3
  }
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2407f2fc 	.word	0x2407f2fc

08003868 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003870:	f3ef 8311 	mrs	r3, BASEPRI
 8003874:	f04f 0120 	mov.w	r1, #32
 8003878:	f381 8811 	msr	BASEPRI, r1
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	480b      	ldr	r0, [pc, #44]	; (80038ac <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003880:	f7fe fe7a 	bl	8002578 <_PreparePacket>
 8003884:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	6938      	ldr	r0, [r7, #16]
 800388c:	f7fe fe24 	bl	80024d8 <_EncodeStr>
 8003890:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003892:	220e      	movs	r2, #14
 8003894:	68f9      	ldr	r1, [r7, #12]
 8003896:	6938      	ldr	r0, [r7, #16]
 8003898:	f7fe ff5e 	bl	8002758 <_SendPacket>
  RECORD_END();
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f383 8811 	msr	BASEPRI, r3
}
 80038a2:	bf00      	nop
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	2407f32c 	.word	0x2407f32c

080038b0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01a      	beq.n	80038f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80038be:	4b13      	ldr	r3, [pc, #76]	; (800390c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4798      	blx	r3
 80038d0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80038d4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80038d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	000a      	movs	r2, r1
 80038e4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80038e6:	4613      	mov	r3, r2
 80038e8:	461a      	mov	r2, r3
 80038ea:	4621      	mov	r1, r4
 80038ec:	200d      	movs	r0, #13
 80038ee:	f7ff fced 	bl	80032cc <SEGGER_SYSVIEW_RecordU32x2>
 80038f2:	e006      	b.n	8003902 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4619      	mov	r1, r3
 80038fa:	200c      	movs	r0, #12
 80038fc:	f7ff fcaa 	bl	8003254 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bd90      	pop	{r4, r7, pc}
 800390a:	bf00      	nop
 800390c:	2407f2fc 	.word	0x2407f2fc
 8003910:	e0001004 	.word	0xe0001004

08003914 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800391a:	f3ef 8311 	mrs	r3, BASEPRI
 800391e:	f04f 0120 	mov.w	r1, #32
 8003922:	f381 8811 	msr	BASEPRI, r1
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	4819      	ldr	r0, [pc, #100]	; (8003990 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800392a:	f7fe fe25 	bl	8002578 <_PreparePacket>
 800392e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003934:	4b17      	ldr	r3, [pc, #92]	; (8003994 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	e00b      	b.n	8003960 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	b2da      	uxtb	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	1c59      	adds	r1, r3, #1
 8003950:	6179      	str	r1, [r7, #20]
 8003952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	09db      	lsrs	r3, r3, #7
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b7f      	cmp	r3, #127	; 0x7f
 8003964:	d8f0      	bhi.n	8003948 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	617a      	str	r2, [r7, #20]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003976:	2202      	movs	r2, #2
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	68b8      	ldr	r0, [r7, #8]
 800397c:	f7fe feec 	bl	8002758 <_SendPacket>
  RECORD_END();
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f383 8811 	msr	BASEPRI, r3
}
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	2407f32c 	.word	0x2407f32c
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800399e:	f3ef 8311 	mrs	r3, BASEPRI
 80039a2:	f04f 0120 	mov.w	r1, #32
 80039a6:	f381 8811 	msr	BASEPRI, r1
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	4807      	ldr	r0, [pc, #28]	; (80039cc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80039ae:	f7fe fde3 	bl	8002578 <_PreparePacket>
 80039b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80039b4:	2203      	movs	r2, #3
 80039b6:	6839      	ldr	r1, [r7, #0]
 80039b8:	6838      	ldr	r0, [r7, #0]
 80039ba:	f7fe fecd 	bl	8002758 <_SendPacket>
  RECORD_END();
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f383 8811 	msr	BASEPRI, r3
}
 80039c4:	bf00      	nop
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	2407f32c 	.word	0x2407f32c

080039d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80039d6:	f3ef 8311 	mrs	r3, BASEPRI
 80039da:	f04f 0120 	mov.w	r1, #32
 80039de:	f381 8811 	msr	BASEPRI, r1
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	4807      	ldr	r0, [pc, #28]	; (8003a04 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80039e6:	f7fe fdc7 	bl	8002578 <_PreparePacket>
 80039ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80039ec:	2212      	movs	r2, #18
 80039ee:	6839      	ldr	r1, [r7, #0]
 80039f0:	6838      	ldr	r0, [r7, #0]
 80039f2:	f7fe feb1 	bl	8002758 <_SendPacket>
  RECORD_END();
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f383 8811 	msr	BASEPRI, r3
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	2407f32c 	.word	0x2407f32c

08003a08 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003a0e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a12:	f04f 0120 	mov.w	r1, #32
 8003a16:	f381 8811 	msr	BASEPRI, r1
 8003a1a:	607b      	str	r3, [r7, #4]
 8003a1c:	4807      	ldr	r0, [pc, #28]	; (8003a3c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003a1e:	f7fe fdab 	bl	8002578 <_PreparePacket>
 8003a22:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003a24:	2211      	movs	r2, #17
 8003a26:	6839      	ldr	r1, [r7, #0]
 8003a28:	6838      	ldr	r0, [r7, #0]
 8003a2a:	f7fe fe95 	bl	8002758 <_SendPacket>
  RECORD_END();
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f383 8811 	msr	BASEPRI, r3
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2407f32c 	.word	0x2407f32c

08003a40 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003a48:	f3ef 8311 	mrs	r3, BASEPRI
 8003a4c:	f04f 0120 	mov.w	r1, #32
 8003a50:	f381 8811 	msr	BASEPRI, r1
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	4819      	ldr	r0, [pc, #100]	; (8003abc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003a58:	f7fe fd8e 	bl	8002578 <_PreparePacket>
 8003a5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003a62:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	e00b      	b.n	8003a8e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	1c59      	adds	r1, r3, #1
 8003a7e:	61f9      	str	r1, [r7, #28]
 8003a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	09db      	lsrs	r3, r3, #7
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b7f      	cmp	r3, #127	; 0x7f
 8003a92:	d8f0      	bhi.n	8003a76 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	61fa      	str	r2, [r7, #28]
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	6938      	ldr	r0, [r7, #16]
 8003aaa:	f7fe fe55 	bl	8002758 <_SendPacket>
  RECORD_END();
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f383 8811 	msr	BASEPRI, r3
}
 8003ab4:	bf00      	nop
 8003ab6:	3720      	adds	r7, #32
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	2407f32c 	.word	0x2407f32c
 8003ac0:	2407f2fc 	.word	0x2407f2fc

08003ac4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003acc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ad0:	f04f 0120 	mov.w	r1, #32
 8003ad4:	f381 8811 	msr	BASEPRI, r1
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	4819      	ldr	r0, [pc, #100]	; (8003b40 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003adc:	f7fe fd4c 	bl	8002578 <_PreparePacket>
 8003ae0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	e00b      	b.n	8003b12 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	1c59      	adds	r1, r3, #1
 8003b02:	61f9      	str	r1, [r7, #28]
 8003b04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	09db      	lsrs	r3, r3, #7
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b7f      	cmp	r3, #127	; 0x7f
 8003b16:	d8f0      	bhi.n	8003afa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	61fa      	str	r2, [r7, #28]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003b28:	2204      	movs	r2, #4
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	6938      	ldr	r0, [r7, #16]
 8003b2e:	f7fe fe13 	bl	8002758 <_SendPacket>
  RECORD_END();
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f383 8811 	msr	BASEPRI, r3
}
 8003b38:	bf00      	nop
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	2407f32c 	.word	0x2407f32c
 8003b44:	2407f2fc 	.word	0x2407f2fc

08003b48 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003b50:	f3ef 8311 	mrs	r3, BASEPRI
 8003b54:	f04f 0120 	mov.w	r1, #32
 8003b58:	f381 8811 	msr	BASEPRI, r1
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	4819      	ldr	r0, [pc, #100]	; (8003bc4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003b60:	f7fe fd0a 	bl	8002578 <_PreparePacket>
 8003b64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003b6a:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	e00b      	b.n	8003b96 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	1c59      	adds	r1, r3, #1
 8003b86:	61f9      	str	r1, [r7, #28]
 8003b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	09db      	lsrs	r3, r3, #7
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b7f      	cmp	r3, #127	; 0x7f
 8003b9a:	d8f0      	bhi.n	8003b7e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	61fa      	str	r2, [r7, #28]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003bac:	2206      	movs	r2, #6
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	6938      	ldr	r0, [r7, #16]
 8003bb2:	f7fe fdd1 	bl	8002758 <_SendPacket>
  RECORD_END();
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f383 8811 	msr	BASEPRI, r3
}
 8003bbc:	bf00      	nop
 8003bbe:	3720      	adds	r7, #32
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	2407f32c 	.word	0x2407f32c
 8003bc8:	2407f2fc 	.word	0x2407f2fc

08003bcc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8003bda:	f04f 0120 	mov.w	r1, #32
 8003bde:	f381 8811 	msr	BASEPRI, r1
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	4827      	ldr	r0, [pc, #156]	; (8003c84 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8003be6:	f7fe fcc7 	bl	8002578 <_PreparePacket>
 8003bea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003bf0:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	623b      	str	r3, [r7, #32]
 8003c02:	e00b      	b.n	8003c1c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	1c59      	adds	r1, r3, #1
 8003c0c:	6279      	str	r1, [r7, #36]	; 0x24
 8003c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	09db      	lsrs	r3, r3, #7
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c20:	d8f0      	bhi.n	8003c04 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	627a      	str	r2, [r7, #36]	; 0x24
 8003c28:	6a3a      	ldr	r2, [r7, #32]
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	e00b      	b.n	8003c54 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	1c59      	adds	r1, r3, #1
 8003c44:	61f9      	str	r1, [r7, #28]
 8003c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	09db      	lsrs	r3, r3, #7
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2b7f      	cmp	r3, #127	; 0x7f
 8003c58:	d8f0      	bhi.n	8003c3c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	61fa      	str	r2, [r7, #28]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8003c6a:	2207      	movs	r2, #7
 8003c6c:	68f9      	ldr	r1, [r7, #12]
 8003c6e:	6938      	ldr	r0, [r7, #16]
 8003c70:	f7fe fd72 	bl	8002758 <_SendPacket>
  RECORD_END();
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f383 8811 	msr	BASEPRI, r3
}
 8003c7a:	bf00      	nop
 8003c7c:	3728      	adds	r7, #40	; 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	2407f32c 	.word	0x2407f32c
 8003c88:	2407f2fc 	.word	0x2407f2fc

08003c8c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08c      	sub	sp, #48	; 0x30
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003c96:	4b3b      	ldr	r3, [pc, #236]	; (8003d84 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d06d      	beq.n	8003d7a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca8:	e008      	b.n	8003cbc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	3301      	adds	r3, #1
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d3f2      	bcc.n	8003caa <SEGGER_SYSVIEW_SendModule+0x1e>
 8003cc4:	e000      	b.n	8003cc8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003cc6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d055      	beq.n	8003d7a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003cce:	f3ef 8311 	mrs	r3, BASEPRI
 8003cd2:	f04f 0120 	mov.w	r1, #32
 8003cd6:	f381 8811 	msr	BASEPRI, r1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	482a      	ldr	r0, [pc, #168]	; (8003d88 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003cde:	f7fe fc4b 	bl	8002578 <_PreparePacket>
 8003ce2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	623b      	str	r3, [r7, #32]
 8003cf0:	e00b      	b.n	8003d0a <SEGGER_SYSVIEW_SendModule+0x7e>
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	1c59      	adds	r1, r3, #1
 8003cfa:	6279      	str	r1, [r7, #36]	; 0x24
 8003cfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	09db      	lsrs	r3, r3, #7
 8003d08:	623b      	str	r3, [r7, #32]
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d0e:	d8f0      	bhi.n	8003cf2 <SEGGER_SYSVIEW_SendModule+0x66>
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	627a      	str	r2, [r7, #36]	; 0x24
 8003d16:	6a3a      	ldr	r2, [r7, #32]
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	e00b      	b.n	8003d44 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	61f9      	str	r1, [r7, #28]
 8003d36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	09db      	lsrs	r3, r3, #7
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b7f      	cmp	r3, #127	; 0x7f
 8003d48:	d8f0      	bhi.n	8003d2c <SEGGER_SYSVIEW_SendModule+0xa0>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	61fa      	str	r2, [r7, #28]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	4619      	mov	r1, r3
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f7fe fbb8 	bl	80024d8 <_EncodeStr>
 8003d68:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003d6a:	2216      	movs	r2, #22
 8003d6c:	68f9      	ldr	r1, [r7, #12]
 8003d6e:	6938      	ldr	r0, [r7, #16]
 8003d70:	f7fe fcf2 	bl	8002758 <_SendPacket>
      RECORD_END();
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3730      	adds	r7, #48	; 0x30
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2407f324 	.word	0x2407f324
 8003d88:	2407f32c 	.word	0x2407f32c

08003d8c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003d92:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00f      	beq.n	8003dba <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f2      	bne.n	8003da0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	2407f324 	.word	0x2407f324

08003dc8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003dce:	f3ef 8311 	mrs	r3, BASEPRI
 8003dd2:	f04f 0120 	mov.w	r1, #32
 8003dd6:	f381 8811 	msr	BASEPRI, r1
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	4817      	ldr	r0, [pc, #92]	; (8003e3c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003dde:	f7fe fbcb 	bl	8002578 <_PreparePacket>
 8003de2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	e00b      	b.n	8003e0c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	1c59      	adds	r1, r3, #1
 8003dfc:	6179      	str	r1, [r7, #20]
 8003dfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	09db      	lsrs	r3, r3, #7
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003e10:	d8f0      	bhi.n	8003df4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	617a      	str	r2, [r7, #20]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003e22:	221b      	movs	r2, #27
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	68b8      	ldr	r0, [r7, #8]
 8003e28:	f7fe fc96 	bl	8002758 <_SendPacket>
  RECORD_END();
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f383 8811 	msr	BASEPRI, r3
}
 8003e32:	bf00      	nop
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	2407f32c 	.word	0x2407f32c
 8003e40:	2407f328 	.word	0x2407f328

08003e44 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8003e44:	b40f      	push	{r0, r1, r2, r3}
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8003e4c:	f107 0314 	add.w	r3, r7, #20
 8003e50:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8003e52:	1d3b      	adds	r3, r7, #4
 8003e54:	461a      	mov	r2, r3
 8003e56:	2100      	movs	r1, #0
 8003e58:	6938      	ldr	r0, [r7, #16]
 8003e5a:	f7fe ff8f 	bl	8002d7c <_VPrintTarget>
  va_end(ParamList);
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e68:	b004      	add	sp, #16
 8003e6a:	4770      	bx	lr

08003e6c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e74:	f3ef 8311 	mrs	r3, BASEPRI
 8003e78:	f04f 0120 	mov.w	r1, #32
 8003e7c:	f381 8811 	msr	BASEPRI, r1
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	4827      	ldr	r0, [pc, #156]	; (8003f20 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003e84:	f7fe fb78 	bl	8002578 <_PreparePacket>
 8003e88:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	6938      	ldr	r0, [r7, #16]
 8003e90:	f7fe fb22 	bl	80024d8 <_EncodeStr>
 8003e94:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	623b      	str	r3, [r7, #32]
 8003e9e:	e00b      	b.n	8003eb8 <SEGGER_SYSVIEW_Warn+0x4c>
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	1c59      	adds	r1, r3, #1
 8003ea8:	6279      	str	r1, [r7, #36]	; 0x24
 8003eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	09db      	lsrs	r3, r3, #7
 8003eb6:	623b      	str	r3, [r7, #32]
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	2b7f      	cmp	r3, #127	; 0x7f
 8003ebc:	d8f0      	bhi.n	8003ea0 <SEGGER_SYSVIEW_Warn+0x34>
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	e00b      	b.n	8003ef0 <SEGGER_SYSVIEW_Warn+0x84>
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	61f9      	str	r1, [r7, #28]
 8003ee2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	09db      	lsrs	r3, r3, #7
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ef4:	d8f0      	bhi.n	8003ed8 <SEGGER_SYSVIEW_Warn+0x6c>
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	61fa      	str	r2, [r7, #28]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003f06:	221a      	movs	r2, #26
 8003f08:	68f9      	ldr	r1, [r7, #12]
 8003f0a:	6938      	ldr	r0, [r7, #16]
 8003f0c:	f7fe fc24 	bl	8002758 <_SendPacket>
  RECORD_END();
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f383 8811 	msr	BASEPRI, r3
}
 8003f16:	bf00      	nop
 8003f18:	3728      	adds	r7, #40	; 0x28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	2407f32c 	.word	0x2407f32c

08003f24 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f2a:	7e1b      	ldrb	r3, [r3, #24]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003f30:	460b      	mov	r3, r1
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	440b      	add	r3, r1
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	336c      	adds	r3, #108	; 0x6c
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f40:	7e1b      	ldrb	r3, [r3, #24]
 8003f42:	4618      	mov	r0, r3
 8003f44:	490d      	ldr	r1, [pc, #52]	; (8003f7c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003f46:	4603      	mov	r3, r0
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4403      	add	r3, r0
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	440b      	add	r3, r1
 8003f50:	3370      	adds	r3, #112	; 0x70
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d00b      	beq.n	8003f70 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f5a:	789b      	ldrb	r3, [r3, #2]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d107      	bne.n	8003f70 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003f66:	f7fe fb13 	bl	8002590 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003f6a:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8003f70:	4b01      	ldr	r3, [pc, #4]	; (8003f78 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	2407f2fc 	.word	0x2407f2fc
 8003f7c:	2400723c 	.word	0x2400723c

08003f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f86:	f000 fd5b 	bl	8004a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f8a:	f000 f895 	bl	80040b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f8e:	f000 f9c7 	bl	8004320 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8003f92:	f000 f93f 	bl	8004214 <MX_FDCAN2_Init>
  MX_USB_OTG_FS_HCD_Init();
 8003f96:	f000 f9a1 	bl	80042dc <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */

  // Start LED
  int Start_Counter = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
  while(Start_Counter < 5)
 8003f9e:	e010      	b.n	8003fc2 <main+0x42>
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8003fa0:	2104      	movs	r1, #4
 8003fa2:	4839      	ldr	r0, [pc, #228]	; (8004088 <main+0x108>)
 8003fa4:	f001 fef9 	bl	8005d9a <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8003fa8:	20c8      	movs	r0, #200	; 0xc8
 8003faa:	f000 fda5 	bl	8004af8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8003fae:	2104      	movs	r1, #4
 8003fb0:	4835      	ldr	r0, [pc, #212]	; (8004088 <main+0x108>)
 8003fb2:	f001 fef2 	bl	8005d9a <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8003fb6:	20c8      	movs	r0, #200	; 0xc8
 8003fb8:	f000 fd9e 	bl	8004af8 <HAL_Delay>
	  Start_Counter++;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
  while(Start_Counter < 5)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	ddeb      	ble.n	8003fa0 <main+0x20>

//	user_data = "Start of program\r\n";
//	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);

	// Enable CCYCCNT Counter
	DWT->CTRL |= (1 << 0);
 8003fc8:	4b30      	ldr	r3, [pc, #192]	; (800408c <main+0x10c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2f      	ldr	r2, [pc, #188]	; (800408c <main+0x10c>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	6013      	str	r3, [r2, #0]

	// Used for SEGGER UART
	SEGGER_UART_init(500000);
 8003fd4:	482e      	ldr	r0, [pc, #184]	; (8004090 <main+0x110>)
 8003fd6:	f7fd fe23 	bl	8001c20 <SEGGER_UART_init>

	//Starting SEGGER SYSVIEW
	  SEGGER_SYSVIEW_Conf();
 8003fda:	f7fd fc4b 	bl	8001874 <SEGGER_SYSVIEW_Conf>
	  //SEGGER_SYSVIEW_Start();

	  TaskStatus = xTaskCreate(Task_GreenLED_Handler, "GreenLED", 100, "Green LED TASK", 1, &Task_GreenLED_Handle);
 8003fde:	f107 0308 	add.w	r3, r7, #8
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	4b2a      	ldr	r3, [pc, #168]	; (8004094 <main+0x114>)
 8003fea:	2264      	movs	r2, #100	; 0x64
 8003fec:	492a      	ldr	r1, [pc, #168]	; (8004098 <main+0x118>)
 8003fee:	482b      	ldr	r0, [pc, #172]	; (800409c <main+0x11c>)
 8003ff0:	f7fc fa74 	bl	80004dc <xTaskCreate>
 8003ff4:	61b8      	str	r0, [r7, #24]
	  configASSERT(TaskStatus == pdPASS);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d00c      	beq.n	8004016 <main+0x96>
        __asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	b672      	cpsid	i
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	b662      	cpsie	i
 8004010:	617b      	str	r3, [r7, #20]
    }
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <main+0x94>

	  TaskStatus = xTaskCreate(Task_RedLED_Handler, "RedLED", 100, "Red LED TASK", 1, &Task_RedLED_Handle);
 8004016:	1d3b      	adds	r3, r7, #4
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	2301      	movs	r3, #1
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <main+0x120>)
 8004020:	2264      	movs	r2, #100	; 0x64
 8004022:	4920      	ldr	r1, [pc, #128]	; (80040a4 <main+0x124>)
 8004024:	4820      	ldr	r0, [pc, #128]	; (80040a8 <main+0x128>)
 8004026:	f7fc fa59 	bl	80004dc <xTaskCreate>
 800402a:	61b8      	str	r0, [r7, #24]
	  configASSERT(TaskStatus == pdPASS);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d00c      	beq.n	800404c <main+0xcc>
        __asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	b672      	cpsid	i
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	b662      	cpsie	i
 8004046:	613b      	str	r3, [r7, #16]
    }
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <main+0xca>

	  TaskStatus = xTaskCreate(Task_BlueLED_Handler, "BlueLED", 100, "Blue LED TASK", 1, &Task_BlueLED_Handle);
 800404c:	463b      	mov	r3, r7
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	2301      	movs	r3, #1
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	4b15      	ldr	r3, [pc, #84]	; (80040ac <main+0x12c>)
 8004056:	2264      	movs	r2, #100	; 0x64
 8004058:	4915      	ldr	r1, [pc, #84]	; (80040b0 <main+0x130>)
 800405a:	4816      	ldr	r0, [pc, #88]	; (80040b4 <main+0x134>)
 800405c:	f7fc fa3e 	bl	80004dc <xTaskCreate>
 8004060:	61b8      	str	r0, [r7, #24]
	  configASSERT(TaskStatus == pdPASS);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d00c      	beq.n	8004082 <main+0x102>
        __asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	b672      	cpsid	i
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	b662      	cpsie	i
 800407c:	60fb      	str	r3, [r7, #12]
    }
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <main+0x100>


	  // Start FreeRTOS scheduler
	  vTaskStartScheduler();
 8004082:	f7fc fc19 	bl	80008b8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004086:	e7fe      	b.n	8004086 <main+0x106>
 8004088:	58020800 	.word	0x58020800
 800408c:	e0001000 	.word	0xe0001000
 8004090:	0007a120 	.word	0x0007a120
 8004094:	08008c40 	.word	0x08008c40
 8004098:	08008c50 	.word	0x08008c50
 800409c:	08004411 	.word	0x08004411
 80040a0:	08008c5c 	.word	0x08008c5c
 80040a4:	08008c6c 	.word	0x08008c6c
 80040a8:	08004471 	.word	0x08004471
 80040ac:	08008c74 	.word	0x08008c74
 80040b0:	08008c84 	.word	0x08008c84
 80040b4:	080044d1 	.word	0x080044d1

080040b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b09e      	sub	sp, #120	; 0x78
 80040bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040c2:	224c      	movs	r2, #76	; 0x4c
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f004 fd44 	bl	8008b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040cc:	f107 030c 	add.w	r3, r7, #12
 80040d0:	2220      	movs	r2, #32
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f004 fd3d 	bl	8008b54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80040da:	2002      	movs	r0, #2
 80040dc:	f001 ff18 	bl	8005f10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040e0:	2300      	movs	r3, #0
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	4b48      	ldr	r3, [pc, #288]	; (8004208 <SystemClock_Config+0x150>)
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	4a47      	ldr	r2, [pc, #284]	; (8004208 <SystemClock_Config+0x150>)
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040f0:	4b45      	ldr	r3, [pc, #276]	; (8004208 <SystemClock_Config+0x150>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	4b44      	ldr	r3, [pc, #272]	; (800420c <SystemClock_Config+0x154>)
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	4a43      	ldr	r2, [pc, #268]	; (800420c <SystemClock_Config+0x154>)
 8004100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004104:	6193      	str	r3, [r2, #24]
 8004106:	4b41      	ldr	r3, [pc, #260]	; (800420c <SystemClock_Config+0x154>)
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004112:	bf00      	nop
 8004114:	4b3d      	ldr	r3, [pc, #244]	; (800420c <SystemClock_Config+0x154>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004120:	d1f8      	bne.n	8004114 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004122:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <SystemClock_Config+0x158>)
 8004124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004128:	4a39      	ldr	r2, [pc, #228]	; (8004210 <SystemClock_Config+0x158>)
 800412a:	f043 0302 	orr.w	r3, r3, #2
 800412e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004132:	4b37      	ldr	r3, [pc, #220]	; (8004210 <SystemClock_Config+0x158>)
 8004134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004140:	2300      	movs	r3, #0
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	4b31      	ldr	r3, [pc, #196]	; (800420c <SystemClock_Config+0x154>)
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	4a30      	ldr	r2, [pc, #192]	; (800420c <SystemClock_Config+0x154>)
 800414a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800414e:	6193      	str	r3, [r2, #24]
 8004150:	4b2e      	ldr	r3, [pc, #184]	; (800420c <SystemClock_Config+0x154>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <SystemClock_Config+0x150>)
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	4a2a      	ldr	r2, [pc, #168]	; (8004208 <SystemClock_Config+0x150>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004166:	4b28      	ldr	r3, [pc, #160]	; (8004208 <SystemClock_Config+0x150>)
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004172:	bf00      	nop
 8004174:	4b25      	ldr	r3, [pc, #148]	; (800420c <SystemClock_Config+0x154>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800417c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004180:	d1f8      	bne.n	8004174 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004182:	2301      	movs	r3, #1
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800418a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800418c:	2302      	movs	r3, #2
 800418e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004190:	2302      	movs	r3, #2
 8004192:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004194:	2301      	movs	r3, #1
 8004196:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8004198:	2378      	movs	r3, #120	; 0x78
 800419a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800419c:	2302      	movs	r3, #2
 800419e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80041a0:	230f      	movs	r3, #15
 80041a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80041a4:	2302      	movs	r3, #2
 80041a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80041a8:	230c      	movs	r3, #12
 80041aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80041ac:	2300      	movs	r3, #0
 80041ae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 fef3 	bl	8005fa4 <HAL_RCC_OscConfig>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80041c4:	f000 f9ce 	bl	8004564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041c8:	233f      	movs	r3, #63	; 0x3f
 80041ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041cc:	2303      	movs	r3, #3
 80041ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80041d4:	2308      	movs	r3, #8
 80041d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80041d8:	2340      	movs	r3, #64	; 0x40
 80041da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80041e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80041e6:	2340      	movs	r3, #64	; 0x40
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	2104      	movs	r1, #4
 80041f0:	4618      	mov	r0, r3
 80041f2:	f002 fb05 	bl	8006800 <HAL_RCC_ClockConfig>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80041fc:	f000 f9b2 	bl	8004564 <Error_Handler>
  }
}
 8004200:	bf00      	nop
 8004202:	3778      	adds	r7, #120	; 0x78
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	58000400 	.word	0x58000400
 800420c:	58024800 	.word	0x58024800
 8004210:	58024400 	.word	0x58024400

08004214 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004218:	4b2e      	ldr	r3, [pc, #184]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 800421a:	4a2f      	ldr	r2, [pc, #188]	; (80042d8 <MX_FDCAN2_Init+0xc4>)
 800421c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800421e:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004220:	2200      	movs	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8004224:	4b2b      	ldr	r3, [pc, #172]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004226:	2200      	movs	r2, #0
 8004228:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800422a:	4b2a      	ldr	r3, [pc, #168]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 800422c:	2200      	movs	r2, #0
 800422e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8004230:	4b28      	ldr	r3, [pc, #160]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004232:	2200      	movs	r2, #0
 8004234:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8004236:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004238:	2200      	movs	r2, #0
 800423a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800423c:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 800423e:	2210      	movs	r2, #16
 8004240:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004244:	2201      	movs	r2, #1
 8004246:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8004248:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 800424a:	2202      	movs	r2, #2
 800424c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800424e:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004250:	2202      	movs	r2, #2
 8004252:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8004254:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004256:	2201      	movs	r2, #1
 8004258:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800425a:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 800425c:	2201      	movs	r2, #1
 800425e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8004260:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004262:	2201      	movs	r2, #1
 8004264:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8004266:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004268:	2201      	movs	r2, #1
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 800426e:	2200      	movs	r2, #0
 8004270:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8004272:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004274:	2200      	movs	r2, #0
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8004278:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 800427a:	2200      	movs	r2, #0
 800427c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800427e:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004280:	2200      	movs	r2, #0
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004284:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004286:	2204      	movs	r2, #4
 8004288:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 800428c:	2200      	movs	r2, #0
 800428e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004292:	2204      	movs	r2, #4
 8004294:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8004296:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 8004298:	2200      	movs	r2, #0
 800429a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 800429e:	2204      	movs	r2, #4
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80042a2:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80042b4:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 80042bc:	2204      	movs	r2, #4
 80042be:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80042c0:	4804      	ldr	r0, [pc, #16]	; (80042d4 <MX_FDCAN2_Init+0xc0>)
 80042c2:	f000 fd29 	bl	8004d18 <HAL_FDCAN_Init>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80042cc:	f000 f94a 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80042d0:	bf00      	nop
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	2407f410 	.word	0x2407f410
 80042d8:	4000a400 	.word	0x4000a400

080042dc <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80042e0:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80042e2:	4a0e      	ldr	r2, [pc, #56]	; (800431c <MX_USB_OTG_FS_HCD_Init+0x40>)
 80042e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 80042e6:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80042e8:	2210      	movs	r2, #16
 80042ea:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80042f8:	4b07      	ldr	r3, [pc, #28]	; (8004318 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80042fa:	2202      	movs	r2, #2
 80042fc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004300:	2200      	movs	r2, #0
 8004302:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004304:	4804      	ldr	r0, [pc, #16]	; (8004318 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004306:	f001 fd87 	bl	8005e18 <HAL_HCD_Init>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8004310:	f000 f928 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004314:	bf00      	nop
 8004316:	bd80      	pop	{r7, pc}
 8004318:	2407f4b0 	.word	0x2407f4b0
 800431c:	40080000 	.word	0x40080000

08004320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004326:	f107 0314 	add.w	r3, r7, #20
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	609a      	str	r2, [r3, #8]
 8004332:	60da      	str	r2, [r3, #12]
 8004334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004336:	4b34      	ldr	r3, [pc, #208]	; (8004408 <MX_GPIO_Init+0xe8>)
 8004338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800433c:	4a32      	ldr	r2, [pc, #200]	; (8004408 <MX_GPIO_Init+0xe8>)
 800433e:	f043 0304 	orr.w	r3, r3, #4
 8004342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004346:	4b30      	ldr	r3, [pc, #192]	; (8004408 <MX_GPIO_Init+0xe8>)
 8004348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004354:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <MX_GPIO_Init+0xe8>)
 8004356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800435a:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <MX_GPIO_Init+0xe8>)
 800435c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004364:	4b28      	ldr	r3, [pc, #160]	; (8004408 <MX_GPIO_Init+0xe8>)
 8004366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004372:	4b25      	ldr	r3, [pc, #148]	; (8004408 <MX_GPIO_Init+0xe8>)
 8004374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004378:	4a23      	ldr	r2, [pc, #140]	; (8004408 <MX_GPIO_Init+0xe8>)
 800437a:	f043 0302 	orr.w	r3, r3, #2
 800437e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004382:	4b21      	ldr	r3, [pc, #132]	; (8004408 <MX_GPIO_Init+0xe8>)
 8004384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <MX_GPIO_Init+0xe8>)
 8004392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004396:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <MX_GPIO_Init+0xe8>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043a0:	4b19      	ldr	r3, [pc, #100]	; (8004408 <MX_GPIO_Init+0xe8>)
 80043a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	607b      	str	r3, [r7, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80043ae:	2200      	movs	r2, #0
 80043b0:	2107      	movs	r1, #7
 80043b2:	4816      	ldr	r0, [pc, #88]	; (800440c <MX_GPIO_Init+0xec>)
 80043b4:	f001 fcd8 	bl	8005d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80043b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80043c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043c8:	f107 0314 	add.w	r3, r7, #20
 80043cc:	4619      	mov	r1, r3
 80043ce:	480f      	ldr	r0, [pc, #60]	; (800440c <MX_GPIO_Init+0xec>)
 80043d0:	f001 fb1a 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80043d4:	2307      	movs	r3, #7
 80043d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043d8:	2301      	movs	r3, #1
 80043da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e0:	2300      	movs	r3, #0
 80043e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	4619      	mov	r1, r3
 80043ea:	4808      	ldr	r0, [pc, #32]	; (800440c <MX_GPIO_Init+0xec>)
 80043ec:	f001 fb0c 	bl	8005a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80043f0:	2200      	movs	r2, #0
 80043f2:	2105      	movs	r1, #5
 80043f4:	2028      	movs	r0, #40	; 0x28
 80043f6:	f000 fc67 	bl	8004cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043fa:	2028      	movs	r0, #40	; 0x28
 80043fc:	f000 fc7e 	bl	8004cfc <HAL_NVIC_EnableIRQ>

}
 8004400:	bf00      	nop
 8004402:	3728      	adds	r7, #40	; 0x28
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	58024400 	.word	0x58024400
 800440c:	58020800 	.word	0x58020800

08004410 <Task_GreenLED_Handler>:

/* USER CODE BEGIN 4 */
static void Task_GreenLED_Handler(void* parameters)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	TickType_t LastWakeUpTime = xTaskGetTickCount();
 8004418:	f7fc fb5e 	bl	8000ad8 <xTaskGetTickCount>
 800441c:	4603      	mov	r3, r0
 800441e:	60fb      	str	r3, [r7, #12]
	{
//		user_data = "Green -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8004420:	4810      	ldr	r0, [pc, #64]	; (8004464 <Task_GreenLED_Handler+0x54>)
 8004422:	f7ff fd0f 	bl	8003e44 <SEGGER_SYSVIEW_PrintfTarget>


		// 1000 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004426:	2102      	movs	r1, #2
 8004428:	480f      	ldr	r0, [pc, #60]	; (8004468 <Task_GreenLED_Handler+0x58>)
 800442a:	f001 fcb6 	bl	8005d9a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(1000));
 800442e:	f107 030c 	add.w	r3, r7, #12
 8004432:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc f9b6 	bl	80007a8 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 800443c:	2102      	movs	r1, #2
 800443e:	480a      	ldr	r0, [pc, #40]	; (8004468 <Task_GreenLED_Handler+0x58>)
 8004440:	f001 fcab 	bl	8005d9a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(1000));
 8004444:	f107 030c 	add.w	r3, r7, #12
 8004448:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800444c:	4618      	mov	r0, r3
 800444e:	f7fc f9ab 	bl	80007a8 <xTaskDelayUntil>
		taskYIELD();
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <Task_GreenLED_Handler+0x5c>)
 8004454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8004462:	e7dd      	b.n	8004420 <Task_GreenLED_Handler+0x10>
 8004464:	08008c8c 	.word	0x08008c8c
 8004468:	58020800 	.word	0x58020800
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <Task_RedLED_Handler>:
	}
}


static void Task_RedLED_Handler(void* parameters)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	TickType_t LastWakeUpTime = xTaskGetTickCount();
 8004478:	f7fc fb2e 	bl	8000ad8 <xTaskGetTickCount>
 800447c:	4603      	mov	r3, r0
 800447e:	60fb      	str	r3, [r7, #12]
	{
//		user_data = "Red -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8004480:	4810      	ldr	r0, [pc, #64]	; (80044c4 <Task_RedLED_Handler+0x54>)
 8004482:	f7ff fcdf 	bl	8003e44 <SEGGER_SYSVIEW_PrintfTarget>


		// 800 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004486:	2101      	movs	r1, #1
 8004488:	480f      	ldr	r0, [pc, #60]	; (80044c8 <Task_RedLED_Handler+0x58>)
 800448a:	f001 fc86 	bl	8005d9a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(800));
 800448e:	f107 030c 	add.w	r3, r7, #12
 8004492:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004496:	4618      	mov	r0, r3
 8004498:	f7fc f986 	bl	80007a8 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800449c:	2101      	movs	r1, #1
 800449e:	480a      	ldr	r0, [pc, #40]	; (80044c8 <Task_RedLED_Handler+0x58>)
 80044a0:	f001 fc7b 	bl	8005d9a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(800));
 80044a4:	f107 030c 	add.w	r3, r7, #12
 80044a8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fc f97b 	bl	80007a8 <xTaskDelayUntil>
		taskYIELD();
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <Task_RedLED_Handler+0x5c>)
 80044b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80044c2:	e7dd      	b.n	8004480 <Task_RedLED_Handler+0x10>
 80044c4:	08008ca0 	.word	0x08008ca0
 80044c8:	58020800 	.word	0x58020800
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <Task_BlueLED_Handler>:
	}
}


static void Task_BlueLED_Handler(void* parameters)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	TickType_t LastWakeUpTime = xTaskGetTickCount();
 80044d8:	f7fc fafe 	bl	8000ad8 <xTaskGetTickCount>
 80044dc:	4603      	mov	r3, r0
 80044de:	60fb      	str	r3, [r7, #12]
	{
//		user_data = "Blue -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 80044e0:	4810      	ldr	r0, [pc, #64]	; (8004524 <Task_BlueLED_Handler+0x54>)
 80044e2:	f7ff fcaf 	bl	8003e44 <SEGGER_SYSVIEW_PrintfTarget>

		// 400 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 80044e6:	2104      	movs	r1, #4
 80044e8:	480f      	ldr	r0, [pc, #60]	; (8004528 <Task_BlueLED_Handler+0x58>)
 80044ea:	f001 fc56 	bl	8005d9a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(400));
 80044ee:	f107 030c 	add.w	r3, r7, #12
 80044f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fc f956 	bl	80007a8 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 80044fc:	2104      	movs	r1, #4
 80044fe:	480a      	ldr	r0, [pc, #40]	; (8004528 <Task_BlueLED_Handler+0x58>)
 8004500:	f001 fc4b 	bl	8005d9a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&LastWakeUpTime, pdMS_TO_TICKS(400));
 8004504:	f107 030c 	add.w	r3, r7, #12
 8004508:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800450c:	4618      	mov	r0, r3
 800450e:	f7fc f94b 	bl	80007a8 <xTaskDelayUntil>
		taskYIELD();
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <Task_BlueLED_Handler+0x5c>)
 8004514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8004522:	e7dd      	b.n	80044e0 <Task_BlueLED_Handler+0x10>
 8004524:	08008cb4 	.word	0x08008cb4
 8004528:	58020800 	.word	0x58020800
 800452c:	e000ed04 	.word	0xe000ed04

08004530 <vApplicationIdleHook>:
	}
}


void vApplicationIdleHook(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004534:	2101      	movs	r1, #1
 8004536:	2000      	movs	r0, #0
 8004538:	f001 fcd0 	bl	8005edc <HAL_PWR_EnterSLEEPMode>
}
 800453c:	bf00      	nop
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a04      	ldr	r2, [pc, #16]	; (8004560 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004552:	f000 fab1 	bl	8004ab8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40001000 	.word	0x40001000

08004564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004568:	b672      	cpsid	i
}
 800456a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800456c:	2101      	movs	r1, #1
 800456e:	4807      	ldr	r0, [pc, #28]	; (800458c <Error_Handler+0x28>)
 8004570:	f001 fc13 	bl	8005d9a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004574:	2064      	movs	r0, #100	; 0x64
 8004576:	f000 fabf 	bl	8004af8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800457a:	2101      	movs	r1, #1
 800457c:	4803      	ldr	r0, [pc, #12]	; (800458c <Error_Handler+0x28>)
 800457e:	f001 fc0c 	bl	8005d9a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004582:	2064      	movs	r0, #100	; 0x64
 8004584:	f000 fab8 	bl	8004af8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004588:	e7f0      	b.n	800456c <Error_Handler+0x8>
 800458a:	bf00      	nop
 800458c:	58020800 	.word	0x58020800

08004590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_MspInit+0x30>)
 8004598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800459c:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <HAL_MspInit+0x30>)
 800459e:	f043 0302 	orr.w	r3, r3, #2
 80045a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_MspInit+0x30>)
 80045a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MspInit 1 */
  //vInitPrioGroupValue();

  /* USER CODE END MspInit 1 */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	58024400 	.word	0x58024400

080045c4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b0b8      	sub	sp, #224	; 0xe0
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045dc:	f107 0310 	add.w	r3, r7, #16
 80045e0:	22bc      	movs	r2, #188	; 0xbc
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f004 fab5 	bl	8008b54 <memset>
  if(hfdcan->Instance==FDCAN2)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2d      	ldr	r2, [pc, #180]	; (80046a4 <HAL_FDCAN_MspInit+0xe0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d153      	bne.n	800469c <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80045f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80045fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004600:	f107 0310 	add.w	r3, r7, #16
 8004604:	4618      	mov	r0, r3
 8004606:	f002 fcb3 	bl	8006f70 <HAL_RCCEx_PeriphCLKConfig>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004610:	f7ff ffa8 	bl	8004564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004614:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <HAL_FDCAN_MspInit+0xe4>)
 8004616:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800461a:	4a23      	ldr	r2, [pc, #140]	; (80046a8 <HAL_FDCAN_MspInit+0xe4>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004620:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004624:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_FDCAN_MspInit+0xe4>)
 8004626:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004632:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <HAL_FDCAN_MspInit+0xe4>)
 8004634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004638:	4a1b      	ldr	r2, [pc, #108]	; (80046a8 <HAL_FDCAN_MspInit+0xe4>)
 800463a:	f043 0302 	orr.w	r3, r3, #2
 800463e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004642:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <HAL_FDCAN_MspInit+0xe4>)
 8004644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004650:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004658:	2302      	movs	r3, #2
 800465a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465e:	2300      	movs	r3, #0
 8004660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800466a:	2309      	movs	r3, #9
 800466c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004670:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004674:	4619      	mov	r1, r3
 8004676:	480d      	ldr	r0, [pc, #52]	; (80046ac <HAL_FDCAN_MspInit+0xe8>)
 8004678:	f001 f9c6 	bl	8005a08 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 800467c:	2200      	movs	r2, #0
 800467e:	2100      	movs	r1, #0
 8004680:	2014      	movs	r0, #20
 8004682:	f000 fb21 	bl	8004cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8004686:	2014      	movs	r0, #20
 8004688:	f000 fb38 	bl	8004cfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 800468c:	2200      	movs	r2, #0
 800468e:	2100      	movs	r1, #0
 8004690:	2016      	movs	r0, #22
 8004692:	f000 fb19 	bl	8004cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8004696:	2016      	movs	r0, #22
 8004698:	f000 fb30 	bl	8004cfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800469c:	bf00      	nop
 800469e:	37e0      	adds	r7, #224	; 0xe0
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	4000a400 	.word	0x4000a400
 80046a8:	58024400 	.word	0x58024400
 80046ac:	58020400 	.word	0x58020400

080046b0 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b0b8      	sub	sp, #224	; 0xe0
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046c8:	f107 0310 	add.w	r3, r7, #16
 80046cc:	22bc      	movs	r2, #188	; 0xbc
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f004 fa3f 	bl	8008b54 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a27      	ldr	r2, [pc, #156]	; (8004778 <HAL_HCD_MspInit+0xc8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d146      	bne.n	800476e <HAL_HCD_MspInit+0xbe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80046e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80046e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046ee:	f107 0310 	add.w	r3, r7, #16
 80046f2:	4618      	mov	r0, r3
 80046f4:	f002 fc3c 	bl	8006f70 <HAL_RCCEx_PeriphCLKConfig>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 80046fe:	f7ff ff31 	bl	8004564 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8004702:	f001 fc3f 	bl	8005f84 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004706:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_HCD_MspInit+0xcc>)
 8004708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800470c:	4a1b      	ldr	r2, [pc, #108]	; (800477c <HAL_HCD_MspInit+0xcc>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004716:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_HCD_MspInit+0xcc>)
 8004718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004724:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004728:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004732:	2300      	movs	r3, #0
 8004734:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004738:	2300      	movs	r3, #0
 800473a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800473e:	230a      	movs	r3, #10
 8004740:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004744:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004748:	4619      	mov	r1, r3
 800474a:	480d      	ldr	r0, [pc, #52]	; (8004780 <HAL_HCD_MspInit+0xd0>)
 800474c:	f001 f95c 	bl	8005a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_HCD_MspInit+0xcc>)
 8004752:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_HCD_MspInit+0xcc>)
 8004758:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800475c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_HCD_MspInit+0xcc>)
 8004762:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800476e:	bf00      	nop
 8004770:	37e0      	adds	r7, #224	; 0xe0
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40080000 	.word	0x40080000
 800477c:	58024400 	.word	0x58024400
 8004780:	58020000 	.word	0x58020000

08004784 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b090      	sub	sp, #64	; 0x40
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b0f      	cmp	r3, #15
 8004790:	d827      	bhi.n	80047e2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004792:	2200      	movs	r2, #0
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	2036      	movs	r0, #54	; 0x36
 8004798:	f000 fa96 	bl	8004cc8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800479c:	2036      	movs	r0, #54	; 0x36
 800479e:	f000 faad 	bl	8004cfc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80047a2:	4a29      	ldr	r2, [pc, #164]	; (8004848 <HAL_InitTick+0xc4>)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80047a8:	4b28      	ldr	r3, [pc, #160]	; (800484c <HAL_InitTick+0xc8>)
 80047aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047ae:	4a27      	ldr	r2, [pc, #156]	; (800484c <HAL_InitTick+0xc8>)
 80047b0:	f043 0310 	orr.w	r3, r3, #16
 80047b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047b8:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_InitTick+0xc8>)
 80047ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047c6:	f107 0210 	add.w	r2, r7, #16
 80047ca:	f107 0314 	add.w	r3, r7, #20
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f002 fb8b 	bl	8006eec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <HAL_InitTick+0x6a>
 80047e0:	e001      	b.n	80047e6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e02b      	b.n	800483e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80047e6:	f002 fb6b 	bl	8006ec0 <HAL_RCC_GetPCLK1Freq>
 80047ea:	63f8      	str	r0, [r7, #60]	; 0x3c
 80047ec:	e004      	b.n	80047f8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80047ee:	f002 fb67 	bl	8006ec0 <HAL_RCC_GetPCLK1Freq>
 80047f2:	4603      	mov	r3, r0
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	4a15      	ldr	r2, [pc, #84]	; (8004850 <HAL_InitTick+0xcc>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	0c9b      	lsrs	r3, r3, #18
 8004802:	3b01      	subs	r3, #1
 8004804:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004806:	4b13      	ldr	r3, [pc, #76]	; (8004854 <HAL_InitTick+0xd0>)
 8004808:	4a13      	ldr	r2, [pc, #76]	; (8004858 <HAL_InitTick+0xd4>)
 800480a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800480c:	4b11      	ldr	r3, [pc, #68]	; (8004854 <HAL_InitTick+0xd0>)
 800480e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004812:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004814:	4a0f      	ldr	r2, [pc, #60]	; (8004854 <HAL_InitTick+0xd0>)
 8004816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004818:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800481a:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <HAL_InitTick+0xd0>)
 800481c:	2200      	movs	r2, #0
 800481e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004820:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <HAL_InitTick+0xd0>)
 8004822:	2200      	movs	r2, #0
 8004824:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004826:	480b      	ldr	r0, [pc, #44]	; (8004854 <HAL_InitTick+0xd0>)
 8004828:	f003 fc4c 	bl	80080c4 <HAL_TIM_Base_Init>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d104      	bne.n	800483c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004832:	4808      	ldr	r0, [pc, #32]	; (8004854 <HAL_InitTick+0xd0>)
 8004834:	f003 fca8 	bl	8008188 <HAL_TIM_Base_Start_IT>
 8004838:	4603      	mov	r3, r0
 800483a:	e000      	b.n	800483e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
}
 800483e:	4618      	mov	r0, r3
 8004840:	3740      	adds	r7, #64	; 0x40
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	24000018 	.word	0x24000018
 800484c:	58024400 	.word	0x58024400
 8004850:	431bde83 	.word	0x431bde83
 8004854:	2407f7b4 	.word	0x2407f7b4
 8004858:	40001000 	.word	0x40001000

0800485c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004860:	e7fe      	b.n	8004860 <NMI_Handler+0x4>

08004862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004862:	b480      	push	{r7}
 8004864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004866:	e7fe      	b.n	8004866 <HardFault_Handler+0x4>

08004868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800486c:	e7fe      	b.n	800486c <MemManage_Handler+0x4>

0800486e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800486e:	b480      	push	{r7}
 8004870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004872:	e7fe      	b.n	8004872 <BusFault_Handler+0x4>

08004874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004878:	e7fe      	b.n	8004878 <UsageFault_Handler+0x4>

0800487a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800487e:	bf00      	nop
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800488c:	4802      	ldr	r0, [pc, #8]	; (8004898 <FDCAN2_IT0_IRQHandler+0x10>)
 800488e:	f000 fc21 	bl	80050d4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	2407f410 	.word	0x2407f410

0800489c <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80048a0:	4802      	ldr	r0, [pc, #8]	; (80048ac <FDCAN2_IT1_IRQHandler+0x10>)
 80048a2:	f000 fc17 	bl	80050d4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	2407f410 	.word	0x2407f410

080048b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80048b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80048b8:	f001 fa89 	bl	8005dce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048bc:	bf00      	nop
 80048be:	bd80      	pop	{r7, pc}

080048c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048c4:	4802      	ldr	r0, [pc, #8]	; (80048d0 <TIM6_DAC_IRQHandler+0x10>)
 80048c6:	f003 fcd7 	bl	8008278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	2407f7b4 	.word	0x2407f7b4

080048d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80048d8:	4b39      	ldr	r3, [pc, #228]	; (80049c0 <SystemInit+0xec>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	4a38      	ldr	r2, [pc, #224]	; (80049c0 <SystemInit+0xec>)
 80048e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80048e8:	4b36      	ldr	r3, [pc, #216]	; (80049c4 <SystemInit+0xf0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d807      	bhi.n	8004904 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80048f4:	4b33      	ldr	r3, [pc, #204]	; (80049c4 <SystemInit+0xf0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f023 030f 	bic.w	r3, r3, #15
 80048fc:	4a31      	ldr	r2, [pc, #196]	; (80049c4 <SystemInit+0xf0>)
 80048fe:	f043 0307 	orr.w	r3, r3, #7
 8004902:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004904:	4b30      	ldr	r3, [pc, #192]	; (80049c8 <SystemInit+0xf4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a2f      	ldr	r2, [pc, #188]	; (80049c8 <SystemInit+0xf4>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004910:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <SystemInit+0xf4>)
 8004912:	2200      	movs	r2, #0
 8004914:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004916:	4b2c      	ldr	r3, [pc, #176]	; (80049c8 <SystemInit+0xf4>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	492b      	ldr	r1, [pc, #172]	; (80049c8 <SystemInit+0xf4>)
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <SystemInit+0xf8>)
 800491e:	4013      	ands	r3, r2
 8004920:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004922:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <SystemInit+0xf0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800492e:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <SystemInit+0xf0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 030f 	bic.w	r3, r3, #15
 8004936:	4a23      	ldr	r2, [pc, #140]	; (80049c4 <SystemInit+0xf0>)
 8004938:	f043 0307 	orr.w	r3, r3, #7
 800493c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800493e:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <SystemInit+0xf4>)
 8004940:	2200      	movs	r2, #0
 8004942:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004944:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <SystemInit+0xf4>)
 8004946:	2200      	movs	r2, #0
 8004948:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800494a:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <SystemInit+0xf4>)
 800494c:	2200      	movs	r2, #0
 800494e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004950:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <SystemInit+0xf4>)
 8004952:	4a1f      	ldr	r2, [pc, #124]	; (80049d0 <SystemInit+0xfc>)
 8004954:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004956:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <SystemInit+0xf4>)
 8004958:	4a1e      	ldr	r2, [pc, #120]	; (80049d4 <SystemInit+0x100>)
 800495a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800495c:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <SystemInit+0xf4>)
 800495e:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <SystemInit+0x104>)
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004962:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <SystemInit+0xf4>)
 8004964:	2200      	movs	r2, #0
 8004966:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004968:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <SystemInit+0xf4>)
 800496a:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <SystemInit+0x104>)
 800496c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800496e:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <SystemInit+0xf4>)
 8004970:	2200      	movs	r2, #0
 8004972:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004974:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <SystemInit+0xf4>)
 8004976:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <SystemInit+0x104>)
 8004978:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800497a:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <SystemInit+0xf4>)
 800497c:	2200      	movs	r2, #0
 800497e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004980:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <SystemInit+0xf4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a10      	ldr	r2, [pc, #64]	; (80049c8 <SystemInit+0xf4>)
 8004986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800498a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800498c:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <SystemInit+0xf4>)
 800498e:	2200      	movs	r2, #0
 8004990:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <SystemInit+0x108>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <SystemInit+0x10c>)
 8004998:	4013      	ands	r3, r2
 800499a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800499e:	d202      	bcs.n	80049a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <SystemInit+0x110>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80049a6:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <SystemInit+0x114>)
 80049a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80049ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049ae:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <SystemInit+0xec>)
 80049b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049b4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80049b6:	bf00      	nop
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	e000ed00 	.word	0xe000ed00
 80049c4:	52002000 	.word	0x52002000
 80049c8:	58024400 	.word	0x58024400
 80049cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80049d0:	02020200 	.word	0x02020200
 80049d4:	01ff0000 	.word	0x01ff0000
 80049d8:	01010280 	.word	0x01010280
 80049dc:	5c001000 	.word	0x5c001000
 80049e0:	ffff0000 	.word	0xffff0000
 80049e4:	51008108 	.word	0x51008108
 80049e8:	52004000 	.word	0x52004000

080049ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80049ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80049f0:	f7ff ff70 	bl	80048d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049f4:	480c      	ldr	r0, [pc, #48]	; (8004a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049f6:	490d      	ldr	r1, [pc, #52]	; (8004a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049f8:	4a0d      	ldr	r2, [pc, #52]	; (8004a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049fc:	e002      	b.n	8004a04 <LoopCopyDataInit>

080049fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a02:	3304      	adds	r3, #4

08004a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a08:	d3f9      	bcc.n	80049fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a0c:	4c0a      	ldr	r4, [pc, #40]	; (8004a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a10:	e001      	b.n	8004a16 <LoopFillZerobss>

08004a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a14:	3204      	adds	r2, #4

08004a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a18:	d3fb      	bcc.n	8004a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a1a:	f004 f859 	bl	8008ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a1e:	f7ff faaf 	bl	8003f80 <main>
  bx  lr
 8004a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004a28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004a2c:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8004a30:	08008d68 	.word	0x08008d68
  ldr r2, =_sbss
 8004a34:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8004a38:	2407f804 	.word	0x2407f804

08004a3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a3c:	e7fe      	b.n	8004a3c <ADC3_IRQHandler>
	...

08004a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a46:	2003      	movs	r0, #3
 8004a48:	f000 f933 	bl	8004cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a4c:	f002 f88e 	bl	8006b6c <HAL_RCC_GetSysClockFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <HAL_Init+0x68>)
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	4913      	ldr	r1, [pc, #76]	; (8004aac <HAL_Init+0x6c>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
 8004a68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a6a:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <HAL_Init+0x68>)
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <HAL_Init+0x6c>)
 8004a74:	5cd3      	ldrb	r3, [r2, r3]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	4a0b      	ldr	r2, [pc, #44]	; (8004ab0 <HAL_Init+0x70>)
 8004a82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a84:	4a0b      	ldr	r2, [pc, #44]	; (8004ab4 <HAL_Init+0x74>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a8a:	200f      	movs	r0, #15
 8004a8c:	f7ff fe7a 	bl	8004784 <HAL_InitTick>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e002      	b.n	8004aa0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a9a:	f7ff fd79 	bl	8004590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	58024400 	.word	0x58024400
 8004aac:	08008d50 	.word	0x08008d50
 8004ab0:	24000014 	.word	0x24000014
 8004ab4:	24000010 	.word	0x24000010

08004ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <HAL_IncTick+0x20>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_IncTick+0x24>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	4a04      	ldr	r2, [pc, #16]	; (8004adc <HAL_IncTick+0x24>)
 8004aca:	6013      	str	r3, [r2, #0]
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	2400001c 	.word	0x2400001c
 8004adc:	2407f800 	.word	0x2407f800

08004ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <HAL_GetTick+0x14>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	2407f800 	.word	0x2407f800

08004af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b00:	f7ff ffee 	bl	8004ae0 <HAL_GetTick>
 8004b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d005      	beq.n	8004b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_Delay+0x44>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b1e:	bf00      	nop
 8004b20:	f7ff ffde 	bl	8004ae0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d8f7      	bhi.n	8004b20 <HAL_Delay+0x28>
  {
  }
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	2400001c 	.word	0x2400001c

08004b40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <HAL_GetREVID+0x14>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0c1b      	lsrs	r3, r3, #16
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	5c001000 	.word	0x5c001000

08004b58 <__NVIC_SetPriorityGrouping>:
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <__NVIC_SetPriorityGrouping+0x40>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b86:	4a04      	ldr	r2, [pc, #16]	; (8004b98 <__NVIC_SetPriorityGrouping+0x40>)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	60d3      	str	r3, [r2, #12]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000ed00 	.word	0xe000ed00
 8004b9c:	05fa0000 	.word	0x05fa0000

08004ba0 <__NVIC_GetPriorityGrouping>:
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	0a1b      	lsrs	r3, r3, #8
 8004baa:	f003 0307 	and.w	r3, r3, #7
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <__NVIC_EnableIRQ>:
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	db0b      	blt.n	8004be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	f003 021f 	and.w	r2, r3, #31
 8004bd4:	4907      	ldr	r1, [pc, #28]	; (8004bf4 <__NVIC_EnableIRQ+0x38>)
 8004bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2001      	movs	r0, #1
 8004bde:	fa00 f202 	lsl.w	r2, r0, r2
 8004be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	e000e100 	.word	0xe000e100

08004bf8 <__NVIC_SetPriority>:
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db0a      	blt.n	8004c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	490c      	ldr	r1, [pc, #48]	; (8004c44 <__NVIC_SetPriority+0x4c>)
 8004c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c20:	e00a      	b.n	8004c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4908      	ldr	r1, [pc, #32]	; (8004c48 <__NVIC_SetPriority+0x50>)
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	440b      	add	r3, r1
 8004c36:	761a      	strb	r2, [r3, #24]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	e000e100 	.word	0xe000e100
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	; 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f1c3 0307 	rsb	r3, r3, #7
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf28      	it	cs
 8004c6a:	2304      	movcs	r3, #4
 8004c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d902      	bls.n	8004c7c <NVIC_EncodePriority+0x30>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3b03      	subs	r3, #3
 8004c7a:	e000      	b.n	8004c7e <NVIC_EncodePriority+0x32>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	401a      	ands	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c94:	f04f 31ff 	mov.w	r1, #4294967295
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	43d9      	mvns	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	4313      	orrs	r3, r2
         );
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3724      	adds	r7, #36	; 0x24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff ff4c 	bl	8004b58 <__NVIC_SetPriorityGrouping>
}
 8004cc0:	bf00      	nop
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cd6:	f7ff ff63 	bl	8004ba0 <__NVIC_GetPriorityGrouping>
 8004cda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	6978      	ldr	r0, [r7, #20]
 8004ce2:	f7ff ffb3 	bl	8004c4c <NVIC_EncodePriority>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff ff82 	bl	8004bf8 <__NVIC_SetPriority>
}
 8004cf4:	bf00      	nop
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff ff56 	bl	8004bbc <__NVIC_EnableIRQ>
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b098      	sub	sp, #96	; 0x60
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004d20:	4a84      	ldr	r2, [pc, #528]	; (8004f34 <HAL_FDCAN_Init+0x21c>)
 8004d22:	f107 030c 	add.w	r3, r7, #12
 8004d26:	4611      	mov	r1, r2
 8004d28:	224c      	movs	r2, #76	; 0x4c
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f003 ff04 	bl	8008b38 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e1c6      	b.n	80050c8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a7e      	ldr	r2, [pc, #504]	; (8004f38 <HAL_FDCAN_Init+0x220>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d106      	bne.n	8004d52 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fc2c 	bl	80045c4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0210 	bic.w	r2, r2, #16
 8004d7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d7c:	f7ff feb0 	bl	8004ae0 <HAL_GetTick>
 8004d80:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d82:	e014      	b.n	8004dae <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d84:	f7ff feac 	bl	8004ae0 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b0a      	cmp	r3, #10
 8004d90:	d90d      	bls.n	8004dae <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d98:	f043 0201 	orr.w	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2203      	movs	r2, #3
 8004da6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e18c      	b.n	80050c8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d0e3      	beq.n	8004d84 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dcc:	f7ff fe88 	bl	8004ae0 <HAL_GetTick>
 8004dd0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004dd2:	e014      	b.n	8004dfe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004dd4:	f7ff fe84 	bl	8004ae0 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b0a      	cmp	r3, #10
 8004de0:	d90d      	bls.n	8004dfe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004de8:	f043 0201 	orr.w	r2, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2203      	movs	r2, #3
 8004df6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e164      	b.n	80050c8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0e3      	beq.n	8004dd4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0202 	orr.w	r2, r2, #2
 8004e1a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	7c1b      	ldrb	r3, [r3, #16]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d108      	bne.n	8004e36 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e32:	619a      	str	r2, [r3, #24]
 8004e34:	e007      	b.n	8004e46 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e44:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7c5b      	ldrb	r3, [r3, #17]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d108      	bne.n	8004e60 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e5c:	619a      	str	r2, [r3, #24]
 8004e5e:	e007      	b.n	8004e70 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e6e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	7c9b      	ldrb	r3, [r3, #18]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d108      	bne.n	8004e8a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e86:	619a      	str	r2, [r3, #24]
 8004e88:	e007      	b.n	8004e9a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699a      	ldr	r2, [r3, #24]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e98:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004ebe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0210 	bic.w	r2, r2, #16
 8004ece:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d108      	bne.n	8004eea <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0204 	orr.w	r2, r2, #4
 8004ee6:	619a      	str	r2, [r3, #24]
 8004ee8:	e030      	b.n	8004f4c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d02c      	beq.n	8004f4c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d020      	beq.n	8004f3c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f08:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0210 	orr.w	r2, r2, #16
 8004f18:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d114      	bne.n	8004f4c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0220 	orr.w	r2, r2, #32
 8004f30:	619a      	str	r2, [r3, #24]
 8004f32:	e00b      	b.n	8004f4c <HAL_FDCAN_Init+0x234>
 8004f34:	08008cc8 	.word	0x08008cc8
 8004f38:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0220 	orr.w	r2, r2, #32
 8004f4a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f5c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f64:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f74:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f76:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f80:	d115      	bne.n	8004fae <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004f90:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	3b01      	subs	r3, #1
 8004f98:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004f9a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004faa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004fac:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd4:	4413      	add	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d011      	beq.n	8004ffe <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004fe2:	f023 0107 	bic.w	r1, r3, #7
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	3360      	adds	r3, #96	; 0x60
 8004fee:	443b      	add	r3, r7
 8004ff0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d011      	beq.n	800502a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800500e:	f023 0107 	bic.w	r1, r3, #7
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	3360      	adds	r3, #96	; 0x60
 800501a:	443b      	add	r3, r7
 800501c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502e:	2b00      	cmp	r3, #0
 8005030:	d012      	beq.n	8005058 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800503a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	3360      	adds	r3, #96	; 0x60
 8005046:	443b      	add	r3, r7
 8005048:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800504c:	011a      	lsls	r2, r3, #4
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505c:	2b00      	cmp	r3, #0
 800505e:	d012      	beq.n	8005086 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005068:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	3360      	adds	r3, #96	; 0x60
 8005074:	443b      	add	r3, r7
 8005076:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a11      	ldr	r2, [pc, #68]	; (80050d0 <HAL_FDCAN_Init+0x3b8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d107      	bne.n	80050a0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f022 0203 	bic.w	r2, r2, #3
 800509e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fb1f 	bl	80056fc <FDCAN_CalcultateRamBlockAddresses>
 80050be:	4603      	mov	r3, r0
 80050c0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80050c4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3760      	adds	r7, #96	; 0x60
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	4000a000 	.word	0x4000a000

080050d4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b096      	sub	sp, #88	; 0x58
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80050dc:	4b9a      	ldr	r3, [pc, #616]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	079b      	lsls	r3, r3, #30
 80050e2:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80050e4:	4b98      	ldr	r3, [pc, #608]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	079b      	lsls	r3, r3, #30
 80050ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050ec:	4013      	ands	r3, r2
 80050ee:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80050fa:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005104:	4013      	ands	r3, r2
 8005106:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800511c:	4013      	ands	r3, r2
 800511e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800512a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005134:	4013      	ands	r3, r2
 8005136:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8005142:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800514c:	4013      	ands	r3, r2
 800514e:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005156:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800515a:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005164:	4013      	ands	r3, r2
 8005166:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005176:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d010      	beq.n	80051a6 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005198:	651a      	str	r2, [r3, #80]	; 0x50
 800519a:	4b6b      	ldr	r3, [pc, #428]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 800519c:	2200      	movs	r2, #0
 800519e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fa5f 	bl	8005664 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80051a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a8:	0a9b      	lsrs	r3, r3, #10
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01d      	beq.n	80051ee <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	0a9b      	lsrs	r3, r3, #10
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d017      	beq.n	80051ee <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80051c6:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80051d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d2:	4013      	ands	r3, r2
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051de:	651a      	str	r2, [r3, #80]	; 0x50
 80051e0:	4b59      	ldr	r3, [pc, #356]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80051e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fa12 	bl	8005612 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80051ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00d      	beq.n	8005210 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051fa:	4b54      	ldr	r3, [pc, #336]	; (800534c <HAL_FDCAN_IRQHandler+0x278>)
 80051fc:	400b      	ands	r3, r1
 80051fe:	6513      	str	r3, [r2, #80]	; 0x50
 8005200:	4a51      	ldr	r2, [pc, #324]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 8005202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005204:	0f9b      	lsrs	r3, r3, #30
 8005206:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005208:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f9c0 	bl	8005590 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00d      	beq.n	8005232 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800521c:	4b4b      	ldr	r3, [pc, #300]	; (800534c <HAL_FDCAN_IRQHandler+0x278>)
 800521e:	400b      	ands	r3, r1
 8005220:	6513      	str	r3, [r2, #80]	; 0x50
 8005222:	4a49      	ldr	r2, [pc, #292]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 8005224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005226:	0f9b      	lsrs	r3, r3, #30
 8005228:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800522a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f9ba 	bl	80055a6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00d      	beq.n	8005254 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800523e:	4b43      	ldr	r3, [pc, #268]	; (800534c <HAL_FDCAN_IRQHandler+0x278>)
 8005240:	400b      	ands	r3, r1
 8005242:	6513      	str	r3, [r2, #80]	; 0x50
 8005244:	4a40      	ldr	r2, [pc, #256]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 8005246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005248:	0f9b      	lsrs	r3, r3, #30
 800524a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800524c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f9b4 	bl	80055bc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00d      	beq.n	8005276 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005260:	4b3a      	ldr	r3, [pc, #232]	; (800534c <HAL_FDCAN_IRQHandler+0x278>)
 8005262:	400b      	ands	r3, r1
 8005264:	6513      	str	r3, [r2, #80]	; 0x50
 8005266:	4a38      	ldr	r2, [pc, #224]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 8005268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526a:	0f9b      	lsrs	r3, r3, #30
 800526c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800526e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f9ae 	bl	80055d2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005278:	0adb      	lsrs	r3, r3, #11
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d010      	beq.n	80052a4 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	0adb      	lsrs	r3, r3, #11
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005296:	651a      	str	r2, [r3, #80]	; 0x50
 8005298:	4b2b      	ldr	r3, [pc, #172]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 800529a:	2200      	movs	r2, #0
 800529c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f9a2 	bl	80055e8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80052a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a6:	0a5b      	lsrs	r3, r3, #9
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01d      	beq.n	80052ec <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	0a5b      	lsrs	r3, r3, #9
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d017      	beq.n	80052ec <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052c4:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d0:	4013      	ands	r3, r2
 80052d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052dc:	651a      	str	r2, [r3, #80]	; 0x50
 80052de:	4b1a      	ldr	r3, [pc, #104]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80052e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f988 	bl	80055fc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80052ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ee:	0cdb      	lsrs	r3, r3, #19
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d010      	beq.n	800531a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	0cdb      	lsrs	r3, r3, #19
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800530c:	651a      	str	r2, [r3, #80]	; 0x50
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 8005310:	2200      	movs	r2, #0
 8005312:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f987 	bl	8005628 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531c:	0c1b      	lsrs	r3, r3, #16
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d010      	beq.n	8005354 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800533a:	651a      	str	r2, [r3, #80]	; 0x50
 800533c:	4b02      	ldr	r3, [pc, #8]	; (8005348 <HAL_FDCAN_IRQHandler+0x274>)
 800533e:	2200      	movs	r2, #0
 8005340:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	e004      	b.n	8005350 <HAL_FDCAN_IRQHandler+0x27c>
 8005346:	bf00      	nop
 8005348:	4000a800 	.word	0x4000a800
 800534c:	3fcfffff 	.word	0x3fcfffff
 8005350:	f000 f974 	bl	800563c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005356:	0c9b      	lsrs	r3, r3, #18
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d010      	beq.n	8005382 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	0c9b      	lsrs	r3, r3, #18
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005374:	651a      	str	r2, [r3, #80]	; 0x50
 8005376:	4b83      	ldr	r3, [pc, #524]	; (8005584 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005378:	2200      	movs	r2, #0
 800537a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f967 	bl	8005650 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005384:	0c5b      	lsrs	r3, r3, #17
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d015      	beq.n	80053ba <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	0c5b      	lsrs	r3, r3, #17
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00f      	beq.n	80053ba <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053a2:	651a      	str	r2, [r3, #80]	; 0x50
 80053a4:	4b77      	ldr	r3, [pc, #476]	; (8005584 <HAL_FDCAN_IRQHandler+0x4b0>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80053ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00d      	beq.n	80053dc <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053c6:	4b70      	ldr	r3, [pc, #448]	; (8005588 <HAL_FDCAN_IRQHandler+0x4b4>)
 80053c8:	400b      	ands	r3, r1
 80053ca:	6513      	str	r3, [r2, #80]	; 0x50
 80053cc:	4a6d      	ldr	r2, [pc, #436]	; (8005584 <HAL_FDCAN_IRQHandler+0x4b0>)
 80053ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d0:	0f9b      	lsrs	r3, r3, #30
 80053d2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80053d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f958 	bl	800568c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80053dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d011      	beq.n	8005406 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053e8:	4b67      	ldr	r3, [pc, #412]	; (8005588 <HAL_FDCAN_IRQHandler+0x4b4>)
 80053ea:	400b      	ands	r3, r1
 80053ec:	6513      	str	r3, [r2, #80]	; 0x50
 80053ee:	4a65      	ldr	r2, [pc, #404]	; (8005584 <HAL_FDCAN_IRQHandler+0x4b0>)
 80053f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f2:	0f9b      	lsrs	r3, r3, #30
 80053f4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80053fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a60      	ldr	r2, [pc, #384]	; (800558c <HAL_FDCAN_IRQHandler+0x4b8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	f040 80ac 	bne.w	800556a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80a4 	beq.w	800556a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005436:	4013      	ands	r3, r2
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800544e:	4013      	ands	r3, r2
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005466:	4013      	ands	r3, r2
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005474:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	6a3a      	ldr	r2, [r7, #32]
 800547e:	4013      	ands	r3, r2
 8005480:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800548c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	4013      	ands	r3, r2
 8005498:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d007      	beq.n	80054c0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80054b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f8f1 	bl	80056a2 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054cc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80054ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f8f1 	bl	80056b8 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	099b      	lsrs	r3, r3, #6
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01a      	beq.n	8005518 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	099b      	lsrs	r3, r3, #6
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d014      	beq.n	8005518 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005504:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2240      	movs	r2, #64	; 0x40
 800550c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	6939      	ldr	r1, [r7, #16]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f8db 	bl	80056ce <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005524:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f8dc 	bl	80056e6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00b      	beq.n	800554c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00b      	beq.n	800556a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f87f 	bl	8005678 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800557a:	bf00      	nop
 800557c:	3758      	adds	r7, #88	; 0x58
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	4000a800 	.word	0x4000a800
 8005588:	3fcfffff 	.word	0x3fcfffff
 800558c:	4000a000 	.word	0x4000a000

08005590 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005712:	4ba7      	ldr	r3, [pc, #668]	; (80059b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005714:	4013      	ands	r3, r2
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	0091      	lsls	r1, r2, #2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	430b      	orrs	r3, r1
 8005720:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800572c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	041a      	lsls	r2, r3, #16
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	4413      	add	r3, r2
 8005748:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005752:	4b97      	ldr	r3, [pc, #604]	; (80059b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005754:	4013      	ands	r3, r2
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	0091      	lsls	r1, r2, #2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	430b      	orrs	r3, r1
 8005760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005774:	041a      	lsls	r2, r3, #16
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	4413      	add	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005794:	4b86      	ldr	r3, [pc, #536]	; (80059b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005796:	4013      	ands	r3, r2
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	0091      	lsls	r1, r2, #2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	430b      	orrs	r3, r1
 80057a2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	041a      	lsls	r2, r3, #16
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4413      	add	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80057dc:	4b74      	ldr	r3, [pc, #464]	; (80059b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80057de:	4013      	ands	r3, r2
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	0091      	lsls	r1, r2, #2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	430b      	orrs	r3, r1
 80057ea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057f6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fe:	041a      	lsls	r2, r3, #16
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005812:	fb02 f303 	mul.w	r3, r2, r3
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	4413      	add	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005824:	4b62      	ldr	r3, [pc, #392]	; (80059b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005826:	4013      	ands	r3, r2
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	0091      	lsls	r1, r2, #2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	430b      	orrs	r3, r1
 8005832:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800583e:	fb02 f303 	mul.w	r3, r2, r3
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	4413      	add	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005850:	4b57      	ldr	r3, [pc, #348]	; (80059b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005852:	4013      	ands	r3, r2
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	0091      	lsls	r1, r2, #2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	430b      	orrs	r3, r1
 800585e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800586a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005872:	041a      	lsls	r2, r3, #16
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	4413      	add	r3, r2
 8005888:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005892:	4b47      	ldr	r3, [pc, #284]	; (80059b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005894:	4013      	ands	r3, r2
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	0091      	lsls	r1, r2, #2
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6812      	ldr	r2, [r2, #0]
 800589e:	430b      	orrs	r3, r1
 80058a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058ac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b4:	041a      	lsls	r2, r3, #16
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058c8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d0:	061a      	lsls	r2, r3, #24
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e0:	4b34      	ldr	r3, [pc, #208]	; (80059b4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80058e2:	4413      	add	r3, r2
 80058e4:	009a      	lsls	r2, r3, #2
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	441a      	add	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	441a      	add	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005916:	fb01 f303 	mul.w	r3, r1, r3
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	441a      	add	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800592e:	fb01 f303 	mul.w	r3, r1, r3
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	441a      	add	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	441a      	add	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005976:	fb01 f303 	mul.w	r3, r1, r3
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	441a      	add	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a6:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d915      	bls.n	80059d8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80059ac:	e006      	b.n	80059bc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80059ae:	bf00      	nop
 80059b0:	ffff0003 	.word	0xffff0003
 80059b4:	10002b00 	.word	0x10002b00
 80059b8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2203      	movs	r2, #3
 80059d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e010      	b.n	80059fa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e005      	b.n	80059ec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3304      	adds	r3, #4
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d3f3      	bcc.n	80059e0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop

08005a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b089      	sub	sp, #36	; 0x24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a16:	4b89      	ldr	r3, [pc, #548]	; (8005c3c <HAL_GPIO_Init+0x234>)
 8005a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a1a:	e194      	b.n	8005d46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	2101      	movs	r1, #1
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	fa01 f303 	lsl.w	r3, r1, r3
 8005a28:	4013      	ands	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8186 	beq.w	8005d40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d005      	beq.n	8005a4c <HAL_GPIO_Init+0x44>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d130      	bne.n	8005aae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	2203      	movs	r2, #3
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	4013      	ands	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a82:	2201      	movs	r2, #1
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	091b      	lsrs	r3, r3, #4
 8005a98:	f003 0201 	and.w	r2, r3, #1
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d017      	beq.n	8005aea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d123      	bne.n	8005b3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	08da      	lsrs	r2, r3, #3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3208      	adds	r2, #8
 8005afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	220f      	movs	r2, #15
 8005b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b12:	43db      	mvns	r3, r3
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	4013      	ands	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	08da      	lsrs	r2, r3, #3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3208      	adds	r2, #8
 8005b38:	69b9      	ldr	r1, [r7, #24]
 8005b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	2203      	movs	r2, #3
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 0203 	and.w	r2, r3, #3
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80e0 	beq.w	8005d40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b80:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <HAL_GPIO_Init+0x238>)
 8005b82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b86:	4a2e      	ldr	r2, [pc, #184]	; (8005c40 <HAL_GPIO_Init+0x238>)
 8005b88:	f043 0302 	orr.w	r3, r3, #2
 8005b8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b90:	4b2b      	ldr	r3, [pc, #172]	; (8005c40 <HAL_GPIO_Init+0x238>)
 8005b92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b9e:	4a29      	ldr	r2, [pc, #164]	; (8005c44 <HAL_GPIO_Init+0x23c>)
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	089b      	lsrs	r3, r3, #2
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	220f      	movs	r2, #15
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a20      	ldr	r2, [pc, #128]	; (8005c48 <HAL_GPIO_Init+0x240>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d052      	beq.n	8005c70 <HAL_GPIO_Init+0x268>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <HAL_GPIO_Init+0x244>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d031      	beq.n	8005c36 <HAL_GPIO_Init+0x22e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <HAL_GPIO_Init+0x248>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d02b      	beq.n	8005c32 <HAL_GPIO_Init+0x22a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <HAL_GPIO_Init+0x24c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d025      	beq.n	8005c2e <HAL_GPIO_Init+0x226>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a1c      	ldr	r2, [pc, #112]	; (8005c58 <HAL_GPIO_Init+0x250>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d01f      	beq.n	8005c2a <HAL_GPIO_Init+0x222>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1b      	ldr	r2, [pc, #108]	; (8005c5c <HAL_GPIO_Init+0x254>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d019      	beq.n	8005c26 <HAL_GPIO_Init+0x21e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1a      	ldr	r2, [pc, #104]	; (8005c60 <HAL_GPIO_Init+0x258>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_GPIO_Init+0x21a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <HAL_GPIO_Init+0x25c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00d      	beq.n	8005c1e <HAL_GPIO_Init+0x216>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a18      	ldr	r2, [pc, #96]	; (8005c68 <HAL_GPIO_Init+0x260>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d007      	beq.n	8005c1a <HAL_GPIO_Init+0x212>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <HAL_GPIO_Init+0x264>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d101      	bne.n	8005c16 <HAL_GPIO_Init+0x20e>
 8005c12:	2309      	movs	r3, #9
 8005c14:	e02d      	b.n	8005c72 <HAL_GPIO_Init+0x26a>
 8005c16:	230a      	movs	r3, #10
 8005c18:	e02b      	b.n	8005c72 <HAL_GPIO_Init+0x26a>
 8005c1a:	2308      	movs	r3, #8
 8005c1c:	e029      	b.n	8005c72 <HAL_GPIO_Init+0x26a>
 8005c1e:	2307      	movs	r3, #7
 8005c20:	e027      	b.n	8005c72 <HAL_GPIO_Init+0x26a>
 8005c22:	2306      	movs	r3, #6
 8005c24:	e025      	b.n	8005c72 <HAL_GPIO_Init+0x26a>
 8005c26:	2305      	movs	r3, #5
 8005c28:	e023      	b.n	8005c72 <HAL_GPIO_Init+0x26a>
 8005c2a:	2304      	movs	r3, #4
 8005c2c:	e021      	b.n	8005c72 <HAL_GPIO_Init+0x26a>
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e01f      	b.n	8005c72 <HAL_GPIO_Init+0x26a>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e01d      	b.n	8005c72 <HAL_GPIO_Init+0x26a>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e01b      	b.n	8005c72 <HAL_GPIO_Init+0x26a>
 8005c3a:	bf00      	nop
 8005c3c:	58000080 	.word	0x58000080
 8005c40:	58024400 	.word	0x58024400
 8005c44:	58000400 	.word	0x58000400
 8005c48:	58020000 	.word	0x58020000
 8005c4c:	58020400 	.word	0x58020400
 8005c50:	58020800 	.word	0x58020800
 8005c54:	58020c00 	.word	0x58020c00
 8005c58:	58021000 	.word	0x58021000
 8005c5c:	58021400 	.word	0x58021400
 8005c60:	58021800 	.word	0x58021800
 8005c64:	58021c00 	.word	0x58021c00
 8005c68:	58022000 	.word	0x58022000
 8005c6c:	58022400 	.word	0x58022400
 8005c70:	2300      	movs	r3, #0
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	f002 0203 	and.w	r2, r2, #3
 8005c78:	0092      	lsls	r2, r2, #2
 8005c7a:	4093      	lsls	r3, r2
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c82:	4938      	ldr	r1, [pc, #224]	; (8005d64 <HAL_GPIO_Init+0x35c>)
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	089b      	lsrs	r3, r3, #2
 8005c88:	3302      	adds	r3, #2
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	43db      	mvns	r3, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3301      	adds	r3, #1
 8005d44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f47f ae63 	bne.w	8005a1c <HAL_GPIO_Init+0x14>
  }
}
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	3724      	adds	r7, #36	; 0x24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	58000400 	.word	0x58000400

08005d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	807b      	strh	r3, [r7, #2]
 8005d74:	4613      	mov	r3, r2
 8005d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d78:	787b      	ldrb	r3, [r7, #1]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d7e:	887a      	ldrh	r2, [r7, #2]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d84:	e003      	b.n	8005d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d86:	887b      	ldrh	r3, [r7, #2]
 8005d88:	041a      	lsls	r2, r3, #16
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	619a      	str	r2, [r3, #24]
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dac:	887a      	ldrh	r2, [r7, #2]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4013      	ands	r3, r2
 8005db2:	041a      	lsls	r2, r3, #16
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	43d9      	mvns	r1, r3
 8005db8:	887b      	ldrh	r3, [r7, #2]
 8005dba:	400b      	ands	r3, r1
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	619a      	str	r2, [r3, #24]
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ddc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d008      	beq.n	8005dfa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dec:	88fb      	ldrh	r3, [r7, #6]
 8005dee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f804 	bl	8005e02 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	4603      	mov	r3, r0
 8005e0a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1a:	b08f      	sub	sp, #60	; 0x3c
 8005e1c:	af0a      	add	r7, sp, #40	; 0x28
 8005e1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e054      	b.n	8005ed4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7fe fc33 	bl	80046b0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d102      	bne.n	8005e64 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f002 fc73 	bl	8008754 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	687e      	ldr	r6, [r7, #4]
 8005e76:	466d      	mov	r5, sp
 8005e78:	f106 0410 	add.w	r4, r6, #16
 8005e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e88:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e8c:	1d33      	adds	r3, r6, #4
 8005e8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e90:	6838      	ldr	r0, [r7, #0]
 8005e92:	f002 fbf1 	bl	8008678 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f002 fc6a 	bl	8008776 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	687e      	ldr	r6, [r7, #4]
 8005eaa:	466d      	mov	r5, sp
 8005eac:	f106 0410 	add.w	r4, r6, #16
 8005eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ebc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ec0:	1d33      	adds	r3, r6, #4
 8005ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ec4:	6838      	ldr	r0, [r7, #0]
 8005ec6:	f002 fd49 	bl	800895c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005edc <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005ee8:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <HAL_PWR_EnterSLEEPMode+0x30>)
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	4a07      	ldr	r2, [pc, #28]	; (8005f0c <HAL_PWR_EnterSLEEPMode+0x30>)
 8005eee:	f023 0304 	bic.w	r3, r3, #4
 8005ef2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8005efa:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8005efc:	e000      	b.n	8005f00 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 8005efe:	bf20      	wfe
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	e000ed00 	.word	0xe000ed00

08005f10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f18:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <HAL_PWREx_ConfigSupply+0x70>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d00a      	beq.n	8005f3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f24:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <HAL_PWREx_ConfigSupply+0x70>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d001      	beq.n	8005f36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e01f      	b.n	8005f76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e01d      	b.n	8005f76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f3a:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <HAL_PWREx_ConfigSupply+0x70>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f023 0207 	bic.w	r2, r3, #7
 8005f42:	490f      	ldr	r1, [pc, #60]	; (8005f80 <HAL_PWREx_ConfigSupply+0x70>)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f4a:	f7fe fdc9 	bl	8004ae0 <HAL_GetTick>
 8005f4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f50:	e009      	b.n	8005f66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f52:	f7fe fdc5 	bl	8004ae0 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f60:	d901      	bls.n	8005f66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e007      	b.n	8005f76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f66:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <HAL_PWREx_ConfigSupply+0x70>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f72:	d1ee      	bne.n	8005f52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	58024800 	.word	0x58024800

08005f84 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f92:	60d3      	str	r3, [r2, #12]
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	58024800 	.word	0x58024800

08005fa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	; 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d102      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f000 bc1d 	b.w	80067f2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8087 	beq.w	80060d4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc6:	4b99      	ldr	r3, [pc, #612]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fd0:	4b96      	ldr	r3, [pc, #600]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d007      	beq.n	8005fec <HAL_RCC_OscConfig+0x48>
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	2b18      	cmp	r3, #24
 8005fe0:	d110      	bne.n	8006004 <HAL_RCC_OscConfig+0x60>
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d10b      	bne.n	8006004 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fec:	4b8f      	ldr	r3, [pc, #572]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d06c      	beq.n	80060d2 <HAL_RCC_OscConfig+0x12e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d168      	bne.n	80060d2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e3f6      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600c:	d106      	bne.n	800601c <HAL_RCC_OscConfig+0x78>
 800600e:	4b87      	ldr	r3, [pc, #540]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a86      	ldr	r2, [pc, #536]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	e02e      	b.n	800607a <HAL_RCC_OscConfig+0xd6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10c      	bne.n	800603e <HAL_RCC_OscConfig+0x9a>
 8006024:	4b81      	ldr	r3, [pc, #516]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a80      	ldr	r2, [pc, #512]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800602a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	4b7e      	ldr	r3, [pc, #504]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a7d      	ldr	r2, [pc, #500]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	e01d      	b.n	800607a <HAL_RCC_OscConfig+0xd6>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006046:	d10c      	bne.n	8006062 <HAL_RCC_OscConfig+0xbe>
 8006048:	4b78      	ldr	r3, [pc, #480]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a77      	ldr	r2, [pc, #476]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800604e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	4b75      	ldr	r3, [pc, #468]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a74      	ldr	r2, [pc, #464]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800605a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	e00b      	b.n	800607a <HAL_RCC_OscConfig+0xd6>
 8006062:	4b72      	ldr	r3, [pc, #456]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a71      	ldr	r2, [pc, #452]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4b6f      	ldr	r3, [pc, #444]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a6e      	ldr	r2, [pc, #440]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006078:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d013      	beq.n	80060aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006082:	f7fe fd2d 	bl	8004ae0 <HAL_GetTick>
 8006086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800608a:	f7fe fd29 	bl	8004ae0 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b64      	cmp	r3, #100	; 0x64
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e3aa      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800609c:	4b63      	ldr	r3, [pc, #396]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f0      	beq.n	800608a <HAL_RCC_OscConfig+0xe6>
 80060a8:	e014      	b.n	80060d4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060aa:	f7fe fd19 	bl	8004ae0 <HAL_GetTick>
 80060ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060b0:	e008      	b.n	80060c4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b2:	f7fe fd15 	bl	8004ae0 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b64      	cmp	r3, #100	; 0x64
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e396      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060c4:	4b59      	ldr	r3, [pc, #356]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1f0      	bne.n	80060b2 <HAL_RCC_OscConfig+0x10e>
 80060d0:	e000      	b.n	80060d4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80cb 	beq.w	8006278 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e2:	4b52      	ldr	r3, [pc, #328]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060ec:	4b4f      	ldr	r3, [pc, #316]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <HAL_RCC_OscConfig+0x164>
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2b18      	cmp	r3, #24
 80060fc:	d156      	bne.n	80061ac <HAL_RCC_OscConfig+0x208>
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d151      	bne.n	80061ac <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006108:	4b48      	ldr	r3, [pc, #288]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_RCC_OscConfig+0x17c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e368      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006120:	4b42      	ldr	r3, [pc, #264]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f023 0219 	bic.w	r2, r3, #25
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	493f      	ldr	r1, [pc, #252]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800612e:	4313      	orrs	r3, r2
 8006130:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006132:	f7fe fcd5 	bl	8004ae0 <HAL_GetTick>
 8006136:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800613a:	f7fe fcd1 	bl	8004ae0 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e352      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800614c:	4b37      	ldr	r3, [pc, #220]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0f0      	beq.n	800613a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006158:	f7fe fcf2 	bl	8004b40 <HAL_GetREVID>
 800615c:	4603      	mov	r3, r0
 800615e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006162:	4293      	cmp	r3, r2
 8006164:	d817      	bhi.n	8006196 <HAL_RCC_OscConfig+0x1f2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d108      	bne.n	8006180 <HAL_RCC_OscConfig+0x1dc>
 800616e:	4b2f      	ldr	r3, [pc, #188]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006176:	4a2d      	ldr	r2, [pc, #180]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800617c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800617e:	e07b      	b.n	8006278 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006180:	4b2a      	ldr	r3, [pc, #168]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	031b      	lsls	r3, r3, #12
 800618e:	4927      	ldr	r1, [pc, #156]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006190:	4313      	orrs	r3, r2
 8006192:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006194:	e070      	b.n	8006278 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006196:	4b25      	ldr	r3, [pc, #148]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	061b      	lsls	r3, r3, #24
 80061a4:	4921      	ldr	r1, [pc, #132]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061aa:	e065      	b.n	8006278 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d048      	beq.n	8006246 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061b4:	4b1d      	ldr	r3, [pc, #116]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f023 0219 	bic.w	r2, r3, #25
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	491a      	ldr	r1, [pc, #104]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c6:	f7fe fc8b 	bl	8004ae0 <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ce:	f7fe fc87 	bl	8004ae0 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e308      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061e0:	4b12      	ldr	r3, [pc, #72]	; (800622c <HAL_RCC_OscConfig+0x288>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ec:	f7fe fca8 	bl	8004b40 <HAL_GetREVID>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d81a      	bhi.n	8006230 <HAL_RCC_OscConfig+0x28c>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b40      	cmp	r3, #64	; 0x40
 8006200:	d108      	bne.n	8006214 <HAL_RCC_OscConfig+0x270>
 8006202:	4b0a      	ldr	r3, [pc, #40]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800620a:	4a08      	ldr	r2, [pc, #32]	; (800622c <HAL_RCC_OscConfig+0x288>)
 800620c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006210:	6053      	str	r3, [r2, #4]
 8006212:	e031      	b.n	8006278 <HAL_RCC_OscConfig+0x2d4>
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	031b      	lsls	r3, r3, #12
 8006222:	4902      	ldr	r1, [pc, #8]	; (800622c <HAL_RCC_OscConfig+0x288>)
 8006224:	4313      	orrs	r3, r2
 8006226:	604b      	str	r3, [r1, #4]
 8006228:	e026      	b.n	8006278 <HAL_RCC_OscConfig+0x2d4>
 800622a:	bf00      	nop
 800622c:	58024400 	.word	0x58024400
 8006230:	4b9a      	ldr	r3, [pc, #616]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	061b      	lsls	r3, r3, #24
 800623e:	4997      	ldr	r1, [pc, #604]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006240:	4313      	orrs	r3, r2
 8006242:	604b      	str	r3, [r1, #4]
 8006244:	e018      	b.n	8006278 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006246:	4b95      	ldr	r3, [pc, #596]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a94      	ldr	r2, [pc, #592]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006252:	f7fe fc45 	bl	8004ae0 <HAL_GetTick>
 8006256:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800625a:	f7fe fc41 	bl	8004ae0 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e2c2      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800626c:	4b8b      	ldr	r3, [pc, #556]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f0      	bne.n	800625a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80a9 	beq.w	80063d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006286:	4b85      	ldr	r3, [pc, #532]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800628e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006290:	4b82      	ldr	r3, [pc, #520]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b08      	cmp	r3, #8
 800629a:	d007      	beq.n	80062ac <HAL_RCC_OscConfig+0x308>
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	2b18      	cmp	r3, #24
 80062a0:	d13a      	bne.n	8006318 <HAL_RCC_OscConfig+0x374>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d135      	bne.n	8006318 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062ac:	4b7b      	ldr	r3, [pc, #492]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <HAL_RCC_OscConfig+0x320>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	2b80      	cmp	r3, #128	; 0x80
 80062be:	d001      	beq.n	80062c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e296      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062c4:	f7fe fc3c 	bl	8004b40 <HAL_GetREVID>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d817      	bhi.n	8006302 <HAL_RCC_OscConfig+0x35e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d108      	bne.n	80062ec <HAL_RCC_OscConfig+0x348>
 80062da:	4b70      	ldr	r3, [pc, #448]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80062e2:	4a6e      	ldr	r2, [pc, #440]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 80062e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062ea:	e075      	b.n	80063d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062ec:	4b6b      	ldr	r3, [pc, #428]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	069b      	lsls	r3, r3, #26
 80062fa:	4968      	ldr	r1, [pc, #416]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006300:	e06a      	b.n	80063d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006302:	4b66      	ldr	r3, [pc, #408]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	061b      	lsls	r3, r3, #24
 8006310:	4962      	ldr	r1, [pc, #392]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006312:	4313      	orrs	r3, r2
 8006314:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006316:	e05f      	b.n	80063d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d042      	beq.n	80063a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006320:	4b5e      	ldr	r3, [pc, #376]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a5d      	ldr	r2, [pc, #372]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632c:	f7fe fbd8 	bl	8004ae0 <HAL_GetTick>
 8006330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006334:	f7fe fbd4 	bl	8004ae0 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e255      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006346:	4b55      	ldr	r3, [pc, #340]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006352:	f7fe fbf5 	bl	8004b40 <HAL_GetREVID>
 8006356:	4603      	mov	r3, r0
 8006358:	f241 0203 	movw	r2, #4099	; 0x1003
 800635c:	4293      	cmp	r3, r2
 800635e:	d817      	bhi.n	8006390 <HAL_RCC_OscConfig+0x3ec>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	2b20      	cmp	r3, #32
 8006366:	d108      	bne.n	800637a <HAL_RCC_OscConfig+0x3d6>
 8006368:	4b4c      	ldr	r3, [pc, #304]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006370:	4a4a      	ldr	r2, [pc, #296]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006372:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006376:	6053      	str	r3, [r2, #4]
 8006378:	e02e      	b.n	80063d8 <HAL_RCC_OscConfig+0x434>
 800637a:	4b48      	ldr	r3, [pc, #288]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	069b      	lsls	r3, r3, #26
 8006388:	4944      	ldr	r1, [pc, #272]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 800638a:	4313      	orrs	r3, r2
 800638c:	604b      	str	r3, [r1, #4]
 800638e:	e023      	b.n	80063d8 <HAL_RCC_OscConfig+0x434>
 8006390:	4b42      	ldr	r3, [pc, #264]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	061b      	lsls	r3, r3, #24
 800639e:	493f      	ldr	r1, [pc, #252]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60cb      	str	r3, [r1, #12]
 80063a4:	e018      	b.n	80063d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80063a6:	4b3d      	ldr	r3, [pc, #244]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a3c      	ldr	r2, [pc, #240]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 80063ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b2:	f7fe fb95 	bl	8004ae0 <HAL_GetTick>
 80063b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80063ba:	f7fe fb91 	bl	8004ae0 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e212      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063cc:	4b33      	ldr	r3, [pc, #204]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f0      	bne.n	80063ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d036      	beq.n	8006452 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d019      	beq.n	8006420 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ec:	4b2b      	ldr	r3, [pc, #172]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 80063ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f0:	4a2a      	ldr	r2, [pc, #168]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7fe fb72 	bl	8004ae0 <HAL_GetTick>
 80063fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006400:	f7fe fb6e 	bl	8004ae0 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e1ef      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006412:	4b22      	ldr	r3, [pc, #136]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0x45c>
 800641e:	e018      	b.n	8006452 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006420:	4b1e      	ldr	r3, [pc, #120]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006424:	4a1d      	ldr	r2, [pc, #116]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800642c:	f7fe fb58 	bl	8004ae0 <HAL_GetTick>
 8006430:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006434:	f7fe fb54 	bl	8004ae0 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e1d5      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006446:	4b15      	ldr	r3, [pc, #84]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f0      	bne.n	8006434 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d039      	beq.n	80064d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01c      	beq.n	80064a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006466:	4b0d      	ldr	r3, [pc, #52]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a0c      	ldr	r2, [pc, #48]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 800646c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006470:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006472:	f7fe fb35 	bl	8004ae0 <HAL_GetTick>
 8006476:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800647a:	f7fe fb31 	bl	8004ae0 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e1b2      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800648c:	4b03      	ldr	r3, [pc, #12]	; (800649c <HAL_RCC_OscConfig+0x4f8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0f0      	beq.n	800647a <HAL_RCC_OscConfig+0x4d6>
 8006498:	e01b      	b.n	80064d2 <HAL_RCC_OscConfig+0x52e>
 800649a:	bf00      	nop
 800649c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064a0:	4b9b      	ldr	r3, [pc, #620]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a9a      	ldr	r2, [pc, #616]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80064a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064ac:	f7fe fb18 	bl	8004ae0 <HAL_GetTick>
 80064b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064b4:	f7fe fb14 	bl	8004ae0 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e195      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064c6:	4b92      	ldr	r3, [pc, #584]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0304 	and.w	r3, r3, #4
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8081 	beq.w	80065e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064e0:	4b8c      	ldr	r3, [pc, #560]	; (8006714 <HAL_RCC_OscConfig+0x770>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a8b      	ldr	r2, [pc, #556]	; (8006714 <HAL_RCC_OscConfig+0x770>)
 80064e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064ec:	f7fe faf8 	bl	8004ae0 <HAL_GetTick>
 80064f0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064f4:	f7fe faf4 	bl	8004ae0 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b64      	cmp	r3, #100	; 0x64
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e175      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006506:	4b83      	ldr	r3, [pc, #524]	; (8006714 <HAL_RCC_OscConfig+0x770>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d106      	bne.n	8006528 <HAL_RCC_OscConfig+0x584>
 800651a:	4b7d      	ldr	r3, [pc, #500]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	4a7c      	ldr	r2, [pc, #496]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	6713      	str	r3, [r2, #112]	; 0x70
 8006526:	e02d      	b.n	8006584 <HAL_RCC_OscConfig+0x5e0>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10c      	bne.n	800654a <HAL_RCC_OscConfig+0x5a6>
 8006530:	4b77      	ldr	r3, [pc, #476]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	4a76      	ldr	r2, [pc, #472]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006536:	f023 0301 	bic.w	r3, r3, #1
 800653a:	6713      	str	r3, [r2, #112]	; 0x70
 800653c:	4b74      	ldr	r3, [pc, #464]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 800653e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006540:	4a73      	ldr	r2, [pc, #460]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006542:	f023 0304 	bic.w	r3, r3, #4
 8006546:	6713      	str	r3, [r2, #112]	; 0x70
 8006548:	e01c      	b.n	8006584 <HAL_RCC_OscConfig+0x5e0>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b05      	cmp	r3, #5
 8006550:	d10c      	bne.n	800656c <HAL_RCC_OscConfig+0x5c8>
 8006552:	4b6f      	ldr	r3, [pc, #444]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006556:	4a6e      	ldr	r2, [pc, #440]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006558:	f043 0304 	orr.w	r3, r3, #4
 800655c:	6713      	str	r3, [r2, #112]	; 0x70
 800655e:	4b6c      	ldr	r3, [pc, #432]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006562:	4a6b      	ldr	r2, [pc, #428]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006564:	f043 0301 	orr.w	r3, r3, #1
 8006568:	6713      	str	r3, [r2, #112]	; 0x70
 800656a:	e00b      	b.n	8006584 <HAL_RCC_OscConfig+0x5e0>
 800656c:	4b68      	ldr	r3, [pc, #416]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	4a67      	ldr	r2, [pc, #412]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006572:	f023 0301 	bic.w	r3, r3, #1
 8006576:	6713      	str	r3, [r2, #112]	; 0x70
 8006578:	4b65      	ldr	r3, [pc, #404]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 800657a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657c:	4a64      	ldr	r2, [pc, #400]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 800657e:	f023 0304 	bic.w	r3, r3, #4
 8006582:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d015      	beq.n	80065b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658c:	f7fe faa8 	bl	8004ae0 <HAL_GetTick>
 8006590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006592:	e00a      	b.n	80065aa <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006594:	f7fe faa4 	bl	8004ae0 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e123      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065aa:	4b59      	ldr	r3, [pc, #356]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0ee      	beq.n	8006594 <HAL_RCC_OscConfig+0x5f0>
 80065b6:	e014      	b.n	80065e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b8:	f7fe fa92 	bl	8004ae0 <HAL_GetTick>
 80065bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065be:	e00a      	b.n	80065d6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c0:	f7fe fa8e 	bl	8004ae0 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e10d      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065d6:	4b4e      	ldr	r3, [pc, #312]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1ee      	bne.n	80065c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 8102 	beq.w	80067f0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065ec:	4b48      	ldr	r3, [pc, #288]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065f4:	2b18      	cmp	r3, #24
 80065f6:	f000 80bd 	beq.w	8006774 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	2b02      	cmp	r3, #2
 8006600:	f040 809e 	bne.w	8006740 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006604:	4b42      	ldr	r3, [pc, #264]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a41      	ldr	r2, [pc, #260]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 800660a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800660e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006610:	f7fe fa66 	bl	8004ae0 <HAL_GetTick>
 8006614:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006618:	f7fe fa62 	bl	8004ae0 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e0e3      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800662a:	4b39      	ldr	r3, [pc, #228]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1f0      	bne.n	8006618 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006636:	4b36      	ldr	r3, [pc, #216]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800663a:	4b37      	ldr	r3, [pc, #220]	; (8006718 <HAL_RCC_OscConfig+0x774>)
 800663c:	4013      	ands	r3, r2
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006646:	0112      	lsls	r2, r2, #4
 8006648:	430a      	orrs	r2, r1
 800664a:	4931      	ldr	r1, [pc, #196]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 800664c:	4313      	orrs	r3, r2
 800664e:	628b      	str	r3, [r1, #40]	; 0x28
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	3b01      	subs	r3, #1
 8006656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665e:	3b01      	subs	r3, #1
 8006660:	025b      	lsls	r3, r3, #9
 8006662:	b29b      	uxth	r3, r3
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	3b01      	subs	r3, #1
 800666c:	041b      	lsls	r3, r3, #16
 800666e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006678:	3b01      	subs	r3, #1
 800667a:	061b      	lsls	r3, r3, #24
 800667c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006680:	4923      	ldr	r1, [pc, #140]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006682:	4313      	orrs	r3, r2
 8006684:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006686:	4b22      	ldr	r3, [pc, #136]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	4a21      	ldr	r2, [pc, #132]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006692:	4b1f      	ldr	r3, [pc, #124]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006696:	4b21      	ldr	r3, [pc, #132]	; (800671c <HAL_RCC_OscConfig+0x778>)
 8006698:	4013      	ands	r3, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800669e:	00d2      	lsls	r2, r2, #3
 80066a0:	491b      	ldr	r1, [pc, #108]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80066a6:	4b1a      	ldr	r3, [pc, #104]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	f023 020c 	bic.w	r2, r3, #12
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	4917      	ldr	r1, [pc, #92]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80066b8:	4b15      	ldr	r3, [pc, #84]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	f023 0202 	bic.w	r2, r3, #2
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c4:	4912      	ldr	r1, [pc, #72]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066ca:	4b11      	ldr	r3, [pc, #68]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	4a10      	ldr	r2, [pc, #64]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d6:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	4a0d      	ldr	r2, [pc, #52]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80066e2:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e6:	4a0a      	ldr	r2, [pc, #40]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80066ee:	4b08      	ldr	r3, [pc, #32]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	4a07      	ldr	r2, [pc, #28]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066f4:	f043 0301 	orr.w	r3, r3, #1
 80066f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066fa:	4b05      	ldr	r3, [pc, #20]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a04      	ldr	r2, [pc, #16]	; (8006710 <HAL_RCC_OscConfig+0x76c>)
 8006700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006706:	f7fe f9eb 	bl	8004ae0 <HAL_GetTick>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800670c:	e011      	b.n	8006732 <HAL_RCC_OscConfig+0x78e>
 800670e:	bf00      	nop
 8006710:	58024400 	.word	0x58024400
 8006714:	58024800 	.word	0x58024800
 8006718:	fffffc0c 	.word	0xfffffc0c
 800671c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006720:	f7fe f9de 	bl	8004ae0 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e05f      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006732:	4b32      	ldr	r3, [pc, #200]	; (80067fc <HAL_RCC_OscConfig+0x858>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCC_OscConfig+0x77c>
 800673e:	e057      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006740:	4b2e      	ldr	r3, [pc, #184]	; (80067fc <HAL_RCC_OscConfig+0x858>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a2d      	ldr	r2, [pc, #180]	; (80067fc <HAL_RCC_OscConfig+0x858>)
 8006746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800674a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674c:	f7fe f9c8 	bl	8004ae0 <HAL_GetTick>
 8006750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006754:	f7fe f9c4 	bl	8004ae0 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e045      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006766:	4b25      	ldr	r3, [pc, #148]	; (80067fc <HAL_RCC_OscConfig+0x858>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0x7b0>
 8006772:	e03d      	b.n	80067f0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006774:	4b21      	ldr	r3, [pc, #132]	; (80067fc <HAL_RCC_OscConfig+0x858>)
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800677a:	4b20      	ldr	r3, [pc, #128]	; (80067fc <HAL_RCC_OscConfig+0x858>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	2b01      	cmp	r3, #1
 8006786:	d031      	beq.n	80067ec <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f003 0203 	and.w	r2, r3, #3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006792:	429a      	cmp	r2, r3
 8006794:	d12a      	bne.n	80067ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	091b      	lsrs	r3, r3, #4
 800679a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d122      	bne.n	80067ec <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d11a      	bne.n	80067ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	0a5b      	lsrs	r3, r3, #9
 80067ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d111      	bne.n	80067ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	0c1b      	lsrs	r3, r3, #16
 80067cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d108      	bne.n	80067ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d001      	beq.n	80067f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3730      	adds	r7, #48	; 0x30
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	58024400 	.word	0x58024400

08006800 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e19c      	b.n	8006b4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006814:	4b8a      	ldr	r3, [pc, #552]	; (8006a40 <HAL_RCC_ClockConfig+0x240>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d910      	bls.n	8006844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006822:	4b87      	ldr	r3, [pc, #540]	; (8006a40 <HAL_RCC_ClockConfig+0x240>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f023 020f 	bic.w	r2, r3, #15
 800682a:	4985      	ldr	r1, [pc, #532]	; (8006a40 <HAL_RCC_ClockConfig+0x240>)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	4313      	orrs	r3, r2
 8006830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006832:	4b83      	ldr	r3, [pc, #524]	; (8006a40 <HAL_RCC_ClockConfig+0x240>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d001      	beq.n	8006844 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e184      	b.n	8006b4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d010      	beq.n	8006872 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	4b7b      	ldr	r3, [pc, #492]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800685c:	429a      	cmp	r2, r3
 800685e:	d908      	bls.n	8006872 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006860:	4b78      	ldr	r3, [pc, #480]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	4975      	ldr	r1, [pc, #468]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 800686e:	4313      	orrs	r3, r2
 8006870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d010      	beq.n	80068a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	4b70      	ldr	r3, [pc, #448]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800688a:	429a      	cmp	r2, r3
 800688c:	d908      	bls.n	80068a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800688e:	4b6d      	ldr	r3, [pc, #436]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	496a      	ldr	r1, [pc, #424]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 800689c:	4313      	orrs	r3, r2
 800689e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d010      	beq.n	80068ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699a      	ldr	r2, [r3, #24]
 80068b0:	4b64      	ldr	r3, [pc, #400]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d908      	bls.n	80068ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068bc:	4b61      	ldr	r3, [pc, #388]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	495e      	ldr	r1, [pc, #376]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d010      	beq.n	80068fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69da      	ldr	r2, [r3, #28]
 80068de:	4b59      	ldr	r3, [pc, #356]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d908      	bls.n	80068fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068ea:	4b56      	ldr	r3, [pc, #344]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	4953      	ldr	r1, [pc, #332]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d010      	beq.n	800692a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	4b4d      	ldr	r3, [pc, #308]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	f003 030f 	and.w	r3, r3, #15
 8006914:	429a      	cmp	r2, r3
 8006916:	d908      	bls.n	800692a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006918:	4b4a      	ldr	r3, [pc, #296]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	f023 020f 	bic.w	r2, r3, #15
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	4947      	ldr	r1, [pc, #284]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006926:	4313      	orrs	r3, r2
 8006928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d055      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006936:	4b43      	ldr	r3, [pc, #268]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	4940      	ldr	r1, [pc, #256]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006944:	4313      	orrs	r3, r2
 8006946:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d107      	bne.n	8006960 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006950:	4b3c      	ldr	r3, [pc, #240]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d121      	bne.n	80069a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e0f6      	b.n	8006b4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b03      	cmp	r3, #3
 8006966:	d107      	bne.n	8006978 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006968:	4b36      	ldr	r3, [pc, #216]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d115      	bne.n	80069a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e0ea      	b.n	8006b4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d107      	bne.n	8006990 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006980:	4b30      	ldr	r3, [pc, #192]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0de      	b.n	8006b4e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006990:	4b2c      	ldr	r3, [pc, #176]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e0d6      	b.n	8006b4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069a0:	4b28      	ldr	r3, [pc, #160]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f023 0207 	bic.w	r2, r3, #7
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	4925      	ldr	r1, [pc, #148]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b2:	f7fe f895 	bl	8004ae0 <HAL_GetTick>
 80069b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b8:	e00a      	b.n	80069d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069ba:	f7fe f891 	bl	8004ae0 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e0be      	b.n	8006b4e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d0:	4b1c      	ldr	r3, [pc, #112]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	429a      	cmp	r2, r3
 80069e0:	d1eb      	bne.n	80069ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d010      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d208      	bcs.n	8006a10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069fe:	4b11      	ldr	r3, [pc, #68]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	f023 020f 	bic.w	r2, r3, #15
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	490e      	ldr	r1, [pc, #56]	; (8006a44 <HAL_RCC_ClockConfig+0x244>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <HAL_RCC_ClockConfig+0x240>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d214      	bcs.n	8006a48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1e:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <HAL_RCC_ClockConfig+0x240>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f023 020f 	bic.w	r2, r3, #15
 8006a26:	4906      	ldr	r1, [pc, #24]	; (8006a40 <HAL_RCC_ClockConfig+0x240>)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <HAL_RCC_ClockConfig+0x240>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d005      	beq.n	8006a48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e086      	b.n	8006b4e <HAL_RCC_ClockConfig+0x34e>
 8006a40:	52002000 	.word	0x52002000
 8006a44:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d010      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	4b3f      	ldr	r3, [pc, #252]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d208      	bcs.n	8006a76 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a64:	4b3c      	ldr	r3, [pc, #240]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	4939      	ldr	r1, [pc, #228]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d010      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695a      	ldr	r2, [r3, #20]
 8006a86:	4b34      	ldr	r3, [pc, #208]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d208      	bcs.n	8006aa4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a92:	4b31      	ldr	r3, [pc, #196]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	492e      	ldr	r1, [pc, #184]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d010      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699a      	ldr	r2, [r3, #24]
 8006ab4:	4b28      	ldr	r3, [pc, #160]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d208      	bcs.n	8006ad2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ac0:	4b25      	ldr	r3, [pc, #148]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	4922      	ldr	r1, [pc, #136]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d010      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	69da      	ldr	r2, [r3, #28]
 8006ae2:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d208      	bcs.n	8006b00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006aee:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	4917      	ldr	r1, [pc, #92]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b00:	f000 f834 	bl	8006b6c <HAL_RCC_GetSysClockFreq>
 8006b04:	4602      	mov	r2, r0
 8006b06:	4b14      	ldr	r3, [pc, #80]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	0a1b      	lsrs	r3, r3, #8
 8006b0c:	f003 030f 	and.w	r3, r3, #15
 8006b10:	4912      	ldr	r1, [pc, #72]	; (8006b5c <HAL_RCC_ClockConfig+0x35c>)
 8006b12:	5ccb      	ldrb	r3, [r1, r3]
 8006b14:	f003 031f 	and.w	r3, r3, #31
 8006b18:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <HAL_RCC_ClockConfig+0x358>)
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	4a0d      	ldr	r2, [pc, #52]	; (8006b5c <HAL_RCC_ClockConfig+0x35c>)
 8006b28:	5cd3      	ldrb	r3, [r2, r3]
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
 8006b34:	4a0a      	ldr	r2, [pc, #40]	; (8006b60 <HAL_RCC_ClockConfig+0x360>)
 8006b36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b38:	4a0a      	ldr	r2, [pc, #40]	; (8006b64 <HAL_RCC_ClockConfig+0x364>)
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <HAL_RCC_ClockConfig+0x368>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fd fe1e 	bl	8004784 <HAL_InitTick>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	08008d50 	.word	0x08008d50
 8006b60:	24000014 	.word	0x24000014
 8006b64:	24000010 	.word	0x24000010
 8006b68:	24000018 	.word	0x24000018

08006b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b089      	sub	sp, #36	; 0x24
 8006b70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b72:	4bb3      	ldr	r3, [pc, #716]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b7a:	2b18      	cmp	r3, #24
 8006b7c:	f200 8155 	bhi.w	8006e2a <HAL_RCC_GetSysClockFreq+0x2be>
 8006b80:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006bed 	.word	0x08006bed
 8006b8c:	08006e2b 	.word	0x08006e2b
 8006b90:	08006e2b 	.word	0x08006e2b
 8006b94:	08006e2b 	.word	0x08006e2b
 8006b98:	08006e2b 	.word	0x08006e2b
 8006b9c:	08006e2b 	.word	0x08006e2b
 8006ba0:	08006e2b 	.word	0x08006e2b
 8006ba4:	08006e2b 	.word	0x08006e2b
 8006ba8:	08006c13 	.word	0x08006c13
 8006bac:	08006e2b 	.word	0x08006e2b
 8006bb0:	08006e2b 	.word	0x08006e2b
 8006bb4:	08006e2b 	.word	0x08006e2b
 8006bb8:	08006e2b 	.word	0x08006e2b
 8006bbc:	08006e2b 	.word	0x08006e2b
 8006bc0:	08006e2b 	.word	0x08006e2b
 8006bc4:	08006e2b 	.word	0x08006e2b
 8006bc8:	08006c19 	.word	0x08006c19
 8006bcc:	08006e2b 	.word	0x08006e2b
 8006bd0:	08006e2b 	.word	0x08006e2b
 8006bd4:	08006e2b 	.word	0x08006e2b
 8006bd8:	08006e2b 	.word	0x08006e2b
 8006bdc:	08006e2b 	.word	0x08006e2b
 8006be0:	08006e2b 	.word	0x08006e2b
 8006be4:	08006e2b 	.word	0x08006e2b
 8006be8:	08006c1f 	.word	0x08006c1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bec:	4b94      	ldr	r3, [pc, #592]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d009      	beq.n	8006c0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bf8:	4b91      	ldr	r3, [pc, #580]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	08db      	lsrs	r3, r3, #3
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	4a90      	ldr	r2, [pc, #576]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c04:	fa22 f303 	lsr.w	r3, r2, r3
 8006c08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006c0a:	e111      	b.n	8006e30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c0c:	4b8d      	ldr	r3, [pc, #564]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c0e:	61bb      	str	r3, [r7, #24]
    break;
 8006c10:	e10e      	b.n	8006e30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c12:	4b8d      	ldr	r3, [pc, #564]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c14:	61bb      	str	r3, [r7, #24]
    break;
 8006c16:	e10b      	b.n	8006e30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006c18:	4b8c      	ldr	r3, [pc, #560]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c1a:	61bb      	str	r3, [r7, #24]
    break;
 8006c1c:	e108      	b.n	8006e30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c1e:	4b88      	ldr	r3, [pc, #544]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006c28:	4b85      	ldr	r3, [pc, #532]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c34:	4b82      	ldr	r3, [pc, #520]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006c3e:	4b80      	ldr	r3, [pc, #512]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c42:	08db      	lsrs	r3, r3, #3
 8006c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	fb02 f303 	mul.w	r3, r2, r3
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80e1 	beq.w	8006e24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	f000 8083 	beq.w	8006d70 <HAL_RCC_GetSysClockFreq+0x204>
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	f200 80a1 	bhi.w	8006db4 <HAL_RCC_GetSysClockFreq+0x248>
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_RCC_GetSysClockFreq+0x114>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d056      	beq.n	8006d2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c7e:	e099      	b.n	8006db4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c80:	4b6f      	ldr	r3, [pc, #444]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d02d      	beq.n	8006ce8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c8c:	4b6c      	ldr	r3, [pc, #432]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	08db      	lsrs	r3, r3, #3
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	4a6b      	ldr	r2, [pc, #428]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c98:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	ee07 3a90 	vmov	s15, r3
 8006ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cb6:	4b62      	ldr	r3, [pc, #392]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006ce6:	e087      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006e54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cfa:	4b51      	ldr	r3, [pc, #324]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d2a:	e065      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006e58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d3e:	4b40      	ldr	r3, [pc, #256]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d6e:	e043      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006e5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d82:	4b2f      	ldr	r3, [pc, #188]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006db2:	e021      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006e58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc6:	4b1e      	ldr	r3, [pc, #120]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006df6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006df8:	4b11      	ldr	r3, [pc, #68]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfc:	0a5b      	lsrs	r3, r3, #9
 8006dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e02:	3301      	adds	r3, #1
 8006e04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	ee07 3a90 	vmov	s15, r3
 8006e0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e1c:	ee17 3a90 	vmov	r3, s15
 8006e20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006e22:	e005      	b.n	8006e30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61bb      	str	r3, [r7, #24]
    break;
 8006e28:	e002      	b.n	8006e30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006e2a:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e2c:	61bb      	str	r3, [r7, #24]
    break;
 8006e2e:	bf00      	nop
  }

  return sysclockfreq;
 8006e30:	69bb      	ldr	r3, [r7, #24]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3724      	adds	r7, #36	; 0x24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	58024400 	.word	0x58024400
 8006e44:	03d09000 	.word	0x03d09000
 8006e48:	003d0900 	.word	0x003d0900
 8006e4c:	007a1200 	.word	0x007a1200
 8006e50:	46000000 	.word	0x46000000
 8006e54:	4c742400 	.word	0x4c742400
 8006e58:	4a742400 	.word	0x4a742400
 8006e5c:	4af42400 	.word	0x4af42400

08006e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e66:	f7ff fe81 	bl	8006b6c <HAL_RCC_GetSysClockFreq>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	4b10      	ldr	r3, [pc, #64]	; (8006eb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	0a1b      	lsrs	r3, r3, #8
 8006e72:	f003 030f 	and.w	r3, r3, #15
 8006e76:	490f      	ldr	r1, [pc, #60]	; (8006eb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e78:	5ccb      	ldrb	r3, [r1, r3]
 8006e7a:	f003 031f 	and.w	r3, r3, #31
 8006e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	4a09      	ldr	r2, [pc, #36]	; (8006eb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e8e:	5cd3      	ldrb	r3, [r2, r3]
 8006e90:	f003 031f 	and.w	r3, r3, #31
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9a:	4a07      	ldr	r2, [pc, #28]	; (8006eb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e9e:	4a07      	ldr	r2, [pc, #28]	; (8006ebc <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ea4:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	58024400 	.word	0x58024400
 8006eb4:	08008d50 	.word	0x08008d50
 8006eb8:	24000014 	.word	0x24000014
 8006ebc:	24000010 	.word	0x24000010

08006ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ec4:	f7ff ffcc 	bl	8006e60 <HAL_RCC_GetHCLKFreq>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	091b      	lsrs	r3, r3, #4
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	4904      	ldr	r1, [pc, #16]	; (8006ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ed6:	5ccb      	ldrb	r3, [r1, r3]
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	58024400 	.word	0x58024400
 8006ee8:	08008d50 	.word	0x08008d50

08006eec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	223f      	movs	r2, #63	; 0x3f
 8006efa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006efc:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f003 0207 	and.w	r2, r3, #7
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006f08:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006f14:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	f003 020f 	and.w	r2, r3, #15
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006f20:	4b11      	ldr	r3, [pc, #68]	; (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006f2c:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006f38:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006f44:	4b08      	ldr	r3, [pc, #32]	; (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f50:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <HAL_RCC_GetClockConfig+0x80>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 020f 	and.w	r2, r3, #15
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	601a      	str	r2, [r3, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	58024400 	.word	0x58024400
 8006f6c:	52002000 	.word	0x52002000

08006f70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f78:	2300      	movs	r3, #0
 8006f7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d03f      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f94:	d02a      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f9a:	d824      	bhi.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fa0:	d018      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fa6:	d81e      	bhi.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb0:	d007      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fb2:	e018      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb4:	4ba3      	ldr	r3, [pc, #652]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	4aa2      	ldr	r2, [pc, #648]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fc0:	e015      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	2102      	movs	r1, #2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 ff17 	bl	8007dfc <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fd2:	e00c      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3324      	adds	r3, #36	; 0x24
 8006fd8:	2102      	movs	r1, #2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 ffc0 	bl	8007f60 <RCCEx_PLL3_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fe4:	e003      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fea:	e000      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d109      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ff4:	4b93      	ldr	r3, [pc, #588]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007000:	4990      	ldr	r1, [pc, #576]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007002:	4313      	orrs	r3, r2
 8007004:	650b      	str	r3, [r1, #80]	; 0x50
 8007006:	e001      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007014:	2b00      	cmp	r3, #0
 8007016:	d03d      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701c:	2b04      	cmp	r3, #4
 800701e:	d826      	bhi.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007020:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	0800703d 	.word	0x0800703d
 800702c:	0800704b 	.word	0x0800704b
 8007030:	0800705d 	.word	0x0800705d
 8007034:	08007075 	.word	0x08007075
 8007038:	08007075 	.word	0x08007075
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800703c:	4b81      	ldr	r3, [pc, #516]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	4a80      	ldr	r2, [pc, #512]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007046:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007048:	e015      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3304      	adds	r3, #4
 800704e:	2100      	movs	r1, #0
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fed3 	bl	8007dfc <RCCEx_PLL2_Config>
 8007056:	4603      	mov	r3, r0
 8007058:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800705a:	e00c      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3324      	adds	r3, #36	; 0x24
 8007060:	2100      	movs	r1, #0
 8007062:	4618      	mov	r0, r3
 8007064:	f000 ff7c 	bl	8007f60 <RCCEx_PLL3_Config>
 8007068:	4603      	mov	r3, r0
 800706a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800706c:	e003      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	75fb      	strb	r3, [r7, #23]
      break;
 8007072:	e000      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d109      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800707c:	4b71      	ldr	r3, [pc, #452]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800707e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007080:	f023 0207 	bic.w	r2, r3, #7
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007088:	496e      	ldr	r1, [pc, #440]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800708a:	4313      	orrs	r3, r2
 800708c:	650b      	str	r3, [r1, #80]	; 0x50
 800708e:	e001      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800709c:	2b00      	cmp	r3, #0
 800709e:	d042      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a8:	d02b      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80070aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ae:	d825      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070b0:	2bc0      	cmp	r3, #192	; 0xc0
 80070b2:	d028      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80070b4:	2bc0      	cmp	r3, #192	; 0xc0
 80070b6:	d821      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070b8:	2b80      	cmp	r3, #128	; 0x80
 80070ba:	d016      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80070bc:	2b80      	cmp	r3, #128	; 0x80
 80070be:	d81d      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80070c4:	2b40      	cmp	r3, #64	; 0x40
 80070c6:	d007      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80070c8:	e018      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ca:	4b5e      	ldr	r3, [pc, #376]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	4a5d      	ldr	r2, [pc, #372]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070d6:	e017      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3304      	adds	r3, #4
 80070dc:	2100      	movs	r1, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fe8c 	bl	8007dfc <RCCEx_PLL2_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070e8:	e00e      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3324      	adds	r3, #36	; 0x24
 80070ee:	2100      	movs	r1, #0
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 ff35 	bl	8007f60 <RCCEx_PLL3_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070fa:	e005      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007100:	e002      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007102:	bf00      	nop
 8007104:	e000      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800710e:	4b4d      	ldr	r3, [pc, #308]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007112:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711a:	494a      	ldr	r1, [pc, #296]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800711c:	4313      	orrs	r3, r2
 800711e:	650b      	str	r3, [r1, #80]	; 0x50
 8007120:	e001      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007122:	7dfb      	ldrb	r3, [r7, #23]
 8007124:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800712e:	2b00      	cmp	r3, #0
 8007130:	d049      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800713c:	d030      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800713e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007142:	d82a      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007144:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007148:	d02c      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800714a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800714e:	d824      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007154:	d018      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800715a:	d81e      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007164:	d007      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007166:	e018      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007168:	4b36      	ldr	r3, [pc, #216]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	4a35      	ldr	r2, [pc, #212]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800716e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007174:	e017      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3304      	adds	r3, #4
 800717a:	2100      	movs	r1, #0
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fe3d 	bl	8007dfc <RCCEx_PLL2_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007186:	e00e      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3324      	adds	r3, #36	; 0x24
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fee6 	bl	8007f60 <RCCEx_PLL3_Config>
 8007194:	4603      	mov	r3, r0
 8007196:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007198:	e005      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	75fb      	strb	r3, [r7, #23]
      break;
 800719e:	e002      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80071a0:	bf00      	nop
 80071a2:	e000      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80071a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071ac:	4b25      	ldr	r3, [pc, #148]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071ba:	4922      	ldr	r1, [pc, #136]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	658b      	str	r3, [r1, #88]	; 0x58
 80071c0:	e001      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d04b      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071dc:	d030      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80071de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071e2:	d82a      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071e8:	d02e      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80071ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071ee:	d824      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071f4:	d018      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80071f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071fa:	d81e      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007204:	d007      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007206:	e018      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007208:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	4a0d      	ldr	r2, [pc, #52]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800720e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007214:	e019      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3304      	adds	r3, #4
 800721a:	2100      	movs	r1, #0
 800721c:	4618      	mov	r0, r3
 800721e:	f000 fded 	bl	8007dfc <RCCEx_PLL2_Config>
 8007222:	4603      	mov	r3, r0
 8007224:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007226:	e010      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3324      	adds	r3, #36	; 0x24
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fe96 	bl	8007f60 <RCCEx_PLL3_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007238:	e007      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	75fb      	strb	r3, [r7, #23]
      break;
 800723e:	e004      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007240:	bf00      	nop
 8007242:	e002      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007244:	58024400 	.word	0x58024400
      break;
 8007248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007250:	4b99      	ldr	r3, [pc, #612]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007254:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800725e:	4996      	ldr	r1, [pc, #600]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007260:	4313      	orrs	r3, r2
 8007262:	658b      	str	r3, [r1, #88]	; 0x58
 8007264:	e001      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d032      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800727a:	2b30      	cmp	r3, #48	; 0x30
 800727c:	d01c      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800727e:	2b30      	cmp	r3, #48	; 0x30
 8007280:	d817      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007282:	2b20      	cmp	r3, #32
 8007284:	d00c      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007286:	2b20      	cmp	r3, #32
 8007288:	d813      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d016      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800728e:	2b10      	cmp	r3, #16
 8007290:	d10f      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007292:	4b89      	ldr	r3, [pc, #548]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	4a88      	ldr	r2, [pc, #544]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800729c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800729e:	e00e      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3304      	adds	r3, #4
 80072a4:	2102      	movs	r1, #2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fda8 	bl	8007dfc <RCCEx_PLL2_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80072b0:	e005      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
      break;
 80072b6:	e002      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80072b8:	bf00      	nop
 80072ba:	e000      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80072bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072c4:	4b7c      	ldr	r3, [pc, #496]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d0:	4979      	ldr	r1, [pc, #484]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072d6:	e001      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d047      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072f0:	d030      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80072f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072f6:	d82a      	bhi.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80072f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072fc:	d02c      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80072fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007302:	d824      	bhi.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007308:	d018      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800730a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800730e:	d81e      	bhi.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007318:	d007      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800731a:	e018      	b.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800731c:	4b66      	ldr	r3, [pc, #408]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	4a65      	ldr	r2, [pc, #404]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007328:	e017      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3304      	adds	r3, #4
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fd63 	bl	8007dfc <RCCEx_PLL2_Config>
 8007336:	4603      	mov	r3, r0
 8007338:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800733a:	e00e      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3324      	adds	r3, #36	; 0x24
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fe0c 	bl	8007f60 <RCCEx_PLL3_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800734c:	e005      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	75fb      	strb	r3, [r7, #23]
      break;
 8007352:	e002      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007354:	bf00      	nop
 8007356:	e000      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d109      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007360:	4b55      	ldr	r3, [pc, #340]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007364:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800736c:	4952      	ldr	r1, [pc, #328]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800736e:	4313      	orrs	r3, r2
 8007370:	650b      	str	r3, [r1, #80]	; 0x50
 8007372:	e001      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d049      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800738c:	d02e      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800738e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007392:	d828      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007394:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007398:	d02a      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800739a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800739e:	d822      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80073a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073a4:	d026      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80073a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073aa:	d81c      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80073ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b0:	d010      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80073b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b6:	d816      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01d      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80073bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c0:	d111      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3304      	adds	r3, #4
 80073c6:	2101      	movs	r1, #1
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 fd17 	bl	8007dfc <RCCEx_PLL2_Config>
 80073ce:	4603      	mov	r3, r0
 80073d0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80073d2:	e012      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3324      	adds	r3, #36	; 0x24
 80073d8:	2101      	movs	r1, #1
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 fdc0 	bl	8007f60 <RCCEx_PLL3_Config>
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80073e4:	e009      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	75fb      	strb	r3, [r7, #23]
      break;
 80073ea:	e006      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80073ec:	bf00      	nop
 80073ee:	e004      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80073f0:	bf00      	nop
 80073f2:	e002      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80073f4:	bf00      	nop
 80073f6:	e000      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80073f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007400:	4b2d      	ldr	r3, [pc, #180]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007404:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800740c:	492a      	ldr	r1, [pc, #168]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800740e:	4313      	orrs	r3, r2
 8007410:	650b      	str	r3, [r1, #80]	; 0x50
 8007412:	e001      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d04d      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800742a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800742e:	d02e      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007434:	d828      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743a:	d02a      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800743c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007440:	d822      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007446:	d026      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800744c:	d81c      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800744e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007452:	d010      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007458:	d816      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d01d      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800745e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007462:	d111      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3304      	adds	r3, #4
 8007468:	2101      	movs	r1, #1
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fcc6 	bl	8007dfc <RCCEx_PLL2_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007474:	e012      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3324      	adds	r3, #36	; 0x24
 800747a:	2101      	movs	r1, #1
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fd6f 	bl	8007f60 <RCCEx_PLL3_Config>
 8007482:	4603      	mov	r3, r0
 8007484:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007486:	e009      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	75fb      	strb	r3, [r7, #23]
      break;
 800748c:	e006      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800748e:	bf00      	nop
 8007490:	e004      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007492:	bf00      	nop
 8007494:	e002      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007496:	bf00      	nop
 8007498:	e000      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800749a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800749c:	7dfb      	ldrb	r3, [r7, #23]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10c      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80074a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074b0:	4901      	ldr	r1, [pc, #4]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	658b      	str	r3, [r1, #88]	; 0x58
 80074b6:	e003      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80074b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d02f      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074d4:	d00e      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80074d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074da:	d814      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d015      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80074e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074e4:	d10f      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e6:	4baf      	ldr	r3, [pc, #700]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	4aae      	ldr	r2, [pc, #696]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80074f2:	e00c      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3304      	adds	r3, #4
 80074f8:	2101      	movs	r1, #1
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fc7e 	bl	8007dfc <RCCEx_PLL2_Config>
 8007500:	4603      	mov	r3, r0
 8007502:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007504:	e003      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	75fb      	strb	r3, [r7, #23]
      break;
 800750a:	e000      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800750c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800750e:	7dfb      	ldrb	r3, [r7, #23]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d109      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007514:	4ba3      	ldr	r3, [pc, #652]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007518:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007520:	49a0      	ldr	r1, [pc, #640]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007522:	4313      	orrs	r3, r2
 8007524:	650b      	str	r3, [r1, #80]	; 0x50
 8007526:	e001      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d032      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753c:	2b03      	cmp	r3, #3
 800753e:	d81b      	bhi.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007540:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	0800757f 	.word	0x0800757f
 800754c:	08007559 	.word	0x08007559
 8007550:	08007567 	.word	0x08007567
 8007554:	0800757f 	.word	0x0800757f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007558:	4b92      	ldr	r3, [pc, #584]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	4a91      	ldr	r2, [pc, #580]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800755e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007562:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007564:	e00c      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3304      	adds	r3, #4
 800756a:	2102      	movs	r1, #2
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fc45 	bl	8007dfc <RCCEx_PLL2_Config>
 8007572:	4603      	mov	r3, r0
 8007574:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007576:	e003      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	75fb      	strb	r3, [r7, #23]
      break;
 800757c:	e000      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800757e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d109      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007586:	4b87      	ldr	r3, [pc, #540]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758a:	f023 0203 	bic.w	r2, r3, #3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007592:	4984      	ldr	r1, [pc, #528]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007594:	4313      	orrs	r3, r2
 8007596:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007598:	e001      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8086 	beq.w	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075ac:	4b7e      	ldr	r3, [pc, #504]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a7d      	ldr	r2, [pc, #500]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80075b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075b8:	f7fd fa92 	bl	8004ae0 <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075be:	e009      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075c0:	f7fd fa8e 	bl	8004ae0 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b64      	cmp	r3, #100	; 0x64
 80075cc:	d902      	bls.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	75fb      	strb	r3, [r7, #23]
        break;
 80075d2:	e005      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075d4:	4b74      	ldr	r3, [pc, #464]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0ef      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d166      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075e6:	4b6f      	ldr	r3, [pc, #444]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075f0:	4053      	eors	r3, r2
 80075f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d013      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075fa:	4b6a      	ldr	r3, [pc, #424]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007602:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007604:	4b67      	ldr	r3, [pc, #412]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007608:	4a66      	ldr	r2, [pc, #408]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800760a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800760e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007610:	4b64      	ldr	r3, [pc, #400]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007614:	4a63      	ldr	r2, [pc, #396]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800761a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800761c:	4a61      	ldr	r2, [pc, #388]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762c:	d115      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800762e:	f7fd fa57 	bl	8004ae0 <HAL_GetTick>
 8007632:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007634:	e00b      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007636:	f7fd fa53 	bl	8004ae0 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	f241 3288 	movw	r2, #5000	; 0x1388
 8007644:	4293      	cmp	r3, r2
 8007646:	d902      	bls.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	75fb      	strb	r3, [r7, #23]
            break;
 800764c:	e005      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800764e:	4b55      	ldr	r3, [pc, #340]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0ed      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d126      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800766a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800766e:	d10d      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007670:	4b4c      	ldr	r3, [pc, #304]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800767e:	0919      	lsrs	r1, r3, #4
 8007680:	4b4a      	ldr	r3, [pc, #296]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007682:	400b      	ands	r3, r1
 8007684:	4947      	ldr	r1, [pc, #284]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007686:	4313      	orrs	r3, r2
 8007688:	610b      	str	r3, [r1, #16]
 800768a:	e005      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800768c:	4b45      	ldr	r3, [pc, #276]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	4a44      	ldr	r2, [pc, #272]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007692:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007696:	6113      	str	r3, [r2, #16]
 8007698:	4b42      	ldr	r3, [pc, #264]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800769a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076a6:	493f      	ldr	r1, [pc, #252]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	670b      	str	r3, [r1, #112]	; 0x70
 80076ac:	e004      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	75bb      	strb	r3, [r7, #22]
 80076b2:	e001      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 8085 	beq.w	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ca:	2b28      	cmp	r3, #40	; 0x28
 80076cc:	d866      	bhi.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80076ce:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80076d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d4:	080077b1 	.word	0x080077b1
 80076d8:	0800779d 	.word	0x0800779d
 80076dc:	0800779d 	.word	0x0800779d
 80076e0:	0800779d 	.word	0x0800779d
 80076e4:	0800779d 	.word	0x0800779d
 80076e8:	0800779d 	.word	0x0800779d
 80076ec:	0800779d 	.word	0x0800779d
 80076f0:	0800779d 	.word	0x0800779d
 80076f4:	08007779 	.word	0x08007779
 80076f8:	0800779d 	.word	0x0800779d
 80076fc:	0800779d 	.word	0x0800779d
 8007700:	0800779d 	.word	0x0800779d
 8007704:	0800779d 	.word	0x0800779d
 8007708:	0800779d 	.word	0x0800779d
 800770c:	0800779d 	.word	0x0800779d
 8007710:	0800779d 	.word	0x0800779d
 8007714:	0800778b 	.word	0x0800778b
 8007718:	0800779d 	.word	0x0800779d
 800771c:	0800779d 	.word	0x0800779d
 8007720:	0800779d 	.word	0x0800779d
 8007724:	0800779d 	.word	0x0800779d
 8007728:	0800779d 	.word	0x0800779d
 800772c:	0800779d 	.word	0x0800779d
 8007730:	0800779d 	.word	0x0800779d
 8007734:	080077b1 	.word	0x080077b1
 8007738:	0800779d 	.word	0x0800779d
 800773c:	0800779d 	.word	0x0800779d
 8007740:	0800779d 	.word	0x0800779d
 8007744:	0800779d 	.word	0x0800779d
 8007748:	0800779d 	.word	0x0800779d
 800774c:	0800779d 	.word	0x0800779d
 8007750:	0800779d 	.word	0x0800779d
 8007754:	080077b1 	.word	0x080077b1
 8007758:	0800779d 	.word	0x0800779d
 800775c:	0800779d 	.word	0x0800779d
 8007760:	0800779d 	.word	0x0800779d
 8007764:	0800779d 	.word	0x0800779d
 8007768:	0800779d 	.word	0x0800779d
 800776c:	0800779d 	.word	0x0800779d
 8007770:	0800779d 	.word	0x0800779d
 8007774:	080077b1 	.word	0x080077b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3304      	adds	r3, #4
 800777c:	2101      	movs	r1, #1
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fb3c 	bl	8007dfc <RCCEx_PLL2_Config>
 8007784:	4603      	mov	r3, r0
 8007786:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007788:	e013      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3324      	adds	r3, #36	; 0x24
 800778e:	2101      	movs	r1, #1
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fbe5 	bl	8007f60 <RCCEx_PLL3_Config>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800779a:	e00a      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	75fb      	strb	r3, [r7, #23]
      break;
 80077a0:	e007      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80077a2:	bf00      	nop
 80077a4:	58024400 	.word	0x58024400
 80077a8:	58024800 	.word	0x58024800
 80077ac:	00ffffcf 	.word	0x00ffffcf
      break;
 80077b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b2:	7dfb      	ldrb	r3, [r7, #23]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d109      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80077b8:	4b96      	ldr	r3, [pc, #600]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077c4:	4993      	ldr	r1, [pc, #588]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	654b      	str	r3, [r1, #84]	; 0x54
 80077ca:	e001      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d038      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e0:	2b05      	cmp	r3, #5
 80077e2:	d821      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	0800782f 	.word	0x0800782f
 80077f0:	08007805 	.word	0x08007805
 80077f4:	08007817 	.word	0x08007817
 80077f8:	0800782f 	.word	0x0800782f
 80077fc:	0800782f 	.word	0x0800782f
 8007800:	0800782f 	.word	0x0800782f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	2101      	movs	r1, #1
 800780a:	4618      	mov	r0, r3
 800780c:	f000 faf6 	bl	8007dfc <RCCEx_PLL2_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007814:	e00c      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3324      	adds	r3, #36	; 0x24
 800781a:	2101      	movs	r1, #1
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fb9f 	bl	8007f60 <RCCEx_PLL3_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007826:	e003      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
      break;
 800782c:	e000      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800782e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d109      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007836:	4b77      	ldr	r3, [pc, #476]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783a:	f023 0207 	bic.w	r2, r3, #7
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007842:	4974      	ldr	r1, [pc, #464]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007844:	4313      	orrs	r3, r2
 8007846:	654b      	str	r3, [r1, #84]	; 0x54
 8007848:	e001      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0304 	and.w	r3, r3, #4
 8007856:	2b00      	cmp	r3, #0
 8007858:	d03a      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007860:	2b05      	cmp	r3, #5
 8007862:	d821      	bhi.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007864:	a201      	add	r2, pc, #4	; (adr r2, 800786c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786a:	bf00      	nop
 800786c:	080078af 	.word	0x080078af
 8007870:	08007885 	.word	0x08007885
 8007874:	08007897 	.word	0x08007897
 8007878:	080078af 	.word	0x080078af
 800787c:	080078af 	.word	0x080078af
 8007880:	080078af 	.word	0x080078af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3304      	adds	r3, #4
 8007888:	2101      	movs	r1, #1
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fab6 	bl	8007dfc <RCCEx_PLL2_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007894:	e00c      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3324      	adds	r3, #36	; 0x24
 800789a:	2101      	movs	r1, #1
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fb5f 	bl	8007f60 <RCCEx_PLL3_Config>
 80078a2:	4603      	mov	r3, r0
 80078a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80078a6:	e003      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	75fb      	strb	r3, [r7, #23]
      break;
 80078ac:	e000      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80078ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078b6:	4b57      	ldr	r3, [pc, #348]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80078b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ba:	f023 0207 	bic.w	r2, r3, #7
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c4:	4953      	ldr	r1, [pc, #332]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	658b      	str	r3, [r1, #88]	; 0x58
 80078ca:	e001      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0320 	and.w	r3, r3, #32
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d04b      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078e6:	d02e      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80078e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078ec:	d828      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80078ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f2:	d02a      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80078f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f8:	d822      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80078fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078fe:	d026      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007900:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007904:	d81c      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800790a:	d010      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800790c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007910:	d816      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d01d      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800791a:	d111      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	2100      	movs	r1, #0
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fa6a 	bl	8007dfc <RCCEx_PLL2_Config>
 8007928:	4603      	mov	r3, r0
 800792a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800792c:	e012      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3324      	adds	r3, #36	; 0x24
 8007932:	2102      	movs	r1, #2
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fb13 	bl	8007f60 <RCCEx_PLL3_Config>
 800793a:	4603      	mov	r3, r0
 800793c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800793e:	e009      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	75fb      	strb	r3, [r7, #23]
      break;
 8007944:	e006      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007946:	bf00      	nop
 8007948:	e004      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800794a:	bf00      	nop
 800794c:	e002      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800794e:	bf00      	nop
 8007950:	e000      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800795a:	4b2e      	ldr	r3, [pc, #184]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800795c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007968:	492a      	ldr	r1, [pc, #168]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800796a:	4313      	orrs	r3, r2
 800796c:	654b      	str	r3, [r1, #84]	; 0x54
 800796e:	e001      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797c:	2b00      	cmp	r3, #0
 800797e:	d04d      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007986:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800798a:	d02e      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800798c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007990:	d828      	bhi.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007996:	d02a      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800799c:	d822      	bhi.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800799e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079a2:	d026      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80079a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079a8:	d81c      	bhi.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80079aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ae:	d010      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80079b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b4:	d816      	bhi.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01d      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80079ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079be:	d111      	bne.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3304      	adds	r3, #4
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fa18 	bl	8007dfc <RCCEx_PLL2_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80079d0:	e012      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3324      	adds	r3, #36	; 0x24
 80079d6:	2102      	movs	r1, #2
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fac1 	bl	8007f60 <RCCEx_PLL3_Config>
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80079e2:	e009      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	75fb      	strb	r3, [r7, #23]
      break;
 80079e8:	e006      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80079ea:	bf00      	nop
 80079ec:	e004      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80079ee:	bf00      	nop
 80079f0:	e002      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80079f2:	bf00      	nop
 80079f4:	e000      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80079f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10c      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079fe:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a02:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a0c:	4901      	ldr	r1, [pc, #4]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	658b      	str	r3, [r1, #88]	; 0x58
 8007a12:	e003      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007a14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
 8007a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d04b      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a32:	d02e      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007a34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a38:	d828      	bhi.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a3e:	d02a      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a44:	d822      	bhi.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007a46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a4a:	d026      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007a4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a50:	d81c      	bhi.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a56:	d010      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a5c:	d816      	bhi.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d01d      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a66:	d111      	bne.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 f9c4 	bl	8007dfc <RCCEx_PLL2_Config>
 8007a74:	4603      	mov	r3, r0
 8007a76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a78:	e012      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3324      	adds	r3, #36	; 0x24
 8007a7e:	2102      	movs	r1, #2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fa6d 	bl	8007f60 <RCCEx_PLL3_Config>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a8a:	e009      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a90:	e006      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007a92:	bf00      	nop
 8007a94:	e004      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007a96:	bf00      	nop
 8007a98:	e002      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007a9a:	bf00      	nop
 8007a9c:	e000      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10a      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007aa6:	4b9d      	ldr	r3, [pc, #628]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ab4:	4999      	ldr	r1, [pc, #612]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	658b      	str	r3, [r1, #88]	; 0x58
 8007aba:	e001      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01a      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad6:	d10a      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3324      	adds	r3, #36	; 0x24
 8007adc:	2102      	movs	r1, #2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fa3e 	bl	8007f60 <RCCEx_PLL3_Config>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007aee:	4b8b      	ldr	r3, [pc, #556]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007afc:	4987      	ldr	r1, [pc, #540]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d01a      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b18:	d10a      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3324      	adds	r3, #36	; 0x24
 8007b1e:	2102      	movs	r1, #2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fa1d 	bl	8007f60 <RCCEx_PLL3_Config>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b30:	4b7a      	ldr	r3, [pc, #488]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b3e:	4977      	ldr	r1, [pc, #476]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d034      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b5a:	d01d      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b60:	d817      	bhi.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b6a:	d009      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007b6c:	e011      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3304      	adds	r3, #4
 8007b72:	2100      	movs	r1, #0
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 f941 	bl	8007dfc <RCCEx_PLL2_Config>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b7e:	e00c      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3324      	adds	r3, #36	; 0x24
 8007b84:	2102      	movs	r1, #2
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 f9ea 	bl	8007f60 <RCCEx_PLL3_Config>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b90:	e003      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	75fb      	strb	r3, [r7, #23]
      break;
 8007b96:	e000      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ba0:	4b5e      	ldr	r3, [pc, #376]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007bae:	495b      	ldr	r1, [pc, #364]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	658b      	str	r3, [r1, #88]	; 0x58
 8007bb4:	e001      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d033      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bd0:	d01c      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007bd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bd6:	d816      	bhi.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bdc:	d003      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007bde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007be2:	d007      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007be4:	e00f      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be6:	4b4d      	ldr	r3, [pc, #308]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	4a4c      	ldr	r2, [pc, #304]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007bf2:	e00c      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	3324      	adds	r3, #36	; 0x24
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 f9b0 	bl	8007f60 <RCCEx_PLL3_Config>
 8007c00:	4603      	mov	r3, r0
 8007c02:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007c04:	e003      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	75fb      	strb	r3, [r7, #23]
      break;
 8007c0a:	e000      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c14:	4b41      	ldr	r3, [pc, #260]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c22:	493e      	ldr	r1, [pc, #248]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	654b      	str	r3, [r1, #84]	; 0x54
 8007c28:	e001      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d029      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c46:	d007      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007c48:	e00f      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c4a:	4b34      	ldr	r3, [pc, #208]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4e:	4a33      	ldr	r2, [pc, #204]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c56:	e00b      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	2102      	movs	r1, #2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 f8cc 	bl	8007dfc <RCCEx_PLL2_Config>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c68:	e002      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c76:	4b29      	ldr	r3, [pc, #164]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c82:	4926      	ldr	r1, [pc, #152]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c88:	e001      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3324      	adds	r3, #36	; 0x24
 8007c9e:	2102      	movs	r1, #2
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 f95d 	bl	8007f60 <RCCEx_PLL3_Config>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d033      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cc4:	d017      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cca:	d811      	bhi.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd0:	d013      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd6:	d80b      	bhi.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d010      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce0:	d106      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce2:	4b0e      	ldr	r3, [pc, #56]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce6:	4a0d      	ldr	r2, [pc, #52]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007cee:	e007      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf4:	e004      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007cf6:	bf00      	nop
 8007cf8:	e002      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007cfa:	bf00      	nop
 8007cfc:	e000      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10c      	bne.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d06:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d12:	4902      	ldr	r1, [pc, #8]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	654b      	str	r3, [r1, #84]	; 0x54
 8007d18:	e004      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007d1a:	bf00      	nop
 8007d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d008      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d30:	4b31      	ldr	r3, [pc, #196]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3c:	492e      	ldr	r1, [pc, #184]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d009      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007d4e:	4b2a      	ldr	r3, [pc, #168]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d5c:	4926      	ldr	r1, [pc, #152]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d008      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d6e:	4b22      	ldr	r3, [pc, #136]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d7a:	491f      	ldr	r1, [pc, #124]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00d      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d8c:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	4a19      	ldr	r2, [pc, #100]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d96:	6113      	str	r3, [r2, #16]
 8007d98:	4b17      	ldr	r3, [pc, #92]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007da2:	4915      	ldr	r1, [pc, #84]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	da08      	bge.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007db0:	4b11      	ldr	r3, [pc, #68]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbc:	490e      	ldr	r1, [pc, #56]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007dce:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ddc:	4906      	ldr	r1, [pc, #24]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007de2:	7dbb      	ldrb	r3, [r7, #22]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	e000      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	58024400 	.word	0x58024400

08007dfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e0a:	4b53      	ldr	r3, [pc, #332]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d101      	bne.n	8007e1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e099      	b.n	8007f4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e1a:	4b4f      	ldr	r3, [pc, #316]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a4e      	ldr	r2, [pc, #312]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007e20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e26:	f7fc fe5b 	bl	8004ae0 <HAL_GetTick>
 8007e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e2c:	e008      	b.n	8007e40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e2e:	f7fc fe57 	bl	8004ae0 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d901      	bls.n	8007e40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e086      	b.n	8007f4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e40:	4b45      	ldr	r3, [pc, #276]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f0      	bne.n	8007e2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e4c:	4b42      	ldr	r3, [pc, #264]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	031b      	lsls	r3, r3, #12
 8007e5a:	493f      	ldr	r1, [pc, #252]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	628b      	str	r3, [r1, #40]	; 0x28
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	025b      	lsls	r3, r3, #9
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	041b      	lsls	r3, r3, #16
 8007e7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e82:	431a      	orrs	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	061b      	lsls	r3, r3, #24
 8007e8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e90:	4931      	ldr	r1, [pc, #196]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e96:	4b30      	ldr	r3, [pc, #192]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	492d      	ldr	r1, [pc, #180]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ea8:	4b2b      	ldr	r3, [pc, #172]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eac:	f023 0220 	bic.w	r2, r3, #32
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	4928      	ldr	r1, [pc, #160]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007eba:	4b27      	ldr	r3, [pc, #156]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	4a26      	ldr	r2, [pc, #152]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007ec0:	f023 0310 	bic.w	r3, r3, #16
 8007ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ec6:	4b24      	ldr	r3, [pc, #144]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eca:	4b24      	ldr	r3, [pc, #144]	; (8007f5c <RCCEx_PLL2_Config+0x160>)
 8007ecc:	4013      	ands	r3, r2
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	69d2      	ldr	r2, [r2, #28]
 8007ed2:	00d2      	lsls	r2, r2, #3
 8007ed4:	4920      	ldr	r1, [pc, #128]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007eda:	4b1f      	ldr	r3, [pc, #124]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	4a1e      	ldr	r2, [pc, #120]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007ee0:	f043 0310 	orr.w	r3, r3, #16
 8007ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d106      	bne.n	8007efa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007eec:	4b1a      	ldr	r3, [pc, #104]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	4a19      	ldr	r2, [pc, #100]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007ef2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ef8:	e00f      	b.n	8007f1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d106      	bne.n	8007f0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f00:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	4a14      	ldr	r2, [pc, #80]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f0c:	e005      	b.n	8007f1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007f0e:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f12:	4a11      	ldr	r2, [pc, #68]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f1a:	4b0f      	ldr	r3, [pc, #60]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a0e      	ldr	r2, [pc, #56]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007f20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f26:	f7fc fddb 	bl	8004ae0 <HAL_GetTick>
 8007f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f2c:	e008      	b.n	8007f40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007f2e:	f7fc fdd7 	bl	8004ae0 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d901      	bls.n	8007f40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e006      	b.n	8007f4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <RCCEx_PLL2_Config+0x15c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0f0      	beq.n	8007f2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	58024400 	.word	0x58024400
 8007f5c:	ffff0007 	.word	0xffff0007

08007f60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f6e:	4b53      	ldr	r3, [pc, #332]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8007f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d101      	bne.n	8007f7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e099      	b.n	80080b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f7e:	4b4f      	ldr	r3, [pc, #316]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a4e      	ldr	r2, [pc, #312]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8007f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f8a:	f7fc fda9 	bl	8004ae0 <HAL_GetTick>
 8007f8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f90:	e008      	b.n	8007fa4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f92:	f7fc fda5 	bl	8004ae0 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d901      	bls.n	8007fa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e086      	b.n	80080b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fa4:	4b45      	ldr	r3, [pc, #276]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1f0      	bne.n	8007f92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007fb0:	4b42      	ldr	r3, [pc, #264]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	051b      	lsls	r3, r3, #20
 8007fbe:	493f      	ldr	r1, [pc, #252]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	025b      	lsls	r3, r3, #9
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	041b      	lsls	r3, r3, #16
 8007fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	061b      	lsls	r3, r3, #24
 8007ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ff4:	4931      	ldr	r1, [pc, #196]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ffa:	4b30      	ldr	r3, [pc, #192]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8007ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	492d      	ldr	r1, [pc, #180]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008008:	4313      	orrs	r3, r2
 800800a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800800c:	4b2b      	ldr	r3, [pc, #172]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	4928      	ldr	r1, [pc, #160]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 800801a:	4313      	orrs	r3, r2
 800801c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800801e:	4b27      	ldr	r3, [pc, #156]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	4a26      	ldr	r2, [pc, #152]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800802a:	4b24      	ldr	r3, [pc, #144]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 800802c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800802e:	4b24      	ldr	r3, [pc, #144]	; (80080c0 <RCCEx_PLL3_Config+0x160>)
 8008030:	4013      	ands	r3, r2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	69d2      	ldr	r2, [r2, #28]
 8008036:	00d2      	lsls	r2, r2, #3
 8008038:	4920      	ldr	r1, [pc, #128]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 800803a:	4313      	orrs	r3, r2
 800803c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800803e:	4b1f      	ldr	r3, [pc, #124]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	4a1e      	ldr	r2, [pc, #120]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d106      	bne.n	800805e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008050:	4b1a      	ldr	r3, [pc, #104]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	4a19      	ldr	r2, [pc, #100]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800805a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800805c:	e00f      	b.n	800807e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d106      	bne.n	8008072 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008064:	4b15      	ldr	r3, [pc, #84]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	4a14      	ldr	r2, [pc, #80]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 800806a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800806e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008070:	e005      	b.n	800807e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008072:	4b12      	ldr	r3, [pc, #72]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008076:	4a11      	ldr	r2, [pc, #68]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800807c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800807e:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a0e      	ldr	r2, [pc, #56]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 8008084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800808a:	f7fc fd29 	bl	8004ae0 <HAL_GetTick>
 800808e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008090:	e008      	b.n	80080a4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008092:	f7fc fd25 	bl	8004ae0 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e006      	b.n	80080b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080a4:	4b05      	ldr	r3, [pc, #20]	; (80080bc <RCCEx_PLL3_Config+0x15c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0f0      	beq.n	8008092 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	58024400 	.word	0x58024400
 80080c0:	ffff0007 	.word	0xffff0007

080080c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e049      	b.n	800816a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f841 	bl	8008172 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f000 fa00 	bl	8008508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
	...

08008188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b01      	cmp	r3, #1
 800819a:	d001      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e054      	b.n	800824a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0201 	orr.w	r2, r2, #1
 80081b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a26      	ldr	r2, [pc, #152]	; (8008258 <HAL_TIM_Base_Start_IT+0xd0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d022      	beq.n	8008208 <HAL_TIM_Base_Start_IT+0x80>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ca:	d01d      	beq.n	8008208 <HAL_TIM_Base_Start_IT+0x80>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a22      	ldr	r2, [pc, #136]	; (800825c <HAL_TIM_Base_Start_IT+0xd4>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d018      	beq.n	8008208 <HAL_TIM_Base_Start_IT+0x80>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a21      	ldr	r2, [pc, #132]	; (8008260 <HAL_TIM_Base_Start_IT+0xd8>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d013      	beq.n	8008208 <HAL_TIM_Base_Start_IT+0x80>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a1f      	ldr	r2, [pc, #124]	; (8008264 <HAL_TIM_Base_Start_IT+0xdc>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00e      	beq.n	8008208 <HAL_TIM_Base_Start_IT+0x80>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a1e      	ldr	r2, [pc, #120]	; (8008268 <HAL_TIM_Base_Start_IT+0xe0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d009      	beq.n	8008208 <HAL_TIM_Base_Start_IT+0x80>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a1c      	ldr	r2, [pc, #112]	; (800826c <HAL_TIM_Base_Start_IT+0xe4>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d004      	beq.n	8008208 <HAL_TIM_Base_Start_IT+0x80>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a1b      	ldr	r2, [pc, #108]	; (8008270 <HAL_TIM_Base_Start_IT+0xe8>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d115      	bne.n	8008234 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689a      	ldr	r2, [r3, #8]
 800820e:	4b19      	ldr	r3, [pc, #100]	; (8008274 <HAL_TIM_Base_Start_IT+0xec>)
 8008210:	4013      	ands	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b06      	cmp	r3, #6
 8008218:	d015      	beq.n	8008246 <HAL_TIM_Base_Start_IT+0xbe>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008220:	d011      	beq.n	8008246 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f042 0201 	orr.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008232:	e008      	b.n	8008246 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f042 0201 	orr.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e000      	b.n	8008248 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008246:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	40010000 	.word	0x40010000
 800825c:	40000400 	.word	0x40000400
 8008260:	40000800 	.word	0x40000800
 8008264:	40000c00 	.word	0x40000c00
 8008268:	40010400 	.word	0x40010400
 800826c:	40001800 	.word	0x40001800
 8008270:	40014000 	.word	0x40014000
 8008274:	00010007 	.word	0x00010007

08008278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b02      	cmp	r3, #2
 800828c:	d122      	bne.n	80082d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b02      	cmp	r3, #2
 800829a:	d11b      	bne.n	80082d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f06f 0202 	mvn.w	r2, #2
 80082a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f905 	bl	80084ca <HAL_TIM_IC_CaptureCallback>
 80082c0:	e005      	b.n	80082ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f8f7 	bl	80084b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f908 	bl	80084de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	f003 0304 	and.w	r3, r3, #4
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d122      	bne.n	8008328 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d11b      	bne.n	8008328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f06f 0204 	mvn.w	r2, #4
 80082f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2202      	movs	r2, #2
 80082fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f8db 	bl	80084ca <HAL_TIM_IC_CaptureCallback>
 8008314:	e005      	b.n	8008322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f8cd 	bl	80084b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f8de 	bl	80084de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f003 0308 	and.w	r3, r3, #8
 8008332:	2b08      	cmp	r3, #8
 8008334:	d122      	bne.n	800837c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b08      	cmp	r3, #8
 8008342:	d11b      	bne.n	800837c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f06f 0208 	mvn.w	r2, #8
 800834c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2204      	movs	r2, #4
 8008352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f8b1 	bl	80084ca <HAL_TIM_IC_CaptureCallback>
 8008368:	e005      	b.n	8008376 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f8a3 	bl	80084b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f8b4 	bl	80084de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	f003 0310 	and.w	r3, r3, #16
 8008386:	2b10      	cmp	r3, #16
 8008388:	d122      	bne.n	80083d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f003 0310 	and.w	r3, r3, #16
 8008394:	2b10      	cmp	r3, #16
 8008396:	d11b      	bne.n	80083d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f06f 0210 	mvn.w	r2, #16
 80083a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2208      	movs	r2, #8
 80083a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f887 	bl	80084ca <HAL_TIM_IC_CaptureCallback>
 80083bc:	e005      	b.n	80083ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f879 	bl	80084b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f88a 	bl	80084de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d10e      	bne.n	80083fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d107      	bne.n	80083fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f06f 0201 	mvn.w	r2, #1
 80083f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7fc f8a2 	bl	8004540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008406:	2b80      	cmp	r3, #128	; 0x80
 8008408:	d10e      	bne.n	8008428 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008414:	2b80      	cmp	r3, #128	; 0x80
 8008416:	d107      	bne.n	8008428 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f914 	bl	8008650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008436:	d10e      	bne.n	8008456 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008442:	2b80      	cmp	r3, #128	; 0x80
 8008444:	d107      	bne.n	8008456 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800844e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f907 	bl	8008664 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008460:	2b40      	cmp	r3, #64	; 0x40
 8008462:	d10e      	bne.n	8008482 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846e:	2b40      	cmp	r3, #64	; 0x40
 8008470:	d107      	bne.n	8008482 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800847a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f838 	bl	80084f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f003 0320 	and.w	r3, r3, #32
 800848c:	2b20      	cmp	r3, #32
 800848e:	d10e      	bne.n	80084ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f003 0320 	and.w	r3, r3, #32
 800849a:	2b20      	cmp	r3, #32
 800849c:	d107      	bne.n	80084ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f06f 0220 	mvn.w	r2, #32
 80084a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f8c7 	bl	800863c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084be:	bf00      	nop
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084e6:	bf00      	nop
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084fa:	bf00      	nop
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
	...

08008508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a40      	ldr	r2, [pc, #256]	; (800861c <TIM_Base_SetConfig+0x114>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d013      	beq.n	8008548 <TIM_Base_SetConfig+0x40>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008526:	d00f      	beq.n	8008548 <TIM_Base_SetConfig+0x40>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a3d      	ldr	r2, [pc, #244]	; (8008620 <TIM_Base_SetConfig+0x118>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d00b      	beq.n	8008548 <TIM_Base_SetConfig+0x40>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a3c      	ldr	r2, [pc, #240]	; (8008624 <TIM_Base_SetConfig+0x11c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d007      	beq.n	8008548 <TIM_Base_SetConfig+0x40>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a3b      	ldr	r2, [pc, #236]	; (8008628 <TIM_Base_SetConfig+0x120>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d003      	beq.n	8008548 <TIM_Base_SetConfig+0x40>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a3a      	ldr	r2, [pc, #232]	; (800862c <TIM_Base_SetConfig+0x124>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d108      	bne.n	800855a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a2f      	ldr	r2, [pc, #188]	; (800861c <TIM_Base_SetConfig+0x114>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d01f      	beq.n	80085a2 <TIM_Base_SetConfig+0x9a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008568:	d01b      	beq.n	80085a2 <TIM_Base_SetConfig+0x9a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a2c      	ldr	r2, [pc, #176]	; (8008620 <TIM_Base_SetConfig+0x118>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d017      	beq.n	80085a2 <TIM_Base_SetConfig+0x9a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a2b      	ldr	r2, [pc, #172]	; (8008624 <TIM_Base_SetConfig+0x11c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d013      	beq.n	80085a2 <TIM_Base_SetConfig+0x9a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a2a      	ldr	r2, [pc, #168]	; (8008628 <TIM_Base_SetConfig+0x120>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00f      	beq.n	80085a2 <TIM_Base_SetConfig+0x9a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a29      	ldr	r2, [pc, #164]	; (800862c <TIM_Base_SetConfig+0x124>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00b      	beq.n	80085a2 <TIM_Base_SetConfig+0x9a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a28      	ldr	r2, [pc, #160]	; (8008630 <TIM_Base_SetConfig+0x128>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d007      	beq.n	80085a2 <TIM_Base_SetConfig+0x9a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a27      	ldr	r2, [pc, #156]	; (8008634 <TIM_Base_SetConfig+0x12c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d003      	beq.n	80085a2 <TIM_Base_SetConfig+0x9a>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a26      	ldr	r2, [pc, #152]	; (8008638 <TIM_Base_SetConfig+0x130>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d108      	bne.n	80085b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	689a      	ldr	r2, [r3, #8]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a10      	ldr	r2, [pc, #64]	; (800861c <TIM_Base_SetConfig+0x114>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d00f      	beq.n	8008600 <TIM_Base_SetConfig+0xf8>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a12      	ldr	r2, [pc, #72]	; (800862c <TIM_Base_SetConfig+0x124>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d00b      	beq.n	8008600 <TIM_Base_SetConfig+0xf8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a11      	ldr	r2, [pc, #68]	; (8008630 <TIM_Base_SetConfig+0x128>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d007      	beq.n	8008600 <TIM_Base_SetConfig+0xf8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a10      	ldr	r2, [pc, #64]	; (8008634 <TIM_Base_SetConfig+0x12c>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d003      	beq.n	8008600 <TIM_Base_SetConfig+0xf8>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a0f      	ldr	r2, [pc, #60]	; (8008638 <TIM_Base_SetConfig+0x130>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d103      	bne.n	8008608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	691a      	ldr	r2, [r3, #16]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	615a      	str	r2, [r3, #20]
}
 800860e:	bf00      	nop
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40010000 	.word	0x40010000
 8008620:	40000400 	.word	0x40000400
 8008624:	40000800 	.word	0x40000800
 8008628:	40000c00 	.word	0x40000c00
 800862c:	40010400 	.word	0x40010400
 8008630:	40014000 	.word	0x40014000
 8008634:	40014400 	.word	0x40014400
 8008638:	40014800 	.word	0x40014800

0800863c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008678:	b084      	sub	sp, #16
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	f107 001c 	add.w	r0, r7, #28
 8008686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	2b01      	cmp	r3, #1
 800868e:	d120      	bne.n	80086d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68da      	ldr	r2, [r3, #12]
 80086a0:	4b2a      	ldr	r3, [pc, #168]	; (800874c <USB_CoreInit+0xd4>)
 80086a2:	4013      	ands	r3, r2
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d105      	bne.n	80086c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f914 	bl	80088f4 <USB_CoreReset>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]
 80086d0:	e01a      	b.n	8008708 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f908 	bl	80088f4 <USB_CoreReset>
 80086e4:	4603      	mov	r3, r0
 80086e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d106      	bne.n	80086fc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	639a      	str	r2, [r3, #56]	; 0x38
 80086fa:	e005      	b.n	8008708 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	2b01      	cmp	r3, #1
 800870c:	d116      	bne.n	800873c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008712:	b29a      	uxth	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <USB_CoreInit+0xd8>)
 800871e:	4313      	orrs	r3, r2
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f043 0206 	orr.w	r2, r3, #6
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f043 0220 	orr.w	r2, r3, #32
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800873c:	7bfb      	ldrb	r3, [r7, #15]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008748:	b004      	add	sp, #16
 800874a:	4770      	bx	lr
 800874c:	ffbdffbf 	.word	0xffbdffbf
 8008750:	03ee0000 	.word	0x03ee0000

08008754 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f023 0201 	bic.w	r2, r3, #1
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008792:	78fb      	ldrb	r3, [r7, #3]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d115      	bne.n	80087c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80087a4:	2001      	movs	r0, #1
 80087a6:	f7fc f9a7 	bl	8004af8 <HAL_Delay>
      ms++;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3301      	adds	r3, #1
 80087ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f891 	bl	80088d8 <USB_GetMode>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d01e      	beq.n	80087fa <USB_SetCurrentMode+0x84>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b31      	cmp	r3, #49	; 0x31
 80087c0:	d9f0      	bls.n	80087a4 <USB_SetCurrentMode+0x2e>
 80087c2:	e01a      	b.n	80087fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d115      	bne.n	80087f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80087d6:	2001      	movs	r0, #1
 80087d8:	f7fc f98e 	bl	8004af8 <HAL_Delay>
      ms++;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3301      	adds	r3, #1
 80087e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f878 	bl	80088d8 <USB_GetMode>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d005      	beq.n	80087fa <USB_SetCurrentMode+0x84>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b31      	cmp	r3, #49	; 0x31
 80087f2:	d9f0      	bls.n	80087d6 <USB_SetCurrentMode+0x60>
 80087f4:	e001      	b.n	80087fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e005      	b.n	8008806 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b32      	cmp	r3, #50	; 0x32
 80087fe:	d101      	bne.n	8008804 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e000      	b.n	8008806 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3301      	adds	r3, #1
 8008822:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	4a13      	ldr	r2, [pc, #76]	; (8008874 <USB_FlushTxFifo+0x64>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d901      	bls.n	8008830 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e01b      	b.n	8008868 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	daf2      	bge.n	800881e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	019b      	lsls	r3, r3, #6
 8008840:	f043 0220 	orr.w	r2, r3, #32
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3301      	adds	r3, #1
 800884c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	4a08      	ldr	r2, [pc, #32]	; (8008874 <USB_FlushTxFifo+0x64>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d901      	bls.n	800885a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e006      	b.n	8008868 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	f003 0320 	and.w	r3, r3, #32
 8008862:	2b20      	cmp	r3, #32
 8008864:	d0f0      	beq.n	8008848 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	00030d40 	.word	0x00030d40

08008878 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3301      	adds	r3, #1
 8008888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4a11      	ldr	r2, [pc, #68]	; (80088d4 <USB_FlushRxFifo+0x5c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d901      	bls.n	8008896 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e018      	b.n	80088c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	daf2      	bge.n	8008884 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2210      	movs	r2, #16
 80088a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3301      	adds	r3, #1
 80088ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4a08      	ldr	r2, [pc, #32]	; (80088d4 <USB_FlushRxFifo+0x5c>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d901      	bls.n	80088ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e006      	b.n	80088c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	f003 0310 	and.w	r3, r3, #16
 80088c2:	2b10      	cmp	r3, #16
 80088c4:	d0f0      	beq.n	80088a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	00030d40 	.word	0x00030d40

080088d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	f003 0301 	and.w	r3, r3, #1
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	3301      	adds	r3, #1
 8008904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4a13      	ldr	r2, [pc, #76]	; (8008958 <USB_CoreReset+0x64>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d901      	bls.n	8008912 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e01b      	b.n	800894a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	daf2      	bge.n	8008900 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f043 0201 	orr.w	r2, r3, #1
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3301      	adds	r3, #1
 800892e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4a09      	ldr	r2, [pc, #36]	; (8008958 <USB_CoreReset+0x64>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d901      	bls.n	800893c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e006      	b.n	800894a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b01      	cmp	r3, #1
 8008946:	d0f0      	beq.n	800892a <USB_CoreReset+0x36>

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3714      	adds	r7, #20
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	00030d40 	.word	0x00030d40

0800895c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800895c:	b084      	sub	sp, #16
 800895e:	b580      	push	{r7, lr}
 8008960:	b086      	sub	sp, #24
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800896a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800897c:	461a      	mov	r2, r3
 800897e:	2300      	movs	r3, #0
 8008980:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008986:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008992:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d018      	beq.n	80089d8 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80089a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d10a      	bne.n	80089c2 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089ba:	f043 0304 	orr.w	r3, r3, #4
 80089be:	6013      	str	r3, [r2, #0]
 80089c0:	e014      	b.n	80089ec <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089d0:	f023 0304 	bic.w	r3, r3, #4
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	e009      	b.n	80089ec <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089e6:	f023 0304 	bic.w	r3, r3, #4
 80089ea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089ec:	2110      	movs	r1, #16
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff ff0e 	bl	8008810 <USB_FlushTxFifo>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff ff3a 	bl	8008878 <USB_FlushRxFifo>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a0e:	2300      	movs	r3, #0
 8008a10:	613b      	str	r3, [r7, #16]
 8008a12:	e015      	b.n	8008a40 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a20:	461a      	mov	r2, r3
 8008a22:	f04f 33ff 	mov.w	r3, #4294967295
 8008a26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a34:	461a      	mov	r2, r3
 8008a36:	2300      	movs	r3, #0
 8008a38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	613b      	str	r3, [r7, #16]
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d3e5      	bcc.n	8008a14 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f04f 32ff 	mov.w	r2, #4294967295
 8008a54:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00b      	beq.n	8008a7a <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a13      	ldr	r2, [pc, #76]	; (8008abc <USB_HostInit+0x160>)
 8008a6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a13      	ldr	r2, [pc, #76]	; (8008ac0 <USB_HostInit+0x164>)
 8008a74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008a78:	e009      	b.n	8008a8e <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2280      	movs	r2, #128	; 0x80
 8008a7e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a10      	ldr	r2, [pc, #64]	; (8008ac4 <USB_HostInit+0x168>)
 8008a84:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a0f      	ldr	r2, [pc, #60]	; (8008ac8 <USB_HostInit+0x16c>)
 8008a8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d105      	bne.n	8008aa0 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	f043 0210 	orr.w	r2, r3, #16
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	699a      	ldr	r2, [r3, #24]
 8008aa4:	4b09      	ldr	r3, [pc, #36]	; (8008acc <USB_HostInit+0x170>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3718      	adds	r7, #24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ab8:	b004      	add	sp, #16
 8008aba:	4770      	bx	lr
 8008abc:	01000200 	.word	0x01000200
 8008ac0:	00e00300 	.word	0x00e00300
 8008ac4:	00600080 	.word	0x00600080
 8008ac8:	004000e0 	.word	0x004000e0
 8008acc:	a3200008 	.word	0xa3200008

08008ad0 <__libc_init_array>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	4d0d      	ldr	r5, [pc, #52]	; (8008b08 <__libc_init_array+0x38>)
 8008ad4:	4c0d      	ldr	r4, [pc, #52]	; (8008b0c <__libc_init_array+0x3c>)
 8008ad6:	1b64      	subs	r4, r4, r5
 8008ad8:	10a4      	asrs	r4, r4, #2
 8008ada:	2600      	movs	r6, #0
 8008adc:	42a6      	cmp	r6, r4
 8008ade:	d109      	bne.n	8008af4 <__libc_init_array+0x24>
 8008ae0:	4d0b      	ldr	r5, [pc, #44]	; (8008b10 <__libc_init_array+0x40>)
 8008ae2:	4c0c      	ldr	r4, [pc, #48]	; (8008b14 <__libc_init_array+0x44>)
 8008ae4:	f000 f83e 	bl	8008b64 <_init>
 8008ae8:	1b64      	subs	r4, r4, r5
 8008aea:	10a4      	asrs	r4, r4, #2
 8008aec:	2600      	movs	r6, #0
 8008aee:	42a6      	cmp	r6, r4
 8008af0:	d105      	bne.n	8008afe <__libc_init_array+0x2e>
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af8:	4798      	blx	r3
 8008afa:	3601      	adds	r6, #1
 8008afc:	e7ee      	b.n	8008adc <__libc_init_array+0xc>
 8008afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b02:	4798      	blx	r3
 8008b04:	3601      	adds	r6, #1
 8008b06:	e7f2      	b.n	8008aee <__libc_init_array+0x1e>
 8008b08:	08008d60 	.word	0x08008d60
 8008b0c:	08008d60 	.word	0x08008d60
 8008b10:	08008d60 	.word	0x08008d60
 8008b14:	08008d64 	.word	0x08008d64

08008b18 <memcmp>:
 8008b18:	b510      	push	{r4, lr}
 8008b1a:	3901      	subs	r1, #1
 8008b1c:	4402      	add	r2, r0
 8008b1e:	4290      	cmp	r0, r2
 8008b20:	d101      	bne.n	8008b26 <memcmp+0xe>
 8008b22:	2000      	movs	r0, #0
 8008b24:	e005      	b.n	8008b32 <memcmp+0x1a>
 8008b26:	7803      	ldrb	r3, [r0, #0]
 8008b28:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	d001      	beq.n	8008b34 <memcmp+0x1c>
 8008b30:	1b18      	subs	r0, r3, r4
 8008b32:	bd10      	pop	{r4, pc}
 8008b34:	3001      	adds	r0, #1
 8008b36:	e7f2      	b.n	8008b1e <memcmp+0x6>

08008b38 <memcpy>:
 8008b38:	440a      	add	r2, r1
 8008b3a:	4291      	cmp	r1, r2
 8008b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b40:	d100      	bne.n	8008b44 <memcpy+0xc>
 8008b42:	4770      	bx	lr
 8008b44:	b510      	push	{r4, lr}
 8008b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b4e:	4291      	cmp	r1, r2
 8008b50:	d1f9      	bne.n	8008b46 <memcpy+0xe>
 8008b52:	bd10      	pop	{r4, pc}

08008b54 <memset>:
 8008b54:	4402      	add	r2, r0
 8008b56:	4603      	mov	r3, r0
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d100      	bne.n	8008b5e <memset+0xa>
 8008b5c:	4770      	bx	lr
 8008b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b62:	e7f9      	b.n	8008b58 <memset+0x4>

08008b64 <_init>:
 8008b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b66:	bf00      	nop
 8008b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6a:	bc08      	pop	{r3}
 8008b6c:	469e      	mov	lr, r3
 8008b6e:	4770      	bx	lr

08008b70 <_fini>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	bf00      	nop
 8008b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b76:	bc08      	pop	{r3}
 8008b78:	469e      	mov	lr, r3
 8008b7a:	4770      	bx	lr
