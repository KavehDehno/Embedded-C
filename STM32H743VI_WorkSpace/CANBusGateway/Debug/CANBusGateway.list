
CANBusGateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d498  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  0800d738  0800d738  0001d738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da24  0800da24  0001da24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800da2c  0800da2c  0001da2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800da30  0800da30  0001da30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  24000000  0800da34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00079e80  24000094  0800dac8  00020094  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24079f14  0800dac8  00029f14  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a2c5  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044d3  00000000  00000000  0004a387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fa8  00000000  00000000  0004e860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001de0  00000000  00000000  00050808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039abc  00000000  00000000  000525e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027a09  00000000  00000000  0008c0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ecc8  00000000  00000000  000b3aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00232775  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008d04  00000000  00000000  002327c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d720 	.word	0x0800d720

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	0800d720 	.word	0x0800d720

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	240016b0 	.word	0x240016b0

08000374 <strlen>:
 8000374:	4603      	mov	r3, r0
 8000376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800037a:	2a00      	cmp	r2, #0
 800037c:	d1fb      	bne.n	8000376 <strlen+0x2>
 800037e:	1a18      	subs	r0, r3, r0
 8000380:	3801      	subs	r0, #1
 8000382:	4770      	bx	lr
	...

08000390 <memchr>:
 8000390:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000394:	2a10      	cmp	r2, #16
 8000396:	db2b      	blt.n	80003f0 <memchr+0x60>
 8000398:	f010 0f07 	tst.w	r0, #7
 800039c:	d008      	beq.n	80003b0 <memchr+0x20>
 800039e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a2:	3a01      	subs	r2, #1
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d02d      	beq.n	8000404 <memchr+0x74>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	b342      	cbz	r2, 8000400 <memchr+0x70>
 80003ae:	d1f6      	bne.n	800039e <memchr+0xe>
 80003b0:	b4f0      	push	{r4, r5, r6, r7}
 80003b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ba:	f022 0407 	bic.w	r4, r2, #7
 80003be:	f07f 0700 	mvns.w	r7, #0
 80003c2:	2300      	movs	r3, #0
 80003c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003c8:	3c08      	subs	r4, #8
 80003ca:	ea85 0501 	eor.w	r5, r5, r1
 80003ce:	ea86 0601 	eor.w	r6, r6, r1
 80003d2:	fa85 f547 	uadd8	r5, r5, r7
 80003d6:	faa3 f587 	sel	r5, r3, r7
 80003da:	fa86 f647 	uadd8	r6, r6, r7
 80003de:	faa5 f687 	sel	r6, r5, r7
 80003e2:	b98e      	cbnz	r6, 8000408 <memchr+0x78>
 80003e4:	d1ee      	bne.n	80003c4 <memchr+0x34>
 80003e6:	bcf0      	pop	{r4, r5, r6, r7}
 80003e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003ec:	f002 0207 	and.w	r2, r2, #7
 80003f0:	b132      	cbz	r2, 8000400 <memchr+0x70>
 80003f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003f6:	3a01      	subs	r2, #1
 80003f8:	ea83 0301 	eor.w	r3, r3, r1
 80003fc:	b113      	cbz	r3, 8000404 <memchr+0x74>
 80003fe:	d1f8      	bne.n	80003f2 <memchr+0x62>
 8000400:	2000      	movs	r0, #0
 8000402:	4770      	bx	lr
 8000404:	3801      	subs	r0, #1
 8000406:	4770      	bx	lr
 8000408:	2d00      	cmp	r5, #0
 800040a:	bf06      	itte	eq
 800040c:	4635      	moveq	r5, r6
 800040e:	3803      	subeq	r0, #3
 8000410:	3807      	subne	r0, #7
 8000412:	f015 0f01 	tst.w	r5, #1
 8000416:	d107      	bne.n	8000428 <memchr+0x98>
 8000418:	3001      	adds	r0, #1
 800041a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800041e:	bf02      	ittt	eq
 8000420:	3001      	addeq	r0, #1
 8000422:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000426:	3001      	addeq	r0, #1
 8000428:	bcf0      	pop	{r4, r5, r6, r7}
 800042a:	3801      	subs	r0, #1
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop

08000430 <__aeabi_uldivmod>:
 8000430:	b953      	cbnz	r3, 8000448 <__aeabi_uldivmod+0x18>
 8000432:	b94a      	cbnz	r2, 8000448 <__aeabi_uldivmod+0x18>
 8000434:	2900      	cmp	r1, #0
 8000436:	bf08      	it	eq
 8000438:	2800      	cmpeq	r0, #0
 800043a:	bf1c      	itt	ne
 800043c:	f04f 31ff 	movne.w	r1, #4294967295
 8000440:	f04f 30ff 	movne.w	r0, #4294967295
 8000444:	f000 b974 	b.w	8000730 <__aeabi_idiv0>
 8000448:	f1ad 0c08 	sub.w	ip, sp, #8
 800044c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000450:	f000 f806 	bl	8000460 <__udivmoddi4>
 8000454:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045c:	b004      	add	sp, #16
 800045e:	4770      	bx	lr

08000460 <__udivmoddi4>:
 8000460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000464:	9d08      	ldr	r5, [sp, #32]
 8000466:	4604      	mov	r4, r0
 8000468:	468e      	mov	lr, r1
 800046a:	2b00      	cmp	r3, #0
 800046c:	d14d      	bne.n	800050a <__udivmoddi4+0xaa>
 800046e:	428a      	cmp	r2, r1
 8000470:	4694      	mov	ip, r2
 8000472:	d969      	bls.n	8000548 <__udivmoddi4+0xe8>
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	b152      	cbz	r2, 8000490 <__udivmoddi4+0x30>
 800047a:	fa01 f302 	lsl.w	r3, r1, r2
 800047e:	f1c2 0120 	rsb	r1, r2, #32
 8000482:	fa20 f101 	lsr.w	r1, r0, r1
 8000486:	fa0c fc02 	lsl.w	ip, ip, r2
 800048a:	ea41 0e03 	orr.w	lr, r1, r3
 800048e:	4094      	lsls	r4, r2
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	0c21      	lsrs	r1, r4, #16
 8000496:	fbbe f6f8 	udiv	r6, lr, r8
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fb08 e316 	mls	r3, r8, r6, lr
 80004a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004a6:	fb06 f107 	mul.w	r1, r6, r7
 80004aa:	4299      	cmp	r1, r3
 80004ac:	d90a      	bls.n	80004c4 <__udivmoddi4+0x64>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80004b6:	f080 811f 	bcs.w	80006f8 <__udivmoddi4+0x298>
 80004ba:	4299      	cmp	r1, r3
 80004bc:	f240 811c 	bls.w	80006f8 <__udivmoddi4+0x298>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3310 	mls	r3, r8, r0, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb00 f707 	mul.w	r7, r0, r7
 80004d8:	42a7      	cmp	r7, r4
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x92>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e4:	f080 810a 	bcs.w	80006fc <__udivmoddi4+0x29c>
 80004e8:	42a7      	cmp	r7, r4
 80004ea:	f240 8107 	bls.w	80006fc <__udivmoddi4+0x29c>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004f6:	1be4      	subs	r4, r4, r7
 80004f8:	2600      	movs	r6, #0
 80004fa:	b11d      	cbz	r5, 8000504 <__udivmoddi4+0xa4>
 80004fc:	40d4      	lsrs	r4, r2
 80004fe:	2300      	movs	r3, #0
 8000500:	e9c5 4300 	strd	r4, r3, [r5]
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	428b      	cmp	r3, r1
 800050c:	d909      	bls.n	8000522 <__udivmoddi4+0xc2>
 800050e:	2d00      	cmp	r5, #0
 8000510:	f000 80ef 	beq.w	80006f2 <__udivmoddi4+0x292>
 8000514:	2600      	movs	r6, #0
 8000516:	e9c5 0100 	strd	r0, r1, [r5]
 800051a:	4630      	mov	r0, r6
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	fab3 f683 	clz	r6, r3
 8000526:	2e00      	cmp	r6, #0
 8000528:	d14a      	bne.n	80005c0 <__udivmoddi4+0x160>
 800052a:	428b      	cmp	r3, r1
 800052c:	d302      	bcc.n	8000534 <__udivmoddi4+0xd4>
 800052e:	4282      	cmp	r2, r0
 8000530:	f200 80f9 	bhi.w	8000726 <__udivmoddi4+0x2c6>
 8000534:	1a84      	subs	r4, r0, r2
 8000536:	eb61 0303 	sbc.w	r3, r1, r3
 800053a:	2001      	movs	r0, #1
 800053c:	469e      	mov	lr, r3
 800053e:	2d00      	cmp	r5, #0
 8000540:	d0e0      	beq.n	8000504 <__udivmoddi4+0xa4>
 8000542:	e9c5 4e00 	strd	r4, lr, [r5]
 8000546:	e7dd      	b.n	8000504 <__udivmoddi4+0xa4>
 8000548:	b902      	cbnz	r2, 800054c <__udivmoddi4+0xec>
 800054a:	deff      	udf	#255	; 0xff
 800054c:	fab2 f282 	clz	r2, r2
 8000550:	2a00      	cmp	r2, #0
 8000552:	f040 8092 	bne.w	800067a <__udivmoddi4+0x21a>
 8000556:	eba1 010c 	sub.w	r1, r1, ip
 800055a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800055e:	fa1f fe8c 	uxth.w	lr, ip
 8000562:	2601      	movs	r6, #1
 8000564:	0c20      	lsrs	r0, r4, #16
 8000566:	fbb1 f3f7 	udiv	r3, r1, r7
 800056a:	fb07 1113 	mls	r1, r7, r3, r1
 800056e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000572:	fb0e f003 	mul.w	r0, lr, r3
 8000576:	4288      	cmp	r0, r1
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x12c>
 800057a:	eb1c 0101 	adds.w	r1, ip, r1
 800057e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x12a>
 8000584:	4288      	cmp	r0, r1
 8000586:	f200 80cb 	bhi.w	8000720 <__udivmoddi4+0x2c0>
 800058a:	4643      	mov	r3, r8
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb1 f0f7 	udiv	r0, r1, r7
 8000594:	fb07 1110 	mls	r1, r7, r0, r1
 8000598:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800059c:	fb0e fe00 	mul.w	lr, lr, r0
 80005a0:	45a6      	cmp	lr, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x156>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80005ac:	d202      	bcs.n	80005b4 <__udivmoddi4+0x154>
 80005ae:	45a6      	cmp	lr, r4
 80005b0:	f200 80bb 	bhi.w	800072a <__udivmoddi4+0x2ca>
 80005b4:	4608      	mov	r0, r1
 80005b6:	eba4 040e 	sub.w	r4, r4, lr
 80005ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005be:	e79c      	b.n	80004fa <__udivmoddi4+0x9a>
 80005c0:	f1c6 0720 	rsb	r7, r6, #32
 80005c4:	40b3      	lsls	r3, r6
 80005c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80005ce:	fa20 f407 	lsr.w	r4, r0, r7
 80005d2:	fa01 f306 	lsl.w	r3, r1, r6
 80005d6:	431c      	orrs	r4, r3
 80005d8:	40f9      	lsrs	r1, r7
 80005da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005de:	fa00 f306 	lsl.w	r3, r0, r6
 80005e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80005e6:	0c20      	lsrs	r0, r4, #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fb09 1118 	mls	r1, r9, r8, r1
 80005f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005f4:	fb08 f00e 	mul.w	r0, r8, lr
 80005f8:	4288      	cmp	r0, r1
 80005fa:	fa02 f206 	lsl.w	r2, r2, r6
 80005fe:	d90b      	bls.n	8000618 <__udivmoddi4+0x1b8>
 8000600:	eb1c 0101 	adds.w	r1, ip, r1
 8000604:	f108 3aff 	add.w	sl, r8, #4294967295
 8000608:	f080 8088 	bcs.w	800071c <__udivmoddi4+0x2bc>
 800060c:	4288      	cmp	r0, r1
 800060e:	f240 8085 	bls.w	800071c <__udivmoddi4+0x2bc>
 8000612:	f1a8 0802 	sub.w	r8, r8, #2
 8000616:	4461      	add	r1, ip
 8000618:	1a09      	subs	r1, r1, r0
 800061a:	b2a4      	uxth	r4, r4
 800061c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000620:	fb09 1110 	mls	r1, r9, r0, r1
 8000624:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000628:	fb00 fe0e 	mul.w	lr, r0, lr
 800062c:	458e      	cmp	lr, r1
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x1e2>
 8000630:	eb1c 0101 	adds.w	r1, ip, r1
 8000634:	f100 34ff 	add.w	r4, r0, #4294967295
 8000638:	d26c      	bcs.n	8000714 <__udivmoddi4+0x2b4>
 800063a:	458e      	cmp	lr, r1
 800063c:	d96a      	bls.n	8000714 <__udivmoddi4+0x2b4>
 800063e:	3802      	subs	r0, #2
 8000640:	4461      	add	r1, ip
 8000642:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000646:	fba0 9402 	umull	r9, r4, r0, r2
 800064a:	eba1 010e 	sub.w	r1, r1, lr
 800064e:	42a1      	cmp	r1, r4
 8000650:	46c8      	mov	r8, r9
 8000652:	46a6      	mov	lr, r4
 8000654:	d356      	bcc.n	8000704 <__udivmoddi4+0x2a4>
 8000656:	d053      	beq.n	8000700 <__udivmoddi4+0x2a0>
 8000658:	b15d      	cbz	r5, 8000672 <__udivmoddi4+0x212>
 800065a:	ebb3 0208 	subs.w	r2, r3, r8
 800065e:	eb61 010e 	sbc.w	r1, r1, lr
 8000662:	fa01 f707 	lsl.w	r7, r1, r7
 8000666:	fa22 f306 	lsr.w	r3, r2, r6
 800066a:	40f1      	lsrs	r1, r6
 800066c:	431f      	orrs	r7, r3
 800066e:	e9c5 7100 	strd	r7, r1, [r5]
 8000672:	2600      	movs	r6, #0
 8000674:	4631      	mov	r1, r6
 8000676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	40d8      	lsrs	r0, r3
 8000680:	fa0c fc02 	lsl.w	ip, ip, r2
 8000684:	fa21 f303 	lsr.w	r3, r1, r3
 8000688:	4091      	lsls	r1, r2
 800068a:	4301      	orrs	r1, r0
 800068c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000690:	fa1f fe8c 	uxth.w	lr, ip
 8000694:	fbb3 f0f7 	udiv	r0, r3, r7
 8000698:	fb07 3610 	mls	r6, r7, r0, r3
 800069c:	0c0b      	lsrs	r3, r1, #16
 800069e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006a2:	fb00 f60e 	mul.w	r6, r0, lr
 80006a6:	429e      	cmp	r6, r3
 80006a8:	fa04 f402 	lsl.w	r4, r4, r2
 80006ac:	d908      	bls.n	80006c0 <__udivmoddi4+0x260>
 80006ae:	eb1c 0303 	adds.w	r3, ip, r3
 80006b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006b6:	d22f      	bcs.n	8000718 <__udivmoddi4+0x2b8>
 80006b8:	429e      	cmp	r6, r3
 80006ba:	d92d      	bls.n	8000718 <__udivmoddi4+0x2b8>
 80006bc:	3802      	subs	r0, #2
 80006be:	4463      	add	r3, ip
 80006c0:	1b9b      	subs	r3, r3, r6
 80006c2:	b289      	uxth	r1, r1
 80006c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80006c8:	fb07 3316 	mls	r3, r7, r6, r3
 80006cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006d0:	fb06 f30e 	mul.w	r3, r6, lr
 80006d4:	428b      	cmp	r3, r1
 80006d6:	d908      	bls.n	80006ea <__udivmoddi4+0x28a>
 80006d8:	eb1c 0101 	adds.w	r1, ip, r1
 80006dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80006e0:	d216      	bcs.n	8000710 <__udivmoddi4+0x2b0>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d914      	bls.n	8000710 <__udivmoddi4+0x2b0>
 80006e6:	3e02      	subs	r6, #2
 80006e8:	4461      	add	r1, ip
 80006ea:	1ac9      	subs	r1, r1, r3
 80006ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006f0:	e738      	b.n	8000564 <__udivmoddi4+0x104>
 80006f2:	462e      	mov	r6, r5
 80006f4:	4628      	mov	r0, r5
 80006f6:	e705      	b.n	8000504 <__udivmoddi4+0xa4>
 80006f8:	4606      	mov	r6, r0
 80006fa:	e6e3      	b.n	80004c4 <__udivmoddi4+0x64>
 80006fc:	4618      	mov	r0, r3
 80006fe:	e6f8      	b.n	80004f2 <__udivmoddi4+0x92>
 8000700:	454b      	cmp	r3, r9
 8000702:	d2a9      	bcs.n	8000658 <__udivmoddi4+0x1f8>
 8000704:	ebb9 0802 	subs.w	r8, r9, r2
 8000708:	eb64 0e0c 	sbc.w	lr, r4, ip
 800070c:	3801      	subs	r0, #1
 800070e:	e7a3      	b.n	8000658 <__udivmoddi4+0x1f8>
 8000710:	4646      	mov	r6, r8
 8000712:	e7ea      	b.n	80006ea <__udivmoddi4+0x28a>
 8000714:	4620      	mov	r0, r4
 8000716:	e794      	b.n	8000642 <__udivmoddi4+0x1e2>
 8000718:	4640      	mov	r0, r8
 800071a:	e7d1      	b.n	80006c0 <__udivmoddi4+0x260>
 800071c:	46d0      	mov	r8, sl
 800071e:	e77b      	b.n	8000618 <__udivmoddi4+0x1b8>
 8000720:	3b02      	subs	r3, #2
 8000722:	4461      	add	r1, ip
 8000724:	e732      	b.n	800058c <__udivmoddi4+0x12c>
 8000726:	4630      	mov	r0, r6
 8000728:	e709      	b.n	800053e <__udivmoddi4+0xde>
 800072a:	4464      	add	r4, ip
 800072c:	3802      	subs	r0, #2
 800072e:	e742      	b.n	80005b6 <__udivmoddi4+0x156>

08000730 <__aeabi_idiv0>:
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f103 0208 	add.w	r2, r3, #8
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f04f 32ff 	mov.w	r2, #4294967295
 800074c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f103 0208 	add.w	r2, r3, #8
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f103 0208 	add.w	r2, r3, #8
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800078e:	b480      	push	{r7}
 8000790:	b085      	sub	sp, #20
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ec:	d103      	bne.n	80007f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	e00c      	b.n	8000810 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3308      	adds	r3, #8
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e002      	b.n	8000804 <vListInsert+0x2e>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	429a      	cmp	r2, r3
 800080e:	d2f6      	bcs.n	80007fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	683a      	ldr	r2, [r7, #0]
 800081e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	601a      	str	r2, [r3, #0]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	6892      	ldr	r2, [r2, #8]
 800085e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	6852      	ldr	r2, [r2, #4]
 8000868:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	d103      	bne.n	800087c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10c      	bne.n	80008ca <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	b672      	cpsid	i
 80008b6:	f383 8811 	msr	BASEPRI, r3
 80008ba:	f3bf 8f6f 	isb	sy
 80008be:	f3bf 8f4f 	dsb	sy
 80008c2:	b662      	cpsie	i
 80008c4:	60bb      	str	r3, [r7, #8]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008c6:	bf00      	nop
 80008c8:	e7fe      	b.n	80008c8 <xQueueGenericReset+0x2c>

    taskENTER_CRITICAL();
 80008ca:	f001 fce9 	bl	80022a0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008d6:	68f9      	ldr	r1, [r7, #12]
 80008d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008da:	fb01 f303 	mul.w	r3, r1, r3
 80008de:	441a      	add	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008fa:	3b01      	subs	r3, #1
 80008fc:	68f9      	ldr	r1, [r7, #12]
 80008fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000900:	fb01 f303 	mul.w	r3, r1, r3
 8000904:	441a      	add	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d109      	bne.n	8000934 <xQueueGenericReset+0x98>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d00f      	beq.n	8000948 <xQueueGenericReset+0xac>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3310      	adds	r3, #16
 800092c:	4618      	mov	r0, r3
 800092e:	f000 ffc5 	bl	80018bc <xTaskRemoveFromEventList>
 8000932:	e009      	b.n	8000948 <xQueueGenericReset+0xac>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3310      	adds	r3, #16
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fefb 	bl	8000734 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3324      	adds	r3, #36	; 0x24
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fef6 	bl	8000734 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000948:	f001 fcde 	bl	8002308 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800094c:	2301      	movs	r3, #1
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000956:	b580      	push	{r7, lr}
 8000958:	b08c      	sub	sp, #48	; 0x30
 800095a:	af02      	add	r7, sp, #8
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	4613      	mov	r3, r2
 8000962:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10c      	bne.n	8000984 <xQueueGenericCreate+0x2e>
        __asm volatile
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	b672      	cpsid	i
 8000970:	f383 8811 	msr	BASEPRI, r3
 8000974:	f3bf 8f6f 	isb	sy
 8000978:	f3bf 8f4f 	dsb	sy
 800097c:	b662      	cpsie	i
 800097e:	61bb      	str	r3, [r7, #24]
    }
 8000980:	bf00      	nop
 8000982:	e7fe      	b.n	8000982 <xQueueGenericCreate+0x2c>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <xQueueGenericCreate+0x4c>
 8000994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	fbb2 f3f3 	udiv	r3, r2, r3
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d101      	bne.n	80009a6 <xQueueGenericCreate+0x50>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <xQueueGenericCreate+0x52>
 80009a6:	2300      	movs	r3, #0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10c      	bne.n	80009c6 <xQueueGenericCreate+0x70>
        __asm volatile
 80009ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b0:	b672      	cpsid	i
 80009b2:	f383 8811 	msr	BASEPRI, r3
 80009b6:	f3bf 8f6f 	isb	sy
 80009ba:	f3bf 8f4f 	dsb	sy
 80009be:	b662      	cpsie	i
 80009c0:	617b      	str	r3, [r7, #20]
    }
 80009c2:	bf00      	nop
 80009c4:	e7fe      	b.n	80009c4 <xQueueGenericCreate+0x6e>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80009cc:	d90c      	bls.n	80009e8 <xQueueGenericCreate+0x92>
        __asm volatile
 80009ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d2:	b672      	cpsid	i
 80009d4:	f383 8811 	msr	BASEPRI, r3
 80009d8:	f3bf 8f6f 	isb	sy
 80009dc:	f3bf 8f4f 	dsb	sy
 80009e0:	b662      	cpsie	i
 80009e2:	613b      	str	r3, [r7, #16]
    }
 80009e4:	bf00      	nop
 80009e6:	e7fe      	b.n	80009e6 <xQueueGenericCreate+0x90>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	3350      	adds	r3, #80	; 0x50
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fd8b 	bl	8002508 <pvPortMalloc>
 80009f2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80009f4:	6a3b      	ldr	r3, [r7, #32]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00d      	beq.n	8000a16 <xQueueGenericCreate+0xc0>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3350      	adds	r3, #80	; 0x50
 8000a02:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	6a3b      	ldr	r3, [r7, #32]
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	69fa      	ldr	r2, [r7, #28]
 8000a0e:	68b9      	ldr	r1, [r7, #8]
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f000 f805 	bl	8000a20 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000a16:	6a3b      	ldr	r3, [r7, #32]
    }
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d103      	bne.n	8000a3c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e002      	b.n	8000a42 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000a4e:	2101      	movs	r1, #1
 8000a50:	69b8      	ldr	r0, [r7, #24]
 8000a52:	f7ff ff23 	bl	800089c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	78fa      	ldrb	r2, [r7, #3]
 8000a5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	68f9      	ldr	r1, [r7, #12]
 8000a64:	2073      	movs	r0, #115	; 0x73
 8000a66:	f003 f951 	bl	8003d0c <SEGGER_SYSVIEW_RecordU32x3>
}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	; 0x40
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000a82:	2300      	movs	r3, #0
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d10c      	bne.n	8000aaa <xQueueGenericSend+0x36>
        __asm volatile
 8000a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a94:	b672      	cpsid	i
 8000a96:	f383 8811 	msr	BASEPRI, r3
 8000a9a:	f3bf 8f6f 	isb	sy
 8000a9e:	f3bf 8f4f 	dsb	sy
 8000aa2:	b662      	cpsie	i
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000aa6:	bf00      	nop
 8000aa8:	e7fe      	b.n	8000aa8 <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d103      	bne.n	8000ab8 <xQueueGenericSend+0x44>
 8000ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d101      	bne.n	8000abc <xQueueGenericSend+0x48>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e000      	b.n	8000abe <xQueueGenericSend+0x4a>
 8000abc:	2300      	movs	r3, #0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10c      	bne.n	8000adc <xQueueGenericSend+0x68>
        __asm volatile
 8000ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac6:	b672      	cpsid	i
 8000ac8:	f383 8811 	msr	BASEPRI, r3
 8000acc:	f3bf 8f6f 	isb	sy
 8000ad0:	f3bf 8f4f 	dsb	sy
 8000ad4:	b662      	cpsie	i
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000ad8:	bf00      	nop
 8000ada:	e7fe      	b.n	8000ada <xQueueGenericSend+0x66>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d103      	bne.n	8000aea <xQueueGenericSend+0x76>
 8000ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d101      	bne.n	8000aee <xQueueGenericSend+0x7a>
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <xQueueGenericSend+0x7c>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10c      	bne.n	8000b0e <xQueueGenericSend+0x9a>
        __asm volatile
 8000af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af8:	b672      	cpsid	i
 8000afa:	f383 8811 	msr	BASEPRI, r3
 8000afe:	f3bf 8f6f 	isb	sy
 8000b02:	f3bf 8f4f 	dsb	sy
 8000b06:	b662      	cpsie	i
 8000b08:	623b      	str	r3, [r7, #32]
    }
 8000b0a:	bf00      	nop
 8000b0c:	e7fe      	b.n	8000b0c <xQueueGenericSend+0x98>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b0e:	f001 f875 	bl	8001bfc <xTaskGetSchedulerState>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <xQueueGenericSend+0xaa>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <xQueueGenericSend+0xae>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <xQueueGenericSend+0xb0>
 8000b22:	2300      	movs	r3, #0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10c      	bne.n	8000b42 <xQueueGenericSend+0xce>
        __asm volatile
 8000b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b2c:	b672      	cpsid	i
 8000b2e:	f383 8811 	msr	BASEPRI, r3
 8000b32:	f3bf 8f6f 	isb	sy
 8000b36:	f3bf 8f4f 	dsb	sy
 8000b3a:	b662      	cpsie	i
 8000b3c:	61fb      	str	r3, [r7, #28]
    }
 8000b3e:	bf00      	nop
 8000b40:	e7fe      	b.n	8000b40 <xQueueGenericSend+0xcc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b42:	f001 fbad 	bl	80022a0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d302      	bcc.n	8000b58 <xQueueGenericSend+0xe4>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d11f      	bne.n	8000b98 <xQueueGenericSend+0x124>
            {
                traceQUEUE_SEND( pxQueue );
 8000b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 fe64 	bl	8004828 <SEGGER_SYSVIEW_ShrinkId>
 8000b60:	68ba      	ldr	r2, [r7, #8]
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	205a      	movs	r0, #90	; 0x5a
 8000b6e:	f003 f943 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b78:	f000 f9e2 	bl	8000f40 <prvCopyDataToQueue>
 8000b7c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d004      	beq.n	8000b90 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b88:	3324      	adds	r3, #36	; 0x24
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fe96 	bl	80018bc <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000b90:	f001 fbba 	bl	8002308 <vPortExitCritical>
                return pdPASS;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e07d      	b.n	8000c94 <xQueueGenericSend+0x220>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d110      	bne.n	8000bc0 <xQueueGenericSend+0x14c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b9e:	f001 fbb3 	bl	8002308 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 fe3f 	bl	8004828 <SEGGER_SYSVIEW_ShrinkId>
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	205a      	movs	r0, #90	; 0x5a
 8000bb8:	f003 f91e 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e069      	b.n	8000c94 <xQueueGenericSend+0x220>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d106      	bne.n	8000bd4 <xQueueGenericSend+0x160>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fede 	bl	800198c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000bd4:	f001 fb98 	bl	8002308 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000bd8:	f000 fc8e 	bl	80014f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bdc:	f001 fb60 	bl	80022a0 <vPortEnterCritical>
 8000be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	d103      	bne.n	8000bf6 <xQueueGenericSend+0x182>
 8000bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c02:	d103      	bne.n	8000c0c <xQueueGenericSend+0x198>
 8000c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c0c:	f001 fb7c 	bl	8002308 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c10:	1d3a      	adds	r2, r7, #4
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fecd 	bl	80019b8 <xTaskCheckForTimeOut>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d124      	bne.n	8000c6e <xQueueGenericSend+0x1fa>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c26:	f000 fa5d 	bl	80010e4 <prvIsQueueFull>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d018      	beq.n	8000c62 <xQueueGenericSend+0x1ee>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	3310      	adds	r3, #16
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 fe19 	bl	8001870 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c40:	f000 f9e8 	bl	8001014 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000c44:	f000 fc66 	bl	8001514 <xTaskResumeAll>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f47f af79 	bne.w	8000b42 <xQueueGenericSend+0xce>
                {
                    portYIELD_WITHIN_API();
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <xQueueGenericSend+0x228>)
 8000c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	f3bf 8f4f 	dsb	sy
 8000c5c:	f3bf 8f6f 	isb	sy
 8000c60:	e76f      	b.n	8000b42 <xQueueGenericSend+0xce>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000c62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c64:	f000 f9d6 	bl	8001014 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c68:	f000 fc54 	bl	8001514 <xTaskResumeAll>
 8000c6c:	e769      	b.n	8000b42 <xQueueGenericSend+0xce>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c70:	f000 f9d0 	bl	8001014 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c74:	f000 fc4e 	bl	8001514 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 fdd4 	bl	8004828 <SEGGER_SYSVIEW_ShrinkId>
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	4601      	mov	r1, r0
 8000c8c:	205a      	movs	r0, #90	; 0x5a
 8000c8e:	f003 f8b3 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000c92:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3738      	adds	r7, #56	; 0x38
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	e000ed04 	.word	0xe000ed04

08000ca0 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b091      	sub	sp, #68	; 0x44
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10c      	bne.n	8000cd6 <xQueueSemaphoreTake+0x36>
        __asm volatile
 8000cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc0:	b672      	cpsid	i
 8000cc2:	f383 8811 	msr	BASEPRI, r3
 8000cc6:	f3bf 8f6f 	isb	sy
 8000cca:	f3bf 8f4f 	dsb	sy
 8000cce:	b662      	cpsie	i
 8000cd0:	623b      	str	r3, [r7, #32]
    }
 8000cd2:	bf00      	nop
 8000cd4:	e7fe      	b.n	8000cd4 <xQueueSemaphoreTake+0x34>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00c      	beq.n	8000cf8 <xQueueSemaphoreTake+0x58>
        __asm volatile
 8000cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce2:	b672      	cpsid	i
 8000ce4:	f383 8811 	msr	BASEPRI, r3
 8000ce8:	f3bf 8f6f 	isb	sy
 8000cec:	f3bf 8f4f 	dsb	sy
 8000cf0:	b662      	cpsie	i
 8000cf2:	61fb      	str	r3, [r7, #28]
    }
 8000cf4:	bf00      	nop
 8000cf6:	e7fe      	b.n	8000cf6 <xQueueSemaphoreTake+0x56>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cf8:	f000 ff80 	bl	8001bfc <xTaskGetSchedulerState>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <xQueueSemaphoreTake+0x68>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <xQueueSemaphoreTake+0x6c>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <xQueueSemaphoreTake+0x6e>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10c      	bne.n	8000d2c <xQueueSemaphoreTake+0x8c>
        __asm volatile
 8000d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d16:	b672      	cpsid	i
 8000d18:	f383 8811 	msr	BASEPRI, r3
 8000d1c:	f3bf 8f6f 	isb	sy
 8000d20:	f3bf 8f4f 	dsb	sy
 8000d24:	b662      	cpsie	i
 8000d26:	61bb      	str	r3, [r7, #24]
    }
 8000d28:	bf00      	nop
 8000d2a:	e7fe      	b.n	8000d2a <xQueueSemaphoreTake+0x8a>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d2c:	f001 fab8 	bl	80022a0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d029      	beq.n	8000d90 <xQueueSemaphoreTake+0xf0>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8000d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fd72 	bl	8004828 <SEGGER_SYSVIEW_ShrinkId>
 8000d44:	4604      	mov	r4, r0
 8000d46:	2000      	movs	r0, #0
 8000d48:	f003 fd6e 	bl	8004828 <SEGGER_SYSVIEW_ShrinkId>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	9100      	str	r1, [sp, #0]
 8000d54:	4621      	mov	r1, r4
 8000d56:	205c      	movs	r0, #92	; 0x5c
 8000d58:	f003 f84e 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d104      	bne.n	8000d76 <xQueueSemaphoreTake+0xd6>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000d6c:	f001 f8fe 	bl	8001f6c <pvTaskIncrementMutexHeldCount>
 8000d70:	4602      	mov	r2, r0
 8000d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d74:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d004      	beq.n	8000d88 <xQueueSemaphoreTake+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d80:	3310      	adds	r3, #16
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fd9a 	bl	80018bc <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d88:	f001 fabe 	bl	8002308 <vPortExitCritical>
                return pdPASS;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e0b9      	b.n	8000f04 <xQueueSemaphoreTake+0x264>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d123      	bne.n	8000dde <xQueueSemaphoreTake+0x13e>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8000d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00c      	beq.n	8000db6 <xQueueSemaphoreTake+0x116>
        __asm volatile
 8000d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da0:	b672      	cpsid	i
 8000da2:	f383 8811 	msr	BASEPRI, r3
 8000da6:	f3bf 8f6f 	isb	sy
 8000daa:	f3bf 8f4f 	dsb	sy
 8000dae:	b662      	cpsie	i
 8000db0:	617b      	str	r3, [r7, #20]
    }
 8000db2:	bf00      	nop
 8000db4:	e7fe      	b.n	8000db4 <xQueueSemaphoreTake+0x114>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000db6:	f001 faa7 	bl	8002308 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f003 fd33 	bl	8004828 <SEGGER_SYSVIEW_ShrinkId>
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f003 fd2f 	bl	8004828 <SEGGER_SYSVIEW_ShrinkId>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2101      	movs	r1, #1
 8000dd0:	9100      	str	r1, [sp, #0]
 8000dd2:	4621      	mov	r1, r4
 8000dd4:	205c      	movs	r0, #92	; 0x5c
 8000dd6:	f003 f80f 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e092      	b.n	8000f04 <xQueueSemaphoreTake+0x264>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d106      	bne.n	8000df2 <xQueueSemaphoreTake+0x152>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 fdcf 	bl	800198c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000df2:	f001 fa89 	bl	8002308 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000df6:	f000 fb7f 	bl	80014f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000dfa:	f001 fa51 	bl	80022a0 <vPortEnterCritical>
 8000dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0a:	d103      	bne.n	8000e14 <xQueueSemaphoreTake+0x174>
 8000e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d103      	bne.n	8000e2a <xQueueSemaphoreTake+0x18a>
 8000e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e2a:	f001 fa6d 	bl	8002308 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e2e:	463a      	mov	r2, r7
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fdbe 	bl	80019b8 <xTaskCheckForTimeOut>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d132      	bne.n	8000ea8 <xQueueSemaphoreTake+0x208>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e44:	f000 f938 	bl	80010b8 <prvIsQueueEmpty>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d026      	beq.n	8000e9c <xQueueSemaphoreTake+0x1fc>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d109      	bne.n	8000e6a <xQueueSemaphoreTake+0x1ca>
                        {
                            taskENTER_CRITICAL();
 8000e56:	f001 fa23 	bl	80022a0 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 feea 	bl	8001c38 <xTaskPriorityInherit>
 8000e64:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8000e66:	f001 fa4f 	bl	8002308 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6c:	3324      	adds	r3, #36	; 0x24
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fcfc 	bl	8001870 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e7a:	f000 f8cb 	bl	8001014 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e7e:	f000 fb49 	bl	8001514 <xTaskResumeAll>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f47f af51 	bne.w	8000d2c <xQueueSemaphoreTake+0x8c>
                {
                    portYIELD_WITHIN_API();
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <xQueueSemaphoreTake+0x26c>)
 8000e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	f3bf 8f4f 	dsb	sy
 8000e96:	f3bf 8f6f 	isb	sy
 8000e9a:	e747      	b.n	8000d2c <xQueueSemaphoreTake+0x8c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e9e:	f000 f8b9 	bl	8001014 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ea2:	f000 fb37 	bl	8001514 <xTaskResumeAll>
 8000ea6:	e741      	b.n	8000d2c <xQueueSemaphoreTake+0x8c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000eaa:	f000 f8b3 	bl	8001014 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000eae:	f000 fb31 	bl	8001514 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000eb4:	f000 f900 	bl	80010b8 <prvIsQueueEmpty>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f43f af36 	beq.w	8000d2c <xQueueSemaphoreTake+0x8c>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8000ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00d      	beq.n	8000ee2 <xQueueSemaphoreTake+0x242>
                        {
                            taskENTER_CRITICAL();
 8000ec6:	f001 f9eb 	bl	80022a0 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ecc:	f000 f820 	bl	8000f10 <prvGetDisinheritPriorityAfterTimeout>
 8000ed0:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 ffab 	bl	8001e34 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8000ede:	f001 fa13 	bl	8002308 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 fc9f 	bl	8004828 <SEGGER_SYSVIEW_ShrinkId>
 8000eea:	4604      	mov	r4, r0
 8000eec:	2000      	movs	r0, #0
 8000eee:	f003 fc9b 	bl	8004828 <SEGGER_SYSVIEW_ShrinkId>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	9100      	str	r1, [sp, #0]
 8000efa:	4621      	mov	r1, r4
 8000efc:	205c      	movs	r0, #92	; 0x5c
 8000efe:	f002 ff7b 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000f02:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	373c      	adds	r7, #60	; 0x3c
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	e000ed04 	.word	0xe000ed04

08000f10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	e001      	b.n	8000f32 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000f32:	68fb      	ldr	r3, [r7, #12]
    }
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f54:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10d      	bne.n	8000f7a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d14d      	bne.n	8001002 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fede 	bl	8001d2c <xTaskPriorityDisinherit>
 8000f70:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	e043      	b.n	8001002 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d119      	bne.n	8000fb4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6858      	ldr	r0, [r3, #4]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	f00b ff44 	bl	800ce18 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	441a      	add	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d32b      	bcc.n	8001002 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	e026      	b.n	8001002 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	68d8      	ldr	r0, [r3, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	f00b ff2a 	bl	800ce18 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	425b      	negs	r3, r3
 8000fce:	441a      	add	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	425b      	negs	r3, r3
 8000fea:	441a      	add	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d105      	bne.n	8001002 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800100a:	697b      	ldr	r3, [r7, #20]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800101c:	f001 f940 	bl	80022a0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001026:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001028:	e011      	b.n	800104e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	2b00      	cmp	r3, #0
 8001030:	d012      	beq.n	8001058 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3324      	adds	r3, #36	; 0x24
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fc40 	bl	80018bc <xTaskRemoveFromEventList>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001042:	f000 fd23 	bl	8001a8c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	3b01      	subs	r3, #1
 800104a:	b2db      	uxtb	r3, r3
 800104c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	2b00      	cmp	r3, #0
 8001054:	dce9      	bgt.n	800102a <prvUnlockQueue+0x16>
 8001056:	e000      	b.n	800105a <prvUnlockQueue+0x46>
                        break;
 8001058:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	22ff      	movs	r2, #255	; 0xff
 800105e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001062:	f001 f951 	bl	8002308 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001066:	f001 f91b 	bl	80022a0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001070:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001072:	e011      	b.n	8001098 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d012      	beq.n	80010a2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3310      	adds	r3, #16
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fc1b 	bl	80018bc <xTaskRemoveFromEventList>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800108c:	f000 fcfe 	bl	8001a8c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	3b01      	subs	r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800109c:	2b00      	cmp	r3, #0
 800109e:	dce9      	bgt.n	8001074 <prvUnlockQueue+0x60>
 80010a0:	e000      	b.n	80010a4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80010a2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80010ac:	f001 f92c 	bl	8002308 <vPortExitCritical>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010c0:	f001 f8ee 	bl	80022a0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	e001      	b.n	80010d6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010d6:	f001 f917 	bl	8002308 <vPortExitCritical>

    return xReturn;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010ec:	f001 f8d8 	bl	80022a0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d102      	bne.n	8001102 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010fc:	2301      	movs	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	e001      	b.n	8001106 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001106:	f001 f8ff 	bl	8002308 <vPortExitCritical>

    return xReturn;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af04      	add	r7, sp, #16
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	4613      	mov	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4618      	mov	r0, r3
 800112a:	f001 f9ed 	bl	8002508 <pvPortMalloc>
 800112e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00e      	beq.n	8001154 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001136:	205c      	movs	r0, #92	; 0x5c
 8001138:	f001 f9e6 	bl	8002508 <pvPortMalloc>
 800113c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
 800114a:	e005      	b.n	8001158 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800114c:	6978      	ldr	r0, [r7, #20]
 800114e:	f001 fac1 	bl	80026d4 <vPortFree>
 8001152:	e001      	b.n	8001158 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d013      	beq.n	8001186 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800115e:	88fa      	ldrh	r2, [r7, #6]
 8001160:	2300      	movs	r3, #0
 8001162:	9303      	str	r3, [sp, #12]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 f80e 	bl	8001196 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800117a:	69f8      	ldr	r0, [r7, #28]
 800117c:	f000 f8a4 	bl	80012c8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	e002      	b.n	800118c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800118c:	69bb      	ldr	r3, [r7, #24]
    }
 800118e:	4618      	mov	r0, r3
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b088      	sub	sp, #32
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80011a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	461a      	mov	r2, r3
 80011ae:	21a5      	movs	r1, #165	; 0xa5
 80011b0:	f00b fe40 	bl	800ce34 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80011b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80011be:	440b      	add	r3, r1
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f023 0307 	bic.w	r3, r3, #7
 80011cc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00c      	beq.n	80011f2 <prvInitialiseNewTask+0x5c>
        __asm volatile
 80011d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011dc:	b672      	cpsid	i
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	b662      	cpsie	i
 80011ec:	617b      	str	r3, [r7, #20]
    }
 80011ee:	bf00      	nop
 80011f0:	e7fe      	b.n	80011f0 <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d01f      	beq.n	8001238 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	e012      	b.n	8001224 <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	4413      	add	r3, r2
 8001204:	7819      	ldrb	r1, [r3, #0]
 8001206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	4413      	add	r3, r2
 800120c:	3334      	adds	r3, #52	; 0x34
 800120e:	460a      	mov	r2, r1
 8001210:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	d9e9      	bls.n	80011fe <prvInitialiseNewTask+0x68>
 800122a:	e000      	b.n	800122e <prvInitialiseNewTask+0x98>
            {
                break;
 800122c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800122e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001236:	e003      	b.n	8001240 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	2b06      	cmp	r3, #6
 8001244:	d901      	bls.n	800124a <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001246:	2306      	movs	r3, #6
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001254:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8001256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001258:	2200      	movs	r2, #0
 800125a:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800125c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125e:	3304      	adds	r3, #4
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fa87 	bl	8000774 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001268:	3318      	adds	r3, #24
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fa82 	bl	8000774 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001274:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001278:	f1c3 0207 	rsb	r2, r3, #7
 800127c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001288:	3354      	adds	r3, #84	; 0x54
 800128a:	2204      	movs	r2, #4
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f00b fdd0 	bl	800ce34 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001296:	3358      	adds	r3, #88	; 0x58
 8001298:	2201      	movs	r2, #1
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f00b fdc9 	bl	800ce34 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	68f9      	ldr	r1, [r7, #12]
 80012a6:	69b8      	ldr	r0, [r7, #24]
 80012a8:	f000 feec 	bl	8002084 <pxPortInitialiseStack>
 80012ac:	4602      	mov	r2, r0
 80012ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80012b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80012be:	bf00      	nop
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80012d0:	f000 ffe6 	bl	80022a0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <prvAddNewTaskToReadyList+0xe4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a34      	ldr	r2, [pc, #208]	; (80013ac <prvAddNewTaskToReadyList+0xe4>)
 80012dc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80012de:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <prvAddNewTaskToReadyList+0xe8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80012e6:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <prvAddNewTaskToReadyList+0xe8>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <prvAddNewTaskToReadyList+0xe4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d110      	bne.n	8001316 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80012f4:	f000 fbe8 	bl	8001ac8 <prvInitialiseTaskLists>
 80012f8:	e00d      	b.n	8001316 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <prvAddNewTaskToReadyList+0xec>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d109      	bne.n	8001316 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001302:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <prvAddNewTaskToReadyList+0xe8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	429a      	cmp	r2, r3
 800130e:	d802      	bhi.n	8001316 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <prvAddNewTaskToReadyList+0xe8>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <prvAddNewTaskToReadyList+0xf0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <prvAddNewTaskToReadyList+0xf0>)
 800131e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <prvAddNewTaskToReadyList+0xf0>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d016      	beq.n	800135c <prvAddNewTaskToReadyList+0x94>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	f003 f953 	bl	80045dc <SEGGER_SYSVIEW_OnTaskCreate>
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	461d      	mov	r5, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	461c      	mov	r4, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	1ae3      	subs	r3, r4, r3
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	462b      	mov	r3, r5
 8001358:	f001 fb8e 	bl	8002a78 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	f003 f9c0 	bl	80046e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	2201      	movs	r2, #1
 800136a:	409a      	lsls	r2, r3
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <prvAddNewTaskToReadyList+0xf4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4313      	orrs	r3, r2
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <prvAddNewTaskToReadyList+0xf4>)
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <prvAddNewTaskToReadyList+0xf8>)
 8001384:	441a      	add	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3304      	adds	r3, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4610      	mov	r0, r2
 800138e:	f7ff f9fe 	bl	800078e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001392:	f000 ffb9 	bl	8002308 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <prvAddNewTaskToReadyList+0xec>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <prvAddNewTaskToReadyList+0xe8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdb0      	pop	{r4, r5, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	240001b0 	.word	0x240001b0
 80013b0:	240000b0 	.word	0x240000b0
 80013b4:	240001bc 	.word	0x240001bc
 80013b8:	240001cc 	.word	0x240001cc
 80013bc:	240001b8 	.word	0x240001b8
 80013c0:	240000b4 	.word	0x240000b4

080013c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d01d      	beq.n	8001412 <vTaskDelay+0x4e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <vTaskDelay+0x6c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00c      	beq.n	80013f8 <vTaskDelay+0x34>
        __asm volatile
 80013de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e2:	b672      	cpsid	i
 80013e4:	f383 8811 	msr	BASEPRI, r3
 80013e8:	f3bf 8f6f 	isb	sy
 80013ec:	f3bf 8f4f 	dsb	sy
 80013f0:	b662      	cpsie	i
 80013f2:	60bb      	str	r3, [r7, #8]
    }
 80013f4:	bf00      	nop
 80013f6:	e7fe      	b.n	80013f6 <vTaskDelay+0x32>
            vTaskSuspendAll();
 80013f8:	f000 f87e 	bl	80014f8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	2023      	movs	r0, #35	; 0x23
 8001400:	f002 fbee 	bl	8003be0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001404:	2100      	movs	r1, #0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fdc4 	bl	8001f94 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800140c:	f000 f882 	bl	8001514 <xTaskResumeAll>
 8001410:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d107      	bne.n	8001428 <vTaskDelay+0x64>
        {
            portYIELD_WITHIN_API();
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <vTaskDelay+0x70>)
 800141a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f3bf 8f4f 	dsb	sy
 8001424:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	240001d8 	.word	0x240001d8
 8001434:	e000ed04 	.word	0xe000ed04

08001438 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <vTaskStartScheduler+0xa0>)
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	4924      	ldr	r1, [pc, #144]	; (80014dc <vTaskStartScheduler+0xa4>)
 800144c:	4824      	ldr	r0, [pc, #144]	; (80014e0 <vTaskStartScheduler+0xa8>)
 800144e:	f7ff fe61 	bl	8001114 <xTaskCreate>
 8001452:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d126      	bne.n	80014a8 <vTaskStartScheduler+0x70>
        __asm volatile
 800145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145e:	b672      	cpsid	i
 8001460:	f383 8811 	msr	BASEPRI, r3
 8001464:	f3bf 8f6f 	isb	sy
 8001468:	f3bf 8f4f 	dsb	sy
 800146c:	b662      	cpsie	i
 800146e:	60bb      	str	r3, [r7, #8]
    }
 8001470:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <vTaskStartScheduler+0xac>)
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <vTaskStartScheduler+0xb0>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <vTaskStartScheduler+0xb4>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <vTaskStartScheduler+0xb8>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <vTaskStartScheduler+0xa0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d102      	bne.n	8001498 <vTaskStartScheduler+0x60>
 8001492:	f003 f887 	bl	80045a4 <SEGGER_SYSVIEW_OnIdle>
 8001496:	e004      	b.n	80014a2 <vTaskStartScheduler+0x6a>
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <vTaskStartScheduler+0xb8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f003 f8df 	bl	8004660 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80014a2:	f000 fe7f 	bl	80021a4 <xPortStartScheduler>
 80014a6:	e010      	b.n	80014ca <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ae:	d10c      	bne.n	80014ca <vTaskStartScheduler+0x92>
        __asm volatile
 80014b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b4:	b672      	cpsid	i
 80014b6:	f383 8811 	msr	BASEPRI, r3
 80014ba:	f3bf 8f6f 	isb	sy
 80014be:	f3bf 8f4f 	dsb	sy
 80014c2:	b662      	cpsie	i
 80014c4:	607b      	str	r3, [r7, #4]
    }
 80014c6:	bf00      	nop
 80014c8:	e7fe      	b.n	80014c8 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <vTaskStartScheduler+0xbc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	240001d4 	.word	0x240001d4
 80014dc:	0800d738 	.word	0x0800d738
 80014e0:	08001aa5 	.word	0x08001aa5
 80014e4:	240001d0 	.word	0x240001d0
 80014e8:	240001bc 	.word	0x240001bc
 80014ec:	240001b4 	.word	0x240001b4
 80014f0:	240000b0 	.word	0x240000b0
 80014f4:	24000000 	.word	0x24000000

080014f8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <vTaskSuspendAll+0x18>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a03      	ldr	r2, [pc, #12]	; (8001510 <vTaskSuspendAll+0x18>)
 8001504:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	240001d8 	.word	0x240001d8

08001514 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001522:	4b3e      	ldr	r3, [pc, #248]	; (800161c <xTaskResumeAll+0x108>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <xTaskResumeAll+0x30>
        __asm volatile
 800152a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800152e:	b672      	cpsid	i
 8001530:	f383 8811 	msr	BASEPRI, r3
 8001534:	f3bf 8f6f 	isb	sy
 8001538:	f3bf 8f4f 	dsb	sy
 800153c:	b662      	cpsie	i
 800153e:	603b      	str	r3, [r7, #0]
    }
 8001540:	bf00      	nop
 8001542:	e7fe      	b.n	8001542 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001544:	f000 feac 	bl	80022a0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001548:	4b34      	ldr	r3, [pc, #208]	; (800161c <xTaskResumeAll+0x108>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	4a33      	ldr	r2, [pc, #204]	; (800161c <xTaskResumeAll+0x108>)
 8001550:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001552:	4b32      	ldr	r3, [pc, #200]	; (800161c <xTaskResumeAll+0x108>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d159      	bne.n	800160e <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800155a:	4b31      	ldr	r3, [pc, #196]	; (8001620 <xTaskResumeAll+0x10c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d055      	beq.n	800160e <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001562:	e032      	b.n	80015ca <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <xTaskResumeAll+0x110>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3318      	adds	r3, #24
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff f969 	bl	8000848 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3304      	adds	r3, #4
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f964 	bl	8000848 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4618      	mov	r0, r3
 8001584:	f003 f8ae 	bl	80046e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	2201      	movs	r2, #1
 800158e:	409a      	lsls	r2, r3
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <xTaskResumeAll+0x114>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4313      	orrs	r3, r2
 8001596:	4a24      	ldr	r2, [pc, #144]	; (8001628 <xTaskResumeAll+0x114>)
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <xTaskResumeAll+0x118>)
 80015a8:	441a      	add	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3304      	adds	r3, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4610      	mov	r0, r2
 80015b2:	f7ff f8ec 	bl	800078e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <xTaskResumeAll+0x11c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d302      	bcc.n	80015ca <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <xTaskResumeAll+0x120>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <xTaskResumeAll+0x110>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1c8      	bne.n	8001564 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80015d8:	f000 faf4 	bl	8001bc4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <xTaskResumeAll+0x124>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d010      	beq.n	800160a <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80015e8:	f000 f83a 	bl	8001660 <xTaskIncrementTick>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <xTaskResumeAll+0x120>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f1      	bne.n	80015e8 <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <xTaskResumeAll+0x124>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <xTaskResumeAll+0x120>)
 800160c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800160e:	f000 fe7b 	bl	8002308 <vPortExitCritical>

    return xAlreadyYielded;
 8001612:	687b      	ldr	r3, [r7, #4]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	240001d8 	.word	0x240001d8
 8001620:	240001b0 	.word	0x240001b0
 8001624:	24000170 	.word	0x24000170
 8001628:	240001b8 	.word	0x240001b8
 800162c:	240000b4 	.word	0x240000b4
 8001630:	240000b0 	.word	0x240000b0
 8001634:	240001c4 	.word	0x240001c4
 8001638:	240001c0 	.word	0x240001c0

0800163c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001642:	f000 ff1d 	bl	8002480 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <xTaskGetTickCountFromISR+0x20>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001650:	683b      	ldr	r3, [r7, #0]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	240001b4 	.word	0x240001b4

08001660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800166a:	4b42      	ldr	r3, [pc, #264]	; (8001774 <xTaskIncrementTick+0x114>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d175      	bne.n	800175e <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <xTaskIncrementTick+0x118>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3301      	adds	r3, #1
 8001678:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800167a:	4a3f      	ldr	r2, [pc, #252]	; (8001778 <xTaskIncrementTick+0x118>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d122      	bne.n	80016cc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001686:	4b3d      	ldr	r3, [pc, #244]	; (800177c <xTaskIncrementTick+0x11c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00c      	beq.n	80016aa <xTaskIncrementTick+0x4a>
        __asm volatile
 8001690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001694:	b672      	cpsid	i
 8001696:	f383 8811 	msr	BASEPRI, r3
 800169a:	f3bf 8f6f 	isb	sy
 800169e:	f3bf 8f4f 	dsb	sy
 80016a2:	b662      	cpsie	i
 80016a4:	603b      	str	r3, [r7, #0]
    }
 80016a6:	bf00      	nop
 80016a8:	e7fe      	b.n	80016a8 <xTaskIncrementTick+0x48>
 80016aa:	4b34      	ldr	r3, [pc, #208]	; (800177c <xTaskIncrementTick+0x11c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b33      	ldr	r3, [pc, #204]	; (8001780 <xTaskIncrementTick+0x120>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a31      	ldr	r2, [pc, #196]	; (800177c <xTaskIncrementTick+0x11c>)
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4a31      	ldr	r2, [pc, #196]	; (8001780 <xTaskIncrementTick+0x120>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b31      	ldr	r3, [pc, #196]	; (8001784 <xTaskIncrementTick+0x124>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a2f      	ldr	r2, [pc, #188]	; (8001784 <xTaskIncrementTick+0x124>)
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	f000 fa7c 	bl	8001bc4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80016cc:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <xTaskIncrementTick+0x128>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d348      	bcc.n	8001768 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <xTaskIncrementTick+0x11c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d104      	bne.n	80016ea <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <xTaskIncrementTick+0x128>)
 80016e2:	f04f 32ff 	mov.w	r2, #4294967295
 80016e6:	601a      	str	r2, [r3, #0]
                    break;
 80016e8:	e03e      	b.n	8001768 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <xTaskIncrementTick+0x11c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d203      	bcs.n	800170a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001702:	4a21      	ldr	r2, [pc, #132]	; (8001788 <xTaskIncrementTick+0x128>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001708:	e02e      	b.n	8001768 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	3304      	adds	r3, #4
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f89a 	bl	8000848 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3318      	adds	r3, #24
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f891 	bl	8000848 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	4618      	mov	r0, r3
 800172a:	f002 ffdb 	bl	80046e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	2201      	movs	r2, #1
 8001734:	409a      	lsls	r2, r3
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <xTaskIncrementTick+0x12c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4313      	orrs	r3, r2
 800173c:	4a13      	ldr	r2, [pc, #76]	; (800178c <xTaskIncrementTick+0x12c>)
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4a10      	ldr	r2, [pc, #64]	; (8001790 <xTaskIncrementTick+0x130>)
 800174e:	441a      	add	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	3304      	adds	r3, #4
 8001754:	4619      	mov	r1, r3
 8001756:	4610      	mov	r0, r2
 8001758:	f7ff f819 	bl	800078e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800175c:	e7bb      	b.n	80016d6 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <xTaskIncrementTick+0x134>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <xTaskIncrementTick+0x134>)
 8001766:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001768:	697b      	ldr	r3, [r7, #20]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	240001d8 	.word	0x240001d8
 8001778:	240001b4 	.word	0x240001b4
 800177c:	24000168 	.word	0x24000168
 8001780:	2400016c 	.word	0x2400016c
 8001784:	240001c8 	.word	0x240001c8
 8001788:	240001d0 	.word	0x240001d0
 800178c:	240001b8 	.word	0x240001b8
 8001790:	240000b4 	.word	0x240000b4
 8001794:	240001c0 	.word	0x240001c0

08001798 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800179e:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <vTaskSwitchContext+0xc0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <vTaskSwitchContext+0xc4>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80017ac:	e04f      	b.n	800184e <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <vTaskSwitchContext+0xc4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017b4:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <vTaskSwitchContext+0xc8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80017c2:	7afb      	ldrb	r3, [r7, #11]
 80017c4:	f1c3 031f 	rsb	r3, r3, #31
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	4926      	ldr	r1, [pc, #152]	; (8001864 <vTaskSwitchContext+0xcc>)
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10c      	bne.n	80017f8 <vTaskSwitchContext+0x60>
        __asm volatile
 80017de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e2:	b672      	cpsid	i
 80017e4:	f383 8811 	msr	BASEPRI, r3
 80017e8:	f3bf 8f6f 	isb	sy
 80017ec:	f3bf 8f4f 	dsb	sy
 80017f0:	b662      	cpsie	i
 80017f2:	607b      	str	r3, [r7, #4]
    }
 80017f4:	bf00      	nop
 80017f6:	e7fe      	b.n	80017f6 <vTaskSwitchContext+0x5e>
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <vTaskSwitchContext+0xcc>)
 8001804:	4413      	add	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	3308      	adds	r3, #8
 800181a:	429a      	cmp	r2, r3
 800181c:	d104      	bne.n	8001828 <vTaskSwitchContext+0x90>
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <vTaskSwitchContext+0xd0>)
 8001830:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <vTaskSwitchContext+0xd0>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <vTaskSwitchContext+0xd4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d102      	bne.n	8001844 <vTaskSwitchContext+0xac>
 800183e:	f002 feb1 	bl	80045a4 <SEGGER_SYSVIEW_OnIdle>
}
 8001842:	e004      	b.n	800184e <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <vTaskSwitchContext+0xd0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f002 ff09 	bl	8004660 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	240001d8 	.word	0x240001d8
 800185c:	240001c4 	.word	0x240001c4
 8001860:	240001b8 	.word	0x240001b8
 8001864:	240000b4 	.word	0x240000b4
 8001868:	240000b0 	.word	0x240000b0
 800186c:	240001d4 	.word	0x240001d4

08001870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10c      	bne.n	800189a <vTaskPlaceOnEventList+0x2a>
        __asm volatile
 8001880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001884:	b672      	cpsid	i
 8001886:	f383 8811 	msr	BASEPRI, r3
 800188a:	f3bf 8f6f 	isb	sy
 800188e:	f3bf 8f4f 	dsb	sy
 8001892:	b662      	cpsie	i
 8001894:	60fb      	str	r3, [r7, #12]
    }
 8001896:	bf00      	nop
 8001898:	e7fe      	b.n	8001898 <vTaskPlaceOnEventList+0x28>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <vTaskPlaceOnEventList+0x48>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3318      	adds	r3, #24
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7fe ff97 	bl	80007d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018a8:	2101      	movs	r1, #1
 80018aa:	6838      	ldr	r0, [r7, #0]
 80018ac:	f000 fb72 	bl	8001f94 <prvAddCurrentTaskToDelayedList>
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	240000b0 	.word	0x240000b0

080018bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <xTaskRemoveFromEventList+0x30>
        __asm volatile
 80018d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d6:	b672      	cpsid	i
 80018d8:	f383 8811 	msr	BASEPRI, r3
 80018dc:	f3bf 8f6f 	isb	sy
 80018e0:	f3bf 8f4f 	dsb	sy
 80018e4:	b662      	cpsie	i
 80018e6:	60fb      	str	r3, [r7, #12]
    }
 80018e8:	bf00      	nop
 80018ea:	e7fe      	b.n	80018ea <xTaskRemoveFromEventList+0x2e>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	3318      	adds	r3, #24
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe ffa9 	bl	8000848 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <xTaskRemoveFromEventList+0xb8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d120      	bne.n	8001940 <xTaskRemoveFromEventList+0x84>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	3304      	adds	r3, #4
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe ffa0 	bl	8000848 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4618      	mov	r0, r3
 800190c:	f002 feea 	bl	80046e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	2201      	movs	r2, #1
 8001916:	409a      	lsls	r2, r3
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <xTaskRemoveFromEventList+0xbc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4313      	orrs	r3, r2
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <xTaskRemoveFromEventList+0xbc>)
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4a13      	ldr	r2, [pc, #76]	; (800197c <xTaskRemoveFromEventList+0xc0>)
 8001930:	441a      	add	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	3304      	adds	r3, #4
 8001936:	4619      	mov	r1, r3
 8001938:	4610      	mov	r0, r2
 800193a:	f7fe ff28 	bl	800078e <vListInsertEnd>
 800193e:	e005      	b.n	800194c <xTaskRemoveFromEventList+0x90>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	3318      	adds	r3, #24
 8001944:	4619      	mov	r1, r3
 8001946:	480e      	ldr	r0, [pc, #56]	; (8001980 <xTaskRemoveFromEventList+0xc4>)
 8001948:	f7fe ff21 	bl	800078e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <xTaskRemoveFromEventList+0xc8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	429a      	cmp	r2, r3
 8001958:	d905      	bls.n	8001966 <xTaskRemoveFromEventList+0xaa>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800195a:	2301      	movs	r3, #1
 800195c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <xTaskRemoveFromEventList+0xcc>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e001      	b.n	800196a <xTaskRemoveFromEventList+0xae>
    }
    else
    {
        xReturn = pdFALSE;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800196a:	697b      	ldr	r3, [r7, #20]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	240001d8 	.word	0x240001d8
 8001978:	240001b8 	.word	0x240001b8
 800197c:	240000b4 	.word	0x240000b4
 8001980:	24000170 	.word	0x24000170
 8001984:	240000b0 	.word	0x240000b0
 8001988:	240001c4 	.word	0x240001c4

0800198c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <vTaskInternalSetTimeOutState+0x24>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <vTaskInternalSetTimeOutState+0x28>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	605a      	str	r2, [r3, #4]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	240001c8 	.word	0x240001c8
 80019b4:	240001b4 	.word	0x240001b4

080019b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10c      	bne.n	80019e2 <xTaskCheckForTimeOut+0x2a>
        __asm volatile
 80019c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019cc:	b672      	cpsid	i
 80019ce:	f383 8811 	msr	BASEPRI, r3
 80019d2:	f3bf 8f6f 	isb	sy
 80019d6:	f3bf 8f4f 	dsb	sy
 80019da:	b662      	cpsie	i
 80019dc:	613b      	str	r3, [r7, #16]
    }
 80019de:	bf00      	nop
 80019e0:	e7fe      	b.n	80019e0 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10c      	bne.n	8001a02 <xTaskCheckForTimeOut+0x4a>
        __asm volatile
 80019e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ec:	b672      	cpsid	i
 80019ee:	f383 8811 	msr	BASEPRI, r3
 80019f2:	f3bf 8f6f 	isb	sy
 80019f6:	f3bf 8f4f 	dsb	sy
 80019fa:	b662      	cpsie	i
 80019fc:	60fb      	str	r3, [r7, #12]
    }
 80019fe:	bf00      	nop
 8001a00:	e7fe      	b.n	8001a00 <xTaskCheckForTimeOut+0x48>

    taskENTER_CRITICAL();
 8001a02:	f000 fc4d 	bl	80022a0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <xTaskCheckForTimeOut+0xcc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1e:	d102      	bne.n	8001a26 <xTaskCheckForTimeOut+0x6e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	e026      	b.n	8001a74 <xTaskCheckForTimeOut+0xbc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <xTaskCheckForTimeOut+0xd0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d00a      	beq.n	8001a48 <xTaskCheckForTimeOut+0x90>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d305      	bcc.n	8001a48 <xTaskCheckForTimeOut+0x90>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e015      	b.n	8001a74 <xTaskCheckForTimeOut+0xbc>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d20b      	bcs.n	8001a6a <xTaskCheckForTimeOut+0xb2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	1ad2      	subs	r2, r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff94 	bl	800198c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	e004      	b.n	8001a74 <xTaskCheckForTimeOut+0xbc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001a74:	f000 fc48 	bl	8002308 <vPortExitCritical>

    return xReturn;
 8001a78:	69fb      	ldr	r3, [r7, #28]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	240001b4 	.word	0x240001b4
 8001a88:	240001c8 	.word	0x240001c8

08001a8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <vTaskMissedYield+0x14>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	240001c4 	.word	0x240001c4

08001aa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001aac:	f000 f84c 	bl	8001b48 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <prvIdleTask+0x20>)
 8001ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	f3bf 8f4f 	dsb	sy
 8001abc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001ac0:	e7f4      	b.n	8001aac <prvIdleTask+0x8>
 8001ac2:	bf00      	nop
 8001ac4:	e000ed04 	.word	0xe000ed04

08001ac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	e00c      	b.n	8001aee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <prvInitialiseTaskLists+0x60>)
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fe26 	bl	8000734 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3301      	adds	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b06      	cmp	r3, #6
 8001af2:	d9ef      	bls.n	8001ad4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001af4:	480d      	ldr	r0, [pc, #52]	; (8001b2c <prvInitialiseTaskLists+0x64>)
 8001af6:	f7fe fe1d 	bl	8000734 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <prvInitialiseTaskLists+0x68>)
 8001afc:	f7fe fe1a 	bl	8000734 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <prvInitialiseTaskLists+0x6c>)
 8001b02:	f7fe fe17 	bl	8000734 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001b06:	480c      	ldr	r0, [pc, #48]	; (8001b38 <prvInitialiseTaskLists+0x70>)
 8001b08:	f7fe fe14 	bl	8000734 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001b0c:	480b      	ldr	r0, [pc, #44]	; (8001b3c <prvInitialiseTaskLists+0x74>)
 8001b0e:	f7fe fe11 	bl	8000734 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <prvInitialiseTaskLists+0x78>)
 8001b14:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <prvInitialiseTaskLists+0x64>)
 8001b16:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <prvInitialiseTaskLists+0x7c>)
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <prvInitialiseTaskLists+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	240000b4 	.word	0x240000b4
 8001b2c:	24000140 	.word	0x24000140
 8001b30:	24000154 	.word	0x24000154
 8001b34:	24000170 	.word	0x24000170
 8001b38:	24000184 	.word	0x24000184
 8001b3c:	2400019c 	.word	0x2400019c
 8001b40:	24000168 	.word	0x24000168
 8001b44:	2400016c 	.word	0x2400016c

08001b48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b4e:	e019      	b.n	8001b84 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001b50:	f000 fba6 	bl	80022a0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <prvCheckTasksWaitingTermination+0x50>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fe71 	bl	8000848 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <prvCheckTasksWaitingTermination+0x54>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <prvCheckTasksWaitingTermination+0x54>)
 8001b6e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <prvCheckTasksWaitingTermination+0x58>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <prvCheckTasksWaitingTermination+0x58>)
 8001b78:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001b7a:	f000 fbc5 	bl	8002308 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f810 	bl	8001ba4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <prvCheckTasksWaitingTermination+0x58>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e1      	bne.n	8001b50 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	24000184 	.word	0x24000184
 8001b9c:	240001b0 	.word	0x240001b0
 8001ba0:	24000198 	.word	0x24000198

08001ba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fd8f 	bl	80026d4 <vPortFree>
                vPortFree( pxTCB );
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fd8c 	bl	80026d4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <prvResetNextTaskUnblockTime+0x30>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d104      	bne.n	8001bdc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <prvResetNextTaskUnblockTime+0x34>)
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001bda:	e005      	b.n	8001be8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <prvResetNextTaskUnblockTime+0x30>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <prvResetNextTaskUnblockTime+0x34>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	24000168 	.word	0x24000168
 8001bf8:	240001d0 	.word	0x240001d0

08001bfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <xTaskGetSchedulerState+0x34>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	e008      	b.n	8001c22 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <xTaskGetSchedulerState+0x38>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	e001      	b.n	8001c22 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001c22:	687b      	ldr	r3, [r7, #4]
    }
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	240001bc 	.word	0x240001bc
 8001c34:	240001d8 	.word	0x240001d8

08001c38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d063      	beq.n	8001d16 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c52:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <xTaskPriorityInherit+0xe8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d253      	bcs.n	8001d04 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db06      	blt.n	8001c72 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <xTaskPriorityInherit+0xe8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	f1c3 0207 	rsb	r2, r3, #7
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	6959      	ldr	r1, [r3, #20]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <xTaskPriorityInherit+0xec>)
 8001c84:	4413      	add	r3, r2
 8001c86:	4299      	cmp	r1, r3
 8001c88:	d12f      	bne.n	8001cea <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fdda 	bl	8000848 <uxListRemove>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10a      	bne.n	8001cb0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <xTaskPriorityInherit+0xf0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4013      	ands	r3, r2
 8001cac:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <xTaskPriorityInherit+0xf0>)
 8001cae:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <xTaskPriorityInherit+0xe8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <xTaskPriorityInherit+0xf0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <xTaskPriorityInherit+0xf0>)
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <xTaskPriorityInherit+0xec>)
 8001cda:	441a      	add	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f7fe fd53 	bl	800078e <vListInsertEnd>
 8001ce8:	e004      	b.n	8001cf4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <xTaskPriorityInherit+0xe8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	2049      	movs	r0, #73	; 0x49
 8001cfa:	f001 ff71 	bl	8003be0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e008      	b.n	8001d16 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <xTaskPriorityInherit+0xe8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d201      	bcs.n	8001d16 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001d16:	68fb      	ldr	r3, [r7, #12]
    }
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	240000b0 	.word	0x240000b0
 8001d24:	240000b4 	.word	0x240000b4
 8001d28:	240001b8 	.word	0x240001b8

08001d2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d06c      	beq.n	8001e1c <xTaskPriorityDisinherit+0xf0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <xTaskPriorityDisinherit+0xfc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d00c      	beq.n	8001d66 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8001d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d50:	b672      	cpsid	i
 8001d52:	f383 8811 	msr	BASEPRI, r3
 8001d56:	f3bf 8f6f 	isb	sy
 8001d5a:	f3bf 8f4f 	dsb	sy
 8001d5e:	b662      	cpsie	i
 8001d60:	60fb      	str	r3, [r7, #12]
    }
 8001d62:	bf00      	nop
 8001d64:	e7fe      	b.n	8001d64 <xTaskPriorityDisinherit+0x38>
            configASSERT( pxTCB->uxMutexesHeld );
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <xTaskPriorityDisinherit+0x5c>
        __asm volatile
 8001d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d72:	b672      	cpsid	i
 8001d74:	f383 8811 	msr	BASEPRI, r3
 8001d78:	f3bf 8f6f 	isb	sy
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	b662      	cpsie	i
 8001d82:	60bb      	str	r3, [r7, #8]
    }
 8001d84:	bf00      	nop
 8001d86:	e7fe      	b.n	8001d86 <xTaskPriorityDisinherit+0x5a>
            ( pxTCB->uxMutexesHeld )--;
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8c:	1e5a      	subs	r2, r3, #1
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d03e      	beq.n	8001e1c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d13a      	bne.n	8001e1c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	3304      	adds	r3, #4
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fd4c 	bl	8000848 <uxListRemove>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10a      	bne.n	8001dcc <xTaskPriorityDisinherit+0xa0>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	2201      	movs	r2, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43da      	mvns	r2, r3
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <xTaskPriorityDisinherit+0x100>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <xTaskPriorityDisinherit+0x100>)
 8001dca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	204a      	movs	r0, #74	; 0x4a
 8001dd2:	f001 ff05 	bl	8003be0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f1c3 0207 	rsb	r2, r3, #7
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	2201      	movs	r2, #1
 8001df0:	409a      	lsls	r2, r3
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <xTaskPriorityDisinherit+0x100>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <xTaskPriorityDisinherit+0x100>)
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <xTaskPriorityDisinherit+0x104>)
 8001e0a:	441a      	add	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f7fe fcbb 	bl	800078e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e1c:	697b      	ldr	r3, [r7, #20]
    }
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	240000b0 	.word	0x240000b0
 8001e2c:	240001b8 	.word	0x240001b8
 8001e30:	240000b4 	.word	0x240000b4

08001e34 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001e42:	2301      	movs	r3, #1
 8001e44:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 8085 	beq.w	8001f58 <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <vTaskPriorityDisinheritAfterTimeout+0x3c>
        __asm volatile
 8001e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5a:	b672      	cpsid	i
 8001e5c:	f383 8811 	msr	BASEPRI, r3
 8001e60:	f3bf 8f6f 	isb	sy
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	b662      	cpsie	i
 8001e6a:	60fb      	str	r3, [r7, #12]
    }
 8001e6c:	bf00      	nop
 8001e6e:	e7fe      	b.n	8001e6e <vTaskPriorityDisinheritAfterTimeout+0x3a>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d902      	bls.n	8001e80 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e002      	b.n	8001e86 <vTaskPriorityDisinheritAfterTimeout+0x52>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d063      	beq.n	8001f58 <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d15e      	bne.n	8001f58 <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d10c      	bne.n	8001ebe <vTaskPriorityDisinheritAfterTimeout+0x8a>
        __asm volatile
 8001ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea8:	b672      	cpsid	i
 8001eaa:	f383 8811 	msr	BASEPRI, r3
 8001eae:	f3bf 8f6f 	isb	sy
 8001eb2:	f3bf 8f4f 	dsb	sy
 8001eb6:	b662      	cpsie	i
 8001eb8:	60bb      	str	r3, [r7, #8]
    }
 8001eba:	bf00      	nop
 8001ebc:	e7fe      	b.n	8001ebc <vTaskPriorityDisinheritAfterTimeout+0x88>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	204a      	movs	r0, #74	; 0x4a
 8001ec4:	f001 fe8c 	bl	8003be0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db04      	blt.n	8001ee6 <vTaskPriorityDisinheritAfterTimeout+0xb2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0207 	rsb	r2, r3, #7
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	6959      	ldr	r1, [r3, #20]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4299      	cmp	r1, r3
 8001efa:	d12d      	bne.n	8001f58 <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	3304      	adds	r3, #4
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fca1 	bl	8000848 <uxListRemove>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10a      	bne.n	8001f22 <vTaskPriorityDisinheritAfterTimeout+0xee>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	2201      	movs	r2, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8001f20:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f002 fbdd 	bl	80046e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	2201      	movs	r2, #1
 8001f30:	409a      	lsls	r2, r3
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8001f4a:	441a      	add	r2, r3
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f7fe fc1b 	bl	800078e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	240000b0 	.word	0x240000b0
 8001f64:	240000b4 	.word	0x240000b4
 8001f68:	240001b8 	.word	0x240001b8

08001f6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f7e:	3201      	adds	r2, #1
 8001f80:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 8001f82:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f84:	681b      	ldr	r3, [r3, #0]
    }
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	240000b0 	.word	0x240000b0

08001f94 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001f9e:	4b32      	ldr	r3, [pc, #200]	; (8002068 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fa4:	4b31      	ldr	r3, [pc, #196]	; (800206c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fc4c 	bl	8000848 <uxListRemove>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10b      	bne.n	8001fce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	4a29      	ldr	r2, [pc, #164]	; (8002070 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001fcc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d110      	bne.n	8001ff8 <prvAddCurrentTaskToDelayedList+0x64>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00d      	beq.n	8001ff8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	211b      	movs	r1, #27
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fbc0 	bl	8004768 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fe8:	4b20      	ldr	r3, [pc, #128]	; (800206c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3304      	adds	r3, #4
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4820      	ldr	r0, [pc, #128]	; (8002074 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001ff2:	f7fe fbcc 	bl	800078e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001ff6:	e032      	b.n	800205e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d20f      	bcs.n	8002030 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2104      	movs	r1, #4
 8002016:	4618      	mov	r0, r3
 8002018:	f002 fba6 	bl	8004768 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <prvAddCurrentTaskToDelayedList+0xe4>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3304      	adds	r3, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f7fe fbd4 	bl	80007d6 <vListInsert>
}
 800202e:	e016      	b.n	800205e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2104      	movs	r1, #4
 8002036:	4618      	mov	r0, r3
 8002038:	f002 fb96 	bl	8004768 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <prvAddCurrentTaskToDelayedList+0xe8>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3304      	adds	r3, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4610      	mov	r0, r2
 800204a:	f7fe fbc4 	bl	80007d6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <prvAddCurrentTaskToDelayedList+0xec>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	429a      	cmp	r2, r3
 8002056:	d202      	bcs.n	800205e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002058:	4a09      	ldr	r2, [pc, #36]	; (8002080 <prvAddCurrentTaskToDelayedList+0xec>)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	6013      	str	r3, [r2, #0]
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	240001b4 	.word	0x240001b4
 800206c:	240000b0 	.word	0x240000b0
 8002070:	240001b8 	.word	0x240001b8
 8002074:	2400019c 	.word	0x2400019c
 8002078:	2400016c 	.word	0x2400016c
 800207c:	24000168 	.word	0x24000168
 8002080:	240001d0 	.word	0x240001d0

08002084 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3b04      	subs	r3, #4
 8002094:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800209c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3b04      	subs	r3, #4
 80020a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f023 0201 	bic.w	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b04      	subs	r3, #4
 80020b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80020b4:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <pxPortInitialiseStack+0x64>)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3b14      	subs	r3, #20
 80020be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3b04      	subs	r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f06f 0202 	mvn.w	r2, #2
 80020d2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3b20      	subs	r3, #32
 80020d8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	080020ed 	.word	0x080020ed

080020ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <prvTaskExitError+0x5c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fe:	d00c      	beq.n	800211a <prvTaskExitError+0x2e>
        __asm volatile
 8002100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002104:	b672      	cpsid	i
 8002106:	f383 8811 	msr	BASEPRI, r3
 800210a:	f3bf 8f6f 	isb	sy
 800210e:	f3bf 8f4f 	dsb	sy
 8002112:	b662      	cpsie	i
 8002114:	60fb      	str	r3, [r7, #12]
    }
 8002116:	bf00      	nop
 8002118:	e7fe      	b.n	8002118 <prvTaskExitError+0x2c>
        __asm volatile
 800211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211e:	b672      	cpsid	i
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	b662      	cpsie	i
 800212e:	60bb      	str	r3, [r7, #8]
    }
 8002130:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002132:	bf00      	nop
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0fc      	beq.n	8002134 <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800213a:	bf00      	nop
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	24000004 	.word	0x24000004
 800214c:	00000000 	.word	0x00000000

08002150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <pxCurrentTCBConst2>)
 8002152:	6819      	ldr	r1, [r3, #0]
 8002154:	6808      	ldr	r0, [r1, #0]
 8002156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800215a:	f380 8809 	msr	PSP, r0
 800215e:	f3bf 8f6f 	isb	sy
 8002162:	f04f 0000 	mov.w	r0, #0
 8002166:	f380 8811 	msr	BASEPRI, r0
 800216a:	4770      	bx	lr
 800216c:	f3af 8000 	nop.w

08002170 <pxCurrentTCBConst2>:
 8002170:	240000b0 	.word	0x240000b0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop

08002178 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002178:	4808      	ldr	r0, [pc, #32]	; (800219c <prvPortStartFirstTask+0x24>)
 800217a:	6800      	ldr	r0, [r0, #0]
 800217c:	6800      	ldr	r0, [r0, #0]
 800217e:	f380 8808 	msr	MSP, r0
 8002182:	f04f 0000 	mov.w	r0, #0
 8002186:	f380 8814 	msr	CONTROL, r0
 800218a:	b662      	cpsie	i
 800218c:	b661      	cpsie	f
 800218e:	f3bf 8f4f 	dsb	sy
 8002192:	f3bf 8f6f 	isb	sy
 8002196:	df00      	svc	0
 8002198:	bf00      	nop
 800219a:	0000      	.short	0x0000
 800219c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop

080021a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <xPortStartScheduler+0xe4>)
 80021ac:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	22ff      	movs	r2, #255	; 0xff
 80021ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b2f      	ldr	r3, [pc, #188]	; (800228c <xPortStartScheduler+0xe8>)
 80021d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <xPortStartScheduler+0xec>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021d8:	e009      	b.n	80021ee <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <xPortStartScheduler+0xec>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3b01      	subs	r3, #1
 80021e0:	4a2b      	ldr	r2, [pc, #172]	; (8002290 <xPortStartScheduler+0xec>)
 80021e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f6:	2b80      	cmp	r3, #128	; 0x80
 80021f8:	d0ef      	beq.n	80021da <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <xPortStartScheduler+0xec>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	d00c      	beq.n	8002220 <xPortStartScheduler+0x7c>
        __asm volatile
 8002206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220a:	b672      	cpsid	i
 800220c:	f383 8811 	msr	BASEPRI, r3
 8002210:	f3bf 8f6f 	isb	sy
 8002214:	f3bf 8f4f 	dsb	sy
 8002218:	b662      	cpsie	i
 800221a:	60bb      	str	r3, [r7, #8]
    }
 800221c:	bf00      	nop
 800221e:	e7fe      	b.n	800221e <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <xPortStartScheduler+0xec>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <xPortStartScheduler+0xec>)
 8002228:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <xPortStartScheduler+0xec>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002232:	4a17      	ldr	r2, [pc, #92]	; (8002290 <xPortStartScheduler+0xec>)
 8002234:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <xPortStartScheduler+0xf0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a14      	ldr	r2, [pc, #80]	; (8002294 <xPortStartScheduler+0xf0>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002248:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <xPortStartScheduler+0xf0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a11      	ldr	r2, [pc, #68]	; (8002294 <xPortStartScheduler+0xf0>)
 8002250:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002254:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002256:	f000 f8e3 	bl	8002420 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <xPortStartScheduler+0xf4>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002260:	f000 f902 	bl	8002468 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <xPortStartScheduler+0xf8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0c      	ldr	r2, [pc, #48]	; (800229c <xPortStartScheduler+0xf8>)
 800226a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800226e:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002270:	f7ff ff82 	bl	8002178 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002274:	f7ff fa90 	bl	8001798 <vTaskSwitchContext>
    prvTaskExitError();
 8002278:	f7ff ff38 	bl	80020ec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000e400 	.word	0xe000e400
 800228c:	240001dc 	.word	0x240001dc
 8002290:	240001e0 	.word	0x240001e0
 8002294:	e000ed20 	.word	0xe000ed20
 8002298:	24000004 	.word	0x24000004
 800229c:	e000ef34 	.word	0xe000ef34

080022a0 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
        __asm volatile
 80022a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022aa:	b672      	cpsid	i
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	b662      	cpsie	i
 80022ba:	607b      	str	r3, [r7, #4]
    }
 80022bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <vPortEnterCritical+0x60>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <vPortEnterCritical+0x60>)
 80022c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <vPortEnterCritical+0x60>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d111      	bne.n	80022f4 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <vPortEnterCritical+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00c      	beq.n	80022f4 <vPortEnterCritical+0x54>
        __asm volatile
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	b672      	cpsid	i
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	b662      	cpsie	i
 80022ee:	603b      	str	r3, [r7, #0]
    }
 80022f0:	bf00      	nop
 80022f2:	e7fe      	b.n	80022f2 <vPortEnterCritical+0x52>
    }
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	24000004 	.word	0x24000004
 8002304:	e000ed04 	.word	0xe000ed04

08002308 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <vPortExitCritical+0x54>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <vPortExitCritical+0x28>
        __asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	b672      	cpsid	i
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	b662      	cpsie	i
 800232a:	607b      	str	r3, [r7, #4]
    }
 800232c:	bf00      	nop
 800232e:	e7fe      	b.n	800232e <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <vPortExitCritical+0x54>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3b01      	subs	r3, #1
 8002336:	4a09      	ldr	r2, [pc, #36]	; (800235c <vPortExitCritical+0x54>)
 8002338:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <vPortExitCritical+0x54>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <vPortExitCritical+0x46>
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800234c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	24000004 	.word	0x24000004

08002360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002360:	f3ef 8009 	mrs	r0, PSP
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <pxCurrentTCBConst>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	f01e 0f10 	tst.w	lr, #16
 8002370:	bf08      	it	eq
 8002372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800237a:	6010      	str	r0, [r2, #0]
 800237c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002384:	b672      	cpsid	i
 8002386:	f380 8811 	msr	BASEPRI, r0
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	b662      	cpsie	i
 8002394:	f7ff fa00 	bl	8001798 <vTaskSwitchContext>
 8002398:	f04f 0000 	mov.w	r0, #0
 800239c:	f380 8811 	msr	BASEPRI, r0
 80023a0:	bc09      	pop	{r0, r3}
 80023a2:	6819      	ldr	r1, [r3, #0]
 80023a4:	6808      	ldr	r0, [r1, #0]
 80023a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023aa:	f01e 0f10 	tst.w	lr, #16
 80023ae:	bf08      	it	eq
 80023b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80023b4:	f380 8809 	msr	PSP, r0
 80023b8:	f3bf 8f6f 	isb	sy
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop

080023c0 <pxCurrentTCBConst>:
 80023c0:	240000b0 	.word	0x240000b0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop

080023c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
        __asm volatile
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	b672      	cpsid	i
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	b662      	cpsie	i
 80023e2:	607b      	str	r3, [r7, #4]
    }
 80023e4:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80023e6:	f002 f863 	bl	80044b0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80023ea:	f7ff f939 	bl	8001660 <xTaskIncrementTick>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80023f4:	f002 f8ba 	bl	800456c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <SysTick_Handler+0x54>)
 80023fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e001      	b.n	8002406 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8002402:	f002 f897 	bl	8004534 <SEGGER_SYSVIEW_RecordExitISR>
 8002406:	2300      	movs	r3, #0
 8002408:	603b      	str	r3, [r7, #0]
        __asm volatile
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f383 8811 	msr	BASEPRI, r3
    }
 8002410:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	e000ed04 	.word	0xe000ed04

08002420 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <vPortSetupTimerInterrupt+0x34>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <vPortSetupTimerInterrupt+0x38>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <vPortSetupTimerInterrupt+0x3c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <vPortSetupTimerInterrupt+0x40>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	099b      	lsrs	r3, r3, #6
 800243c:	4a09      	ldr	r2, [pc, #36]	; (8002464 <vPortSetupTimerInterrupt+0x44>)
 800243e:	3b01      	subs	r3, #1
 8002440:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <vPortSetupTimerInterrupt+0x34>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010
 8002458:	e000e018 	.word	0xe000e018
 800245c:	24000020 	.word	0x24000020
 8002460:	10624dd3 	.word	0x10624dd3
 8002464:	e000e014 	.word	0xe000e014

08002468 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002468:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002478 <vPortEnableVFP+0x10>
 800246c:	6801      	ldr	r1, [r0, #0]
 800246e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002472:	6001      	str	r1, [r0, #0]
 8002474:	4770      	bx	lr
 8002476:	0000      	.short	0x0000
 8002478:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop

08002480 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002486:	f3ef 8305 	mrs	r3, IPSR
 800248a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	d916      	bls.n	80024c0 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002492:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <vPortValidateInterruptPriority+0x78>)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <vPortValidateInterruptPriority+0x7c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	7afa      	ldrb	r2, [r7, #11]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d20c      	bcs.n	80024c0 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	b672      	cpsid	i
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	b662      	cpsie	i
 80024ba:	607b      	str	r3, [r7, #4]
    }
 80024bc:	bf00      	nop
 80024be:	e7fe      	b.n	80024be <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <vPortValidateInterruptPriority+0x80>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <vPortValidateInterruptPriority+0x84>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d90c      	bls.n	80024ea <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	b672      	cpsid	i
 80024d6:	f383 8811 	msr	BASEPRI, r3
 80024da:	f3bf 8f6f 	isb	sy
 80024de:	f3bf 8f4f 	dsb	sy
 80024e2:	b662      	cpsie	i
 80024e4:	603b      	str	r3, [r7, #0]
    }
 80024e6:	bf00      	nop
 80024e8:	e7fe      	b.n	80024e8 <vPortValidateInterruptPriority+0x68>
    }
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000e3f0 	.word	0xe000e3f0
 80024fc:	240001dc 	.word	0x240001dc
 8002500:	e000ed0c 	.word	0xe000ed0c
 8002504:	240001e0 	.word	0x240001e0

08002508 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002514:	f7fe fff0 	bl	80014f8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <pvPortMalloc+0x1b4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002520:	f000 f93e 	bl	80027a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002524:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <pvPortMalloc+0x1b8>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 80ab 	bne.w	8002688 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d02f      	beq.n	8002598 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002538:	2208      	movs	r2, #8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d229      	bcs.n	8002598 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 8002544:	2208      	movs	r2, #8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	2b00      	cmp	r3, #0
 8002554:	d023      	beq.n	800259e <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f023 0307 	bic.w	r3, r3, #7
 800255c:	3308      	adds	r3, #8
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	429a      	cmp	r2, r3
 8002562:	d216      	bcs.n	8002592 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f023 0307 	bic.w	r3, r3, #7
 800256a:	3308      	adds	r3, #8
 800256c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	2b00      	cmp	r3, #0
 8002576:	d012      	beq.n	800259e <pvPortMalloc+0x96>
        __asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	b672      	cpsid	i
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	b662      	cpsie	i
 800258c:	617b      	str	r3, [r7, #20]
    }
 800258e:	bf00      	nop
 8002590:	e7fe      	b.n	8002590 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002596:	e002      	b.n	800259e <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	e000      	b.n	80025a0 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800259e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d070      	beq.n	8002688 <pvPortMalloc+0x180>
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <pvPortMalloc+0x1bc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d86b      	bhi.n	8002688 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80025b0:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <pvPortMalloc+0x1c0>)
 80025b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80025b4:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <pvPortMalloc+0x1c0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025ba:	e004      	b.n	80025c6 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d903      	bls.n	80025d8 <pvPortMalloc+0xd0>
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f1      	bne.n	80025bc <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80025d8:	4b38      	ldr	r3, [pc, #224]	; (80026bc <pvPortMalloc+0x1b4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	429a      	cmp	r2, r3
 80025e0:	d052      	beq.n	8002688 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2208      	movs	r2, #8
 80025e8:	4413      	add	r3, r2
 80025ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	1ad2      	subs	r2, r2, r3
 80025fc:	2308      	movs	r3, #8
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	429a      	cmp	r2, r3
 8002602:	d921      	bls.n	8002648 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <pvPortMalloc+0x128>
        __asm volatile
 8002616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261a:	b672      	cpsid	i
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	b662      	cpsie	i
 800262a:	613b      	str	r3, [r7, #16]
    }
 800262c:	bf00      	nop
 800262e:	e7fe      	b.n	800262e <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad2      	subs	r2, r2, r3
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002642:	69b8      	ldr	r0, [r7, #24]
 8002644:	f000 f90e 	bl	8002864 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002648:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <pvPortMalloc+0x1bc>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <pvPortMalloc+0x1bc>)
 8002654:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <pvPortMalloc+0x1bc>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <pvPortMalloc+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d203      	bcs.n	800266a <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002662:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <pvPortMalloc+0x1bc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a19      	ldr	r2, [pc, #100]	; (80026cc <pvPortMalloc+0x1c4>)
 8002668:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <pvPortMalloc+0x1b8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	431a      	orrs	r2, r3
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <pvPortMalloc+0x1c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3301      	adds	r3, #1
 8002684:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <pvPortMalloc+0x1c8>)
 8002686:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002688:	f7fe ff44 	bl	8001514 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00c      	beq.n	80026b0 <pvPortMalloc+0x1a8>
        __asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	b672      	cpsid	i
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	b662      	cpsie	i
 80026aa:	60fb      	str	r3, [r7, #12]
    }
 80026ac:	bf00      	nop
 80026ae:	e7fe      	b.n	80026ae <pvPortMalloc+0x1a6>
    return pvReturn;
 80026b0:	69fb      	ldr	r3, [r7, #28]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3728      	adds	r7, #40	; 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	240015ec 	.word	0x240015ec
 80026c0:	24001600 	.word	0x24001600
 80026c4:	240015f0 	.word	0x240015f0
 80026c8:	240015e4 	.word	0x240015e4
 80026cc:	240015f4 	.word	0x240015f4
 80026d0:	240015f8 	.word	0x240015f8

080026d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d051      	beq.n	800278a <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80026e6:	2308      	movs	r3, #8
 80026e8:	425b      	negs	r3, r3
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4413      	add	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4b26      	ldr	r3, [pc, #152]	; (8002794 <vPortFree+0xc0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <vPortFree+0x48>
        __asm volatile
 8002702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002706:	b672      	cpsid	i
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	b662      	cpsie	i
 8002716:	60fb      	str	r3, [r7, #12]
    }
 8002718:	bf00      	nop
 800271a:	e7fe      	b.n	800271a <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00c      	beq.n	800273e <vPortFree+0x6a>
        __asm volatile
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	b672      	cpsid	i
 800272a:	f383 8811 	msr	BASEPRI, r3
 800272e:	f3bf 8f6f 	isb	sy
 8002732:	f3bf 8f4f 	dsb	sy
 8002736:	b662      	cpsie	i
 8002738:	60bb      	str	r3, [r7, #8]
    }
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <vPortFree+0xc0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01e      	beq.n	800278a <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d11a      	bne.n	800278a <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <vPortFree+0xc0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	43db      	mvns	r3, r3
 800275e:	401a      	ands	r2, r3
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002764:	f7fe fec8 	bl	80014f8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <vPortFree+0xc4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4413      	add	r3, r2
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <vPortFree+0xc4>)
 8002774:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002776:	6938      	ldr	r0, [r7, #16]
 8002778:	f000 f874 	bl	8002864 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <vPortFree+0xc8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	4a06      	ldr	r2, [pc, #24]	; (800279c <vPortFree+0xc8>)
 8002784:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002786:	f7fe fec5 	bl	8001514 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	24001600 	.word	0x24001600
 8002798:	240015f0 	.word	0x240015f0
 800279c:	240015fc 	.word	0x240015fc

080027a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <prvHeapInit+0xac>)
 80027ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3307      	adds	r3, #7
 80027be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0307 	bic.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	4a1f      	ldr	r2, [pc, #124]	; (800284c <prvHeapInit+0xac>)
 80027d0:	4413      	add	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <prvHeapInit+0xb0>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80027de:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <prvHeapInit+0xb0>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	4413      	add	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80027ec:	2208      	movs	r2, #8
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0307 	bic.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a15      	ldr	r2, [pc, #84]	; (8002854 <prvHeapInit+0xb4>)
 8002800:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <prvHeapInit+0xb4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <prvHeapInit+0xb4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	1ad2      	subs	r2, r2, r3
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <prvHeapInit+0xb4>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <prvHeapInit+0xb8>)
 800282e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a09      	ldr	r2, [pc, #36]	; (800285c <prvHeapInit+0xbc>)
 8002836:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <prvHeapInit+0xc0>)
 800283a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800283e:	601a      	str	r2, [r3, #0]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	240001e4 	.word	0x240001e4
 8002850:	240015e4 	.word	0x240015e4
 8002854:	240015ec 	.word	0x240015ec
 8002858:	240015f4 	.word	0x240015f4
 800285c:	240015f0 	.word	0x240015f0
 8002860:	24001600 	.word	0x24001600

08002864 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800286c:	4b28      	ldr	r3, [pc, #160]	; (8002910 <prvInsertBlockIntoFreeList+0xac>)
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e002      	b.n	8002878 <prvInsertBlockIntoFreeList+0x14>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	429a      	cmp	r2, r3
 8002880:	d8f7      	bhi.n	8002872 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	4413      	add	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	d108      	bne.n	80028a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	441a      	add	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	441a      	add	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d118      	bne.n	80028ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <prvInsertBlockIntoFreeList+0xb0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d00d      	beq.n	80028e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	441a      	add	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e008      	b.n	80028f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <prvInsertBlockIntoFreeList+0xb0>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e003      	b.n	80028f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d002      	beq.n	8002902 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	240015e4 	.word	0x240015e4
 8002914:	240015ec 	.word	0x240015ec

08002918 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800291c:	4803      	ldr	r0, [pc, #12]	; (800292c <_cbSendSystemDesc+0x14>)
 800291e:	f001 fd71 	bl	8004404 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002922:	4803      	ldr	r0, [pc, #12]	; (8002930 <_cbSendSystemDesc+0x18>)
 8002924:	f001 fd6e 	bl	8004404 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}
 800292c:	0800d740 	.word	0x0800d740
 8002930:	0800d770 	.word	0x0800d770

08002934 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <SEGGER_SYSVIEW_Conf+0x20>)
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <SEGGER_SYSVIEW_Conf+0x20>)
 800293e:	6819      	ldr	r1, [r3, #0]
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <SEGGER_SYSVIEW_Conf+0x24>)
 8002942:	4a06      	ldr	r2, [pc, #24]	; (800295c <SEGGER_SYSVIEW_Conf+0x28>)
 8002944:	f001 f8d8 	bl	8003af8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002948:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 800294c:	f001 f91a 	bl	8003b84 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}
 8002954:	24000020 	.word	0x24000020
 8002958:	08002919 	.word	0x08002919
 800295c:	0800d97c 	.word	0x0800d97c

08002960 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002962:	b085      	sub	sp, #20
 8002964:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	e033      	b.n	80029d4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800296c:	491e      	ldr	r1, [pc, #120]	; (80029e8 <_cbSendTaskList+0x88>)
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	491a      	ldr	r1, [pc, #104]	; (80029e8 <_cbSendTaskList+0x88>)
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	3304      	adds	r3, #4
 800298c:	6819      	ldr	r1, [r3, #0]
 800298e:	4c16      	ldr	r4, [pc, #88]	; (80029e8 <_cbSendTaskList+0x88>)
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4423      	add	r3, r4
 800299c:	3308      	adds	r3, #8
 800299e:	681c      	ldr	r4, [r3, #0]
 80029a0:	4d11      	ldr	r5, [pc, #68]	; (80029e8 <_cbSendTaskList+0x88>)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	442b      	add	r3, r5
 80029ae:	330c      	adds	r3, #12
 80029b0:	681d      	ldr	r5, [r3, #0]
 80029b2:	4e0d      	ldr	r6, [pc, #52]	; (80029e8 <_cbSendTaskList+0x88>)
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4433      	add	r3, r6
 80029c0:	3310      	adds	r3, #16
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	462b      	mov	r3, r5
 80029c8:	4622      	mov	r2, r4
 80029ca:	f000 f8bd 	bl	8002b48 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3301      	adds	r3, #1
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <_cbSendTaskList+0x8c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d3c6      	bcc.n	800296c <_cbSendTaskList+0xc>
  }
}
 80029de:	bf00      	nop
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e8:	24001604 	.word	0x24001604
 80029ec:	240016a4 	.word	0x240016a4

080029f0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80029f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80029f8:	f7fe fe20 	bl	800163c <xTaskGetTickCountFromISR>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2200      	movs	r2, #0
 8002a00:	469a      	mov	sl, r3
 8002a02:	4693      	mov	fp, r2
 8002a04:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	f04f 0a00 	mov.w	sl, #0
 8002a14:	f04f 0b00 	mov.w	fp, #0
 8002a18:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002a1c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002a20:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002a24:	4652      	mov	r2, sl
 8002a26:	465b      	mov	r3, fp
 8002a28:	1a14      	subs	r4, r2, r0
 8002a2a:	eb63 0501 	sbc.w	r5, r3, r1
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	00ab      	lsls	r3, r5, #2
 8002a38:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002a3c:	00a2      	lsls	r2, r4, #2
 8002a3e:	4614      	mov	r4, r2
 8002a40:	461d      	mov	r5, r3
 8002a42:	eb14 0800 	adds.w	r8, r4, r0
 8002a46:	eb45 0901 	adc.w	r9, r5, r1
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a5e:	4690      	mov	r8, r2
 8002a60:	4699      	mov	r9, r3
 8002a62:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002a66:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002a78 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002a86:	2205      	movs	r2, #5
 8002a88:	492b      	ldr	r1, [pc, #172]	; (8002b38 <SYSVIEW_AddTask+0xc0>)
 8002a8a:	68b8      	ldr	r0, [r7, #8]
 8002a8c:	f00a f9b4 	bl	800cdf8 <memcmp>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d04b      	beq.n	8002b2e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002a96:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <SYSVIEW_AddTask+0xc4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b07      	cmp	r3, #7
 8002a9c:	d903      	bls.n	8002aa6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002a9e:	4828      	ldr	r0, [pc, #160]	; (8002b40 <SYSVIEW_AddTask+0xc8>)
 8002aa0:	f001 ffae 	bl	8004a00 <SEGGER_SYSVIEW_Warn>
    return;
 8002aa4:	e044      	b.n	8002b30 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002aa6:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <SYSVIEW_AddTask+0xc4>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4926      	ldr	r1, [pc, #152]	; (8002b44 <SYSVIEW_AddTask+0xcc>)
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <SYSVIEW_AddTask+0xc4>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4921      	ldr	r1, [pc, #132]	; (8002b44 <SYSVIEW_AddTask+0xcc>)
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3304      	adds	r3, #4
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <SYSVIEW_AddTask+0xc4>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	491b      	ldr	r1, [pc, #108]	; (8002b44 <SYSVIEW_AddTask+0xcc>)
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <SYSVIEW_AddTask+0xc4>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4916      	ldr	r1, [pc, #88]	; (8002b44 <SYSVIEW_AddTask+0xcc>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	330c      	adds	r3, #12
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <SYSVIEW_AddTask+0xc4>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4910      	ldr	r1, [pc, #64]	; (8002b44 <SYSVIEW_AddTask+0xcc>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3310      	adds	r3, #16
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <SYSVIEW_AddTask+0xc4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3301      	adds	r3, #1
 8002b18:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <SYSVIEW_AddTask+0xc4>)
 8002b1a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f80e 	bl	8002b48 <SYSVIEW_SendTaskInfo>
 8002b2c:	e000      	b.n	8002b30 <SYSVIEW_AddTask+0xb8>
    return;
 8002b2e:	bf00      	nop

}
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	0800d780 	.word	0x0800d780
 8002b3c:	240016a4 	.word	0x240016a4
 8002b40:	0800d788 	.word	0x0800d788
 8002b44:	24001604 	.word	0x24001604

08002b48 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002b56:	f107 0314 	add.w	r3, r7, #20
 8002b5a:	2214      	movs	r2, #20
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f00a f968 	bl	800ce34 <memset>
  TaskInfo.TaskID     = TaskID;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 fb49 	bl	8004214 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002b82:	bf00      	nop
 8002b84:	3728      	adds	r7, #40	; 0x28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	db0b      	blt.n	8002bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <__NVIC_EnableIRQ+0x38>)
 8002ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2001      	movs	r0, #1
 8002bae:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000e100 	.word	0xe000e100

08002bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	6039      	str	r1, [r7, #0]
 8002bd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	db0a      	blt.n	8002bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	490c      	ldr	r1, [pc, #48]	; (8002c14 <__NVIC_SetPriority+0x4c>)
 8002be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be6:	0112      	lsls	r2, r2, #4
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	440b      	add	r3, r1
 8002bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf0:	e00a      	b.n	8002c08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4908      	ldr	r1, [pc, #32]	; (8002c18 <__NVIC_SetPriority+0x50>)
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	3b04      	subs	r3, #4
 8002c00:	0112      	lsls	r2, r2, #4
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	440b      	add	r3, r1
 8002c06:	761a      	strb	r2, [r3, #24]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000e100 	.word	0xe000e100
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8002c22:	f001 ff49 	bl	8004ab8 <SEGGER_SYSVIEW_IsStarted>
 8002c26:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8002c2e:	f001 f975 	bl	8003f1c <SEGGER_SYSVIEW_Start>
  }
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <_cbOnUARTRx+0x3c>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d806      	bhi.n	8002c5c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <_cbOnUARTRx+0x3c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <_cbOnUARTRx+0x3c>)
 8002c58:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002c5a:	e009      	b.n	8002c70 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002c5c:	f7ff ffde 	bl	8002c1c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <_cbOnUARTRx+0x3c>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4618      	mov	r0, r3
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f000 fb9e 	bl	80033ac <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002c70:	bf00      	nop
}
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	24000008 	.word	0x24000008

08002c7c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <_cbOnUARTTx+0x5c>)
 8002c86:	785b      	ldrb	r3, [r3, #1]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d80f      	bhi.n	8002cac <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <_cbOnUARTTx+0x5c>)
 8002c8e:	785b      	ldrb	r3, [r3, #1]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <_cbOnUARTTx+0x60>)
 8002c94:	5c9a      	ldrb	r2, [r3, r2]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <_cbOnUARTTx+0x5c>)
 8002c9c:	785b      	ldrb	r3, [r3, #1]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <_cbOnUARTTx+0x5c>)
 8002ca4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8002caa:	e00f      	b.n	8002ccc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <_cbOnUARTTx+0x5c>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fa1d 	bl	80030f4 <SEGGER_RTT_ReadUpBufferNoLock>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da02      	bge.n	8002cca <_cbOnUARTTx+0x4e>
    r = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e000      	b.n	8002ccc <_cbOnUARTTx+0x50>
  }
Done:
 8002cca:	bf00      	nop
  return r;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	24000008 	.word	0x24000008
 8002cdc:	0800d984 	.word	0x0800d984

08002ce0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <SEGGER_UART_init+0x1c>)
 8002cea:	4905      	ldr	r1, [pc, #20]	; (8002d00 <SEGGER_UART_init+0x20>)
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f865 	bl	8002dbc <HIF_UART_Init>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	08002c3d 	.word	0x08002c3d
 8002d00:	08002c7d 	.word	0x08002c7d

08002d04 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <USART2_IRQHandler+0x80>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d011      	beq.n	8002d3e <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <USART2_IRQHandler+0x84>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 030b 	and.w	r3, r3, #11
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d108      	bne.n	8002d3e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <USART2_IRQHandler+0x88>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d004      	beq.n	8002d3e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002d34:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <USART2_IRQHandler+0x88>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	79fa      	ldrb	r2, [r7, #7]
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01a      	beq.n	8002d7e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <USART2_IRQHandler+0x8c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <USART2_IRQHandler+0x8c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	1dfa      	adds	r2, r7, #7
 8002d56:	4610      	mov	r0, r2
 8002d58:	4798      	blx	r3
 8002d5a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002d62:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <USART2_IRQHandler+0x90>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <USART2_IRQHandler+0x90>)
 8002d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e006      	b.n	8002d7e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <USART2_IRQHandler+0x80>)
 8002d72:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8002d74:	79fa      	ldrb	r2, [r7, #7]
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <USART2_IRQHandler+0x94>)
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e000      	b.n	8002d7e <USART2_IRQHandler+0x7a>
      return;
 8002d7c:	bf00      	nop
    }
  }
}
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	4000441c 	.word	0x4000441c
 8002d88:	40004424 	.word	0x40004424
 8002d8c:	240016a8 	.word	0x240016a8
 8002d90:	240016ac 	.word	0x240016ac
 8002d94:	40004400 	.word	0x40004400
 8002d98:	40004428 	.word	0x40004428

08002d9c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40004400 	.word	0x40004400

08002dbc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8002dc8:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <HIF_UART_Init+0xc8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <HIF_UART_Init+0xc8>)
 8002dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd2:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <HIF_UART_Init+0xcc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2b      	ldr	r2, [pc, #172]	; (8002e88 <HIF_UART_Init+0xcc>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8002de0:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <HIF_UART_Init+0xd0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dec:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8002df4:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8002df6:	4a25      	ldr	r2, [pc, #148]	; (8002e8c <HIF_UART_Init+0xd0>)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <HIF_UART_Init+0xd4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e08:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002e10:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8002e12:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <HIF_UART_Init+0xd4>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8002e18:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <HIF_UART_Init+0xd8>)
 8002e1a:	f248 022d 	movw	r2, #32813	; 0x802d
 8002e1e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8002e20:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <HIF_UART_Init+0xdc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HIF_UART_Init+0xe0>)
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8002e32:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <HIF_UART_Init+0xe4>)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4a:	d302      	bcc.n	8002e52 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002e4c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002e50:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <HIF_UART_Init+0xe8>)
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8002e62:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HIF_UART_Init+0xec>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8002e68:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HIF_UART_Init+0xf0>)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8002e6e:	2106      	movs	r1, #6
 8002e70:	2026      	movs	r0, #38	; 0x26
 8002e72:	f7ff fea9 	bl	8002bc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8002e76:	2026      	movs	r0, #38	; 0x26
 8002e78:	f7ff fe88 	bl	8002b8c <__NVIC_EnableIRQ>
}
 8002e7c:	bf00      	nop
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	580244e8 	.word	0x580244e8
 8002e88:	580244e0 	.word	0x580244e0
 8002e8c:	58020020 	.word	0x58020020
 8002e90:	58020000 	.word	0x58020000
 8002e94:	40004400 	.word	0x40004400
 8002e98:	40004404 	.word	0x40004404
 8002e9c:	40004408 	.word	0x40004408
 8002ea0:	0e4e1c00 	.word	0x0e4e1c00
 8002ea4:	4000440c 	.word	0x4000440c
 8002ea8:	240016a8 	.word	0x240016a8
 8002eac:	240016ac 	.word	0x240016ac

08002eb0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <_DoInit+0xa0>)
 8002eb8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8002eba:	22a8      	movs	r2, #168	; 0xa8
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	6838      	ldr	r0, [r7, #0]
 8002ec0:	f009 ffb8 	bl	800ce34 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2203      	movs	r2, #3
 8002ece:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4a20      	ldr	r2, [pc, #128]	; (8002f54 <_DoInit+0xa4>)
 8002ed4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	4a1f      	ldr	r2, [pc, #124]	; (8002f58 <_DoInit+0xa8>)
 8002eda:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2200      	movs	r2, #0
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	4a16      	ldr	r2, [pc, #88]	; (8002f54 <_DoInit+0xa4>)
 8002efa:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <_DoInit+0xac>)
 8002f00:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2210      	movs	r2, #16
 8002f06:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002f1a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	e00c      	b.n	8002f3e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f1c3 030f 	rsb	r3, r3, #15
 8002f2a:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <_DoInit+0xb0>)
 8002f2c:	5cd1      	ldrb	r1, [r2, r3]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	460a      	mov	r2, r1
 8002f36:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b0f      	cmp	r3, #15
 8002f42:	d9ef      	bls.n	8002f24 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002f44:	f3bf 8f5f 	dmb	sy
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	240016b0 	.word	0x240016b0
 8002f54:	0800d7d8 	.word	0x0800d7d8
 8002f58:	24001758 	.word	0x24001758
 8002f5c:	24001b58 	.word	0x24001b58
 8002f60:	0800d988 	.word	0x0800d988

08002f64 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d905      	bls.n	8002f94 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	e007      	b.n	8002fa4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	69b9      	ldr	r1, [r7, #24]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	1acb      	subs	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	bf28      	it	cs
 8002fb2:	4613      	movcs	r3, r2
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	bf28      	it	cs
 8002fbe:	4613      	movcs	r3, r2
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	4413      	add	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8002fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	6978      	ldr	r0, [r7, #20]
 8002fd2:	f009 ff21 	bl	800ce18 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002fd6:	6a3a      	ldr	r2, [r7, #32]
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	4413      	add	r3, r2
 8002fdc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	4413      	add	r3, r2
 8002fe4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	4413      	add	r3, r2
 8002ff4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d101      	bne.n	8003004 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003000:	2300      	movs	r3, #0
 8003002:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003004:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1b2      	bne.n	8002f7a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003014:	6a3b      	ldr	r3, [r7, #32]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3728      	adds	r7, #40	; 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800301e:	b580      	push	{r7, lr}
 8003020:	b088      	sub	sp, #32
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	429a      	cmp	r2, r3
 8003040:	d911      	bls.n	8003066 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	4413      	add	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	6938      	ldr	r0, [r7, #16]
 8003052:	f009 fee1 	bl	800ce18 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003056:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	441a      	add	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003064:	e01f      	b.n	80030a6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	6938      	ldr	r0, [r7, #16]
 800307a:	f009 fecd 	bl	800ce18 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4413      	add	r3, r2
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4619      	mov	r1, r3
 8003096:	6938      	ldr	r0, [r7, #16]
 8003098:	f009 febe 	bl	800ce18 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800309c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	60da      	str	r2, [r3, #12]
}
 80030a6:	bf00      	nop
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80030ae:	b480      	push	{r7}
 80030b0:	b087      	sub	sp, #28
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d808      	bhi.n	80030dc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad2      	subs	r2, r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	3b01      	subs	r3, #1
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e004      	b.n	80030e6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80030e6:	697b      	ldr	r3, [r7, #20]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08c      	sub	sp, #48	; 0x30
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003100:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003102:	623b      	str	r3, [r7, #32]
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800310e:	f7ff fecf 	bl	8002eb0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4a37      	ldr	r2, [pc, #220]	; (80031fc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003120:	4413      	add	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	429a      	cmp	r2, r3
 800313e:	d92b      	bls.n	8003198 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4293      	cmp	r3, r2
 8003150:	bf28      	it	cs
 8003152:	4613      	movcs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	4413      	add	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	6939      	ldr	r1, [r7, #16]
 8003164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003166:	f009 fe57 	bl	800ce18 <memcpy>
    NumBytesRead += NumBytesRem;
 800316a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	4413      	add	r3, r2
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4413      	add	r3, r2
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	4413      	add	r3, r2
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003190:	429a      	cmp	r2, r3
 8003192:	d101      	bne.n	8003198 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003194:	2300      	movs	r3, #0
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bf28      	it	cs
 80031a8:	4613      	movcs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d019      	beq.n	80031e6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	4413      	add	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	6939      	ldr	r1, [r7, #16]
 80031c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031c2:	f009 fe29 	bl	800ce18 <memcpy>
    NumBytesRead += NumBytesRem;
 80031c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	4413      	add	r3, r2
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	4413      	add	r3, r2
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80031de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	4413      	add	r3, r2
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031f0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3730      	adds	r7, #48	; 0x30
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	240016b0 	.word	0x240016b0

08003200 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800320c:	4b3e      	ldr	r3, [pc, #248]	; (8003308 <SEGGER_RTT_ReadNoLock+0x108>)
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <SEGGER_RTT_ReadNoLock+0x1e>
 800321a:	f7ff fe49 	bl	8002eb0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3360      	adds	r3, #96	; 0x60
 800322a:	4a37      	ldr	r2, [pc, #220]	; (8003308 <SEGGER_RTT_ReadNoLock+0x108>)
 800322c:	4413      	add	r3, r2
 800322e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	429a      	cmp	r2, r3
 800324a:	d92b      	bls.n	80032a4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4293      	cmp	r3, r2
 800325c:	bf28      	it	cs
 800325e:	4613      	movcs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	4413      	add	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	6939      	ldr	r1, [r7, #16]
 8003270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003272:	f009 fdd1 	bl	800ce18 <memcpy>
    NumBytesRead += NumBytesRem;
 8003276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4413      	add	r3, r2
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	4413      	add	r3, r2
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800328e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	4413      	add	r3, r2
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800329c:	429a      	cmp	r2, r3
 800329e:	d101      	bne.n	80032a4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4293      	cmp	r3, r2
 80032b2:	bf28      	it	cs
 80032b4:	4613      	movcs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d019      	beq.n	80032f2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	4413      	add	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	6939      	ldr	r1, [r7, #16]
 80032cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032ce:	f009 fda3 	bl	800ce18 <memcpy>
    NumBytesRead += NumBytesRem;
 80032d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	4413      	add	r3, r2
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80032da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	4413      	add	r3, r2
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80032ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	4413      	add	r3, r2
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80032f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032fc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003300:	4618      	mov	r0, r3
 8003302:	3730      	adds	r7, #48	; 0x30
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	240016b0 	.word	0x240016b0

0800330c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	3360      	adds	r3, #96	; 0x60
 8003328:	4a1f      	ldr	r2, [pc, #124]	; (80033a8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800332a:	4413      	add	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d029      	beq.n	800338a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003336:	2b02      	cmp	r3, #2
 8003338:	d82e      	bhi.n	8003398 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800333e:	2b01      	cmp	r3, #1
 8003340:	d013      	beq.n	800336a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003342:	e029      	b.n	8003398 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003344:	6978      	ldr	r0, [r7, #20]
 8003346:	f7ff feb2 	bl	80030ae <_GetAvailWriteSpace>
 800334a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	429a      	cmp	r2, r3
 8003352:	d202      	bcs.n	800335a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003358:	e021      	b.n	800339e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	69b9      	ldr	r1, [r7, #24]
 8003362:	6978      	ldr	r0, [r7, #20]
 8003364:	f7ff fe5b 	bl	800301e <_WriteNoCheck>
    break;
 8003368:	e019      	b.n	800339e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f7ff fe9f 	bl	80030ae <_GetAvailWriteSpace>
 8003370:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4293      	cmp	r3, r2
 8003378:	bf28      	it	cs
 800337a:	4613      	movcs	r3, r2
 800337c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	69b9      	ldr	r1, [r7, #24]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	f7ff fe4b 	bl	800301e <_WriteNoCheck>
    break;
 8003388:	e009      	b.n	800339e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	69b9      	ldr	r1, [r7, #24]
 800338e:	6978      	ldr	r0, [r7, #20]
 8003390:	f7ff fde8 	bl	8002f64 <_WriteBlocking>
 8003394:	61f8      	str	r0, [r7, #28]
    break;
 8003396:	e002      	b.n	800339e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
    break;
 800339c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800339e:	69fb      	ldr	r3, [r7, #28]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	240016b0 	.word	0x240016b0

080033ac <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <SEGGER_RTT_WriteDownBuffer+0x1e>
 80033c6:	f7ff fd73 	bl	8002eb0 <_DoInit>
  SEGGER_RTT_LOCK();
 80033ca:	f3ef 8311 	mrs	r3, BASEPRI
 80033ce:	f04f 0120 	mov.w	r1, #32
 80033d2:	f381 8811 	msr	BASEPRI, r1
 80033d6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff ff95 	bl	800330c <SEGGER_RTT_WriteDownBufferNoLock>
 80033e2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80033ea:	697b      	ldr	r3, [r7, #20]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	240016b0 	.word	0x240016b0

080033f8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003414:	f7ff fd4c 	bl	8002eb0 <_DoInit>
  SEGGER_RTT_LOCK();
 8003418:	f3ef 8311 	mrs	r3, BASEPRI
 800341c:	f04f 0120 	mov.w	r1, #32
 8003420:	f381 8811 	msr	BASEPRI, r1
 8003424:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003426:	4b35      	ldr	r3, [pc, #212]	; (80034fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003428:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800342e:	6939      	ldr	r1, [r7, #16]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	440b      	add	r3, r1
 800343e:	3304      	adds	r3, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3301      	adds	r3, #1
 800344a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	429a      	cmp	r2, r3
 8003454:	dbeb      	blt.n	800342e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003456:	e000      	b.n	800345a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003458:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	429a      	cmp	r2, r3
 8003462:	da3f      	bge.n	80034e4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003464:	6939      	ldr	r1, [r7, #16]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	440b      	add	r3, r1
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003478:	6939      	ldr	r1, [r7, #16]
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	3304      	adds	r3, #4
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800348e:	6939      	ldr	r1, [r7, #16]
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	3320      	adds	r3, #32
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80034a2:	6939      	ldr	r1, [r7, #16]
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	3328      	adds	r3, #40	; 0x28
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80034b6:	6939      	ldr	r1, [r7, #16]
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	3324      	adds	r3, #36	; 0x24
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80034ca:	6939      	ldr	r1, [r7, #16]
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	332c      	adds	r3, #44	; 0x2c
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80034de:	f3bf 8f5f 	dmb	sy
 80034e2:	e002      	b.n	80034ea <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80034e4:	f04f 33ff 	mov.w	r3, #4294967295
 80034e8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80034f0:	69fb      	ldr	r3, [r7, #28]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	240016b0 	.word	0x240016b0

08003500 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800350e:	4b21      	ldr	r3, [pc, #132]	; (8003594 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003510:	623b      	str	r3, [r7, #32]
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800351c:	f7ff fcc8 	bl	8002eb0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003520:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003522:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d82c      	bhi.n	8003584 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800352a:	f3ef 8311 	mrs	r3, BASEPRI
 800352e:	f04f 0120 	mov.w	r1, #32
 8003532:	f381 8811 	msr	BASEPRI, r1
 8003536:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	3360      	adds	r3, #96	; 0x60
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	4413      	add	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003572:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003574:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	e002      	b.n	800358a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800358c:	4618      	mov	r0, r3
 800358e:	3728      	adds	r7, #40	; 0x28
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	240016b0 	.word	0x240016b0

08003598 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00f      	beq.n	80035ce <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80035ae:	e002      	b.n	80035b6 <_EncodeStr+0x1e>
      Len++;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	3301      	adds	r3, #1
 80035b4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4413      	add	r3, r2
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f6      	bne.n	80035b0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d901      	bls.n	80035ce <_EncodeStr+0x36>
      Len = Limit;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2bfe      	cmp	r3, #254	; 0xfe
 80035d2:	d806      	bhi.n	80035e2 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	60fa      	str	r2, [r7, #12]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	e011      	b.n	8003606 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	60fa      	str	r2, [r7, #12]
 80035e8:	22ff      	movs	r2, #255	; 0xff
 80035ea:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	60fa      	str	r2, [r7, #12]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	0a19      	lsrs	r1, r3, #8
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	60fa      	str	r2, [r7, #12]
 8003602:	b2ca      	uxtb	r2, r1
 8003604:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800360a:	e00a      	b.n	8003622 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	1c53      	adds	r3, r2, #1
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1c59      	adds	r1, r3, #1
 8003616:	60f9      	str	r1, [r7, #12]
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	701a      	strb	r2, [r3, #0]
    n++;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3301      	adds	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	429a      	cmp	r2, r3
 8003628:	d3f0      	bcc.n	800360c <_EncodeStr+0x74>
  }
  return pPayload;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3307      	adds	r3, #7
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003656:	4b35      	ldr	r3, [pc, #212]	; (800372c <_HandleIncomingPacket+0xdc>)
 8003658:	7e1b      	ldrb	r3, [r3, #24]
 800365a:	4618      	mov	r0, r3
 800365c:	1cfb      	adds	r3, r7, #3
 800365e:	2201      	movs	r2, #1
 8003660:	4619      	mov	r1, r3
 8003662:	f7ff fdcd 	bl	8003200 <SEGGER_RTT_ReadNoLock>
 8003666:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d052      	beq.n	8003714 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	2b80      	cmp	r3, #128	; 0x80
 8003672:	d031      	beq.n	80036d8 <_HandleIncomingPacket+0x88>
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	dc40      	bgt.n	80036fa <_HandleIncomingPacket+0xaa>
 8003678:	2b07      	cmp	r3, #7
 800367a:	dc15      	bgt.n	80036a8 <_HandleIncomingPacket+0x58>
 800367c:	2b00      	cmp	r3, #0
 800367e:	dd3c      	ble.n	80036fa <_HandleIncomingPacket+0xaa>
 8003680:	3b01      	subs	r3, #1
 8003682:	2b06      	cmp	r3, #6
 8003684:	d839      	bhi.n	80036fa <_HandleIncomingPacket+0xaa>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <_HandleIncomingPacket+0x3c>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	080036af 	.word	0x080036af
 8003690:	080036b5 	.word	0x080036b5
 8003694:	080036bb 	.word	0x080036bb
 8003698:	080036c1 	.word	0x080036c1
 800369c:	080036c7 	.word	0x080036c7
 80036a0:	080036cd 	.word	0x080036cd
 80036a4:	080036d3 	.word	0x080036d3
 80036a8:	2b7f      	cmp	r3, #127	; 0x7f
 80036aa:	d035      	beq.n	8003718 <_HandleIncomingPacket+0xc8>
 80036ac:	e025      	b.n	80036fa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80036ae:	f000 fc35 	bl	8003f1c <SEGGER_SYSVIEW_Start>
      break;
 80036b2:	e036      	b.n	8003722 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80036b4:	f000 fcee 	bl	8004094 <SEGGER_SYSVIEW_Stop>
      break;
 80036b8:	e033      	b.n	8003722 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80036ba:	f000 fec7 	bl	800444c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80036be:	e030      	b.n	8003722 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80036c0:	f000 fe8c 	bl	80043dc <SEGGER_SYSVIEW_SendTaskList>
      break;
 80036c4:	e02d      	b.n	8003722 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80036c6:	f000 fd0b 	bl	80040e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80036ca:	e02a      	b.n	8003722 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80036cc:	f001 f95a 	bl	8004984 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80036d0:	e027      	b.n	8003722 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80036d2:	f001 f939 	bl	8004948 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80036d6:	e024      	b.n	8003722 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80036d8:	4b14      	ldr	r3, [pc, #80]	; (800372c <_HandleIncomingPacket+0xdc>)
 80036da:	7e1b      	ldrb	r3, [r3, #24]
 80036dc:	4618      	mov	r0, r3
 80036de:	1cfb      	adds	r3, r7, #3
 80036e0:	2201      	movs	r2, #1
 80036e2:	4619      	mov	r1, r3
 80036e4:	f7ff fd8c 	bl	8003200 <SEGGER_RTT_ReadNoLock>
 80036e8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 f8a8 	bl	8004848 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80036f8:	e010      	b.n	800371c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	b25b      	sxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da0e      	bge.n	8003720 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <_HandleIncomingPacket+0xdc>)
 8003704:	7e1b      	ldrb	r3, [r3, #24]
 8003706:	4618      	mov	r0, r3
 8003708:	1cfb      	adds	r3, r7, #3
 800370a:	2201      	movs	r2, #1
 800370c:	4619      	mov	r1, r3
 800370e:	f7ff fd77 	bl	8003200 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003712:	e005      	b.n	8003720 <_HandleIncomingPacket+0xd0>
    }
  }
 8003714:	bf00      	nop
 8003716:	e004      	b.n	8003722 <_HandleIncomingPacket+0xd2>
      break;
 8003718:	bf00      	nop
 800371a:	e002      	b.n	8003722 <_HandleIncomingPacket+0xd2>
      break;
 800371c:	bf00      	nop
 800371e:	e000      	b.n	8003722 <_HandleIncomingPacket+0xd2>
      break;
 8003720:	bf00      	nop
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	24079770 	.word	0x24079770

08003730 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b08c      	sub	sp, #48	; 0x30
 8003734:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003736:	2301      	movs	r3, #1
 8003738:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	3301      	adds	r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003744:	4b32      	ldr	r3, [pc, #200]	; (8003810 <_TrySendOverflowPacket+0xe0>)
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
 800374a:	e00b      	b.n	8003764 <_TrySendOverflowPacket+0x34>
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	b2da      	uxtb	r2, r3
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	1c59      	adds	r1, r3, #1
 8003754:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003756:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003760:	09db      	lsrs	r3, r3, #7
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	2b7f      	cmp	r3, #127	; 0x7f
 8003768:	d8f0      	bhi.n	800374c <_TrySendOverflowPacket+0x1c>
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <_TrySendOverflowPacket+0xe4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003780:	4b23      	ldr	r3, [pc, #140]	; (8003810 <_TrySendOverflowPacket+0xe0>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	623b      	str	r3, [r7, #32]
 8003792:	e00b      	b.n	80037ac <_TrySendOverflowPacket+0x7c>
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	6279      	str	r1, [r7, #36]	; 0x24
 800379e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	09db      	lsrs	r3, r3, #7
 80037aa:	623b      	str	r3, [r7, #32]
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	2b7f      	cmp	r3, #127	; 0x7f
 80037b0:	d8f0      	bhi.n	8003794 <_TrySendOverflowPacket+0x64>
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	627a      	str	r2, [r7, #36]	; 0x24
 80037b8:	6a3a      	ldr	r2, [r7, #32]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80037c2:	4b13      	ldr	r3, [pc, #76]	; (8003810 <_TrySendOverflowPacket+0xe0>)
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	4618      	mov	r0, r3
 80037c8:	1d3b      	adds	r3, r7, #4
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	f7fc fd84 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80037d8:	4603      	mov	r3, r0
 80037da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80037dc:	f7ff fade 	bl	8002d9c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80037e6:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <_TrySendOverflowPacket+0xe0>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80037ec:	4b08      	ldr	r3, [pc, #32]	; (8003810 <_TrySendOverflowPacket+0xe0>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <_TrySendOverflowPacket+0xe0>)
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e004      	b.n	8003804 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <_TrySendOverflowPacket+0xe0>)
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	3301      	adds	r3, #1
 8003800:	4a03      	ldr	r2, [pc, #12]	; (8003810 <_TrySendOverflowPacket+0xe0>)
 8003802:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003804:	693b      	ldr	r3, [r7, #16]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3730      	adds	r7, #48	; 0x30
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	24079770 	.word	0x24079770
 8003814:	e0001004 	.word	0xe0001004

08003818 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003824:	4b96      	ldr	r3, [pc, #600]	; (8003a80 <_SendPacket+0x268>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d010      	beq.n	800384e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800382c:	4b94      	ldr	r3, [pc, #592]	; (8003a80 <_SendPacket+0x268>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8130 	beq.w	8003a96 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003836:	4b92      	ldr	r3, [pc, #584]	; (8003a80 <_SendPacket+0x268>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d109      	bne.n	8003852 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800383e:	f7ff ff77 	bl	8003730 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003842:	4b8f      	ldr	r3, [pc, #572]	; (8003a80 <_SendPacket+0x268>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	f040 8127 	bne.w	8003a9a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800384c:	e001      	b.n	8003852 <_SendPacket+0x3a>
    goto Send;
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <_SendPacket+0x3c>
Send:
 8003852:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b1f      	cmp	r3, #31
 8003858:	d809      	bhi.n	800386e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800385a:	4b89      	ldr	r3, [pc, #548]	; (8003a80 <_SendPacket+0x268>)
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	f040 8118 	bne.w	8003a9e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b17      	cmp	r3, #23
 8003872:	d807      	bhi.n	8003884 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3b01      	subs	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	e0c4      	b.n	8003a0e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b7f      	cmp	r3, #127	; 0x7f
 8003890:	d912      	bls.n	80038b8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	09da      	lsrs	r2, r3, #7
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b01      	subs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	3a01      	subs	r2, #1
 80038aa:	60fa      	str	r2, [r7, #12]
 80038ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e006      	b.n	80038c6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b7e      	cmp	r3, #126	; 0x7e
 80038ca:	d807      	bhi.n	80038dc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e098      	b.n	8003a0e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e2:	d212      	bcs.n	800390a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	09da      	lsrs	r2, r3, #7
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	3a01      	subs	r2, #1
 80038fc:	60fa      	str	r2, [r7, #12]
 80038fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003902:	b2da      	uxtb	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	e081      	b.n	8003a0e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003910:	d21d      	bcs.n	800394e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	0b9a      	lsrs	r2, r3, #14
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3b01      	subs	r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	09db      	lsrs	r3, r3, #7
 8003926:	b2db      	uxtb	r3, r3
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	3a01      	subs	r2, #1
 800392c:	60fa      	str	r2, [r7, #12]
 800392e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	3a01      	subs	r2, #1
 8003940:	60fa      	str	r2, [r7, #12]
 8003942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e05f      	b.n	8003a0e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003954:	d228      	bcs.n	80039a8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0d5a      	lsrs	r2, r3, #21
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3b01      	subs	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	0b9b      	lsrs	r3, r3, #14
 800396a:	b2db      	uxtb	r3, r3
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	3a01      	subs	r2, #1
 8003970:	60fa      	str	r2, [r7, #12]
 8003972:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003976:	b2da      	uxtb	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	09db      	lsrs	r3, r3, #7
 8003980:	b2db      	uxtb	r3, r3
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	3a01      	subs	r2, #1
 8003986:	60fa      	str	r2, [r7, #12]
 8003988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	3a01      	subs	r2, #1
 800399a:	60fa      	str	r2, [r7, #12]
 800399c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e032      	b.n	8003a0e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	0f1a      	lsrs	r2, r3, #28
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	0d5b      	lsrs	r3, r3, #21
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	3a01      	subs	r2, #1
 80039c2:	60fa      	str	r2, [r7, #12]
 80039c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0b9b      	lsrs	r3, r3, #14
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	3a01      	subs	r2, #1
 80039d8:	60fa      	str	r2, [r7, #12]
 80039da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	09db      	lsrs	r3, r3, #7
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	3a01      	subs	r2, #1
 80039ee:	60fa      	str	r2, [r7, #12]
 80039f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	3a01      	subs	r2, #1
 8003a02:	60fa      	str	r2, [r7, #12]
 8003a04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <_SendPacket+0x26c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <_SendPacket+0x268>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	623b      	str	r3, [r7, #32]
 8003a26:	e00b      	b.n	8003a40 <_SendPacket+0x228>
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	1c59      	adds	r1, r3, #1
 8003a30:	6279      	str	r1, [r7, #36]	; 0x24
 8003a32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	09db      	lsrs	r3, r3, #7
 8003a3e:	623b      	str	r3, [r7, #32]
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	2b7f      	cmp	r3, #127	; 0x7f
 8003a44:	d8f0      	bhi.n	8003a28 <_SendPacket+0x210>
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	627a      	str	r2, [r7, #36]	; 0x24
 8003a4c:	6a3a      	ldr	r2, [r7, #32]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <_SendPacket+0x268>)
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68f9      	ldr	r1, [r7, #12]
 8003a66:	f7fc fc3b 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003a6a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003a6c:	f7ff f996 	bl	8002d9c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003a76:	4a02      	ldr	r2, [pc, #8]	; (8003a80 <_SendPacket+0x268>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	60d3      	str	r3, [r2, #12]
 8003a7c:	e010      	b.n	8003aa0 <_SendPacket+0x288>
 8003a7e:	bf00      	nop
 8003a80:	24079770 	.word	0x24079770
 8003a84:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <_SendPacket+0x2d8>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	4b17      	ldr	r3, [pc, #92]	; (8003af0 <_SendPacket+0x2d8>)
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	e004      	b.n	8003aa0 <_SendPacket+0x288>
    goto SendDone;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <_SendPacket+0x288>
      goto SendDone;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <_SendPacket+0x288>
      goto SendDone;
 8003a9e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003aa0:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <_SendPacket+0x2d8>)
 8003aa2:	7e1b      	ldrb	r3, [r3, #24]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <_SendPacket+0x2dc>)
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	440b      	add	r3, r1
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	336c      	adds	r3, #108	; 0x6c
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <_SendPacket+0x2d8>)
 8003ab8:	7e1b      	ldrb	r3, [r3, #24]
 8003aba:	4618      	mov	r0, r3
 8003abc:	490d      	ldr	r1, [pc, #52]	; (8003af4 <_SendPacket+0x2dc>)
 8003abe:	4603      	mov	r3, r0
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4403      	add	r3, r0
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3370      	adds	r3, #112	; 0x70
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d00b      	beq.n	8003ae8 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003ad0:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <_SendPacket+0x2d8>)
 8003ad2:	789b      	ldrb	r3, [r3, #2]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <_SendPacket+0x2d8>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003ade:	f7ff fdb7 	bl	8003650 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003ae2:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <_SendPacket+0x2d8>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003ae8:	bf00      	nop
 8003aea:	3728      	adds	r7, #40	; 0x28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	24079770 	.word	0x24079770
 8003af4:	240016b0 	.word	0x240016b0

08003af8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003b06:	2300      	movs	r3, #0
 8003b08:	4a18      	ldr	r2, [pc, #96]	; (8003b6c <SEGGER_SYSVIEW_Init+0x74>)
 8003b0a:	4919      	ldr	r1, [pc, #100]	; (8003b70 <SEGGER_SYSVIEW_Init+0x78>)
 8003b0c:	4819      	ldr	r0, [pc, #100]	; (8003b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8003b0e:	f7ff fc73 	bl	80033f8 <SEGGER_RTT_AllocUpBuffer>
 8003b12:	4603      	mov	r3, r0
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <SEGGER_SYSVIEW_Init+0x80>)
 8003b18:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <SEGGER_SYSVIEW_Init+0x80>)
 8003b1c:	785a      	ldrb	r2, [r3, #1]
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <SEGGER_SYSVIEW_Init+0x80>)
 8003b20:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <SEGGER_SYSVIEW_Init+0x80>)
 8003b24:	7e1b      	ldrb	r3, [r3, #24]
 8003b26:	4618      	mov	r0, r3
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <SEGGER_SYSVIEW_Init+0x84>)
 8003b30:	4910      	ldr	r1, [pc, #64]	; (8003b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8003b32:	f7ff fce5 	bl	8003500 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <SEGGER_SYSVIEW_Init+0x80>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <SEGGER_SYSVIEW_Init+0x88>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <SEGGER_SYSVIEW_Init+0x80>)
 8003b42:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003b44:	4a0c      	ldr	r2, [pc, #48]	; (8003b78 <SEGGER_SYSVIEW_Init+0x80>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003b4a:	4a0b      	ldr	r2, [pc, #44]	; (8003b78 <SEGGER_SYSVIEW_Init+0x80>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003b50:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <SEGGER_SYSVIEW_Init+0x80>)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003b56:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <SEGGER_SYSVIEW_Init+0x80>)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <SEGGER_SYSVIEW_Init+0x80>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	00077c00 	.word	0x00077c00
 8003b70:	24001b68 	.word	0x24001b68
 8003b74:	0800d7e4 	.word	0x0800d7e4
 8003b78:	24079770 	.word	0x24079770
 8003b7c:	24079768 	.word	0x24079768
 8003b80:	e0001004 	.word	0xe0001004

08003b84 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6113      	str	r3, [r2, #16]
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	24079770 	.word	0x24079770

08003ba4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003bac:	f3ef 8311 	mrs	r3, BASEPRI
 8003bb0:	f04f 0120 	mov.w	r1, #32
 8003bb4:	f381 8811 	msr	BASEPRI, r1
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	4808      	ldr	r0, [pc, #32]	; (8003bdc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003bbc:	f7ff fd3c 	bl	8003638 <_PreparePacket>
 8003bc0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68b8      	ldr	r0, [r7, #8]
 8003bc8:	f7ff fe26 	bl	8003818 <_SendPacket>
  RECORD_END();
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f383 8811 	msr	BASEPRI, r3
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	240797a0 	.word	0x240797a0

08003be0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003bea:	f3ef 8311 	mrs	r3, BASEPRI
 8003bee:	f04f 0120 	mov.w	r1, #32
 8003bf2:	f381 8811 	msr	BASEPRI, r1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	4816      	ldr	r0, [pc, #88]	; (8003c54 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003bfa:	f7ff fd1d 	bl	8003638 <_PreparePacket>
 8003bfe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e00b      	b.n	8003c26 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	1c59      	adds	r1, r3, #1
 8003c16:	61f9      	str	r1, [r7, #28]
 8003c18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	09db      	lsrs	r3, r3, #7
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b7f      	cmp	r3, #127	; 0x7f
 8003c2a:	d8f0      	bhi.n	8003c0e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	61fa      	str	r2, [r7, #28]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	6938      	ldr	r0, [r7, #16]
 8003c42:	f7ff fde9 	bl	8003818 <_SendPacket>
  RECORD_END();
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f383 8811 	msr	BASEPRI, r3
}
 8003c4c:	bf00      	nop
 8003c4e:	3720      	adds	r7, #32
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	240797a0 	.word	0x240797a0

08003c58 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	; 0x30
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c64:	f3ef 8311 	mrs	r3, BASEPRI
 8003c68:	f04f 0120 	mov.w	r1, #32
 8003c6c:	f381 8811 	msr	BASEPRI, r1
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	4825      	ldr	r0, [pc, #148]	; (8003d08 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003c74:	f7ff fce0 	bl	8003638 <_PreparePacket>
 8003c78:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c86:	e00b      	b.n	8003ca0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	1c59      	adds	r1, r3, #1
 8003c90:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	09db      	lsrs	r3, r3, #7
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ca4:	d8f0      	bhi.n	8003c88 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	e00b      	b.n	8003cd8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	1c59      	adds	r1, r3, #1
 8003cc8:	6279      	str	r1, [r7, #36]	; 0x24
 8003cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	09db      	lsrs	r3, r3, #7
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	2b7f      	cmp	r3, #127	; 0x7f
 8003cdc:	d8f0      	bhi.n	8003cc0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	69b8      	ldr	r0, [r7, #24]
 8003cf4:	f7ff fd90 	bl	8003818 <_SendPacket>
  RECORD_END();
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f383 8811 	msr	BASEPRI, r3
}
 8003cfe:	bf00      	nop
 8003d00:	3730      	adds	r7, #48	; 0x30
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	240797a0 	.word	0x240797a0

08003d0c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	; 0x38
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d1e:	f04f 0120 	mov.w	r1, #32
 8003d22:	f381 8811 	msr	BASEPRI, r1
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	4832      	ldr	r0, [pc, #200]	; (8003df4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003d2a:	f7ff fc85 	bl	8003638 <_PreparePacket>
 8003d2e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d3c:	e00b      	b.n	8003d56 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d44:	1c59      	adds	r1, r3, #1
 8003d46:	6379      	str	r1, [r7, #52]	; 0x34
 8003d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	09db      	lsrs	r3, r3, #7
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	2b7f      	cmp	r3, #127	; 0x7f
 8003d5a:	d8f0      	bhi.n	8003d3e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	637a      	str	r2, [r7, #52]	; 0x34
 8003d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d74:	e00b      	b.n	8003d8e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	1c59      	adds	r1, r3, #1
 8003d7e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	09db      	lsrs	r3, r3, #7
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2b7f      	cmp	r3, #127	; 0x7f
 8003d92:	d8f0      	bhi.n	8003d76 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	e00b      	b.n	8003dc6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	1c59      	adds	r1, r3, #1
 8003db6:	6279      	str	r1, [r7, #36]	; 0x24
 8003db8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	09db      	lsrs	r3, r3, #7
 8003dc4:	623b      	str	r3, [r7, #32]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8003dca:	d8f0      	bhi.n	8003dae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	627a      	str	r2, [r7, #36]	; 0x24
 8003dd2:	6a3a      	ldr	r2, [r7, #32]
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	6979      	ldr	r1, [r7, #20]
 8003de0:	69b8      	ldr	r0, [r7, #24]
 8003de2:	f7ff fd19 	bl	8003818 <_SendPacket>
  RECORD_END();
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f383 8811 	msr	BASEPRI, r3
}
 8003dec:	bf00      	nop
 8003dee:	3738      	adds	r7, #56	; 0x38
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	240797a0 	.word	0x240797a0

08003df8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b090      	sub	sp, #64	; 0x40
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e06:	f3ef 8311 	mrs	r3, BASEPRI
 8003e0a:	f04f 0120 	mov.w	r1, #32
 8003e0e:	f381 8811 	msr	BASEPRI, r1
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	4840      	ldr	r0, [pc, #256]	; (8003f18 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003e16:	f7ff fc0f 	bl	8003638 <_PreparePacket>
 8003e1a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e28:	e00b      	b.n	8003e42 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e30:	1c59      	adds	r1, r3, #1
 8003e32:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003e34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	09db      	lsrs	r3, r3, #7
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2b7f      	cmp	r3, #127	; 0x7f
 8003e46:	d8f0      	bhi.n	8003e2a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e60:	e00b      	b.n	8003e7a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	1c59      	adds	r1, r3, #1
 8003e6a:	6379      	str	r1, [r7, #52]	; 0x34
 8003e6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	09db      	lsrs	r3, r3, #7
 8003e78:	633b      	str	r3, [r7, #48]	; 0x30
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003e7e:	d8f0      	bhi.n	8003e62 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	637a      	str	r2, [r7, #52]	; 0x34
 8003e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e98:	e00b      	b.n	8003eb2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	1c59      	adds	r1, r3, #1
 8003ea2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003ea4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	09db      	lsrs	r3, r3, #7
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb6:	d8f0      	bhi.n	8003e9a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ece:	623b      	str	r3, [r7, #32]
 8003ed0:	e00b      	b.n	8003eea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	1c59      	adds	r1, r3, #1
 8003eda:	6279      	str	r1, [r7, #36]	; 0x24
 8003edc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	09db      	lsrs	r3, r3, #7
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	2b7f      	cmp	r3, #127	; 0x7f
 8003eee:	d8f0      	bhi.n	8003ed2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	69b8      	ldr	r0, [r7, #24]
 8003f06:	f7ff fc87 	bl	8003818 <_SendPacket>
  RECORD_END();
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f383 8811 	msr	BASEPRI, r3
}
 8003f10:	bf00      	nop
 8003f12:	3740      	adds	r7, #64	; 0x40
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	240797a0 	.word	0x240797a0

08003f1c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08c      	sub	sp, #48	; 0x30
 8003f20:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003f22:	4b59      	ldr	r3, [pc, #356]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003f28:	f3ef 8311 	mrs	r3, BASEPRI
 8003f2c:	f04f 0120 	mov.w	r1, #32
 8003f30:	f381 8811 	msr	BASEPRI, r1
 8003f34:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003f36:	4b54      	ldr	r3, [pc, #336]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f38:	785b      	ldrb	r3, [r3, #1]
 8003f3a:	220a      	movs	r2, #10
 8003f3c:	4953      	ldr	r1, [pc, #332]	; (800408c <SEGGER_SYSVIEW_Start+0x170>)
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc f9ce 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003f4a:	f7fe ff27 	bl	8002d9c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003f4e:	200a      	movs	r0, #10
 8003f50:	f7ff fe28 	bl	8003ba4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003f54:	f3ef 8311 	mrs	r3, BASEPRI
 8003f58:	f04f 0120 	mov.w	r1, #32
 8003f5c:	f381 8811 	msr	BASEPRI, r1
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	484b      	ldr	r0, [pc, #300]	; (8004090 <SEGGER_SYSVIEW_Start+0x174>)
 8003f64:	f7ff fb68 	bl	8003638 <_PreparePacket>
 8003f68:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f72:	4b45      	ldr	r3, [pc, #276]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f78:	e00b      	b.n	8003f92 <SEGGER_SYSVIEW_Start+0x76>
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	1c59      	adds	r1, r3, #1
 8003f82:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	09db      	lsrs	r3, r3, #7
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	2b7f      	cmp	r3, #127	; 0x7f
 8003f96:	d8f0      	bhi.n	8003f7a <SEGGER_SYSVIEW_Start+0x5e>
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	4b36      	ldr	r3, [pc, #216]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	623b      	str	r3, [r7, #32]
 8003fb2:	e00b      	b.n	8003fcc <SEGGER_SYSVIEW_Start+0xb0>
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	1c59      	adds	r1, r3, #1
 8003fbc:	6279      	str	r1, [r7, #36]	; 0x24
 8003fbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	09db      	lsrs	r3, r3, #7
 8003fca:	623b      	str	r3, [r7, #32]
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	2b7f      	cmp	r3, #127	; 0x7f
 8003fd0:	d8f0      	bhi.n	8003fb4 <SEGGER_SYSVIEW_Start+0x98>
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	627a      	str	r2, [r7, #36]	; 0x24
 8003fd8:	6a3a      	ldr	r2, [r7, #32]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	4b28      	ldr	r3, [pc, #160]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	61bb      	str	r3, [r7, #24]
 8003fec:	e00b      	b.n	8004006 <SEGGER_SYSVIEW_Start+0xea>
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	1c59      	adds	r1, r3, #1
 8003ff6:	61f9      	str	r1, [r7, #28]
 8003ff8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	09db      	lsrs	r3, r3, #7
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b7f      	cmp	r3, #127	; 0x7f
 800400a:	d8f0      	bhi.n	8003fee <SEGGER_SYSVIEW_Start+0xd2>
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	61fa      	str	r2, [r7, #28]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e00b      	b.n	800403e <SEGGER_SYSVIEW_Start+0x122>
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	1c59      	adds	r1, r3, #1
 800402e:	6179      	str	r1, [r7, #20]
 8004030:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	09db      	lsrs	r3, r3, #7
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b7f      	cmp	r3, #127	; 0x7f
 8004042:	d8f0      	bhi.n	8004026 <SEGGER_SYSVIEW_Start+0x10a>
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	617a      	str	r2, [r7, #20]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004054:	2218      	movs	r2, #24
 8004056:	6839      	ldr	r1, [r7, #0]
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fbdd 	bl	8003818 <_SendPacket>
      RECORD_END();
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004064:	4b08      	ldr	r3, [pc, #32]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004072:	f000 f9eb 	bl	800444c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004076:	f000 f9b1 	bl	80043dc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800407a:	f000 fc83 	bl	8004984 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800407e:	bf00      	nop
 8004080:	3730      	adds	r7, #48	; 0x30
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	24079770 	.word	0x24079770
 800408c:	0800d99c 	.word	0x0800d99c
 8004090:	240797a0 	.word	0x240797a0

08004094 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800409a:	f3ef 8311 	mrs	r3, BASEPRI
 800409e:	f04f 0120 	mov.w	r1, #32
 80040a2:	f381 8811 	msr	BASEPRI, r1
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	480b      	ldr	r0, [pc, #44]	; (80040d8 <SEGGER_SYSVIEW_Stop+0x44>)
 80040aa:	f7ff fac5 	bl	8003638 <_PreparePacket>
 80040ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <SEGGER_SYSVIEW_Stop+0x48>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80040b8:	220b      	movs	r2, #11
 80040ba:	6839      	ldr	r1, [r7, #0]
 80040bc:	6838      	ldr	r0, [r7, #0]
 80040be:	f7ff fbab 	bl	8003818 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <SEGGER_SYSVIEW_Stop+0x48>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f383 8811 	msr	BASEPRI, r3
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	240797a0 	.word	0x240797a0
 80040dc:	24079770 	.word	0x24079770

080040e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	; 0x30
 80040e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80040e6:	f3ef 8311 	mrs	r3, BASEPRI
 80040ea:	f04f 0120 	mov.w	r1, #32
 80040ee:	f381 8811 	msr	BASEPRI, r1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	4845      	ldr	r0, [pc, #276]	; (800420c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80040f6:	f7ff fa9f 	bl	8003638 <_PreparePacket>
 80040fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004104:	4b42      	ldr	r3, [pc, #264]	; (8004210 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
 800410a:	e00b      	b.n	8004124 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	b2da      	uxtb	r2, r3
 8004110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004112:	1c59      	adds	r1, r3, #1
 8004114:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004116:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	09db      	lsrs	r3, r3, #7
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b7f      	cmp	r3, #127	; 0x7f
 8004128:	d8f0      	bhi.n	800410c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004138:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
 800413e:	4b34      	ldr	r3, [pc, #208]	; (8004210 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	e00b      	b.n	800415e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	b2da      	uxtb	r2, r3
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	1c59      	adds	r1, r3, #1
 800414e:	6279      	str	r1, [r7, #36]	; 0x24
 8004150:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	09db      	lsrs	r3, r3, #7
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	2b7f      	cmp	r3, #127	; 0x7f
 8004162:	d8f0      	bhi.n	8004146 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	627a      	str	r2, [r7, #36]	; 0x24
 800416a:	6a3a      	ldr	r2, [r7, #32]
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	4b25      	ldr	r3, [pc, #148]	; (8004210 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	e00b      	b.n	8004198 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	1c59      	adds	r1, r3, #1
 8004188:	61f9      	str	r1, [r7, #28]
 800418a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	09db      	lsrs	r3, r3, #7
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b7f      	cmp	r3, #127	; 0x7f
 800419c:	d8f0      	bhi.n	8004180 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	61fa      	str	r2, [r7, #28]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	e00b      	b.n	80041d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	1c59      	adds	r1, r3, #1
 80041c0:	6179      	str	r1, [r7, #20]
 80041c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	09db      	lsrs	r3, r3, #7
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b7f      	cmp	r3, #127	; 0x7f
 80041d4:	d8f0      	bhi.n	80041b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	617a      	str	r2, [r7, #20]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80041e6:	2218      	movs	r2, #24
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	68b8      	ldr	r0, [r7, #8]
 80041ec:	f7ff fb14 	bl	8003818 <_SendPacket>
  RECORD_END();
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80041fe:	4b04      	ldr	r3, [pc, #16]	; (8004210 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	4798      	blx	r3
  }
}
 8004204:	bf00      	nop
 8004206:	3730      	adds	r7, #48	; 0x30
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	240797a0 	.word	0x240797a0
 8004210:	24079770 	.word	0x24079770

08004214 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b092      	sub	sp, #72	; 0x48
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800421c:	f3ef 8311 	mrs	r3, BASEPRI
 8004220:	f04f 0120 	mov.w	r1, #32
 8004224:	f381 8811 	msr	BASEPRI, r1
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	486a      	ldr	r0, [pc, #424]	; (80043d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800422c:	f7ff fa04 	bl	8003638 <_PreparePacket>
 8004230:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	647b      	str	r3, [r7, #68]	; 0x44
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b66      	ldr	r3, [pc, #408]	; (80043d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	643b      	str	r3, [r7, #64]	; 0x40
 8004246:	e00b      	b.n	8004260 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424a:	b2da      	uxtb	r2, r3
 800424c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424e:	1c59      	adds	r1, r3, #1
 8004250:	6479      	str	r1, [r7, #68]	; 0x44
 8004252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425c:	09db      	lsrs	r3, r3, #7
 800425e:	643b      	str	r3, [r7, #64]	; 0x40
 8004260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004262:	2b7f      	cmp	r3, #127	; 0x7f
 8004264:	d8f0      	bhi.n	8004248 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	647a      	str	r2, [r7, #68]	; 0x44
 800426c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004274:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004280:	e00b      	b.n	800429a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	b2da      	uxtb	r2, r3
 8004286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004288:	1c59      	adds	r1, r3, #1
 800428a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800428c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	09db      	lsrs	r3, r3, #7
 8004298:	63bb      	str	r3, [r7, #56]	; 0x38
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	2b7f      	cmp	r3, #127	; 0x7f
 800429e:	d8f0      	bhi.n	8004282 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80042a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	4619      	mov	r1, r3
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff f96d 	bl	8003598 <_EncodeStr>
 80042be:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80042c0:	2209      	movs	r2, #9
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	6938      	ldr	r0, [r7, #16]
 80042c6:	f7ff faa7 	bl	8003818 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b40      	ldr	r3, [pc, #256]	; (80043d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	633b      	str	r3, [r7, #48]	; 0x30
 80042de:	e00b      	b.n	80042f8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e6:	1c59      	adds	r1, r3, #1
 80042e8:	6379      	str	r1, [r7, #52]	; 0x34
 80042ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	09db      	lsrs	r3, r3, #7
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	2b7f      	cmp	r3, #127	; 0x7f
 80042fc:	d8f0      	bhi.n	80042e0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	637a      	str	r2, [r7, #52]	; 0x34
 8004304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
 8004318:	e00b      	b.n	8004332 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	b2da      	uxtb	r2, r3
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	1c59      	adds	r1, r3, #1
 8004322:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004324:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	09db      	lsrs	r3, r3, #7
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	2b7f      	cmp	r3, #127	; 0x7f
 8004336:	d8f0      	bhi.n	800431a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800433e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	e00b      	b.n	800436c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	b2da      	uxtb	r2, r3
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	1c59      	adds	r1, r3, #1
 800435c:	6279      	str	r1, [r7, #36]	; 0x24
 800435e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	09db      	lsrs	r3, r3, #7
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	2b7f      	cmp	r3, #127	; 0x7f
 8004370:	d8f0      	bhi.n	8004354 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	627a      	str	r2, [r7, #36]	; 0x24
 8004378:	6a3a      	ldr	r2, [r7, #32]
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e00b      	b.n	80043a4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	b2da      	uxtb	r2, r3
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	1c59      	adds	r1, r3, #1
 8004394:	61f9      	str	r1, [r7, #28]
 8004396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	09db      	lsrs	r3, r3, #7
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b7f      	cmp	r3, #127	; 0x7f
 80043a8:	d8f0      	bhi.n	800438c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	61fa      	str	r2, [r7, #28]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80043ba:	2215      	movs	r2, #21
 80043bc:	68f9      	ldr	r1, [r7, #12]
 80043be:	6938      	ldr	r0, [r7, #16]
 80043c0:	f7ff fa2a 	bl	8003818 <_SendPacket>
  RECORD_END();
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f383 8811 	msr	BASEPRI, r3
}
 80043ca:	bf00      	nop
 80043cc:	3748      	adds	r7, #72	; 0x48
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	240797a0 	.word	0x240797a0
 80043d8:	24079770 	.word	0x24079770

080043dc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80043e0:	4b07      	ldr	r3, [pc, #28]	; (8004400 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80043f2:	4b03      	ldr	r3, [pc, #12]	; (8004400 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4798      	blx	r3
  }
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	24079770 	.word	0x24079770

08004404 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800440c:	f3ef 8311 	mrs	r3, BASEPRI
 8004410:	f04f 0120 	mov.w	r1, #32
 8004414:	f381 8811 	msr	BASEPRI, r1
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	480b      	ldr	r0, [pc, #44]	; (8004448 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800441c:	f7ff f90c 	bl	8003638 <_PreparePacket>
 8004420:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004422:	2280      	movs	r2, #128	; 0x80
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	6938      	ldr	r0, [r7, #16]
 8004428:	f7ff f8b6 	bl	8003598 <_EncodeStr>
 800442c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800442e:	220e      	movs	r2, #14
 8004430:	68f9      	ldr	r1, [r7, #12]
 8004432:	6938      	ldr	r0, [r7, #16]
 8004434:	f7ff f9f0 	bl	8003818 <_SendPacket>
  RECORD_END();
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f383 8811 	msr	BASEPRI, r3
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	240797a0 	.word	0x240797a0

0800444c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004452:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01a      	beq.n	8004490 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d015      	beq.n	8004490 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004464:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4798      	blx	r3
 800446c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004470:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004472:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	000a      	movs	r2, r1
 8004480:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004482:	4613      	mov	r3, r2
 8004484:	461a      	mov	r2, r3
 8004486:	4621      	mov	r1, r4
 8004488:	200d      	movs	r0, #13
 800448a:	f7ff fbe5 	bl	8003c58 <SEGGER_SYSVIEW_RecordU32x2>
 800448e:	e006      	b.n	800449e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4619      	mov	r1, r3
 8004496:	200c      	movs	r0, #12
 8004498:	f7ff fba2 	bl	8003be0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd90      	pop	{r4, r7, pc}
 80044a6:	bf00      	nop
 80044a8:	24079770 	.word	0x24079770
 80044ac:	e0001004 	.word	0xe0001004

080044b0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044b6:	f3ef 8311 	mrs	r3, BASEPRI
 80044ba:	f04f 0120 	mov.w	r1, #32
 80044be:	f381 8811 	msr	BASEPRI, r1
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	4819      	ldr	r0, [pc, #100]	; (800452c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80044c6:	f7ff f8b7 	bl	8003638 <_PreparePacket>
 80044ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80044d0:	4b17      	ldr	r3, [pc, #92]	; (8004530 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	e00b      	b.n	80044fc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	1c59      	adds	r1, r3, #1
 80044ec:	6179      	str	r1, [r7, #20]
 80044ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	09db      	lsrs	r3, r3, #7
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004500:	d8f0      	bhi.n	80044e4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	617a      	str	r2, [r7, #20]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004512:	2202      	movs	r2, #2
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	68b8      	ldr	r0, [r7, #8]
 8004518:	f7ff f97e 	bl	8003818 <_SendPacket>
  RECORD_END();
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f383 8811 	msr	BASEPRI, r3
}
 8004522:	bf00      	nop
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	240797a0 	.word	0x240797a0
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800453a:	f3ef 8311 	mrs	r3, BASEPRI
 800453e:	f04f 0120 	mov.w	r1, #32
 8004542:	f381 8811 	msr	BASEPRI, r1
 8004546:	607b      	str	r3, [r7, #4]
 8004548:	4807      	ldr	r0, [pc, #28]	; (8004568 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800454a:	f7ff f875 	bl	8003638 <_PreparePacket>
 800454e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004550:	2203      	movs	r2, #3
 8004552:	6839      	ldr	r1, [r7, #0]
 8004554:	6838      	ldr	r0, [r7, #0]
 8004556:	f7ff f95f 	bl	8003818 <_SendPacket>
  RECORD_END();
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f383 8811 	msr	BASEPRI, r3
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	240797a0 	.word	0x240797a0

0800456c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004572:	f3ef 8311 	mrs	r3, BASEPRI
 8004576:	f04f 0120 	mov.w	r1, #32
 800457a:	f381 8811 	msr	BASEPRI, r1
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	4807      	ldr	r0, [pc, #28]	; (80045a0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004582:	f7ff f859 	bl	8003638 <_PreparePacket>
 8004586:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004588:	2212      	movs	r2, #18
 800458a:	6839      	ldr	r1, [r7, #0]
 800458c:	6838      	ldr	r0, [r7, #0]
 800458e:	f7ff f943 	bl	8003818 <_SendPacket>
  RECORD_END();
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f383 8811 	msr	BASEPRI, r3
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	240797a0 	.word	0x240797a0

080045a4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045aa:	f3ef 8311 	mrs	r3, BASEPRI
 80045ae:	f04f 0120 	mov.w	r1, #32
 80045b2:	f381 8811 	msr	BASEPRI, r1
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	4807      	ldr	r0, [pc, #28]	; (80045d8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80045ba:	f7ff f83d 	bl	8003638 <_PreparePacket>
 80045be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80045c0:	2211      	movs	r2, #17
 80045c2:	6839      	ldr	r1, [r7, #0]
 80045c4:	6838      	ldr	r0, [r7, #0]
 80045c6:	f7ff f927 	bl	8003818 <_SendPacket>
  RECORD_END();
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f383 8811 	msr	BASEPRI, r3
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	240797a0 	.word	0x240797a0

080045dc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80045e4:	f3ef 8311 	mrs	r3, BASEPRI
 80045e8:	f04f 0120 	mov.w	r1, #32
 80045ec:	f381 8811 	msr	BASEPRI, r1
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	4819      	ldr	r0, [pc, #100]	; (8004658 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80045f4:	f7ff f820 	bl	8003638 <_PreparePacket>
 80045f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80045fe:	4b17      	ldr	r3, [pc, #92]	; (800465c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	61fb      	str	r3, [r7, #28]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	e00b      	b.n	800462a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	1c59      	adds	r1, r3, #1
 800461a:	61f9      	str	r1, [r7, #28]
 800461c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	09db      	lsrs	r3, r3, #7
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b7f      	cmp	r3, #127	; 0x7f
 800462e:	d8f0      	bhi.n	8004612 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	61fa      	str	r2, [r7, #28]
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004640:	2208      	movs	r2, #8
 8004642:	68f9      	ldr	r1, [r7, #12]
 8004644:	6938      	ldr	r0, [r7, #16]
 8004646:	f7ff f8e7 	bl	8003818 <_SendPacket>
  RECORD_END();
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f383 8811 	msr	BASEPRI, r3
}
 8004650:	bf00      	nop
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	240797a0 	.word	0x240797a0
 800465c:	24079770 	.word	0x24079770

08004660 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004668:	f3ef 8311 	mrs	r3, BASEPRI
 800466c:	f04f 0120 	mov.w	r1, #32
 8004670:	f381 8811 	msr	BASEPRI, r1
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	4819      	ldr	r0, [pc, #100]	; (80046dc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004678:	f7fe ffde 	bl	8003638 <_PreparePacket>
 800467c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	e00b      	b.n	80046ae <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	1c59      	adds	r1, r3, #1
 800469e:	61f9      	str	r1, [r7, #28]
 80046a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	09db      	lsrs	r3, r3, #7
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b7f      	cmp	r3, #127	; 0x7f
 80046b2:	d8f0      	bhi.n	8004696 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	61fa      	str	r2, [r7, #28]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80046c4:	2204      	movs	r2, #4
 80046c6:	68f9      	ldr	r1, [r7, #12]
 80046c8:	6938      	ldr	r0, [r7, #16]
 80046ca:	f7ff f8a5 	bl	8003818 <_SendPacket>
  RECORD_END();
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f383 8811 	msr	BASEPRI, r3
}
 80046d4:	bf00      	nop
 80046d6:	3720      	adds	r7, #32
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	240797a0 	.word	0x240797a0
 80046e0:	24079770 	.word	0x24079770

080046e4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80046ec:	f3ef 8311 	mrs	r3, BASEPRI
 80046f0:	f04f 0120 	mov.w	r1, #32
 80046f4:	f381 8811 	msr	BASEPRI, r1
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	4819      	ldr	r0, [pc, #100]	; (8004760 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80046fc:	f7fe ff9c 	bl	8003638 <_PreparePacket>
 8004700:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004706:	4b17      	ldr	r3, [pc, #92]	; (8004764 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	e00b      	b.n	8004732 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	1c59      	adds	r1, r3, #1
 8004722:	61f9      	str	r1, [r7, #28]
 8004724:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	09db      	lsrs	r3, r3, #7
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b7f      	cmp	r3, #127	; 0x7f
 8004736:	d8f0      	bhi.n	800471a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	61fa      	str	r2, [r7, #28]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004748:	2206      	movs	r2, #6
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	6938      	ldr	r0, [r7, #16]
 800474e:	f7ff f863 	bl	8003818 <_SendPacket>
  RECORD_END();
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f383 8811 	msr	BASEPRI, r3
}
 8004758:	bf00      	nop
 800475a:	3720      	adds	r7, #32
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	240797a0 	.word	0x240797a0
 8004764:	24079770 	.word	0x24079770

08004768 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004772:	f3ef 8311 	mrs	r3, BASEPRI
 8004776:	f04f 0120 	mov.w	r1, #32
 800477a:	f381 8811 	msr	BASEPRI, r1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	4827      	ldr	r0, [pc, #156]	; (8004820 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004782:	f7fe ff59 	bl	8003638 <_PreparePacket>
 8004786:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800478c:	4b25      	ldr	r3, [pc, #148]	; (8004824 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	623b      	str	r3, [r7, #32]
 800479e:	e00b      	b.n	80047b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	1c59      	adds	r1, r3, #1
 80047a8:	6279      	str	r1, [r7, #36]	; 0x24
 80047aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	09db      	lsrs	r3, r3, #7
 80047b6:	623b      	str	r3, [r7, #32]
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2b7f      	cmp	r3, #127	; 0x7f
 80047bc:	d8f0      	bhi.n	80047a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	627a      	str	r2, [r7, #36]	; 0x24
 80047c4:	6a3a      	ldr	r2, [r7, #32]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	e00b      	b.n	80047f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	1c59      	adds	r1, r3, #1
 80047e0:	61f9      	str	r1, [r7, #28]
 80047e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	09db      	lsrs	r3, r3, #7
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b7f      	cmp	r3, #127	; 0x7f
 80047f4:	d8f0      	bhi.n	80047d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	61fa      	str	r2, [r7, #28]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004806:	2207      	movs	r2, #7
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	6938      	ldr	r0, [r7, #16]
 800480c:	f7ff f804 	bl	8003818 <_SendPacket>
  RECORD_END();
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f383 8811 	msr	BASEPRI, r3
}
 8004816:	bf00      	nop
 8004818:	3728      	adds	r7, #40	; 0x28
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	240797a0 	.word	0x240797a0
 8004824:	24079770 	.word	0x24079770

08004828 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	1ad3      	subs	r3, r2, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	24079770 	.word	0x24079770

08004848 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b08c      	sub	sp, #48	; 0x30
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004852:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d06d      	beq.n	8004936 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800485a:	4b39      	ldr	r3, [pc, #228]	; (8004940 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004860:	2300      	movs	r3, #0
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28
 8004864:	e008      	b.n	8004878 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	3301      	adds	r3, #1
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800487c:	429a      	cmp	r2, r3
 800487e:	d3f2      	bcc.n	8004866 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004880:	e000      	b.n	8004884 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004882:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d055      	beq.n	8004936 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800488a:	f3ef 8311 	mrs	r3, BASEPRI
 800488e:	f04f 0120 	mov.w	r1, #32
 8004892:	f381 8811 	msr	BASEPRI, r1
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	482a      	ldr	r0, [pc, #168]	; (8004944 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800489a:	f7fe fecd 	bl	8003638 <_PreparePacket>
 800489e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	623b      	str	r3, [r7, #32]
 80048ac:	e00b      	b.n	80048c6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	1c59      	adds	r1, r3, #1
 80048b6:	6279      	str	r1, [r7, #36]	; 0x24
 80048b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	09db      	lsrs	r3, r3, #7
 80048c4:	623b      	str	r3, [r7, #32]
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	2b7f      	cmp	r3, #127	; 0x7f
 80048ca:	d8f0      	bhi.n	80048ae <SEGGER_SYSVIEW_SendModule+0x66>
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	627a      	str	r2, [r7, #36]	; 0x24
 80048d2:	6a3a      	ldr	r2, [r7, #32]
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	e00b      	b.n	8004900 <SEGGER_SYSVIEW_SendModule+0xb8>
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	1c59      	adds	r1, r3, #1
 80048f0:	61f9      	str	r1, [r7, #28]
 80048f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	09db      	lsrs	r3, r3, #7
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b7f      	cmp	r3, #127	; 0x7f
 8004904:	d8f0      	bhi.n	80048e8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	61fa      	str	r2, [r7, #28]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2280      	movs	r2, #128	; 0x80
 800491c:	4619      	mov	r1, r3
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7fe fe3a 	bl	8003598 <_EncodeStr>
 8004924:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004926:	2216      	movs	r2, #22
 8004928:	68f9      	ldr	r1, [r7, #12]
 800492a:	6938      	ldr	r0, [r7, #16]
 800492c:	f7fe ff74 	bl	8003818 <_SendPacket>
      RECORD_END();
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004936:	bf00      	nop
 8004938:	3730      	adds	r7, #48	; 0x30
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	24079798 	.word	0x24079798
 8004944:	240797a0 	.word	0x240797a0

08004948 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00f      	beq.n	8004976 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f2      	bne.n	800495c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	24079798 	.word	0x24079798

08004984 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800498a:	f3ef 8311 	mrs	r3, BASEPRI
 800498e:	f04f 0120 	mov.w	r1, #32
 8004992:	f381 8811 	msr	BASEPRI, r1
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	4817      	ldr	r0, [pc, #92]	; (80049f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800499a:	f7fe fe4d 	bl	8003638 <_PreparePacket>
 800499e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	4b14      	ldr	r3, [pc, #80]	; (80049fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	e00b      	b.n	80049c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	1c59      	adds	r1, r3, #1
 80049b8:	6179      	str	r1, [r7, #20]
 80049ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	09db      	lsrs	r3, r3, #7
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b7f      	cmp	r3, #127	; 0x7f
 80049cc:	d8f0      	bhi.n	80049b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	617a      	str	r2, [r7, #20]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80049de:	221b      	movs	r2, #27
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	68b8      	ldr	r0, [r7, #8]
 80049e4:	f7fe ff18 	bl	8003818 <_SendPacket>
  RECORD_END();
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f383 8811 	msr	BASEPRI, r3
}
 80049ee:	bf00      	nop
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	240797a0 	.word	0x240797a0
 80049fc:	2407979c 	.word	0x2407979c

08004a00 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08a      	sub	sp, #40	; 0x28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a08:	f3ef 8311 	mrs	r3, BASEPRI
 8004a0c:	f04f 0120 	mov.w	r1, #32
 8004a10:	f381 8811 	msr	BASEPRI, r1
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	4827      	ldr	r0, [pc, #156]	; (8004ab4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004a18:	f7fe fe0e 	bl	8003638 <_PreparePacket>
 8004a1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	6938      	ldr	r0, [r7, #16]
 8004a24:	f7fe fdb8 	bl	8003598 <_EncodeStr>
 8004a28:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2e:	2301      	movs	r3, #1
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	e00b      	b.n	8004a4c <SEGGER_SYSVIEW_Warn+0x4c>
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	1c59      	adds	r1, r3, #1
 8004a3c:	6279      	str	r1, [r7, #36]	; 0x24
 8004a3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	09db      	lsrs	r3, r3, #7
 8004a4a:	623b      	str	r3, [r7, #32]
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a50:	d8f0      	bhi.n	8004a34 <SEGGER_SYSVIEW_Warn+0x34>
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	627a      	str	r2, [r7, #36]	; 0x24
 8004a58:	6a3a      	ldr	r2, [r7, #32]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e00b      	b.n	8004a84 <SEGGER_SYSVIEW_Warn+0x84>
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	61f9      	str	r1, [r7, #28]
 8004a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	09db      	lsrs	r3, r3, #7
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b7f      	cmp	r3, #127	; 0x7f
 8004a88:	d8f0      	bhi.n	8004a6c <SEGGER_SYSVIEW_Warn+0x6c>
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	61fa      	str	r2, [r7, #28]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004a9a:	221a      	movs	r2, #26
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	6938      	ldr	r0, [r7, #16]
 8004aa0:	f7fe feba 	bl	8003818 <_SendPacket>
  RECORD_END();
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f383 8811 	msr	BASEPRI, r3
}
 8004aaa:	bf00      	nop
 8004aac:	3728      	adds	r7, #40	; 0x28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	240797a0 	.word	0x240797a0

08004ab8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004abc:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004abe:	7e1b      	ldrb	r3, [r3, #24]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	440b      	add	r3, r1
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	336c      	adds	r3, #108	; 0x6c
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004ad4:	7e1b      	ldrb	r3, [r3, #24]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	490d      	ldr	r1, [pc, #52]	; (8004b10 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004ada:	4603      	mov	r3, r0
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	4403      	add	r3, r0
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	440b      	add	r3, r1
 8004ae4:	3370      	adds	r3, #112	; 0x70
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d00b      	beq.n	8004b04 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004aec:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004aee:	789b      	ldrb	r3, [r3, #2]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d107      	bne.n	8004b04 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004afa:	f7fe fda9 	bl	8003650 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004afe:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8004b04:	4b01      	ldr	r3, [pc, #4]	; (8004b0c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	24079770 	.word	0x24079770
 8004b10:	240016b0 	.word	0x240016b0

08004b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b1a:	f001 f897 	bl	8005c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b1e:	f000 f8bd 	bl	8004c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b22:	f000 fa9f 	bl	8005064 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8004b26:	f000 f9cb 	bl	8004ec0 <MX_FDCAN2_Init>
  MX_USB_OTG_FS_HCD_Init();
 8004b2a:	f000 fa79 	bl	8005020 <MX_USB_OTG_FS_HCD_Init>
  MX_USART3_UART_Init();
 8004b2e:	f000 fa2b 	bl	8004f88 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8004b32:	f000 f961 	bl	8004df8 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  // Program start LED - Visually indication program has started
  // Blue LED wblinks 5 times with T=100ms
    int Start_Counter = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 8004b3a:	e010      	b.n	8004b5e <main+0x4a>
    {
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004b3c:	2104      	movs	r1, #4
 8004b3e:	484a      	ldr	r0, [pc, #296]	; (8004c68 <main+0x154>)
 8004b40:	f003 fa57 	bl	8007ff2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004b44:	2064      	movs	r0, #100	; 0x64
 8004b46:	f001 f8dd 	bl	8005d04 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004b4a:	2104      	movs	r1, #4
 8004b4c:	4846      	ldr	r0, [pc, #280]	; (8004c68 <main+0x154>)
 8004b4e:	f003 fa50 	bl	8007ff2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004b52:	2064      	movs	r0, #100	; 0x64
 8004b54:	f001 f8d6 	bl	8005d04 <HAL_Delay>
		Start_Counter++;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	ddeb      	ble.n	8004b3c <main+0x28>
    }

	// Enable CCYCCNT Counter for SEGGER SYSTEM VIEW
	DWT->CTRL |= (1 << 0);
 8004b64:	4b41      	ldr	r3, [pc, #260]	; (8004c6c <main+0x158>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a40      	ldr	r2, [pc, #256]	; (8004c6c <main+0x158>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	6013      	str	r3, [r2, #0]

	// Used for SEGGER UART
	// SEGGER System View trace must be selected as UART with Baud Rate of 500Kb
	SEGGER_UART_init(500000);
 8004b70:	483f      	ldr	r0, [pc, #252]	; (8004c70 <main+0x15c>)
 8004b72:	f7fe f8b5 	bl	8002ce0 <SEGGER_UART_init>

	//Starting SEGGER SYSVIEW
	SEGGER_SYSVIEW_Conf();
 8004b76:	f7fd fedd 	bl	8002934 <SEGGER_SYSVIEW_Conf>

	// Printing Start of program on UART
	sprintf(usr_msg,"CAN Bus Gateway\r\n");
 8004b7a:	493e      	ldr	r1, [pc, #248]	; (8004c74 <main+0x160>)
 8004b7c:	483e      	ldr	r0, [pc, #248]	; (8004c78 <main+0x164>)
 8004b7e:	f008 f961 	bl	800ce44 <siprintf>
	USART_Send(usr_msg);
 8004b82:	483d      	ldr	r0, [pc, #244]	; (8004c78 <main+0x164>)
 8004b84:	f000 fb62 	bl	800524c <USART_Send>


	// Activating CAN ISR notification
	// FDCAN_IT_RX_FIFO0_FULL
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE | FDCAN_IT_TX_COMPLETE
 8004b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b8c:	f240 2101 	movw	r1, #513	; 0x201
 8004b90:	483a      	ldr	r0, [pc, #232]	; (8004c7c <main+0x168>)
 8004b92:	f002 fafd 	bl	8007190 <HAL_FDCAN_ActivateNotification>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <main+0x8c>
			, FDCAN_IT_TX_COMPLETE) != HAL_OK)
	{
		Error_Handler();
 8004b9c:	f000 fcac 	bl	80054f8 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE | FDCAN_IT_TX_COMPLETE
 8004ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba4:	f240 2101 	movw	r1, #513	; 0x201
 8004ba8:	4835      	ldr	r0, [pc, #212]	; (8004c80 <main+0x16c>)
 8004baa:	f002 faf1 	bl	8007190 <HAL_FDCAN_ActivateNotification>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <main+0xa4>
			, FDCAN_IT_TX_COMPLETE) != HAL_OK)
	{
		Error_Handler();
 8004bb4:	f000 fca0 	bl	80054f8 <Error_Handler>
	}

	// Starting CAN 1 & CAN 2
	HAL_FDCAN_Start(&hfdcan1);
 8004bb8:	4830      	ldr	r0, [pc, #192]	; (8004c7c <main+0x168>)
 8004bba:	f002 f8f5 	bl	8006da8 <HAL_FDCAN_Start>
	HAL_FDCAN_Start(&hfdcan2);
 8004bbe:	4830      	ldr	r0, [pc, #192]	; (8004c80 <main+0x16c>)
 8004bc0:	f002 f8f2 	bl	8006da8 <HAL_FDCAN_Start>

	//Creating a binary semaphore
	vSemaphoreCreateBinary(xBinarySemaphore);
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	2001      	movs	r0, #1
 8004bca:	f7fb fec4 	bl	8000956 <xQueueGenericCreate>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4a2c      	ldr	r2, [pc, #176]	; (8004c84 <main+0x170>)
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	4b2b      	ldr	r3, [pc, #172]	; (8004c84 <main+0x170>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d006      	beq.n	8004bea <main+0xd6>
 8004bdc:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <main+0x170>)
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	2300      	movs	r3, #0
 8004be2:	2200      	movs	r2, #0
 8004be4:	2100      	movs	r1, #0
 8004be6:	f7fb ff45 	bl	8000a74 <xQueueGenericSend>

	if(xBinarySemaphore != NULL)
 8004bea:	4b26      	ldr	r3, [pc, #152]	; (8004c84 <main+0x170>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01f      	beq.n	8004c32 <main+0x11e>
	{
		/* Create CAN1 Task. */
		xTaskCreate(	FDCAN1_Task,		/* Pointer to the function that implements the task. */
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004c00:	4921      	ldr	r1, [pc, #132]	; (8004c88 <main+0x174>)
 8004c02:	4822      	ldr	r0, [pc, #136]	; (8004c8c <main+0x178>)
 8004c04:	f7fc fa86 	bl	8001114 <xTaskCreate>
						NULL,		/* We are not using the task parameter. */
						1,			/* This task will run at priority 1. */
						NULL );		/* We are not using the task handle. */

		/* Create CAN2 Task */
		xTaskCreate( FDCAN2_Task, "CAN2 Task", 500, NULL, 1, NULL );
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2300      	movs	r3, #0
 8004c12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004c16:	491e      	ldr	r1, [pc, #120]	; (8004c90 <main+0x17c>)
 8004c18:	481e      	ldr	r0, [pc, #120]	; (8004c94 <main+0x180>)
 8004c1a:	f7fc fa7b 	bl	8001114 <xTaskCreate>

		//makes sema available for the first time
		xSemaphoreGive(xBinarySemaphore);
 8004c1e:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <main+0x170>)
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	2300      	movs	r3, #0
 8004c24:	2200      	movs	r2, #0
 8004c26:	2100      	movs	r1, #0
 8004c28:	f7fb ff24 	bl	8000a74 <xQueueGenericSend>

		/* Start the scheduler so our tasks start executing. */
		vTaskStartScheduler();
 8004c2c:	f7fc fc04 	bl	8001438 <vTaskStartScheduler>
 8004c30:	e006      	b.n	8004c40 <main+0x12c>
	}
	else
	{
		// UART print binary semaphore failed
		sprintf(usr_msg,"Failed to create binary semaphore\r\n");
 8004c32:	4919      	ldr	r1, [pc, #100]	; (8004c98 <main+0x184>)
 8004c34:	4810      	ldr	r0, [pc, #64]	; (8004c78 <main+0x164>)
 8004c36:	f008 f905 	bl	800ce44 <siprintf>
		USART_Send(usr_msg);
 8004c3a:	480f      	ldr	r0, [pc, #60]	; (8004c78 <main+0x164>)
 8004c3c:	f000 fb06 	bl	800524c <USART_Send>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // If Green LED flashed with T=500ms then you are inside main while loop
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004c40:	2102      	movs	r1, #2
 8004c42:	4809      	ldr	r0, [pc, #36]	; (8004c68 <main+0x154>)
 8004c44:	f003 f9d5 	bl	8007ff2 <HAL_GPIO_TogglePin>
  	  HAL_Delay(500);
 8004c48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c4c:	f001 f85a 	bl	8005d04 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004c50:	2102      	movs	r1, #2
 8004c52:	4805      	ldr	r0, [pc, #20]	; (8004c68 <main+0x154>)
 8004c54:	f003 f9cd 	bl	8007ff2 <HAL_GPIO_TogglePin>
  	  HAL_Delay(500);
 8004c58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c5c:	f001 f852 	bl	8005d04 <HAL_Delay>
  	  Start_Counter++;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3301      	adds	r3, #1
 8004c64:	607b      	str	r3, [r7, #4]
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004c66:	e7eb      	b.n	8004c40 <main+0x12c>
 8004c68:	58020800 	.word	0x58020800
 8004c6c:	e0001000 	.word	0xe0001000
 8004c70:	0007a120 	.word	0x0007a120
 8004c74:	0800d7ec 	.word	0x0800d7ec
 8004c78:	24079da8 	.word	0x24079da8
 8004c7c:	24079884 	.word	0x24079884
 8004c80:	24079924 	.word	0x24079924
 8004c84:	24079d58 	.word	0x24079d58
 8004c88:	0800d800 	.word	0x0800d800
 8004c8c:	08005175 	.word	0x08005175
 8004c90:	0800d80c 	.word	0x0800d80c
 8004c94:	080051e1 	.word	0x080051e1
 8004c98:	0800d818 	.word	0x0800d818

08004c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b09e      	sub	sp, #120	; 0x78
 8004ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ca6:	224c      	movs	r2, #76	; 0x4c
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f008 f8c2 	bl	800ce34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cb0:	f107 030c 	add.w	r3, r7, #12
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f008 f8bb 	bl	800ce34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004cbe:	2002      	movs	r0, #2
 8004cc0:	f003 fa38 	bl	8008134 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	4b48      	ldr	r3, [pc, #288]	; (8004dec <SystemClock_Config+0x150>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	4a47      	ldr	r2, [pc, #284]	; (8004dec <SystemClock_Config+0x150>)
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cd4:	4b45      	ldr	r3, [pc, #276]	; (8004dec <SystemClock_Config+0x150>)
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	4b44      	ldr	r3, [pc, #272]	; (8004df0 <SystemClock_Config+0x154>)
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	4a43      	ldr	r2, [pc, #268]	; (8004df0 <SystemClock_Config+0x154>)
 8004ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ce8:	6193      	str	r3, [r2, #24]
 8004cea:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <SystemClock_Config+0x154>)
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004cf6:	bf00      	nop
 8004cf8:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <SystemClock_Config+0x154>)
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d04:	d1f8      	bne.n	8004cf8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d06:	4b3b      	ldr	r3, [pc, #236]	; (8004df4 <SystemClock_Config+0x158>)
 8004d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d0c:	4a39      	ldr	r2, [pc, #228]	; (8004df4 <SystemClock_Config+0x158>)
 8004d0e:	f043 0302 	orr.w	r3, r3, #2
 8004d12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d16:	4b37      	ldr	r3, [pc, #220]	; (8004df4 <SystemClock_Config+0x158>)
 8004d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	607b      	str	r3, [r7, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004d24:	2300      	movs	r3, #0
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <SystemClock_Config+0x154>)
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	4a30      	ldr	r2, [pc, #192]	; (8004df0 <SystemClock_Config+0x154>)
 8004d2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d32:	6193      	str	r3, [r2, #24]
 8004d34:	4b2e      	ldr	r3, [pc, #184]	; (8004df0 <SystemClock_Config+0x154>)
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <SystemClock_Config+0x150>)
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	4a2a      	ldr	r2, [pc, #168]	; (8004dec <SystemClock_Config+0x150>)
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d4a:	4b28      	ldr	r3, [pc, #160]	; (8004dec <SystemClock_Config+0x150>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004d56:	bf00      	nop
 8004d58:	4b25      	ldr	r3, [pc, #148]	; (8004df0 <SystemClock_Config+0x154>)
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d64:	d1f8      	bne.n	8004d58 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d66:	2301      	movs	r3, #1
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d70:	2302      	movs	r3, #2
 8004d72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d74:	2302      	movs	r3, #2
 8004d76:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8004d7c:	2378      	movs	r3, #120	; 0x78
 8004d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004d80:	2302      	movs	r3, #2
 8004d82:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8004d84:	230f      	movs	r3, #15
 8004d86:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f003 fa13 	bl	80081c8 <HAL_RCC_OscConfig>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <SystemClock_Config+0x110>
  {
    Error_Handler();
 8004da8:	f000 fba6 	bl	80054f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dac:	233f      	movs	r3, #63	; 0x3f
 8004dae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004db0:	2303      	movs	r3, #3
 8004db2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004db8:	2308      	movs	r3, #8
 8004dba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004dbc:	2340      	movs	r3, #64	; 0x40
 8004dbe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004dca:	2340      	movs	r3, #64	; 0x40
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004dce:	f107 030c 	add.w	r3, r7, #12
 8004dd2:	2104      	movs	r1, #4
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f003 fe25 	bl	8008a24 <HAL_RCC_ClockConfig>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8004de0:	f000 fb8a 	bl	80054f8 <Error_Handler>
  }
}
 8004de4:	bf00      	nop
 8004de6:	3778      	adds	r7, #120	; 0x78
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	58000400 	.word	0x58000400
 8004df0:	58024800 	.word	0x58024800
 8004df4:	58024400 	.word	0x58024400

08004df8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004dfc:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004dfe:	4a2f      	ldr	r2, [pc, #188]	; (8004ebc <MX_FDCAN1_Init+0xc4>)
 8004e00:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004e02:	4b2d      	ldr	r3, [pc, #180]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	609a      	str	r2, [r3, #8]
  //hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004e08:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8004e0e:	4b2a      	ldr	r3, [pc, #168]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004e14:	4b28      	ldr	r3, [pc, #160]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004e1a:	4b27      	ldr	r3, [pc, #156]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8004e20:	4b25      	ldr	r3, [pc, #148]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e22:	2210      	movs	r2, #16
 8004e24:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8004e26:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 8004e2c:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e2e:	2204      	movs	r2, #4
 8004e30:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8004e32:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e34:	2203      	movs	r2, #3
 8004e36:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8004e38:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8004e44:	4b1c      	ldr	r3, [pc, #112]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8004e56:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004e5c:	4b16      	ldr	r3, [pc, #88]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 5;
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e64:	2205      	movs	r2, #5
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e6a:	2204      	movs	r2, #4
 8004e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 10;
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e70:	220a      	movs	r2, #10
 8004e72:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004e74:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e76:	2204      	movs	r2, #4
 8004e78:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e82:	2204      	movs	r2, #4
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 10;
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e88:	220a      	movs	r2, #10
 8004e8a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 10;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e8e:	220a      	movs	r2, #10
 8004e90:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 8004e92:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e94:	2210      	movs	r2, #16
 8004e96:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004ea4:	4804      	ldr	r0, [pc, #16]	; (8004eb8 <MX_FDCAN1_Init+0xc0>)
 8004ea6:	f001 fda1 	bl	80069ec <HAL_FDCAN_Init>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8004eb0:	f000 fb22 	bl	80054f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004eb4:	bf00      	nop
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	24079884 	.word	0x24079884
 8004ebc:	4000a000 	.word	0x4000a000

08004ec0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004ec4:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004ec6:	4a2f      	ldr	r2, [pc, #188]	; (8004f84 <MX_FDCAN2_Init+0xc4>)
 8004ec8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004eca:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	609a      	str	r2, [r3, #8]
  //hfdcan2.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8004ed0:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8004ed6:	4b2a      	ldr	r3, [pc, #168]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8004edc:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8004ee2:	4b27      	ldr	r3, [pc, #156]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004eea:	2210      	movs	r2, #16
 8004eec:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8004eee:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 4;
 8004ef4:	4b22      	ldr	r3, [pc, #136]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8004efa:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004efc:	2203      	movs	r2, #3
 8004efe:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8004f00:	4b1f      	ldr	r3, [pc, #124]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8004f06:	4b1e      	ldr	r3, [pc, #120]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8004f0c:	4b1c      	ldr	r3, [pc, #112]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8004f12:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8004f18:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8004f1e:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8004f24:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 5;
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f2c:	2205      	movs	r2, #5
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004f30:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f32:	2204      	movs	r2, #4
 8004f34:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 10;
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f38:	220a      	movs	r2, #10
 8004f3a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004f3c:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f3e:	2204      	movs	r2, #4
 8004f40:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 32;
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f44:	2220      	movs	r2, #32
 8004f46:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 10;
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f50:	220a      	movs	r2, #10
 8004f52:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f5c:	2210      	movs	r2, #16
 8004f5e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f68:	2204      	movs	r2, #4
 8004f6a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8004f6c:	4804      	ldr	r0, [pc, #16]	; (8004f80 <MX_FDCAN2_Init+0xc0>)
 8004f6e:	f001 fd3d 	bl	80069ec <HAL_FDCAN_Init>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8004f78:	f000 fabe 	bl	80054f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8004f7c:	bf00      	nop
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	24079924 	.word	0x24079924
 8004f84:	4000a400 	.word	0x4000a400

08004f88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004f8c:	4b22      	ldr	r3, [pc, #136]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004f8e:	4a23      	ldr	r2, [pc, #140]	; (800501c <MX_USART3_UART_Init+0x94>)
 8004f90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004f92:	4b21      	ldr	r3, [pc, #132]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004fa6:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004fae:	220c      	movs	r2, #12
 8004fb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fb2:	4b19      	ldr	r3, [pc, #100]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fb8:	4b17      	ldr	r3, [pc, #92]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fbe:	4b16      	ldr	r3, [pc, #88]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fca:	4b13      	ldr	r3, [pc, #76]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004fd0:	4811      	ldr	r0, [pc, #68]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004fd2:	f005 ff37 	bl	800ae44 <HAL_UART_Init>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004fdc:	f000 fa8c 	bl	80054f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	480d      	ldr	r0, [pc, #52]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004fe4:	f007 fbee 	bl	800c7c4 <HAL_UARTEx_SetTxFifoThreshold>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004fee:	f000 fa83 	bl	80054f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4808      	ldr	r0, [pc, #32]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8004ff6:	f007 fc23 	bl	800c840 <HAL_UARTEx_SetRxFifoThreshold>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005000:	f000 fa7a 	bl	80054f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005004:	4804      	ldr	r0, [pc, #16]	; (8005018 <MX_USART3_UART_Init+0x90>)
 8005006:	f007 fba4 	bl	800c752 <HAL_UARTEx_DisableFifoMode>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005010:	f000 fa72 	bl	80054f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005014:	bf00      	nop
 8005016:	bd80      	pop	{r7, pc}
 8005018:	240799c4 	.word	0x240799c4
 800501c:	40004800 	.word	0x40004800

08005020 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005024:	4b0d      	ldr	r3, [pc, #52]	; (800505c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8005026:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8005028:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800502a:	4b0c      	ldr	r3, [pc, #48]	; (800505c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800502c:	2210      	movs	r2, #16
 800502e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8005032:	2201      	movs	r2, #1
 8005034:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005036:	4b09      	ldr	r3, [pc, #36]	; (800505c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8005038:	2200      	movs	r2, #0
 800503a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800503e:	2202      	movs	r2, #2
 8005040:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8005044:	2200      	movs	r2, #0
 8005046:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005048:	4804      	ldr	r0, [pc, #16]	; (800505c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800504a:	f003 f811 	bl	8008070 <HAL_HCD_Init>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8005054:	f000 fa50 	bl	80054f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005058:	bf00      	nop
 800505a:	bd80      	pop	{r7, pc}
 800505c:	24079a54 	.word	0x24079a54
 8005060:	40080000 	.word	0x40080000

08005064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800506a:	f107 0314 	add.w	r3, r7, #20
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	605a      	str	r2, [r3, #4]
 8005074:	609a      	str	r2, [r3, #8]
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800507a:	4b3c      	ldr	r3, [pc, #240]	; (800516c <MX_GPIO_Init+0x108>)
 800507c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005080:	4a3a      	ldr	r2, [pc, #232]	; (800516c <MX_GPIO_Init+0x108>)
 8005082:	f043 0304 	orr.w	r3, r3, #4
 8005086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800508a:	4b38      	ldr	r3, [pc, #224]	; (800516c <MX_GPIO_Init+0x108>)
 800508c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005098:	4b34      	ldr	r3, [pc, #208]	; (800516c <MX_GPIO_Init+0x108>)
 800509a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800509e:	4a33      	ldr	r2, [pc, #204]	; (800516c <MX_GPIO_Init+0x108>)
 80050a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050a8:	4b30      	ldr	r3, [pc, #192]	; (800516c <MX_GPIO_Init+0x108>)
 80050aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050b6:	4b2d      	ldr	r3, [pc, #180]	; (800516c <MX_GPIO_Init+0x108>)
 80050b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050bc:	4a2b      	ldr	r2, [pc, #172]	; (800516c <MX_GPIO_Init+0x108>)
 80050be:	f043 0302 	orr.w	r3, r3, #2
 80050c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050c6:	4b29      	ldr	r3, [pc, #164]	; (800516c <MX_GPIO_Init+0x108>)
 80050c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <MX_GPIO_Init+0x108>)
 80050d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050da:	4a24      	ldr	r2, [pc, #144]	; (800516c <MX_GPIO_Init+0x108>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050e4:	4b21      	ldr	r3, [pc, #132]	; (800516c <MX_GPIO_Init+0x108>)
 80050e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	607b      	str	r3, [r7, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050f2:	4b1e      	ldr	r3, [pc, #120]	; (800516c <MX_GPIO_Init+0x108>)
 80050f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f8:	4a1c      	ldr	r2, [pc, #112]	; (800516c <MX_GPIO_Init+0x108>)
 80050fa:	f043 0308 	orr.w	r3, r3, #8
 80050fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005102:	4b1a      	ldr	r3, [pc, #104]	; (800516c <MX_GPIO_Init+0x108>)
 8005104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_LED_Pin|Green_LED_Pin|Blue_LED_Pin, GPIO_PIN_SET);
 8005110:	2201      	movs	r2, #1
 8005112:	2107      	movs	r1, #7
 8005114:	4816      	ldr	r0, [pc, #88]	; (8005170 <MX_GPIO_Init+0x10c>)
 8005116:	f002 ff53 	bl	8007fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800511a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800511e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005120:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800512a:	f107 0314 	add.w	r3, r7, #20
 800512e:	4619      	mov	r1, r3
 8005130:	480f      	ldr	r0, [pc, #60]	; (8005170 <MX_GPIO_Init+0x10c>)
 8005132:	f002 fd95 	bl	8007c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_LED_Pin Green_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Red_LED_Pin|Green_LED_Pin|Blue_LED_Pin;
 8005136:	2307      	movs	r3, #7
 8005138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800513a:	2301      	movs	r3, #1
 800513c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005142:	2300      	movs	r3, #0
 8005144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005146:	f107 0314 	add.w	r3, r7, #20
 800514a:	4619      	mov	r1, r3
 800514c:	4808      	ldr	r0, [pc, #32]	; (8005170 <MX_GPIO_Init+0x10c>)
 800514e:	f002 fd87 	bl	8007c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8005152:	2200      	movs	r2, #0
 8005154:	2106      	movs	r1, #6
 8005156:	2028      	movs	r0, #40	; 0x28
 8005158:	f000 febc 	bl	8005ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800515c:	2028      	movs	r0, #40	; 0x28
 800515e:	f000 fed3 	bl	8005f08 <HAL_NVIC_EnableIRQ>

}
 8005162:	bf00      	nop
 8005164:	3728      	adds	r7, #40	; 0x28
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	58024400 	.word	0x58024400
 8005170:	58020800 	.word	0x58020800

08005174 <FDCAN1_Task>:
/* USER CODE BEGIN 4 */
/*
 * This function will print CAN 1 received messages to UART
 */
void FDCAN1_Task( void *pvParameters )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "CAN1 message to be printed on UART\r\n";
 800517c:	4b13      	ldr	r3, [pc, #76]	; (80051cc <FDCAN1_Task+0x58>)
 800517e:	60fb      	str	r3, [r7, #12]

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		//Taking binary semaphore*/
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 8005180:	4b13      	ldr	r3, [pc, #76]	; (80051d0 <FDCAN1_Task+0x5c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f04f 31ff 	mov.w	r1, #4294967295
 8005188:	4618      	mov	r0, r3
 800518a:	f7fb fd89 	bl	8000ca0 <xQueueSemaphoreTake>

		/* Print out CAN1 message*/
		sprintf( usr_msg,"%s",pcTaskName);
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4910      	ldr	r1, [pc, #64]	; (80051d4 <FDCAN1_Task+0x60>)
 8005192:	4811      	ldr	r0, [pc, #68]	; (80051d8 <FDCAN1_Task+0x64>)
 8005194:	f007 fe56 	bl	800ce44 <siprintf>
		//USART_Send(usr_msg);

		//FDCAN1_Tx();

		// Blinking green LED with T=100ms
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005198:	2102      	movs	r1, #2
 800519a:	4810      	ldr	r0, [pc, #64]	; (80051dc <FDCAN1_Task+0x68>)
 800519c:	f002 ff29 	bl	8007ff2 <HAL_GPIO_TogglePin>
		HAL_Delay(10);
 80051a0:	200a      	movs	r0, #10
 80051a2:	f000 fdaf 	bl	8005d04 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80051a6:	2102      	movs	r1, #2
 80051a8:	480c      	ldr	r0, [pc, #48]	; (80051dc <FDCAN1_Task+0x68>)
 80051aa:	f002 ff22 	bl	8007ff2 <HAL_GPIO_TogglePin>
		HAL_Delay(10);
 80051ae:	200a      	movs	r0, #10
 80051b0:	f000 fda8 	bl	8005d04 <HAL_Delay>

		// Task is done and now giving back semaphore
		xSemaphoreGive(xBinarySemaphore);
 80051b4:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <FDCAN1_Task+0x5c>)
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	2200      	movs	r2, #0
 80051bc:	2100      	movs	r1, #0
 80051be:	f7fb fc59 	bl	8000a74 <xQueueGenericSend>

		/*Now this task will be blocked for 1 ticks */
		vTaskDelay( pdMS_TO_TICKS(1) );
 80051c2:	2001      	movs	r0, #1
 80051c4:	f7fc f8fe 	bl	80013c4 <vTaskDelay>
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 80051c8:	e7da      	b.n	8005180 <FDCAN1_Task+0xc>
 80051ca:	bf00      	nop
 80051cc:	0800d83c 	.word	0x0800d83c
 80051d0:	24079d58 	.word	0x24079d58
 80051d4:	0800d864 	.word	0x0800d864
 80051d8:	24079da8 	.word	0x24079da8
 80051dc:	58020800 	.word	0x58020800

080051e0 <FDCAN2_Task>:
/*-----------------------------------------------------------*/
/*
 * This function will print CAN 2 received messages to UART
 */
void FDCAN2_Task( void *pvParameters )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]

	const char *pcTaskName = "Task 2 is running\r\n";
 80051e8:	4b13      	ldr	r3, [pc, #76]	; (8005238 <FDCAN2_Task+0x58>)
 80051ea:	60fb      	str	r3, [r7, #12]
	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{

		//before printing , lets own the semaphore or take the semaphore */
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 80051ec:	4b13      	ldr	r3, [pc, #76]	; (800523c <FDCAN2_Task+0x5c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f04f 31ff 	mov.w	r1, #4294967295
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb fd53 	bl	8000ca0 <xQueueSemaphoreTake>

		/* Print out the name of this task. */
		sprintf( usr_msg,"%s",pcTaskName);
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4910      	ldr	r1, [pc, #64]	; (8005240 <FDCAN2_Task+0x60>)
 80051fe:	4811      	ldr	r0, [pc, #68]	; (8005244 <FDCAN2_Task+0x64>)
 8005200:	f007 fe20 	bl	800ce44 <siprintf>
		//USART_Send(usr_msg);

		//FDCAN2_Tx();

		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8005204:	2104      	movs	r1, #4
 8005206:	4810      	ldr	r0, [pc, #64]	; (8005248 <FDCAN2_Task+0x68>)
 8005208:	f002 fef3 	bl	8007ff2 <HAL_GPIO_TogglePin>
		HAL_Delay(10);
 800520c:	200a      	movs	r0, #10
 800520e:	f000 fd79 	bl	8005d04 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8005212:	2104      	movs	r1, #4
 8005214:	480c      	ldr	r0, [pc, #48]	; (8005248 <FDCAN2_Task+0x68>)
 8005216:	f002 feec 	bl	8007ff2 <HAL_GPIO_TogglePin>
		HAL_Delay(10);
 800521a:	200a      	movs	r0, #10
 800521c:	f000 fd72 	bl	8005d04 <HAL_Delay>

		//give the semaphore here. give operation increases the bin sema value back to 1
		xSemaphoreGive(xBinarySemaphore);
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <FDCAN2_Task+0x5c>)
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	2200      	movs	r2, #0
 8005228:	2100      	movs	r1, #0
 800522a:	f7fb fc23 	bl	8000a74 <xQueueGenericSend>

		/*Now this task will be blocked for 1 tick */
		vTaskDelay( pdMS_TO_TICKS(1));
 800522e:	2001      	movs	r0, #1
 8005230:	f7fc f8c8 	bl	80013c4 <vTaskDelay>
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 8005234:	e7da      	b.n	80051ec <FDCAN2_Task+0xc>
 8005236:	bf00      	nop
 8005238:	0800d868 	.word	0x0800d868
 800523c:	24079d58 	.word	0x24079d58
 8005240:	0800d864 	.word	0x0800d864
 8005244:	24079da8 	.word	0x24079da8
 8005248:	58020800 	.word	0x58020800

0800524c <USART_Send>:
	}
}


void USART_Send(char* user_data)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Transmit(&huart3,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY) != HAL_OK)
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7fb f88d 	bl	8000374 <strlen>
 800525a:	4603      	mov	r3, r0
 800525c:	b29a      	uxth	r2, r3
 800525e:	f04f 33ff 	mov.w	r3, #4294967295
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4805      	ldr	r0, [pc, #20]	; (800527c <USART_Send+0x30>)
 8005266:	f005 fe3d 	bl	800aee4 <HAL_UART_Transmit>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <USART_Send+0x28>
	{
		// Error occurred
		Error_Handler();
 8005270:	f000 f942 	bl	80054f8 <Error_Handler>
	}
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	240799c4 	.word	0x240799c4

08005280 <FDCAN1_Tx>:

/*
 * CAN 1 Transmit function
 */
void FDCAN1_Tx(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
//
//
//	HAL_FDCAN_GetError


	CANTxHeader.IdType = FDCAN_STANDARD_ID;
 8005284:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <FDCAN1_Tx+0x38>)
 8005286:	2200      	movs	r2, #0
 8005288:	605a      	str	r2, [r3, #4]
	CANTxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <FDCAN1_Tx+0x38>)
 800528c:	2200      	movs	r2, #0
 800528e:	609a      	str	r2, [r3, #8]
	CANTxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <FDCAN1_Tx+0x38>)
 8005292:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005296:	60da      	str	r2, [r3, #12]
	CANTxHeader.Identifier = 0x65;
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <FDCAN1_Tx+0x38>)
 800529a:	2265      	movs	r2, #101	; 0x65
 800529c:	601a      	str	r2, [r3, #0]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CANTxHeader, FDCAN1_Tx_Message) != HAL_OK)
 800529e:	4a07      	ldr	r2, [pc, #28]	; (80052bc <FDCAN1_Tx+0x3c>)
 80052a0:	4905      	ldr	r1, [pc, #20]	; (80052b8 <FDCAN1_Tx+0x38>)
 80052a2:	4807      	ldr	r0, [pc, #28]	; (80052c0 <FDCAN1_Tx+0x40>)
 80052a4:	f001 fdab 	bl	8006dfe <HAL_FDCAN_AddMessageToTxFifoQ>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <FDCAN1_Tx+0x32>
	{
		Error_Handler();
 80052ae:	f000 f923 	bl	80054f8 <Error_Handler>

	// Using pull method to wait until transmission is complete
	//while(HAL_FDCAN_IsTxBufferMessagePending(&hfdcan1, FDCAN_TX_BUFFER0));
//	sprintf(usr_msg,"FDCAN 1 message transmitted from FDCAN1_TX\r\n");
//	USART_Send(usr_msg);
}
 80052b2:	bf00      	nop
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	24079d5c 	.word	0x24079d5c
 80052bc:	24000010 	.word	0x24000010
 80052c0:	24079884 	.word	0x24079884

080052c4 <FDCAN2_Tx>:

/*
 * CAN 1 Transmit function
 */
void FDCAN2_Tx(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
	CANTxHeader.IdType = FDCAN_STANDARD_ID;
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <FDCAN2_Tx+0x38>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	605a      	str	r2, [r3, #4]
	CANTxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80052ce:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <FDCAN2_Tx+0x38>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	609a      	str	r2, [r3, #8]
	CANTxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <FDCAN2_Tx+0x38>)
 80052d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80052da:	60da      	str	r2, [r3, #12]
	CANTxHeader.Identifier = 0x35D;
 80052dc:	4b07      	ldr	r3, [pc, #28]	; (80052fc <FDCAN2_Tx+0x38>)
 80052de:	f240 325d 	movw	r2, #861	; 0x35d
 80052e2:	601a      	str	r2, [r3, #0]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CANTxHeader, FDCAN2_Tx_Message) != HAL_OK)
 80052e4:	4a06      	ldr	r2, [pc, #24]	; (8005300 <FDCAN2_Tx+0x3c>)
 80052e6:	4905      	ldr	r1, [pc, #20]	; (80052fc <FDCAN2_Tx+0x38>)
 80052e8:	4806      	ldr	r0, [pc, #24]	; (8005304 <FDCAN2_Tx+0x40>)
 80052ea:	f001 fd88 	bl	8006dfe <HAL_FDCAN_AddMessageToTxFifoQ>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <FDCAN2_Tx+0x34>
	{
		Error_Handler();
 80052f4:	f000 f900 	bl	80054f8 <Error_Handler>

	// Using pull method to wait until transmission is complete
	//while(HAL_FDCAN_IsTxBufferMessagePending(&hfdcan1, FDCAN_TX_BUFFER0));
//	sprintf(usr_msg,"FDCAN 2 message transmitted from FDCAN2_Tx\r\n");
//	USART_Send(usr_msg);
}
 80052f8:	bf00      	nop
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	24079d5c 	.word	0x24079d5c
 8005300:	24000018 	.word	0x24000018
 8005304:	24079924 	.word	0x24079924

08005308 <HAL_FDCAN_RxFifo0Callback>:
//	USART_Send(usr_msg);
//}


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
	if( RxFifo0ITs == FDCAN_IT_RX_FIFO0_FULL)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d107      	bne.n	8005328 <HAL_FDCAN_RxFifo0Callback+0x20>
	{
		sprintf(usr_msg,"FDCAN_IT_RX_FIFO0_FULL\r\n");
 8005318:	4921      	ldr	r1, [pc, #132]	; (80053a0 <HAL_FDCAN_RxFifo0Callback+0x98>)
 800531a:	4822      	ldr	r0, [pc, #136]	; (80053a4 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 800531c:	f007 fd92 	bl	800ce44 <siprintf>
		USART_Send(usr_msg);
 8005320:	4820      	ldr	r0, [pc, #128]	; (80053a4 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8005322:	f7ff ff93 	bl	800524c <USART_Send>

			// Send message to be transmitted to CAN 1
			FDCAN1_Tx();
		}
	}
}
 8005326:	e036      	b.n	8005396 <HAL_FDCAN_RxFifo0Callback+0x8e>
	else if( RxFifo0ITs == FDCAN_IT_RX_FIFO0_NEW_MESSAGE)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d133      	bne.n	8005396 <HAL_FDCAN_RxFifo0Callback+0x8e>
		if(hfdcan->Instance == FDCAN1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d117      	bne.n	8005368 <HAL_FDCAN_RxFifo0Callback+0x60>
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CANRxHeader, Received_msg) != HAL_OK)
 8005338:	4b1c      	ldr	r3, [pc, #112]	; (80053ac <HAL_FDCAN_RxFifo0Callback+0xa4>)
 800533a:	4a1d      	ldr	r2, [pc, #116]	; (80053b0 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 800533c:	2140      	movs	r1, #64	; 0x40
 800533e:	481d      	ldr	r0, [pc, #116]	; (80053b4 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8005340:	f001 fdb8 	bl	8006eb4 <HAL_FDCAN_GetRxMessage>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <HAL_FDCAN_RxFifo0Callback+0x46>
				Error_Handler();
 800534a:	f000 f8d5 	bl	80054f8 <Error_Handler>
			USART_Send((char*)Received_msg);
 800534e:	4817      	ldr	r0, [pc, #92]	; (80053ac <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8005350:	f7ff ff7c 	bl	800524c <USART_Send>
			sprintf(usr_msg,"\n");
 8005354:	4918      	ldr	r1, [pc, #96]	; (80053b8 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8005356:	4813      	ldr	r0, [pc, #76]	; (80053a4 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8005358:	f007 fd74 	bl	800ce44 <siprintf>
			USART_Send(usr_msg);
 800535c:	4811      	ldr	r0, [pc, #68]	; (80053a4 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 800535e:	f7ff ff75 	bl	800524c <USART_Send>
			FDCAN2_Tx();
 8005362:	f7ff ffaf 	bl	80052c4 <FDCAN2_Tx>
}
 8005366:	e016      	b.n	8005396 <HAL_FDCAN_RxFifo0Callback+0x8e>
			if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &CANRxHeader, Received_msg) != HAL_OK)
 8005368:	4b10      	ldr	r3, [pc, #64]	; (80053ac <HAL_FDCAN_RxFifo0Callback+0xa4>)
 800536a:	4a11      	ldr	r2, [pc, #68]	; (80053b0 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 800536c:	2140      	movs	r1, #64	; 0x40
 800536e:	4813      	ldr	r0, [pc, #76]	; (80053bc <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8005370:	f001 fda0 	bl	8006eb4 <HAL_FDCAN_GetRxMessage>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_FDCAN_RxFifo0Callback+0x76>
				Error_Handler();
 800537a:	f000 f8bd 	bl	80054f8 <Error_Handler>
			USART_Send((char*)Received_msg);
 800537e:	480b      	ldr	r0, [pc, #44]	; (80053ac <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8005380:	f7ff ff64 	bl	800524c <USART_Send>
			sprintf(usr_msg,"\n");
 8005384:	490c      	ldr	r1, [pc, #48]	; (80053b8 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8005386:	4807      	ldr	r0, [pc, #28]	; (80053a4 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8005388:	f007 fd5c 	bl	800ce44 <siprintf>
			USART_Send(usr_msg);
 800538c:	4805      	ldr	r0, [pc, #20]	; (80053a4 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 800538e:	f7ff ff5d 	bl	800524c <USART_Send>
			FDCAN1_Tx();
 8005392:	f7ff ff75 	bl	8005280 <FDCAN1_Tx>
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	0800d87c 	.word	0x0800d87c
 80053a4:	24079da8 	.word	0x24079da8
 80053a8:	4000a000 	.word	0x4000a000
 80053ac:	24079ea4 	.word	0x24079ea4
 80053b0:	24079d80 	.word	0x24079d80
 80053b4:	24079884 	.word	0x24079884
 80053b8:	0800d898 	.word	0x0800d898
 80053bc:	24079924 	.word	0x24079924

080053c0 <HAL_FDCAN_RxBufferNewMessageCallback>:
}



void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]

}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_FDCAN_ErrorCallback>:
uint32_t HAL_FDCAN_IsRxBufferMessageAvailable(FDCAN_HandleTypeDef *hfdcan, uint32_t RxBufferIndex);
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData);
*/

void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	sprintf(usr_msg,"CAN Error\r\n");
 80053dc:	490d      	ldr	r1, [pc, #52]	; (8005414 <HAL_FDCAN_ErrorCallback+0x40>)
 80053de:	480e      	ldr	r0, [pc, #56]	; (8005418 <HAL_FDCAN_ErrorCallback+0x44>)
 80053e0:	f007 fd30 	bl	800ce44 <siprintf>
	USART_Send(usr_msg);
 80053e4:	480c      	ldr	r0, [pc, #48]	; (8005418 <HAL_FDCAN_ErrorCallback+0x44>)
 80053e6:	f7ff ff31 	bl	800524c <USART_Send>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 80053ea:	2201      	movs	r2, #1
 80053ec:	2107      	movs	r1, #7
 80053ee:	480b      	ldr	r0, [pc, #44]	; (800541c <HAL_FDCAN_ErrorCallback+0x48>)
 80053f0:	f002 fde6 	bl	8007fc0 <HAL_GPIO_WritePin>
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80053f4:	2102      	movs	r1, #2
 80053f6:	4809      	ldr	r0, [pc, #36]	; (800541c <HAL_FDCAN_ErrorCallback+0x48>)
 80053f8:	f002 fdfb 	bl	8007ff2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80053fc:	2064      	movs	r0, #100	; 0x64
 80053fe:	f000 fc81 	bl	8005d04 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005402:	2102      	movs	r1, #2
 8005404:	4805      	ldr	r0, [pc, #20]	; (800541c <HAL_FDCAN_ErrorCallback+0x48>)
 8005406:	f002 fdf4 	bl	8007ff2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800540a:	2064      	movs	r0, #100	; 0x64
 800540c:	f000 fc7a 	bl	8005d04 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005410:	e7f0      	b.n	80053f4 <HAL_FDCAN_ErrorCallback+0x20>
 8005412:	bf00      	nop
 8005414:	0800d89c 	.word	0x0800d89c
 8005418:	24079da8 	.word	0x24079da8
 800541c:	58020800 	.word	0x58020800

08005420 <HAL_FDCAN_ErrorStatusCallback>:
	}
}


void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	if (hfdcan->Instance == FDCAN1)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a21      	ldr	r2, [pc, #132]	; (80054b4 <HAL_FDCAN_ErrorStatusCallback+0x94>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d109      	bne.n	8005448 <HAL_FDCAN_ErrorStatusCallback+0x28>
	{
		sprintf(usr_msg,"FDCAN 1 Error: \r\n");
 8005434:	4920      	ldr	r1, [pc, #128]	; (80054b8 <HAL_FDCAN_ErrorStatusCallback+0x98>)
 8005436:	4821      	ldr	r0, [pc, #132]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 8005438:	f007 fd04 	bl	800ce44 <siprintf>
		USART_Send(usr_msg);
 800543c:	481f      	ldr	r0, [pc, #124]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 800543e:	f7ff ff05 	bl	800524c <USART_Send>
		MX_FDCAN1_Init();
 8005442:	f7ff fcd9 	bl	8004df8 <MX_FDCAN1_Init>
 8005446:	e008      	b.n	800545a <HAL_FDCAN_ErrorStatusCallback+0x3a>
	}
	else
	{
		sprintf(usr_msg,"FDCAN 2 Error: \r\n");
 8005448:	491d      	ldr	r1, [pc, #116]	; (80054c0 <HAL_FDCAN_ErrorStatusCallback+0xa0>)
 800544a:	481c      	ldr	r0, [pc, #112]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 800544c:	f007 fcfa 	bl	800ce44 <siprintf>
		USART_Send(usr_msg);
 8005450:	481a      	ldr	r0, [pc, #104]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 8005452:	f7ff fefb 	bl	800524c <USART_Send>
		MX_FDCAN2_Init();
 8005456:	f7ff fd33 	bl	8004ec0 <MX_FDCAN2_Init>
	}

	if( ErrorStatusITs == FDCAN_IT_ERROR_PASSIVE)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005460:	d106      	bne.n	8005470 <HAL_FDCAN_ErrorStatusCallback+0x50>
	{
		sprintf(usr_msg,"FDCAN_IT_ERROR_PASSIVE\r\n");
 8005462:	4918      	ldr	r1, [pc, #96]	; (80054c4 <HAL_FDCAN_ErrorStatusCallback+0xa4>)
 8005464:	4815      	ldr	r0, [pc, #84]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 8005466:	f007 fced 	bl	800ce44 <siprintf>
		USART_Send(usr_msg);
 800546a:	4814      	ldr	r0, [pc, #80]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 800546c:	f7ff feee 	bl	800524c <USART_Send>
	}
	if( ErrorStatusITs == FDCAN_IT_ERROR_WARNING)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005476:	d106      	bne.n	8005486 <HAL_FDCAN_ErrorStatusCallback+0x66>
	{
		sprintf(usr_msg,"FDCAN_IT_ERROR_WARNING\r\n");
 8005478:	4913      	ldr	r1, [pc, #76]	; (80054c8 <HAL_FDCAN_ErrorStatusCallback+0xa8>)
 800547a:	4810      	ldr	r0, [pc, #64]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 800547c:	f007 fce2 	bl	800ce44 <siprintf>
		USART_Send(usr_msg);
 8005480:	480e      	ldr	r0, [pc, #56]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 8005482:	f7ff fee3 	bl	800524c <USART_Send>
	}
	if( ErrorStatusITs == FDCAN_IT_BUS_OFF)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800548c:	d106      	bne.n	800549c <HAL_FDCAN_ErrorStatusCallback+0x7c>
	{
		sprintf(usr_msg,"FDCAN_IT_BUS_OFF\r\n");
 800548e:	490f      	ldr	r1, [pc, #60]	; (80054cc <HAL_FDCAN_ErrorStatusCallback+0xac>)
 8005490:	480a      	ldr	r0, [pc, #40]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 8005492:	f007 fcd7 	bl	800ce44 <siprintf>
		USART_Send(usr_msg);
 8005496:	4809      	ldr	r0, [pc, #36]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 8005498:	f7ff fed8 	bl	800524c <USART_Send>
	}

	sprintf(usr_msg,"\r\n");
 800549c:	490c      	ldr	r1, [pc, #48]	; (80054d0 <HAL_FDCAN_ErrorStatusCallback+0xb0>)
 800549e:	4807      	ldr	r0, [pc, #28]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 80054a0:	f007 fcd0 	bl	800ce44 <siprintf>
	USART_Send(usr_msg);
 80054a4:	4805      	ldr	r0, [pc, #20]	; (80054bc <HAL_FDCAN_ErrorStatusCallback+0x9c>)
 80054a6:	f7ff fed1 	bl	800524c <USART_Send>
}
 80054aa:	bf00      	nop
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	4000a000 	.word	0x4000a000
 80054b8:	0800d8a8 	.word	0x0800d8a8
 80054bc:	24079da8 	.word	0x24079da8
 80054c0:	0800d8bc 	.word	0x0800d8bc
 80054c4:	0800d8d0 	.word	0x0800d8d0
 80054c8:	0800d8ec 	.word	0x0800d8ec
 80054cc:	0800d908 	.word	0x0800d908
 80054d0:	0800d91c 	.word	0x0800d91c

080054d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a04      	ldr	r2, [pc, #16]	; (80054f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80054e6:	f000 fbed 	bl	8005cc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40001000 	.word	0x40001000

080054f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054fc:	b672      	cpsid	i
}
 80054fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  sprintf(usr_msg,"Error_Handler\r\n");
 8005500:	490a      	ldr	r1, [pc, #40]	; (800552c <Error_Handler+0x34>)
 8005502:	480b      	ldr	r0, [pc, #44]	; (8005530 <Error_Handler+0x38>)
 8005504:	f007 fc9e 	bl	800ce44 <siprintf>
  USART_Send(usr_msg);
 8005508:	4809      	ldr	r0, [pc, #36]	; (8005530 <Error_Handler+0x38>)
 800550a:	f7ff fe9f 	bl	800524c <USART_Send>
  while (1)
  {
	  //Red LED blinks with a T=100ms
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800550e:	2101      	movs	r1, #1
 8005510:	4808      	ldr	r0, [pc, #32]	; (8005534 <Error_Handler+0x3c>)
 8005512:	f002 fd6e 	bl	8007ff2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8005516:	2064      	movs	r0, #100	; 0x64
 8005518:	f000 fbf4 	bl	8005d04 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800551c:	2101      	movs	r1, #1
 800551e:	4805      	ldr	r0, [pc, #20]	; (8005534 <Error_Handler+0x3c>)
 8005520:	f002 fd67 	bl	8007ff2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8005524:	2064      	movs	r0, #100	; 0x64
 8005526:	f000 fbed 	bl	8005d04 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800552a:	e7f0      	b.n	800550e <Error_Handler+0x16>
 800552c:	0800d920 	.word	0x0800d920
 8005530:	24079da8 	.word	0x24079da8
 8005534:	58020800 	.word	0x58020800

08005538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <HAL_MspInit+0x30>)
 8005540:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005544:	4a08      	ldr	r2, [pc, #32]	; (8005568 <HAL_MspInit+0x30>)
 8005546:	f043 0302 	orr.w	r3, r3, #2
 800554a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <HAL_MspInit+0x30>)
 8005550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	58024400 	.word	0x58024400

0800556c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b0ba      	sub	sp, #232	; 0xe8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005574:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	609a      	str	r2, [r3, #8]
 8005580:	60da      	str	r2, [r3, #12]
 8005582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005584:	f107 0318 	add.w	r3, r7, #24
 8005588:	22bc      	movs	r2, #188	; 0xbc
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f007 fc51 	bl	800ce34 <memset>
  if(hfdcan->Instance==FDCAN1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a5c      	ldr	r2, [pc, #368]	; (8005708 <HAL_FDCAN_MspInit+0x19c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d155      	bne.n	8005648 <HAL_FDCAN_MspInit+0xdc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800559c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80055a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055aa:	f107 0318 	add.w	r3, r7, #24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f003 fe06 	bl	80091c0 <HAL_RCCEx_PeriphCLKConfig>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 80055ba:	f7ff ff9d 	bl	80054f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80055be:	4b53      	ldr	r3, [pc, #332]	; (800570c <HAL_FDCAN_MspInit+0x1a0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3301      	adds	r3, #1
 80055c4:	4a51      	ldr	r2, [pc, #324]	; (800570c <HAL_FDCAN_MspInit+0x1a0>)
 80055c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80055c8:	4b50      	ldr	r3, [pc, #320]	; (800570c <HAL_FDCAN_MspInit+0x1a0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d10e      	bne.n	80055ee <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80055d0:	4b4f      	ldr	r3, [pc, #316]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 80055d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80055d6:	4a4e      	ldr	r2, [pc, #312]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 80055d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055dc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80055e0:	4b4b      	ldr	r3, [pc, #300]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 80055e2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055ee:	4b48      	ldr	r3, [pc, #288]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 80055f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055f4:	4a46      	ldr	r2, [pc, #280]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 80055f6:	f043 0308 	orr.w	r3, r3, #8
 80055fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055fe:	4b44      	ldr	r3, [pc, #272]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 8005600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800560c:	2303      	movs	r3, #3
 800560e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005612:	2302      	movs	r3, #2
 8005614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005618:	2300      	movs	r3, #0
 800561a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800561e:	2300      	movs	r3, #0
 8005620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005624:	2309      	movs	r3, #9
 8005626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800562a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800562e:	4619      	mov	r1, r3
 8005630:	4838      	ldr	r0, [pc, #224]	; (8005714 <HAL_FDCAN_MspInit+0x1a8>)
 8005632:	f002 fb15 	bl	8007c60 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8005636:	2200      	movs	r2, #0
 8005638:	2101      	movs	r1, #1
 800563a:	2013      	movs	r0, #19
 800563c:	f000 fc4a 	bl	8005ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8005640:	2013      	movs	r0, #19
 8005642:	f000 fc61 	bl	8005f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8005646:	e05a      	b.n	80056fe <HAL_FDCAN_MspInit+0x192>
  else if(hfdcan->Instance==FDCAN2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a32      	ldr	r2, [pc, #200]	; (8005718 <HAL_FDCAN_MspInit+0x1ac>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d155      	bne.n	80056fe <HAL_FDCAN_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005656:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8005658:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800565c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005660:	f107 0318 	add.w	r3, r7, #24
 8005664:	4618      	mov	r0, r3
 8005666:	f003 fdab 	bl	80091c0 <HAL_RCCEx_PeriphCLKConfig>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_FDCAN_MspInit+0x108>
      Error_Handler();
 8005670:	f7ff ff42 	bl	80054f8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8005674:	4b25      	ldr	r3, [pc, #148]	; (800570c <HAL_FDCAN_MspInit+0x1a0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3301      	adds	r3, #1
 800567a:	4a24      	ldr	r2, [pc, #144]	; (800570c <HAL_FDCAN_MspInit+0x1a0>)
 800567c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800567e:	4b23      	ldr	r3, [pc, #140]	; (800570c <HAL_FDCAN_MspInit+0x1a0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d10e      	bne.n	80056a4 <HAL_FDCAN_MspInit+0x138>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8005686:	4b22      	ldr	r3, [pc, #136]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 8005688:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800568c:	4a20      	ldr	r2, [pc, #128]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 800568e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005692:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005696:	4b1e      	ldr	r3, [pc, #120]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 8005698:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a4:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 80056a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056aa:	4a19      	ldr	r2, [pc, #100]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056b4:	4b16      	ldr	r3, [pc, #88]	; (8005710 <HAL_FDCAN_MspInit+0x1a4>)
 80056b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80056c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80056c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ca:	2302      	movs	r3, #2
 80056cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056d6:	2300      	movs	r3, #0
 80056d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80056dc:	2309      	movs	r3, #9
 80056de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80056e6:	4619      	mov	r1, r3
 80056e8:	480c      	ldr	r0, [pc, #48]	; (800571c <HAL_FDCAN_MspInit+0x1b0>)
 80056ea:	f002 fab9 	bl	8007c60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 1, 0);
 80056ee:	2200      	movs	r2, #0
 80056f0:	2101      	movs	r1, #1
 80056f2:	2014      	movs	r0, #20
 80056f4:	f000 fbee 	bl	8005ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80056f8:	2014      	movs	r0, #20
 80056fa:	f000 fc05 	bl	8005f08 <HAL_NVIC_EnableIRQ>
}
 80056fe:	bf00      	nop
 8005700:	37e8      	adds	r7, #232	; 0xe8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	4000a000 	.word	0x4000a000
 800570c:	24079eac 	.word	0x24079eac
 8005710:	58024400 	.word	0x58024400
 8005714:	58020c00 	.word	0x58020c00
 8005718:	4000a400 	.word	0x4000a400
 800571c:	58020400 	.word	0x58020400

08005720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b0b8      	sub	sp, #224	; 0xe0
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005728:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	605a      	str	r2, [r3, #4]
 8005732:	609a      	str	r2, [r3, #8]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005738:	f107 0310 	add.w	r3, r7, #16
 800573c:	22bc      	movs	r2, #188	; 0xbc
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f007 fb77 	bl	800ce34 <memset>
  if(huart->Instance==USART3)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a29      	ldr	r2, [pc, #164]	; (80057f0 <HAL_UART_MspInit+0xd0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d14a      	bne.n	80057e6 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005750:	2302      	movs	r3, #2
 8005752:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005754:	2300      	movs	r3, #0
 8005756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800575a:	f107 0310 	add.w	r3, r7, #16
 800575e:	4618      	mov	r0, r3
 8005760:	f003 fd2e 	bl	80091c0 <HAL_RCCEx_PeriphCLKConfig>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800576a:	f7ff fec5 	bl	80054f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800576e:	4b21      	ldr	r3, [pc, #132]	; (80057f4 <HAL_UART_MspInit+0xd4>)
 8005770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005774:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <HAL_UART_MspInit+0xd4>)
 8005776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800577a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800577e:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <HAL_UART_MspInit+0xd4>)
 8005780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800578c:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <HAL_UART_MspInit+0xd4>)
 800578e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005792:	4a18      	ldr	r2, [pc, #96]	; (80057f4 <HAL_UART_MspInit+0xd4>)
 8005794:	f043 0302 	orr.w	r3, r3, #2
 8005798:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800579c:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <HAL_UART_MspInit+0xd4>)
 800579e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	60bb      	str	r3, [r7, #8]
 80057a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80057aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80057ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b2:	2302      	movs	r3, #2
 80057b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b8:	2300      	movs	r3, #0
 80057ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057be:	2300      	movs	r3, #0
 80057c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80057c4:	2307      	movs	r3, #7
 80057c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80057ce:	4619      	mov	r1, r3
 80057d0:	4809      	ldr	r0, [pc, #36]	; (80057f8 <HAL_UART_MspInit+0xd8>)
 80057d2:	f002 fa45 	bl	8007c60 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80057d6:	2200      	movs	r2, #0
 80057d8:	2102      	movs	r1, #2
 80057da:	2027      	movs	r0, #39	; 0x27
 80057dc:	f000 fb7a 	bl	8005ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80057e0:	2027      	movs	r0, #39	; 0x27
 80057e2:	f000 fb91 	bl	8005f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80057e6:	bf00      	nop
 80057e8:	37e0      	adds	r7, #224	; 0xe0
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40004800 	.word	0x40004800
 80057f4:	58024400 	.word	0x58024400
 80057f8:	58020400 	.word	0x58020400

080057fc <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b0b8      	sub	sp, #224	; 0xe0
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	609a      	str	r2, [r3, #8]
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005814:	f107 0310 	add.w	r3, r7, #16
 8005818:	22bc      	movs	r2, #188	; 0xbc
 800581a:	2100      	movs	r1, #0
 800581c:	4618      	mov	r0, r3
 800581e:	f007 fb09 	bl	800ce34 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a27      	ldr	r2, [pc, #156]	; (80058c4 <HAL_HCD_MspInit+0xc8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d146      	bne.n	80058ba <HAL_HCD_MspInit+0xbe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800582c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005830:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8005832:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800583a:	f107 0310 	add.w	r3, r7, #16
 800583e:	4618      	mov	r0, r3
 8005840:	f003 fcbe 	bl	80091c0 <HAL_RCCEx_PeriphCLKConfig>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 800584a:	f7ff fe55 	bl	80054f8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800584e:	f002 fcab 	bl	80081a8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005852:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <HAL_HCD_MspInit+0xcc>)
 8005854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005858:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <HAL_HCD_MspInit+0xcc>)
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005862:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <HAL_HCD_MspInit+0xcc>)
 8005864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005870:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005878:	2302      	movs	r3, #2
 800587a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800587e:	2300      	movs	r3, #0
 8005880:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005884:	2300      	movs	r3, #0
 8005886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800588a:	230a      	movs	r3, #10
 800588c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005890:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005894:	4619      	mov	r1, r3
 8005896:	480d      	ldr	r0, [pc, #52]	; (80058cc <HAL_HCD_MspInit+0xd0>)
 8005898:	f002 f9e2 	bl	8007c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800589c:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <HAL_HCD_MspInit+0xcc>)
 800589e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80058a2:	4a09      	ldr	r2, [pc, #36]	; (80058c8 <HAL_HCD_MspInit+0xcc>)
 80058a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_HCD_MspInit+0xcc>)
 80058ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80058b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80058ba:	bf00      	nop
 80058bc:	37e0      	adds	r7, #224	; 0xe0
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40080000 	.word	0x40080000
 80058c8:	58024400 	.word	0x58024400
 80058cc:	58020000 	.word	0x58020000

080058d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b090      	sub	sp, #64	; 0x40
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	d827      	bhi.n	800592e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80058de:	2200      	movs	r2, #0
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	2036      	movs	r0, #54	; 0x36
 80058e4:	f000 faf6 	bl	8005ed4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80058e8:	2036      	movs	r0, #54	; 0x36
 80058ea:	f000 fb0d 	bl	8005f08 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80058ee:	4a29      	ldr	r2, [pc, #164]	; (8005994 <HAL_InitTick+0xc4>)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80058f4:	4b28      	ldr	r3, [pc, #160]	; (8005998 <HAL_InitTick+0xc8>)
 80058f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058fa:	4a27      	ldr	r2, [pc, #156]	; (8005998 <HAL_InitTick+0xc8>)
 80058fc:	f043 0310 	orr.w	r3, r3, #16
 8005900:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <HAL_InitTick+0xc8>)
 8005906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005912:	f107 0210 	add.w	r2, r7, #16
 8005916:	f107 0314 	add.w	r3, r7, #20
 800591a:	4611      	mov	r1, r2
 800591c:	4618      	mov	r0, r3
 800591e:	f003 fc0d 	bl	800913c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <HAL_InitTick+0x6a>
 800592c:	e001      	b.n	8005932 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e02b      	b.n	800598a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005932:	f003 fbd7 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
 8005936:	63f8      	str	r0, [r7, #60]	; 0x3c
 8005938:	e004      	b.n	8005944 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800593a:	f003 fbd3 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
 800593e:	4603      	mov	r3, r0
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005946:	4a15      	ldr	r2, [pc, #84]	; (800599c <HAL_InitTick+0xcc>)
 8005948:	fba2 2303 	umull	r2, r3, r2, r3
 800594c:	0c9b      	lsrs	r3, r3, #18
 800594e:	3b01      	subs	r3, #1
 8005950:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005952:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <HAL_InitTick+0xd0>)
 8005954:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <HAL_InitTick+0xd4>)
 8005956:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005958:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <HAL_InitTick+0xd0>)
 800595a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800595e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005960:	4a0f      	ldr	r2, [pc, #60]	; (80059a0 <HAL_InitTick+0xd0>)
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005966:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <HAL_InitTick+0xd0>)
 8005968:	2200      	movs	r2, #0
 800596a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800596c:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <HAL_InitTick+0xd0>)
 800596e:	2200      	movs	r2, #0
 8005970:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005972:	480b      	ldr	r0, [pc, #44]	; (80059a0 <HAL_InitTick+0xd0>)
 8005974:	f004 ff8c 	bl	800a890 <HAL_TIM_Base_Init>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800597e:	4808      	ldr	r0, [pc, #32]	; (80059a0 <HAL_InitTick+0xd0>)
 8005980:	f004 ffe8 	bl	800a954 <HAL_TIM_Base_Start_IT>
 8005984:	4603      	mov	r3, r0
 8005986:	e000      	b.n	800598a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
}
 800598a:	4618      	mov	r0, r3
 800598c:	3740      	adds	r7, #64	; 0x40
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	24000028 	.word	0x24000028
 8005998:	58024400 	.word	0x58024400
 800599c:	431bde83 	.word	0x431bde83
 80059a0:	24079eb0 	.word	0x24079eb0
 80059a4:	40001000 	.word	0x40001000

080059a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80059ac:	2102      	movs	r1, #2
 80059ae:	4807      	ldr	r0, [pc, #28]	; (80059cc <NMI_Handler+0x24>)
 80059b0:	f002 fb1f 	bl	8007ff2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80059b4:	2064      	movs	r0, #100	; 0x64
 80059b6:	f000 f9a5 	bl	8005d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80059ba:	2102      	movs	r1, #2
 80059bc:	4803      	ldr	r0, [pc, #12]	; (80059cc <NMI_Handler+0x24>)
 80059be:	f002 fb18 	bl	8007ff2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80059c2:	2064      	movs	r0, #100	; 0x64
 80059c4:	f000 f99e 	bl	8005d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80059c8:	e7f0      	b.n	80059ac <NMI_Handler+0x4>
 80059ca:	bf00      	nop
 80059cc:	58020800 	.word	0x58020800

080059d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80059d4:	2102      	movs	r1, #2
 80059d6:	4807      	ldr	r0, [pc, #28]	; (80059f4 <HardFault_Handler+0x24>)
 80059d8:	f002 fb0b 	bl	8007ff2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80059dc:	2064      	movs	r0, #100	; 0x64
 80059de:	f000 f991 	bl	8005d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80059e2:	2102      	movs	r1, #2
 80059e4:	4803      	ldr	r0, [pc, #12]	; (80059f4 <HardFault_Handler+0x24>)
 80059e6:	f002 fb04 	bl	8007ff2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80059ea:	2064      	movs	r0, #100	; 0x64
 80059ec:	f000 f98a 	bl	8005d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80059f0:	e7f0      	b.n	80059d4 <HardFault_Handler+0x4>
 80059f2:	bf00      	nop
 80059f4:	58020800 	.word	0x58020800

080059f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80059fc:	2102      	movs	r1, #2
 80059fe:	4807      	ldr	r0, [pc, #28]	; (8005a1c <MemManage_Handler+0x24>)
 8005a00:	f002 faf7 	bl	8007ff2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005a04:	2064      	movs	r0, #100	; 0x64
 8005a06:	f000 f97d 	bl	8005d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005a0a:	2102      	movs	r1, #2
 8005a0c:	4803      	ldr	r0, [pc, #12]	; (8005a1c <MemManage_Handler+0x24>)
 8005a0e:	f002 faf0 	bl	8007ff2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005a12:	2064      	movs	r0, #100	; 0x64
 8005a14:	f000 f976 	bl	8005d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005a18:	e7f0      	b.n	80059fc <MemManage_Handler+0x4>
 8005a1a:	bf00      	nop
 8005a1c:	58020800 	.word	0x58020800

08005a20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005a24:	2102      	movs	r1, #2
 8005a26:	4807      	ldr	r0, [pc, #28]	; (8005a44 <BusFault_Handler+0x24>)
 8005a28:	f002 fae3 	bl	8007ff2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005a2c:	2064      	movs	r0, #100	; 0x64
 8005a2e:	f000 f969 	bl	8005d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005a32:	2102      	movs	r1, #2
 8005a34:	4803      	ldr	r0, [pc, #12]	; (8005a44 <BusFault_Handler+0x24>)
 8005a36:	f002 fadc 	bl	8007ff2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005a3a:	2064      	movs	r0, #100	; 0x64
 8005a3c:	f000 f962 	bl	8005d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005a40:	e7f0      	b.n	8005a24 <BusFault_Handler+0x4>
 8005a42:	bf00      	nop
 8005a44:	58020800 	.word	0x58020800

08005a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	4807      	ldr	r0, [pc, #28]	; (8005a6c <UsageFault_Handler+0x24>)
 8005a50:	f002 facf 	bl	8007ff2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005a54:	2064      	movs	r0, #100	; 0x64
 8005a56:	f000 f955 	bl	8005d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	4803      	ldr	r0, [pc, #12]	; (8005a6c <UsageFault_Handler+0x24>)
 8005a5e:	f002 fac8 	bl	8007ff2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005a62:	2064      	movs	r0, #100	; 0x64
 8005a64:	f000 f94e 	bl	8005d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8005a68:	e7f0      	b.n	8005a4c <UsageFault_Handler+0x4>
 8005a6a:	bf00      	nop
 8005a6c:	58020800 	.word	0x58020800

08005a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005a84:	4802      	ldr	r0, [pc, #8]	; (8005a90 <FDCAN1_IT0_IRQHandler+0x10>)
 8005a86:	f001 fbfd 	bl	8007284 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	24079884 	.word	0x24079884

08005a94 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8005a98:	4802      	ldr	r0, [pc, #8]	; (8005aa4 <FDCAN2_IT0_IRQHandler+0x10>)
 8005a9a:	f001 fbf3 	bl	8007284 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	24079924 	.word	0x24079924

08005aa8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005aac:	4802      	ldr	r0, [pc, #8]	; (8005ab8 <USART3_IRQHandler+0x10>)
 8005aae:	f005 faaf 	bl	800b010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005ab2:	bf00      	nop
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	240799c4 	.word	0x240799c4

08005abc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005ac0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005ac4:	f002 faaf 	bl	8008026 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005ac8:	bf00      	nop
 8005aca:	bd80      	pop	{r7, pc}

08005acc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005ad0:	4802      	ldr	r0, [pc, #8]	; (8005adc <TIM6_DAC_IRQHandler+0x10>)
 8005ad2:	f004 ffb7 	bl	800aa44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005ad6:	bf00      	nop
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	24079eb0 	.word	0x24079eb0

08005ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005ae4:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <SystemInit+0xec>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	4a38      	ldr	r2, [pc, #224]	; (8005bcc <SystemInit+0xec>)
 8005aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005af4:	4b36      	ldr	r3, [pc, #216]	; (8005bd0 <SystemInit+0xf0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	2b06      	cmp	r3, #6
 8005afe:	d807      	bhi.n	8005b10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b00:	4b33      	ldr	r3, [pc, #204]	; (8005bd0 <SystemInit+0xf0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f023 030f 	bic.w	r3, r3, #15
 8005b08:	4a31      	ldr	r2, [pc, #196]	; (8005bd0 <SystemInit+0xf0>)
 8005b0a:	f043 0307 	orr.w	r3, r3, #7
 8005b0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005b10:	4b30      	ldr	r3, [pc, #192]	; (8005bd4 <SystemInit+0xf4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a2f      	ldr	r2, [pc, #188]	; (8005bd4 <SystemInit+0xf4>)
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b1c:	4b2d      	ldr	r3, [pc, #180]	; (8005bd4 <SystemInit+0xf4>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005b22:	4b2c      	ldr	r3, [pc, #176]	; (8005bd4 <SystemInit+0xf4>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	492b      	ldr	r1, [pc, #172]	; (8005bd4 <SystemInit+0xf4>)
 8005b28:	4b2b      	ldr	r3, [pc, #172]	; (8005bd8 <SystemInit+0xf8>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b2e:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <SystemInit+0xf0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b3a:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <SystemInit+0xf0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f023 030f 	bic.w	r3, r3, #15
 8005b42:	4a23      	ldr	r2, [pc, #140]	; (8005bd0 <SystemInit+0xf0>)
 8005b44:	f043 0307 	orr.w	r3, r3, #7
 8005b48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005b4a:	4b22      	ldr	r3, [pc, #136]	; (8005bd4 <SystemInit+0xf4>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005b50:	4b20      	ldr	r3, [pc, #128]	; (8005bd4 <SystemInit+0xf4>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005b56:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <SystemInit+0xf4>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005b5c:	4b1d      	ldr	r3, [pc, #116]	; (8005bd4 <SystemInit+0xf4>)
 8005b5e:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <SystemInit+0xfc>)
 8005b60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005b62:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <SystemInit+0xf4>)
 8005b64:	4a1e      	ldr	r2, [pc, #120]	; (8005be0 <SystemInit+0x100>)
 8005b66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005b68:	4b1a      	ldr	r3, [pc, #104]	; (8005bd4 <SystemInit+0xf4>)
 8005b6a:	4a1e      	ldr	r2, [pc, #120]	; (8005be4 <SystemInit+0x104>)
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005b6e:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <SystemInit+0xf4>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005b74:	4b17      	ldr	r3, [pc, #92]	; (8005bd4 <SystemInit+0xf4>)
 8005b76:	4a1b      	ldr	r2, [pc, #108]	; (8005be4 <SystemInit+0x104>)
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005b7a:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <SystemInit+0xf4>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005b80:	4b14      	ldr	r3, [pc, #80]	; (8005bd4 <SystemInit+0xf4>)
 8005b82:	4a18      	ldr	r2, [pc, #96]	; (8005be4 <SystemInit+0x104>)
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005b86:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <SystemInit+0xf4>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005b8c:	4b11      	ldr	r3, [pc, #68]	; (8005bd4 <SystemInit+0xf4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a10      	ldr	r2, [pc, #64]	; (8005bd4 <SystemInit+0xf4>)
 8005b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005b98:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <SystemInit+0xf4>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <SystemInit+0x108>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <SystemInit+0x10c>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005baa:	d202      	bcs.n	8005bb2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <SystemInit+0x110>)
 8005bae:	2201      	movs	r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005bb2:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <SystemInit+0x114>)
 8005bb4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bba:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <SystemInit+0xec>)
 8005bbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bc0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005bc2:	bf00      	nop
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	e000ed00 	.word	0xe000ed00
 8005bd0:	52002000 	.word	0x52002000
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8005bdc:	02020200 	.word	0x02020200
 8005be0:	01ff0000 	.word	0x01ff0000
 8005be4:	01010280 	.word	0x01010280
 8005be8:	5c001000 	.word	0x5c001000
 8005bec:	ffff0000 	.word	0xffff0000
 8005bf0:	51008108 	.word	0x51008108
 8005bf4:	52004000 	.word	0x52004000

08005bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005bfc:	f7ff ff70 	bl	8005ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c00:	480c      	ldr	r0, [pc, #48]	; (8005c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005c02:	490d      	ldr	r1, [pc, #52]	; (8005c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005c04:	4a0d      	ldr	r2, [pc, #52]	; (8005c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c08:	e002      	b.n	8005c10 <LoopCopyDataInit>

08005c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c0e:	3304      	adds	r3, #4

08005c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c14:	d3f9      	bcc.n	8005c0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c16:	4a0a      	ldr	r2, [pc, #40]	; (8005c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005c18:	4c0a      	ldr	r4, [pc, #40]	; (8005c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c1c:	e001      	b.n	8005c22 <LoopFillZerobss>

08005c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c20:	3204      	adds	r2, #4

08005c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c24:	d3fb      	bcc.n	8005c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005c26:	f007 f8c3 	bl	800cdb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c2a:	f7fe ff73 	bl	8004b14 <main>
  bx  lr
 8005c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005c30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005c34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005c38:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8005c3c:	0800da34 	.word	0x0800da34
  ldr r2, =_sbss
 8005c40:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 8005c44:	24079f14 	.word	0x24079f14

08005c48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c48:	e7fe      	b.n	8005c48 <ADC3_IRQHandler>
	...

08005c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c52:	2003      	movs	r0, #3
 8005c54:	f000 f933 	bl	8005ebe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c58:	f003 f89a 	bl	8008d90 <HAL_RCC_GetSysClockFreq>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	4b15      	ldr	r3, [pc, #84]	; (8005cb4 <HAL_Init+0x68>)
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	4913      	ldr	r1, [pc, #76]	; (8005cb8 <HAL_Init+0x6c>)
 8005c6a:	5ccb      	ldrb	r3, [r1, r3]
 8005c6c:	f003 031f 	and.w	r3, r3, #31
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c76:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <HAL_Init+0x68>)
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	4a0e      	ldr	r2, [pc, #56]	; (8005cb8 <HAL_Init+0x6c>)
 8005c80:	5cd3      	ldrb	r3, [r2, r3]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8c:	4a0b      	ldr	r2, [pc, #44]	; (8005cbc <HAL_Init+0x70>)
 8005c8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c90:	4a0b      	ldr	r2, [pc, #44]	; (8005cc0 <HAL_Init+0x74>)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c96:	200f      	movs	r0, #15
 8005c98:	f7ff fe1a 	bl	80058d0 <HAL_InitTick>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e002      	b.n	8005cac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005ca6:	f7ff fc47 	bl	8005538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	58024400 	.word	0x58024400
 8005cb8:	0800d9a8 	.word	0x0800d9a8
 8005cbc:	24000024 	.word	0x24000024
 8005cc0:	24000020 	.word	0x24000020

08005cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005cc8:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <HAL_IncTick+0x20>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <HAL_IncTick+0x24>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	4a04      	ldr	r2, [pc, #16]	; (8005ce8 <HAL_IncTick+0x24>)
 8005cd6:	6013      	str	r3, [r2, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	2400002c 	.word	0x2400002c
 8005ce8:	24079efc 	.word	0x24079efc

08005cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  return uwTick;
 8005cf0:	4b03      	ldr	r3, [pc, #12]	; (8005d00 <HAL_GetTick+0x14>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	24079efc 	.word	0x24079efc

08005d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d0c:	f7ff ffee 	bl	8005cec <HAL_GetTick>
 8005d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d005      	beq.n	8005d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <HAL_Delay+0x44>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d2a:	bf00      	nop
 8005d2c:	f7ff ffde 	bl	8005cec <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d8f7      	bhi.n	8005d2c <HAL_Delay+0x28>
  {
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	2400002c 	.word	0x2400002c

08005d4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005d50:	4b03      	ldr	r3, [pc, #12]	; (8005d60 <HAL_GetREVID+0x14>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	0c1b      	lsrs	r3, r3, #16
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	5c001000 	.word	0x5c001000

08005d64 <__NVIC_SetPriorityGrouping>:
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d74:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <__NVIC_SetPriorityGrouping+0x40>)
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d80:	4013      	ands	r3, r2
 8005d82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <__NVIC_SetPriorityGrouping+0x44>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d92:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <__NVIC_SetPriorityGrouping+0x40>)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	60d3      	str	r3, [r2, #12]
}
 8005d98:	bf00      	nop
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	e000ed00 	.word	0xe000ed00
 8005da8:	05fa0000 	.word	0x05fa0000

08005dac <__NVIC_GetPriorityGrouping>:
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005db0:	4b04      	ldr	r3, [pc, #16]	; (8005dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	0a1b      	lsrs	r3, r3, #8
 8005db6:	f003 0307 	and.w	r3, r3, #7
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	e000ed00 	.word	0xe000ed00

08005dc8 <__NVIC_EnableIRQ>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	db0b      	blt.n	8005df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dda:	88fb      	ldrh	r3, [r7, #6]
 8005ddc:	f003 021f 	and.w	r2, r3, #31
 8005de0:	4907      	ldr	r1, [pc, #28]	; (8005e00 <__NVIC_EnableIRQ+0x38>)
 8005de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	2001      	movs	r0, #1
 8005dea:	fa00 f202 	lsl.w	r2, r0, r2
 8005dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	e000e100 	.word	0xe000e100

08005e04 <__NVIC_SetPriority>:
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	6039      	str	r1, [r7, #0]
 8005e0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	db0a      	blt.n	8005e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	490c      	ldr	r1, [pc, #48]	; (8005e50 <__NVIC_SetPriority+0x4c>)
 8005e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e22:	0112      	lsls	r2, r2, #4
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	440b      	add	r3, r1
 8005e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e2c:	e00a      	b.n	8005e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	4908      	ldr	r1, [pc, #32]	; (8005e54 <__NVIC_SetPriority+0x50>)
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	3b04      	subs	r3, #4
 8005e3c:	0112      	lsls	r2, r2, #4
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	440b      	add	r3, r1
 8005e42:	761a      	strb	r2, [r3, #24]
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	e000e100 	.word	0xe000e100
 8005e54:	e000ed00 	.word	0xe000ed00

08005e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	; 0x24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f1c3 0307 	rsb	r3, r3, #7
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	bf28      	it	cs
 8005e76:	2304      	movcs	r3, #4
 8005e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	2b06      	cmp	r3, #6
 8005e80:	d902      	bls.n	8005e88 <NVIC_EncodePriority+0x30>
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	3b03      	subs	r3, #3
 8005e86:	e000      	b.n	8005e8a <NVIC_EncodePriority+0x32>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	43da      	mvns	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	401a      	ands	r2, r3
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eaa:	43d9      	mvns	r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eb0:	4313      	orrs	r3, r2
         );
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3724      	adds	r7, #36	; 0x24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff ff4c 	bl	8005d64 <__NVIC_SetPriorityGrouping>
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ee2:	f7ff ff63 	bl	8005dac <__NVIC_GetPriorityGrouping>
 8005ee6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	6978      	ldr	r0, [r7, #20]
 8005eee:	f7ff ffb3 	bl	8005e58 <NVIC_EncodePriority>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff ff82 	bl	8005e04 <__NVIC_SetPriority>
}
 8005f00:	bf00      	nop
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff ff56 	bl	8005dc8 <__NVIC_EnableIRQ>
}
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005f2c:	f7ff fede 	bl	8005cec <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e2dc      	b.n	80064f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d008      	beq.n	8005f5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2280      	movs	r2, #128	; 0x80
 8005f4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e2cd      	b.n	80064f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a76      	ldr	r2, [pc, #472]	; (8006138 <HAL_DMA_Abort+0x214>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04a      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a74      	ldr	r2, [pc, #464]	; (800613c <HAL_DMA_Abort+0x218>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d045      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a73      	ldr	r2, [pc, #460]	; (8006140 <HAL_DMA_Abort+0x21c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d040      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a71      	ldr	r2, [pc, #452]	; (8006144 <HAL_DMA_Abort+0x220>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03b      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a70      	ldr	r2, [pc, #448]	; (8006148 <HAL_DMA_Abort+0x224>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d036      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a6e      	ldr	r2, [pc, #440]	; (800614c <HAL_DMA_Abort+0x228>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d031      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a6d      	ldr	r2, [pc, #436]	; (8006150 <HAL_DMA_Abort+0x22c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02c      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a6b      	ldr	r2, [pc, #428]	; (8006154 <HAL_DMA_Abort+0x230>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d027      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a6a      	ldr	r2, [pc, #424]	; (8006158 <HAL_DMA_Abort+0x234>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a68      	ldr	r2, [pc, #416]	; (800615c <HAL_DMA_Abort+0x238>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a67      	ldr	r2, [pc, #412]	; (8006160 <HAL_DMA_Abort+0x23c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a65      	ldr	r2, [pc, #404]	; (8006164 <HAL_DMA_Abort+0x240>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a64      	ldr	r2, [pc, #400]	; (8006168 <HAL_DMA_Abort+0x244>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a62      	ldr	r2, [pc, #392]	; (800616c <HAL_DMA_Abort+0x248>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a61      	ldr	r2, [pc, #388]	; (8006170 <HAL_DMA_Abort+0x24c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a5f      	ldr	r2, [pc, #380]	; (8006174 <HAL_DMA_Abort+0x250>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <HAL_DMA_Abort+0xda>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <HAL_DMA_Abort+0xdc>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d013      	beq.n	800602c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 021e 	bic.w	r2, r2, #30
 8006012:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006022:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	e00a      	b.n	8006042 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 020e 	bic.w	r2, r2, #14
 800603a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a3c      	ldr	r2, [pc, #240]	; (8006138 <HAL_DMA_Abort+0x214>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d072      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a3a      	ldr	r2, [pc, #232]	; (800613c <HAL_DMA_Abort+0x218>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d06d      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a39      	ldr	r2, [pc, #228]	; (8006140 <HAL_DMA_Abort+0x21c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d068      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a37      	ldr	r2, [pc, #220]	; (8006144 <HAL_DMA_Abort+0x220>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d063      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a36      	ldr	r2, [pc, #216]	; (8006148 <HAL_DMA_Abort+0x224>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d05e      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a34      	ldr	r2, [pc, #208]	; (800614c <HAL_DMA_Abort+0x228>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d059      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a33      	ldr	r2, [pc, #204]	; (8006150 <HAL_DMA_Abort+0x22c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d054      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a31      	ldr	r2, [pc, #196]	; (8006154 <HAL_DMA_Abort+0x230>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d04f      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a30      	ldr	r2, [pc, #192]	; (8006158 <HAL_DMA_Abort+0x234>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d04a      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2e      	ldr	r2, [pc, #184]	; (800615c <HAL_DMA_Abort+0x238>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d045      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_DMA_Abort+0x23c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d040      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a2b      	ldr	r2, [pc, #172]	; (8006164 <HAL_DMA_Abort+0x240>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d03b      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a2a      	ldr	r2, [pc, #168]	; (8006168 <HAL_DMA_Abort+0x244>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d036      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a28      	ldr	r2, [pc, #160]	; (800616c <HAL_DMA_Abort+0x248>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d031      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a27      	ldr	r2, [pc, #156]	; (8006170 <HAL_DMA_Abort+0x24c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d02c      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a25      	ldr	r2, [pc, #148]	; (8006174 <HAL_DMA_Abort+0x250>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d027      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a24      	ldr	r2, [pc, #144]	; (8006178 <HAL_DMA_Abort+0x254>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d022      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a22      	ldr	r2, [pc, #136]	; (800617c <HAL_DMA_Abort+0x258>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d01d      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a21      	ldr	r2, [pc, #132]	; (8006180 <HAL_DMA_Abort+0x25c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d018      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_DMA_Abort+0x260>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <HAL_DMA_Abort+0x264>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00e      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1c      	ldr	r2, [pc, #112]	; (800618c <HAL_DMA_Abort+0x268>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <HAL_DMA_Abort+0x26c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <HAL_DMA_Abort+0x270>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d132      	bne.n	8006198 <HAL_DMA_Abort+0x274>
 8006132:	2301      	movs	r3, #1
 8006134:	e031      	b.n	800619a <HAL_DMA_Abort+0x276>
 8006136:	bf00      	nop
 8006138:	40020010 	.word	0x40020010
 800613c:	40020028 	.word	0x40020028
 8006140:	40020040 	.word	0x40020040
 8006144:	40020058 	.word	0x40020058
 8006148:	40020070 	.word	0x40020070
 800614c:	40020088 	.word	0x40020088
 8006150:	400200a0 	.word	0x400200a0
 8006154:	400200b8 	.word	0x400200b8
 8006158:	40020410 	.word	0x40020410
 800615c:	40020428 	.word	0x40020428
 8006160:	40020440 	.word	0x40020440
 8006164:	40020458 	.word	0x40020458
 8006168:	40020470 	.word	0x40020470
 800616c:	40020488 	.word	0x40020488
 8006170:	400204a0 	.word	0x400204a0
 8006174:	400204b8 	.word	0x400204b8
 8006178:	58025408 	.word	0x58025408
 800617c:	5802541c 	.word	0x5802541c
 8006180:	58025430 	.word	0x58025430
 8006184:	58025444 	.word	0x58025444
 8006188:	58025458 	.word	0x58025458
 800618c:	5802546c 	.word	0x5802546c
 8006190:	58025480 	.word	0x58025480
 8006194:	58025494 	.word	0x58025494
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a6d      	ldr	r2, [pc, #436]	; (8006368 <HAL_DMA_Abort+0x444>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d04a      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a6b      	ldr	r2, [pc, #428]	; (800636c <HAL_DMA_Abort+0x448>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d045      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a6a      	ldr	r2, [pc, #424]	; (8006370 <HAL_DMA_Abort+0x44c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d040      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a68      	ldr	r2, [pc, #416]	; (8006374 <HAL_DMA_Abort+0x450>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d03b      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a67      	ldr	r2, [pc, #412]	; (8006378 <HAL_DMA_Abort+0x454>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d036      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a65      	ldr	r2, [pc, #404]	; (800637c <HAL_DMA_Abort+0x458>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d031      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a64      	ldr	r2, [pc, #400]	; (8006380 <HAL_DMA_Abort+0x45c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d02c      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a62      	ldr	r2, [pc, #392]	; (8006384 <HAL_DMA_Abort+0x460>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d027      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a61      	ldr	r2, [pc, #388]	; (8006388 <HAL_DMA_Abort+0x464>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d022      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a5f      	ldr	r2, [pc, #380]	; (800638c <HAL_DMA_Abort+0x468>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01d      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a5e      	ldr	r2, [pc, #376]	; (8006390 <HAL_DMA_Abort+0x46c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d018      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a5c      	ldr	r2, [pc, #368]	; (8006394 <HAL_DMA_Abort+0x470>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d013      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a5b      	ldr	r2, [pc, #364]	; (8006398 <HAL_DMA_Abort+0x474>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00e      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a59      	ldr	r2, [pc, #356]	; (800639c <HAL_DMA_Abort+0x478>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a58      	ldr	r2, [pc, #352]	; (80063a0 <HAL_DMA_Abort+0x47c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a56      	ldr	r2, [pc, #344]	; (80063a4 <HAL_DMA_Abort+0x480>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d108      	bne.n	8006260 <HAL_DMA_Abort+0x33c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e007      	b.n	8006270 <HAL_DMA_Abort+0x34c>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006270:	e013      	b.n	800629a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006272:	f7ff fd3b 	bl	8005cec <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b05      	cmp	r3, #5
 800627e:	d90c      	bls.n	800629a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2203      	movs	r2, #3
 800628a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e12d      	b.n	80064f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e5      	bne.n	8006272 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a2f      	ldr	r2, [pc, #188]	; (8006368 <HAL_DMA_Abort+0x444>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d04a      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a2d      	ldr	r2, [pc, #180]	; (800636c <HAL_DMA_Abort+0x448>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d045      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2c      	ldr	r2, [pc, #176]	; (8006370 <HAL_DMA_Abort+0x44c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d040      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a2a      	ldr	r2, [pc, #168]	; (8006374 <HAL_DMA_Abort+0x450>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d03b      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a29      	ldr	r2, [pc, #164]	; (8006378 <HAL_DMA_Abort+0x454>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d036      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a27      	ldr	r2, [pc, #156]	; (800637c <HAL_DMA_Abort+0x458>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d031      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a26      	ldr	r2, [pc, #152]	; (8006380 <HAL_DMA_Abort+0x45c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d02c      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a24      	ldr	r2, [pc, #144]	; (8006384 <HAL_DMA_Abort+0x460>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d027      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a23      	ldr	r2, [pc, #140]	; (8006388 <HAL_DMA_Abort+0x464>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d022      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a21      	ldr	r2, [pc, #132]	; (800638c <HAL_DMA_Abort+0x468>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d01d      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a20      	ldr	r2, [pc, #128]	; (8006390 <HAL_DMA_Abort+0x46c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d018      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1e      	ldr	r2, [pc, #120]	; (8006394 <HAL_DMA_Abort+0x470>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <HAL_DMA_Abort+0x474>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00e      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1b      	ldr	r2, [pc, #108]	; (800639c <HAL_DMA_Abort+0x478>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1a      	ldr	r2, [pc, #104]	; (80063a0 <HAL_DMA_Abort+0x47c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <HAL_DMA_Abort+0x480>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d101      	bne.n	800634a <HAL_DMA_Abort+0x426>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_DMA_Abort+0x428>
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d02b      	beq.n	80063a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006354:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	223f      	movs	r2, #63	; 0x3f
 8006360:	409a      	lsls	r2, r3
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	609a      	str	r2, [r3, #8]
 8006366:	e02a      	b.n	80063be <HAL_DMA_Abort+0x49a>
 8006368:	40020010 	.word	0x40020010
 800636c:	40020028 	.word	0x40020028
 8006370:	40020040 	.word	0x40020040
 8006374:	40020058 	.word	0x40020058
 8006378:	40020070 	.word	0x40020070
 800637c:	40020088 	.word	0x40020088
 8006380:	400200a0 	.word	0x400200a0
 8006384:	400200b8 	.word	0x400200b8
 8006388:	40020410 	.word	0x40020410
 800638c:	40020428 	.word	0x40020428
 8006390:	40020440 	.word	0x40020440
 8006394:	40020458 	.word	0x40020458
 8006398:	40020470 	.word	0x40020470
 800639c:	40020488 	.word	0x40020488
 80063a0:	400204a0 	.word	0x400204a0
 80063a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b2:	f003 031f 	and.w	r3, r3, #31
 80063b6:	2201      	movs	r2, #1
 80063b8:	409a      	lsls	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a4f      	ldr	r2, [pc, #316]	; (8006500 <HAL_DMA_Abort+0x5dc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d072      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a4d      	ldr	r2, [pc, #308]	; (8006504 <HAL_DMA_Abort+0x5e0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d06d      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a4c      	ldr	r2, [pc, #304]	; (8006508 <HAL_DMA_Abort+0x5e4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d068      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a4a      	ldr	r2, [pc, #296]	; (800650c <HAL_DMA_Abort+0x5e8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d063      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a49      	ldr	r2, [pc, #292]	; (8006510 <HAL_DMA_Abort+0x5ec>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d05e      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a47      	ldr	r2, [pc, #284]	; (8006514 <HAL_DMA_Abort+0x5f0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d059      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a46      	ldr	r2, [pc, #280]	; (8006518 <HAL_DMA_Abort+0x5f4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d054      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a44      	ldr	r2, [pc, #272]	; (800651c <HAL_DMA_Abort+0x5f8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d04f      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a43      	ldr	r2, [pc, #268]	; (8006520 <HAL_DMA_Abort+0x5fc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d04a      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a41      	ldr	r2, [pc, #260]	; (8006524 <HAL_DMA_Abort+0x600>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d045      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a40      	ldr	r2, [pc, #256]	; (8006528 <HAL_DMA_Abort+0x604>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d040      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a3e      	ldr	r2, [pc, #248]	; (800652c <HAL_DMA_Abort+0x608>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d03b      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a3d      	ldr	r2, [pc, #244]	; (8006530 <HAL_DMA_Abort+0x60c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d036      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a3b      	ldr	r2, [pc, #236]	; (8006534 <HAL_DMA_Abort+0x610>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d031      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a3a      	ldr	r2, [pc, #232]	; (8006538 <HAL_DMA_Abort+0x614>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d02c      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a38      	ldr	r2, [pc, #224]	; (800653c <HAL_DMA_Abort+0x618>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d027      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a37      	ldr	r2, [pc, #220]	; (8006540 <HAL_DMA_Abort+0x61c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a35      	ldr	r2, [pc, #212]	; (8006544 <HAL_DMA_Abort+0x620>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01d      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a34      	ldr	r2, [pc, #208]	; (8006548 <HAL_DMA_Abort+0x624>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a32      	ldr	r2, [pc, #200]	; (800654c <HAL_DMA_Abort+0x628>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a31      	ldr	r2, [pc, #196]	; (8006550 <HAL_DMA_Abort+0x62c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a2f      	ldr	r2, [pc, #188]	; (8006554 <HAL_DMA_Abort+0x630>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a2e      	ldr	r2, [pc, #184]	; (8006558 <HAL_DMA_Abort+0x634>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a2c      	ldr	r2, [pc, #176]	; (800655c <HAL_DMA_Abort+0x638>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d101      	bne.n	80064b2 <HAL_DMA_Abort+0x58e>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_DMA_Abort+0x590>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d015      	beq.n	80064e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00c      	beq.n	80064e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40020010 	.word	0x40020010
 8006504:	40020028 	.word	0x40020028
 8006508:	40020040 	.word	0x40020040
 800650c:	40020058 	.word	0x40020058
 8006510:	40020070 	.word	0x40020070
 8006514:	40020088 	.word	0x40020088
 8006518:	400200a0 	.word	0x400200a0
 800651c:	400200b8 	.word	0x400200b8
 8006520:	40020410 	.word	0x40020410
 8006524:	40020428 	.word	0x40020428
 8006528:	40020440 	.word	0x40020440
 800652c:	40020458 	.word	0x40020458
 8006530:	40020470 	.word	0x40020470
 8006534:	40020488 	.word	0x40020488
 8006538:	400204a0 	.word	0x400204a0
 800653c:	400204b8 	.word	0x400204b8
 8006540:	58025408 	.word	0x58025408
 8006544:	5802541c 	.word	0x5802541c
 8006548:	58025430 	.word	0x58025430
 800654c:	58025444 	.word	0x58025444
 8006550:	58025458 	.word	0x58025458
 8006554:	5802546c 	.word	0x5802546c
 8006558:	58025480 	.word	0x58025480
 800655c:	58025494 	.word	0x58025494

08006560 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e237      	b.n	80069e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d004      	beq.n	8006588 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2280      	movs	r2, #128	; 0x80
 8006582:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e22c      	b.n	80069e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a5c      	ldr	r2, [pc, #368]	; (8006700 <HAL_DMA_Abort_IT+0x1a0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d04a      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a5b      	ldr	r2, [pc, #364]	; (8006704 <HAL_DMA_Abort_IT+0x1a4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d045      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a59      	ldr	r2, [pc, #356]	; (8006708 <HAL_DMA_Abort_IT+0x1a8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d040      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a58      	ldr	r2, [pc, #352]	; (800670c <HAL_DMA_Abort_IT+0x1ac>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d03b      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a56      	ldr	r2, [pc, #344]	; (8006710 <HAL_DMA_Abort_IT+0x1b0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d036      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a55      	ldr	r2, [pc, #340]	; (8006714 <HAL_DMA_Abort_IT+0x1b4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d031      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a53      	ldr	r2, [pc, #332]	; (8006718 <HAL_DMA_Abort_IT+0x1b8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d02c      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a52      	ldr	r2, [pc, #328]	; (800671c <HAL_DMA_Abort_IT+0x1bc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d027      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a50      	ldr	r2, [pc, #320]	; (8006720 <HAL_DMA_Abort_IT+0x1c0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d022      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a4f      	ldr	r2, [pc, #316]	; (8006724 <HAL_DMA_Abort_IT+0x1c4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d01d      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a4d      	ldr	r2, [pc, #308]	; (8006728 <HAL_DMA_Abort_IT+0x1c8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d018      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a4c      	ldr	r2, [pc, #304]	; (800672c <HAL_DMA_Abort_IT+0x1cc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a4a      	ldr	r2, [pc, #296]	; (8006730 <HAL_DMA_Abort_IT+0x1d0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00e      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a49      	ldr	r2, [pc, #292]	; (8006734 <HAL_DMA_Abort_IT+0x1d4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d009      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a47      	ldr	r2, [pc, #284]	; (8006738 <HAL_DMA_Abort_IT+0x1d8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d004      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a46      	ldr	r2, [pc, #280]	; (800673c <HAL_DMA_Abort_IT+0x1dc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d101      	bne.n	800662c <HAL_DMA_Abort_IT+0xcc>
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <HAL_DMA_Abort_IT+0xce>
 800662c:	2300      	movs	r3, #0
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 8086 	beq.w	8006740 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2204      	movs	r2, #4
 8006638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a2f      	ldr	r2, [pc, #188]	; (8006700 <HAL_DMA_Abort_IT+0x1a0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d04a      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2e      	ldr	r2, [pc, #184]	; (8006704 <HAL_DMA_Abort_IT+0x1a4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d045      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a2c      	ldr	r2, [pc, #176]	; (8006708 <HAL_DMA_Abort_IT+0x1a8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d040      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a2b      	ldr	r2, [pc, #172]	; (800670c <HAL_DMA_Abort_IT+0x1ac>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d03b      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a29      	ldr	r2, [pc, #164]	; (8006710 <HAL_DMA_Abort_IT+0x1b0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d036      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a28      	ldr	r2, [pc, #160]	; (8006714 <HAL_DMA_Abort_IT+0x1b4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d031      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a26      	ldr	r2, [pc, #152]	; (8006718 <HAL_DMA_Abort_IT+0x1b8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d02c      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a25      	ldr	r2, [pc, #148]	; (800671c <HAL_DMA_Abort_IT+0x1bc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d027      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a23      	ldr	r2, [pc, #140]	; (8006720 <HAL_DMA_Abort_IT+0x1c0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d022      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a22      	ldr	r2, [pc, #136]	; (8006724 <HAL_DMA_Abort_IT+0x1c4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d01d      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a20      	ldr	r2, [pc, #128]	; (8006728 <HAL_DMA_Abort_IT+0x1c8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d018      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1f      	ldr	r2, [pc, #124]	; (800672c <HAL_DMA_Abort_IT+0x1cc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d013      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1d      	ldr	r2, [pc, #116]	; (8006730 <HAL_DMA_Abort_IT+0x1d0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00e      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1c      	ldr	r2, [pc, #112]	; (8006734 <HAL_DMA_Abort_IT+0x1d4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d009      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1a      	ldr	r2, [pc, #104]	; (8006738 <HAL_DMA_Abort_IT+0x1d8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_DMA_Abort_IT+0x17c>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a19      	ldr	r2, [pc, #100]	; (800673c <HAL_DMA_Abort_IT+0x1dc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d108      	bne.n	80066ee <HAL_DMA_Abort_IT+0x18e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	e178      	b.n	80069e0 <HAL_DMA_Abort_IT+0x480>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	e16f      	b.n	80069e0 <HAL_DMA_Abort_IT+0x480>
 8006700:	40020010 	.word	0x40020010
 8006704:	40020028 	.word	0x40020028
 8006708:	40020040 	.word	0x40020040
 800670c:	40020058 	.word	0x40020058
 8006710:	40020070 	.word	0x40020070
 8006714:	40020088 	.word	0x40020088
 8006718:	400200a0 	.word	0x400200a0
 800671c:	400200b8 	.word	0x400200b8
 8006720:	40020410 	.word	0x40020410
 8006724:	40020428 	.word	0x40020428
 8006728:	40020440 	.word	0x40020440
 800672c:	40020458 	.word	0x40020458
 8006730:	40020470 	.word	0x40020470
 8006734:	40020488 	.word	0x40020488
 8006738:	400204a0 	.word	0x400204a0
 800673c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 020e 	bic.w	r2, r2, #14
 800674e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a6c      	ldr	r2, [pc, #432]	; (8006908 <HAL_DMA_Abort_IT+0x3a8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d04a      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a6b      	ldr	r2, [pc, #428]	; (800690c <HAL_DMA_Abort_IT+0x3ac>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d045      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a69      	ldr	r2, [pc, #420]	; (8006910 <HAL_DMA_Abort_IT+0x3b0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d040      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a68      	ldr	r2, [pc, #416]	; (8006914 <HAL_DMA_Abort_IT+0x3b4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d03b      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a66      	ldr	r2, [pc, #408]	; (8006918 <HAL_DMA_Abort_IT+0x3b8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d036      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a65      	ldr	r2, [pc, #404]	; (800691c <HAL_DMA_Abort_IT+0x3bc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d031      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a63      	ldr	r2, [pc, #396]	; (8006920 <HAL_DMA_Abort_IT+0x3c0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d02c      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a62      	ldr	r2, [pc, #392]	; (8006924 <HAL_DMA_Abort_IT+0x3c4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d027      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a60      	ldr	r2, [pc, #384]	; (8006928 <HAL_DMA_Abort_IT+0x3c8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d022      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a5f      	ldr	r2, [pc, #380]	; (800692c <HAL_DMA_Abort_IT+0x3cc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d01d      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a5d      	ldr	r2, [pc, #372]	; (8006930 <HAL_DMA_Abort_IT+0x3d0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d018      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a5c      	ldr	r2, [pc, #368]	; (8006934 <HAL_DMA_Abort_IT+0x3d4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a5a      	ldr	r2, [pc, #360]	; (8006938 <HAL_DMA_Abort_IT+0x3d8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00e      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a59      	ldr	r2, [pc, #356]	; (800693c <HAL_DMA_Abort_IT+0x3dc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d009      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a57      	ldr	r2, [pc, #348]	; (8006940 <HAL_DMA_Abort_IT+0x3e0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d004      	beq.n	80067f0 <HAL_DMA_Abort_IT+0x290>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a56      	ldr	r2, [pc, #344]	; (8006944 <HAL_DMA_Abort_IT+0x3e4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d108      	bne.n	8006802 <HAL_DMA_Abort_IT+0x2a2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	e007      	b.n	8006812 <HAL_DMA_Abort_IT+0x2b2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a3c      	ldr	r2, [pc, #240]	; (8006908 <HAL_DMA_Abort_IT+0x3a8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d072      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a3a      	ldr	r2, [pc, #232]	; (800690c <HAL_DMA_Abort_IT+0x3ac>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d06d      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a39      	ldr	r2, [pc, #228]	; (8006910 <HAL_DMA_Abort_IT+0x3b0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d068      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a37      	ldr	r2, [pc, #220]	; (8006914 <HAL_DMA_Abort_IT+0x3b4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d063      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a36      	ldr	r2, [pc, #216]	; (8006918 <HAL_DMA_Abort_IT+0x3b8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d05e      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a34      	ldr	r2, [pc, #208]	; (800691c <HAL_DMA_Abort_IT+0x3bc>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d059      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a33      	ldr	r2, [pc, #204]	; (8006920 <HAL_DMA_Abort_IT+0x3c0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d054      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a31      	ldr	r2, [pc, #196]	; (8006924 <HAL_DMA_Abort_IT+0x3c4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d04f      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a30      	ldr	r2, [pc, #192]	; (8006928 <HAL_DMA_Abort_IT+0x3c8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d04a      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a2e      	ldr	r2, [pc, #184]	; (800692c <HAL_DMA_Abort_IT+0x3cc>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d045      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a2d      	ldr	r2, [pc, #180]	; (8006930 <HAL_DMA_Abort_IT+0x3d0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d040      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a2b      	ldr	r2, [pc, #172]	; (8006934 <HAL_DMA_Abort_IT+0x3d4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d03b      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a2a      	ldr	r2, [pc, #168]	; (8006938 <HAL_DMA_Abort_IT+0x3d8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d036      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a28      	ldr	r2, [pc, #160]	; (800693c <HAL_DMA_Abort_IT+0x3dc>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d031      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a27      	ldr	r2, [pc, #156]	; (8006940 <HAL_DMA_Abort_IT+0x3e0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d02c      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a25      	ldr	r2, [pc, #148]	; (8006944 <HAL_DMA_Abort_IT+0x3e4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d027      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a24      	ldr	r2, [pc, #144]	; (8006948 <HAL_DMA_Abort_IT+0x3e8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d022      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a22      	ldr	r2, [pc, #136]	; (800694c <HAL_DMA_Abort_IT+0x3ec>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01d      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a21      	ldr	r2, [pc, #132]	; (8006950 <HAL_DMA_Abort_IT+0x3f0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d018      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <HAL_DMA_Abort_IT+0x3f4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <HAL_DMA_Abort_IT+0x3f8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00e      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1c      	ldr	r2, [pc, #112]	; (800695c <HAL_DMA_Abort_IT+0x3fc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d009      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1b      	ldr	r2, [pc, #108]	; (8006960 <HAL_DMA_Abort_IT+0x400>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d004      	beq.n	8006902 <HAL_DMA_Abort_IT+0x3a2>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a19      	ldr	r2, [pc, #100]	; (8006964 <HAL_DMA_Abort_IT+0x404>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d132      	bne.n	8006968 <HAL_DMA_Abort_IT+0x408>
 8006902:	2301      	movs	r3, #1
 8006904:	e031      	b.n	800696a <HAL_DMA_Abort_IT+0x40a>
 8006906:	bf00      	nop
 8006908:	40020010 	.word	0x40020010
 800690c:	40020028 	.word	0x40020028
 8006910:	40020040 	.word	0x40020040
 8006914:	40020058 	.word	0x40020058
 8006918:	40020070 	.word	0x40020070
 800691c:	40020088 	.word	0x40020088
 8006920:	400200a0 	.word	0x400200a0
 8006924:	400200b8 	.word	0x400200b8
 8006928:	40020410 	.word	0x40020410
 800692c:	40020428 	.word	0x40020428
 8006930:	40020440 	.word	0x40020440
 8006934:	40020458 	.word	0x40020458
 8006938:	40020470 	.word	0x40020470
 800693c:	40020488 	.word	0x40020488
 8006940:	400204a0 	.word	0x400204a0
 8006944:	400204b8 	.word	0x400204b8
 8006948:	58025408 	.word	0x58025408
 800694c:	5802541c 	.word	0x5802541c
 8006950:	58025430 	.word	0x58025430
 8006954:	58025444 	.word	0x58025444
 8006958:	58025458 	.word	0x58025458
 800695c:	5802546c 	.word	0x5802546c
 8006960:	58025480 	.word	0x58025480
 8006964:	58025494 	.word	0x58025494
 8006968:	2300      	movs	r3, #0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d028      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800697c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006982:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	2201      	movs	r2, #1
 800698e:	409a      	lsls	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800699c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00c      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80069be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop

080069ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b098      	sub	sp, #96	; 0x60
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80069f4:	4a84      	ldr	r2, [pc, #528]	; (8006c08 <HAL_FDCAN_Init+0x21c>)
 80069f6:	f107 030c 	add.w	r3, r7, #12
 80069fa:	4611      	mov	r1, r2
 80069fc:	224c      	movs	r2, #76	; 0x4c
 80069fe:	4618      	mov	r0, r3
 8006a00:	f006 fa0a 	bl	800ce18 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e1c6      	b.n	8006d9c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a7e      	ldr	r2, [pc, #504]	; (8006c0c <HAL_FDCAN_Init+0x220>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d106      	bne.n	8006a26 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006a20:	461a      	mov	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fe fd96 	bl	800556c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0210 	bic.w	r2, r2, #16
 8006a4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a50:	f7ff f94c 	bl	8005cec <HAL_GetTick>
 8006a54:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a56:	e014      	b.n	8006a82 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a58:	f7ff f948 	bl	8005cec <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b0a      	cmp	r3, #10
 8006a64:	d90d      	bls.n	8006a82 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a6c:	f043 0201 	orr.w	r2, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2203      	movs	r2, #3
 8006a7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e18c      	b.n	8006d9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f003 0308 	and.w	r3, r3, #8
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d0e3      	beq.n	8006a58 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006aa0:	f7ff f924 	bl	8005cec <HAL_GetTick>
 8006aa4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006aa6:	e014      	b.n	8006ad2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006aa8:	f7ff f920 	bl	8005cec <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b0a      	cmp	r3, #10
 8006ab4:	d90d      	bls.n	8006ad2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006abc:	f043 0201 	orr.w	r2, r3, #1
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2203      	movs	r2, #3
 8006aca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e164      	b.n	8006d9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0e3      	beq.n	8006aa8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699a      	ldr	r2, [r3, #24]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0202 	orr.w	r2, r2, #2
 8006aee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7c1b      	ldrb	r3, [r3, #16]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d108      	bne.n	8006b0a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b06:	619a      	str	r2, [r3, #24]
 8006b08:	e007      	b.n	8006b1a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b18:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	7c5b      	ldrb	r3, [r3, #17]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d108      	bne.n	8006b34 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	699a      	ldr	r2, [r3, #24]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b30:	619a      	str	r2, [r3, #24]
 8006b32:	e007      	b.n	8006b44 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b42:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7c9b      	ldrb	r3, [r3, #18]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d108      	bne.n	8006b5e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b5a:	619a      	str	r2, [r3, #24]
 8006b5c:	e007      	b.n	8006b6e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699a      	ldr	r2, [r3, #24]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b6c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006b92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0210 	bic.w	r2, r2, #16
 8006ba2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d108      	bne.n	8006bbe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0204 	orr.w	r2, r2, #4
 8006bba:	619a      	str	r2, [r3, #24]
 8006bbc:	e030      	b.n	8006c20 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d02c      	beq.n	8006c20 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d020      	beq.n	8006c10 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	699a      	ldr	r2, [r3, #24]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bdc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0210 	orr.w	r2, r2, #16
 8006bec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d114      	bne.n	8006c20 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699a      	ldr	r2, [r3, #24]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0220 	orr.w	r2, r2, #32
 8006c04:	619a      	str	r2, [r3, #24]
 8006c06:	e00b      	b.n	8006c20 <HAL_FDCAN_Init+0x234>
 8006c08:	0800d930 	.word	0x0800d930
 8006c0c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0220 	orr.w	r2, r2, #32
 8006c1e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c30:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c38:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c48:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c4a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c54:	d115      	bne.n	8006c82 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	3b01      	subs	r3, #1
 8006c62:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c64:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c6e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	3b01      	subs	r3, #1
 8006c78:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c7e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c80:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca8:	4413      	add	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d011      	beq.n	8006cd2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006cb6:	f023 0107 	bic.w	r1, r3, #7
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	3360      	adds	r3, #96	; 0x60
 8006cc2:	443b      	add	r3, r7
 8006cc4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d011      	beq.n	8006cfe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006ce2:	f023 0107 	bic.w	r1, r3, #7
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	3360      	adds	r3, #96	; 0x60
 8006cee:	443b      	add	r3, r7
 8006cf0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d012      	beq.n	8006d2c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d0e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	3360      	adds	r3, #96	; 0x60
 8006d1a:	443b      	add	r3, r7
 8006d1c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d20:	011a      	lsls	r2, r3, #4
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d012      	beq.n	8006d5a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d3c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	3360      	adds	r3, #96	; 0x60
 8006d48:	443b      	add	r3, r7
 8006d4a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d4e:	021a      	lsls	r2, r3, #8
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a11      	ldr	r2, [pc, #68]	; (8006da4 <HAL_FDCAN_Init+0x3b8>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d107      	bne.n	8006d74 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f022 0203 	bic.w	r2, r2, #3
 8006d72:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fd63 	bl	8007858 <FDCAN_CalcultateRamBlockAddresses>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006d98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3760      	adds	r7, #96	; 0x60
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	4000a000 	.word	0x4000a000

08006da8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d111      	bne.n	8006de0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e008      	b.n	8006df2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006de6:	f043 0204 	orr.w	r2, r3, #4
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
  }
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d141      	bne.n	8006e9a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006e1e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d109      	bne.n	8006e3a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e038      	b.n	8006eac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e026      	b.n	8006eac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006e66:	0c1b      	lsrs	r3, r3, #16
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 fe75 	bl	8007b64 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2101      	movs	r1, #1
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	fa01 f202 	lsl.w	r2, r1, r2
 8006e86:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e008      	b.n	8006eac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ea0:	f043 0208 	orr.w	r2, r3, #8
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
  }
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b08b      	sub	sp, #44	; 0x2c
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ecc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006ece:	7efb      	ldrb	r3, [r7, #27]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	f040 814b 	bne.w	800716c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b40      	cmp	r3, #64	; 0x40
 8006eda:	d14d      	bne.n	8006f78 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ee4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ef2:	f043 0220 	orr.w	r2, r3, #32
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e13e      	b.n	800717e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e12c      	b.n	800717e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f2c:	0e1b      	lsrs	r3, r3, #24
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d10b      	bne.n	8006f4e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f3e:	0fdb      	lsrs	r3, r3, #31
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f48:	d101      	bne.n	8006f4e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6a:	69f9      	ldr	r1, [r7, #28]
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
 8006f76:	e069      	b.n	800704c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b41      	cmp	r3, #65	; 0x41
 8006f7c:	d14d      	bne.n	800701a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f94:	f043 0220 	orr.w	r2, r3, #32
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e0ed      	b.n	800717e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e0db      	b.n	800717e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fce:	0e1b      	lsrs	r3, r3, #24
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d10b      	bne.n	8006ff0 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fe0:	0fdb      	lsrs	r3, r3, #31
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fea:	d101      	bne.n	8006ff0 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006fec:	2301      	movs	r3, #1
 8006fee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ff8:	0a1b      	lsrs	r3, r3, #8
 8006ffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700c:	69f9      	ldr	r1, [r7, #28]
 800700e:	fb01 f303 	mul.w	r3, r1, r3
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
 8007018:	e018      	b.n	800704c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	429a      	cmp	r2, r3
 8007022:	d309      	bcc.n	8007038 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800702a:	f043 0220 	orr.w	r2, r3, #32
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e0a2      	b.n	800717e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007040:	68b9      	ldr	r1, [r7, #8]
 8007042:	fb01 f303 	mul.w	r3, r1, r3
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d107      	bne.n	8007070 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	0c9b      	lsrs	r3, r3, #18
 8007066:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	e005      	b.n	800707c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	3304      	adds	r3, #4
 8007098:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	b29a      	uxth	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	0e1b      	lsrs	r3, r3, #24
 80070ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	0fda      	lsrs	r2, r3, #31
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	3304      	adds	r3, #4
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80070ea:	2300      	movs	r3, #0
 80070ec:	623b      	str	r3, [r7, #32]
 80070ee:	e00a      	b.n	8007106 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	441a      	add	r2, r3
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	440b      	add	r3, r1
 80070fc:	7812      	ldrb	r2, [r2, #0]
 80070fe:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	3301      	adds	r3, #1
 8007104:	623b      	str	r3, [r7, #32]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	0c1b      	lsrs	r3, r3, #16
 800710c:	4a1f      	ldr	r2, [pc, #124]	; (800718c <HAL_FDCAN_GetRxMessage+0x2d8>)
 800710e:	5cd3      	ldrb	r3, [r2, r3]
 8007110:	461a      	mov	r2, r3
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	4293      	cmp	r3, r2
 8007116:	d3eb      	bcc.n	80070f0 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d105      	bne.n	800712a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007128:	e01e      	b.n	8007168 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b41      	cmp	r3, #65	; 0x41
 800712e:	d105      	bne.n	800713c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800713a:	e015      	b.n	8007168 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b1f      	cmp	r3, #31
 8007140:	d808      	bhi.n	8007154 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2101      	movs	r1, #1
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	fa01 f202 	lsl.w	r2, r1, r2
 800714e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007152:	e009      	b.n	8007168 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f003 021f 	and.w	r2, r3, #31
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2101      	movs	r1, #1
 8007160:	fa01 f202 	lsl.w	r2, r1, r2
 8007164:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	e008      	b.n	800717e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007172:	f043 0208 	orr.w	r2, r3, #8
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
  }
}
 800717e:	4618      	mov	r0, r3
 8007180:	372c      	adds	r7, #44	; 0x2c
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	0800d9b8 	.word	0x0800d9b8

08007190 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80071a2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d002      	beq.n	80071b0 <HAL_FDCAN_ActivateNotification+0x20>
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d155      	bne.n	800725c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	4013      	ands	r3, r2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d108      	bne.n	80071d0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0201 	orr.w	r2, r2, #1
 80071cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80071ce:	e014      	b.n	80071fa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	4013      	ands	r3, r2
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d108      	bne.n	80071f2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0202 	orr.w	r2, r2, #2
 80071ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80071f0:	e003      	b.n	80071fa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2203      	movs	r2, #3
 80071f8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007200:	2b00      	cmp	r3, #0
 8007202:	d009      	beq.n	8007218 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	430a      	orrs	r2, r1
 8007214:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800721e:	2b00      	cmp	r3, #0
 8007220:	d009      	beq.n	8007236 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	430a      	orrs	r2, r1
 8007232:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	4b0f      	ldr	r3, [pc, #60]	; (800727c <HAL_FDCAN_ActivateNotification+0xec>)
 8007240:	4013      	ands	r3, r2
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	6812      	ldr	r2, [r2, #0]
 8007246:	430b      	orrs	r3, r1
 8007248:	6553      	str	r3, [r2, #84]	; 0x54
 800724a:	4b0d      	ldr	r3, [pc, #52]	; (8007280 <HAL_FDCAN_ActivateNotification+0xf0>)
 800724c:	695a      	ldr	r2, [r3, #20]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	0f9b      	lsrs	r3, r3, #30
 8007252:	490b      	ldr	r1, [pc, #44]	; (8007280 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007254:	4313      	orrs	r3, r2
 8007256:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	e008      	b.n	800726e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007262:	f043 0202 	orr.w	r2, r3, #2
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
  }
}
 800726e:	4618      	mov	r0, r3
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	3fcfffff 	.word	0x3fcfffff
 8007280:	4000a800 	.word	0x4000a800

08007284 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b096      	sub	sp, #88	; 0x58
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800728c:	4b9a      	ldr	r3, [pc, #616]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	079b      	lsls	r3, r3, #30
 8007292:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007294:	4b98      	ldr	r3, [pc, #608]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	079b      	lsls	r3, r3, #30
 800729a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800729c:	4013      	ands	r3, r2
 800729e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80072aa:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072b4:	4013      	ands	r3, r2
 80072b6:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072cc:	4013      	ands	r3, r2
 80072ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072da:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072e4:	4013      	ands	r3, r2
 80072e6:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ee:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80072f2:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072fc:	4013      	ands	r3, r2
 80072fe:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007306:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800730a:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007314:	4013      	ands	r3, r2
 8007316:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007326:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732a:	0a1b      	lsrs	r3, r3, #8
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d010      	beq.n	8007356 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	0a1b      	lsrs	r3, r3, #8
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007348:	651a      	str	r2, [r3, #80]	; 0x50
 800734a:	4b6b      	ldr	r3, [pc, #428]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 800734c:	2200      	movs	r2, #0
 800734e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fa4a 	bl	80077ea <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007358:	0a9b      	lsrs	r3, r3, #10
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d01d      	beq.n	800739e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	0a9b      	lsrs	r3, r3, #10
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d017      	beq.n	800739e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007376:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007382:	4013      	ands	r3, r2
 8007384:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800738e:	651a      	str	r2, [r3, #80]	; 0x50
 8007390:	4b59      	ldr	r3, [pc, #356]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 8007392:	2200      	movs	r2, #0
 8007394:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007396:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fa07 	bl	80077ac <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800739e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00d      	beq.n	80073c0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073aa:	4b54      	ldr	r3, [pc, #336]	; (80074fc <HAL_FDCAN_IRQHandler+0x278>)
 80073ac:	400b      	ands	r3, r1
 80073ae:	6513      	str	r3, [r2, #80]	; 0x50
 80073b0:	4a51      	ldr	r2, [pc, #324]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 80073b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073b4:	0f9b      	lsrs	r3, r3, #30
 80073b6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80073b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f9c0 	bl	8007740 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80073c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00d      	beq.n	80073e2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073cc:	4b4b      	ldr	r3, [pc, #300]	; (80074fc <HAL_FDCAN_IRQHandler+0x278>)
 80073ce:	400b      	ands	r3, r1
 80073d0:	6513      	str	r3, [r2, #80]	; 0x50
 80073d2:	4a49      	ldr	r2, [pc, #292]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 80073d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d6:	0f9b      	lsrs	r3, r3, #30
 80073d8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80073da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f9ba 	bl	8007756 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80073e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00d      	beq.n	8007404 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80073ee:	4b43      	ldr	r3, [pc, #268]	; (80074fc <HAL_FDCAN_IRQHandler+0x278>)
 80073f0:	400b      	ands	r3, r1
 80073f2:	6513      	str	r3, [r2, #80]	; 0x50
 80073f4:	4a40      	ldr	r2, [pc, #256]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 80073f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f8:	0f9b      	lsrs	r3, r3, #30
 80073fa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80073fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fd ff82 	bl	8005308 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00d      	beq.n	8007426 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007410:	4b3a      	ldr	r3, [pc, #232]	; (80074fc <HAL_FDCAN_IRQHandler+0x278>)
 8007412:	400b      	ands	r3, r1
 8007414:	6513      	str	r3, [r2, #80]	; 0x50
 8007416:	4a38      	ldr	r2, [pc, #224]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 8007418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800741a:	0f9b      	lsrs	r3, r3, #30
 800741c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800741e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f9a3 	bl	800776c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	0adb      	lsrs	r3, r3, #11
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d010      	beq.n	8007454 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007434:	0adb      	lsrs	r3, r3, #11
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007446:	651a      	str	r2, [r3, #80]	; 0x50
 8007448:	4b2b      	ldr	r3, [pc, #172]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 800744a:	2200      	movs	r2, #0
 800744c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f997 	bl	8007782 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007456:	0a5b      	lsrs	r3, r3, #9
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d01d      	beq.n	800749c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	0a5b      	lsrs	r3, r3, #9
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d017      	beq.n	800749c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007474:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800747e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007480:	4013      	ands	r3, r2
 8007482:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800748c:	651a      	str	r2, [r3, #80]	; 0x50
 800748e:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 8007490:	2200      	movs	r2, #0
 8007492:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f97d 	bl	8007796 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800749c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749e:	0cdb      	lsrs	r3, r3, #19
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d010      	beq.n	80074ca <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80074a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074aa:	0cdb      	lsrs	r3, r3, #19
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00a      	beq.n	80074ca <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80074bc:	651a      	str	r2, [r3, #80]	; 0x50
 80074be:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fd ff7b 	bl	80053c0 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80074ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074cc:	0c1b      	lsrs	r3, r3, #16
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d016      	beq.n	8007504 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	0c1b      	lsrs	r3, r3, #16
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d010      	beq.n	8007504 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80074ea:	651a      	str	r2, [r3, #80]	; 0x50
 80074ec:	4b02      	ldr	r3, [pc, #8]	; (80074f8 <HAL_FDCAN_IRQHandler+0x274>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	e004      	b.n	8007500 <HAL_FDCAN_IRQHandler+0x27c>
 80074f6:	bf00      	nop
 80074f8:	4000a800 	.word	0x4000a800
 80074fc:	3fcfffff 	.word	0x3fcfffff
 8007500:	f000 f95f 	bl	80077c2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007506:	0c9b      	lsrs	r3, r3, #18
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d010      	beq.n	8007532 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	0c9b      	lsrs	r3, r3, #18
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007524:	651a      	str	r2, [r3, #80]	; 0x50
 8007526:	4b83      	ldr	r3, [pc, #524]	; (8007734 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007528:	2200      	movs	r2, #0
 800752a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f952 	bl	80077d6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007534:	0c5b      	lsrs	r3, r3, #17
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d015      	beq.n	800756a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	0c5b      	lsrs	r3, r3, #17
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00f      	beq.n	800756a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007552:	651a      	str	r2, [r3, #80]	; 0x50
 8007554:	4b77      	ldr	r3, [pc, #476]	; (8007734 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007556:	2200      	movs	r2, #0
 8007558:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007560:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800756a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00d      	beq.n	800758c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007576:	4b70      	ldr	r3, [pc, #448]	; (8007738 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007578:	400b      	ands	r3, r1
 800757a:	6513      	str	r3, [r2, #80]	; 0x50
 800757c:	4a6d      	ldr	r2, [pc, #436]	; (8007734 <HAL_FDCAN_IRQHandler+0x4b0>)
 800757e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007580:	0f9b      	lsrs	r3, r3, #30
 8007582:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007584:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fd ff4a 	bl	8005420 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800758c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758e:	2b00      	cmp	r3, #0
 8007590:	d011      	beq.n	80075b6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007598:	4b67      	ldr	r3, [pc, #412]	; (8007738 <HAL_FDCAN_IRQHandler+0x4b4>)
 800759a:	400b      	ands	r3, r1
 800759c:	6513      	str	r3, [r2, #80]	; 0x50
 800759e:	4a65      	ldr	r2, [pc, #404]	; (8007734 <HAL_FDCAN_IRQHandler+0x4b0>)
 80075a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a2:	0f9b      	lsrs	r3, r3, #30
 80075a4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80075ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a60      	ldr	r2, [pc, #384]	; (800773c <HAL_FDCAN_IRQHandler+0x4b8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	f040 80ac 	bne.w	800771a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 0303 	and.w	r3, r3, #3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 80a4 	beq.w	800771a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	f003 030f 	and.w	r3, r3, #15
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e6:	4013      	ands	r3, r2
 80075e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075f4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075fe:	4013      	ands	r3, r2
 8007600:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007616:	4013      	ands	r3, r2
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8007624:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	6a3a      	ldr	r2, [r7, #32]
 800762e:	4013      	ands	r3, r2
 8007630:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800763c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	69fa      	ldr	r2, [r7, #28]
 8007646:	4013      	ands	r3, r2
 8007648:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007666:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f8c7 	bl	80077fe <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	2b00      	cmp	r3, #0
 8007674:	d007      	beq.n	8007686 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800767c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800767e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f8c7 	bl	8007814 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	099b      	lsrs	r3, r3, #6
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01a      	beq.n	80076c8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	099b      	lsrs	r3, r3, #6
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d014      	beq.n	80076c8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a4:	0c1b      	lsrs	r3, r3, #16
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2240      	movs	r2, #64	; 0x40
 80076bc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	6939      	ldr	r1, [r7, #16]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f8b1 	bl	800782a <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d007      	beq.n	80076de <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80076d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f8b2 	bl	8007842 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	6a3a      	ldr	r2, [r7, #32]
 80076ea:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	431a      	orrs	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00b      	beq.n	800771a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7fd fe55 	bl	80053d4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800772a:	bf00      	nop
 800772c:	3758      	adds	r7, #88	; 0x58
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	4000a800 	.word	0x4000a800
 8007738:	3fcfffff 	.word	0x3fcfffff
 800773c:	4000a000 	.word	0x4000a000

08007740 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b083      	sub	sp, #12
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800781e:	bf00      	nop
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800782a:	b480      	push	{r7}
 800782c:	b085      	sub	sp, #20
 800782e:	af00      	add	r7, sp, #0
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007864:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800786e:	4ba7      	ldr	r3, [pc, #668]	; (8007b0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007870:	4013      	ands	r3, r2
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	0091      	lsls	r1, r2, #2
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6812      	ldr	r2, [r2, #0]
 800787a:	430b      	orrs	r3, r1
 800787c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007888:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	041a      	lsls	r2, r3, #16
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	4413      	add	r3, r2
 80078a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078ae:	4b97      	ldr	r3, [pc, #604]	; (8007b0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	0091      	lsls	r1, r2, #2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6812      	ldr	r2, [r2, #0]
 80078ba:	430b      	orrs	r3, r1
 80078bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d0:	041a      	lsls	r2, r3, #16
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	4413      	add	r3, r2
 80078e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80078f0:	4b86      	ldr	r3, [pc, #536]	; (8007b0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078f2:	4013      	ands	r3, r2
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	0091      	lsls	r1, r2, #2
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	430b      	orrs	r3, r1
 80078fe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800790a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	041a      	lsls	r2, r3, #16
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007926:	fb02 f303 	mul.w	r3, r2, r3
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	4413      	add	r3, r2
 800792e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007938:	4b74      	ldr	r3, [pc, #464]	; (8007b0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800793a:	4013      	ands	r3, r2
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	0091      	lsls	r1, r2, #2
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	430b      	orrs	r3, r1
 8007946:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007952:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795a:	041a      	lsls	r2, r3, #16
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800796e:	fb02 f303 	mul.w	r3, r2, r3
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	4413      	add	r3, r2
 8007976:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007980:	4b62      	ldr	r3, [pc, #392]	; (8007b0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007982:	4013      	ands	r3, r2
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	0091      	lsls	r1, r2, #2
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6812      	ldr	r2, [r2, #0]
 800798c:	430b      	orrs	r3, r1
 800798e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800799a:	fb02 f303 	mul.w	r3, r2, r3
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80079ac:	4b57      	ldr	r3, [pc, #348]	; (8007b0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	0091      	lsls	r1, r2, #2
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	430b      	orrs	r3, r1
 80079ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079c6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ce:	041a      	lsls	r2, r3, #16
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	4413      	add	r3, r2
 80079e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80079ee:	4b47      	ldr	r3, [pc, #284]	; (8007b0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079f0:	4013      	ands	r3, r2
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	0091      	lsls	r1, r2, #2
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6812      	ldr	r2, [r2, #0]
 80079fa:	430b      	orrs	r3, r1
 80079fc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a08:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a10:	041a      	lsls	r2, r3, #16
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a24:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2c:	061a      	lsls	r2, r3, #24
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a3c:	4b34      	ldr	r3, [pc, #208]	; (8007b10 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007a3e:	4413      	add	r3, r2
 8007a40:	009a      	lsls	r2, r3, #2
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	441a      	add	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	441a      	add	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007a72:	fb01 f303 	mul.w	r3, r1, r3
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	441a      	add	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007a8a:	fb01 f303 	mul.w	r3, r1, r3
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	441a      	add	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007aa2:	fb01 f303 	mul.w	r3, r1, r3
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	441a      	add	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	441a      	add	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	441a      	add	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b02:	4a04      	ldr	r2, [pc, #16]	; (8007b14 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d915      	bls.n	8007b34 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007b08:	e006      	b.n	8007b18 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007b0a:	bf00      	nop
 8007b0c:	ffff0003 	.word	0xffff0003
 8007b10:	10002b00 	.word	0x10002b00
 8007b14:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b1e:	f043 0220 	orr.w	r2, r3, #32
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2203      	movs	r2, #3
 8007b2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e010      	b.n	8007b56 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	e005      	b.n	8007b48 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3304      	adds	r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d3f3      	bcc.n	8007b3c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop

08007b64 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b089      	sub	sp, #36	; 0x24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007b82:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	61fb      	str	r3, [r7, #28]
 8007b8e:	e00a      	b.n	8007ba6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007b98:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007b9e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ba4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8007bb0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007bb6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007bbc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	fb01 f303 	mul.w	r3, r1, r3
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	3304      	adds	r3, #4
 8007be6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	e020      	b.n	8007c3c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	3303      	adds	r3, #3
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	3302      	adds	r3, #2
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	440b      	add	r3, r1
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8007c12:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	3301      	adds	r3, #1
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	440b      	add	r3, r1
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8007c20:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	440a      	add	r2, r1
 8007c28:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8007c2a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	3304      	adds	r3, #4
 8007c34:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	617b      	str	r3, [r7, #20]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	0c1b      	lsrs	r3, r3, #16
 8007c42:	4a06      	ldr	r2, [pc, #24]	; (8007c5c <FDCAN_CopyMessageToRAM+0xf8>)
 8007c44:	5cd3      	ldrb	r3, [r2, r3]
 8007c46:	461a      	mov	r2, r3
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d3d5      	bcc.n	8007bfa <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8007c4e:	bf00      	nop
 8007c50:	bf00      	nop
 8007c52:	3724      	adds	r7, #36	; 0x24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	0800d9b8 	.word	0x0800d9b8

08007c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b089      	sub	sp, #36	; 0x24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c6e:	4b89      	ldr	r3, [pc, #548]	; (8007e94 <HAL_GPIO_Init+0x234>)
 8007c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c72:	e194      	b.n	8007f9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	2101      	movs	r1, #1
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c80:	4013      	ands	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 8186 	beq.w	8007f98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d005      	beq.n	8007ca4 <HAL_GPIO_Init+0x44>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f003 0303 	and.w	r3, r3, #3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d130      	bne.n	8007d06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	2203      	movs	r2, #3
 8007cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb4:	43db      	mvns	r3, r3
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cda:	2201      	movs	r2, #1
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	091b      	lsrs	r3, r3, #4
 8007cf0:	f003 0201 	and.w	r2, r3, #1
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d017      	beq.n	8007d42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	43db      	mvns	r3, r3
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	4013      	ands	r3, r2
 8007d28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d123      	bne.n	8007d96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	08da      	lsrs	r2, r3, #3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3208      	adds	r2, #8
 8007d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	220f      	movs	r2, #15
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	43db      	mvns	r3, r3
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	691a      	ldr	r2, [r3, #16]
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	08da      	lsrs	r2, r3, #3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3208      	adds	r2, #8
 8007d90:	69b9      	ldr	r1, [r7, #24]
 8007d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	2203      	movs	r2, #3
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	43db      	mvns	r3, r3
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	4013      	ands	r3, r2
 8007dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f003 0203 	and.w	r2, r3, #3
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 80e0 	beq.w	8007f98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dd8:	4b2f      	ldr	r3, [pc, #188]	; (8007e98 <HAL_GPIO_Init+0x238>)
 8007dda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dde:	4a2e      	ldr	r2, [pc, #184]	; (8007e98 <HAL_GPIO_Init+0x238>)
 8007de0:	f043 0302 	orr.w	r3, r3, #2
 8007de4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007de8:	4b2b      	ldr	r3, [pc, #172]	; (8007e98 <HAL_GPIO_Init+0x238>)
 8007dea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007df6:	4a29      	ldr	r2, [pc, #164]	; (8007e9c <HAL_GPIO_Init+0x23c>)
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	089b      	lsrs	r3, r3, #2
 8007dfc:	3302      	adds	r3, #2
 8007dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	220f      	movs	r2, #15
 8007e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e12:	43db      	mvns	r3, r3
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	4013      	ands	r3, r2
 8007e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a20      	ldr	r2, [pc, #128]	; (8007ea0 <HAL_GPIO_Init+0x240>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d052      	beq.n	8007ec8 <HAL_GPIO_Init+0x268>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a1f      	ldr	r2, [pc, #124]	; (8007ea4 <HAL_GPIO_Init+0x244>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d031      	beq.n	8007e8e <HAL_GPIO_Init+0x22e>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a1e      	ldr	r2, [pc, #120]	; (8007ea8 <HAL_GPIO_Init+0x248>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d02b      	beq.n	8007e8a <HAL_GPIO_Init+0x22a>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a1d      	ldr	r2, [pc, #116]	; (8007eac <HAL_GPIO_Init+0x24c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d025      	beq.n	8007e86 <HAL_GPIO_Init+0x226>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a1c      	ldr	r2, [pc, #112]	; (8007eb0 <HAL_GPIO_Init+0x250>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d01f      	beq.n	8007e82 <HAL_GPIO_Init+0x222>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <HAL_GPIO_Init+0x254>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d019      	beq.n	8007e7e <HAL_GPIO_Init+0x21e>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a1a      	ldr	r2, [pc, #104]	; (8007eb8 <HAL_GPIO_Init+0x258>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d013      	beq.n	8007e7a <HAL_GPIO_Init+0x21a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a19      	ldr	r2, [pc, #100]	; (8007ebc <HAL_GPIO_Init+0x25c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00d      	beq.n	8007e76 <HAL_GPIO_Init+0x216>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a18      	ldr	r2, [pc, #96]	; (8007ec0 <HAL_GPIO_Init+0x260>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d007      	beq.n	8007e72 <HAL_GPIO_Init+0x212>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a17      	ldr	r2, [pc, #92]	; (8007ec4 <HAL_GPIO_Init+0x264>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d101      	bne.n	8007e6e <HAL_GPIO_Init+0x20e>
 8007e6a:	2309      	movs	r3, #9
 8007e6c:	e02d      	b.n	8007eca <HAL_GPIO_Init+0x26a>
 8007e6e:	230a      	movs	r3, #10
 8007e70:	e02b      	b.n	8007eca <HAL_GPIO_Init+0x26a>
 8007e72:	2308      	movs	r3, #8
 8007e74:	e029      	b.n	8007eca <HAL_GPIO_Init+0x26a>
 8007e76:	2307      	movs	r3, #7
 8007e78:	e027      	b.n	8007eca <HAL_GPIO_Init+0x26a>
 8007e7a:	2306      	movs	r3, #6
 8007e7c:	e025      	b.n	8007eca <HAL_GPIO_Init+0x26a>
 8007e7e:	2305      	movs	r3, #5
 8007e80:	e023      	b.n	8007eca <HAL_GPIO_Init+0x26a>
 8007e82:	2304      	movs	r3, #4
 8007e84:	e021      	b.n	8007eca <HAL_GPIO_Init+0x26a>
 8007e86:	2303      	movs	r3, #3
 8007e88:	e01f      	b.n	8007eca <HAL_GPIO_Init+0x26a>
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e01d      	b.n	8007eca <HAL_GPIO_Init+0x26a>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e01b      	b.n	8007eca <HAL_GPIO_Init+0x26a>
 8007e92:	bf00      	nop
 8007e94:	58000080 	.word	0x58000080
 8007e98:	58024400 	.word	0x58024400
 8007e9c:	58000400 	.word	0x58000400
 8007ea0:	58020000 	.word	0x58020000
 8007ea4:	58020400 	.word	0x58020400
 8007ea8:	58020800 	.word	0x58020800
 8007eac:	58020c00 	.word	0x58020c00
 8007eb0:	58021000 	.word	0x58021000
 8007eb4:	58021400 	.word	0x58021400
 8007eb8:	58021800 	.word	0x58021800
 8007ebc:	58021c00 	.word	0x58021c00
 8007ec0:	58022000 	.word	0x58022000
 8007ec4:	58022400 	.word	0x58022400
 8007ec8:	2300      	movs	r3, #0
 8007eca:	69fa      	ldr	r2, [r7, #28]
 8007ecc:	f002 0203 	and.w	r2, r2, #3
 8007ed0:	0092      	lsls	r2, r2, #2
 8007ed2:	4093      	lsls	r3, r2
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007eda:	4938      	ldr	r1, [pc, #224]	; (8007fbc <HAL_GPIO_Init+0x35c>)
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	089b      	lsrs	r3, r3, #2
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	43db      	mvns	r3, r3
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	4013      	ands	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	4013      	ands	r3, r2
 8007f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	43db      	mvns	r3, r3
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f47f ae63 	bne.w	8007c74 <HAL_GPIO_Init+0x14>
  }
}
 8007fae:	bf00      	nop
 8007fb0:	bf00      	nop
 8007fb2:	3724      	adds	r7, #36	; 0x24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	58000400 	.word	0x58000400

08007fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	807b      	strh	r3, [r7, #2]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fd0:	787b      	ldrb	r3, [r7, #1]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fd6:	887a      	ldrh	r2, [r7, #2]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007fdc:	e003      	b.n	8007fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007fde:	887b      	ldrh	r3, [r7, #2]
 8007fe0:	041a      	lsls	r2, r3, #16
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	619a      	str	r2, [r3, #24]
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008004:	887a      	ldrh	r2, [r7, #2]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4013      	ands	r3, r2
 800800a:	041a      	lsls	r2, r3, #16
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	43d9      	mvns	r1, r3
 8008010:	887b      	ldrh	r3, [r7, #2]
 8008012:	400b      	ands	r3, r1
 8008014:	431a      	orrs	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	619a      	str	r2, [r3, #24]
}
 800801a:	bf00      	nop
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	4603      	mov	r3, r0
 800802e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008034:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008038:	88fb      	ldrh	r3, [r7, #6]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d008      	beq.n	8008052 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800804a:	88fb      	ldrh	r3, [r7, #6]
 800804c:	4618      	mov	r0, r3
 800804e:	f000 f804 	bl	800805a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	4603      	mov	r3, r0
 8008062:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8008070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008072:	b08f      	sub	sp, #60	; 0x3c
 8008074:	af0a      	add	r7, sp, #40	; 0x28
 8008076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e054      	b.n	800812c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d106      	bne.n	80080a2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7fd fbad 	bl	80057fc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2203      	movs	r2, #3
 80080a6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f004 fcb7 	bl	800ca34 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	687e      	ldr	r6, [r7, #4]
 80080ce:	466d      	mov	r5, sp
 80080d0:	f106 0410 	add.w	r4, r6, #16
 80080d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80080e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80080e4:	1d33      	adds	r3, r6, #4
 80080e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080e8:	6838      	ldr	r0, [r7, #0]
 80080ea:	f004 fc35 	bl	800c958 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2101      	movs	r1, #1
 80080f4:	4618      	mov	r0, r3
 80080f6:	f004 fcae 	bl	800ca56 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	603b      	str	r3, [r7, #0]
 8008100:	687e      	ldr	r6, [r7, #4]
 8008102:	466d      	mov	r5, sp
 8008104:	f106 0410 	add.w	r4, r6, #16
 8008108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800810a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800810c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800810e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008110:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008114:	e885 0003 	stmia.w	r5, {r0, r1}
 8008118:	1d33      	adds	r3, r6, #4
 800811a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800811c:	6838      	ldr	r0, [r7, #0]
 800811e:	f004 fd8d 	bl	800cc3c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008134 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800813c:	4b19      	ldr	r3, [pc, #100]	; (80081a4 <HAL_PWREx_ConfigSupply+0x70>)
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b04      	cmp	r3, #4
 8008146:	d00a      	beq.n	800815e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008148:	4b16      	ldr	r3, [pc, #88]	; (80081a4 <HAL_PWREx_ConfigSupply+0x70>)
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d001      	beq.n	800815a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e01f      	b.n	800819a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	e01d      	b.n	800819a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800815e:	4b11      	ldr	r3, [pc, #68]	; (80081a4 <HAL_PWREx_ConfigSupply+0x70>)
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	f023 0207 	bic.w	r2, r3, #7
 8008166:	490f      	ldr	r1, [pc, #60]	; (80081a4 <HAL_PWREx_ConfigSupply+0x70>)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4313      	orrs	r3, r2
 800816c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800816e:	f7fd fdbd 	bl	8005cec <HAL_GetTick>
 8008172:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008174:	e009      	b.n	800818a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008176:	f7fd fdb9 	bl	8005cec <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008184:	d901      	bls.n	800818a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e007      	b.n	800819a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800818a:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <HAL_PWREx_ConfigSupply+0x70>)
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008196:	d1ee      	bne.n	8008176 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	58024800 	.word	0x58024800

080081a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80081ac:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	4a04      	ldr	r2, [pc, #16]	; (80081c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80081b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081b6:	60d3      	str	r3, [r2, #12]
}
 80081b8:	bf00      	nop
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	58024800 	.word	0x58024800

080081c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08c      	sub	sp, #48	; 0x30
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d102      	bne.n	80081dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	f000 bc1d 	b.w	8008a16 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8087 	beq.w	80082f8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081ea:	4b99      	ldr	r3, [pc, #612]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081f4:	4b96      	ldr	r3, [pc, #600]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80081f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80081fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fc:	2b10      	cmp	r3, #16
 80081fe:	d007      	beq.n	8008210 <HAL_RCC_OscConfig+0x48>
 8008200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008202:	2b18      	cmp	r3, #24
 8008204:	d110      	bne.n	8008228 <HAL_RCC_OscConfig+0x60>
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	2b02      	cmp	r3, #2
 800820e:	d10b      	bne.n	8008228 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008210:	4b8f      	ldr	r3, [pc, #572]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d06c      	beq.n	80082f6 <HAL_RCC_OscConfig+0x12e>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d168      	bne.n	80082f6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e3f6      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008230:	d106      	bne.n	8008240 <HAL_RCC_OscConfig+0x78>
 8008232:	4b87      	ldr	r3, [pc, #540]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a86      	ldr	r2, [pc, #536]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	e02e      	b.n	800829e <HAL_RCC_OscConfig+0xd6>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10c      	bne.n	8008262 <HAL_RCC_OscConfig+0x9a>
 8008248:	4b81      	ldr	r3, [pc, #516]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a80      	ldr	r2, [pc, #512]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800824e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	4b7e      	ldr	r3, [pc, #504]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a7d      	ldr	r2, [pc, #500]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800825a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	e01d      	b.n	800829e <HAL_RCC_OscConfig+0xd6>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800826a:	d10c      	bne.n	8008286 <HAL_RCC_OscConfig+0xbe>
 800826c:	4b78      	ldr	r3, [pc, #480]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a77      	ldr	r2, [pc, #476]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008272:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	4b75      	ldr	r3, [pc, #468]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a74      	ldr	r2, [pc, #464]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800827e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	e00b      	b.n	800829e <HAL_RCC_OscConfig+0xd6>
 8008286:	4b72      	ldr	r3, [pc, #456]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a71      	ldr	r2, [pc, #452]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800828c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008290:	6013      	str	r3, [r2, #0]
 8008292:	4b6f      	ldr	r3, [pc, #444]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a6e      	ldr	r2, [pc, #440]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800829c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d013      	beq.n	80082ce <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a6:	f7fd fd21 	bl	8005cec <HAL_GetTick>
 80082aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082ac:	e008      	b.n	80082c0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082ae:	f7fd fd1d 	bl	8005cec <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	2b64      	cmp	r3, #100	; 0x64
 80082ba:	d901      	bls.n	80082c0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e3aa      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082c0:	4b63      	ldr	r3, [pc, #396]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0f0      	beq.n	80082ae <HAL_RCC_OscConfig+0xe6>
 80082cc:	e014      	b.n	80082f8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ce:	f7fd fd0d 	bl	8005cec <HAL_GetTick>
 80082d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082d4:	e008      	b.n	80082e8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082d6:	f7fd fd09 	bl	8005cec <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b64      	cmp	r3, #100	; 0x64
 80082e2:	d901      	bls.n	80082e8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e396      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082e8:	4b59      	ldr	r3, [pc, #356]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1f0      	bne.n	80082d6 <HAL_RCC_OscConfig+0x10e>
 80082f4:	e000      	b.n	80082f8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 80cb 	beq.w	800849c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008306:	4b52      	ldr	r3, [pc, #328]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800830e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008310:	4b4f      	ldr	r3, [pc, #316]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d007      	beq.n	800832c <HAL_RCC_OscConfig+0x164>
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	2b18      	cmp	r3, #24
 8008320:	d156      	bne.n	80083d0 <HAL_RCC_OscConfig+0x208>
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	f003 0303 	and.w	r3, r3, #3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d151      	bne.n	80083d0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800832c:	4b48      	ldr	r3, [pc, #288]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	2b00      	cmp	r3, #0
 8008336:	d005      	beq.n	8008344 <HAL_RCC_OscConfig+0x17c>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e368      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008344:	4b42      	ldr	r3, [pc, #264]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f023 0219 	bic.w	r2, r3, #25
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	493f      	ldr	r1, [pc, #252]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008352:	4313      	orrs	r3, r2
 8008354:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008356:	f7fd fcc9 	bl	8005cec <HAL_GetTick>
 800835a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800835c:	e008      	b.n	8008370 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800835e:	f7fd fcc5 	bl	8005cec <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	d901      	bls.n	8008370 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e352      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008370:	4b37      	ldr	r3, [pc, #220]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b00      	cmp	r3, #0
 800837a:	d0f0      	beq.n	800835e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800837c:	f7fd fce6 	bl	8005d4c <HAL_GetREVID>
 8008380:	4603      	mov	r3, r0
 8008382:	f241 0203 	movw	r2, #4099	; 0x1003
 8008386:	4293      	cmp	r3, r2
 8008388:	d817      	bhi.n	80083ba <HAL_RCC_OscConfig+0x1f2>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b40      	cmp	r3, #64	; 0x40
 8008390:	d108      	bne.n	80083a4 <HAL_RCC_OscConfig+0x1dc>
 8008392:	4b2f      	ldr	r3, [pc, #188]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800839a:	4a2d      	ldr	r2, [pc, #180]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800839c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083a2:	e07b      	b.n	800849c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083a4:	4b2a      	ldr	r3, [pc, #168]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	031b      	lsls	r3, r3, #12
 80083b2:	4927      	ldr	r1, [pc, #156]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083b8:	e070      	b.n	800849c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ba:	4b25      	ldr	r3, [pc, #148]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	061b      	lsls	r3, r3, #24
 80083c8:	4921      	ldr	r1, [pc, #132]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083ce:	e065      	b.n	800849c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d048      	beq.n	800846a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083d8:	4b1d      	ldr	r3, [pc, #116]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f023 0219 	bic.w	r2, r3, #25
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	491a      	ldr	r1, [pc, #104]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ea:	f7fd fc7f 	bl	8005cec <HAL_GetTick>
 80083ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083f0:	e008      	b.n	8008404 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083f2:	f7fd fc7b 	bl	8005cec <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e308      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008404:	4b12      	ldr	r3, [pc, #72]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0f0      	beq.n	80083f2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008410:	f7fd fc9c 	bl	8005d4c <HAL_GetREVID>
 8008414:	4603      	mov	r3, r0
 8008416:	f241 0203 	movw	r2, #4099	; 0x1003
 800841a:	4293      	cmp	r3, r2
 800841c:	d81a      	bhi.n	8008454 <HAL_RCC_OscConfig+0x28c>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	2b40      	cmp	r3, #64	; 0x40
 8008424:	d108      	bne.n	8008438 <HAL_RCC_OscConfig+0x270>
 8008426:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800842e:	4a08      	ldr	r2, [pc, #32]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008434:	6053      	str	r3, [r2, #4]
 8008436:	e031      	b.n	800849c <HAL_RCC_OscConfig+0x2d4>
 8008438:	4b05      	ldr	r3, [pc, #20]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	031b      	lsls	r3, r3, #12
 8008446:	4902      	ldr	r1, [pc, #8]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008448:	4313      	orrs	r3, r2
 800844a:	604b      	str	r3, [r1, #4]
 800844c:	e026      	b.n	800849c <HAL_RCC_OscConfig+0x2d4>
 800844e:	bf00      	nop
 8008450:	58024400 	.word	0x58024400
 8008454:	4b9a      	ldr	r3, [pc, #616]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	061b      	lsls	r3, r3, #24
 8008462:	4997      	ldr	r1, [pc, #604]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008464:	4313      	orrs	r3, r2
 8008466:	604b      	str	r3, [r1, #4]
 8008468:	e018      	b.n	800849c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800846a:	4b95      	ldr	r3, [pc, #596]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a94      	ldr	r2, [pc, #592]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008470:	f023 0301 	bic.w	r3, r3, #1
 8008474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008476:	f7fd fc39 	bl	8005cec <HAL_GetTick>
 800847a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800847c:	e008      	b.n	8008490 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800847e:	f7fd fc35 	bl	8005cec <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d901      	bls.n	8008490 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e2c2      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008490:	4b8b      	ldr	r3, [pc, #556]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1f0      	bne.n	800847e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0310 	and.w	r3, r3, #16
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 80a9 	beq.w	80085fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084aa:	4b85      	ldr	r3, [pc, #532]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084b4:	4b82      	ldr	r3, [pc, #520]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 80084b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d007      	beq.n	80084d0 <HAL_RCC_OscConfig+0x308>
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	2b18      	cmp	r3, #24
 80084c4:	d13a      	bne.n	800853c <HAL_RCC_OscConfig+0x374>
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f003 0303 	and.w	r3, r3, #3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d135      	bne.n	800853c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084d0:	4b7b      	ldr	r3, [pc, #492]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <HAL_RCC_OscConfig+0x320>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	2b80      	cmp	r3, #128	; 0x80
 80084e2:	d001      	beq.n	80084e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e296      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084e8:	f7fd fc30 	bl	8005d4c <HAL_GetREVID>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d817      	bhi.n	8008526 <HAL_RCC_OscConfig+0x35e>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d108      	bne.n	8008510 <HAL_RCC_OscConfig+0x348>
 80084fe:	4b70      	ldr	r3, [pc, #448]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008506:	4a6e      	ldr	r2, [pc, #440]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800850c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800850e:	e075      	b.n	80085fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008510:	4b6b      	ldr	r3, [pc, #428]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	069b      	lsls	r3, r3, #26
 800851e:	4968      	ldr	r1, [pc, #416]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008520:	4313      	orrs	r3, r2
 8008522:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008524:	e06a      	b.n	80085fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008526:	4b66      	ldr	r3, [pc, #408]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	061b      	lsls	r3, r3, #24
 8008534:	4962      	ldr	r1, [pc, #392]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008536:	4313      	orrs	r3, r2
 8008538:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800853a:	e05f      	b.n	80085fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d042      	beq.n	80085ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008544:	4b5e      	ldr	r3, [pc, #376]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a5d      	ldr	r2, [pc, #372]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 800854a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008550:	f7fd fbcc 	bl	8005cec <HAL_GetTick>
 8008554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008556:	e008      	b.n	800856a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008558:	f7fd fbc8 	bl	8005cec <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e255      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800856a:	4b55      	ldr	r3, [pc, #340]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0f0      	beq.n	8008558 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008576:	f7fd fbe9 	bl	8005d4c <HAL_GetREVID>
 800857a:	4603      	mov	r3, r0
 800857c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008580:	4293      	cmp	r3, r2
 8008582:	d817      	bhi.n	80085b4 <HAL_RCC_OscConfig+0x3ec>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a1b      	ldr	r3, [r3, #32]
 8008588:	2b20      	cmp	r3, #32
 800858a:	d108      	bne.n	800859e <HAL_RCC_OscConfig+0x3d6>
 800858c:	4b4c      	ldr	r3, [pc, #304]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008594:	4a4a      	ldr	r2, [pc, #296]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008596:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800859a:	6053      	str	r3, [r2, #4]
 800859c:	e02e      	b.n	80085fc <HAL_RCC_OscConfig+0x434>
 800859e:	4b48      	ldr	r3, [pc, #288]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	069b      	lsls	r3, r3, #26
 80085ac:	4944      	ldr	r1, [pc, #272]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	604b      	str	r3, [r1, #4]
 80085b2:	e023      	b.n	80085fc <HAL_RCC_OscConfig+0x434>
 80085b4:	4b42      	ldr	r3, [pc, #264]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	061b      	lsls	r3, r3, #24
 80085c2:	493f      	ldr	r1, [pc, #252]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60cb      	str	r3, [r1, #12]
 80085c8:	e018      	b.n	80085fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80085ca:	4b3d      	ldr	r3, [pc, #244]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a3c      	ldr	r2, [pc, #240]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 80085d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d6:	f7fd fb89 	bl	8005cec <HAL_GetTick>
 80085da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085dc:	e008      	b.n	80085f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80085de:	f7fd fb85 	bl	8005cec <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d901      	bls.n	80085f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e212      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085f0:	4b33      	ldr	r3, [pc, #204]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f0      	bne.n	80085de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0308 	and.w	r3, r3, #8
 8008604:	2b00      	cmp	r3, #0
 8008606:	d036      	beq.n	8008676 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d019      	beq.n	8008644 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008610:	4b2b      	ldr	r3, [pc, #172]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008614:	4a2a      	ldr	r2, [pc, #168]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008616:	f043 0301 	orr.w	r3, r3, #1
 800861a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800861c:	f7fd fb66 	bl	8005cec <HAL_GetTick>
 8008620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008622:	e008      	b.n	8008636 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008624:	f7fd fb62 	bl	8005cec <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b02      	cmp	r3, #2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e1ef      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008636:	4b22      	ldr	r3, [pc, #136]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0f0      	beq.n	8008624 <HAL_RCC_OscConfig+0x45c>
 8008642:	e018      	b.n	8008676 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008644:	4b1e      	ldr	r3, [pc, #120]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008648:	4a1d      	ldr	r2, [pc, #116]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 800864a:	f023 0301 	bic.w	r3, r3, #1
 800864e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008650:	f7fd fb4c 	bl	8005cec <HAL_GetTick>
 8008654:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008656:	e008      	b.n	800866a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008658:	f7fd fb48 	bl	8005cec <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e1d5      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800866a:	4b15      	ldr	r3, [pc, #84]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 800866c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1f0      	bne.n	8008658 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d039      	beq.n	80086f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01c      	beq.n	80086c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800868a:	4b0d      	ldr	r3, [pc, #52]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a0c      	ldr	r2, [pc, #48]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 8008690:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008694:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008696:	f7fd fb29 	bl	8005cec <HAL_GetTick>
 800869a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800869c:	e008      	b.n	80086b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800869e:	f7fd fb25 	bl	8005cec <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d901      	bls.n	80086b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e1b2      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086b0:	4b03      	ldr	r3, [pc, #12]	; (80086c0 <HAL_RCC_OscConfig+0x4f8>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0f0      	beq.n	800869e <HAL_RCC_OscConfig+0x4d6>
 80086bc:	e01b      	b.n	80086f6 <HAL_RCC_OscConfig+0x52e>
 80086be:	bf00      	nop
 80086c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086c4:	4b9b      	ldr	r3, [pc, #620]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a9a      	ldr	r2, [pc, #616]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80086ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80086d0:	f7fd fb0c 	bl	8005cec <HAL_GetTick>
 80086d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086d6:	e008      	b.n	80086ea <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80086d8:	f7fd fb08 	bl	8005cec <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e195      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086ea:	4b92      	ldr	r3, [pc, #584]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1f0      	bne.n	80086d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0304 	and.w	r3, r3, #4
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 8081 	beq.w	8008806 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008704:	4b8c      	ldr	r3, [pc, #560]	; (8008938 <HAL_RCC_OscConfig+0x770>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a8b      	ldr	r2, [pc, #556]	; (8008938 <HAL_RCC_OscConfig+0x770>)
 800870a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800870e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008710:	f7fd faec 	bl	8005cec <HAL_GetTick>
 8008714:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008716:	e008      	b.n	800872a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008718:	f7fd fae8 	bl	8005cec <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b64      	cmp	r3, #100	; 0x64
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e175      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800872a:	4b83      	ldr	r3, [pc, #524]	; (8008938 <HAL_RCC_OscConfig+0x770>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0f0      	beq.n	8008718 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d106      	bne.n	800874c <HAL_RCC_OscConfig+0x584>
 800873e:	4b7d      	ldr	r3, [pc, #500]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008742:	4a7c      	ldr	r2, [pc, #496]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008744:	f043 0301 	orr.w	r3, r3, #1
 8008748:	6713      	str	r3, [r2, #112]	; 0x70
 800874a:	e02d      	b.n	80087a8 <HAL_RCC_OscConfig+0x5e0>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10c      	bne.n	800876e <HAL_RCC_OscConfig+0x5a6>
 8008754:	4b77      	ldr	r3, [pc, #476]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008758:	4a76      	ldr	r2, [pc, #472]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 800875a:	f023 0301 	bic.w	r3, r3, #1
 800875e:	6713      	str	r3, [r2, #112]	; 0x70
 8008760:	4b74      	ldr	r3, [pc, #464]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008764:	4a73      	ldr	r2, [pc, #460]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008766:	f023 0304 	bic.w	r3, r3, #4
 800876a:	6713      	str	r3, [r2, #112]	; 0x70
 800876c:	e01c      	b.n	80087a8 <HAL_RCC_OscConfig+0x5e0>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	2b05      	cmp	r3, #5
 8008774:	d10c      	bne.n	8008790 <HAL_RCC_OscConfig+0x5c8>
 8008776:	4b6f      	ldr	r3, [pc, #444]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877a:	4a6e      	ldr	r2, [pc, #440]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 800877c:	f043 0304 	orr.w	r3, r3, #4
 8008780:	6713      	str	r3, [r2, #112]	; 0x70
 8008782:	4b6c      	ldr	r3, [pc, #432]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008786:	4a6b      	ldr	r2, [pc, #428]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008788:	f043 0301 	orr.w	r3, r3, #1
 800878c:	6713      	str	r3, [r2, #112]	; 0x70
 800878e:	e00b      	b.n	80087a8 <HAL_RCC_OscConfig+0x5e0>
 8008790:	4b68      	ldr	r3, [pc, #416]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008794:	4a67      	ldr	r2, [pc, #412]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008796:	f023 0301 	bic.w	r3, r3, #1
 800879a:	6713      	str	r3, [r2, #112]	; 0x70
 800879c:	4b65      	ldr	r3, [pc, #404]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 800879e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a0:	4a64      	ldr	r2, [pc, #400]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80087a2:	f023 0304 	bic.w	r3, r3, #4
 80087a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d015      	beq.n	80087dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087b0:	f7fd fa9c 	bl	8005cec <HAL_GetTick>
 80087b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087b6:	e00a      	b.n	80087ce <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087b8:	f7fd fa98 	bl	8005cec <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e123      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087ce:	4b59      	ldr	r3, [pc, #356]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80087d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0ee      	beq.n	80087b8 <HAL_RCC_OscConfig+0x5f0>
 80087da:	e014      	b.n	8008806 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087dc:	f7fd fa86 	bl	8005cec <HAL_GetTick>
 80087e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087e2:	e00a      	b.n	80087fa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087e4:	f7fd fa82 	bl	8005cec <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e10d      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087fa:	4b4e      	ldr	r3, [pc, #312]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80087fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1ee      	bne.n	80087e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 8102 	beq.w	8008a14 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008810:	4b48      	ldr	r3, [pc, #288]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008818:	2b18      	cmp	r3, #24
 800881a:	f000 80bd 	beq.w	8008998 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	2b02      	cmp	r3, #2
 8008824:	f040 809e 	bne.w	8008964 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008828:	4b42      	ldr	r3, [pc, #264]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a41      	ldr	r2, [pc, #260]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 800882e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008834:	f7fd fa5a 	bl	8005cec <HAL_GetTick>
 8008838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800883a:	e008      	b.n	800884e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800883c:	f7fd fa56 	bl	8005cec <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b02      	cmp	r3, #2
 8008848:	d901      	bls.n	800884e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e0e3      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800884e:	4b39      	ldr	r3, [pc, #228]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1f0      	bne.n	800883c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800885a:	4b36      	ldr	r3, [pc, #216]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 800885c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800885e:	4b37      	ldr	r3, [pc, #220]	; (800893c <HAL_RCC_OscConfig+0x774>)
 8008860:	4013      	ands	r3, r2
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800886a:	0112      	lsls	r2, r2, #4
 800886c:	430a      	orrs	r2, r1
 800886e:	4931      	ldr	r1, [pc, #196]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008870:	4313      	orrs	r3, r2
 8008872:	628b      	str	r3, [r1, #40]	; 0x28
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008878:	3b01      	subs	r3, #1
 800887a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008882:	3b01      	subs	r3, #1
 8008884:	025b      	lsls	r3, r3, #9
 8008886:	b29b      	uxth	r3, r3
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888e:	3b01      	subs	r3, #1
 8008890:	041b      	lsls	r3, r3, #16
 8008892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889c:	3b01      	subs	r3, #1
 800889e:	061b      	lsls	r3, r3, #24
 80088a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088a4:	4923      	ldr	r1, [pc, #140]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80088aa:	4b22      	ldr	r3, [pc, #136]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ae:	4a21      	ldr	r2, [pc, #132]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088b0:	f023 0301 	bic.w	r3, r3, #1
 80088b4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80088b6:	4b1f      	ldr	r3, [pc, #124]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088ba:	4b21      	ldr	r3, [pc, #132]	; (8008940 <HAL_RCC_OscConfig+0x778>)
 80088bc:	4013      	ands	r3, r2
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80088c2:	00d2      	lsls	r2, r2, #3
 80088c4:	491b      	ldr	r1, [pc, #108]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80088ca:	4b1a      	ldr	r3, [pc, #104]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	f023 020c 	bic.w	r2, r3, #12
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	4917      	ldr	r1, [pc, #92]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80088dc:	4b15      	ldr	r3, [pc, #84]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	f023 0202 	bic.w	r2, r3, #2
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e8:	4912      	ldr	r1, [pc, #72]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80088ee:	4b11      	ldr	r3, [pc, #68]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	4a10      	ldr	r2, [pc, #64]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088fa:	4b0e      	ldr	r3, [pc, #56]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	4a0d      	ldr	r2, [pc, #52]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008904:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008906:	4b0b      	ldr	r3, [pc, #44]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890a:	4a0a      	ldr	r2, [pc, #40]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 800890c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008912:	4b08      	ldr	r3, [pc, #32]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008916:	4a07      	ldr	r2, [pc, #28]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008918:	f043 0301 	orr.w	r3, r3, #1
 800891c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800891e:	4b05      	ldr	r3, [pc, #20]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a04      	ldr	r2, [pc, #16]	; (8008934 <HAL_RCC_OscConfig+0x76c>)
 8008924:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800892a:	f7fd f9df 	bl	8005cec <HAL_GetTick>
 800892e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008930:	e011      	b.n	8008956 <HAL_RCC_OscConfig+0x78e>
 8008932:	bf00      	nop
 8008934:	58024400 	.word	0x58024400
 8008938:	58024800 	.word	0x58024800
 800893c:	fffffc0c 	.word	0xfffffc0c
 8008940:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008944:	f7fd f9d2 	bl	8005cec <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b02      	cmp	r3, #2
 8008950:	d901      	bls.n	8008956 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e05f      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008956:	4b32      	ldr	r3, [pc, #200]	; (8008a20 <HAL_RCC_OscConfig+0x858>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d0f0      	beq.n	8008944 <HAL_RCC_OscConfig+0x77c>
 8008962:	e057      	b.n	8008a14 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008964:	4b2e      	ldr	r3, [pc, #184]	; (8008a20 <HAL_RCC_OscConfig+0x858>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a2d      	ldr	r2, [pc, #180]	; (8008a20 <HAL_RCC_OscConfig+0x858>)
 800896a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800896e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008970:	f7fd f9bc 	bl	8005cec <HAL_GetTick>
 8008974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008976:	e008      	b.n	800898a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008978:	f7fd f9b8 	bl	8005cec <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b02      	cmp	r3, #2
 8008984:	d901      	bls.n	800898a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e045      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800898a:	4b25      	ldr	r3, [pc, #148]	; (8008a20 <HAL_RCC_OscConfig+0x858>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1f0      	bne.n	8008978 <HAL_RCC_OscConfig+0x7b0>
 8008996:	e03d      	b.n	8008a14 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008998:	4b21      	ldr	r3, [pc, #132]	; (8008a20 <HAL_RCC_OscConfig+0x858>)
 800899a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800899e:	4b20      	ldr	r3, [pc, #128]	; (8008a20 <HAL_RCC_OscConfig+0x858>)
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d031      	beq.n	8008a10 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f003 0203 	and.w	r2, r3, #3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d12a      	bne.n	8008a10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	091b      	lsrs	r3, r3, #4
 80089be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d122      	bne.n	8008a10 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d11a      	bne.n	8008a10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	0a5b      	lsrs	r3, r3, #9
 80089de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d111      	bne.n	8008a10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	0c1b      	lsrs	r3, r3, #16
 80089f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d108      	bne.n	8008a10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	0e1b      	lsrs	r3, r3, #24
 8008a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d001      	beq.n	8008a14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e000      	b.n	8008a16 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3730      	adds	r7, #48	; 0x30
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	58024400 	.word	0x58024400

08008a24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e19c      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a38:	4b8a      	ldr	r3, [pc, #552]	; (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d910      	bls.n	8008a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a46:	4b87      	ldr	r3, [pc, #540]	; (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f023 020f 	bic.w	r2, r3, #15
 8008a4e:	4985      	ldr	r1, [pc, #532]	; (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a56:	4b83      	ldr	r3, [pc, #524]	; (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 030f 	and.w	r3, r3, #15
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d001      	beq.n	8008a68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e184      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d010      	beq.n	8008a96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691a      	ldr	r2, [r3, #16]
 8008a78:	4b7b      	ldr	r3, [pc, #492]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d908      	bls.n	8008a96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a84:	4b78      	ldr	r3, [pc, #480]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	4975      	ldr	r1, [pc, #468]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0308 	and.w	r3, r3, #8
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d010      	beq.n	8008ac4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	695a      	ldr	r2, [r3, #20]
 8008aa6:	4b70      	ldr	r3, [pc, #448]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d908      	bls.n	8008ac4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ab2:	4b6d      	ldr	r3, [pc, #436]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	496a      	ldr	r1, [pc, #424]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d010      	beq.n	8008af2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	699a      	ldr	r2, [r3, #24]
 8008ad4:	4b64      	ldr	r3, [pc, #400]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d908      	bls.n	8008af2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ae0:	4b61      	ldr	r3, [pc, #388]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	495e      	ldr	r1, [pc, #376]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0320 	and.w	r3, r3, #32
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d010      	beq.n	8008b20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	69da      	ldr	r2, [r3, #28]
 8008b02:	4b59      	ldr	r3, [pc, #356]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d908      	bls.n	8008b20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b0e:	4b56      	ldr	r3, [pc, #344]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	4953      	ldr	r1, [pc, #332]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d010      	beq.n	8008b4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68da      	ldr	r2, [r3, #12]
 8008b30:	4b4d      	ldr	r3, [pc, #308]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	f003 030f 	and.w	r3, r3, #15
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d908      	bls.n	8008b4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b3c:	4b4a      	ldr	r3, [pc, #296]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	f023 020f 	bic.w	r2, r3, #15
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	4947      	ldr	r1, [pc, #284]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d055      	beq.n	8008c06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b5a:	4b43      	ldr	r3, [pc, #268]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	4940      	ldr	r1, [pc, #256]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d107      	bne.n	8008b84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b74:	4b3c      	ldr	r3, [pc, #240]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d121      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e0f6      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d107      	bne.n	8008b9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b8c:	4b36      	ldr	r3, [pc, #216]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d115      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e0ea      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d107      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ba4:	4b30      	ldr	r3, [pc, #192]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d109      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e0de      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bb4:	4b2c      	ldr	r3, [pc, #176]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0304 	and.w	r3, r3, #4
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e0d6      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008bc4:	4b28      	ldr	r3, [pc, #160]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	f023 0207 	bic.w	r2, r3, #7
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	4925      	ldr	r1, [pc, #148]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bd6:	f7fd f889 	bl	8005cec <HAL_GetTick>
 8008bda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bdc:	e00a      	b.n	8008bf4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bde:	f7fd f885 	bl	8005cec <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e0be      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bf4:	4b1c      	ldr	r3, [pc, #112]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d1eb      	bne.n	8008bde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d010      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	4b14      	ldr	r3, [pc, #80]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d208      	bcs.n	8008c34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c22:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	f023 020f 	bic.w	r2, r3, #15
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	490e      	ldr	r1, [pc, #56]	; (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c34:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 030f 	and.w	r3, r3, #15
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d214      	bcs.n	8008c6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c42:	4b08      	ldr	r3, [pc, #32]	; (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f023 020f 	bic.w	r2, r3, #15
 8008c4a:	4906      	ldr	r1, [pc, #24]	; (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c52:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d005      	beq.n	8008c6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e086      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
 8008c64:	52002000 	.word	0x52002000
 8008c68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d010      	beq.n	8008c9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	691a      	ldr	r2, [r3, #16]
 8008c7c:	4b3f      	ldr	r3, [pc, #252]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d208      	bcs.n	8008c9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c88:	4b3c      	ldr	r3, [pc, #240]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	4939      	ldr	r1, [pc, #228]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0308 	and.w	r3, r3, #8
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d010      	beq.n	8008cc8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695a      	ldr	r2, [r3, #20]
 8008caa:	4b34      	ldr	r3, [pc, #208]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008cac:	69db      	ldr	r3, [r3, #28]
 8008cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d208      	bcs.n	8008cc8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cb6:	4b31      	ldr	r3, [pc, #196]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	492e      	ldr	r1, [pc, #184]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0310 	and.w	r3, r3, #16
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d010      	beq.n	8008cf6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	699a      	ldr	r2, [r3, #24]
 8008cd8:	4b28      	ldr	r3, [pc, #160]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008cda:	69db      	ldr	r3, [r3, #28]
 8008cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d208      	bcs.n	8008cf6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ce4:	4b25      	ldr	r3, [pc, #148]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	4922      	ldr	r1, [pc, #136]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d010      	beq.n	8008d24 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	69da      	ldr	r2, [r3, #28]
 8008d06:	4b1d      	ldr	r3, [pc, #116]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d208      	bcs.n	8008d24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d12:	4b1a      	ldr	r3, [pc, #104]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	4917      	ldr	r1, [pc, #92]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d24:	f000 f834 	bl	8008d90 <HAL_RCC_GetSysClockFreq>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	4b14      	ldr	r3, [pc, #80]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	0a1b      	lsrs	r3, r3, #8
 8008d30:	f003 030f 	and.w	r3, r3, #15
 8008d34:	4912      	ldr	r1, [pc, #72]	; (8008d80 <HAL_RCC_ClockConfig+0x35c>)
 8008d36:	5ccb      	ldrb	r3, [r1, r3]
 8008d38:	f003 031f 	and.w	r3, r3, #31
 8008d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d42:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	4a0d      	ldr	r2, [pc, #52]	; (8008d80 <HAL_RCC_ClockConfig+0x35c>)
 8008d4c:	5cd3      	ldrb	r3, [r2, r3]
 8008d4e:	f003 031f 	and.w	r3, r3, #31
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	fa22 f303 	lsr.w	r3, r2, r3
 8008d58:	4a0a      	ldr	r2, [pc, #40]	; (8008d84 <HAL_RCC_ClockConfig+0x360>)
 8008d5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d5c:	4a0a      	ldr	r2, [pc, #40]	; (8008d88 <HAL_RCC_ClockConfig+0x364>)
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008d62:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <HAL_RCC_ClockConfig+0x368>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fc fdb2 	bl	80058d0 <HAL_InitTick>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	58024400 	.word	0x58024400
 8008d80:	0800d9a8 	.word	0x0800d9a8
 8008d84:	24000024 	.word	0x24000024
 8008d88:	24000020 	.word	0x24000020
 8008d8c:	24000028 	.word	0x24000028

08008d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b089      	sub	sp, #36	; 0x24
 8008d94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d96:	4bb3      	ldr	r3, [pc, #716]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d9e:	2b18      	cmp	r3, #24
 8008da0:	f200 8155 	bhi.w	800904e <HAL_RCC_GetSysClockFreq+0x2be>
 8008da4:	a201      	add	r2, pc, #4	; (adr r2, 8008dac <HAL_RCC_GetSysClockFreq+0x1c>)
 8008da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008daa:	bf00      	nop
 8008dac:	08008e11 	.word	0x08008e11
 8008db0:	0800904f 	.word	0x0800904f
 8008db4:	0800904f 	.word	0x0800904f
 8008db8:	0800904f 	.word	0x0800904f
 8008dbc:	0800904f 	.word	0x0800904f
 8008dc0:	0800904f 	.word	0x0800904f
 8008dc4:	0800904f 	.word	0x0800904f
 8008dc8:	0800904f 	.word	0x0800904f
 8008dcc:	08008e37 	.word	0x08008e37
 8008dd0:	0800904f 	.word	0x0800904f
 8008dd4:	0800904f 	.word	0x0800904f
 8008dd8:	0800904f 	.word	0x0800904f
 8008ddc:	0800904f 	.word	0x0800904f
 8008de0:	0800904f 	.word	0x0800904f
 8008de4:	0800904f 	.word	0x0800904f
 8008de8:	0800904f 	.word	0x0800904f
 8008dec:	08008e3d 	.word	0x08008e3d
 8008df0:	0800904f 	.word	0x0800904f
 8008df4:	0800904f 	.word	0x0800904f
 8008df8:	0800904f 	.word	0x0800904f
 8008dfc:	0800904f 	.word	0x0800904f
 8008e00:	0800904f 	.word	0x0800904f
 8008e04:	0800904f 	.word	0x0800904f
 8008e08:	0800904f 	.word	0x0800904f
 8008e0c:	08008e43 	.word	0x08008e43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e10:	4b94      	ldr	r3, [pc, #592]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d009      	beq.n	8008e30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e1c:	4b91      	ldr	r3, [pc, #580]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	08db      	lsrs	r3, r3, #3
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	4a90      	ldr	r2, [pc, #576]	; (8009068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e28:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008e2e:	e111      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e30:	4b8d      	ldr	r3, [pc, #564]	; (8009068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e32:	61bb      	str	r3, [r7, #24]
    break;
 8008e34:	e10e      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008e36:	4b8d      	ldr	r3, [pc, #564]	; (800906c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e38:	61bb      	str	r3, [r7, #24]
    break;
 8008e3a:	e10b      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008e3c:	4b8c      	ldr	r3, [pc, #560]	; (8009070 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008e3e:	61bb      	str	r3, [r7, #24]
    break;
 8008e40:	e108      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e42:	4b88      	ldr	r3, [pc, #544]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008e4c:	4b85      	ldr	r3, [pc, #532]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e50:	091b      	lsrs	r3, r3, #4
 8008e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e58:	4b82      	ldr	r3, [pc, #520]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008e62:	4b80      	ldr	r3, [pc, #512]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e66:	08db      	lsrs	r3, r3, #3
 8008e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	fb02 f303 	mul.w	r3, r2, r3
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 80e1 	beq.w	8009048 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	f000 8083 	beq.w	8008f94 <HAL_RCC_GetSysClockFreq+0x204>
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	f200 80a1 	bhi.w	8008fd8 <HAL_RCC_GetSysClockFreq+0x248>
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <HAL_RCC_GetSysClockFreq+0x114>
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d056      	beq.n	8008f50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008ea2:	e099      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ea4:	4b6f      	ldr	r3, [pc, #444]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d02d      	beq.n	8008f0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008eb0:	4b6c      	ldr	r3, [pc, #432]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	08db      	lsrs	r3, r3, #3
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	4a6b      	ldr	r2, [pc, #428]	; (8009068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	ee07 3a90 	vmov	s15, r3
 8008ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eda:	4b62      	ldr	r3, [pc, #392]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008f0a:	e087      	b.n	800901c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009078 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f1e:	4b51      	ldr	r3, [pc, #324]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f4e:	e065      	b.n	800901c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800907c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f62:	4b40      	ldr	r3, [pc, #256]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f92:	e043      	b.n	800901c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	ee07 3a90 	vmov	s15, r3
 8008f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009080 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa6:	4b2f      	ldr	r3, [pc, #188]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fd6:	e021      	b.n	800901c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800907c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fea:	4b1e      	ldr	r3, [pc, #120]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ffe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800900a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800900e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800901a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800901c:	4b11      	ldr	r3, [pc, #68]	; (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800901e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009020:	0a5b      	lsrs	r3, r3, #9
 8009022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009026:	3301      	adds	r3, #1
 8009028:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	ee07 3a90 	vmov	s15, r3
 8009030:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009034:	edd7 6a07 	vldr	s13, [r7, #28]
 8009038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800903c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009040:	ee17 3a90 	vmov	r3, s15
 8009044:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009046:	e005      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]
    break;
 800904c:	e002      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800904e:	4b07      	ldr	r3, [pc, #28]	; (800906c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009050:	61bb      	str	r3, [r7, #24]
    break;
 8009052:	bf00      	nop
  }

  return sysclockfreq;
 8009054:	69bb      	ldr	r3, [r7, #24]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3724      	adds	r7, #36	; 0x24
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	58024400 	.word	0x58024400
 8009068:	03d09000 	.word	0x03d09000
 800906c:	003d0900 	.word	0x003d0900
 8009070:	007a1200 	.word	0x007a1200
 8009074:	46000000 	.word	0x46000000
 8009078:	4c742400 	.word	0x4c742400
 800907c:	4a742400 	.word	0x4a742400
 8009080:	4af42400 	.word	0x4af42400

08009084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800908a:	f7ff fe81 	bl	8008d90 <HAL_RCC_GetSysClockFreq>
 800908e:	4602      	mov	r2, r0
 8009090:	4b10      	ldr	r3, [pc, #64]	; (80090d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	0a1b      	lsrs	r3, r3, #8
 8009096:	f003 030f 	and.w	r3, r3, #15
 800909a:	490f      	ldr	r1, [pc, #60]	; (80090d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800909c:	5ccb      	ldrb	r3, [r1, r3]
 800909e:	f003 031f 	and.w	r3, r3, #31
 80090a2:	fa22 f303 	lsr.w	r3, r2, r3
 80090a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090a8:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	4a09      	ldr	r2, [pc, #36]	; (80090d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80090b2:	5cd3      	ldrb	r3, [r2, r3]
 80090b4:	f003 031f 	and.w	r3, r3, #31
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	fa22 f303 	lsr.w	r3, r2, r3
 80090be:	4a07      	ldr	r2, [pc, #28]	; (80090dc <HAL_RCC_GetHCLKFreq+0x58>)
 80090c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090c2:	4a07      	ldr	r2, [pc, #28]	; (80090e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80090c8:	4b04      	ldr	r3, [pc, #16]	; (80090dc <HAL_RCC_GetHCLKFreq+0x58>)
 80090ca:	681b      	ldr	r3, [r3, #0]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	58024400 	.word	0x58024400
 80090d8:	0800d9a8 	.word	0x0800d9a8
 80090dc:	24000024 	.word	0x24000024
 80090e0:	24000020 	.word	0x24000020

080090e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80090e8:	f7ff ffcc 	bl	8009084 <HAL_RCC_GetHCLKFreq>
 80090ec:	4602      	mov	r2, r0
 80090ee:	4b06      	ldr	r3, [pc, #24]	; (8009108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	091b      	lsrs	r3, r3, #4
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	4904      	ldr	r1, [pc, #16]	; (800910c <HAL_RCC_GetPCLK1Freq+0x28>)
 80090fa:	5ccb      	ldrb	r3, [r1, r3]
 80090fc:	f003 031f 	and.w	r3, r3, #31
 8009100:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009104:	4618      	mov	r0, r3
 8009106:	bd80      	pop	{r7, pc}
 8009108:	58024400 	.word	0x58024400
 800910c:	0800d9a8 	.word	0x0800d9a8

08009110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009114:	f7ff ffb6 	bl	8009084 <HAL_RCC_GetHCLKFreq>
 8009118:	4602      	mov	r2, r0
 800911a:	4b06      	ldr	r3, [pc, #24]	; (8009134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	0a1b      	lsrs	r3, r3, #8
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	4904      	ldr	r1, [pc, #16]	; (8009138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009126:	5ccb      	ldrb	r3, [r1, r3]
 8009128:	f003 031f 	and.w	r3, r3, #31
 800912c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009130:	4618      	mov	r0, r3
 8009132:	bd80      	pop	{r7, pc}
 8009134:	58024400 	.word	0x58024400
 8009138:	0800d9a8 	.word	0x0800d9a8

0800913c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	223f      	movs	r2, #63	; 0x3f
 800914a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800914c:	4b1a      	ldr	r3, [pc, #104]	; (80091b8 <HAL_RCC_GetClockConfig+0x7c>)
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	f003 0207 	and.w	r2, r3, #7
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009158:	4b17      	ldr	r3, [pc, #92]	; (80091b8 <HAL_RCC_GetClockConfig+0x7c>)
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009164:	4b14      	ldr	r3, [pc, #80]	; (80091b8 <HAL_RCC_GetClockConfig+0x7c>)
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	f003 020f 	and.w	r2, r3, #15
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009170:	4b11      	ldr	r3, [pc, #68]	; (80091b8 <HAL_RCC_GetClockConfig+0x7c>)
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800917c:	4b0e      	ldr	r3, [pc, #56]	; (80091b8 <HAL_RCC_GetClockConfig+0x7c>)
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009188:	4b0b      	ldr	r3, [pc, #44]	; (80091b8 <HAL_RCC_GetClockConfig+0x7c>)
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009194:	4b08      	ldr	r3, [pc, #32]	; (80091b8 <HAL_RCC_GetClockConfig+0x7c>)
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80091a0:	4b06      	ldr	r3, [pc, #24]	; (80091bc <HAL_RCC_GetClockConfig+0x80>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 020f 	and.w	r2, r3, #15
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	601a      	str	r2, [r3, #0]
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	58024400 	.word	0x58024400
 80091bc:	52002000 	.word	0x52002000

080091c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091c8:	2300      	movs	r3, #0
 80091ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091cc:	2300      	movs	r3, #0
 80091ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d03f      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091e4:	d02a      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80091e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091ea:	d824      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091f0:	d018      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80091f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091f6:	d81e      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80091fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009200:	d007      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009202:	e018      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009204:	4ba3      	ldr	r3, [pc, #652]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	4aa2      	ldr	r2, [pc, #648]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800920a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800920e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009210:	e015      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	3304      	adds	r3, #4
 8009216:	2102      	movs	r1, #2
 8009218:	4618      	mov	r0, r3
 800921a:	f001 f9d5 	bl	800a5c8 <RCCEx_PLL2_Config>
 800921e:	4603      	mov	r3, r0
 8009220:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009222:	e00c      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3324      	adds	r3, #36	; 0x24
 8009228:	2102      	movs	r1, #2
 800922a:	4618      	mov	r0, r3
 800922c:	f001 fa7e 	bl	800a72c <RCCEx_PLL3_Config>
 8009230:	4603      	mov	r3, r0
 8009232:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009234:	e003      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	75fb      	strb	r3, [r7, #23]
      break;
 800923a:	e000      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800923c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800923e:	7dfb      	ldrb	r3, [r7, #23]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009244:	4b93      	ldr	r3, [pc, #588]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009250:	4990      	ldr	r1, [pc, #576]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009252:	4313      	orrs	r3, r2
 8009254:	650b      	str	r3, [r1, #80]	; 0x50
 8009256:	e001      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009264:	2b00      	cmp	r3, #0
 8009266:	d03d      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926c:	2b04      	cmp	r3, #4
 800926e:	d826      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009270:	a201      	add	r2, pc, #4	; (adr r2, 8009278 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	0800928d 	.word	0x0800928d
 800927c:	0800929b 	.word	0x0800929b
 8009280:	080092ad 	.word	0x080092ad
 8009284:	080092c5 	.word	0x080092c5
 8009288:	080092c5 	.word	0x080092c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800928c:	4b81      	ldr	r3, [pc, #516]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800928e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009290:	4a80      	ldr	r2, [pc, #512]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009296:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009298:	e015      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3304      	adds	r3, #4
 800929e:	2100      	movs	r1, #0
 80092a0:	4618      	mov	r0, r3
 80092a2:	f001 f991 	bl	800a5c8 <RCCEx_PLL2_Config>
 80092a6:	4603      	mov	r3, r0
 80092a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092aa:	e00c      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3324      	adds	r3, #36	; 0x24
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 fa3a 	bl	800a72c <RCCEx_PLL3_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092bc:	e003      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	75fb      	strb	r3, [r7, #23]
      break;
 80092c2:	e000      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80092c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092c6:	7dfb      	ldrb	r3, [r7, #23]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d109      	bne.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092cc:	4b71      	ldr	r3, [pc, #452]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d0:	f023 0207 	bic.w	r2, r3, #7
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092d8:	496e      	ldr	r1, [pc, #440]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092da:	4313      	orrs	r3, r2
 80092dc:	650b      	str	r3, [r1, #80]	; 0x50
 80092de:	e001      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e0:	7dfb      	ldrb	r3, [r7, #23]
 80092e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d042      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092f8:	d02b      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80092fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092fe:	d825      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009300:	2bc0      	cmp	r3, #192	; 0xc0
 8009302:	d028      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009304:	2bc0      	cmp	r3, #192	; 0xc0
 8009306:	d821      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009308:	2b80      	cmp	r3, #128	; 0x80
 800930a:	d016      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800930c:	2b80      	cmp	r3, #128	; 0x80
 800930e:	d81d      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009314:	2b40      	cmp	r3, #64	; 0x40
 8009316:	d007      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009318:	e018      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800931a:	4b5e      	ldr	r3, [pc, #376]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800931c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931e:	4a5d      	ldr	r2, [pc, #372]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009324:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009326:	e017      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3304      	adds	r3, #4
 800932c:	2100      	movs	r1, #0
 800932e:	4618      	mov	r0, r3
 8009330:	f001 f94a 	bl	800a5c8 <RCCEx_PLL2_Config>
 8009334:	4603      	mov	r3, r0
 8009336:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009338:	e00e      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	3324      	adds	r3, #36	; 0x24
 800933e:	2100      	movs	r1, #0
 8009340:	4618      	mov	r0, r3
 8009342:	f001 f9f3 	bl	800a72c <RCCEx_PLL3_Config>
 8009346:	4603      	mov	r3, r0
 8009348:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800934a:	e005      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	75fb      	strb	r3, [r7, #23]
      break;
 8009350:	e002      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009352:	bf00      	nop
 8009354:	e000      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d109      	bne.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800935e:	4b4d      	ldr	r3, [pc, #308]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009362:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800936a:	494a      	ldr	r1, [pc, #296]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800936c:	4313      	orrs	r3, r2
 800936e:	650b      	str	r3, [r1, #80]	; 0x50
 8009370:	e001      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800937e:	2b00      	cmp	r3, #0
 8009380:	d049      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009388:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800938c:	d030      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800938e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009392:	d82a      	bhi.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009394:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009398:	d02c      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800939a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800939e:	d824      	bhi.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80093a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093a4:	d018      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80093a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093aa:	d81e      	bhi.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80093b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093b4:	d007      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80093b6:	e018      	b.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093b8:	4b36      	ldr	r3, [pc, #216]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	4a35      	ldr	r2, [pc, #212]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093c4:	e017      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3304      	adds	r3, #4
 80093ca:	2100      	movs	r1, #0
 80093cc:	4618      	mov	r0, r3
 80093ce:	f001 f8fb 	bl	800a5c8 <RCCEx_PLL2_Config>
 80093d2:	4603      	mov	r3, r0
 80093d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80093d6:	e00e      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3324      	adds	r3, #36	; 0x24
 80093dc:	2100      	movs	r1, #0
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 f9a4 	bl	800a72c <RCCEx_PLL3_Config>
 80093e4:	4603      	mov	r3, r0
 80093e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093e8:	e005      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	75fb      	strb	r3, [r7, #23]
      break;
 80093ee:	e002      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80093f0:	bf00      	nop
 80093f2:	e000      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80093f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80093fc:	4b25      	ldr	r3, [pc, #148]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009400:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800940a:	4922      	ldr	r1, [pc, #136]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800940c:	4313      	orrs	r3, r2
 800940e:	658b      	str	r3, [r1, #88]	; 0x58
 8009410:	e001      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009412:	7dfb      	ldrb	r3, [r7, #23]
 8009414:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800941e:	2b00      	cmp	r3, #0
 8009420:	d04b      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800942c:	d030      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800942e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009432:	d82a      	bhi.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009434:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009438:	d02e      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800943a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800943e:	d824      	bhi.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009444:	d018      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800944a:	d81e      	bhi.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009454:	d007      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009456:	e018      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009458:	4b0e      	ldr	r3, [pc, #56]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	4a0d      	ldr	r2, [pc, #52]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800945e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009462:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009464:	e019      	b.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	3304      	adds	r3, #4
 800946a:	2100      	movs	r1, #0
 800946c:	4618      	mov	r0, r3
 800946e:	f001 f8ab 	bl	800a5c8 <RCCEx_PLL2_Config>
 8009472:	4603      	mov	r3, r0
 8009474:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009476:	e010      	b.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3324      	adds	r3, #36	; 0x24
 800947c:	2100      	movs	r1, #0
 800947e:	4618      	mov	r0, r3
 8009480:	f001 f954 	bl	800a72c <RCCEx_PLL3_Config>
 8009484:	4603      	mov	r3, r0
 8009486:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009488:	e007      	b.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	75fb      	strb	r3, [r7, #23]
      break;
 800948e:	e004      	b.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009490:	bf00      	nop
 8009492:	e002      	b.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009494:	58024400 	.word	0x58024400
      break;
 8009498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800949a:	7dfb      	ldrb	r3, [r7, #23]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80094a0:	4b99      	ldr	r3, [pc, #612]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80094ae:	4996      	ldr	r1, [pc, #600]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094b0:	4313      	orrs	r3, r2
 80094b2:	658b      	str	r3, [r1, #88]	; 0x58
 80094b4:	e001      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d032      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ca:	2b30      	cmp	r3, #48	; 0x30
 80094cc:	d01c      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80094ce:	2b30      	cmp	r3, #48	; 0x30
 80094d0:	d817      	bhi.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	d00c      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d813      	bhi.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d016      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80094de:	2b10      	cmp	r3, #16
 80094e0:	d10f      	bne.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e2:	4b89      	ldr	r3, [pc, #548]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	4a88      	ldr	r2, [pc, #544]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80094ee:	e00e      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3304      	adds	r3, #4
 80094f4:	2102      	movs	r1, #2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f001 f866 	bl	800a5c8 <RCCEx_PLL2_Config>
 80094fc:	4603      	mov	r3, r0
 80094fe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009500:	e005      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	75fb      	strb	r3, [r7, #23]
      break;
 8009506:	e002      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009508:	bf00      	nop
 800950a:	e000      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800950c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d109      	bne.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009514:	4b7c      	ldr	r3, [pc, #496]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009518:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009520:	4979      	ldr	r1, [pc, #484]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009522:	4313      	orrs	r3, r2
 8009524:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009526:	e001      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009528:	7dfb      	ldrb	r3, [r7, #23]
 800952a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d047      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800953c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009540:	d030      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009546:	d82a      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009548:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800954c:	d02c      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800954e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009552:	d824      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009558:	d018      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800955a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800955e:	d81e      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009568:	d007      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800956a:	e018      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800956c:	4b66      	ldr	r3, [pc, #408]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	4a65      	ldr	r2, [pc, #404]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009578:	e017      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3304      	adds	r3, #4
 800957e:	2100      	movs	r1, #0
 8009580:	4618      	mov	r0, r3
 8009582:	f001 f821 	bl	800a5c8 <RCCEx_PLL2_Config>
 8009586:	4603      	mov	r3, r0
 8009588:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800958a:	e00e      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3324      	adds	r3, #36	; 0x24
 8009590:	2100      	movs	r1, #0
 8009592:	4618      	mov	r0, r3
 8009594:	f001 f8ca 	bl	800a72c <RCCEx_PLL3_Config>
 8009598:	4603      	mov	r3, r0
 800959a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800959c:	e005      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]
      break;
 80095a2:	e002      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80095a4:	bf00      	nop
 80095a6:	e000      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80095a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d109      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80095b0:	4b55      	ldr	r3, [pc, #340]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095bc:	4952      	ldr	r1, [pc, #328]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	650b      	str	r3, [r1, #80]	; 0x50
 80095c2:	e001      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d049      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095dc:	d02e      	beq.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80095de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095e2:	d828      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80095e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095e8:	d02a      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80095ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095ee:	d822      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80095f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095f4:	d026      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80095f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095fa:	d81c      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80095fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009600:	d010      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009606:	d816      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009608:	2b00      	cmp	r3, #0
 800960a:	d01d      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800960c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009610:	d111      	bne.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3304      	adds	r3, #4
 8009616:	2101      	movs	r1, #1
 8009618:	4618      	mov	r0, r3
 800961a:	f000 ffd5 	bl	800a5c8 <RCCEx_PLL2_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009622:	e012      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3324      	adds	r3, #36	; 0x24
 8009628:	2101      	movs	r1, #1
 800962a:	4618      	mov	r0, r3
 800962c:	f001 f87e 	bl	800a72c <RCCEx_PLL3_Config>
 8009630:	4603      	mov	r3, r0
 8009632:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009634:	e009      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	75fb      	strb	r3, [r7, #23]
      break;
 800963a:	e006      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800963c:	bf00      	nop
 800963e:	e004      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009640:	bf00      	nop
 8009642:	e002      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009644:	bf00      	nop
 8009646:	e000      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800964a:	7dfb      	ldrb	r3, [r7, #23]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d109      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009650:	4b2d      	ldr	r3, [pc, #180]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009654:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800965c:	492a      	ldr	r1, [pc, #168]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800965e:	4313      	orrs	r3, r2
 8009660:	650b      	str	r3, [r1, #80]	; 0x50
 8009662:	e001      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d04d      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800967a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800967e:	d02e      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009684:	d828      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800968a:	d02a      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800968c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009690:	d822      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009692:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009696:	d026      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009698:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800969c:	d81c      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800969e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096a2:	d010      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80096a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096a8:	d816      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d01d      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80096ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096b2:	d111      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	3304      	adds	r3, #4
 80096b8:	2101      	movs	r1, #1
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 ff84 	bl	800a5c8 <RCCEx_PLL2_Config>
 80096c0:	4603      	mov	r3, r0
 80096c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80096c4:	e012      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3324      	adds	r3, #36	; 0x24
 80096ca:	2101      	movs	r1, #1
 80096cc:	4618      	mov	r0, r3
 80096ce:	f001 f82d 	bl	800a72c <RCCEx_PLL3_Config>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80096d6:	e009      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	75fb      	strb	r3, [r7, #23]
      break;
 80096dc:	e006      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80096de:	bf00      	nop
 80096e0:	e004      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80096e2:	bf00      	nop
 80096e4:	e002      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80096e6:	bf00      	nop
 80096e8:	e000      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80096ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10c      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096f2:	4b05      	ldr	r3, [pc, #20]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009700:	4901      	ldr	r1, [pc, #4]	; (8009708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009702:	4313      	orrs	r3, r2
 8009704:	658b      	str	r3, [r1, #88]	; 0x58
 8009706:	e003      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970c:	7dfb      	ldrb	r3, [r7, #23]
 800970e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d02f      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009724:	d00e      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800972a:	d814      	bhi.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800972c:	2b00      	cmp	r3, #0
 800972e:	d015      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009734:	d10f      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009736:	4baf      	ldr	r3, [pc, #700]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973a:	4aae      	ldr	r2, [pc, #696]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800973c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009740:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009742:	e00c      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3304      	adds	r3, #4
 8009748:	2101      	movs	r1, #1
 800974a:	4618      	mov	r0, r3
 800974c:	f000 ff3c 	bl	800a5c8 <RCCEx_PLL2_Config>
 8009750:	4603      	mov	r3, r0
 8009752:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009754:	e003      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	75fb      	strb	r3, [r7, #23]
      break;
 800975a:	e000      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800975c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800975e:	7dfb      	ldrb	r3, [r7, #23]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d109      	bne.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009764:	4ba3      	ldr	r3, [pc, #652]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009768:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009770:	49a0      	ldr	r1, [pc, #640]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009772:	4313      	orrs	r3, r2
 8009774:	650b      	str	r3, [r1, #80]	; 0x50
 8009776:	e001      	b.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009778:	7dfb      	ldrb	r3, [r7, #23]
 800977a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d032      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800978c:	2b03      	cmp	r3, #3
 800978e:	d81b      	bhi.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009790:	a201      	add	r2, pc, #4	; (adr r2, 8009798 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097cf 	.word	0x080097cf
 800979c:	080097a9 	.word	0x080097a9
 80097a0:	080097b7 	.word	0x080097b7
 80097a4:	080097cf 	.word	0x080097cf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a8:	4b92      	ldr	r3, [pc, #584]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	4a91      	ldr	r2, [pc, #580]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80097b4:	e00c      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3304      	adds	r3, #4
 80097ba:	2102      	movs	r1, #2
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 ff03 	bl	800a5c8 <RCCEx_PLL2_Config>
 80097c2:	4603      	mov	r3, r0
 80097c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80097c6:	e003      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	75fb      	strb	r3, [r7, #23]
      break;
 80097cc:	e000      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80097ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d109      	bne.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097d6:	4b87      	ldr	r3, [pc, #540]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097da:	f023 0203 	bic.w	r2, r3, #3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097e2:	4984      	ldr	r1, [pc, #528]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80097e8:	e001      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 8086 	beq.w	8009908 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097fc:	4b7e      	ldr	r3, [pc, #504]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a7d      	ldr	r2, [pc, #500]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009806:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009808:	f7fc fa70 	bl	8005cec <HAL_GetTick>
 800980c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800980e:	e009      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009810:	f7fc fa6c 	bl	8005cec <HAL_GetTick>
 8009814:	4602      	mov	r2, r0
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	2b64      	cmp	r3, #100	; 0x64
 800981c:	d902      	bls.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	75fb      	strb	r3, [r7, #23]
        break;
 8009822:	e005      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009824:	4b74      	ldr	r3, [pc, #464]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800982c:	2b00      	cmp	r3, #0
 800982e:	d0ef      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d166      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009836:	4b6f      	ldr	r3, [pc, #444]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009838:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009840:	4053      	eors	r3, r2
 8009842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009846:	2b00      	cmp	r3, #0
 8009848:	d013      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800984a:	4b6a      	ldr	r3, [pc, #424]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800984c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800984e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009852:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009854:	4b67      	ldr	r3, [pc, #412]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009858:	4a66      	ldr	r2, [pc, #408]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800985a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800985e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009860:	4b64      	ldr	r3, [pc, #400]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009864:	4a63      	ldr	r2, [pc, #396]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800986a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800986c:	4a61      	ldr	r2, [pc, #388]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800987c:	d115      	bne.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800987e:	f7fc fa35 	bl	8005cec <HAL_GetTick>
 8009882:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009884:	e00b      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009886:	f7fc fa31 	bl	8005cec <HAL_GetTick>
 800988a:	4602      	mov	r2, r0
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	f241 3288 	movw	r2, #5000	; 0x1388
 8009894:	4293      	cmp	r3, r2
 8009896:	d902      	bls.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	75fb      	strb	r3, [r7, #23]
            break;
 800989c:	e005      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800989e:	4b55      	ldr	r3, [pc, #340]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a2:	f003 0302 	and.w	r3, r3, #2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d0ed      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d126      	bne.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098be:	d10d      	bne.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80098c0:	4b4c      	ldr	r3, [pc, #304]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098ce:	0919      	lsrs	r1, r3, #4
 80098d0:	4b4a      	ldr	r3, [pc, #296]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80098d2:	400b      	ands	r3, r1
 80098d4:	4947      	ldr	r1, [pc, #284]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	610b      	str	r3, [r1, #16]
 80098da:	e005      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80098dc:	4b45      	ldr	r3, [pc, #276]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	4a44      	ldr	r2, [pc, #272]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098e6:	6113      	str	r3, [r2, #16]
 80098e8:	4b42      	ldr	r3, [pc, #264]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098f6:	493f      	ldr	r1, [pc, #252]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	670b      	str	r3, [r1, #112]	; 0x70
 80098fc:	e004      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	75bb      	strb	r3, [r7, #22]
 8009902:	e001      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009904:	7dfb      	ldrb	r3, [r7, #23]
 8009906:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 8085 	beq.w	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800991a:	2b28      	cmp	r3, #40	; 0x28
 800991c:	d866      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800991e:	a201      	add	r2, pc, #4	; (adr r2, 8009924 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009924:	08009a01 	.word	0x08009a01
 8009928:	080099ed 	.word	0x080099ed
 800992c:	080099ed 	.word	0x080099ed
 8009930:	080099ed 	.word	0x080099ed
 8009934:	080099ed 	.word	0x080099ed
 8009938:	080099ed 	.word	0x080099ed
 800993c:	080099ed 	.word	0x080099ed
 8009940:	080099ed 	.word	0x080099ed
 8009944:	080099c9 	.word	0x080099c9
 8009948:	080099ed 	.word	0x080099ed
 800994c:	080099ed 	.word	0x080099ed
 8009950:	080099ed 	.word	0x080099ed
 8009954:	080099ed 	.word	0x080099ed
 8009958:	080099ed 	.word	0x080099ed
 800995c:	080099ed 	.word	0x080099ed
 8009960:	080099ed 	.word	0x080099ed
 8009964:	080099db 	.word	0x080099db
 8009968:	080099ed 	.word	0x080099ed
 800996c:	080099ed 	.word	0x080099ed
 8009970:	080099ed 	.word	0x080099ed
 8009974:	080099ed 	.word	0x080099ed
 8009978:	080099ed 	.word	0x080099ed
 800997c:	080099ed 	.word	0x080099ed
 8009980:	080099ed 	.word	0x080099ed
 8009984:	08009a01 	.word	0x08009a01
 8009988:	080099ed 	.word	0x080099ed
 800998c:	080099ed 	.word	0x080099ed
 8009990:	080099ed 	.word	0x080099ed
 8009994:	080099ed 	.word	0x080099ed
 8009998:	080099ed 	.word	0x080099ed
 800999c:	080099ed 	.word	0x080099ed
 80099a0:	080099ed 	.word	0x080099ed
 80099a4:	08009a01 	.word	0x08009a01
 80099a8:	080099ed 	.word	0x080099ed
 80099ac:	080099ed 	.word	0x080099ed
 80099b0:	080099ed 	.word	0x080099ed
 80099b4:	080099ed 	.word	0x080099ed
 80099b8:	080099ed 	.word	0x080099ed
 80099bc:	080099ed 	.word	0x080099ed
 80099c0:	080099ed 	.word	0x080099ed
 80099c4:	08009a01 	.word	0x08009a01
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3304      	adds	r3, #4
 80099cc:	2101      	movs	r1, #1
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fdfa 	bl	800a5c8 <RCCEx_PLL2_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099d8:	e013      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3324      	adds	r3, #36	; 0x24
 80099de:	2101      	movs	r1, #1
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fea3 	bl	800a72c <RCCEx_PLL3_Config>
 80099e6:	4603      	mov	r3, r0
 80099e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099ea:	e00a      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	75fb      	strb	r3, [r7, #23]
      break;
 80099f0:	e007      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80099f2:	bf00      	nop
 80099f4:	58024400 	.word	0x58024400
 80099f8:	58024800 	.word	0x58024800
 80099fc:	00ffffcf 	.word	0x00ffffcf
      break;
 8009a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d109      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009a08:	4b96      	ldr	r3, [pc, #600]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a14:	4993      	ldr	r1, [pc, #588]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	654b      	str	r3, [r1, #84]	; 0x54
 8009a1a:	e001      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
 8009a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d038      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a30:	2b05      	cmp	r3, #5
 8009a32:	d821      	bhi.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009a34:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3a:	bf00      	nop
 8009a3c:	08009a7f 	.word	0x08009a7f
 8009a40:	08009a55 	.word	0x08009a55
 8009a44:	08009a67 	.word	0x08009a67
 8009a48:	08009a7f 	.word	0x08009a7f
 8009a4c:	08009a7f 	.word	0x08009a7f
 8009a50:	08009a7f 	.word	0x08009a7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3304      	adds	r3, #4
 8009a58:	2101      	movs	r1, #1
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 fdb4 	bl	800a5c8 <RCCEx_PLL2_Config>
 8009a60:	4603      	mov	r3, r0
 8009a62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a64:	e00c      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	3324      	adds	r3, #36	; 0x24
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fe5d 	bl	800a72c <RCCEx_PLL3_Config>
 8009a72:	4603      	mov	r3, r0
 8009a74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a76:	e003      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a7c:	e000      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d109      	bne.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a86:	4b77      	ldr	r3, [pc, #476]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8a:	f023 0207 	bic.w	r2, r3, #7
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a92:	4974      	ldr	r1, [pc, #464]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	654b      	str	r3, [r1, #84]	; 0x54
 8009a98:	e001      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 0304 	and.w	r3, r3, #4
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d03a      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ab0:	2b05      	cmp	r3, #5
 8009ab2:	d821      	bhi.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009ab4:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aba:	bf00      	nop
 8009abc:	08009aff 	.word	0x08009aff
 8009ac0:	08009ad5 	.word	0x08009ad5
 8009ac4:	08009ae7 	.word	0x08009ae7
 8009ac8:	08009aff 	.word	0x08009aff
 8009acc:	08009aff 	.word	0x08009aff
 8009ad0:	08009aff 	.word	0x08009aff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	2101      	movs	r1, #1
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 fd74 	bl	800a5c8 <RCCEx_PLL2_Config>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ae4:	e00c      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	3324      	adds	r3, #36	; 0x24
 8009aea:	2101      	movs	r1, #1
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 fe1d 	bl	800a72c <RCCEx_PLL3_Config>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009af6:	e003      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	75fb      	strb	r3, [r7, #23]
      break;
 8009afc:	e000      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10a      	bne.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b06:	4b57      	ldr	r3, [pc, #348]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0a:	f023 0207 	bic.w	r2, r3, #7
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b14:	4953      	ldr	r1, [pc, #332]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	658b      	str	r3, [r1, #88]	; 0x58
 8009b1a:	e001      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
 8009b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 0320 	and.w	r3, r3, #32
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d04b      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b36:	d02e      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b3c:	d828      	bhi.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b42:	d02a      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b48:	d822      	bhi.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009b4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b4e:	d026      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009b50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b54:	d81c      	bhi.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b5a:	d010      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b60:	d816      	bhi.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d01d      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b6a:	d111      	bne.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	2100      	movs	r1, #0
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 fd28 	bl	800a5c8 <RCCEx_PLL2_Config>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b7c:	e012      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	3324      	adds	r3, #36	; 0x24
 8009b82:	2102      	movs	r1, #2
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 fdd1 	bl	800a72c <RCCEx_PLL3_Config>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b8e:	e009      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	75fb      	strb	r3, [r7, #23]
      break;
 8009b94:	e006      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b96:	bf00      	nop
 8009b98:	e004      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b9a:	bf00      	nop
 8009b9c:	e002      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b9e:	bf00      	nop
 8009ba0:	e000      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10a      	bne.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009baa:	4b2e      	ldr	r3, [pc, #184]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb8:	492a      	ldr	r1, [pc, #168]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	654b      	str	r3, [r1, #84]	; 0x54
 8009bbe:	e001      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d04d      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009bd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009bda:	d02e      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009bdc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009be0:	d828      	bhi.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009be6:	d02a      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bec:	d822      	bhi.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009bee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bf2:	d026      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009bf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bf8:	d81c      	bhi.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bfe:	d010      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c04:	d816      	bhi.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d01d      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c0e:	d111      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3304      	adds	r3, #4
 8009c14:	2100      	movs	r1, #0
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fcd6 	bl	800a5c8 <RCCEx_PLL2_Config>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009c20:	e012      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3324      	adds	r3, #36	; 0x24
 8009c26:	2102      	movs	r1, #2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 fd7f 	bl	800a72c <RCCEx_PLL3_Config>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009c32:	e009      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	75fb      	strb	r3, [r7, #23]
      break;
 8009c38:	e006      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009c3a:	bf00      	nop
 8009c3c:	e004      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009c3e:	bf00      	nop
 8009c40:	e002      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009c42:	bf00      	nop
 8009c44:	e000      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10c      	bne.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c4e:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c5c:	4901      	ldr	r1, [pc, #4]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	658b      	str	r3, [r1, #88]	; 0x58
 8009c62:	e003      	b.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d04b      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c82:	d02e      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009c84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c88:	d828      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c8e:	d02a      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c94:	d822      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c9a:	d026      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009c9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009ca0:	d81c      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ca6:	d010      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cac:	d816      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d01d      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb6:	d111      	bne.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3304      	adds	r3, #4
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 fc82 	bl	800a5c8 <RCCEx_PLL2_Config>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009cc8:	e012      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3324      	adds	r3, #36	; 0x24
 8009cce:	2102      	movs	r1, #2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 fd2b 	bl	800a72c <RCCEx_PLL3_Config>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009cda:	e009      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce0:	e006      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009ce2:	bf00      	nop
 8009ce4:	e004      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009ce6:	bf00      	nop
 8009ce8:	e002      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009cea:	bf00      	nop
 8009cec:	e000      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10a      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009cf6:	4b9d      	ldr	r3, [pc, #628]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d04:	4999      	ldr	r1, [pc, #612]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	658b      	str	r3, [r1, #88]	; 0x58
 8009d0a:	e001      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0308 	and.w	r3, r3, #8
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d01a      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d26:	d10a      	bne.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3324      	adds	r3, #36	; 0x24
 8009d2c:	2102      	movs	r1, #2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 fcfc 	bl	800a72c <RCCEx_PLL3_Config>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009d3e:	4b8b      	ldr	r3, [pc, #556]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d4c:	4987      	ldr	r1, [pc, #540]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0310 	and.w	r3, r3, #16
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d01a      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d68:	d10a      	bne.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3324      	adds	r3, #36	; 0x24
 8009d6e:	2102      	movs	r1, #2
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 fcdb 	bl	800a72c <RCCEx_PLL3_Config>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d80:	4b7a      	ldr	r3, [pc, #488]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d8e:	4977      	ldr	r1, [pc, #476]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d034      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009daa:	d01d      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db0:	d817      	bhi.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dba:	d009      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009dbc:	e011      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 fbff 	bl	800a5c8 <RCCEx_PLL2_Config>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009dce:	e00c      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	3324      	adds	r3, #36	; 0x24
 8009dd4:	2102      	movs	r1, #2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 fca8 	bl	800a72c <RCCEx_PLL3_Config>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009de0:	e003      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	75fb      	strb	r3, [r7, #23]
      break;
 8009de6:	e000      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10a      	bne.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009df0:	4b5e      	ldr	r3, [pc, #376]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009dfe:	495b      	ldr	r1, [pc, #364]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	658b      	str	r3, [r1, #88]	; 0x58
 8009e04:	e001      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
 8009e08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d033      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e20:	d01c      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009e22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e26:	d816      	bhi.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e2c:	d003      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e32:	d007      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009e34:	e00f      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e36:	4b4d      	ldr	r3, [pc, #308]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	4a4c      	ldr	r2, [pc, #304]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009e42:	e00c      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3324      	adds	r3, #36	; 0x24
 8009e48:	2101      	movs	r1, #1
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 fc6e 	bl	800a72c <RCCEx_PLL3_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009e54:	e003      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	75fb      	strb	r3, [r7, #23]
      break;
 8009e5a:	e000      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e64:	4b41      	ldr	r3, [pc, #260]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e72:	493e      	ldr	r1, [pc, #248]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e74:	4313      	orrs	r3, r2
 8009e76:	654b      	str	r3, [r1, #84]	; 0x54
 8009e78:	e001      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d029      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e96:	d007      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009e98:	e00f      	b.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e9a:	4b34      	ldr	r3, [pc, #208]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9e:	4a33      	ldr	r2, [pc, #204]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009ea6:	e00b      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	2102      	movs	r1, #2
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 fb8a 	bl	800a5c8 <RCCEx_PLL2_Config>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009eb8:	e002      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8009ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d109      	bne.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009ec6:	4b29      	ldr	r3, [pc, #164]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ed2:	4926      	ldr	r1, [pc, #152]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ed8:	e001      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
 8009edc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00a      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3324      	adds	r3, #36	; 0x24
 8009eee:	2102      	movs	r1, #2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 fc1b 	bl	800a72c <RCCEx_PLL3_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d033      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f14:	d017      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f1a:	d811      	bhi.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f20:	d013      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f26:	d80b      	bhi.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d010      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f30:	d106      	bne.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f32:	4b0e      	ldr	r3, [pc, #56]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	4a0d      	ldr	r2, [pc, #52]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009f3e:	e007      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	75fb      	strb	r3, [r7, #23]
      break;
 8009f44:	e004      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009f46:	bf00      	nop
 8009f48:	e002      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009f4a:	bf00      	nop
 8009f4c:	e000      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10c      	bne.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f62:	4902      	ldr	r1, [pc, #8]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	654b      	str	r3, [r1, #84]	; 0x54
 8009f68:	e004      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009f6a:	bf00      	nop
 8009f6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d008      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f80:	4b31      	ldr	r3, [pc, #196]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8c:	492e      	ldr	r1, [pc, #184]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d009      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f9e:	4b2a      	ldr	r3, [pc, #168]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fac:	4926      	ldr	r1, [pc, #152]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d008      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009fbe:	4b22      	ldr	r3, [pc, #136]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fca:	491f      	ldr	r1, [pc, #124]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00d      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009fdc:	4b1a      	ldr	r3, [pc, #104]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	4a19      	ldr	r2, [pc, #100]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009fe2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fe6:	6113      	str	r3, [r2, #16]
 8009fe8:	4b17      	ldr	r3, [pc, #92]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009fea:	691a      	ldr	r2, [r3, #16]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009ff2:	4915      	ldr	r1, [pc, #84]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	da08      	bge.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a000:	4b11      	ldr	r3, [pc, #68]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a004:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a00c:	490e      	ldr	r1, [pc, #56]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a00e:	4313      	orrs	r3, r2
 800a010:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d009      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a01e:	4b0a      	ldr	r3, [pc, #40]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02c:	4906      	ldr	r1, [pc, #24]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a032:	7dbb      	ldrb	r3, [r7, #22]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	e000      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	58024400 	.word	0x58024400

0800a04c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a050:	f7ff f818 	bl	8009084 <HAL_RCC_GetHCLKFreq>
 800a054:	4602      	mov	r2, r0
 800a056:	4b06      	ldr	r3, [pc, #24]	; (800a070 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	091b      	lsrs	r3, r3, #4
 800a05c:	f003 0307 	and.w	r3, r3, #7
 800a060:	4904      	ldr	r1, [pc, #16]	; (800a074 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a062:	5ccb      	ldrb	r3, [r1, r3]
 800a064:	f003 031f 	and.w	r3, r3, #31
 800a068:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	58024400 	.word	0x58024400
 800a074:	0800d9a8 	.word	0x0800d9a8

0800a078 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a078:	b480      	push	{r7}
 800a07a:	b089      	sub	sp, #36	; 0x24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a080:	4ba1      	ldr	r3, [pc, #644]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a084:	f003 0303 	and.w	r3, r3, #3
 800a088:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a08a:	4b9f      	ldr	r3, [pc, #636]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08e:	0b1b      	lsrs	r3, r3, #12
 800a090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a094:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a096:	4b9c      	ldr	r3, [pc, #624]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	091b      	lsrs	r3, r3, #4
 800a09c:	f003 0301 	and.w	r3, r3, #1
 800a0a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a0a2:	4b99      	ldr	r3, [pc, #612]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a6:	08db      	lsrs	r3, r3, #3
 800a0a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	fb02 f303 	mul.w	r3, r2, r3
 800a0b2:	ee07 3a90 	vmov	s15, r3
 800a0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 8111 	beq.w	800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	f000 8083 	beq.w	800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	f200 80a1 	bhi.w	800a218 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d056      	beq.n	800a190 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a0e2:	e099      	b.n	800a218 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0e4:	4b88      	ldr	r3, [pc, #544]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0320 	and.w	r3, r3, #32
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d02d      	beq.n	800a14c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0f0:	4b85      	ldr	r3, [pc, #532]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	08db      	lsrs	r3, r3, #3
 800a0f6:	f003 0303 	and.w	r3, r3, #3
 800a0fa:	4a84      	ldr	r2, [pc, #528]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a0fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a100:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	ee07 3a90 	vmov	s15, r3
 800a108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	ee07 3a90 	vmov	s15, r3
 800a112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a11a:	4b7b      	ldr	r3, [pc, #492]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a12a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a12e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a13a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a146:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a14a:	e087      	b.n	800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	ee07 3a90 	vmov	s15, r3
 800a152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a156:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a15a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a15e:	4b6a      	ldr	r3, [pc, #424]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a166:	ee07 3a90 	vmov	s15, r3
 800a16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a16e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a172:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a17a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a17e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a18a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a18e:	e065      	b.n	800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	ee07 3a90 	vmov	s15, r3
 800a196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a2:	4b59      	ldr	r3, [pc, #356]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1aa:	ee07 3a90 	vmov	s15, r3
 800a1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1d2:	e043      	b.n	800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	ee07 3a90 	vmov	s15, r3
 800a1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a31c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e6:	4b48      	ldr	r3, [pc, #288]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a216:	e021      	b.n	800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	ee07 3a90 	vmov	s15, r3
 800a21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a222:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a22a:	4b37      	ldr	r3, [pc, #220]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a232:	ee07 3a90 	vmov	s15, r3
 800a236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a23a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a23e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a24a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a25a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a25c:	4b2a      	ldr	r3, [pc, #168]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a260:	0a5b      	lsrs	r3, r3, #9
 800a262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a26e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a272:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a276:	edd7 6a07 	vldr	s13, [r7, #28]
 800a27a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a27e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a282:	ee17 2a90 	vmov	r2, s15
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a28a:	4b1f      	ldr	r3, [pc, #124]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28e:	0c1b      	lsrs	r3, r3, #16
 800a290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a294:	ee07 3a90 	vmov	s15, r3
 800a298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b0:	ee17 2a90 	vmov	r2, s15
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a2b8:	4b13      	ldr	r3, [pc, #76]	; (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2bc:	0e1b      	lsrs	r3, r3, #24
 800a2be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2c2:	ee07 3a90 	vmov	s15, r3
 800a2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2de:	ee17 2a90 	vmov	r2, s15
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a2e6:	e008      	b.n	800a2fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	609a      	str	r2, [r3, #8]
}
 800a2fa:	bf00      	nop
 800a2fc:	3724      	adds	r7, #36	; 0x24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	58024400 	.word	0x58024400
 800a30c:	03d09000 	.word	0x03d09000
 800a310:	46000000 	.word	0x46000000
 800a314:	4c742400 	.word	0x4c742400
 800a318:	4a742400 	.word	0x4a742400
 800a31c:	4af42400 	.word	0x4af42400

0800a320 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a320:	b480      	push	{r7}
 800a322:	b089      	sub	sp, #36	; 0x24
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a328:	4ba1      	ldr	r3, [pc, #644]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32c:	f003 0303 	and.w	r3, r3, #3
 800a330:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a332:	4b9f      	ldr	r3, [pc, #636]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a336:	0d1b      	lsrs	r3, r3, #20
 800a338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a33c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a33e:	4b9c      	ldr	r3, [pc, #624]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a342:	0a1b      	lsrs	r3, r3, #8
 800a344:	f003 0301 	and.w	r3, r3, #1
 800a348:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a34a:	4b99      	ldr	r3, [pc, #612]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a34e:	08db      	lsrs	r3, r3, #3
 800a350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	fb02 f303 	mul.w	r3, r2, r3
 800a35a:	ee07 3a90 	vmov	s15, r3
 800a35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a362:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f000 8111 	beq.w	800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	2b02      	cmp	r3, #2
 800a372:	f000 8083 	beq.w	800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	f200 80a1 	bhi.w	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d003      	beq.n	800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	2b01      	cmp	r3, #1
 800a388:	d056      	beq.n	800a438 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a38a:	e099      	b.n	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a38c:	4b88      	ldr	r3, [pc, #544]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0320 	and.w	r3, r3, #32
 800a394:	2b00      	cmp	r3, #0
 800a396:	d02d      	beq.n	800a3f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a398:	4b85      	ldr	r3, [pc, #532]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	08db      	lsrs	r3, r3, #3
 800a39e:	f003 0303 	and.w	r3, r3, #3
 800a3a2:	4a84      	ldr	r2, [pc, #528]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	ee07 3a90 	vmov	s15, r3
 800a3b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c2:	4b7b      	ldr	r3, [pc, #492]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ca:	ee07 3a90 	vmov	s15, r3
 800a3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a3f2:	e087      	b.n	800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	ee07 3a90 	vmov	s15, r3
 800a3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a406:	4b6a      	ldr	r3, [pc, #424]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40e:	ee07 3a90 	vmov	s15, r3
 800a412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a416:	ed97 6a03 	vldr	s12, [r7, #12]
 800a41a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a436:	e065      	b.n	800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	ee07 3a90 	vmov	s15, r3
 800a43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a442:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44a:	4b59      	ldr	r3, [pc, #356]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a452:	ee07 3a90 	vmov	s15, r3
 800a456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a45e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a47a:	e043      	b.n	800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	ee07 3a90 	vmov	s15, r3
 800a482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a486:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a48e:	4b48      	ldr	r3, [pc, #288]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a49e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4be:	e021      	b.n	800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4d2:	4b37      	ldr	r3, [pc, #220]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a502:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a504:	4b2a      	ldr	r3, [pc, #168]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a508:	0a5b      	lsrs	r3, r3, #9
 800a50a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a50e:	ee07 3a90 	vmov	s15, r3
 800a512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a51a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a51e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a52a:	ee17 2a90 	vmov	r2, s15
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a532:	4b1f      	ldr	r3, [pc, #124]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a536:	0c1b      	lsrs	r3, r3, #16
 800a538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a53c:	ee07 3a90 	vmov	s15, r3
 800a540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a54c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a558:	ee17 2a90 	vmov	r2, s15
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a560:	4b13      	ldr	r3, [pc, #76]	; (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a564:	0e1b      	lsrs	r3, r3, #24
 800a566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a56a:	ee07 3a90 	vmov	s15, r3
 800a56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a57a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a57e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a586:	ee17 2a90 	vmov	r2, s15
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a58e:	e008      	b.n	800a5a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	609a      	str	r2, [r3, #8]
}
 800a5a2:	bf00      	nop
 800a5a4:	3724      	adds	r7, #36	; 0x24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	58024400 	.word	0x58024400
 800a5b4:	03d09000 	.word	0x03d09000
 800a5b8:	46000000 	.word	0x46000000
 800a5bc:	4c742400 	.word	0x4c742400
 800a5c0:	4a742400 	.word	0x4a742400
 800a5c4:	4af42400 	.word	0x4af42400

0800a5c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5d6:	4b53      	ldr	r3, [pc, #332]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5da:	f003 0303 	and.w	r3, r3, #3
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d101      	bne.n	800a5e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e099      	b.n	800a71a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a5e6:	4b4f      	ldr	r3, [pc, #316]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a4e      	ldr	r2, [pc, #312]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a5ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a5f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5f2:	f7fb fb7b 	bl	8005cec <HAL_GetTick>
 800a5f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a5f8:	e008      	b.n	800a60c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a5fa:	f7fb fb77 	bl	8005cec <HAL_GetTick>
 800a5fe:	4602      	mov	r2, r0
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	2b02      	cmp	r3, #2
 800a606:	d901      	bls.n	800a60c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e086      	b.n	800a71a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a60c:	4b45      	ldr	r3, [pc, #276]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1f0      	bne.n	800a5fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a618:	4b42      	ldr	r3, [pc, #264]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	031b      	lsls	r3, r3, #12
 800a626:	493f      	ldr	r1, [pc, #252]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a628:	4313      	orrs	r3, r2
 800a62a:	628b      	str	r3, [r1, #40]	; 0x28
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	3b01      	subs	r3, #1
 800a632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	025b      	lsls	r3, r3, #9
 800a63e:	b29b      	uxth	r3, r3
 800a640:	431a      	orrs	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	3b01      	subs	r3, #1
 800a648:	041b      	lsls	r3, r3, #16
 800a64a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a64e:	431a      	orrs	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	3b01      	subs	r3, #1
 800a656:	061b      	lsls	r3, r3, #24
 800a658:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a65c:	4931      	ldr	r1, [pc, #196]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a65e:	4313      	orrs	r3, r2
 800a660:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a662:	4b30      	ldr	r3, [pc, #192]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a666:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	492d      	ldr	r1, [pc, #180]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a670:	4313      	orrs	r3, r2
 800a672:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a674:	4b2b      	ldr	r3, [pc, #172]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a678:	f023 0220 	bic.w	r2, r3, #32
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	4928      	ldr	r1, [pc, #160]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a682:	4313      	orrs	r3, r2
 800a684:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a686:	4b27      	ldr	r3, [pc, #156]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68a:	4a26      	ldr	r2, [pc, #152]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a68c:	f023 0310 	bic.w	r3, r3, #16
 800a690:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a692:	4b24      	ldr	r3, [pc, #144]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a696:	4b24      	ldr	r3, [pc, #144]	; (800a728 <RCCEx_PLL2_Config+0x160>)
 800a698:	4013      	ands	r3, r2
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	69d2      	ldr	r2, [r2, #28]
 800a69e:	00d2      	lsls	r2, r2, #3
 800a6a0:	4920      	ldr	r1, [pc, #128]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a6a6:	4b1f      	ldr	r3, [pc, #124]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6aa:	4a1e      	ldr	r2, [pc, #120]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a6ac:	f043 0310 	orr.w	r3, r3, #16
 800a6b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d106      	bne.n	800a6c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a6b8:	4b1a      	ldr	r3, [pc, #104]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	4a19      	ldr	r2, [pc, #100]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a6be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6c4:	e00f      	b.n	800a6e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d106      	bne.n	800a6da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a6cc:	4b15      	ldr	r3, [pc, #84]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d0:	4a14      	ldr	r2, [pc, #80]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a6d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6d8:	e005      	b.n	800a6e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a6da:	4b12      	ldr	r3, [pc, #72]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6de:	4a11      	ldr	r2, [pc, #68]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a6e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a6e6:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a0e      	ldr	r2, [pc, #56]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a6ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6f2:	f7fb fafb 	bl	8005cec <HAL_GetTick>
 800a6f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6f8:	e008      	b.n	800a70c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a6fa:	f7fb faf7 	bl	8005cec <HAL_GetTick>
 800a6fe:	4602      	mov	r2, r0
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	2b02      	cmp	r3, #2
 800a706:	d901      	bls.n	800a70c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	e006      	b.n	800a71a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a70c:	4b05      	ldr	r3, [pc, #20]	; (800a724 <RCCEx_PLL2_Config+0x15c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a714:	2b00      	cmp	r3, #0
 800a716:	d0f0      	beq.n	800a6fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a718:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	58024400 	.word	0x58024400
 800a728:	ffff0007 	.word	0xffff0007

0800a72c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a73a:	4b53      	ldr	r3, [pc, #332]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73e:	f003 0303 	and.w	r3, r3, #3
 800a742:	2b03      	cmp	r3, #3
 800a744:	d101      	bne.n	800a74a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	e099      	b.n	800a87e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a74a:	4b4f      	ldr	r3, [pc, #316]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a4e      	ldr	r2, [pc, #312]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a756:	f7fb fac9 	bl	8005cec <HAL_GetTick>
 800a75a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a75c:	e008      	b.n	800a770 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a75e:	f7fb fac5 	bl	8005cec <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d901      	bls.n	800a770 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a76c:	2303      	movs	r3, #3
 800a76e:	e086      	b.n	800a87e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a770:	4b45      	ldr	r3, [pc, #276]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1f0      	bne.n	800a75e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a77c:	4b42      	ldr	r3, [pc, #264]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a780:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	051b      	lsls	r3, r3, #20
 800a78a:	493f      	ldr	r1, [pc, #252]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a78c:	4313      	orrs	r3, r2
 800a78e:	628b      	str	r3, [r1, #40]	; 0x28
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	3b01      	subs	r3, #1
 800a796:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	025b      	lsls	r3, r3, #9
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	041b      	lsls	r3, r3, #16
 800a7ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a7b2:	431a      	orrs	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	061b      	lsls	r3, r3, #24
 800a7bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a7c0:	4931      	ldr	r1, [pc, #196]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a7c6:	4b30      	ldr	r3, [pc, #192]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	492d      	ldr	r1, [pc, #180]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a7d8:	4b2b      	ldr	r3, [pc, #172]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	4928      	ldr	r1, [pc, #160]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a7ea:	4b27      	ldr	r3, [pc, #156]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ee:	4a26      	ldr	r2, [pc, #152]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a7f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a7f6:	4b24      	ldr	r3, [pc, #144]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a7f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7fa:	4b24      	ldr	r3, [pc, #144]	; (800a88c <RCCEx_PLL3_Config+0x160>)
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	69d2      	ldr	r2, [r2, #28]
 800a802:	00d2      	lsls	r2, r2, #3
 800a804:	4920      	ldr	r1, [pc, #128]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a806:	4313      	orrs	r3, r2
 800a808:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a80a:	4b1f      	ldr	r3, [pc, #124]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80e:	4a1e      	ldr	r2, [pc, #120]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d106      	bne.n	800a82a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a81c:	4b1a      	ldr	r3, [pc, #104]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a820:	4a19      	ldr	r2, [pc, #100]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a826:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a828:	e00f      	b.n	800a84a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d106      	bne.n	800a83e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a830:	4b15      	ldr	r3, [pc, #84]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a834:	4a14      	ldr	r2, [pc, #80]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a836:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a83a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a83c:	e005      	b.n	800a84a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a83e:	4b12      	ldr	r3, [pc, #72]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a842:	4a11      	ldr	r2, [pc, #68]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a848:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a84a:	4b0f      	ldr	r3, [pc, #60]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a0e      	ldr	r2, [pc, #56]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a856:	f7fb fa49 	bl	8005cec <HAL_GetTick>
 800a85a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a85c:	e008      	b.n	800a870 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a85e:	f7fb fa45 	bl	8005cec <HAL_GetTick>
 800a862:	4602      	mov	r2, r0
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d901      	bls.n	800a870 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e006      	b.n	800a87e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a870:	4b05      	ldr	r3, [pc, #20]	; (800a888 <RCCEx_PLL3_Config+0x15c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0f0      	beq.n	800a85e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	58024400 	.word	0x58024400
 800a88c:	ffff0007 	.word	0xffff0007

0800a890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e049      	b.n	800a936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d106      	bne.n	800a8bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f841 	bl	800a93e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2202      	movs	r2, #2
 800a8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	4610      	mov	r0, r2
 800a8d0:	f000 fa00 	bl	800acd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a93e:	b480      	push	{r7}
 800a940:	b083      	sub	sp, #12
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
	...

0800a954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a962:	b2db      	uxtb	r3, r3
 800a964:	2b01      	cmp	r3, #1
 800a966:	d001      	beq.n	800a96c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e054      	b.n	800aa16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2202      	movs	r2, #2
 800a970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68da      	ldr	r2, [r3, #12]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f042 0201 	orr.w	r2, r2, #1
 800a982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a26      	ldr	r2, [pc, #152]	; (800aa24 <HAL_TIM_Base_Start_IT+0xd0>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d022      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x80>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a996:	d01d      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x80>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a22      	ldr	r2, [pc, #136]	; (800aa28 <HAL_TIM_Base_Start_IT+0xd4>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d018      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x80>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a21      	ldr	r2, [pc, #132]	; (800aa2c <HAL_TIM_Base_Start_IT+0xd8>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d013      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x80>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a1f      	ldr	r2, [pc, #124]	; (800aa30 <HAL_TIM_Base_Start_IT+0xdc>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d00e      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x80>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a1e      	ldr	r2, [pc, #120]	; (800aa34 <HAL_TIM_Base_Start_IT+0xe0>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d009      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x80>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a1c      	ldr	r2, [pc, #112]	; (800aa38 <HAL_TIM_Base_Start_IT+0xe4>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d004      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x80>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a1b      	ldr	r2, [pc, #108]	; (800aa3c <HAL_TIM_Base_Start_IT+0xe8>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d115      	bne.n	800aa00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689a      	ldr	r2, [r3, #8]
 800a9da:	4b19      	ldr	r3, [pc, #100]	; (800aa40 <HAL_TIM_Base_Start_IT+0xec>)
 800a9dc:	4013      	ands	r3, r2
 800a9de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b06      	cmp	r3, #6
 800a9e4:	d015      	beq.n	800aa12 <HAL_TIM_Base_Start_IT+0xbe>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ec:	d011      	beq.n	800aa12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f042 0201 	orr.w	r2, r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9fe:	e008      	b.n	800aa12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f042 0201 	orr.w	r2, r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	e000      	b.n	800aa14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	40010000 	.word	0x40010000
 800aa28:	40000400 	.word	0x40000400
 800aa2c:	40000800 	.word	0x40000800
 800aa30:	40000c00 	.word	0x40000c00
 800aa34:	40010400 	.word	0x40010400
 800aa38:	40001800 	.word	0x40001800
 800aa3c:	40014000 	.word	0x40014000
 800aa40:	00010007 	.word	0x00010007

0800aa44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	f003 0302 	and.w	r3, r3, #2
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d122      	bne.n	800aaa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	f003 0302 	and.w	r3, r3, #2
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d11b      	bne.n	800aaa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f06f 0202 	mvn.w	r2, #2
 800aa70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	f003 0303 	and.w	r3, r3, #3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f905 	bl	800ac96 <HAL_TIM_IC_CaptureCallback>
 800aa8c:	e005      	b.n	800aa9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f8f7 	bl	800ac82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f908 	bl	800acaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	f003 0304 	and.w	r3, r3, #4
 800aaaa:	2b04      	cmp	r3, #4
 800aaac:	d122      	bne.n	800aaf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	d11b      	bne.n	800aaf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f06f 0204 	mvn.w	r2, #4
 800aac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2202      	movs	r2, #2
 800aaca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f8db 	bl	800ac96 <HAL_TIM_IC_CaptureCallback>
 800aae0:	e005      	b.n	800aaee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f8cd 	bl	800ac82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f8de 	bl	800acaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	f003 0308 	and.w	r3, r3, #8
 800aafe:	2b08      	cmp	r3, #8
 800ab00:	d122      	bne.n	800ab48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	f003 0308 	and.w	r3, r3, #8
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d11b      	bne.n	800ab48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f06f 0208 	mvn.w	r2, #8
 800ab18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	69db      	ldr	r3, [r3, #28]
 800ab26:	f003 0303 	and.w	r3, r3, #3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d003      	beq.n	800ab36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f8b1 	bl	800ac96 <HAL_TIM_IC_CaptureCallback>
 800ab34:	e005      	b.n	800ab42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f8a3 	bl	800ac82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f8b4 	bl	800acaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	f003 0310 	and.w	r3, r3, #16
 800ab52:	2b10      	cmp	r3, #16
 800ab54:	d122      	bne.n	800ab9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	f003 0310 	and.w	r3, r3, #16
 800ab60:	2b10      	cmp	r3, #16
 800ab62:	d11b      	bne.n	800ab9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f06f 0210 	mvn.w	r2, #16
 800ab6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2208      	movs	r2, #8
 800ab72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	69db      	ldr	r3, [r3, #28]
 800ab7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d003      	beq.n	800ab8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f887 	bl	800ac96 <HAL_TIM_IC_CaptureCallback>
 800ab88:	e005      	b.n	800ab96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f879 	bl	800ac82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 f88a 	bl	800acaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d10e      	bne.n	800abc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d107      	bne.n	800abc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f06f 0201 	mvn.w	r2, #1
 800abc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7fa fc86 	bl	80054d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd2:	2b80      	cmp	r3, #128	; 0x80
 800abd4:	d10e      	bne.n	800abf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe0:	2b80      	cmp	r3, #128	; 0x80
 800abe2:	d107      	bne.n	800abf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f914 	bl	800ae1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac02:	d10e      	bne.n	800ac22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac0e:	2b80      	cmp	r3, #128	; 0x80
 800ac10:	d107      	bne.n	800ac22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f907 	bl	800ae30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac2c:	2b40      	cmp	r3, #64	; 0x40
 800ac2e:	d10e      	bne.n	800ac4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac3a:	2b40      	cmp	r3, #64	; 0x40
 800ac3c:	d107      	bne.n	800ac4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f838 	bl	800acbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	f003 0320 	and.w	r3, r3, #32
 800ac58:	2b20      	cmp	r3, #32
 800ac5a:	d10e      	bne.n	800ac7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	f003 0320 	and.w	r3, r3, #32
 800ac66:	2b20      	cmp	r3, #32
 800ac68:	d107      	bne.n	800ac7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f06f 0220 	mvn.w	r2, #32
 800ac72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f8c7 	bl	800ae08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b083      	sub	sp, #12
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac8a:	bf00      	nop
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac9e:	bf00      	nop
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acaa:	b480      	push	{r7}
 800acac:	b083      	sub	sp, #12
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acb2:	bf00      	nop
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acc6:	bf00      	nop
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
	...

0800acd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a40      	ldr	r2, [pc, #256]	; (800ade8 <TIM_Base_SetConfig+0x114>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d013      	beq.n	800ad14 <TIM_Base_SetConfig+0x40>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf2:	d00f      	beq.n	800ad14 <TIM_Base_SetConfig+0x40>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a3d      	ldr	r2, [pc, #244]	; (800adec <TIM_Base_SetConfig+0x118>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d00b      	beq.n	800ad14 <TIM_Base_SetConfig+0x40>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a3c      	ldr	r2, [pc, #240]	; (800adf0 <TIM_Base_SetConfig+0x11c>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d007      	beq.n	800ad14 <TIM_Base_SetConfig+0x40>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a3b      	ldr	r2, [pc, #236]	; (800adf4 <TIM_Base_SetConfig+0x120>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d003      	beq.n	800ad14 <TIM_Base_SetConfig+0x40>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a3a      	ldr	r2, [pc, #232]	; (800adf8 <TIM_Base_SetConfig+0x124>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d108      	bne.n	800ad26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a2f      	ldr	r2, [pc, #188]	; (800ade8 <TIM_Base_SetConfig+0x114>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d01f      	beq.n	800ad6e <TIM_Base_SetConfig+0x9a>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad34:	d01b      	beq.n	800ad6e <TIM_Base_SetConfig+0x9a>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a2c      	ldr	r2, [pc, #176]	; (800adec <TIM_Base_SetConfig+0x118>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d017      	beq.n	800ad6e <TIM_Base_SetConfig+0x9a>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a2b      	ldr	r2, [pc, #172]	; (800adf0 <TIM_Base_SetConfig+0x11c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d013      	beq.n	800ad6e <TIM_Base_SetConfig+0x9a>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a2a      	ldr	r2, [pc, #168]	; (800adf4 <TIM_Base_SetConfig+0x120>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d00f      	beq.n	800ad6e <TIM_Base_SetConfig+0x9a>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a29      	ldr	r2, [pc, #164]	; (800adf8 <TIM_Base_SetConfig+0x124>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d00b      	beq.n	800ad6e <TIM_Base_SetConfig+0x9a>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a28      	ldr	r2, [pc, #160]	; (800adfc <TIM_Base_SetConfig+0x128>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d007      	beq.n	800ad6e <TIM_Base_SetConfig+0x9a>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a27      	ldr	r2, [pc, #156]	; (800ae00 <TIM_Base_SetConfig+0x12c>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d003      	beq.n	800ad6e <TIM_Base_SetConfig+0x9a>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a26      	ldr	r2, [pc, #152]	; (800ae04 <TIM_Base_SetConfig+0x130>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d108      	bne.n	800ad80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	689a      	ldr	r2, [r3, #8]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a10      	ldr	r2, [pc, #64]	; (800ade8 <TIM_Base_SetConfig+0x114>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d00f      	beq.n	800adcc <TIM_Base_SetConfig+0xf8>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a12      	ldr	r2, [pc, #72]	; (800adf8 <TIM_Base_SetConfig+0x124>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d00b      	beq.n	800adcc <TIM_Base_SetConfig+0xf8>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a11      	ldr	r2, [pc, #68]	; (800adfc <TIM_Base_SetConfig+0x128>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d007      	beq.n	800adcc <TIM_Base_SetConfig+0xf8>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a10      	ldr	r2, [pc, #64]	; (800ae00 <TIM_Base_SetConfig+0x12c>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d003      	beq.n	800adcc <TIM_Base_SetConfig+0xf8>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a0f      	ldr	r2, [pc, #60]	; (800ae04 <TIM_Base_SetConfig+0x130>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d103      	bne.n	800add4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	691a      	ldr	r2, [r3, #16]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	615a      	str	r2, [r3, #20]
}
 800adda:	bf00      	nop
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	40010000 	.word	0x40010000
 800adec:	40000400 	.word	0x40000400
 800adf0:	40000800 	.word	0x40000800
 800adf4:	40000c00 	.word	0x40000c00
 800adf8:	40010400 	.word	0x40010400
 800adfc:	40014000 	.word	0x40014000
 800ae00:	40014400 	.word	0x40014400
 800ae04:	40014800 	.word	0x40014800

0800ae08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e042      	b.n	800aedc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d106      	bne.n	800ae6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7fa fc59 	bl	8005720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2224      	movs	r2, #36	; 0x24
 800ae72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 0201 	bic.w	r2, r2, #1
 800ae84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fc80 	bl	800b78c <UART_SetConfig>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d101      	bne.n	800ae96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e022      	b.n	800aedc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f001 f9dc 	bl	800c25c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aeb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	689a      	ldr	r2, [r3, #8]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f042 0201 	orr.w	r2, r2, #1
 800aed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f001 fa63 	bl	800c3a0 <UART_CheckIdleState>
 800aeda:	4603      	mov	r3, r0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b08a      	sub	sp, #40	; 0x28
 800aee8:	af02      	add	r7, sp, #8
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	603b      	str	r3, [r7, #0]
 800aef0:	4613      	mov	r3, r2
 800aef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aefa:	2b20      	cmp	r3, #32
 800aefc:	f040 8083 	bne.w	800b006 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d002      	beq.n	800af0c <HAL_UART_Transmit+0x28>
 800af06:	88fb      	ldrh	r3, [r7, #6]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	e07b      	b.n	800b008 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af16:	2b01      	cmp	r3, #1
 800af18:	d101      	bne.n	800af1e <HAL_UART_Transmit+0x3a>
 800af1a:	2302      	movs	r3, #2
 800af1c:	e074      	b.n	800b008 <HAL_UART_Transmit+0x124>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2221      	movs	r2, #33	; 0x21
 800af32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af36:	f7fa fed9 	bl	8005cec <HAL_GetTick>
 800af3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	88fa      	ldrh	r2, [r7, #6]
 800af40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	88fa      	ldrh	r2, [r7, #6]
 800af48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af54:	d108      	bne.n	800af68 <HAL_UART_Transmit+0x84>
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d104      	bne.n	800af68 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800af5e:	2300      	movs	r3, #0
 800af60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	61bb      	str	r3, [r7, #24]
 800af66:	e003      	b.n	800af70 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af6c:	2300      	movs	r3, #0
 800af6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800af78:	e02c      	b.n	800afd4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	2200      	movs	r2, #0
 800af82:	2180      	movs	r1, #128	; 0x80
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f001 fa56 	bl	800c436 <UART_WaitOnFlagUntilTimeout>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800af90:	2303      	movs	r3, #3
 800af92:	e039      	b.n	800b008 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10b      	bne.n	800afb2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	461a      	mov	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afa8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	3302      	adds	r3, #2
 800afae:	61bb      	str	r3, [r7, #24]
 800afb0:	e007      	b.n	800afc2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	781a      	ldrb	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	3301      	adds	r3, #1
 800afc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800afc8:	b29b      	uxth	r3, r3
 800afca:	3b01      	subs	r3, #1
 800afcc:	b29a      	uxth	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800afda:	b29b      	uxth	r3, r3
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1cc      	bne.n	800af7a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2200      	movs	r2, #0
 800afe8:	2140      	movs	r1, #64	; 0x40
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f001 fa23 	bl	800c436 <UART_WaitOnFlagUntilTimeout>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e006      	b.n	800b008 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2220      	movs	r2, #32
 800affe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	e000      	b.n	800b008 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b006:	2302      	movs	r3, #2
  }
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3720      	adds	r7, #32
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b0ba      	sub	sp, #232	; 0xe8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b036:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b03a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b03e:	4013      	ands	r3, r2
 800b040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d11b      	bne.n	800b084 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b050:	f003 0320 	and.w	r3, r3, #32
 800b054:	2b00      	cmp	r3, #0
 800b056:	d015      	beq.n	800b084 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b05c:	f003 0320 	and.w	r3, r3, #32
 800b060:	2b00      	cmp	r3, #0
 800b062:	d105      	bne.n	800b070 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d009      	beq.n	800b084 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 835a 	beq.w	800b72e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	4798      	blx	r3
      }
      return;
 800b082:	e354      	b.n	800b72e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 811f 	beq.w	800b2cc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b08e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b092:	4b8b      	ldr	r3, [pc, #556]	; (800b2c0 <HAL_UART_IRQHandler+0x2b0>)
 800b094:	4013      	ands	r3, r2
 800b096:	2b00      	cmp	r3, #0
 800b098:	d106      	bne.n	800b0a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b09a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b09e:	4b89      	ldr	r3, [pc, #548]	; (800b2c4 <HAL_UART_IRQHandler+0x2b4>)
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 8112 	beq.w	800b2cc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d011      	beq.n	800b0d8 <HAL_UART_IRQHandler+0xc8>
 800b0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00b      	beq.n	800b0d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0ce:	f043 0201 	orr.w	r2, r3, #1
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0dc:	f003 0302 	and.w	r3, r3, #2
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d011      	beq.n	800b108 <HAL_UART_IRQHandler+0xf8>
 800b0e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00b      	beq.n	800b108 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0fe:	f043 0204 	orr.w	r2, r3, #4
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b00      	cmp	r3, #0
 800b112:	d011      	beq.n	800b138 <HAL_UART_IRQHandler+0x128>
 800b114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2204      	movs	r2, #4
 800b126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b12e:	f043 0202 	orr.w	r2, r3, #2
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b13c:	f003 0308 	and.w	r3, r3, #8
 800b140:	2b00      	cmp	r3, #0
 800b142:	d017      	beq.n	800b174 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b148:	f003 0320 	and.w	r3, r3, #32
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d105      	bne.n	800b15c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b150:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b154:	4b5a      	ldr	r3, [pc, #360]	; (800b2c0 <HAL_UART_IRQHandler+0x2b0>)
 800b156:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00b      	beq.n	800b174 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2208      	movs	r2, #8
 800b162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b16a:	f043 0208 	orr.w	r2, r3, #8
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d012      	beq.n	800b1a6 <HAL_UART_IRQHandler+0x196>
 800b180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00c      	beq.n	800b1a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b19c:	f043 0220 	orr.w	r2, r3, #32
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 82c0 	beq.w	800b732 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1b6:	f003 0320 	and.w	r3, r3, #32
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d013      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d105      	bne.n	800b1d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d007      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fa:	2b40      	cmp	r3, #64	; 0x40
 800b1fc:	d005      	beq.n	800b20a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b1fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b202:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b206:	2b00      	cmp	r3, #0
 800b208:	d04f      	beq.n	800b2aa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f001 f9dc 	bl	800c5c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b21a:	2b40      	cmp	r3, #64	; 0x40
 800b21c:	d141      	bne.n	800b2a2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3308      	adds	r3, #8
 800b224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b234:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b23c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3308      	adds	r3, #8
 800b246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b24a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b24e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b25a:	e841 2300 	strex	r3, r2, [r1]
 800b25e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1d9      	bne.n	800b21e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d013      	beq.n	800b29a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b276:	4a14      	ldr	r2, [pc, #80]	; (800b2c8 <HAL_UART_IRQHandler+0x2b8>)
 800b278:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fb f96e 	bl	8006560 <HAL_DMA_Abort_IT>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d017      	beq.n	800b2ba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b28e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b294:	4610      	mov	r0, r2
 800b296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b298:	e00f      	b.n	800b2ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fa60 	bl	800b760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a0:	e00b      	b.n	800b2ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fa5c 	bl	800b760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a8:	e007      	b.n	800b2ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fa58 	bl	800b760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b2b8:	e23b      	b.n	800b732 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ba:	bf00      	nop
    return;
 800b2bc:	e239      	b.n	800b732 <HAL_UART_IRQHandler+0x722>
 800b2be:	bf00      	nop
 800b2c0:	10000001 	.word	0x10000001
 800b2c4:	04000120 	.word	0x04000120
 800b2c8:	0800c695 	.word	0x0800c695

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	f040 81ce 	bne.w	800b672 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b2d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2da:	f003 0310 	and.w	r3, r3, #16
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f000 81c7 	beq.w	800b672 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2e8:	f003 0310 	and.w	r3, r3, #16
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 81c0 	beq.w	800b672 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2210      	movs	r2, #16
 800b2f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b304:	2b40      	cmp	r3, #64	; 0x40
 800b306:	f040 813b 	bne.w	800b580 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a8b      	ldr	r2, [pc, #556]	; (800b540 <HAL_UART_IRQHandler+0x530>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d059      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a89      	ldr	r2, [pc, #548]	; (800b544 <HAL_UART_IRQHandler+0x534>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d053      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a87      	ldr	r2, [pc, #540]	; (800b548 <HAL_UART_IRQHandler+0x538>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d04d      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a85      	ldr	r2, [pc, #532]	; (800b54c <HAL_UART_IRQHandler+0x53c>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d047      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a83      	ldr	r2, [pc, #524]	; (800b550 <HAL_UART_IRQHandler+0x540>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d041      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a81      	ldr	r2, [pc, #516]	; (800b554 <HAL_UART_IRQHandler+0x544>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d03b      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a7f      	ldr	r2, [pc, #508]	; (800b558 <HAL_UART_IRQHandler+0x548>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d035      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a7d      	ldr	r2, [pc, #500]	; (800b55c <HAL_UART_IRQHandler+0x54c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d02f      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a7b      	ldr	r2, [pc, #492]	; (800b560 <HAL_UART_IRQHandler+0x550>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d029      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a79      	ldr	r2, [pc, #484]	; (800b564 <HAL_UART_IRQHandler+0x554>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d023      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a77      	ldr	r2, [pc, #476]	; (800b568 <HAL_UART_IRQHandler+0x558>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d01d      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a75      	ldr	r2, [pc, #468]	; (800b56c <HAL_UART_IRQHandler+0x55c>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d017      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a73      	ldr	r2, [pc, #460]	; (800b570 <HAL_UART_IRQHandler+0x560>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d011      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a71      	ldr	r2, [pc, #452]	; (800b574 <HAL_UART_IRQHandler+0x564>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d00b      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a6f      	ldr	r2, [pc, #444]	; (800b578 <HAL_UART_IRQHandler+0x568>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d005      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3ba>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a6d      	ldr	r2, [pc, #436]	; (800b57c <HAL_UART_IRQHandler+0x56c>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d105      	bne.n	800b3d6 <HAL_UART_IRQHandler+0x3c6>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	e004      	b.n	800b3e0 <HAL_UART_IRQHandler+0x3d0>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b3e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 81a4 	beq.w	800b736 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b3f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	f080 819c 	bcs.w	800b736 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b404:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b412:	f000 8086 	beq.w	800b522 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b422:	e853 3f00 	ldrex	r3, [r3]
 800b426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b42a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b42e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b432:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	461a      	mov	r2, r3
 800b43c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b444:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b448:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b44c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b450:	e841 2300 	strex	r3, r2, [r1]
 800b454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1da      	bne.n	800b416 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3308      	adds	r3, #8
 800b466:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b46a:	e853 3f00 	ldrex	r3, [r3]
 800b46e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b472:	f023 0301 	bic.w	r3, r3, #1
 800b476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	3308      	adds	r3, #8
 800b480:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b484:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b488:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b48c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b490:	e841 2300 	strex	r3, r2, [r1]
 800b494:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1e1      	bne.n	800b460 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4a6:	e853 3f00 	ldrex	r3, [r3]
 800b4aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b4ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3308      	adds	r3, #8
 800b4bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b4c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b4c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4c8:	e841 2300 	strex	r3, r2, [r1]
 800b4cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1e3      	bne.n	800b49c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ea:	e853 3f00 	ldrex	r3, [r3]
 800b4ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4f2:	f023 0310 	bic.w	r3, r3, #16
 800b4f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	461a      	mov	r2, r3
 800b500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b504:	65bb      	str	r3, [r7, #88]	; 0x58
 800b506:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b508:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b50a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b50c:	e841 2300 	strex	r3, r2, [r1]
 800b510:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1e4      	bne.n	800b4e2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fa fd01 	bl	8005f24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b52e:	b29b      	uxth	r3, r3
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	b29b      	uxth	r3, r3
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f91c 	bl	800b774 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b53c:	e0fb      	b.n	800b736 <HAL_UART_IRQHandler+0x726>
 800b53e:	bf00      	nop
 800b540:	40020010 	.word	0x40020010
 800b544:	40020028 	.word	0x40020028
 800b548:	40020040 	.word	0x40020040
 800b54c:	40020058 	.word	0x40020058
 800b550:	40020070 	.word	0x40020070
 800b554:	40020088 	.word	0x40020088
 800b558:	400200a0 	.word	0x400200a0
 800b55c:	400200b8 	.word	0x400200b8
 800b560:	40020410 	.word	0x40020410
 800b564:	40020428 	.word	0x40020428
 800b568:	40020440 	.word	0x40020440
 800b56c:	40020458 	.word	0x40020458
 800b570:	40020470 	.word	0x40020470
 800b574:	40020488 	.word	0x40020488
 800b578:	400204a0 	.word	0x400204a0
 800b57c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 80cc 	beq.w	800b73a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b5a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f000 80c7 	beq.w	800b73a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b4:	e853 3f00 	ldrex	r3, [r3]
 800b5b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5ce:	647b      	str	r3, [r7, #68]	; 0x44
 800b5d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5d6:	e841 2300 	strex	r3, r2, [r1]
 800b5da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1e4      	bne.n	800b5ac <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	623b      	str	r3, [r7, #32]
   return(result);
 800b5f2:	6a3a      	ldr	r2, [r7, #32]
 800b5f4:	4b54      	ldr	r3, [pc, #336]	; (800b748 <HAL_UART_IRQHandler+0x738>)
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	3308      	adds	r3, #8
 800b602:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b606:	633a      	str	r2, [r7, #48]	; 0x30
 800b608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b60c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b60e:	e841 2300 	strex	r3, r2, [r1]
 800b612:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1e3      	bne.n	800b5e2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2220      	movs	r2, #32
 800b61e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	e853 3f00 	ldrex	r3, [r3]
 800b63a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f023 0310 	bic.w	r3, r3, #16
 800b642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	461a      	mov	r2, r3
 800b64c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b650:	61fb      	str	r3, [r7, #28]
 800b652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b654:	69b9      	ldr	r1, [r7, #24]
 800b656:	69fa      	ldr	r2, [r7, #28]
 800b658:	e841 2300 	strex	r3, r2, [r1]
 800b65c:	617b      	str	r3, [r7, #20]
   return(result);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1e4      	bne.n	800b62e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f882 	bl	800b774 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b670:	e063      	b.n	800b73a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00e      	beq.n	800b69c <HAL_UART_IRQHandler+0x68c>
 800b67e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b686:	2b00      	cmp	r3, #0
 800b688:	d008      	beq.n	800b69c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b692:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f001 f83e 	bl	800c716 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b69a:	e051      	b.n	800b740 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d014      	beq.n	800b6d2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b6a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d105      	bne.n	800b6c0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b6b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d008      	beq.n	800b6d2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d03a      	beq.n	800b73e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	4798      	blx	r3
    }
    return;
 800b6d0:	e035      	b.n	800b73e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d009      	beq.n	800b6f2 <HAL_UART_IRQHandler+0x6e2>
 800b6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 ffe8 	bl	800c6c0 <UART_EndTransmit_IT>
    return;
 800b6f0:	e026      	b.n	800b740 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d009      	beq.n	800b712 <HAL_UART_IRQHandler+0x702>
 800b6fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b702:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b706:	2b00      	cmp	r3, #0
 800b708:	d003      	beq.n	800b712 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f001 f817 	bl	800c73e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b710:	e016      	b.n	800b740 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d010      	beq.n	800b740 <HAL_UART_IRQHandler+0x730>
 800b71e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b722:	2b00      	cmp	r3, #0
 800b724:	da0c      	bge.n	800b740 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 ffff 	bl	800c72a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b72c:	e008      	b.n	800b740 <HAL_UART_IRQHandler+0x730>
      return;
 800b72e:	bf00      	nop
 800b730:	e006      	b.n	800b740 <HAL_UART_IRQHandler+0x730>
    return;
 800b732:	bf00      	nop
 800b734:	e004      	b.n	800b740 <HAL_UART_IRQHandler+0x730>
      return;
 800b736:	bf00      	nop
 800b738:	e002      	b.n	800b740 <HAL_UART_IRQHandler+0x730>
      return;
 800b73a:	bf00      	nop
 800b73c:	e000      	b.n	800b740 <HAL_UART_IRQHandler+0x730>
    return;
 800b73e:	bf00      	nop
  }
}
 800b740:	37e8      	adds	r7, #232	; 0xe8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	effffffe 	.word	0xeffffffe

0800b74c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b780:	bf00      	nop
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b78c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b790:	b092      	sub	sp, #72	; 0x48
 800b792:	af00      	add	r7, sp, #0
 800b794:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	689a      	ldr	r2, [r3, #8]
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	431a      	orrs	r2, r3
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	431a      	orrs	r2, r3
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	69db      	ldr	r3, [r3, #28]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	4bbe      	ldr	r3, [pc, #760]	; (800bab4 <UART_SetConfig+0x328>)
 800b7bc:	4013      	ands	r3, r2
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	6812      	ldr	r2, [r2, #0]
 800b7c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7c4:	430b      	orrs	r3, r1
 800b7c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	68da      	ldr	r2, [r3, #12]
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	430a      	orrs	r2, r1
 800b7dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	699b      	ldr	r3, [r3, #24]
 800b7e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4ab3      	ldr	r2, [pc, #716]	; (800bab8 <UART_SetConfig+0x32c>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d004      	beq.n	800b7f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689a      	ldr	r2, [r3, #8]
 800b7fe:	4baf      	ldr	r3, [pc, #700]	; (800babc <UART_SetConfig+0x330>)
 800b800:	4013      	ands	r3, r2
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	6812      	ldr	r2, [r2, #0]
 800b806:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b808:	430b      	orrs	r3, r1
 800b80a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b812:	f023 010f 	bic.w	r1, r3, #15
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	430a      	orrs	r2, r1
 800b820:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4aa6      	ldr	r2, [pc, #664]	; (800bac0 <UART_SetConfig+0x334>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d177      	bne.n	800b91c <UART_SetConfig+0x190>
 800b82c:	4ba5      	ldr	r3, [pc, #660]	; (800bac4 <UART_SetConfig+0x338>)
 800b82e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b830:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b834:	2b28      	cmp	r3, #40	; 0x28
 800b836:	d86d      	bhi.n	800b914 <UART_SetConfig+0x188>
 800b838:	a201      	add	r2, pc, #4	; (adr r2, 800b840 <UART_SetConfig+0xb4>)
 800b83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b83e:	bf00      	nop
 800b840:	0800b8e5 	.word	0x0800b8e5
 800b844:	0800b915 	.word	0x0800b915
 800b848:	0800b915 	.word	0x0800b915
 800b84c:	0800b915 	.word	0x0800b915
 800b850:	0800b915 	.word	0x0800b915
 800b854:	0800b915 	.word	0x0800b915
 800b858:	0800b915 	.word	0x0800b915
 800b85c:	0800b915 	.word	0x0800b915
 800b860:	0800b8ed 	.word	0x0800b8ed
 800b864:	0800b915 	.word	0x0800b915
 800b868:	0800b915 	.word	0x0800b915
 800b86c:	0800b915 	.word	0x0800b915
 800b870:	0800b915 	.word	0x0800b915
 800b874:	0800b915 	.word	0x0800b915
 800b878:	0800b915 	.word	0x0800b915
 800b87c:	0800b915 	.word	0x0800b915
 800b880:	0800b8f5 	.word	0x0800b8f5
 800b884:	0800b915 	.word	0x0800b915
 800b888:	0800b915 	.word	0x0800b915
 800b88c:	0800b915 	.word	0x0800b915
 800b890:	0800b915 	.word	0x0800b915
 800b894:	0800b915 	.word	0x0800b915
 800b898:	0800b915 	.word	0x0800b915
 800b89c:	0800b915 	.word	0x0800b915
 800b8a0:	0800b8fd 	.word	0x0800b8fd
 800b8a4:	0800b915 	.word	0x0800b915
 800b8a8:	0800b915 	.word	0x0800b915
 800b8ac:	0800b915 	.word	0x0800b915
 800b8b0:	0800b915 	.word	0x0800b915
 800b8b4:	0800b915 	.word	0x0800b915
 800b8b8:	0800b915 	.word	0x0800b915
 800b8bc:	0800b915 	.word	0x0800b915
 800b8c0:	0800b905 	.word	0x0800b905
 800b8c4:	0800b915 	.word	0x0800b915
 800b8c8:	0800b915 	.word	0x0800b915
 800b8cc:	0800b915 	.word	0x0800b915
 800b8d0:	0800b915 	.word	0x0800b915
 800b8d4:	0800b915 	.word	0x0800b915
 800b8d8:	0800b915 	.word	0x0800b915
 800b8dc:	0800b915 	.word	0x0800b915
 800b8e0:	0800b90d 	.word	0x0800b90d
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ea:	e222      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b8ec:	2304      	movs	r3, #4
 800b8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8f2:	e21e      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b8f4:	2308      	movs	r3, #8
 800b8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8fa:	e21a      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b8fc:	2310      	movs	r3, #16
 800b8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b902:	e216      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b904:	2320      	movs	r3, #32
 800b906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b90a:	e212      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b90c:	2340      	movs	r3, #64	; 0x40
 800b90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b912:	e20e      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b914:	2380      	movs	r3, #128	; 0x80
 800b916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b91a:	e20a      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a69      	ldr	r2, [pc, #420]	; (800bac8 <UART_SetConfig+0x33c>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d130      	bne.n	800b988 <UART_SetConfig+0x1fc>
 800b926:	4b67      	ldr	r3, [pc, #412]	; (800bac4 <UART_SetConfig+0x338>)
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	f003 0307 	and.w	r3, r3, #7
 800b92e:	2b05      	cmp	r3, #5
 800b930:	d826      	bhi.n	800b980 <UART_SetConfig+0x1f4>
 800b932:	a201      	add	r2, pc, #4	; (adr r2, 800b938 <UART_SetConfig+0x1ac>)
 800b934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b938:	0800b951 	.word	0x0800b951
 800b93c:	0800b959 	.word	0x0800b959
 800b940:	0800b961 	.word	0x0800b961
 800b944:	0800b969 	.word	0x0800b969
 800b948:	0800b971 	.word	0x0800b971
 800b94c:	0800b979 	.word	0x0800b979
 800b950:	2300      	movs	r3, #0
 800b952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b956:	e1ec      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b958:	2304      	movs	r3, #4
 800b95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b95e:	e1e8      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b960:	2308      	movs	r3, #8
 800b962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b966:	e1e4      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b968:	2310      	movs	r3, #16
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b96e:	e1e0      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b970:	2320      	movs	r3, #32
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b976:	e1dc      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b978:	2340      	movs	r3, #64	; 0x40
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b97e:	e1d8      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b980:	2380      	movs	r3, #128	; 0x80
 800b982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b986:	e1d4      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a4f      	ldr	r2, [pc, #316]	; (800bacc <UART_SetConfig+0x340>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d130      	bne.n	800b9f4 <UART_SetConfig+0x268>
 800b992:	4b4c      	ldr	r3, [pc, #304]	; (800bac4 <UART_SetConfig+0x338>)
 800b994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b996:	f003 0307 	and.w	r3, r3, #7
 800b99a:	2b05      	cmp	r3, #5
 800b99c:	d826      	bhi.n	800b9ec <UART_SetConfig+0x260>
 800b99e:	a201      	add	r2, pc, #4	; (adr r2, 800b9a4 <UART_SetConfig+0x218>)
 800b9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a4:	0800b9bd 	.word	0x0800b9bd
 800b9a8:	0800b9c5 	.word	0x0800b9c5
 800b9ac:	0800b9cd 	.word	0x0800b9cd
 800b9b0:	0800b9d5 	.word	0x0800b9d5
 800b9b4:	0800b9dd 	.word	0x0800b9dd
 800b9b8:	0800b9e5 	.word	0x0800b9e5
 800b9bc:	2300      	movs	r3, #0
 800b9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9c2:	e1b6      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b9c4:	2304      	movs	r3, #4
 800b9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ca:	e1b2      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b9cc:	2308      	movs	r3, #8
 800b9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9d2:	e1ae      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b9d4:	2310      	movs	r3, #16
 800b9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9da:	e1aa      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b9dc:	2320      	movs	r3, #32
 800b9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9e2:	e1a6      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b9e4:	2340      	movs	r3, #64	; 0x40
 800b9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ea:	e1a2      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b9ec:	2380      	movs	r3, #128	; 0x80
 800b9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9f2:	e19e      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a35      	ldr	r2, [pc, #212]	; (800bad0 <UART_SetConfig+0x344>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d130      	bne.n	800ba60 <UART_SetConfig+0x2d4>
 800b9fe:	4b31      	ldr	r3, [pc, #196]	; (800bac4 <UART_SetConfig+0x338>)
 800ba00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba02:	f003 0307 	and.w	r3, r3, #7
 800ba06:	2b05      	cmp	r3, #5
 800ba08:	d826      	bhi.n	800ba58 <UART_SetConfig+0x2cc>
 800ba0a:	a201      	add	r2, pc, #4	; (adr r2, 800ba10 <UART_SetConfig+0x284>)
 800ba0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba10:	0800ba29 	.word	0x0800ba29
 800ba14:	0800ba31 	.word	0x0800ba31
 800ba18:	0800ba39 	.word	0x0800ba39
 800ba1c:	0800ba41 	.word	0x0800ba41
 800ba20:	0800ba49 	.word	0x0800ba49
 800ba24:	0800ba51 	.word	0x0800ba51
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba2e:	e180      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800ba30:	2304      	movs	r3, #4
 800ba32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba36:	e17c      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800ba38:	2308      	movs	r3, #8
 800ba3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba3e:	e178      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800ba40:	2310      	movs	r3, #16
 800ba42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba46:	e174      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800ba48:	2320      	movs	r3, #32
 800ba4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba4e:	e170      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800ba50:	2340      	movs	r3, #64	; 0x40
 800ba52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba56:	e16c      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800ba58:	2380      	movs	r3, #128	; 0x80
 800ba5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba5e:	e168      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a1b      	ldr	r2, [pc, #108]	; (800bad4 <UART_SetConfig+0x348>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d142      	bne.n	800baf0 <UART_SetConfig+0x364>
 800ba6a:	4b16      	ldr	r3, [pc, #88]	; (800bac4 <UART_SetConfig+0x338>)
 800ba6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba6e:	f003 0307 	and.w	r3, r3, #7
 800ba72:	2b05      	cmp	r3, #5
 800ba74:	d838      	bhi.n	800bae8 <UART_SetConfig+0x35c>
 800ba76:	a201      	add	r2, pc, #4	; (adr r2, 800ba7c <UART_SetConfig+0x2f0>)
 800ba78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba7c:	0800ba95 	.word	0x0800ba95
 800ba80:	0800ba9d 	.word	0x0800ba9d
 800ba84:	0800baa5 	.word	0x0800baa5
 800ba88:	0800baad 	.word	0x0800baad
 800ba8c:	0800bad9 	.word	0x0800bad9
 800ba90:	0800bae1 	.word	0x0800bae1
 800ba94:	2300      	movs	r3, #0
 800ba96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba9a:	e14a      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800ba9c:	2304      	movs	r3, #4
 800ba9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baa2:	e146      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800baa4:	2308      	movs	r3, #8
 800baa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baaa:	e142      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800baac:	2310      	movs	r3, #16
 800baae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bab2:	e13e      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bab4:	cfff69f3 	.word	0xcfff69f3
 800bab8:	58000c00 	.word	0x58000c00
 800babc:	11fff4ff 	.word	0x11fff4ff
 800bac0:	40011000 	.word	0x40011000
 800bac4:	58024400 	.word	0x58024400
 800bac8:	40004400 	.word	0x40004400
 800bacc:	40004800 	.word	0x40004800
 800bad0:	40004c00 	.word	0x40004c00
 800bad4:	40005000 	.word	0x40005000
 800bad8:	2320      	movs	r3, #32
 800bada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bade:	e128      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bae0:	2340      	movs	r3, #64	; 0x40
 800bae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bae6:	e124      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bae8:	2380      	movs	r3, #128	; 0x80
 800baea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baee:	e120      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4acb      	ldr	r2, [pc, #812]	; (800be24 <UART_SetConfig+0x698>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d176      	bne.n	800bbe8 <UART_SetConfig+0x45c>
 800bafa:	4bcb      	ldr	r3, [pc, #812]	; (800be28 <UART_SetConfig+0x69c>)
 800bafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bafe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb02:	2b28      	cmp	r3, #40	; 0x28
 800bb04:	d86c      	bhi.n	800bbe0 <UART_SetConfig+0x454>
 800bb06:	a201      	add	r2, pc, #4	; (adr r2, 800bb0c <UART_SetConfig+0x380>)
 800bb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0c:	0800bbb1 	.word	0x0800bbb1
 800bb10:	0800bbe1 	.word	0x0800bbe1
 800bb14:	0800bbe1 	.word	0x0800bbe1
 800bb18:	0800bbe1 	.word	0x0800bbe1
 800bb1c:	0800bbe1 	.word	0x0800bbe1
 800bb20:	0800bbe1 	.word	0x0800bbe1
 800bb24:	0800bbe1 	.word	0x0800bbe1
 800bb28:	0800bbe1 	.word	0x0800bbe1
 800bb2c:	0800bbb9 	.word	0x0800bbb9
 800bb30:	0800bbe1 	.word	0x0800bbe1
 800bb34:	0800bbe1 	.word	0x0800bbe1
 800bb38:	0800bbe1 	.word	0x0800bbe1
 800bb3c:	0800bbe1 	.word	0x0800bbe1
 800bb40:	0800bbe1 	.word	0x0800bbe1
 800bb44:	0800bbe1 	.word	0x0800bbe1
 800bb48:	0800bbe1 	.word	0x0800bbe1
 800bb4c:	0800bbc1 	.word	0x0800bbc1
 800bb50:	0800bbe1 	.word	0x0800bbe1
 800bb54:	0800bbe1 	.word	0x0800bbe1
 800bb58:	0800bbe1 	.word	0x0800bbe1
 800bb5c:	0800bbe1 	.word	0x0800bbe1
 800bb60:	0800bbe1 	.word	0x0800bbe1
 800bb64:	0800bbe1 	.word	0x0800bbe1
 800bb68:	0800bbe1 	.word	0x0800bbe1
 800bb6c:	0800bbc9 	.word	0x0800bbc9
 800bb70:	0800bbe1 	.word	0x0800bbe1
 800bb74:	0800bbe1 	.word	0x0800bbe1
 800bb78:	0800bbe1 	.word	0x0800bbe1
 800bb7c:	0800bbe1 	.word	0x0800bbe1
 800bb80:	0800bbe1 	.word	0x0800bbe1
 800bb84:	0800bbe1 	.word	0x0800bbe1
 800bb88:	0800bbe1 	.word	0x0800bbe1
 800bb8c:	0800bbd1 	.word	0x0800bbd1
 800bb90:	0800bbe1 	.word	0x0800bbe1
 800bb94:	0800bbe1 	.word	0x0800bbe1
 800bb98:	0800bbe1 	.word	0x0800bbe1
 800bb9c:	0800bbe1 	.word	0x0800bbe1
 800bba0:	0800bbe1 	.word	0x0800bbe1
 800bba4:	0800bbe1 	.word	0x0800bbe1
 800bba8:	0800bbe1 	.word	0x0800bbe1
 800bbac:	0800bbd9 	.word	0x0800bbd9
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbb6:	e0bc      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bbb8:	2304      	movs	r3, #4
 800bbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbbe:	e0b8      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bbc0:	2308      	movs	r3, #8
 800bbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbc6:	e0b4      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bbc8:	2310      	movs	r3, #16
 800bbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbce:	e0b0      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bbd0:	2320      	movs	r3, #32
 800bbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbd6:	e0ac      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bbd8:	2340      	movs	r3, #64	; 0x40
 800bbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbde:	e0a8      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bbe0:	2380      	movs	r3, #128	; 0x80
 800bbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbe6:	e0a4      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a8f      	ldr	r2, [pc, #572]	; (800be2c <UART_SetConfig+0x6a0>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d130      	bne.n	800bc54 <UART_SetConfig+0x4c8>
 800bbf2:	4b8d      	ldr	r3, [pc, #564]	; (800be28 <UART_SetConfig+0x69c>)
 800bbf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf6:	f003 0307 	and.w	r3, r3, #7
 800bbfa:	2b05      	cmp	r3, #5
 800bbfc:	d826      	bhi.n	800bc4c <UART_SetConfig+0x4c0>
 800bbfe:	a201      	add	r2, pc, #4	; (adr r2, 800bc04 <UART_SetConfig+0x478>)
 800bc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc04:	0800bc1d 	.word	0x0800bc1d
 800bc08:	0800bc25 	.word	0x0800bc25
 800bc0c:	0800bc2d 	.word	0x0800bc2d
 800bc10:	0800bc35 	.word	0x0800bc35
 800bc14:	0800bc3d 	.word	0x0800bc3d
 800bc18:	0800bc45 	.word	0x0800bc45
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc22:	e086      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bc24:	2304      	movs	r3, #4
 800bc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc2a:	e082      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bc2c:	2308      	movs	r3, #8
 800bc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc32:	e07e      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bc34:	2310      	movs	r3, #16
 800bc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc3a:	e07a      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bc3c:	2320      	movs	r3, #32
 800bc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc42:	e076      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bc44:	2340      	movs	r3, #64	; 0x40
 800bc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc4a:	e072      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bc4c:	2380      	movs	r3, #128	; 0x80
 800bc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc52:	e06e      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a75      	ldr	r2, [pc, #468]	; (800be30 <UART_SetConfig+0x6a4>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d130      	bne.n	800bcc0 <UART_SetConfig+0x534>
 800bc5e:	4b72      	ldr	r3, [pc, #456]	; (800be28 <UART_SetConfig+0x69c>)
 800bc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc62:	f003 0307 	and.w	r3, r3, #7
 800bc66:	2b05      	cmp	r3, #5
 800bc68:	d826      	bhi.n	800bcb8 <UART_SetConfig+0x52c>
 800bc6a:	a201      	add	r2, pc, #4	; (adr r2, 800bc70 <UART_SetConfig+0x4e4>)
 800bc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc70:	0800bc89 	.word	0x0800bc89
 800bc74:	0800bc91 	.word	0x0800bc91
 800bc78:	0800bc99 	.word	0x0800bc99
 800bc7c:	0800bca1 	.word	0x0800bca1
 800bc80:	0800bca9 	.word	0x0800bca9
 800bc84:	0800bcb1 	.word	0x0800bcb1
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc8e:	e050      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bc90:	2304      	movs	r3, #4
 800bc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc96:	e04c      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bc98:	2308      	movs	r3, #8
 800bc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc9e:	e048      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bca0:	2310      	movs	r3, #16
 800bca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bca6:	e044      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bca8:	2320      	movs	r3, #32
 800bcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcae:	e040      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bcb0:	2340      	movs	r3, #64	; 0x40
 800bcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcb6:	e03c      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bcb8:	2380      	movs	r3, #128	; 0x80
 800bcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcbe:	e038      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a5b      	ldr	r2, [pc, #364]	; (800be34 <UART_SetConfig+0x6a8>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d130      	bne.n	800bd2c <UART_SetConfig+0x5a0>
 800bcca:	4b57      	ldr	r3, [pc, #348]	; (800be28 <UART_SetConfig+0x69c>)
 800bccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcce:	f003 0307 	and.w	r3, r3, #7
 800bcd2:	2b05      	cmp	r3, #5
 800bcd4:	d826      	bhi.n	800bd24 <UART_SetConfig+0x598>
 800bcd6:	a201      	add	r2, pc, #4	; (adr r2, 800bcdc <UART_SetConfig+0x550>)
 800bcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcdc:	0800bcf5 	.word	0x0800bcf5
 800bce0:	0800bcfd 	.word	0x0800bcfd
 800bce4:	0800bd05 	.word	0x0800bd05
 800bce8:	0800bd0d 	.word	0x0800bd0d
 800bcec:	0800bd15 	.word	0x0800bd15
 800bcf0:	0800bd1d 	.word	0x0800bd1d
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcfa:	e01a      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bcfc:	2304      	movs	r3, #4
 800bcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd02:	e016      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bd04:	2308      	movs	r3, #8
 800bd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd0a:	e012      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bd0c:	2310      	movs	r3, #16
 800bd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd12:	e00e      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bd14:	2320      	movs	r3, #32
 800bd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd1a:	e00a      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bd1c:	2340      	movs	r3, #64	; 0x40
 800bd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd22:	e006      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bd24:	2380      	movs	r3, #128	; 0x80
 800bd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd2a:	e002      	b.n	800bd32 <UART_SetConfig+0x5a6>
 800bd2c:	2380      	movs	r3, #128	; 0x80
 800bd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a3f      	ldr	r2, [pc, #252]	; (800be34 <UART_SetConfig+0x6a8>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	f040 80f8 	bne.w	800bf2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bd42:	2b20      	cmp	r3, #32
 800bd44:	dc46      	bgt.n	800bdd4 <UART_SetConfig+0x648>
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	f2c0 8082 	blt.w	800be50 <UART_SetConfig+0x6c4>
 800bd4c:	3b02      	subs	r3, #2
 800bd4e:	2b1e      	cmp	r3, #30
 800bd50:	d87e      	bhi.n	800be50 <UART_SetConfig+0x6c4>
 800bd52:	a201      	add	r2, pc, #4	; (adr r2, 800bd58 <UART_SetConfig+0x5cc>)
 800bd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd58:	0800bddb 	.word	0x0800bddb
 800bd5c:	0800be51 	.word	0x0800be51
 800bd60:	0800bde3 	.word	0x0800bde3
 800bd64:	0800be51 	.word	0x0800be51
 800bd68:	0800be51 	.word	0x0800be51
 800bd6c:	0800be51 	.word	0x0800be51
 800bd70:	0800bdf3 	.word	0x0800bdf3
 800bd74:	0800be51 	.word	0x0800be51
 800bd78:	0800be51 	.word	0x0800be51
 800bd7c:	0800be51 	.word	0x0800be51
 800bd80:	0800be51 	.word	0x0800be51
 800bd84:	0800be51 	.word	0x0800be51
 800bd88:	0800be51 	.word	0x0800be51
 800bd8c:	0800be51 	.word	0x0800be51
 800bd90:	0800be03 	.word	0x0800be03
 800bd94:	0800be51 	.word	0x0800be51
 800bd98:	0800be51 	.word	0x0800be51
 800bd9c:	0800be51 	.word	0x0800be51
 800bda0:	0800be51 	.word	0x0800be51
 800bda4:	0800be51 	.word	0x0800be51
 800bda8:	0800be51 	.word	0x0800be51
 800bdac:	0800be51 	.word	0x0800be51
 800bdb0:	0800be51 	.word	0x0800be51
 800bdb4:	0800be51 	.word	0x0800be51
 800bdb8:	0800be51 	.word	0x0800be51
 800bdbc:	0800be51 	.word	0x0800be51
 800bdc0:	0800be51 	.word	0x0800be51
 800bdc4:	0800be51 	.word	0x0800be51
 800bdc8:	0800be51 	.word	0x0800be51
 800bdcc:	0800be51 	.word	0x0800be51
 800bdd0:	0800be43 	.word	0x0800be43
 800bdd4:	2b40      	cmp	r3, #64	; 0x40
 800bdd6:	d037      	beq.n	800be48 <UART_SetConfig+0x6bc>
 800bdd8:	e03a      	b.n	800be50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bdda:	f7fe f937 	bl	800a04c <HAL_RCCEx_GetD3PCLK1Freq>
 800bdde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bde0:	e03c      	b.n	800be5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bde2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe f946 	bl	800a078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdf0:	e034      	b.n	800be5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdf2:	f107 0318 	add.w	r3, r7, #24
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fe fa92 	bl	800a320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be00:	e02c      	b.n	800be5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be02:	4b09      	ldr	r3, [pc, #36]	; (800be28 <UART_SetConfig+0x69c>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 0320 	and.w	r3, r3, #32
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d016      	beq.n	800be3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be0e:	4b06      	ldr	r3, [pc, #24]	; (800be28 <UART_SetConfig+0x69c>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	08db      	lsrs	r3, r3, #3
 800be14:	f003 0303 	and.w	r3, r3, #3
 800be18:	4a07      	ldr	r2, [pc, #28]	; (800be38 <UART_SetConfig+0x6ac>)
 800be1a:	fa22 f303 	lsr.w	r3, r2, r3
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be20:	e01c      	b.n	800be5c <UART_SetConfig+0x6d0>
 800be22:	bf00      	nop
 800be24:	40011400 	.word	0x40011400
 800be28:	58024400 	.word	0x58024400
 800be2c:	40007800 	.word	0x40007800
 800be30:	40007c00 	.word	0x40007c00
 800be34:	58000c00 	.word	0x58000c00
 800be38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800be3c:	4b9d      	ldr	r3, [pc, #628]	; (800c0b4 <UART_SetConfig+0x928>)
 800be3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be40:	e00c      	b.n	800be5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be42:	4b9d      	ldr	r3, [pc, #628]	; (800c0b8 <UART_SetConfig+0x92c>)
 800be44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be46:	e009      	b.n	800be5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be4e:	e005      	b.n	800be5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800be50:	2300      	movs	r3, #0
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800be5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800be5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f000 81de 	beq.w	800c220 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be68:	4a94      	ldr	r2, [pc, #592]	; (800c0bc <UART_SetConfig+0x930>)
 800be6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be6e:	461a      	mov	r2, r3
 800be70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be72:	fbb3 f3f2 	udiv	r3, r3, r2
 800be76:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	685a      	ldr	r2, [r3, #4]
 800be7c:	4613      	mov	r3, r2
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	4413      	add	r3, r2
 800be82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be84:	429a      	cmp	r2, r3
 800be86:	d305      	bcc.n	800be94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be90:	429a      	cmp	r2, r3
 800be92:	d903      	bls.n	800be9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800be9a:	e1c1      	b.n	800c220 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be9e:	2200      	movs	r2, #0
 800bea0:	60bb      	str	r3, [r7, #8]
 800bea2:	60fa      	str	r2, [r7, #12]
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea8:	4a84      	ldr	r2, [pc, #528]	; (800c0bc <UART_SetConfig+0x930>)
 800beaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beae:	b29b      	uxth	r3, r3
 800beb0:	2200      	movs	r2, #0
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	607a      	str	r2, [r7, #4]
 800beb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bebe:	f7f4 fab7 	bl	8000430 <__aeabi_uldivmod>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	4610      	mov	r0, r2
 800bec8:	4619      	mov	r1, r3
 800beca:	f04f 0200 	mov.w	r2, #0
 800bece:	f04f 0300 	mov.w	r3, #0
 800bed2:	020b      	lsls	r3, r1, #8
 800bed4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bed8:	0202      	lsls	r2, r0, #8
 800beda:	6979      	ldr	r1, [r7, #20]
 800bedc:	6849      	ldr	r1, [r1, #4]
 800bede:	0849      	lsrs	r1, r1, #1
 800bee0:	2000      	movs	r0, #0
 800bee2:	460c      	mov	r4, r1
 800bee4:	4605      	mov	r5, r0
 800bee6:	eb12 0804 	adds.w	r8, r2, r4
 800beea:	eb43 0905 	adc.w	r9, r3, r5
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	469a      	mov	sl, r3
 800bef6:	4693      	mov	fp, r2
 800bef8:	4652      	mov	r2, sl
 800befa:	465b      	mov	r3, fp
 800befc:	4640      	mov	r0, r8
 800befe:	4649      	mov	r1, r9
 800bf00:	f7f4 fa96 	bl	8000430 <__aeabi_uldivmod>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	4613      	mov	r3, r2
 800bf0a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf12:	d308      	bcc.n	800bf26 <UART_SetConfig+0x79a>
 800bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf1a:	d204      	bcs.n	800bf26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf22:	60da      	str	r2, [r3, #12]
 800bf24:	e17c      	b.n	800c220 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bf2c:	e178      	b.n	800c220 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	69db      	ldr	r3, [r3, #28]
 800bf32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf36:	f040 80c5 	bne.w	800c0c4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bf3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bf3e:	2b20      	cmp	r3, #32
 800bf40:	dc48      	bgt.n	800bfd4 <UART_SetConfig+0x848>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	db7b      	blt.n	800c03e <UART_SetConfig+0x8b2>
 800bf46:	2b20      	cmp	r3, #32
 800bf48:	d879      	bhi.n	800c03e <UART_SetConfig+0x8b2>
 800bf4a:	a201      	add	r2, pc, #4	; (adr r2, 800bf50 <UART_SetConfig+0x7c4>)
 800bf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf50:	0800bfdb 	.word	0x0800bfdb
 800bf54:	0800bfe3 	.word	0x0800bfe3
 800bf58:	0800c03f 	.word	0x0800c03f
 800bf5c:	0800c03f 	.word	0x0800c03f
 800bf60:	0800bfeb 	.word	0x0800bfeb
 800bf64:	0800c03f 	.word	0x0800c03f
 800bf68:	0800c03f 	.word	0x0800c03f
 800bf6c:	0800c03f 	.word	0x0800c03f
 800bf70:	0800bffb 	.word	0x0800bffb
 800bf74:	0800c03f 	.word	0x0800c03f
 800bf78:	0800c03f 	.word	0x0800c03f
 800bf7c:	0800c03f 	.word	0x0800c03f
 800bf80:	0800c03f 	.word	0x0800c03f
 800bf84:	0800c03f 	.word	0x0800c03f
 800bf88:	0800c03f 	.word	0x0800c03f
 800bf8c:	0800c03f 	.word	0x0800c03f
 800bf90:	0800c00b 	.word	0x0800c00b
 800bf94:	0800c03f 	.word	0x0800c03f
 800bf98:	0800c03f 	.word	0x0800c03f
 800bf9c:	0800c03f 	.word	0x0800c03f
 800bfa0:	0800c03f 	.word	0x0800c03f
 800bfa4:	0800c03f 	.word	0x0800c03f
 800bfa8:	0800c03f 	.word	0x0800c03f
 800bfac:	0800c03f 	.word	0x0800c03f
 800bfb0:	0800c03f 	.word	0x0800c03f
 800bfb4:	0800c03f 	.word	0x0800c03f
 800bfb8:	0800c03f 	.word	0x0800c03f
 800bfbc:	0800c03f 	.word	0x0800c03f
 800bfc0:	0800c03f 	.word	0x0800c03f
 800bfc4:	0800c03f 	.word	0x0800c03f
 800bfc8:	0800c03f 	.word	0x0800c03f
 800bfcc:	0800c03f 	.word	0x0800c03f
 800bfd0:	0800c031 	.word	0x0800c031
 800bfd4:	2b40      	cmp	r3, #64	; 0x40
 800bfd6:	d02e      	beq.n	800c036 <UART_SetConfig+0x8aa>
 800bfd8:	e031      	b.n	800c03e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfda:	f7fd f883 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
 800bfde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bfe0:	e033      	b.n	800c04a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfe2:	f7fd f895 	bl	8009110 <HAL_RCC_GetPCLK2Freq>
 800bfe6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bfe8:	e02f      	b.n	800c04a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fe f842 	bl	800a078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff8:	e027      	b.n	800c04a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bffa:	f107 0318 	add.w	r3, r7, #24
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fe f98e 	bl	800a320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c008:	e01f      	b.n	800c04a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c00a:	4b2d      	ldr	r3, [pc, #180]	; (800c0c0 <UART_SetConfig+0x934>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 0320 	and.w	r3, r3, #32
 800c012:	2b00      	cmp	r3, #0
 800c014:	d009      	beq.n	800c02a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c016:	4b2a      	ldr	r3, [pc, #168]	; (800c0c0 <UART_SetConfig+0x934>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	08db      	lsrs	r3, r3, #3
 800c01c:	f003 0303 	and.w	r3, r3, #3
 800c020:	4a24      	ldr	r2, [pc, #144]	; (800c0b4 <UART_SetConfig+0x928>)
 800c022:	fa22 f303 	lsr.w	r3, r2, r3
 800c026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c028:	e00f      	b.n	800c04a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c02a:	4b22      	ldr	r3, [pc, #136]	; (800c0b4 <UART_SetConfig+0x928>)
 800c02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c02e:	e00c      	b.n	800c04a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c030:	4b21      	ldr	r3, [pc, #132]	; (800c0b8 <UART_SetConfig+0x92c>)
 800c032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c034:	e009      	b.n	800c04a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c03c:	e005      	b.n	800c04a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 80e7 	beq.w	800c220 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c056:	4a19      	ldr	r2, [pc, #100]	; (800c0bc <UART_SetConfig+0x930>)
 800c058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c05c:	461a      	mov	r2, r3
 800c05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c060:	fbb3 f3f2 	udiv	r3, r3, r2
 800c064:	005a      	lsls	r2, r3, #1
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	085b      	lsrs	r3, r3, #1
 800c06c:	441a      	add	r2, r3
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	fbb2 f3f3 	udiv	r3, r2, r3
 800c076:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07a:	2b0f      	cmp	r3, #15
 800c07c:	d916      	bls.n	800c0ac <UART_SetConfig+0x920>
 800c07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c084:	d212      	bcs.n	800c0ac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c088:	b29b      	uxth	r3, r3
 800c08a:	f023 030f 	bic.w	r3, r3, #15
 800c08e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c092:	085b      	lsrs	r3, r3, #1
 800c094:	b29b      	uxth	r3, r3
 800c096:	f003 0307 	and.w	r3, r3, #7
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c0a8:	60da      	str	r2, [r3, #12]
 800c0aa:	e0b9      	b.n	800c220 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c0b2:	e0b5      	b.n	800c220 <UART_SetConfig+0xa94>
 800c0b4:	03d09000 	.word	0x03d09000
 800c0b8:	003d0900 	.word	0x003d0900
 800c0bc:	0800d9c8 	.word	0x0800d9c8
 800c0c0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c0c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c0c8:	2b20      	cmp	r3, #32
 800c0ca:	dc49      	bgt.n	800c160 <UART_SetConfig+0x9d4>
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	db7c      	blt.n	800c1ca <UART_SetConfig+0xa3e>
 800c0d0:	2b20      	cmp	r3, #32
 800c0d2:	d87a      	bhi.n	800c1ca <UART_SetConfig+0xa3e>
 800c0d4:	a201      	add	r2, pc, #4	; (adr r2, 800c0dc <UART_SetConfig+0x950>)
 800c0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0da:	bf00      	nop
 800c0dc:	0800c167 	.word	0x0800c167
 800c0e0:	0800c16f 	.word	0x0800c16f
 800c0e4:	0800c1cb 	.word	0x0800c1cb
 800c0e8:	0800c1cb 	.word	0x0800c1cb
 800c0ec:	0800c177 	.word	0x0800c177
 800c0f0:	0800c1cb 	.word	0x0800c1cb
 800c0f4:	0800c1cb 	.word	0x0800c1cb
 800c0f8:	0800c1cb 	.word	0x0800c1cb
 800c0fc:	0800c187 	.word	0x0800c187
 800c100:	0800c1cb 	.word	0x0800c1cb
 800c104:	0800c1cb 	.word	0x0800c1cb
 800c108:	0800c1cb 	.word	0x0800c1cb
 800c10c:	0800c1cb 	.word	0x0800c1cb
 800c110:	0800c1cb 	.word	0x0800c1cb
 800c114:	0800c1cb 	.word	0x0800c1cb
 800c118:	0800c1cb 	.word	0x0800c1cb
 800c11c:	0800c197 	.word	0x0800c197
 800c120:	0800c1cb 	.word	0x0800c1cb
 800c124:	0800c1cb 	.word	0x0800c1cb
 800c128:	0800c1cb 	.word	0x0800c1cb
 800c12c:	0800c1cb 	.word	0x0800c1cb
 800c130:	0800c1cb 	.word	0x0800c1cb
 800c134:	0800c1cb 	.word	0x0800c1cb
 800c138:	0800c1cb 	.word	0x0800c1cb
 800c13c:	0800c1cb 	.word	0x0800c1cb
 800c140:	0800c1cb 	.word	0x0800c1cb
 800c144:	0800c1cb 	.word	0x0800c1cb
 800c148:	0800c1cb 	.word	0x0800c1cb
 800c14c:	0800c1cb 	.word	0x0800c1cb
 800c150:	0800c1cb 	.word	0x0800c1cb
 800c154:	0800c1cb 	.word	0x0800c1cb
 800c158:	0800c1cb 	.word	0x0800c1cb
 800c15c:	0800c1bd 	.word	0x0800c1bd
 800c160:	2b40      	cmp	r3, #64	; 0x40
 800c162:	d02e      	beq.n	800c1c2 <UART_SetConfig+0xa36>
 800c164:	e031      	b.n	800c1ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c166:	f7fc ffbd 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
 800c16a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c16c:	e033      	b.n	800c1d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c16e:	f7fc ffcf 	bl	8009110 <HAL_RCC_GetPCLK2Freq>
 800c172:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c174:	e02f      	b.n	800c1d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fd ff7c 	bl	800a078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c184:	e027      	b.n	800c1d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c186:	f107 0318 	add.w	r3, r7, #24
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe f8c8 	bl	800a320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c194:	e01f      	b.n	800c1d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c196:	4b2d      	ldr	r3, [pc, #180]	; (800c24c <UART_SetConfig+0xac0>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f003 0320 	and.w	r3, r3, #32
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d009      	beq.n	800c1b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1a2:	4b2a      	ldr	r3, [pc, #168]	; (800c24c <UART_SetConfig+0xac0>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	08db      	lsrs	r3, r3, #3
 800c1a8:	f003 0303 	and.w	r3, r3, #3
 800c1ac:	4a28      	ldr	r2, [pc, #160]	; (800c250 <UART_SetConfig+0xac4>)
 800c1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1b4:	e00f      	b.n	800c1d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c1b6:	4b26      	ldr	r3, [pc, #152]	; (800c250 <UART_SetConfig+0xac4>)
 800c1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1ba:	e00c      	b.n	800c1d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1bc:	4b25      	ldr	r3, [pc, #148]	; (800c254 <UART_SetConfig+0xac8>)
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c0:	e009      	b.n	800c1d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c8:	e005      	b.n	800c1d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c1d4:	bf00      	nop
    }

    if (pclk != 0U)
 800c1d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d021      	beq.n	800c220 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e0:	4a1d      	ldr	r2, [pc, #116]	; (800c258 <UART_SetConfig+0xacc>)
 800c1e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	085b      	lsrs	r3, r3, #1
 800c1f4:	441a      	add	r2, r3
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c202:	2b0f      	cmp	r3, #15
 800c204:	d909      	bls.n	800c21a <UART_SetConfig+0xa8e>
 800c206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c20c:	d205      	bcs.n	800c21a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c210:	b29a      	uxth	r2, r3
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	60da      	str	r2, [r3, #12]
 800c218:	e002      	b.n	800c220 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	2201      	movs	r2, #1
 800c224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	2200      	movs	r2, #0
 800c234:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2200      	movs	r2, #0
 800c23a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c23c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c240:	4618      	mov	r0, r3
 800c242:	3748      	adds	r7, #72	; 0x48
 800c244:	46bd      	mov	sp, r7
 800c246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c24a:	bf00      	nop
 800c24c:	58024400 	.word	0x58024400
 800c250:	03d09000 	.word	0x03d09000
 800c254:	003d0900 	.word	0x003d0900
 800c258:	0800d9c8 	.word	0x0800d9c8

0800c25c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00a      	beq.n	800c286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	430a      	orrs	r2, r1
 800c284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c28a:	f003 0302 	and.w	r3, r3, #2
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00a      	beq.n	800c2a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ac:	f003 0304 	and.w	r3, r3, #4
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00a      	beq.n	800c2ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ce:	f003 0308 	and.w	r3, r3, #8
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00a      	beq.n	800c2ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	430a      	orrs	r2, r1
 800c2ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f0:	f003 0310 	and.w	r3, r3, #16
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00a      	beq.n	800c30e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	430a      	orrs	r2, r1
 800c30c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c312:	f003 0320 	and.w	r3, r3, #32
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00a      	beq.n	800c330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	430a      	orrs	r2, r1
 800c32e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d01a      	beq.n	800c372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	430a      	orrs	r2, r1
 800c350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c35a:	d10a      	bne.n	800c372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	430a      	orrs	r2, r1
 800c370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00a      	beq.n	800c394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	430a      	orrs	r2, r1
 800c392:	605a      	str	r2, [r3, #4]
  }
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af02      	add	r7, sp, #8
 800c3a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3b0:	f7f9 fc9c 	bl	8005cec <HAL_GetTick>
 800c3b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f003 0308 	and.w	r3, r3, #8
 800c3c0:	2b08      	cmp	r3, #8
 800c3c2:	d10e      	bne.n	800c3e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f82f 	bl	800c436 <UART_WaitOnFlagUntilTimeout>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3de:	2303      	movs	r3, #3
 800c3e0:	e025      	b.n	800c42e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f003 0304 	and.w	r3, r3, #4
 800c3ec:	2b04      	cmp	r3, #4
 800c3ee:	d10e      	bne.n	800c40e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3f4:	9300      	str	r3, [sp, #0]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f819 	bl	800c436 <UART_WaitOnFlagUntilTimeout>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c40a:	2303      	movs	r3, #3
 800c40c:	e00f      	b.n	800c42e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2220      	movs	r2, #32
 800c412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2220      	movs	r2, #32
 800c41a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b09c      	sub	sp, #112	; 0x70
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	60b9      	str	r1, [r7, #8]
 800c440:	603b      	str	r3, [r7, #0]
 800c442:	4613      	mov	r3, r2
 800c444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c446:	e0a9      	b.n	800c59c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44e:	f000 80a5 	beq.w	800c59c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c452:	f7f9 fc4b 	bl	8005cec <HAL_GetTick>
 800c456:	4602      	mov	r2, r0
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c45e:	429a      	cmp	r2, r3
 800c460:	d302      	bcc.n	800c468 <UART_WaitOnFlagUntilTimeout+0x32>
 800c462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c464:	2b00      	cmp	r3, #0
 800c466:	d140      	bne.n	800c4ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c470:	e853 3f00 	ldrex	r3, [r3]
 800c474:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c47c:	667b      	str	r3, [r7, #100]	; 0x64
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c486:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c488:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c48c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c48e:	e841 2300 	strex	r3, r2, [r1]
 800c492:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1e6      	bne.n	800c468 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	3308      	adds	r3, #8
 800c4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4a4:	e853 3f00 	ldrex	r3, [r3]
 800c4a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	f023 0301 	bic.w	r3, r3, #1
 800c4b0:	663b      	str	r3, [r7, #96]	; 0x60
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	3308      	adds	r3, #8
 800c4b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c4ba:	64ba      	str	r2, [r7, #72]	; 0x48
 800c4bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c4c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4c2:	e841 2300 	strex	r3, r2, [r1]
 800c4c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1e5      	bne.n	800c49a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2220      	movs	r2, #32
 800c4d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2220      	movs	r2, #32
 800c4da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c4e6:	2303      	movs	r3, #3
 800c4e8:	e069      	b.n	800c5be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f003 0304 	and.w	r3, r3, #4
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d051      	beq.n	800c59c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c506:	d149      	bne.n	800c59c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c510:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51a:	e853 3f00 	ldrex	r3, [r3]
 800c51e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c526:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	461a      	mov	r2, r3
 800c52e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c530:	637b      	str	r3, [r7, #52]	; 0x34
 800c532:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c534:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c538:	e841 2300 	strex	r3, r2, [r1]
 800c53c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c540:	2b00      	cmp	r3, #0
 800c542:	d1e6      	bne.n	800c512 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	3308      	adds	r3, #8
 800c54a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	e853 3f00 	ldrex	r3, [r3]
 800c552:	613b      	str	r3, [r7, #16]
   return(result);
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	f023 0301 	bic.w	r3, r3, #1
 800c55a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	3308      	adds	r3, #8
 800c562:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c564:	623a      	str	r2, [r7, #32]
 800c566:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c568:	69f9      	ldr	r1, [r7, #28]
 800c56a:	6a3a      	ldr	r2, [r7, #32]
 800c56c:	e841 2300 	strex	r3, r2, [r1]
 800c570:	61bb      	str	r3, [r7, #24]
   return(result);
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1e5      	bne.n	800c544 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2220      	movs	r2, #32
 800c57c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2220      	movs	r2, #32
 800c584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2220      	movs	r2, #32
 800c58c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c598:	2303      	movs	r3, #3
 800c59a:	e010      	b.n	800c5be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	69da      	ldr	r2, [r3, #28]
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	bf0c      	ite	eq
 800c5ac:	2301      	moveq	r3, #1
 800c5ae:	2300      	movne	r3, #0
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	f43f af46 	beq.w	800c448 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3770      	adds	r7, #112	; 0x70
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
	...

0800c5c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b095      	sub	sp, #84	; 0x54
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d8:	e853 3f00 	ldrex	r3, [r3]
 800c5dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ee:	643b      	str	r3, [r7, #64]	; 0x40
 800c5f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5f6:	e841 2300 	strex	r3, r2, [r1]
 800c5fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1e6      	bne.n	800c5d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	3308      	adds	r3, #8
 800c608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	e853 3f00 	ldrex	r3, [r3]
 800c610:	61fb      	str	r3, [r7, #28]
   return(result);
 800c612:	69fa      	ldr	r2, [r7, #28]
 800c614:	4b1e      	ldr	r3, [pc, #120]	; (800c690 <UART_EndRxTransfer+0xc8>)
 800c616:	4013      	ands	r3, r2
 800c618:	64bb      	str	r3, [r7, #72]	; 0x48
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	3308      	adds	r3, #8
 800c620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c622:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c624:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c62a:	e841 2300 	strex	r3, r2, [r1]
 800c62e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1e5      	bne.n	800c602 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d118      	bne.n	800c670 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	e853 3f00 	ldrex	r3, [r3]
 800c64a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	f023 0310 	bic.w	r3, r3, #16
 800c652:	647b      	str	r3, [r7, #68]	; 0x44
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	461a      	mov	r2, r3
 800c65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c65c:	61bb      	str	r3, [r7, #24]
 800c65e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c660:	6979      	ldr	r1, [r7, #20]
 800c662:	69ba      	ldr	r2, [r7, #24]
 800c664:	e841 2300 	strex	r3, r2, [r1]
 800c668:	613b      	str	r3, [r7, #16]
   return(result);
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1e6      	bne.n	800c63e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2220      	movs	r2, #32
 800c674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c684:	bf00      	nop
 800c686:	3754      	adds	r7, #84	; 0x54
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr
 800c690:	effffffe 	.word	0xeffffffe

0800c694 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f7ff f854 	bl	800b760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6b8:	bf00      	nop
 800c6ba:	3710      	adds	r7, #16
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b088      	sub	sp, #32
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	e853 3f00 	ldrex	r3, [r3]
 800c6d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6dc:	61fb      	str	r3, [r7, #28]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	61bb      	str	r3, [r7, #24]
 800c6e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ea:	6979      	ldr	r1, [r7, #20]
 800c6ec:	69ba      	ldr	r2, [r7, #24]
 800c6ee:	e841 2300 	strex	r3, r2, [r1]
 800c6f2:	613b      	str	r3, [r7, #16]
   return(result);
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1e6      	bne.n	800c6c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2220      	movs	r2, #32
 800c6fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7ff f81f 	bl	800b74c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c70e:	bf00      	nop
 800c710:	3720      	adds	r7, #32
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c716:	b480      	push	{r7}
 800c718:	b083      	sub	sp, #12
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c71e:	bf00      	nop
 800c720:	370c      	adds	r7, #12
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b083      	sub	sp, #12
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c732:	bf00      	nop
 800c734:	370c      	adds	r7, #12
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c73e:	b480      	push	{r7}
 800c740:	b083      	sub	sp, #12
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c746:	bf00      	nop
 800c748:	370c      	adds	r7, #12
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr

0800c752 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c752:	b480      	push	{r7}
 800c754:	b085      	sub	sp, #20
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c760:	2b01      	cmp	r3, #1
 800c762:	d101      	bne.n	800c768 <HAL_UARTEx_DisableFifoMode+0x16>
 800c764:	2302      	movs	r3, #2
 800c766:	e027      	b.n	800c7b8 <HAL_UARTEx_DisableFifoMode+0x66>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2224      	movs	r2, #36	; 0x24
 800c774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f022 0201 	bic.w	r2, r2, #1
 800c78e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c796:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d101      	bne.n	800c7dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c7d8:	2302      	movs	r3, #2
 800c7da:	e02d      	b.n	800c838 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2224      	movs	r2, #36	; 0x24
 800c7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f022 0201 	bic.w	r2, r2, #1
 800c802:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	683a      	ldr	r2, [r7, #0]
 800c814:	430a      	orrs	r2, r1
 800c816:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f84f 	bl	800c8bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2220      	movs	r2, #32
 800c82a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c850:	2b01      	cmp	r3, #1
 800c852:	d101      	bne.n	800c858 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c854:	2302      	movs	r3, #2
 800c856:	e02d      	b.n	800c8b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2224      	movs	r2, #36	; 0x24
 800c864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f022 0201 	bic.w	r2, r2, #1
 800c87e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	683a      	ldr	r2, [r7, #0]
 800c890:	430a      	orrs	r2, r1
 800c892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 f811 	bl	800c8bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2220      	movs	r2, #32
 800c8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d108      	bne.n	800c8de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c8dc:	e031      	b.n	800c942 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c8de:	2310      	movs	r3, #16
 800c8e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c8e2:	2310      	movs	r3, #16
 800c8e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	0e5b      	lsrs	r3, r3, #25
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	f003 0307 	and.w	r3, r3, #7
 800c8f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	0f5b      	lsrs	r3, r3, #29
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	f003 0307 	and.w	r3, r3, #7
 800c904:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c906:	7bbb      	ldrb	r3, [r7, #14]
 800c908:	7b3a      	ldrb	r2, [r7, #12]
 800c90a:	4911      	ldr	r1, [pc, #68]	; (800c950 <UARTEx_SetNbDataToProcess+0x94>)
 800c90c:	5c8a      	ldrb	r2, [r1, r2]
 800c90e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c912:	7b3a      	ldrb	r2, [r7, #12]
 800c914:	490f      	ldr	r1, [pc, #60]	; (800c954 <UARTEx_SetNbDataToProcess+0x98>)
 800c916:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c918:	fb93 f3f2 	sdiv	r3, r3, r2
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	7b7a      	ldrb	r2, [r7, #13]
 800c928:	4909      	ldr	r1, [pc, #36]	; (800c950 <UARTEx_SetNbDataToProcess+0x94>)
 800c92a:	5c8a      	ldrb	r2, [r1, r2]
 800c92c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c930:	7b7a      	ldrb	r2, [r7, #13]
 800c932:	4908      	ldr	r1, [pc, #32]	; (800c954 <UARTEx_SetNbDataToProcess+0x98>)
 800c934:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c936:	fb93 f3f2 	sdiv	r3, r3, r2
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c942:	bf00      	nop
 800c944:	3714      	adds	r7, #20
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	0800d9e0 	.word	0x0800d9e0
 800c954:	0800d9e8 	.word	0x0800d9e8

0800c958 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c958:	b084      	sub	sp, #16
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	f107 001c 	add.w	r0, r7, #28
 800c966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d120      	bne.n	800c9b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	68da      	ldr	r2, [r3, #12]
 800c980:	4b2a      	ldr	r3, [pc, #168]	; (800ca2c <USB_CoreInit+0xd4>)
 800c982:	4013      	ands	r3, r2
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c996:	2b01      	cmp	r3, #1
 800c998:	d105      	bne.n	800c9a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 f914 	bl	800cbd4 <USB_CoreReset>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73fb      	strb	r3, [r7, #15]
 800c9b0:	e01a      	b.n	800c9e8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 f908 	bl	800cbd4 <USB_CoreReset>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c9c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	639a      	str	r2, [r3, #56]	; 0x38
 800c9da:	e005      	b.n	800c9e8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d116      	bne.n	800ca1c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c9fc:	4b0c      	ldr	r3, [pc, #48]	; (800ca30 <USB_CoreInit+0xd8>)
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f043 0206 	orr.w	r2, r3, #6
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	f043 0220 	orr.w	r2, r3, #32
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ca1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca28:	b004      	add	sp, #16
 800ca2a:	4770      	bx	lr
 800ca2c:	ffbdffbf 	.word	0xffbdffbf
 800ca30:	03ee0000 	.word	0x03ee0000

0800ca34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	f023 0201 	bic.w	r2, r3, #1
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b084      	sub	sp, #16
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	460b      	mov	r3, r1
 800ca60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca72:	78fb      	ldrb	r3, [r7, #3]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d115      	bne.n	800caa4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ca84:	2001      	movs	r0, #1
 800ca86:	f7f9 f93d 	bl	8005d04 <HAL_Delay>
      ms++;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f891 	bl	800cbb8 <USB_GetMode>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d01e      	beq.n	800cada <USB_SetCurrentMode+0x84>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2b31      	cmp	r3, #49	; 0x31
 800caa0:	d9f0      	bls.n	800ca84 <USB_SetCurrentMode+0x2e>
 800caa2:	e01a      	b.n	800cada <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800caa4:	78fb      	ldrb	r3, [r7, #3]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d115      	bne.n	800cad6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cab6:	2001      	movs	r0, #1
 800cab8:	f7f9 f924 	bl	8005d04 <HAL_Delay>
      ms++;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	3301      	adds	r3, #1
 800cac0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f878 	bl	800cbb8 <USB_GetMode>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d005      	beq.n	800cada <USB_SetCurrentMode+0x84>
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2b31      	cmp	r3, #49	; 0x31
 800cad2:	d9f0      	bls.n	800cab6 <USB_SetCurrentMode+0x60>
 800cad4:	e001      	b.n	800cada <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	e005      	b.n	800cae6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2b32      	cmp	r3, #50	; 0x32
 800cade:	d101      	bne.n	800cae4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e000      	b.n	800cae6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
	...

0800caf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	3301      	adds	r3, #1
 800cb02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	4a13      	ldr	r2, [pc, #76]	; (800cb54 <USB_FlushTxFifo+0x64>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d901      	bls.n	800cb10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cb0c:	2303      	movs	r3, #3
 800cb0e:	e01b      	b.n	800cb48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	691b      	ldr	r3, [r3, #16]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	daf2      	bge.n	800cafe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	019b      	lsls	r3, r3, #6
 800cb20:	f043 0220 	orr.w	r2, r3, #32
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	4a08      	ldr	r2, [pc, #32]	; (800cb54 <USB_FlushTxFifo+0x64>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d901      	bls.n	800cb3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cb36:	2303      	movs	r3, #3
 800cb38:	e006      	b.n	800cb48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	f003 0320 	and.w	r3, r3, #32
 800cb42:	2b20      	cmp	r3, #32
 800cb44:	d0f0      	beq.n	800cb28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3714      	adds	r7, #20
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	00030d40 	.word	0x00030d40

0800cb58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb60:	2300      	movs	r3, #0
 800cb62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	3301      	adds	r3, #1
 800cb68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	4a11      	ldr	r2, [pc, #68]	; (800cbb4 <USB_FlushRxFifo+0x5c>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d901      	bls.n	800cb76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cb72:	2303      	movs	r3, #3
 800cb74:	e018      	b.n	800cba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	daf2      	bge.n	800cb64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2210      	movs	r2, #16
 800cb86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	4a08      	ldr	r2, [pc, #32]	; (800cbb4 <USB_FlushRxFifo+0x5c>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d901      	bls.n	800cb9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e006      	b.n	800cba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	f003 0310 	and.w	r3, r3, #16
 800cba2:	2b10      	cmp	r3, #16
 800cba4:	d0f0      	beq.n	800cb88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3714      	adds	r7, #20
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	00030d40 	.word	0x00030d40

0800cbb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	f003 0301 	and.w	r3, r3, #1
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	4a13      	ldr	r2, [pc, #76]	; (800cc38 <USB_CoreReset+0x64>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d901      	bls.n	800cbf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cbee:	2303      	movs	r3, #3
 800cbf0:	e01b      	b.n	800cc2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	daf2      	bge.n	800cbe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	f043 0201 	orr.w	r2, r3, #1
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	4a09      	ldr	r2, [pc, #36]	; (800cc38 <USB_CoreReset+0x64>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d901      	bls.n	800cc1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e006      	b.n	800cc2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	f003 0301 	and.w	r3, r3, #1
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d0f0      	beq.n	800cc0a <USB_CoreReset+0x36>

  return HAL_OK;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3714      	adds	r7, #20
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	00030d40 	.word	0x00030d40

0800cc3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc3c:	b084      	sub	sp, #16
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b086      	sub	sp, #24
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cc4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	2300      	movs	r3, #0
 800cc60:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d018      	beq.n	800ccb8 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d10a      	bne.n	800cca2 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc9a:	f043 0304 	orr.w	r3, r3, #4
 800cc9e:	6013      	str	r3, [r2, #0]
 800cca0:	e014      	b.n	800cccc <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ccb0:	f023 0304 	bic.w	r3, r3, #4
 800ccb4:	6013      	str	r3, [r2, #0]
 800ccb6:	e009      	b.n	800cccc <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ccc6:	f023 0304 	bic.w	r3, r3, #4
 800ccca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cccc:	2110      	movs	r1, #16
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7ff ff0e 	bl	800caf0 <USB_FlushTxFifo>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7ff ff3a 	bl	800cb58 <USB_FlushRxFifo>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d001      	beq.n	800ccee <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 800ccea:	2301      	movs	r3, #1
 800ccec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ccee:	2300      	movs	r3, #0
 800ccf0:	613b      	str	r3, [r7, #16]
 800ccf2:	e015      	b.n	800cd20 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	015a      	lsls	r2, r3, #5
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd00:	461a      	mov	r2, r3
 800cd02:	f04f 33ff 	mov.w	r3, #4294967295
 800cd06:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	015a      	lsls	r2, r3, #5
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	4413      	add	r3, r2
 800cd10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd14:	461a      	mov	r2, r3
 800cd16:	2300      	movs	r3, #0
 800cd18:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	613b      	str	r3, [r7, #16]
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	693a      	ldr	r2, [r7, #16]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d3e5      	bcc.n	800ccf4 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f04f 32ff 	mov.w	r2, #4294967295
 800cd34:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00b      	beq.n	800cd5a <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd48:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4a13      	ldr	r2, [pc, #76]	; (800cd9c <USB_HostInit+0x160>)
 800cd4e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4a13      	ldr	r2, [pc, #76]	; (800cda0 <USB_HostInit+0x164>)
 800cd54:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cd58:	e009      	b.n	800cd6e <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2280      	movs	r2, #128	; 0x80
 800cd5e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4a10      	ldr	r2, [pc, #64]	; (800cda4 <USB_HostInit+0x168>)
 800cd64:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a0f      	ldr	r2, [pc, #60]	; (800cda8 <USB_HostInit+0x16c>)
 800cd6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d105      	bne.n	800cd80 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	699b      	ldr	r3, [r3, #24]
 800cd78:	f043 0210 	orr.w	r2, r3, #16
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	699a      	ldr	r2, [r3, #24]
 800cd84:	4b09      	ldr	r3, [pc, #36]	; (800cdac <USB_HostInit+0x170>)
 800cd86:	4313      	orrs	r3, r2
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800cd8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3718      	adds	r7, #24
 800cd92:	46bd      	mov	sp, r7
 800cd94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd98:	b004      	add	sp, #16
 800cd9a:	4770      	bx	lr
 800cd9c:	01000200 	.word	0x01000200
 800cda0:	00e00300 	.word	0x00e00300
 800cda4:	00600080 	.word	0x00600080
 800cda8:	004000e0 	.word	0x004000e0
 800cdac:	a3200008 	.word	0xa3200008

0800cdb0 <__libc_init_array>:
 800cdb0:	b570      	push	{r4, r5, r6, lr}
 800cdb2:	4d0d      	ldr	r5, [pc, #52]	; (800cde8 <__libc_init_array+0x38>)
 800cdb4:	4c0d      	ldr	r4, [pc, #52]	; (800cdec <__libc_init_array+0x3c>)
 800cdb6:	1b64      	subs	r4, r4, r5
 800cdb8:	10a4      	asrs	r4, r4, #2
 800cdba:	2600      	movs	r6, #0
 800cdbc:	42a6      	cmp	r6, r4
 800cdbe:	d109      	bne.n	800cdd4 <__libc_init_array+0x24>
 800cdc0:	4d0b      	ldr	r5, [pc, #44]	; (800cdf0 <__libc_init_array+0x40>)
 800cdc2:	4c0c      	ldr	r4, [pc, #48]	; (800cdf4 <__libc_init_array+0x44>)
 800cdc4:	f000 fcac 	bl	800d720 <_init>
 800cdc8:	1b64      	subs	r4, r4, r5
 800cdca:	10a4      	asrs	r4, r4, #2
 800cdcc:	2600      	movs	r6, #0
 800cdce:	42a6      	cmp	r6, r4
 800cdd0:	d105      	bne.n	800cdde <__libc_init_array+0x2e>
 800cdd2:	bd70      	pop	{r4, r5, r6, pc}
 800cdd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdd8:	4798      	blx	r3
 800cdda:	3601      	adds	r6, #1
 800cddc:	e7ee      	b.n	800cdbc <__libc_init_array+0xc>
 800cdde:	f855 3b04 	ldr.w	r3, [r5], #4
 800cde2:	4798      	blx	r3
 800cde4:	3601      	adds	r6, #1
 800cde6:	e7f2      	b.n	800cdce <__libc_init_array+0x1e>
 800cde8:	0800da2c 	.word	0x0800da2c
 800cdec:	0800da2c 	.word	0x0800da2c
 800cdf0:	0800da2c 	.word	0x0800da2c
 800cdf4:	0800da30 	.word	0x0800da30

0800cdf8 <memcmp>:
 800cdf8:	b510      	push	{r4, lr}
 800cdfa:	3901      	subs	r1, #1
 800cdfc:	4402      	add	r2, r0
 800cdfe:	4290      	cmp	r0, r2
 800ce00:	d101      	bne.n	800ce06 <memcmp+0xe>
 800ce02:	2000      	movs	r0, #0
 800ce04:	e005      	b.n	800ce12 <memcmp+0x1a>
 800ce06:	7803      	ldrb	r3, [r0, #0]
 800ce08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	d001      	beq.n	800ce14 <memcmp+0x1c>
 800ce10:	1b18      	subs	r0, r3, r4
 800ce12:	bd10      	pop	{r4, pc}
 800ce14:	3001      	adds	r0, #1
 800ce16:	e7f2      	b.n	800cdfe <memcmp+0x6>

0800ce18 <memcpy>:
 800ce18:	440a      	add	r2, r1
 800ce1a:	4291      	cmp	r1, r2
 800ce1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce20:	d100      	bne.n	800ce24 <memcpy+0xc>
 800ce22:	4770      	bx	lr
 800ce24:	b510      	push	{r4, lr}
 800ce26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce2e:	4291      	cmp	r1, r2
 800ce30:	d1f9      	bne.n	800ce26 <memcpy+0xe>
 800ce32:	bd10      	pop	{r4, pc}

0800ce34 <memset>:
 800ce34:	4402      	add	r2, r0
 800ce36:	4603      	mov	r3, r0
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d100      	bne.n	800ce3e <memset+0xa>
 800ce3c:	4770      	bx	lr
 800ce3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ce42:	e7f9      	b.n	800ce38 <memset+0x4>

0800ce44 <siprintf>:
 800ce44:	b40e      	push	{r1, r2, r3}
 800ce46:	b500      	push	{lr}
 800ce48:	b09c      	sub	sp, #112	; 0x70
 800ce4a:	ab1d      	add	r3, sp, #116	; 0x74
 800ce4c:	9002      	str	r0, [sp, #8]
 800ce4e:	9006      	str	r0, [sp, #24]
 800ce50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce54:	4809      	ldr	r0, [pc, #36]	; (800ce7c <siprintf+0x38>)
 800ce56:	9107      	str	r1, [sp, #28]
 800ce58:	9104      	str	r1, [sp, #16]
 800ce5a:	4909      	ldr	r1, [pc, #36]	; (800ce80 <siprintf+0x3c>)
 800ce5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce60:	9105      	str	r1, [sp, #20]
 800ce62:	6800      	ldr	r0, [r0, #0]
 800ce64:	9301      	str	r3, [sp, #4]
 800ce66:	a902      	add	r1, sp, #8
 800ce68:	f000 f868 	bl	800cf3c <_svfiprintf_r>
 800ce6c:	9b02      	ldr	r3, [sp, #8]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	701a      	strb	r2, [r3, #0]
 800ce72:	b01c      	add	sp, #112	; 0x70
 800ce74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce78:	b003      	add	sp, #12
 800ce7a:	4770      	bx	lr
 800ce7c:	24000030 	.word	0x24000030
 800ce80:	ffff0208 	.word	0xffff0208

0800ce84 <__ssputs_r>:
 800ce84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce88:	688e      	ldr	r6, [r1, #8]
 800ce8a:	429e      	cmp	r6, r3
 800ce8c:	4682      	mov	sl, r0
 800ce8e:	460c      	mov	r4, r1
 800ce90:	4690      	mov	r8, r2
 800ce92:	461f      	mov	r7, r3
 800ce94:	d838      	bhi.n	800cf08 <__ssputs_r+0x84>
 800ce96:	898a      	ldrh	r2, [r1, #12]
 800ce98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce9c:	d032      	beq.n	800cf04 <__ssputs_r+0x80>
 800ce9e:	6825      	ldr	r5, [r4, #0]
 800cea0:	6909      	ldr	r1, [r1, #16]
 800cea2:	eba5 0901 	sub.w	r9, r5, r1
 800cea6:	6965      	ldr	r5, [r4, #20]
 800cea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ceac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	444b      	add	r3, r9
 800ceb4:	106d      	asrs	r5, r5, #1
 800ceb6:	429d      	cmp	r5, r3
 800ceb8:	bf38      	it	cc
 800ceba:	461d      	movcc	r5, r3
 800cebc:	0553      	lsls	r3, r2, #21
 800cebe:	d531      	bpl.n	800cf24 <__ssputs_r+0xa0>
 800cec0:	4629      	mov	r1, r5
 800cec2:	f000 fb55 	bl	800d570 <_malloc_r>
 800cec6:	4606      	mov	r6, r0
 800cec8:	b950      	cbnz	r0, 800cee0 <__ssputs_r+0x5c>
 800ceca:	230c      	movs	r3, #12
 800cecc:	f8ca 3000 	str.w	r3, [sl]
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ced6:	81a3      	strh	r3, [r4, #12]
 800ced8:	f04f 30ff 	mov.w	r0, #4294967295
 800cedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee0:	6921      	ldr	r1, [r4, #16]
 800cee2:	464a      	mov	r2, r9
 800cee4:	f7ff ff98 	bl	800ce18 <memcpy>
 800cee8:	89a3      	ldrh	r3, [r4, #12]
 800ceea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ceee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cef2:	81a3      	strh	r3, [r4, #12]
 800cef4:	6126      	str	r6, [r4, #16]
 800cef6:	6165      	str	r5, [r4, #20]
 800cef8:	444e      	add	r6, r9
 800cefa:	eba5 0509 	sub.w	r5, r5, r9
 800cefe:	6026      	str	r6, [r4, #0]
 800cf00:	60a5      	str	r5, [r4, #8]
 800cf02:	463e      	mov	r6, r7
 800cf04:	42be      	cmp	r6, r7
 800cf06:	d900      	bls.n	800cf0a <__ssputs_r+0x86>
 800cf08:	463e      	mov	r6, r7
 800cf0a:	6820      	ldr	r0, [r4, #0]
 800cf0c:	4632      	mov	r2, r6
 800cf0e:	4641      	mov	r1, r8
 800cf10:	f000 faa8 	bl	800d464 <memmove>
 800cf14:	68a3      	ldr	r3, [r4, #8]
 800cf16:	1b9b      	subs	r3, r3, r6
 800cf18:	60a3      	str	r3, [r4, #8]
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	4433      	add	r3, r6
 800cf1e:	6023      	str	r3, [r4, #0]
 800cf20:	2000      	movs	r0, #0
 800cf22:	e7db      	b.n	800cedc <__ssputs_r+0x58>
 800cf24:	462a      	mov	r2, r5
 800cf26:	f000 fb97 	bl	800d658 <_realloc_r>
 800cf2a:	4606      	mov	r6, r0
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d1e1      	bne.n	800cef4 <__ssputs_r+0x70>
 800cf30:	6921      	ldr	r1, [r4, #16]
 800cf32:	4650      	mov	r0, sl
 800cf34:	f000 fab0 	bl	800d498 <_free_r>
 800cf38:	e7c7      	b.n	800ceca <__ssputs_r+0x46>
	...

0800cf3c <_svfiprintf_r>:
 800cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf40:	4698      	mov	r8, r3
 800cf42:	898b      	ldrh	r3, [r1, #12]
 800cf44:	061b      	lsls	r3, r3, #24
 800cf46:	b09d      	sub	sp, #116	; 0x74
 800cf48:	4607      	mov	r7, r0
 800cf4a:	460d      	mov	r5, r1
 800cf4c:	4614      	mov	r4, r2
 800cf4e:	d50e      	bpl.n	800cf6e <_svfiprintf_r+0x32>
 800cf50:	690b      	ldr	r3, [r1, #16]
 800cf52:	b963      	cbnz	r3, 800cf6e <_svfiprintf_r+0x32>
 800cf54:	2140      	movs	r1, #64	; 0x40
 800cf56:	f000 fb0b 	bl	800d570 <_malloc_r>
 800cf5a:	6028      	str	r0, [r5, #0]
 800cf5c:	6128      	str	r0, [r5, #16]
 800cf5e:	b920      	cbnz	r0, 800cf6a <_svfiprintf_r+0x2e>
 800cf60:	230c      	movs	r3, #12
 800cf62:	603b      	str	r3, [r7, #0]
 800cf64:	f04f 30ff 	mov.w	r0, #4294967295
 800cf68:	e0d1      	b.n	800d10e <_svfiprintf_r+0x1d2>
 800cf6a:	2340      	movs	r3, #64	; 0x40
 800cf6c:	616b      	str	r3, [r5, #20]
 800cf6e:	2300      	movs	r3, #0
 800cf70:	9309      	str	r3, [sp, #36]	; 0x24
 800cf72:	2320      	movs	r3, #32
 800cf74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf78:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf7c:	2330      	movs	r3, #48	; 0x30
 800cf7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d128 <_svfiprintf_r+0x1ec>
 800cf82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf86:	f04f 0901 	mov.w	r9, #1
 800cf8a:	4623      	mov	r3, r4
 800cf8c:	469a      	mov	sl, r3
 800cf8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf92:	b10a      	cbz	r2, 800cf98 <_svfiprintf_r+0x5c>
 800cf94:	2a25      	cmp	r2, #37	; 0x25
 800cf96:	d1f9      	bne.n	800cf8c <_svfiprintf_r+0x50>
 800cf98:	ebba 0b04 	subs.w	fp, sl, r4
 800cf9c:	d00b      	beq.n	800cfb6 <_svfiprintf_r+0x7a>
 800cf9e:	465b      	mov	r3, fp
 800cfa0:	4622      	mov	r2, r4
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	f7ff ff6d 	bl	800ce84 <__ssputs_r>
 800cfaa:	3001      	adds	r0, #1
 800cfac:	f000 80aa 	beq.w	800d104 <_svfiprintf_r+0x1c8>
 800cfb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfb2:	445a      	add	r2, fp
 800cfb4:	9209      	str	r2, [sp, #36]	; 0x24
 800cfb6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f000 80a2 	beq.w	800d104 <_svfiprintf_r+0x1c8>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cfc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfca:	f10a 0a01 	add.w	sl, sl, #1
 800cfce:	9304      	str	r3, [sp, #16]
 800cfd0:	9307      	str	r3, [sp, #28]
 800cfd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfd6:	931a      	str	r3, [sp, #104]	; 0x68
 800cfd8:	4654      	mov	r4, sl
 800cfda:	2205      	movs	r2, #5
 800cfdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe0:	4851      	ldr	r0, [pc, #324]	; (800d128 <_svfiprintf_r+0x1ec>)
 800cfe2:	f7f3 f9d5 	bl	8000390 <memchr>
 800cfe6:	9a04      	ldr	r2, [sp, #16]
 800cfe8:	b9d8      	cbnz	r0, 800d022 <_svfiprintf_r+0xe6>
 800cfea:	06d0      	lsls	r0, r2, #27
 800cfec:	bf44      	itt	mi
 800cfee:	2320      	movmi	r3, #32
 800cff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cff4:	0711      	lsls	r1, r2, #28
 800cff6:	bf44      	itt	mi
 800cff8:	232b      	movmi	r3, #43	; 0x2b
 800cffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cffe:	f89a 3000 	ldrb.w	r3, [sl]
 800d002:	2b2a      	cmp	r3, #42	; 0x2a
 800d004:	d015      	beq.n	800d032 <_svfiprintf_r+0xf6>
 800d006:	9a07      	ldr	r2, [sp, #28]
 800d008:	4654      	mov	r4, sl
 800d00a:	2000      	movs	r0, #0
 800d00c:	f04f 0c0a 	mov.w	ip, #10
 800d010:	4621      	mov	r1, r4
 800d012:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d016:	3b30      	subs	r3, #48	; 0x30
 800d018:	2b09      	cmp	r3, #9
 800d01a:	d94e      	bls.n	800d0ba <_svfiprintf_r+0x17e>
 800d01c:	b1b0      	cbz	r0, 800d04c <_svfiprintf_r+0x110>
 800d01e:	9207      	str	r2, [sp, #28]
 800d020:	e014      	b.n	800d04c <_svfiprintf_r+0x110>
 800d022:	eba0 0308 	sub.w	r3, r0, r8
 800d026:	fa09 f303 	lsl.w	r3, r9, r3
 800d02a:	4313      	orrs	r3, r2
 800d02c:	9304      	str	r3, [sp, #16]
 800d02e:	46a2      	mov	sl, r4
 800d030:	e7d2      	b.n	800cfd8 <_svfiprintf_r+0x9c>
 800d032:	9b03      	ldr	r3, [sp, #12]
 800d034:	1d19      	adds	r1, r3, #4
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	9103      	str	r1, [sp, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	bfbb      	ittet	lt
 800d03e:	425b      	neglt	r3, r3
 800d040:	f042 0202 	orrlt.w	r2, r2, #2
 800d044:	9307      	strge	r3, [sp, #28]
 800d046:	9307      	strlt	r3, [sp, #28]
 800d048:	bfb8      	it	lt
 800d04a:	9204      	strlt	r2, [sp, #16]
 800d04c:	7823      	ldrb	r3, [r4, #0]
 800d04e:	2b2e      	cmp	r3, #46	; 0x2e
 800d050:	d10c      	bne.n	800d06c <_svfiprintf_r+0x130>
 800d052:	7863      	ldrb	r3, [r4, #1]
 800d054:	2b2a      	cmp	r3, #42	; 0x2a
 800d056:	d135      	bne.n	800d0c4 <_svfiprintf_r+0x188>
 800d058:	9b03      	ldr	r3, [sp, #12]
 800d05a:	1d1a      	adds	r2, r3, #4
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	9203      	str	r2, [sp, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	bfb8      	it	lt
 800d064:	f04f 33ff 	movlt.w	r3, #4294967295
 800d068:	3402      	adds	r4, #2
 800d06a:	9305      	str	r3, [sp, #20]
 800d06c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d138 <_svfiprintf_r+0x1fc>
 800d070:	7821      	ldrb	r1, [r4, #0]
 800d072:	2203      	movs	r2, #3
 800d074:	4650      	mov	r0, sl
 800d076:	f7f3 f98b 	bl	8000390 <memchr>
 800d07a:	b140      	cbz	r0, 800d08e <_svfiprintf_r+0x152>
 800d07c:	2340      	movs	r3, #64	; 0x40
 800d07e:	eba0 000a 	sub.w	r0, r0, sl
 800d082:	fa03 f000 	lsl.w	r0, r3, r0
 800d086:	9b04      	ldr	r3, [sp, #16]
 800d088:	4303      	orrs	r3, r0
 800d08a:	3401      	adds	r4, #1
 800d08c:	9304      	str	r3, [sp, #16]
 800d08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d092:	4826      	ldr	r0, [pc, #152]	; (800d12c <_svfiprintf_r+0x1f0>)
 800d094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d098:	2206      	movs	r2, #6
 800d09a:	f7f3 f979 	bl	8000390 <memchr>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d038      	beq.n	800d114 <_svfiprintf_r+0x1d8>
 800d0a2:	4b23      	ldr	r3, [pc, #140]	; (800d130 <_svfiprintf_r+0x1f4>)
 800d0a4:	bb1b      	cbnz	r3, 800d0ee <_svfiprintf_r+0x1b2>
 800d0a6:	9b03      	ldr	r3, [sp, #12]
 800d0a8:	3307      	adds	r3, #7
 800d0aa:	f023 0307 	bic.w	r3, r3, #7
 800d0ae:	3308      	adds	r3, #8
 800d0b0:	9303      	str	r3, [sp, #12]
 800d0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0b4:	4433      	add	r3, r6
 800d0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b8:	e767      	b.n	800cf8a <_svfiprintf_r+0x4e>
 800d0ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0be:	460c      	mov	r4, r1
 800d0c0:	2001      	movs	r0, #1
 800d0c2:	e7a5      	b.n	800d010 <_svfiprintf_r+0xd4>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	3401      	adds	r4, #1
 800d0c8:	9305      	str	r3, [sp, #20]
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	f04f 0c0a 	mov.w	ip, #10
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0d6:	3a30      	subs	r2, #48	; 0x30
 800d0d8:	2a09      	cmp	r2, #9
 800d0da:	d903      	bls.n	800d0e4 <_svfiprintf_r+0x1a8>
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d0c5      	beq.n	800d06c <_svfiprintf_r+0x130>
 800d0e0:	9105      	str	r1, [sp, #20]
 800d0e2:	e7c3      	b.n	800d06c <_svfiprintf_r+0x130>
 800d0e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e7f0      	b.n	800d0d0 <_svfiprintf_r+0x194>
 800d0ee:	ab03      	add	r3, sp, #12
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	462a      	mov	r2, r5
 800d0f4:	4b0f      	ldr	r3, [pc, #60]	; (800d134 <_svfiprintf_r+0x1f8>)
 800d0f6:	a904      	add	r1, sp, #16
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	f3af 8000 	nop.w
 800d0fe:	1c42      	adds	r2, r0, #1
 800d100:	4606      	mov	r6, r0
 800d102:	d1d6      	bne.n	800d0b2 <_svfiprintf_r+0x176>
 800d104:	89ab      	ldrh	r3, [r5, #12]
 800d106:	065b      	lsls	r3, r3, #25
 800d108:	f53f af2c 	bmi.w	800cf64 <_svfiprintf_r+0x28>
 800d10c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d10e:	b01d      	add	sp, #116	; 0x74
 800d110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d114:	ab03      	add	r3, sp, #12
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	462a      	mov	r2, r5
 800d11a:	4b06      	ldr	r3, [pc, #24]	; (800d134 <_svfiprintf_r+0x1f8>)
 800d11c:	a904      	add	r1, sp, #16
 800d11e:	4638      	mov	r0, r7
 800d120:	f000 f87a 	bl	800d218 <_printf_i>
 800d124:	e7eb      	b.n	800d0fe <_svfiprintf_r+0x1c2>
 800d126:	bf00      	nop
 800d128:	0800d9f0 	.word	0x0800d9f0
 800d12c:	0800d9fa 	.word	0x0800d9fa
 800d130:	00000000 	.word	0x00000000
 800d134:	0800ce85 	.word	0x0800ce85
 800d138:	0800d9f6 	.word	0x0800d9f6

0800d13c <_printf_common>:
 800d13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d140:	4616      	mov	r6, r2
 800d142:	4699      	mov	r9, r3
 800d144:	688a      	ldr	r2, [r1, #8]
 800d146:	690b      	ldr	r3, [r1, #16]
 800d148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d14c:	4293      	cmp	r3, r2
 800d14e:	bfb8      	it	lt
 800d150:	4613      	movlt	r3, r2
 800d152:	6033      	str	r3, [r6, #0]
 800d154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d158:	4607      	mov	r7, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	b10a      	cbz	r2, 800d162 <_printf_common+0x26>
 800d15e:	3301      	adds	r3, #1
 800d160:	6033      	str	r3, [r6, #0]
 800d162:	6823      	ldr	r3, [r4, #0]
 800d164:	0699      	lsls	r1, r3, #26
 800d166:	bf42      	ittt	mi
 800d168:	6833      	ldrmi	r3, [r6, #0]
 800d16a:	3302      	addmi	r3, #2
 800d16c:	6033      	strmi	r3, [r6, #0]
 800d16e:	6825      	ldr	r5, [r4, #0]
 800d170:	f015 0506 	ands.w	r5, r5, #6
 800d174:	d106      	bne.n	800d184 <_printf_common+0x48>
 800d176:	f104 0a19 	add.w	sl, r4, #25
 800d17a:	68e3      	ldr	r3, [r4, #12]
 800d17c:	6832      	ldr	r2, [r6, #0]
 800d17e:	1a9b      	subs	r3, r3, r2
 800d180:	42ab      	cmp	r3, r5
 800d182:	dc26      	bgt.n	800d1d2 <_printf_common+0x96>
 800d184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d188:	1e13      	subs	r3, r2, #0
 800d18a:	6822      	ldr	r2, [r4, #0]
 800d18c:	bf18      	it	ne
 800d18e:	2301      	movne	r3, #1
 800d190:	0692      	lsls	r2, r2, #26
 800d192:	d42b      	bmi.n	800d1ec <_printf_common+0xb0>
 800d194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d198:	4649      	mov	r1, r9
 800d19a:	4638      	mov	r0, r7
 800d19c:	47c0      	blx	r8
 800d19e:	3001      	adds	r0, #1
 800d1a0:	d01e      	beq.n	800d1e0 <_printf_common+0xa4>
 800d1a2:	6823      	ldr	r3, [r4, #0]
 800d1a4:	68e5      	ldr	r5, [r4, #12]
 800d1a6:	6832      	ldr	r2, [r6, #0]
 800d1a8:	f003 0306 	and.w	r3, r3, #6
 800d1ac:	2b04      	cmp	r3, #4
 800d1ae:	bf08      	it	eq
 800d1b0:	1aad      	subeq	r5, r5, r2
 800d1b2:	68a3      	ldr	r3, [r4, #8]
 800d1b4:	6922      	ldr	r2, [r4, #16]
 800d1b6:	bf0c      	ite	eq
 800d1b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1bc:	2500      	movne	r5, #0
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	bfc4      	itt	gt
 800d1c2:	1a9b      	subgt	r3, r3, r2
 800d1c4:	18ed      	addgt	r5, r5, r3
 800d1c6:	2600      	movs	r6, #0
 800d1c8:	341a      	adds	r4, #26
 800d1ca:	42b5      	cmp	r5, r6
 800d1cc:	d11a      	bne.n	800d204 <_printf_common+0xc8>
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	e008      	b.n	800d1e4 <_printf_common+0xa8>
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	4652      	mov	r2, sl
 800d1d6:	4649      	mov	r1, r9
 800d1d8:	4638      	mov	r0, r7
 800d1da:	47c0      	blx	r8
 800d1dc:	3001      	adds	r0, #1
 800d1de:	d103      	bne.n	800d1e8 <_printf_common+0xac>
 800d1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e8:	3501      	adds	r5, #1
 800d1ea:	e7c6      	b.n	800d17a <_printf_common+0x3e>
 800d1ec:	18e1      	adds	r1, r4, r3
 800d1ee:	1c5a      	adds	r2, r3, #1
 800d1f0:	2030      	movs	r0, #48	; 0x30
 800d1f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1f6:	4422      	add	r2, r4
 800d1f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d200:	3302      	adds	r3, #2
 800d202:	e7c7      	b.n	800d194 <_printf_common+0x58>
 800d204:	2301      	movs	r3, #1
 800d206:	4622      	mov	r2, r4
 800d208:	4649      	mov	r1, r9
 800d20a:	4638      	mov	r0, r7
 800d20c:	47c0      	blx	r8
 800d20e:	3001      	adds	r0, #1
 800d210:	d0e6      	beq.n	800d1e0 <_printf_common+0xa4>
 800d212:	3601      	adds	r6, #1
 800d214:	e7d9      	b.n	800d1ca <_printf_common+0x8e>
	...

0800d218 <_printf_i>:
 800d218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d21c:	7e0f      	ldrb	r7, [r1, #24]
 800d21e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d220:	2f78      	cmp	r7, #120	; 0x78
 800d222:	4691      	mov	r9, r2
 800d224:	4680      	mov	r8, r0
 800d226:	460c      	mov	r4, r1
 800d228:	469a      	mov	sl, r3
 800d22a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d22e:	d807      	bhi.n	800d240 <_printf_i+0x28>
 800d230:	2f62      	cmp	r7, #98	; 0x62
 800d232:	d80a      	bhi.n	800d24a <_printf_i+0x32>
 800d234:	2f00      	cmp	r7, #0
 800d236:	f000 80d8 	beq.w	800d3ea <_printf_i+0x1d2>
 800d23a:	2f58      	cmp	r7, #88	; 0x58
 800d23c:	f000 80a3 	beq.w	800d386 <_printf_i+0x16e>
 800d240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d248:	e03a      	b.n	800d2c0 <_printf_i+0xa8>
 800d24a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d24e:	2b15      	cmp	r3, #21
 800d250:	d8f6      	bhi.n	800d240 <_printf_i+0x28>
 800d252:	a101      	add	r1, pc, #4	; (adr r1, 800d258 <_printf_i+0x40>)
 800d254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d258:	0800d2b1 	.word	0x0800d2b1
 800d25c:	0800d2c5 	.word	0x0800d2c5
 800d260:	0800d241 	.word	0x0800d241
 800d264:	0800d241 	.word	0x0800d241
 800d268:	0800d241 	.word	0x0800d241
 800d26c:	0800d241 	.word	0x0800d241
 800d270:	0800d2c5 	.word	0x0800d2c5
 800d274:	0800d241 	.word	0x0800d241
 800d278:	0800d241 	.word	0x0800d241
 800d27c:	0800d241 	.word	0x0800d241
 800d280:	0800d241 	.word	0x0800d241
 800d284:	0800d3d1 	.word	0x0800d3d1
 800d288:	0800d2f5 	.word	0x0800d2f5
 800d28c:	0800d3b3 	.word	0x0800d3b3
 800d290:	0800d241 	.word	0x0800d241
 800d294:	0800d241 	.word	0x0800d241
 800d298:	0800d3f3 	.word	0x0800d3f3
 800d29c:	0800d241 	.word	0x0800d241
 800d2a0:	0800d2f5 	.word	0x0800d2f5
 800d2a4:	0800d241 	.word	0x0800d241
 800d2a8:	0800d241 	.word	0x0800d241
 800d2ac:	0800d3bb 	.word	0x0800d3bb
 800d2b0:	682b      	ldr	r3, [r5, #0]
 800d2b2:	1d1a      	adds	r2, r3, #4
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	602a      	str	r2, [r5, #0]
 800d2b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e0a3      	b.n	800d40c <_printf_i+0x1f4>
 800d2c4:	6820      	ldr	r0, [r4, #0]
 800d2c6:	6829      	ldr	r1, [r5, #0]
 800d2c8:	0606      	lsls	r6, r0, #24
 800d2ca:	f101 0304 	add.w	r3, r1, #4
 800d2ce:	d50a      	bpl.n	800d2e6 <_printf_i+0xce>
 800d2d0:	680e      	ldr	r6, [r1, #0]
 800d2d2:	602b      	str	r3, [r5, #0]
 800d2d4:	2e00      	cmp	r6, #0
 800d2d6:	da03      	bge.n	800d2e0 <_printf_i+0xc8>
 800d2d8:	232d      	movs	r3, #45	; 0x2d
 800d2da:	4276      	negs	r6, r6
 800d2dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2e0:	485e      	ldr	r0, [pc, #376]	; (800d45c <_printf_i+0x244>)
 800d2e2:	230a      	movs	r3, #10
 800d2e4:	e019      	b.n	800d31a <_printf_i+0x102>
 800d2e6:	680e      	ldr	r6, [r1, #0]
 800d2e8:	602b      	str	r3, [r5, #0]
 800d2ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2ee:	bf18      	it	ne
 800d2f0:	b236      	sxthne	r6, r6
 800d2f2:	e7ef      	b.n	800d2d4 <_printf_i+0xbc>
 800d2f4:	682b      	ldr	r3, [r5, #0]
 800d2f6:	6820      	ldr	r0, [r4, #0]
 800d2f8:	1d19      	adds	r1, r3, #4
 800d2fa:	6029      	str	r1, [r5, #0]
 800d2fc:	0601      	lsls	r1, r0, #24
 800d2fe:	d501      	bpl.n	800d304 <_printf_i+0xec>
 800d300:	681e      	ldr	r6, [r3, #0]
 800d302:	e002      	b.n	800d30a <_printf_i+0xf2>
 800d304:	0646      	lsls	r6, r0, #25
 800d306:	d5fb      	bpl.n	800d300 <_printf_i+0xe8>
 800d308:	881e      	ldrh	r6, [r3, #0]
 800d30a:	4854      	ldr	r0, [pc, #336]	; (800d45c <_printf_i+0x244>)
 800d30c:	2f6f      	cmp	r7, #111	; 0x6f
 800d30e:	bf0c      	ite	eq
 800d310:	2308      	moveq	r3, #8
 800d312:	230a      	movne	r3, #10
 800d314:	2100      	movs	r1, #0
 800d316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d31a:	6865      	ldr	r5, [r4, #4]
 800d31c:	60a5      	str	r5, [r4, #8]
 800d31e:	2d00      	cmp	r5, #0
 800d320:	bfa2      	ittt	ge
 800d322:	6821      	ldrge	r1, [r4, #0]
 800d324:	f021 0104 	bicge.w	r1, r1, #4
 800d328:	6021      	strge	r1, [r4, #0]
 800d32a:	b90e      	cbnz	r6, 800d330 <_printf_i+0x118>
 800d32c:	2d00      	cmp	r5, #0
 800d32e:	d04d      	beq.n	800d3cc <_printf_i+0x1b4>
 800d330:	4615      	mov	r5, r2
 800d332:	fbb6 f1f3 	udiv	r1, r6, r3
 800d336:	fb03 6711 	mls	r7, r3, r1, r6
 800d33a:	5dc7      	ldrb	r7, [r0, r7]
 800d33c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d340:	4637      	mov	r7, r6
 800d342:	42bb      	cmp	r3, r7
 800d344:	460e      	mov	r6, r1
 800d346:	d9f4      	bls.n	800d332 <_printf_i+0x11a>
 800d348:	2b08      	cmp	r3, #8
 800d34a:	d10b      	bne.n	800d364 <_printf_i+0x14c>
 800d34c:	6823      	ldr	r3, [r4, #0]
 800d34e:	07de      	lsls	r6, r3, #31
 800d350:	d508      	bpl.n	800d364 <_printf_i+0x14c>
 800d352:	6923      	ldr	r3, [r4, #16]
 800d354:	6861      	ldr	r1, [r4, #4]
 800d356:	4299      	cmp	r1, r3
 800d358:	bfde      	ittt	le
 800d35a:	2330      	movle	r3, #48	; 0x30
 800d35c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d360:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d364:	1b52      	subs	r2, r2, r5
 800d366:	6122      	str	r2, [r4, #16]
 800d368:	f8cd a000 	str.w	sl, [sp]
 800d36c:	464b      	mov	r3, r9
 800d36e:	aa03      	add	r2, sp, #12
 800d370:	4621      	mov	r1, r4
 800d372:	4640      	mov	r0, r8
 800d374:	f7ff fee2 	bl	800d13c <_printf_common>
 800d378:	3001      	adds	r0, #1
 800d37a:	d14c      	bne.n	800d416 <_printf_i+0x1fe>
 800d37c:	f04f 30ff 	mov.w	r0, #4294967295
 800d380:	b004      	add	sp, #16
 800d382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d386:	4835      	ldr	r0, [pc, #212]	; (800d45c <_printf_i+0x244>)
 800d388:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d38c:	6829      	ldr	r1, [r5, #0]
 800d38e:	6823      	ldr	r3, [r4, #0]
 800d390:	f851 6b04 	ldr.w	r6, [r1], #4
 800d394:	6029      	str	r1, [r5, #0]
 800d396:	061d      	lsls	r5, r3, #24
 800d398:	d514      	bpl.n	800d3c4 <_printf_i+0x1ac>
 800d39a:	07df      	lsls	r7, r3, #31
 800d39c:	bf44      	itt	mi
 800d39e:	f043 0320 	orrmi.w	r3, r3, #32
 800d3a2:	6023      	strmi	r3, [r4, #0]
 800d3a4:	b91e      	cbnz	r6, 800d3ae <_printf_i+0x196>
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	f023 0320 	bic.w	r3, r3, #32
 800d3ac:	6023      	str	r3, [r4, #0]
 800d3ae:	2310      	movs	r3, #16
 800d3b0:	e7b0      	b.n	800d314 <_printf_i+0xfc>
 800d3b2:	6823      	ldr	r3, [r4, #0]
 800d3b4:	f043 0320 	orr.w	r3, r3, #32
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	2378      	movs	r3, #120	; 0x78
 800d3bc:	4828      	ldr	r0, [pc, #160]	; (800d460 <_printf_i+0x248>)
 800d3be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3c2:	e7e3      	b.n	800d38c <_printf_i+0x174>
 800d3c4:	0659      	lsls	r1, r3, #25
 800d3c6:	bf48      	it	mi
 800d3c8:	b2b6      	uxthmi	r6, r6
 800d3ca:	e7e6      	b.n	800d39a <_printf_i+0x182>
 800d3cc:	4615      	mov	r5, r2
 800d3ce:	e7bb      	b.n	800d348 <_printf_i+0x130>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	6826      	ldr	r6, [r4, #0]
 800d3d4:	6961      	ldr	r1, [r4, #20]
 800d3d6:	1d18      	adds	r0, r3, #4
 800d3d8:	6028      	str	r0, [r5, #0]
 800d3da:	0635      	lsls	r5, r6, #24
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	d501      	bpl.n	800d3e4 <_printf_i+0x1cc>
 800d3e0:	6019      	str	r1, [r3, #0]
 800d3e2:	e002      	b.n	800d3ea <_printf_i+0x1d2>
 800d3e4:	0670      	lsls	r0, r6, #25
 800d3e6:	d5fb      	bpl.n	800d3e0 <_printf_i+0x1c8>
 800d3e8:	8019      	strh	r1, [r3, #0]
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	6123      	str	r3, [r4, #16]
 800d3ee:	4615      	mov	r5, r2
 800d3f0:	e7ba      	b.n	800d368 <_printf_i+0x150>
 800d3f2:	682b      	ldr	r3, [r5, #0]
 800d3f4:	1d1a      	adds	r2, r3, #4
 800d3f6:	602a      	str	r2, [r5, #0]
 800d3f8:	681d      	ldr	r5, [r3, #0]
 800d3fa:	6862      	ldr	r2, [r4, #4]
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	4628      	mov	r0, r5
 800d400:	f7f2 ffc6 	bl	8000390 <memchr>
 800d404:	b108      	cbz	r0, 800d40a <_printf_i+0x1f2>
 800d406:	1b40      	subs	r0, r0, r5
 800d408:	6060      	str	r0, [r4, #4]
 800d40a:	6863      	ldr	r3, [r4, #4]
 800d40c:	6123      	str	r3, [r4, #16]
 800d40e:	2300      	movs	r3, #0
 800d410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d414:	e7a8      	b.n	800d368 <_printf_i+0x150>
 800d416:	6923      	ldr	r3, [r4, #16]
 800d418:	462a      	mov	r2, r5
 800d41a:	4649      	mov	r1, r9
 800d41c:	4640      	mov	r0, r8
 800d41e:	47d0      	blx	sl
 800d420:	3001      	adds	r0, #1
 800d422:	d0ab      	beq.n	800d37c <_printf_i+0x164>
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	079b      	lsls	r3, r3, #30
 800d428:	d413      	bmi.n	800d452 <_printf_i+0x23a>
 800d42a:	68e0      	ldr	r0, [r4, #12]
 800d42c:	9b03      	ldr	r3, [sp, #12]
 800d42e:	4298      	cmp	r0, r3
 800d430:	bfb8      	it	lt
 800d432:	4618      	movlt	r0, r3
 800d434:	e7a4      	b.n	800d380 <_printf_i+0x168>
 800d436:	2301      	movs	r3, #1
 800d438:	4632      	mov	r2, r6
 800d43a:	4649      	mov	r1, r9
 800d43c:	4640      	mov	r0, r8
 800d43e:	47d0      	blx	sl
 800d440:	3001      	adds	r0, #1
 800d442:	d09b      	beq.n	800d37c <_printf_i+0x164>
 800d444:	3501      	adds	r5, #1
 800d446:	68e3      	ldr	r3, [r4, #12]
 800d448:	9903      	ldr	r1, [sp, #12]
 800d44a:	1a5b      	subs	r3, r3, r1
 800d44c:	42ab      	cmp	r3, r5
 800d44e:	dcf2      	bgt.n	800d436 <_printf_i+0x21e>
 800d450:	e7eb      	b.n	800d42a <_printf_i+0x212>
 800d452:	2500      	movs	r5, #0
 800d454:	f104 0619 	add.w	r6, r4, #25
 800d458:	e7f5      	b.n	800d446 <_printf_i+0x22e>
 800d45a:	bf00      	nop
 800d45c:	0800da01 	.word	0x0800da01
 800d460:	0800da12 	.word	0x0800da12

0800d464 <memmove>:
 800d464:	4288      	cmp	r0, r1
 800d466:	b510      	push	{r4, lr}
 800d468:	eb01 0402 	add.w	r4, r1, r2
 800d46c:	d902      	bls.n	800d474 <memmove+0x10>
 800d46e:	4284      	cmp	r4, r0
 800d470:	4623      	mov	r3, r4
 800d472:	d807      	bhi.n	800d484 <memmove+0x20>
 800d474:	1e43      	subs	r3, r0, #1
 800d476:	42a1      	cmp	r1, r4
 800d478:	d008      	beq.n	800d48c <memmove+0x28>
 800d47a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d47e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d482:	e7f8      	b.n	800d476 <memmove+0x12>
 800d484:	4402      	add	r2, r0
 800d486:	4601      	mov	r1, r0
 800d488:	428a      	cmp	r2, r1
 800d48a:	d100      	bne.n	800d48e <memmove+0x2a>
 800d48c:	bd10      	pop	{r4, pc}
 800d48e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d496:	e7f7      	b.n	800d488 <memmove+0x24>

0800d498 <_free_r>:
 800d498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d49a:	2900      	cmp	r1, #0
 800d49c:	d044      	beq.n	800d528 <_free_r+0x90>
 800d49e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4a2:	9001      	str	r0, [sp, #4]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f1a1 0404 	sub.w	r4, r1, #4
 800d4aa:	bfb8      	it	lt
 800d4ac:	18e4      	addlt	r4, r4, r3
 800d4ae:	f000 f913 	bl	800d6d8 <__malloc_lock>
 800d4b2:	4a1e      	ldr	r2, [pc, #120]	; (800d52c <_free_r+0x94>)
 800d4b4:	9801      	ldr	r0, [sp, #4]
 800d4b6:	6813      	ldr	r3, [r2, #0]
 800d4b8:	b933      	cbnz	r3, 800d4c8 <_free_r+0x30>
 800d4ba:	6063      	str	r3, [r4, #4]
 800d4bc:	6014      	str	r4, [r2, #0]
 800d4be:	b003      	add	sp, #12
 800d4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4c4:	f000 b90e 	b.w	800d6e4 <__malloc_unlock>
 800d4c8:	42a3      	cmp	r3, r4
 800d4ca:	d908      	bls.n	800d4de <_free_r+0x46>
 800d4cc:	6825      	ldr	r5, [r4, #0]
 800d4ce:	1961      	adds	r1, r4, r5
 800d4d0:	428b      	cmp	r3, r1
 800d4d2:	bf01      	itttt	eq
 800d4d4:	6819      	ldreq	r1, [r3, #0]
 800d4d6:	685b      	ldreq	r3, [r3, #4]
 800d4d8:	1949      	addeq	r1, r1, r5
 800d4da:	6021      	streq	r1, [r4, #0]
 800d4dc:	e7ed      	b.n	800d4ba <_free_r+0x22>
 800d4de:	461a      	mov	r2, r3
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	b10b      	cbz	r3, 800d4e8 <_free_r+0x50>
 800d4e4:	42a3      	cmp	r3, r4
 800d4e6:	d9fa      	bls.n	800d4de <_free_r+0x46>
 800d4e8:	6811      	ldr	r1, [r2, #0]
 800d4ea:	1855      	adds	r5, r2, r1
 800d4ec:	42a5      	cmp	r5, r4
 800d4ee:	d10b      	bne.n	800d508 <_free_r+0x70>
 800d4f0:	6824      	ldr	r4, [r4, #0]
 800d4f2:	4421      	add	r1, r4
 800d4f4:	1854      	adds	r4, r2, r1
 800d4f6:	42a3      	cmp	r3, r4
 800d4f8:	6011      	str	r1, [r2, #0]
 800d4fa:	d1e0      	bne.n	800d4be <_free_r+0x26>
 800d4fc:	681c      	ldr	r4, [r3, #0]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	6053      	str	r3, [r2, #4]
 800d502:	4421      	add	r1, r4
 800d504:	6011      	str	r1, [r2, #0]
 800d506:	e7da      	b.n	800d4be <_free_r+0x26>
 800d508:	d902      	bls.n	800d510 <_free_r+0x78>
 800d50a:	230c      	movs	r3, #12
 800d50c:	6003      	str	r3, [r0, #0]
 800d50e:	e7d6      	b.n	800d4be <_free_r+0x26>
 800d510:	6825      	ldr	r5, [r4, #0]
 800d512:	1961      	adds	r1, r4, r5
 800d514:	428b      	cmp	r3, r1
 800d516:	bf04      	itt	eq
 800d518:	6819      	ldreq	r1, [r3, #0]
 800d51a:	685b      	ldreq	r3, [r3, #4]
 800d51c:	6063      	str	r3, [r4, #4]
 800d51e:	bf04      	itt	eq
 800d520:	1949      	addeq	r1, r1, r5
 800d522:	6021      	streq	r1, [r4, #0]
 800d524:	6054      	str	r4, [r2, #4]
 800d526:	e7ca      	b.n	800d4be <_free_r+0x26>
 800d528:	b003      	add	sp, #12
 800d52a:	bd30      	pop	{r4, r5, pc}
 800d52c:	24079f00 	.word	0x24079f00

0800d530 <sbrk_aligned>:
 800d530:	b570      	push	{r4, r5, r6, lr}
 800d532:	4e0e      	ldr	r6, [pc, #56]	; (800d56c <sbrk_aligned+0x3c>)
 800d534:	460c      	mov	r4, r1
 800d536:	6831      	ldr	r1, [r6, #0]
 800d538:	4605      	mov	r5, r0
 800d53a:	b911      	cbnz	r1, 800d542 <sbrk_aligned+0x12>
 800d53c:	f000 f8bc 	bl	800d6b8 <_sbrk_r>
 800d540:	6030      	str	r0, [r6, #0]
 800d542:	4621      	mov	r1, r4
 800d544:	4628      	mov	r0, r5
 800d546:	f000 f8b7 	bl	800d6b8 <_sbrk_r>
 800d54a:	1c43      	adds	r3, r0, #1
 800d54c:	d00a      	beq.n	800d564 <sbrk_aligned+0x34>
 800d54e:	1cc4      	adds	r4, r0, #3
 800d550:	f024 0403 	bic.w	r4, r4, #3
 800d554:	42a0      	cmp	r0, r4
 800d556:	d007      	beq.n	800d568 <sbrk_aligned+0x38>
 800d558:	1a21      	subs	r1, r4, r0
 800d55a:	4628      	mov	r0, r5
 800d55c:	f000 f8ac 	bl	800d6b8 <_sbrk_r>
 800d560:	3001      	adds	r0, #1
 800d562:	d101      	bne.n	800d568 <sbrk_aligned+0x38>
 800d564:	f04f 34ff 	mov.w	r4, #4294967295
 800d568:	4620      	mov	r0, r4
 800d56a:	bd70      	pop	{r4, r5, r6, pc}
 800d56c:	24079f04 	.word	0x24079f04

0800d570 <_malloc_r>:
 800d570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d574:	1ccd      	adds	r5, r1, #3
 800d576:	f025 0503 	bic.w	r5, r5, #3
 800d57a:	3508      	adds	r5, #8
 800d57c:	2d0c      	cmp	r5, #12
 800d57e:	bf38      	it	cc
 800d580:	250c      	movcc	r5, #12
 800d582:	2d00      	cmp	r5, #0
 800d584:	4607      	mov	r7, r0
 800d586:	db01      	blt.n	800d58c <_malloc_r+0x1c>
 800d588:	42a9      	cmp	r1, r5
 800d58a:	d905      	bls.n	800d598 <_malloc_r+0x28>
 800d58c:	230c      	movs	r3, #12
 800d58e:	603b      	str	r3, [r7, #0]
 800d590:	2600      	movs	r6, #0
 800d592:	4630      	mov	r0, r6
 800d594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d598:	4e2e      	ldr	r6, [pc, #184]	; (800d654 <_malloc_r+0xe4>)
 800d59a:	f000 f89d 	bl	800d6d8 <__malloc_lock>
 800d59e:	6833      	ldr	r3, [r6, #0]
 800d5a0:	461c      	mov	r4, r3
 800d5a2:	bb34      	cbnz	r4, 800d5f2 <_malloc_r+0x82>
 800d5a4:	4629      	mov	r1, r5
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	f7ff ffc2 	bl	800d530 <sbrk_aligned>
 800d5ac:	1c43      	adds	r3, r0, #1
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	d14d      	bne.n	800d64e <_malloc_r+0xde>
 800d5b2:	6834      	ldr	r4, [r6, #0]
 800d5b4:	4626      	mov	r6, r4
 800d5b6:	2e00      	cmp	r6, #0
 800d5b8:	d140      	bne.n	800d63c <_malloc_r+0xcc>
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	4631      	mov	r1, r6
 800d5be:	4638      	mov	r0, r7
 800d5c0:	eb04 0803 	add.w	r8, r4, r3
 800d5c4:	f000 f878 	bl	800d6b8 <_sbrk_r>
 800d5c8:	4580      	cmp	r8, r0
 800d5ca:	d13a      	bne.n	800d642 <_malloc_r+0xd2>
 800d5cc:	6821      	ldr	r1, [r4, #0]
 800d5ce:	3503      	adds	r5, #3
 800d5d0:	1a6d      	subs	r5, r5, r1
 800d5d2:	f025 0503 	bic.w	r5, r5, #3
 800d5d6:	3508      	adds	r5, #8
 800d5d8:	2d0c      	cmp	r5, #12
 800d5da:	bf38      	it	cc
 800d5dc:	250c      	movcc	r5, #12
 800d5de:	4629      	mov	r1, r5
 800d5e0:	4638      	mov	r0, r7
 800d5e2:	f7ff ffa5 	bl	800d530 <sbrk_aligned>
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	d02b      	beq.n	800d642 <_malloc_r+0xd2>
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	442b      	add	r3, r5
 800d5ee:	6023      	str	r3, [r4, #0]
 800d5f0:	e00e      	b.n	800d610 <_malloc_r+0xa0>
 800d5f2:	6822      	ldr	r2, [r4, #0]
 800d5f4:	1b52      	subs	r2, r2, r5
 800d5f6:	d41e      	bmi.n	800d636 <_malloc_r+0xc6>
 800d5f8:	2a0b      	cmp	r2, #11
 800d5fa:	d916      	bls.n	800d62a <_malloc_r+0xba>
 800d5fc:	1961      	adds	r1, r4, r5
 800d5fe:	42a3      	cmp	r3, r4
 800d600:	6025      	str	r5, [r4, #0]
 800d602:	bf18      	it	ne
 800d604:	6059      	strne	r1, [r3, #4]
 800d606:	6863      	ldr	r3, [r4, #4]
 800d608:	bf08      	it	eq
 800d60a:	6031      	streq	r1, [r6, #0]
 800d60c:	5162      	str	r2, [r4, r5]
 800d60e:	604b      	str	r3, [r1, #4]
 800d610:	4638      	mov	r0, r7
 800d612:	f104 060b 	add.w	r6, r4, #11
 800d616:	f000 f865 	bl	800d6e4 <__malloc_unlock>
 800d61a:	f026 0607 	bic.w	r6, r6, #7
 800d61e:	1d23      	adds	r3, r4, #4
 800d620:	1af2      	subs	r2, r6, r3
 800d622:	d0b6      	beq.n	800d592 <_malloc_r+0x22>
 800d624:	1b9b      	subs	r3, r3, r6
 800d626:	50a3      	str	r3, [r4, r2]
 800d628:	e7b3      	b.n	800d592 <_malloc_r+0x22>
 800d62a:	6862      	ldr	r2, [r4, #4]
 800d62c:	42a3      	cmp	r3, r4
 800d62e:	bf0c      	ite	eq
 800d630:	6032      	streq	r2, [r6, #0]
 800d632:	605a      	strne	r2, [r3, #4]
 800d634:	e7ec      	b.n	800d610 <_malloc_r+0xa0>
 800d636:	4623      	mov	r3, r4
 800d638:	6864      	ldr	r4, [r4, #4]
 800d63a:	e7b2      	b.n	800d5a2 <_malloc_r+0x32>
 800d63c:	4634      	mov	r4, r6
 800d63e:	6876      	ldr	r6, [r6, #4]
 800d640:	e7b9      	b.n	800d5b6 <_malloc_r+0x46>
 800d642:	230c      	movs	r3, #12
 800d644:	603b      	str	r3, [r7, #0]
 800d646:	4638      	mov	r0, r7
 800d648:	f000 f84c 	bl	800d6e4 <__malloc_unlock>
 800d64c:	e7a1      	b.n	800d592 <_malloc_r+0x22>
 800d64e:	6025      	str	r5, [r4, #0]
 800d650:	e7de      	b.n	800d610 <_malloc_r+0xa0>
 800d652:	bf00      	nop
 800d654:	24079f00 	.word	0x24079f00

0800d658 <_realloc_r>:
 800d658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d65c:	4680      	mov	r8, r0
 800d65e:	4614      	mov	r4, r2
 800d660:	460e      	mov	r6, r1
 800d662:	b921      	cbnz	r1, 800d66e <_realloc_r+0x16>
 800d664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d668:	4611      	mov	r1, r2
 800d66a:	f7ff bf81 	b.w	800d570 <_malloc_r>
 800d66e:	b92a      	cbnz	r2, 800d67c <_realloc_r+0x24>
 800d670:	f7ff ff12 	bl	800d498 <_free_r>
 800d674:	4625      	mov	r5, r4
 800d676:	4628      	mov	r0, r5
 800d678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d67c:	f000 f838 	bl	800d6f0 <_malloc_usable_size_r>
 800d680:	4284      	cmp	r4, r0
 800d682:	4607      	mov	r7, r0
 800d684:	d802      	bhi.n	800d68c <_realloc_r+0x34>
 800d686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d68a:	d812      	bhi.n	800d6b2 <_realloc_r+0x5a>
 800d68c:	4621      	mov	r1, r4
 800d68e:	4640      	mov	r0, r8
 800d690:	f7ff ff6e 	bl	800d570 <_malloc_r>
 800d694:	4605      	mov	r5, r0
 800d696:	2800      	cmp	r0, #0
 800d698:	d0ed      	beq.n	800d676 <_realloc_r+0x1e>
 800d69a:	42bc      	cmp	r4, r7
 800d69c:	4622      	mov	r2, r4
 800d69e:	4631      	mov	r1, r6
 800d6a0:	bf28      	it	cs
 800d6a2:	463a      	movcs	r2, r7
 800d6a4:	f7ff fbb8 	bl	800ce18 <memcpy>
 800d6a8:	4631      	mov	r1, r6
 800d6aa:	4640      	mov	r0, r8
 800d6ac:	f7ff fef4 	bl	800d498 <_free_r>
 800d6b0:	e7e1      	b.n	800d676 <_realloc_r+0x1e>
 800d6b2:	4635      	mov	r5, r6
 800d6b4:	e7df      	b.n	800d676 <_realloc_r+0x1e>
	...

0800d6b8 <_sbrk_r>:
 800d6b8:	b538      	push	{r3, r4, r5, lr}
 800d6ba:	4d06      	ldr	r5, [pc, #24]	; (800d6d4 <_sbrk_r+0x1c>)
 800d6bc:	2300      	movs	r3, #0
 800d6be:	4604      	mov	r4, r0
 800d6c0:	4608      	mov	r0, r1
 800d6c2:	602b      	str	r3, [r5, #0]
 800d6c4:	f000 f81e 	bl	800d704 <_sbrk>
 800d6c8:	1c43      	adds	r3, r0, #1
 800d6ca:	d102      	bne.n	800d6d2 <_sbrk_r+0x1a>
 800d6cc:	682b      	ldr	r3, [r5, #0]
 800d6ce:	b103      	cbz	r3, 800d6d2 <_sbrk_r+0x1a>
 800d6d0:	6023      	str	r3, [r4, #0]
 800d6d2:	bd38      	pop	{r3, r4, r5, pc}
 800d6d4:	24079f08 	.word	0x24079f08

0800d6d8 <__malloc_lock>:
 800d6d8:	4801      	ldr	r0, [pc, #4]	; (800d6e0 <__malloc_lock+0x8>)
 800d6da:	f000 b811 	b.w	800d700 <__retarget_lock_acquire_recursive>
 800d6de:	bf00      	nop
 800d6e0:	24079f0c 	.word	0x24079f0c

0800d6e4 <__malloc_unlock>:
 800d6e4:	4801      	ldr	r0, [pc, #4]	; (800d6ec <__malloc_unlock+0x8>)
 800d6e6:	f000 b80c 	b.w	800d702 <__retarget_lock_release_recursive>
 800d6ea:	bf00      	nop
 800d6ec:	24079f0c 	.word	0x24079f0c

0800d6f0 <_malloc_usable_size_r>:
 800d6f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6f4:	1f18      	subs	r0, r3, #4
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	bfbc      	itt	lt
 800d6fa:	580b      	ldrlt	r3, [r1, r0]
 800d6fc:	18c0      	addlt	r0, r0, r3
 800d6fe:	4770      	bx	lr

0800d700 <__retarget_lock_acquire_recursive>:
 800d700:	4770      	bx	lr

0800d702 <__retarget_lock_release_recursive>:
 800d702:	4770      	bx	lr

0800d704 <_sbrk>:
 800d704:	4a04      	ldr	r2, [pc, #16]	; (800d718 <_sbrk+0x14>)
 800d706:	6811      	ldr	r1, [r2, #0]
 800d708:	4603      	mov	r3, r0
 800d70a:	b909      	cbnz	r1, 800d710 <_sbrk+0xc>
 800d70c:	4903      	ldr	r1, [pc, #12]	; (800d71c <_sbrk+0x18>)
 800d70e:	6011      	str	r1, [r2, #0]
 800d710:	6810      	ldr	r0, [r2, #0]
 800d712:	4403      	add	r3, r0
 800d714:	6013      	str	r3, [r2, #0]
 800d716:	4770      	bx	lr
 800d718:	24079f10 	.word	0x24079f10
 800d71c:	24079f18 	.word	0x24079f18

0800d720 <_init>:
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d722:	bf00      	nop
 800d724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d726:	bc08      	pop	{r3}
 800d728:	469e      	mov	lr, r3
 800d72a:	4770      	bx	lr

0800d72c <_fini>:
 800d72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72e:	bf00      	nop
 800d730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d732:	bc08      	pop	{r3}
 800d734:	469e      	mov	lr, r3
 800d736:	4770      	bx	lr
